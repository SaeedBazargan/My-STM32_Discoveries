
CubeAI_GestureRecognition_MPU9250_AHRS_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d264  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  0800d420  0800d420  0000e420  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfb8  0800dfb8  0000f900  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfb8  0800dfb8  0000efb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfc0  0800dfc0  0000f900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfc0  0800dfc0  0000efc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfc4  0800dfc4  0000efc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000900  20000000  0800dfc8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044b4  20000900  0800e8c8  0000f900  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20004db4  0800e8c8  0000fdb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f900  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5b6  00000000  00000000  0000f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c6a  00000000  00000000  00029ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0002db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001043  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b091  00000000  00000000  000300ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194a9  00000000  00000000  0004b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6692  00000000  00000000  000645e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0010ac77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b54  00000000  00000000  0010ad00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d4  00000000  00000000  00111854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000900 	.word	0x20000900
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d3ec 	.word	0x0800d3ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000904 	.word	0x20000904
 80001dc:	0800d3ec 	.word	0x0800d3ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a07      	ldr	r2, [pc, #28]	@ (8000f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <vApplicationGetIdleTaskMemory+0x30>)
 8000f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2280      	movs	r2, #128	@ 0x80
 8000f64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2000091c 	.word	0x2000091c
 8000f78:	200009bc 	.word	0x200009bc

08000f7c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f84:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f88:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d013      	beq.n	8000fbc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f94:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f98:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f9c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00b      	beq.n	8000fbc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa4:	e000      	b.n	8000fa8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fa6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f9      	beq.n	8000fa6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fb2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fbc:	687b      	ldr	r3, [r7, #4]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e009      	b.n	8000ff4 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffc7 	bl	8000f7c <ITM_SendChar>
	for(i = 0; i < len; i++)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dbf1      	blt.n	8000fe0 <_write+0x16>
	}
	return len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b0a0      	sub	sp, #128	@ 0x80
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f001 f873 	bl	80020f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f87b 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 f955 	bl	80012c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800101a:	f000 f8f3 	bl	8001204 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800101e:	f000 f927 	bl	8001270 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001022:	f000 f8db 	bl	80011dc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  run_imu_model();
 8001026:	f000 fd31 	bl	8001a8c <run_imu_model>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
#if Debug
  osMessageQDef(Queue_1, 1, sizeof(IMUdata_t));
 800102a:	4b2e      	ldr	r3, [pc, #184]	@ (80010e4 <main+0xdc>)
 800102c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_1Handle = osMessageCreate(osMessageQ(Queue_1), NULL);
 8001036:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fea6 	bl	8004d8e <osMessageCreate>
 8001042:	4603      	mov	r3, r0
 8001044:	4a28      	ldr	r2, [pc, #160]	@ (80010e8 <main+0xe0>)
 8001046:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001048:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <main+0xe4>)
 800104a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800104e:	461d      	mov	r5, r3
 8001050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001054:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001058:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800105c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fe33 	bl	8004cce <osThreadCreate>
 8001068:	4603      	mov	r3, r0
 800106a:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <main+0xe8>)
 800106c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* definition and creation of runTask */
  osThreadDef(runTask, StartRunTask, osPriorityNormal, 0, 128);
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <main+0xec>)
 8001070:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001074:	461d      	mov	r5, r3
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  runTaskHandle = osThreadCreate(osThread(runTask), NULL);
 8001082:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fe20 	bl	8004cce <osThreadCreate>
 800108e:	4603      	mov	r3, r0
 8001090:	4a19      	ldr	r2, [pc, #100]	@ (80010f8 <main+0xf0>)
 8001092:	6013      	str	r3, [r2, #0]

  /* definition and creation of readDataTask */
  osThreadDef(readDataTask, StartReadDataTask, osPriorityIdle, 0, 512);
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <main+0xf4>)
 8001096:	f107 041c 	add.w	r4, r7, #28
 800109a:	461d      	mov	r5, r3
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readDataTaskHandle = osThreadCreate(osThread(readDataTask), NULL);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 fe0d 	bl	8004cce <osThreadCreate>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <main+0xf8>)
 80010b8:	6013      	str	r3, [r2, #0]
#if Debug
  /* definition and creation of sendDataTask */
  osThreadDef(sendDataTask, StartSendDataTask, osPriorityNormal, 0, 512);
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <main+0xfc>)
 80010bc:	463c      	mov	r4, r7
 80010be:	461d      	mov	r5, r3
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendDataTaskHandle = osThreadCreate(osThread(sendDataTask), NULL);
 80010cc:	463b      	mov	r3, r7
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fdfc 	bl	8004cce <osThreadCreate>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <main+0x100>)
 80010da:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010dc:	f003 fdf0 	bl	8004cc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <main+0xd8>
 80010e4:	0800d420 	.word	0x0800d420
 80010e8:	20000c74 	.word	0x20000c74
 80010ec:	0800d43c 	.word	0x0800d43c
 80010f0:	20000c64 	.word	0x20000c64
 80010f4:	0800d460 	.word	0x0800d460
 80010f8:	20000c68 	.word	0x20000c68
 80010fc:	0800d48c 	.word	0x0800d48c
 8001100:	20000c6c 	.word	0x20000c6c
 8001104:	0800d4b8 	.word	0x0800d4b8
 8001108:	20000c70 	.word	0x20000c70

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	@ 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	@ 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f009 ffe4 	bl	800b0e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	4b27      	ldr	r3, [pc, #156]	@ (80011d4 <SystemClock_Config+0xc8>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	4a26      	ldr	r2, [pc, #152]	@ (80011d4 <SystemClock_Config+0xc8>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001140:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <SystemClock_Config+0xc8>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <SystemClock_Config+0xcc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a20      	ldr	r2, [pc, #128]	@ (80011d8 <SystemClock_Config+0xcc>)
 8001156:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <SystemClock_Config+0xcc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800117a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800117c:	2304      	movs	r3, #4
 800117e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001180:	2364      	movs	r3, #100	@ 0x64
 8001182:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001188:	2304      	movs	r3, #4
 800118a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f001 facd 	bl	8002730 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800119c:	f000 fdb6 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2302      	movs	r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2103      	movs	r1, #3
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fd2f 	bl	8002c20 <HAL_RCC_ClockConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011c8:	f000 fda0 	bl	8001d0c <Error_Handler>
  }
}
 80011cc:	bf00      	nop
 80011ce:	3750      	adds	r7, #80	@ 0x50
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_CRC_Init+0x20>)
 80011e2:	4a07      	ldr	r2, [pc, #28]	@ (8001200 <MX_CRC_Init+0x24>)
 80011e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_CRC_Init+0x20>)
 80011e8:	f001 f8ce 	bl	8002388 <HAL_CRC_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011f2:	f000 fd8b 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000bbc 	.word	0x20000bbc
 8001200:	40023000 	.word	0x40023000

08001204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_SPI1_Init+0x64>)
 800120a:	4a18      	ldr	r2, [pc, #96]	@ (800126c <MX_SPI1_Init+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001238:	2208      	movs	r2, #8
 800123a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <MX_SPI1_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001250:	220a      	movs	r2, #10
 8001252:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001256:	f001 ff35 	bl	80030c4 <HAL_SPI_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001260:	f000 fd54 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000bc4 	.word	0x20000bc4
 800126c:	40013000 	.word	0x40013000

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <MX_USART2_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a8:	f002 ff52 	bl	8004150 <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f000 fd2b 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000c1c 	.word	0x20000c1c
 80012c0:	40004400 	.word	0x40004400

080012c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a30      	ldr	r2, [pc, #192]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a29      	ldr	r2, [pc, #164]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a1b      	ldr	r2, [pc, #108]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <MX_GPIO_Init+0xe0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2110      	movs	r1, #16
 800134e:	4816      	ldr	r0, [pc, #88]	@ (80013a8 <MX_GPIO_Init+0xe4>)
 8001350:	f001 f9ba 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Run_Pin|LED_Error_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800135a:	4814      	ldr	r0, [pc, #80]	@ (80013ac <MX_GPIO_Init+0xe8>)
 800135c:	f001 f9b4 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001360:	2310      	movs	r3, #16
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <MX_GPIO_Init+0xe4>)
 8001378:	f001 f822 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Run_Pin LED_Error_Pin */
  GPIO_InitStruct.Pin = LED_Run_Pin|LED_Error_Pin;
 800137c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_GPIO_Init+0xe8>)
 8001396:	f001 f813 	bl	80023c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	@ 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020c00 	.word	0x40020c00

080013b0 <IMU_Init>:

/* USER CODE BEGIN 4 */
// <---- ------------ IMU Initialized ------------ ---->
void IMU_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	MPU9250.PWR_MGMT1	= CLKSEL_1;						// CLOCK_SEL_PLL
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <IMU_Init+0x44>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	MPU9250.PWR_MGMT2	= ENABLE_ALL;					// Enable All Sensors
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <IMU_Init+0x44>)
 80013bc:	2200      	movs	r2, #0
 80013be:	705a      	strb	r2, [r3, #1]
	MPU9250.Gyro_DLPF   = BW250_D970;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <IMU_Init+0x44>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	709a      	strb	r2, [r3, #2]
	MPU9250.Accel_DLPF  = BW218_D1880;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <IMU_Init+0x44>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	70da      	strb	r2, [r3, #3]
	MPU9250.Gyro_Range  = MPU9250_Gyroscope_2000;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <IMU_Init+0x44>)
 80013ce:	2203      	movs	r2, #3
 80013d0:	711a      	strb	r2, [r3, #4]
	MPU9250.Accel_Range = MPU9250_Accelerometer_16;
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <IMU_Init+0x44>)
 80013d4:	2203      	movs	r2, #3
 80013d6:	715a      	strb	r2, [r3, #5]

	if(MPU9250_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &MPU9250) != MPU9250_RESULT_OK)
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <IMU_Init+0x44>)
 80013da:	2210      	movs	r2, #16
 80013dc:	4906      	ldr	r1, [pc, #24]	@ (80013f8 <IMU_Init+0x48>)
 80013de:	4807      	ldr	r0, [pc, #28]	@ (80013fc <IMU_Init+0x4c>)
 80013e0:	f003 fac2 	bl	8004968 <MPU9250_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <IMU_Init+0x3e>
	{
		Error_Handler();
 80013ea:	f000 fc8f 	bl	8001d0c <Error_Handler>
	}
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000c78 	.word	0x20000c78
 80013f8:	40020000 	.word	0x40020000
 80013fc:	20000bc4 	.word	0x20000bc4

08001400 <IMU_readRawData>:
// <---- ------------ IMU Read Raw Data ------------ ---->
void IMU_readRawData(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	// <---- ------------ Merging Data to get real IMU data ------------ ---->
	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_ACCEL_XOUT_H, 6);
 8001404:	2306      	movs	r3, #6
 8001406:	223b      	movs	r2, #59	@ 0x3b
 8001408:	499d      	ldr	r1, [pc, #628]	@ (8001680 <IMU_readRawData+0x280>)
 800140a:	489e      	ldr	r0, [pc, #632]	@ (8001684 <IMU_readRawData+0x284>)
 800140c:	f003 fbc2 	bl	8004b94 <MPU9250_ReadData>
	Raw_Accel[0] = (int16_t)(IMU_rawData[0] << 8 | IMU_rawData[1]);
 8001410:	4b9b      	ldr	r3, [pc, #620]	@ (8001680 <IMU_readRawData+0x280>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	4b99      	ldr	r3, [pc, #612]	@ (8001680 <IMU_readRawData+0x280>)
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b99      	ldr	r3, [pc, #612]	@ (8001688 <IMU_readRawData+0x288>)
 8001424:	801a      	strh	r2, [r3, #0]
	Raw_Accel[1] = (int16_t)(IMU_rawData[2] << 8 | IMU_rawData[3]);
 8001426:	4b96      	ldr	r3, [pc, #600]	@ (8001680 <IMU_readRawData+0x280>)
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b94      	ldr	r3, [pc, #592]	@ (8001680 <IMU_readRawData+0x280>)
 8001430:	78db      	ldrb	r3, [r3, #3]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21a      	sxth	r2, r3
 8001438:	4b93      	ldr	r3, [pc, #588]	@ (8001688 <IMU_readRawData+0x288>)
 800143a:	805a      	strh	r2, [r3, #2]
	Raw_Accel[2] = (int16_t)(IMU_rawData[4] << 8 | IMU_rawData[5]);
 800143c:	4b90      	ldr	r3, [pc, #576]	@ (8001680 <IMU_readRawData+0x280>)
 800143e:	791b      	ldrb	r3, [r3, #4]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b8e      	ldr	r3, [pc, #568]	@ (8001680 <IMU_readRawData+0x280>)
 8001446:	795b      	ldrb	r3, [r3, #5]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b21a      	sxth	r2, r3
 800144e:	4b8e      	ldr	r3, [pc, #568]	@ (8001688 <IMU_readRawData+0x288>)
 8001450:	809a      	strh	r2, [r3, #4]

	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_GYRO_XOUT_H, 6);
 8001452:	2306      	movs	r3, #6
 8001454:	2243      	movs	r2, #67	@ 0x43
 8001456:	498a      	ldr	r1, [pc, #552]	@ (8001680 <IMU_readRawData+0x280>)
 8001458:	488a      	ldr	r0, [pc, #552]	@ (8001684 <IMU_readRawData+0x284>)
 800145a:	f003 fb9b 	bl	8004b94 <MPU9250_ReadData>
	Raw_Gyro[0] = (int16_t)(IMU_rawData[0] << 8 | IMU_rawData[1]);
 800145e:	4b88      	ldr	r3, [pc, #544]	@ (8001680 <IMU_readRawData+0x280>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b86      	ldr	r3, [pc, #536]	@ (8001680 <IMU_readRawData+0x280>)
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21a      	sxth	r2, r3
 8001470:	4b86      	ldr	r3, [pc, #536]	@ (800168c <IMU_readRawData+0x28c>)
 8001472:	801a      	strh	r2, [r3, #0]
	Raw_Gyro[1] = (int16_t)(IMU_rawData[2] << 8 | IMU_rawData[3]);
 8001474:	4b82      	ldr	r3, [pc, #520]	@ (8001680 <IMU_readRawData+0x280>)
 8001476:	789b      	ldrb	r3, [r3, #2]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b80      	ldr	r3, [pc, #512]	@ (8001680 <IMU_readRawData+0x280>)
 800147e:	78db      	ldrb	r3, [r3, #3]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b81      	ldr	r3, [pc, #516]	@ (800168c <IMU_readRawData+0x28c>)
 8001488:	805a      	strh	r2, [r3, #2]
	Raw_Gyro[2] = (int16_t)(IMU_rawData[4] << 8 | IMU_rawData[5]);
 800148a:	4b7d      	ldr	r3, [pc, #500]	@ (8001680 <IMU_readRawData+0x280>)
 800148c:	791b      	ldrb	r3, [r3, #4]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	4b7b      	ldr	r3, [pc, #492]	@ (8001680 <IMU_readRawData+0x280>)
 8001494:	795b      	ldrb	r3, [r3, #5]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21a      	sxth	r2, r3
 800149c:	4b7b      	ldr	r3, [pc, #492]	@ (800168c <IMU_readRawData+0x28c>)
 800149e:	809a      	strh	r2, [r3, #4]

	// <---- ------------ Removing Gyro's Noise around 0 state ------------ ---->
	Raw_Gyro[0] = (Raw_Gyro[0] <= ZERO_MAX && Raw_Gyro[0] >= ZERO_MIN)? 0: Raw_Gyro[0];
 80014a0:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <IMU_readRawData+0x28c>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	2b14      	cmp	r3, #20
 80014a8:	dc05      	bgt.n	80014b6 <IMU_readRawData+0xb6>
 80014aa:	4b78      	ldr	r3, [pc, #480]	@ (800168c <IMU_readRawData+0x28c>)
 80014ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b0:	f113 0f14 	cmn.w	r3, #20
 80014b4:	da03      	bge.n	80014be <IMU_readRawData+0xbe>
 80014b6:	4b75      	ldr	r3, [pc, #468]	@ (800168c <IMU_readRawData+0x28c>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	e000      	b.n	80014c0 <IMU_readRawData+0xc0>
 80014be:	2300      	movs	r3, #0
 80014c0:	4a72      	ldr	r2, [pc, #456]	@ (800168c <IMU_readRawData+0x28c>)
 80014c2:	8013      	strh	r3, [r2, #0]
	Raw_Gyro[1] = (Raw_Gyro[1] <= ZERO_MAX && Raw_Gyro[1] >= ZERO_MIN)? 0: Raw_Gyro[1];
 80014c4:	4b71      	ldr	r3, [pc, #452]	@ (800168c <IMU_readRawData+0x28c>)
 80014c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014ca:	2b14      	cmp	r3, #20
 80014cc:	dc05      	bgt.n	80014da <IMU_readRawData+0xda>
 80014ce:	4b6f      	ldr	r3, [pc, #444]	@ (800168c <IMU_readRawData+0x28c>)
 80014d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014d4:	f113 0f14 	cmn.w	r3, #20
 80014d8:	da03      	bge.n	80014e2 <IMU_readRawData+0xe2>
 80014da:	4b6c      	ldr	r3, [pc, #432]	@ (800168c <IMU_readRawData+0x28c>)
 80014dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014e0:	e000      	b.n	80014e4 <IMU_readRawData+0xe4>
 80014e2:	2300      	movs	r3, #0
 80014e4:	4a69      	ldr	r2, [pc, #420]	@ (800168c <IMU_readRawData+0x28c>)
 80014e6:	8053      	strh	r3, [r2, #2]
	Raw_Gyro[2] = (Raw_Gyro[2] <= ZERO_MAX && Raw_Gyro[2] >= ZERO_MIN)? 0: Raw_Gyro[2];
 80014e8:	4b68      	ldr	r3, [pc, #416]	@ (800168c <IMU_readRawData+0x28c>)
 80014ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014ee:	2b14      	cmp	r3, #20
 80014f0:	dc05      	bgt.n	80014fe <IMU_readRawData+0xfe>
 80014f2:	4b66      	ldr	r3, [pc, #408]	@ (800168c <IMU_readRawData+0x28c>)
 80014f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014f8:	f113 0f14 	cmn.w	r3, #20
 80014fc:	da03      	bge.n	8001506 <IMU_readRawData+0x106>
 80014fe:	4b63      	ldr	r3, [pc, #396]	@ (800168c <IMU_readRawData+0x28c>)
 8001500:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001504:	e000      	b.n	8001508 <IMU_readRawData+0x108>
 8001506:	2300      	movs	r3, #0
 8001508:	4a60      	ldr	r2, [pc, #384]	@ (800168c <IMU_readRawData+0x28c>)
 800150a:	8093      	strh	r3, [r2, #4]

	GX = (float)(Raw_Gyro[0] * (2000 / 32768.0));
 800150c:	4b5f      	ldr	r3, [pc, #380]	@ (800168c <IMU_readRawData+0x28c>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f80e 	bl	8000534 <__aeabi_i2d>
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b5c      	ldr	r3, [pc, #368]	@ (8001690 <IMU_readRawData+0x290>)
 800151e:	f7ff f873 	bl	8000608 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fb45 	bl	8000bb8 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	4a58      	ldr	r2, [pc, #352]	@ (8001694 <IMU_readRawData+0x294>)
 8001532:	6013      	str	r3, [r2, #0]
	GY = (float)(Raw_Gyro[1] * (2000 / 32768.0));
 8001534:	4b55      	ldr	r3, [pc, #340]	@ (800168c <IMU_readRawData+0x28c>)
 8001536:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe fffa 	bl	8000534 <__aeabi_i2d>
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b52      	ldr	r3, [pc, #328]	@ (8001690 <IMU_readRawData+0x290>)
 8001546:	f7ff f85f 	bl	8000608 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fb31 	bl	8000bb8 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	4a4f      	ldr	r2, [pc, #316]	@ (8001698 <IMU_readRawData+0x298>)
 800155a:	6013      	str	r3, [r2, #0]
	GZ = (float)(Raw_Gyro[2] * (2000 / 32768.0));
 800155c:	4b4b      	ldr	r3, [pc, #300]	@ (800168c <IMU_readRawData+0x28c>)
 800155e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffe6 	bl	8000534 <__aeabi_i2d>
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b48      	ldr	r3, [pc, #288]	@ (8001690 <IMU_readRawData+0x290>)
 800156e:	f7ff f84b 	bl	8000608 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fb1d 	bl	8000bb8 <__aeabi_d2f>
 800157e:	4603      	mov	r3, r0
 8001580:	4a46      	ldr	r2, [pc, #280]	@ (800169c <IMU_readRawData+0x29c>)
 8001582:	6013      	str	r3, [r2, #0]

	AX = (float)(Raw_Accel[0] * (16.0 / 32768.0));
 8001584:	4b40      	ldr	r3, [pc, #256]	@ (8001688 <IMU_readRawData+0x288>)
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffd2 	bl	8000534 <__aeabi_i2d>
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8001598:	f7ff f836 	bl	8000608 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff fb08 	bl	8000bb8 <__aeabi_d2f>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a3d      	ldr	r2, [pc, #244]	@ (80016a0 <IMU_readRawData+0x2a0>)
 80015ac:	6013      	str	r3, [r2, #0]
	AY = (float)(Raw_Accel[1] * (16.0 / 32768.0));
 80015ae:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <IMU_readRawData+0x288>)
 80015b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffbd 	bl	8000534 <__aeabi_i2d>
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80015c2:	f7ff f821 	bl	8000608 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff faf3 	bl	8000bb8 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a33      	ldr	r2, [pc, #204]	@ (80016a4 <IMU_readRawData+0x2a4>)
 80015d6:	6013      	str	r3, [r2, #0]
	AZ = (float)(Raw_Accel[2] * (16.0 / 32768.0));
 80015d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <IMU_readRawData+0x288>)
 80015da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffa8 	bl	8000534 <__aeabi_i2d>
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80015ec:	f7ff f80c 	bl	8000608 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fade 	bl	8000bb8 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a2a      	ldr	r2, [pc, #168]	@ (80016a8 <IMU_readRawData+0x2a8>)
 8001600:	6013      	str	r3, [r2, #0]

//	// <---- ------------ Converting Degree to Radian------------ ---->
	GX = GX / (180.0 / M_PI);
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <IMU_readRawData+0x294>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffa6 	bl	8000558 <__aeabi_f2d>
 800160c:	a31a      	add	r3, pc, #104	@ (adr r3, 8001678 <IMU_readRawData+0x278>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff f923 	bl	800085c <__aeabi_ddiv>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff facb 	bl	8000bb8 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	4a1b      	ldr	r2, [pc, #108]	@ (8001694 <IMU_readRawData+0x294>)
 8001626:	6013      	str	r3, [r2, #0]
	GY = GY / (180.0 / M_PI);
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <IMU_readRawData+0x298>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff93 	bl	8000558 <__aeabi_f2d>
 8001632:	a311      	add	r3, pc, #68	@ (adr r3, 8001678 <IMU_readRawData+0x278>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7ff f910 	bl	800085c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fab8 	bl	8000bb8 <__aeabi_d2f>
 8001648:	4603      	mov	r3, r0
 800164a:	4a13      	ldr	r2, [pc, #76]	@ (8001698 <IMU_readRawData+0x298>)
 800164c:	6013      	str	r3, [r2, #0]
	GZ = GZ / (180.0 / M_PI);
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <IMU_readRawData+0x29c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff80 	bl	8000558 <__aeabi_f2d>
 8001658:	a307      	add	r3, pc, #28	@ (adr r3, 8001678 <IMU_readRawData+0x278>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff f8fd 	bl	800085c <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff faa5 	bl	8000bb8 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <IMU_readRawData+0x29c>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	1a63c1f8 	.word	0x1a63c1f8
 800167c:	404ca5dc 	.word	0x404ca5dc
 8001680:	20000c80 	.word	0x20000c80
 8001684:	20000bc4 	.word	0x20000bc4
 8001688:	20000c90 	.word	0x20000c90
 800168c:	20000c98 	.word	0x20000c98
 8001690:	3faf4000 	.word	0x3faf4000
 8001694:	20000ca0 	.word	0x20000ca0
 8001698:	20000ca4 	.word	0x20000ca4
 800169c:	20000ca8 	.word	0x20000ca8
 80016a0:	20000cac 	.word	0x20000cac
 80016a4:	20000cb0 	.word	0x20000cb0
 80016a8:	20000cb4 	.word	0x20000cb4

080016ac <IMU_UpdateAngles>:

// <---- ------------ Convert raw data to the Roll and Pitch ------------ ---->
void IMU_UpdateAngles(float dt)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	ed2d 8b02 	vpush	{d8}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	ed87 0a01 	vstr	s0, [r7, #4]
    static int first_run = 1;
    static float last_roll, last_pitch;

    IMUdata_t data;

    if(first_run)
 80016ba:	4b94      	ldr	r3, [pc, #592]	@ (800190c <IMU_UpdateAngles+0x260>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d051      	beq.n	8001766 <IMU_UpdateAngles+0xba>
    {
        float roll_acc = atan2f(AY, sqrtf(AX*AX + AZ*AZ));
 80016c2:	4b93      	ldr	r3, [pc, #588]	@ (8001910 <IMU_UpdateAngles+0x264>)
 80016c4:	ed93 8a00 	vldr	s16, [r3]
 80016c8:	4b92      	ldr	r3, [pc, #584]	@ (8001914 <IMU_UpdateAngles+0x268>)
 80016ca:	ed93 7a00 	vldr	s14, [r3]
 80016ce:	4b91      	ldr	r3, [pc, #580]	@ (8001914 <IMU_UpdateAngles+0x268>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001918 <IMU_UpdateAngles+0x26c>)
 80016da:	edd3 6a00 	vldr	s13, [r3]
 80016de:	4b8e      	ldr	r3, [pc, #568]	@ (8001918 <IMU_UpdateAngles+0x26c>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ec:	eeb0 0a67 	vmov.f32	s0, s15
 80016f0:	f00b fca4 	bl	800d03c <sqrtf>
 80016f4:	eef0 7a40 	vmov.f32	s15, s0
 80016f8:	eef0 0a67 	vmov.f32	s1, s15
 80016fc:	eeb0 0a48 	vmov.f32	s0, s16
 8001700:	f00b fc9a 	bl	800d038 <atan2f>
 8001704:	ed87 0a05 	vstr	s0, [r7, #20]
        float pitch_acc = atan2f(-AX, sqrtf(AY*AY + AZ*AZ));
 8001708:	4b82      	ldr	r3, [pc, #520]	@ (8001914 <IMU_UpdateAngles+0x268>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	eeb1 8a67 	vneg.f32	s16, s15
 8001712:	4b7f      	ldr	r3, [pc, #508]	@ (8001910 <IMU_UpdateAngles+0x264>)
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	4b7d      	ldr	r3, [pc, #500]	@ (8001910 <IMU_UpdateAngles+0x264>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001722:	4b7d      	ldr	r3, [pc, #500]	@ (8001918 <IMU_UpdateAngles+0x26c>)
 8001724:	edd3 6a00 	vldr	s13, [r3]
 8001728:	4b7b      	ldr	r3, [pc, #492]	@ (8001918 <IMU_UpdateAngles+0x26c>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	f00b fc7f 	bl	800d03c <sqrtf>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
 8001742:	eef0 0a67 	vmov.f32	s1, s15
 8001746:	eeb0 0a48 	vmov.f32	s0, s16
 800174a:	f00b fc75 	bl	800d038 <atan2f>
 800174e:	ed87 0a04 	vstr	s0, [r7, #16]
        last_roll = roll_acc;
 8001752:	4a72      	ldr	r2, [pc, #456]	@ (800191c <IMU_UpdateAngles+0x270>)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	6013      	str	r3, [r2, #0]
        last_pitch = pitch_acc;
 8001758:	4a71      	ldr	r2, [pc, #452]	@ (8001920 <IMU_UpdateAngles+0x274>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6013      	str	r3, [r2, #0]
        first_run = 0;
 800175e:	4b6b      	ldr	r3, [pc, #428]	@ (800190c <IMU_UpdateAngles+0x260>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e0cc      	b.n	8001900 <IMU_UpdateAngles+0x254>
        return;
    }

    // Gyro integration
    float gyro_roll = last_roll + GX * dt;
 8001766:	4b6f      	ldr	r3, [pc, #444]	@ (8001924 <IMU_UpdateAngles+0x278>)
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001774:	4b69      	ldr	r3, [pc, #420]	@ (800191c <IMU_UpdateAngles+0x270>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gyro_pitch = last_pitch + GY * dt;
 8001782:	4b69      	ldr	r3, [pc, #420]	@ (8001928 <IMU_UpdateAngles+0x27c>)
 8001784:	ed93 7a00 	vldr	s14, [r3]
 8001788:	edd7 7a01 	vldr	s15, [r7, #4]
 800178c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001790:	4b63      	ldr	r3, [pc, #396]	@ (8001920 <IMU_UpdateAngles+0x274>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	edc7 7a08 	vstr	s15, [r7, #32]

    // Accelerometer angles
    float roll_acc = atan2f(AY, sqrtf(AX * AX + AZ * AZ));
 800179e:	4b5c      	ldr	r3, [pc, #368]	@ (8001910 <IMU_UpdateAngles+0x264>)
 80017a0:	ed93 8a00 	vldr	s16, [r3]
 80017a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001914 <IMU_UpdateAngles+0x268>)
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001914 <IMU_UpdateAngles+0x268>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b4:	4b58      	ldr	r3, [pc, #352]	@ (8001918 <IMU_UpdateAngles+0x26c>)
 80017b6:	edd3 6a00 	vldr	s13, [r3]
 80017ba:	4b57      	ldr	r3, [pc, #348]	@ (8001918 <IMU_UpdateAngles+0x26c>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	f00b fc36 	bl	800d03c <sqrtf>
 80017d0:	eef0 7a40 	vmov.f32	s15, s0
 80017d4:	eef0 0a67 	vmov.f32	s1, s15
 80017d8:	eeb0 0a48 	vmov.f32	s0, s16
 80017dc:	f00b fc2c 	bl	800d038 <atan2f>
 80017e0:	ed87 0a07 	vstr	s0, [r7, #28]
    float pitch_acc = atan2f(-AX, sqrtf(AY * AY + AZ * AZ));
 80017e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001914 <IMU_UpdateAngles+0x268>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	eeb1 8a67 	vneg.f32	s16, s15
 80017ee:	4b48      	ldr	r3, [pc, #288]	@ (8001910 <IMU_UpdateAngles+0x264>)
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <IMU_UpdateAngles+0x264>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fe:	4b46      	ldr	r3, [pc, #280]	@ (8001918 <IMU_UpdateAngles+0x26c>)
 8001800:	edd3 6a00 	vldr	s13, [r3]
 8001804:	4b44      	ldr	r3, [pc, #272]	@ (8001918 <IMU_UpdateAngles+0x26c>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	eeb0 0a67 	vmov.f32	s0, s15
 8001816:	f00b fc11 	bl	800d03c <sqrtf>
 800181a:	eef0 7a40 	vmov.f32	s15, s0
 800181e:	eef0 0a67 	vmov.f32	s1, s15
 8001822:	eeb0 0a48 	vmov.f32	s0, s16
 8001826:	f00b fc07 	bl	800d038 <atan2f>
 800182a:	ed87 0a06 	vstr	s0, [r7, #24]

    // Complementary filter
    Roll = ALPHA * gyro_roll + (1 - ALPHA) * roll_acc;
 800182e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001832:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800192c <IMU_UpdateAngles+0x280>
 8001836:	ee27 7a87 	vmul.f32	s14, s15, s14
 800183a:	edd7 7a07 	vldr	s15, [r7, #28]
 800183e:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001930 <IMU_UpdateAngles+0x284>
 8001842:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184a:	4b3a      	ldr	r3, [pc, #232]	@ (8001934 <IMU_UpdateAngles+0x288>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
    Pitch = ALPHA * gyro_pitch + (1 - ALPHA) * pitch_acc;
 8001850:	edd7 7a08 	vldr	s15, [r7, #32]
 8001854:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800192c <IMU_UpdateAngles+0x280>
 8001858:	ee27 7a87 	vmul.f32	s14, s15, s14
 800185c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001860:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001930 <IMU_UpdateAngles+0x284>
 8001864:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <IMU_UpdateAngles+0x28c>)
 800186e:	edc3 7a00 	vstr	s15, [r3]

    // Yaw integration (will drift without magnetometer)
    Yaw += GZ * dt;
 8001872:	4b32      	ldr	r3, [pc, #200]	@ (800193c <IMU_UpdateAngles+0x290>)
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	edd7 7a01 	vldr	s15, [r7, #4]
 800187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001880:	4b2f      	ldr	r3, [pc, #188]	@ (8001940 <IMU_UpdateAngles+0x294>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188a:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <IMU_UpdateAngles+0x294>)
 800188c:	edc3 7a00 	vstr	s15, [r3]

    // Store for next iteration
    last_roll = Roll;
 8001890:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <IMU_UpdateAngles+0x288>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a21      	ldr	r2, [pc, #132]	@ (800191c <IMU_UpdateAngles+0x270>)
 8001896:	6013      	str	r3, [r2, #0]
    last_pitch = Pitch;
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <IMU_UpdateAngles+0x28c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a20      	ldr	r2, [pc, #128]	@ (8001920 <IMU_UpdateAngles+0x274>)
 800189e:	6013      	str	r3, [r2, #0]

    data.Shifted_Roll  = (Roll + 10) * 10;
 80018a0:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <IMU_UpdateAngles+0x288>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ba:	edc7 7a00 	vstr	s15, [r7]
 80018be:	783b      	ldrb	r3, [r7, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	733b      	strb	r3, [r7, #12]
    data.Shifted_Pitch = (Pitch + 10) * 10;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <IMU_UpdateAngles+0x28c>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018de:	edc7 7a00 	vstr	s15, [r7]
 80018e2:	783b      	ldrb	r3, [r7, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	737b      	strb	r3, [r7, #13]
    osMessagePut(Queue_1Handle, &data, osWaitForever);
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <IMU_UpdateAngles+0x298>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f107 010c 	add.w	r1, r7, #12
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 fa73 	bl	8004de0 <osMessagePut>
    osDelay(100);
 80018fa:	2064      	movs	r0, #100	@ 0x64
 80018fc:	f003 fa33 	bl	8004d66 <osDelay>
}
 8001900:	3728      	adds	r7, #40	@ 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	ecbd 8b02 	vpop	{d8}
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000000 	.word	0x20000000
 8001910:	20000cb0 	.word	0x20000cb0
 8001914:	20000cac 	.word	0x20000cac
 8001918:	20000cb4 	.word	0x20000cb4
 800191c:	20000e40 	.word	0x20000e40
 8001920:	20000e44 	.word	0x20000e44
 8001924:	20000ca0 	.word	0x20000ca0
 8001928:	20000ca4 	.word	0x20000ca4
 800192c:	3f7ae148 	.word	0x3f7ae148
 8001930:	3ca3d700 	.word	0x3ca3d700
 8001934:	20000cb8 	.word	0x20000cb8
 8001938:	20000cbc 	.word	0x20000cbc
 800193c:	20000ca8 	.word	0x20000ca8
 8001940:	20000cc0 	.word	0x20000cc0
 8001944:	20000c74 	.word	0x20000c74

08001948 <StartRunTask>:

// <---- ------------ Check RunTime Task ------------ ---->
void StartRunTask(void const * argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 8001950:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001954:	4804      	ldr	r0, [pc, #16]	@ (8001968 <StartRunTask+0x20>)
 8001956:	f000 fed0 	bl	80026fa <HAL_GPIO_TogglePin>
    osDelay(500);
 800195a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800195e:	f003 fa02 	bl	8004d66 <osDelay>
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 8001962:	bf00      	nop
 8001964:	e7f4      	b.n	8001950 <StartRunTask+0x8>
 8001966:	bf00      	nop
 8001968:	40020c00 	.word	0x40020c00

0800196c <StartReadDataTask>:
  }
}

// <---- ------------ Reading raw data and converting Task ------------ ---->
void StartReadDataTask(void const * argument)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t last_time = HAL_GetTick();
 8001974:	f000 fbf6 	bl	8002164 <HAL_GetTick>
 8001978:	6178      	str	r0, [r7, #20]
  uint32_t now = HAL_GetTick();
 800197a:	f000 fbf3 	bl	8002164 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]
  float dt = (now - last_time) * 0.001f;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800198e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80019d4 <StartReadDataTask+0x68>
 8001992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001996:	edc7 7a03 	vstr	s15, [r7, #12]

  IMU_Init();
 800199a:	f7ff fd09 	bl	80013b0 <IMU_Init>

  for(;;)
  {
	IMU_readRawData();
 800199e:	f7ff fd2f 	bl	8001400 <IMU_readRawData>

	now = HAL_GetTick();
 80019a2:	f000 fbdf 	bl	8002164 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]
    dt = (now - last_time) * 0.001f;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80019d4 <StartReadDataTask+0x68>
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019be:	edc7 7a03 	vstr	s15, [r7, #12]
    last_time = now;
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	617b      	str	r3, [r7, #20]

    IMU_UpdateAngles(dt);
 80019c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80019ca:	f7ff fe6f 	bl	80016ac <IMU_UpdateAngles>
	IMU_readRawData();
 80019ce:	bf00      	nop
 80019d0:	e7e5      	b.n	800199e <StartReadDataTask+0x32>
 80019d2:	bf00      	nop
 80019d4:	3a83126f 	.word	0x3a83126f

080019d8 <StartSendDataTask>:
  }
}

// <---- ------------ Sending to the PC Task ------------ ---->
void StartSendDataTask(void const * argument)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0a0      	sub	sp, #128	@ 0x80
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  IMUdata_t *data;
  osEvent evt;

  for(;;)
  {
    evt = osMessageGet(Queue_1Handle, osWaitForever);
 80019e0:	4b26      	ldr	r3, [pc, #152]	@ (8001a7c <StartSendDataTask+0xa4>)
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fa37 	bl	8004e60 <osMessageGet>
    if (evt.status == osEventMessage)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b10      	cmp	r3, #16
 80019f6:	d1f3      	bne.n	80019e0 <StartSendDataTask+0x8>
    {
    	data = evt.value.p;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	67fb      	str	r3, [r7, #124]	@ 0x7c

    	printf("Roll ----> %d \r\n", data->Shifted_Roll);
 80019fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	481f      	ldr	r0, [pc, #124]	@ (8001a80 <StartSendDataTask+0xa8>)
 8001a04:	f009 fa08 	bl	800ae18 <iprintf>
    	buf_len = sprintf(buf, "Roll ----> %d \r\n", data->Shifted_Roll);
 8001a08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	491b      	ldr	r1, [pc, #108]	@ (8001a80 <StartSendDataTask+0xa8>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f009 fa6f 	bl	800aef8 <siprintf>
 8001a1a:	67b8      	str	r0, [r7, #120]	@ 0x78
    	HAL_UART_Transmit(&huart2, buf, buf_len, 100);
 8001a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	f107 0114 	add.w	r1, r7, #20
 8001a24:	2364      	movs	r3, #100	@ 0x64
 8001a26:	4817      	ldr	r0, [pc, #92]	@ (8001a84 <StartSendDataTask+0xac>)
 8001a28:	f002 fbe2 	bl	80041f0 <HAL_UART_Transmit>
    	memset(buf, 0, buf_len);
 8001a2c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f009 fb57 	bl	800b0e8 <memset>

    	printf("Pitch ----> %d \r\n", data->Shifted_Pitch);
 8001a3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a3c:	785b      	ldrb	r3, [r3, #1]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4811      	ldr	r0, [pc, #68]	@ (8001a88 <StartSendDataTask+0xb0>)
 8001a42:	f009 f9e9 	bl	800ae18 <iprintf>
    	buf_len = sprintf(buf, "Pitch ----> %d \r\n", data->Shifted_Pitch);
 8001a46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a48:	785b      	ldrb	r3, [r3, #1]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	490d      	ldr	r1, [pc, #52]	@ (8001a88 <StartSendDataTask+0xb0>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f009 fa50 	bl	800aef8 <siprintf>
 8001a58:	67b8      	str	r0, [r7, #120]	@ 0x78
    	HAL_UART_Transmit(&huart2, buf, buf_len, 100);
 8001a5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	f107 0114 	add.w	r1, r7, #20
 8001a62:	2364      	movs	r3, #100	@ 0x64
 8001a64:	4807      	ldr	r0, [pc, #28]	@ (8001a84 <StartSendDataTask+0xac>)
 8001a66:	f002 fbc3 	bl	80041f0 <HAL_UART_Transmit>
    	memset(buf, 0, buf_len);
 8001a6a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f009 fb38 	bl	800b0e8 <memset>
    evt = osMessageGet(Queue_1Handle, osWaitForever);
 8001a78:	e7b2      	b.n	80019e0 <StartSendDataTask+0x8>
 8001a7a:	bf00      	nop
 8001a7c:	20000c74 	.word	0x20000c74
 8001a80:	0800d4d4 	.word	0x0800d4d4
 8001a84:	20000c1c 	.word	0x20000c1c
 8001a88:	0800d4e8 	.word	0x0800d4e8

08001a8c <run_imu_model>:
  }
}


int run_imu_model(void)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b0b3      	sub	sp, #204	@ 0xcc
 8001a90:	af00      	add	r7, sp, #0
	printf("Initializing IMU Model...\n");
 8001a92:	4876      	ldr	r0, [pc, #472]	@ (8001c6c <run_imu_model+0x1e0>)
 8001a94:	f009 fa28 	bl	800aee8 <puts>

	    ai_error err;
	    ai_network_report report;

	    // Initialize model instance
	    const ai_handle act[] = { activations };
 8001a98:	4b75      	ldr	r3, [pc, #468]	@ (8001c70 <run_imu_model+0x1e4>)
 8001a9a:	60fb      	str	r3, [r7, #12]
	    err = ai_imu_model_create_and_init(&imu_model, act, NULL);
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4873      	ldr	r0, [pc, #460]	@ (8001c74 <run_imu_model+0x1e8>)
 8001aa6:	f005 fd4f 	bl	8007548 <ai_imu_model_create_and_init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	    if (err.type != AI_ERROR_NONE)
 8001ab0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <run_imu_model+0x34>
	    {
	        printf("Error: could not create NN instance\n");
 8001ab8:	486f      	ldr	r0, [pc, #444]	@ (8001c78 <run_imu_model+0x1ec>)
 8001aba:	f009 fa15 	bl	800aee8 <puts>
	        return;
 8001abe:	e0d1      	b.n	8001c64 <run_imu_model+0x1d8>
	    }

	    // Get model report (optional, but useful)
	    if (!ai_imu_model_get_report(imu_model, &report))
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8001c74 <run_imu_model+0x1e8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f107 0210 	add.w	r2, r7, #16
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 fcae 	bl	800742c <ai_imu_model_get_report>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f083 0301 	eor.w	r3, r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <run_imu_model+0x58>
	    {
	        printf("Error: get report failed\n");
 8001adc:	4867      	ldr	r0, [pc, #412]	@ (8001c7c <run_imu_model+0x1f0>)
 8001ade:	f009 fa03 	bl	800aee8 <puts>
	        return;
 8001ae2:	e0bf      	b.n	8001c64 <run_imu_model+0x1d8>
	    }

	    ai_input = &report.inputs[0];
 8001ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ae6:	4a66      	ldr	r2, [pc, #408]	@ (8001c80 <run_imu_model+0x1f4>)
 8001ae8:	6013      	str	r3, [r2, #0]
	    ai_output = &report.outputs[0];
 8001aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aec:	4a65      	ldr	r2, [pc, #404]	@ (8001c84 <run_imu_model+0x1f8>)
 8001aee:	6013      	str	r3, [r2, #0]

	    // Assign input/output buffers
	    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001af0:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <run_imu_model+0x1f4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a64      	ldr	r2, [pc, #400]	@ (8001c88 <run_imu_model+0x1fc>)
 8001af6:	605a      	str	r2, [r3, #4]
	    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001af8:	4b62      	ldr	r3, [pc, #392]	@ (8001c84 <run_imu_model+0x1f8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a63      	ldr	r2, [pc, #396]	@ (8001c8c <run_imu_model+0x200>)
 8001afe:	605a      	str	r2, [r3, #4]

	    printf("Model name      : %s\n", report.model_name);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4862      	ldr	r0, [pc, #392]	@ (8001c90 <run_imu_model+0x204>)
 8001b06:	f009 f987 	bl	800ae18 <iprintf>
	    printf("Input shape     : (%d, %d, %d)\n",
	        AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_HEIGHT),
 8001b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c80 <run_imu_model+0x1f4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	330c      	adds	r3, #12
	    printf("Input shape     : (%d, %d, %d)\n",
 8001b12:	6819      	ldr	r1, [r3, #0]
	        AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_WIDTH),
 8001b14:	4b5a      	ldr	r3, [pc, #360]	@ (8001c80 <run_imu_model+0x1f4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	3308      	adds	r3, #8
	    printf("Input shape     : (%d, %d, %d)\n",
 8001b1c:	681a      	ldr	r2, [r3, #0]
	        AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_CHANNEL));
 8001b1e:	4b58      	ldr	r3, [pc, #352]	@ (8001c80 <run_imu_model+0x1f4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	3304      	adds	r3, #4
	    printf("Input shape     : (%d, %d, %d)\n",
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	485a      	ldr	r0, [pc, #360]	@ (8001c94 <run_imu_model+0x208>)
 8001b2a:	f009 f975 	bl	800ae18 <iprintf>
	    printf("Output shape    : (%d, %d, %d)\n",
	        AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_HEIGHT),
 8001b2e:	4b55      	ldr	r3, [pc, #340]	@ (8001c84 <run_imu_model+0x1f8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	330c      	adds	r3, #12
	    printf("Output shape    : (%d, %d, %d)\n",
 8001b36:	6819      	ldr	r1, [r3, #0]
	        AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_WIDTH),
 8001b38:	4b52      	ldr	r3, [pc, #328]	@ (8001c84 <run_imu_model+0x1f8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	3308      	adds	r3, #8
	    printf("Output shape    : (%d, %d, %d)\n",
 8001b40:	681a      	ldr	r2, [r3, #0]
	        AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_CHANNEL));
 8001b42:	4b50      	ldr	r3, [pc, #320]	@ (8001c84 <run_imu_model+0x1f8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	3304      	adds	r3, #4
	    printf("Output shape    : (%d, %d, %d)\n",
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4852      	ldr	r0, [pc, #328]	@ (8001c98 <run_imu_model+0x20c>)
 8001b4e:	f009 f963 	bl	800ae18 <iprintf>

	    // ==== STEP 1: Prepare input ====
	    float roll = 102.0f;
 8001b52:	4b52      	ldr	r3, [pc, #328]	@ (8001c9c <run_imu_model+0x210>)
 8001b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	    float pitch = 104.0f;
 8001b58:	4b51      	ldr	r3, [pc, #324]	@ (8001ca0 <run_imu_model+0x214>)
 8001b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	    // Use same normalization as training
	    float mean_roll = 102.47f;
 8001b5e:	4b51      	ldr	r3, [pc, #324]	@ (8001ca4 <run_imu_model+0x218>)
 8001b60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	    float std_roll  = 4.02f;
 8001b64:	4b50      	ldr	r3, [pc, #320]	@ (8001ca8 <run_imu_model+0x21c>)
 8001b66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	    float mean_pitch = 104.19f;
 8001b6a:	4b50      	ldr	r3, [pc, #320]	@ (8001cac <run_imu_model+0x220>)
 8001b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	    float std_pitch  = 3.99f;
 8001b70:	4b4f      	ldr	r3, [pc, #316]	@ (8001cb0 <run_imu_model+0x224>)
 8001b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	    ((ai_float *)in_data)[0] = (roll - mean_roll) / std_roll;
 8001b76:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001b7a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001b7e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b82:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <run_imu_model+0x1fc>)
 8001b84:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
	    ((ai_float *)in_data)[1] = (pitch - mean_pitch) / std_pitch;
 8001b90:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8001b94:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001b98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b9c:	4b45      	ldr	r3, [pc, #276]	@ (8001cb4 <run_imu_model+0x228>)
 8001b9e:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8001ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba6:	edc3 7a00 	vstr	s15, [r3]

	    // ==== STEP 2: Run inference ====
	    ai_i32 batch = ai_imu_model_run(imu_model, ai_input, ai_output);
 8001baa:	4b32      	ldr	r3, [pc, #200]	@ (8001c74 <run_imu_model+0x1e8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a34      	ldr	r2, [pc, #208]	@ (8001c80 <run_imu_model+0x1f4>)
 8001bb0:	6811      	ldr	r1, [r2, #0]
 8001bb2:	4a34      	ldr	r2, [pc, #208]	@ (8001c84 <run_imu_model+0x1f8>)
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 fd80 	bl	80076bc <ai_imu_model_run>
 8001bbc:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
	    if (batch != 1)
 8001bc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d003      	beq.n	8001bd0 <run_imu_model+0x144>
	    {
	        printf("Error: inference failed\n");
 8001bc8:	483b      	ldr	r0, [pc, #236]	@ (8001cb8 <run_imu_model+0x22c>)
 8001bca:	f009 f98d 	bl	800aee8 <puts>
	        return;
 8001bce:	e049      	b.n	8001c64 <run_imu_model+0x1d8>
	    }

	    // ==== STEP 3: Interpret output ====
	    ai_float *output = (ai_float *)out_data;
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c8c <run_imu_model+0x200>)
 8001bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	    int predicted_label = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    float max_score = output[0];
 8001bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	    for (int i = 1; i < 3; i++)
 8001be6:	2301      	movs	r3, #1
 8001be8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001bec:	e020      	b.n	8001c30 <run_imu_model+0x1a4>
	    {
	        if (output[i] > max_score)
 8001bee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001bf8:	4413      	add	r3, r2
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8001c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d50c      	bpl.n	8001c26 <run_imu_model+0x19a>
	        {
	            max_score = output[i];
 8001c0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001c16:	4413      	add	r3, r2
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	            predicted_label = i;
 8001c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    for (int i = 1; i < 3; i++)
 8001c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001c30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	ddda      	ble.n	8001bee <run_imu_model+0x162>
	        }
	    }

	    const char* label_names[] = {"Left", "Right", "Motionless"};
 8001c38:	4a20      	ldr	r2, [pc, #128]	@ (8001cbc <run_imu_model+0x230>)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    printf("Prediction: %s (score: %.2f)\n", label_names[predicted_label], max_score);
 8001c42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	33c8      	adds	r3, #200	@ 0xc8
 8001c4a:	443b      	add	r3, r7
 8001c4c:	f853 4cc8 	ldr.w	r4, [r3, #-200]
 8001c50:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001c54:	f7fe fc80 	bl	8000558 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	4818      	ldr	r0, [pc, #96]	@ (8001cc0 <run_imu_model+0x234>)
 8001c60:	f009 f8da 	bl	800ae18 <iprintf>
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	37cc      	adds	r7, #204	@ 0xcc
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}
 8001c6c:	0800d4fc 	.word	0x0800d4fc
 8001c70:	20000cc4 	.word	0x20000cc4
 8001c74:	20000e34 	.word	0x20000e34
 8001c78:	0800d518 	.word	0x0800d518
 8001c7c:	0800d53c 	.word	0x0800d53c
 8001c80:	20000e38 	.word	0x20000e38
 8001c84:	20000e3c 	.word	0x20000e3c
 8001c88:	20000e2c 	.word	0x20000e2c
 8001c8c:	20000e30 	.word	0x20000e30
 8001c90:	0800d558 	.word	0x0800d558
 8001c94:	0800d570 	.word	0x0800d570
 8001c98:	0800d590 	.word	0x0800d590
 8001c9c:	42cc0000 	.word	0x42cc0000
 8001ca0:	42d00000 	.word	0x42d00000
 8001ca4:	42ccf0a4 	.word	0x42ccf0a4
 8001ca8:	4080a3d7 	.word	0x4080a3d7
 8001cac:	42d06148 	.word	0x42d06148
 8001cb0:	407f5c29 	.word	0x407f5c29
 8001cb4:	20000e30 	.word	0x20000e30
 8001cb8:	0800d5b0 	.word	0x0800d5b0
 8001cbc:	0800d604 	.word	0x0800d604
 8001cc0:	0800d5c8 	.word	0x0800d5c8

08001cc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 8001ccc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cd0:	4804      	ldr	r0, [pc, #16]	@ (8001ce4 <StartDefaultTask+0x20>)
 8001cd2:	f000 fd12 	bl	80026fa <HAL_GPIO_TogglePin>
    osDelay(500);
 8001cd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cda:	f003 f844 	bl	8004d66 <osDelay>
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 8001cde:	bf00      	nop
 8001ce0:	e7f4      	b.n	8001ccc <StartDefaultTask+0x8>
 8001ce2:	bf00      	nop
 8001ce4:	40020c00 	.word	0x40020c00

08001ce8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cfa:	f000 fa1f 	bl	800213c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40014800 	.word	0x40014800

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_Error_GPIO_Port, LED_Error_Pin, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d16:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <Error_Handler+0x18>)
 8001d18:	f000 fcd6 	bl	80026c8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1c:	b672      	cpsid	i
}
 8001d1e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <Error_Handler+0x14>
 8001d24:	40020c00 	.word	0x40020c00

08001d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_MspInit+0x54>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <HAL_MspInit+0x54>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_MspInit+0x54>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_MspInit+0x54>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <HAL_MspInit+0x54>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5a:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <HAL_MspInit+0x54>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	210f      	movs	r1, #15
 8001d6a:	f06f 0001 	mvn.w	r0, #1
 8001d6e:	f000 fae1 	bl	8002334 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <HAL_CRC_MspInit+0x3c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10d      	bne.n	8001dae <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_CRC_MspInit+0x40>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <HAL_CRC_MspInit+0x40>)
 8001d9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <HAL_CRC_MspInit+0x40>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023000 	.word	0x40023000
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	@ 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	@ (8001e48 <HAL_SPI_MspInit+0x84>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12b      	bne.n	8001e3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_SPI_MspInit+0x88>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <HAL_SPI_MspInit+0x88>)
 8001df0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_SPI_MspInit+0x88>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_SPI_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <HAL_SPI_MspInit+0x88>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_SPI_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e1e:	23e0      	movs	r3, #224	@ 0xe0
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <HAL_SPI_MspInit+0x8c>)
 8001e3a:	f000 fac1 	bl	80023c0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	@ 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40013000 	.word	0x40013000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000

08001e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <HAL_UART_MspInit+0x84>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12b      	bne.n	8001ece <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_UART_MspInit+0x88>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <HAL_UART_MspInit+0x88>)
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_UART_MspInit+0x88>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_UART_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a10      	ldr	r2, [pc, #64]	@ (8001edc <HAL_UART_MspInit+0x88>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_UART_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eae:	230c      	movs	r3, #12
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001eca:	f000 fa79 	bl	80023c0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	@ 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40004400 	.word	0x40004400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	@ 0x30
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb4 <HAL_InitTick+0xd0>)
 8001efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efc:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb4 <HAL_InitTick+0xd0>)
 8001efe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f02:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f04:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <HAL_InitTick+0xd0>)
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f10:	f107 020c 	add.w	r2, r7, #12
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 f8a0 	bl	8003060 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f20:	f001 f88a 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 8001f24:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f28:	4a23      	ldr	r2, [pc, #140]	@ (8001fb8 <HAL_InitTick+0xd4>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9b      	lsrs	r3, r3, #18
 8001f30:	3b01      	subs	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001f34:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <HAL_InitTick+0xd8>)
 8001f36:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <HAL_InitTick+0xdc>)
 8001f38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001f3a:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_InitTick+0xd8>)
 8001f3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f40:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001f42:	4a1e      	ldr	r2, [pc, #120]	@ (8001fbc <HAL_InitTick+0xd8>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <HAL_InitTick+0xd8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_InitTick+0xd8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <HAL_InitTick+0xd8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001f5a:	4818      	ldr	r0, [pc, #96]	@ (8001fbc <HAL_InitTick+0xd8>)
 8001f5c:	f001 fe84 	bl	8003c68 <HAL_TIM_Base_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001f6e:	4813      	ldr	r0, [pc, #76]	@ (8001fbc <HAL_InitTick+0xd8>)
 8001f70:	f001 fed4 	bl	8003d1c <HAL_TIM_Base_Start_IT>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d111      	bne.n	8001fa6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f82:	201a      	movs	r0, #26
 8001f84:	f000 f9f2 	bl	800236c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	d808      	bhi.n	8001fa0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	201a      	movs	r0, #26
 8001f94:	f000 f9ce 	bl	8002334 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f98:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <HAL_InitTick+0xe0>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e002      	b.n	8001fa6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3730      	adds	r7, #48	@ 0x30
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	20000e48 	.word	0x20000e48
 8001fc0:	40014800 	.word	0x40014800
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <NMI_Handler+0x4>

08001fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <HardFault_Handler+0x4>

08001fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <MemManage_Handler+0x4>

08001fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <BusFault_Handler+0x4>

08001fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <UsageFault_Handler+0x4>

08001ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002006:	f001 feeb 	bl	8003de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000e48 	.word	0x20000e48

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	@ (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f009 f908 	bl	800b258 <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20020000 	.word	0x20020000
 8002074:	00000800 	.word	0x00000800
 8002078:	20000e90 	.word	0x20000e90
 800207c:	20004db8 	.word	0x20004db8

08002080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <SystemInit+0x20>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <SystemInit+0x20>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a8:	f7ff ffea 	bl	8002080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ac:	480c      	ldr	r0, [pc, #48]	@ (80020e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ae:	490d      	ldr	r1, [pc, #52]	@ (80020e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020c4:	4c0a      	ldr	r4, [pc, #40]	@ (80020f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d2:	f009 f8c7 	bl	800b264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d6:	f7fe ff97 	bl	8001008 <main>
  bx  lr    
 80020da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e4:	20000900 	.word	0x20000900
  ldr r2, =_sidata
 80020e8:	0800dfc8 	.word	0x0800dfc8
  ldr r2, =_sbss
 80020ec:	20000900 	.word	0x20000900
  ldr r4, =_ebss
 80020f0:	20004db4 	.word	0x20004db4

080020f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC_IRQHandler>
	...

080020f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <HAL_Init+0x40>)
 8002102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <HAL_Init+0x40>)
 800210e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <HAL_Init+0x40>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002120:	2003      	movs	r0, #3
 8002122:	f000 f8fc 	bl	800231e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002126:	200f      	movs	r0, #15
 8002128:	f7ff fedc 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800212c:	f7ff fdfc 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00

0800213c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_IncTick+0x20>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_IncTick+0x24>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <HAL_IncTick+0x24>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	2000000c 	.word	0x2000000c
 8002160:	20000e94 	.word	0x20000e94

08002164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <HAL_GetTick+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000e94 	.word	0x20000e94

0800217c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff ffee 	bl	8002164 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d005      	beq.n	80021a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <HAL_Delay+0x44>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021a2:	bf00      	nop
 80021a4:	f7ff ffde 	bl	8002164 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d8f7      	bhi.n	80021a4 <HAL_Delay+0x28>
  {
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000000c 	.word	0x2000000c

080021c4 <__NVIC_SetPriorityGrouping>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e0:	4013      	ands	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_GetPriorityGrouping>:
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002210:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <__NVIC_GetPriorityGrouping+0x18>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	f003 0307 	and.w	r3, r3, #7
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_EnableIRQ>:
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0b      	blt.n	8002252 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4907      	ldr	r1, [pc, #28]	@ (8002260 <__NVIC_EnableIRQ+0x38>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2001      	movs	r0, #1
 800224a:	fa00 f202 	lsl.w	r2, r0, r2
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000e100 	.word	0xe000e100

08002264 <__NVIC_SetPriority>:
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	@ (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	@ (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <NVIC_EncodePriority>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	@ 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f1c3 0307 	rsb	r3, r3, #7
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	bf28      	it	cs
 80022d6:	2304      	movcs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3304      	adds	r3, #4
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d902      	bls.n	80022e8 <NVIC_EncodePriority+0x30>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b03      	subs	r3, #3
 80022e6:	e000      	b.n	80022ea <NVIC_EncodePriority+0x32>
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43d9      	mvns	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	4313      	orrs	r3, r2
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	@ 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff4c 	bl	80021c4 <__NVIC_SetPriorityGrouping>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002346:	f7ff ff61 	bl	800220c <__NVIC_GetPriorityGrouping>
 800234a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	6978      	ldr	r0, [r7, #20]
 8002352:	f7ff ffb1 	bl	80022b8 <NVIC_EncodePriority>
 8002356:	4602      	mov	r2, r0
 8002358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff80 	bl	8002264 <__NVIC_SetPriority>
}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff54 	bl	8002228 <__NVIC_EnableIRQ>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00e      	b.n	80023b8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	795b      	ldrb	r3, [r3, #5]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fce8 	bl	8001d80 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e159      	b.n	8002690 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8148 	bne.w	800268a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a2 	beq.w	800268a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b57      	ldr	r3, [pc, #348]	@ (80026a8 <HAL_GPIO_Init+0x2e8>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	4a56      	ldr	r2, [pc, #344]	@ (80026a8 <HAL_GPIO_Init+0x2e8>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002554:	6453      	str	r3, [r2, #68]	@ 0x44
 8002556:	4b54      	ldr	r3, [pc, #336]	@ (80026a8 <HAL_GPIO_Init+0x2e8>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002562:	4a52      	ldr	r2, [pc, #328]	@ (80026ac <HAL_GPIO_Init+0x2ec>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a49      	ldr	r2, [pc, #292]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d019      	beq.n	80025c2 <HAL_GPIO_Init+0x202>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a48      	ldr	r2, [pc, #288]	@ (80026b4 <HAL_GPIO_Init+0x2f4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <HAL_GPIO_Init+0x1fe>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a47      	ldr	r2, [pc, #284]	@ (80026b8 <HAL_GPIO_Init+0x2f8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00d      	beq.n	80025ba <HAL_GPIO_Init+0x1fa>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a46      	ldr	r2, [pc, #280]	@ (80026bc <HAL_GPIO_Init+0x2fc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <HAL_GPIO_Init+0x1f6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a45      	ldr	r2, [pc, #276]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_GPIO_Init+0x1f2>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e008      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e004      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e002      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025c2:	2300      	movs	r3, #0
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	f002 0203 	and.w	r2, r2, #3
 80025ca:	0092      	lsls	r2, r2, #2
 80025cc:	4093      	lsls	r3, r2
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d4:	4935      	ldr	r1, [pc, #212]	@ (80026ac <HAL_GPIO_Init+0x2ec>)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e2:	4b38      	ldr	r3, [pc, #224]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002606:	4a2f      	ldr	r2, [pc, #188]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800260c:	4b2d      	ldr	r3, [pc, #180]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002630:	4a24      	ldr	r2, [pc, #144]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002636:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800265a:	4a1a      	ldr	r2, [pc, #104]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002660:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002684:	4a0f      	ldr	r2, [pc, #60]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3301      	adds	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b0f      	cmp	r3, #15
 8002694:	f67f aea2 	bls.w	80023dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3724      	adds	r7, #36	@ 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40013800 	.word	0x40013800
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40020800 	.word	0x40020800
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40013c00 	.word	0x40013c00

080026c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
 80026d4:	4613      	mov	r3, r2
 80026d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d8:	787b      	ldrb	r3, [r7, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e4:	e003      	b.n	80026ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	041a      	lsls	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4013      	ands	r3, r2
 8002712:	041a      	lsls	r2, r3, #16
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	43d9      	mvns	r1, r3
 8002718:	887b      	ldrh	r3, [r7, #2]
 800271a:	400b      	ands	r3, r1
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e267      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d075      	beq.n	800283a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800274e:	4b88      	ldr	r3, [pc, #544]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b04      	cmp	r3, #4
 8002758:	d00c      	beq.n	8002774 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275a:	4b85      	ldr	r3, [pc, #532]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002762:	2b08      	cmp	r3, #8
 8002764:	d112      	bne.n	800278c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002766:	4b82      	ldr	r3, [pc, #520]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002772:	d10b      	bne.n	800278c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	4b7e      	ldr	r3, [pc, #504]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d05b      	beq.n	8002838 <HAL_RCC_OscConfig+0x108>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d157      	bne.n	8002838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e242      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002794:	d106      	bne.n	80027a4 <HAL_RCC_OscConfig+0x74>
 8002796:	4b76      	ldr	r3, [pc, #472]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a75      	ldr	r2, [pc, #468]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e01d      	b.n	80027e0 <HAL_RCC_OscConfig+0xb0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x98>
 80027ae:	4b70      	ldr	r3, [pc, #448]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6c      	ldr	r2, [pc, #432]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0xb0>
 80027c8:	4b69      	ldr	r3, [pc, #420]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a68      	ldr	r2, [pc, #416]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a65      	ldr	r2, [pc, #404]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fcbc 	bl	8002164 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff fcb8 	bl	8002164 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e207      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0xc0>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fca8 	bl	8002164 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7ff fca4 	bl	8002164 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1f3      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	4b51      	ldr	r3, [pc, #324]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0xe8>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d063      	beq.n	800290e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002846:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	4b47      	ldr	r3, [pc, #284]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800285a:	2b08      	cmp	r3, #8
 800285c:	d11c      	bne.n	8002898 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285e:	4b44      	ldr	r3, [pc, #272]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x152>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1c7      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4937      	ldr	r1, [pc, #220]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	e03a      	b.n	800290e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a0:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <HAL_RCC_OscConfig+0x244>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7ff fc5d 	bl	8002164 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7ff fc59 	bl	8002164 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1a8      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4925      	ldr	r1, [pc, #148]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <HAL_RCC_OscConfig+0x244>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff fc3c 	bl	8002164 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7ff fc38 	bl	8002164 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e187      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d036      	beq.n	8002988 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_RCC_OscConfig+0x248>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7ff fc1c 	bl	8002164 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002930:	f7ff fc18 	bl	8002164 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e167      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x200>
 800294e:	e01b      	b.n	8002988 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_RCC_OscConfig+0x248>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7ff fc05 	bl	8002164 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	e00e      	b.n	800297c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295e:	f7ff fc01 	bl	8002164 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d907      	bls.n	800297c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e150      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
 8002970:	40023800 	.word	0x40023800
 8002974:	42470000 	.word	0x42470000
 8002978:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ea      	bne.n	800295e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8097 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b81      	ldr	r3, [pc, #516]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b77      	ldr	r3, [pc, #476]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d2:	4b74      	ldr	r3, [pc, #464]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a73      	ldr	r2, [pc, #460]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7ff fbc1 	bl	8002164 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7ff fbbd 	bl	8002164 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e10c      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2ea>
 8002a0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	4a63      	ldr	r2, [pc, #396]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a18:	e01c      	b.n	8002a54 <HAL_RCC_OscConfig+0x324>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x30c>
 8002a22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0x324>
 8002a3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a57      	ldr	r2, [pc, #348]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	4b55      	ldr	r3, [pc, #340]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a54      	ldr	r2, [pc, #336]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7ff fb82 	bl	8002164 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7ff fb7e 	bl	8002164 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0cb      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ee      	beq.n	8002a64 <HAL_RCC_OscConfig+0x334>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7ff fb6c 	bl	8002164 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7ff fb68 	bl	8002164 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0b5      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ee      	bne.n	8002a90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab8:	4b39      	ldr	r3, [pc, #228]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	4a38      	ldr	r2, [pc, #224]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a1 	beq.w	8002c10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ace:	4b34      	ldr	r3, [pc, #208]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d05c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d141      	bne.n	8002b66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b31      	ldr	r3, [pc, #196]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff fb3c 	bl	8002164 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7ff fb38 	bl	8002164 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e087      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	019b      	lsls	r3, r3, #6
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	3b01      	subs	r3, #1
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	491b      	ldr	r1, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7ff fb11 	bl	8002164 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7ff fb0d 	bl	8002164 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e05c      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x416>
 8002b64:	e054      	b.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fafa 	bl	8002164 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff faf6 	bl	8002164 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e045      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x444>
 8002b92:	e03d      	b.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e038      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_RCC_OscConfig+0x4ec>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d121      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11a      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002be2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d111      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0cc      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b68      	ldr	r3, [pc, #416]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d90c      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b65      	ldr	r3, [pc, #404]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a58      	ldr	r2, [pc, #352]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a52      	ldr	r2, [pc, #328]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d044      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d119      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b3f      	ldr	r3, [pc, #252]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	4b3b      	ldr	r3, [pc, #236]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e067      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b37      	ldr	r3, [pc, #220]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4934      	ldr	r1, [pc, #208]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7ff fa28 	bl	8002164 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7ff fa24 	bl	8002164 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e04f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20c      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f821 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	490a      	ldr	r1, [pc, #40]	@ (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	5ccb      	ldrb	r3, [r1, r3]
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f88c 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	0800d6c0 	.word	0x0800d6c0
 8002de4:	20000004 	.word	0x20000004
 8002de8:	20000008 	.word	0x20000008

08002dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df0:	b094      	sub	sp, #80	@ 0x50
 8002df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e04:	4b79      	ldr	r3, [pc, #484]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d00d      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x40>
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	f200 80e1 	bhi.w	8002fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e1e:	e0db      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b73      	ldr	r3, [pc, #460]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e24:	e0db      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e26:	4b73      	ldr	r3, [pc, #460]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e2a:	e0d8      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e36:	4b6d      	ldr	r3, [pc, #436]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d063      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e42:	4b6a      	ldr	r3, [pc, #424]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	099b      	lsrs	r3, r3, #6
 8002e48:	2200      	movs	r2, #0
 8002e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e56:	2300      	movs	r3, #0
 8002e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e5e:	4622      	mov	r2, r4
 8002e60:	462b      	mov	r3, r5
 8002e62:	f04f 0000 	mov.w	r0, #0
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	0159      	lsls	r1, r3, #5
 8002e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e70:	0150      	lsls	r0, r2, #5
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4621      	mov	r1, r4
 8002e78:	1a51      	subs	r1, r2, r1
 8002e7a:	6139      	str	r1, [r7, #16]
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e90:	4659      	mov	r1, fp
 8002e92:	018b      	lsls	r3, r1, #6
 8002e94:	4651      	mov	r1, sl
 8002e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	018a      	lsls	r2, r1, #6
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ea4:	4659      	mov	r1, fp
 8002ea6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ebe:	4690      	mov	r8, r2
 8002ec0:	4699      	mov	r9, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	eb18 0303 	adds.w	r3, r8, r3
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	462b      	mov	r3, r5
 8002ecc:	eb49 0303 	adc.w	r3, r9, r3
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ede:	4629      	mov	r1, r5
 8002ee0:	024b      	lsls	r3, r1, #9
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ee8:	4621      	mov	r1, r4
 8002eea:	024a      	lsls	r2, r1, #9
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002efc:	f7fd feac 	bl	8000c58 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4613      	mov	r3, r2
 8002f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f08:	e058      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b38      	ldr	r3, [pc, #224]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	2200      	movs	r2, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	4611      	mov	r1, r2
 8002f16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	f04f 0000 	mov.w	r0, #0
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	0159      	lsls	r1, r3, #5
 8002f32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f36:	0150      	lsls	r0, r2, #5
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f42:	4649      	mov	r1, r9
 8002f44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f60:	eb63 050b 	sbc.w	r5, r3, fp
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	00eb      	lsls	r3, r5, #3
 8002f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f72:	00e2      	lsls	r2, r4, #3
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	4643      	mov	r3, r8
 8002f7a:	18e3      	adds	r3, r4, r3
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	464b      	mov	r3, r9
 8002f80:	eb45 0303 	adc.w	r3, r5, r3
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f92:	4629      	mov	r1, r5
 8002f94:	028b      	lsls	r3, r1, #10
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	028a      	lsls	r2, r1, #10
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	61fa      	str	r2, [r7, #28]
 8002fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb0:	f7fd fe52 	bl	8000c58 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3750      	adds	r7, #80	@ 0x50
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000004 	.word	0x20000004

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003014:	f7ff fff0 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0a9b      	lsrs	r3, r3, #10
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4903      	ldr	r1, [pc, #12]	@ (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	0800d6d0 	.word	0x0800d6d0

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800303c:	f7ff ffdc 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0b5b      	lsrs	r3, r3, #13
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	@ (800305c <HAL_RCC_GetPCLK2Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	0800d6d0 	.word	0x0800d6d0

08003060 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	220f      	movs	r2, #15
 800306e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003070:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <HAL_RCC_GetClockConfig+0x5c>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0203 	and.w	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800307c:	4b0f      	ldr	r3, [pc, #60]	@ (80030bc <HAL_RCC_GetClockConfig+0x5c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003088:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003094:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <HAL_RCC_GetClockConfig+0x5c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	08db      	lsrs	r3, r3, #3
 800309a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030a2:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <HAL_RCC_GetClockConfig+0x60>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0207 	and.w	r2, r3, #7
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	601a      	str	r2, [r3, #0]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40023c00 	.word	0x40023c00

080030c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07b      	b.n	80031ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030e6:	d009      	beq.n	80030fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	61da      	str	r2, [r3, #28]
 80030ee:	e005      	b.n	80030fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe fe54 	bl	8001dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003132:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003180:	ea42 0103 	orr.w	r1, r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0104 	and.w	r1, r3, #4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	f003 0210 	and.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b088      	sub	sp, #32
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e6:	f7fe ffbd 	bl	8002164 <HAL_GetTick>
 80031ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	e12a      	b.n	8003456 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_Transmit+0x36>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e122      	b.n	8003456 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_SPI_Transmit+0x48>
 800321a:	2302      	movs	r3, #2
 800321c:	e11b      	b.n	8003456 <HAL_SPI_Transmit+0x280>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326c:	d10f      	bne.n	800328e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800327c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800328c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003298:	2b40      	cmp	r3, #64	@ 0x40
 800329a:	d007      	beq.n	80032ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032b4:	d152      	bne.n	800335c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_Transmit+0xee>
 80032be:	8b7b      	ldrh	r3, [r7, #26]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d145      	bne.n	8003350 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032e8:	e032      	b.n	8003350 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d112      	bne.n	800331e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800331c:	e018      	b.n	8003350 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800331e:	f7fe ff21 	bl	8002164 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d803      	bhi.n	8003336 <HAL_SPI_Transmit+0x160>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d102      	bne.n	800333c <HAL_SPI_Transmit+0x166>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e082      	b.n	8003456 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1c7      	bne.n	80032ea <HAL_SPI_Transmit+0x114>
 800335a:	e053      	b.n	8003404 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_SPI_Transmit+0x194>
 8003364:	8b7b      	ldrh	r3, [r7, #26]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d147      	bne.n	80033fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003390:	e033      	b.n	80033fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d113      	bne.n	80033c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033c6:	e018      	b.n	80033fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c8:	f7fe fecc 	bl	8002164 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d803      	bhi.n	80033e0 <HAL_SPI_Transmit+0x20a>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d102      	bne.n	80033e6 <HAL_SPI_Transmit+0x210>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e02d      	b.n	8003456 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1c6      	bne.n	8003392 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fbd9 	bl	8003bc0 <SPI_EndRxTxTransaction>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003454:	2300      	movs	r3, #0
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af02      	add	r7, sp, #8
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e104      	b.n	8003688 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003486:	d112      	bne.n	80034ae <HAL_SPI_Receive+0x50>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10e      	bne.n	80034ae <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2204      	movs	r2, #4
 8003494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003498:	88fa      	ldrh	r2, [r7, #6]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f8f3 	bl	8003690 <HAL_SPI_TransmitReceive>
 80034aa:	4603      	mov	r3, r0
 80034ac:	e0ec      	b.n	8003688 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ae:	f7fe fe59 	bl	8002164 <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_SPI_Receive+0x62>
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0e1      	b.n	8003688 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_SPI_Receive+0x74>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e0da      	b.n	8003688 <HAL_SPI_Receive+0x22a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2204      	movs	r2, #4
 80034de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003520:	d10f      	bne.n	8003542 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003540:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	d007      	beq.n	8003560 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d170      	bne.n	800364a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003568:	e035      	b.n	80035d6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d115      	bne.n	80035a4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f103 020c 	add.w	r2, r3, #12
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035a2:	e018      	b.n	80035d6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035a4:	f7fe fdde 	bl	8002164 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d803      	bhi.n	80035bc <HAL_SPI_Receive+0x15e>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d102      	bne.n	80035c2 <HAL_SPI_Receive+0x164>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e058      	b.n	8003688 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1c4      	bne.n	800356a <HAL_SPI_Receive+0x10c>
 80035e0:	e038      	b.n	8003654 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d113      	bne.n	8003618 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fa:	b292      	uxth	r2, r2
 80035fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003602:	1c9a      	adds	r2, r3, #2
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003616:	e018      	b.n	800364a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003618:	f7fe fda4 	bl	8002164 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d803      	bhi.n	8003630 <HAL_SPI_Receive+0x1d2>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d102      	bne.n	8003636 <HAL_SPI_Receive+0x1d8>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e01e      	b.n	8003688 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1c6      	bne.n	80035e2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fa4b 	bl	8003af4 <SPI_EndRxTransaction>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003686:	2300      	movs	r3, #0
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	@ 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800369e:	2301      	movs	r3, #1
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a2:	f7fe fd5f 	bl	8002164 <HAL_GetTick>
 80036a6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036ae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d00c      	beq.n	80036da <HAL_SPI_TransmitReceive+0x4a>
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036c6:	d106      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x46>
 80036d0:	7ffb      	ldrb	r3, [r7, #31]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d001      	beq.n	80036da <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
 80036d8:	e17f      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x5c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x5c>
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e174      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x6e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e16d      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b04      	cmp	r3, #4
 8003710:	d003      	beq.n	800371a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2205      	movs	r2, #5
 8003716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	887a      	ldrh	r2, [r7, #2]
 800372a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	d007      	beq.n	800376e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800376c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003776:	d17e      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_SPI_TransmitReceive+0xf6>
 8003780:	8afb      	ldrh	r3, [r7, #22]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d16c      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	1c9a      	adds	r2, r3, #2
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037aa:	e059      	b.n	8003860 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d11b      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x162>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d016      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0x162>
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d113      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	881a      	ldrh	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	1c9a      	adds	r2, r3, #2
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d119      	bne.n	8003834 <HAL_SPI_TransmitReceive+0x1a4>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	b292      	uxth	r2, r2
 8003816:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003830:	2301      	movs	r3, #1
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003834:	f7fe fc96 	bl	8002164 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003840:	429a      	cmp	r2, r3
 8003842:	d80d      	bhi.n	8003860 <HAL_SPI_TransmitReceive+0x1d0>
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d009      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0bc      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1a0      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x11c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d19b      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x11c>
 8003874:	e082      	b.n	800397c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x1f4>
 800387e:	8afb      	ldrh	r3, [r7, #22]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d171      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	7812      	ldrb	r2, [r2, #0]
 8003890:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038aa:	e05d      	b.n	8003968 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d11c      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x264>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d017      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x264>
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d114      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d119      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x2a6>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d014      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003932:	2301      	movs	r3, #1
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003936:	f7fe fc15 	bl	8002164 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003942:	429a      	cmp	r2, r3
 8003944:	d803      	bhi.n	800394e <HAL_SPI_TransmitReceive+0x2be>
 8003946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d102      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x2c4>
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e038      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d19c      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x21c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d197      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f91d 	bl	8003bc0 <SPI_EndRxTxTransaction>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e01d      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3728      	adds	r7, #40	@ 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039f4:	f7fe fbb6 	bl	8002164 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	4413      	add	r3, r2
 8003a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a04:	f7fe fbae 	bl	8002164 <HAL_GetTick>
 8003a08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a0a:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	015b      	lsls	r3, r3, #5
 8003a10:	0d1b      	lsrs	r3, r3, #20
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1a:	e054      	b.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d050      	beq.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a24:	f7fe fb9e 	bl	8002164 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d902      	bls.n	8003a3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d13d      	bne.n	8003ab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a52:	d111      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a5c:	d004      	beq.n	8003a68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a66:	d107      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a80:	d10f      	bne.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003aa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e017      	b.n	8003ae6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d19b      	bne.n	8003a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000004 	.word	0x20000004

08003af4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b08:	d111      	bne.n	8003b2e <SPI_EndRxTransaction+0x3a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b12:	d004      	beq.n	8003b1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1c:	d107      	bne.n	8003b2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b36:	d12a      	bne.n	8003b8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b40:	d012      	beq.n	8003b68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2180      	movs	r1, #128	@ 0x80
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff ff49 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02d      	beq.n	8003bb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e026      	b.n	8003bb6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2101      	movs	r1, #1
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff ff36 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01a      	beq.n	8003bb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e013      	b.n	8003bb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2101      	movs	r1, #1
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7ff ff23 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e000      	b.n	8003bb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff ff04 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be6:	f043 0220 	orr.w	r2, r3, #32
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e032      	b.n	8003c58 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <SPI_EndRxTxTransaction+0xa0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c64 <SPI_EndRxTxTransaction+0xa4>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	0d5b      	lsrs	r3, r3, #21
 8003bfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c10:	d112      	bne.n	8003c38 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2180      	movs	r1, #128	@ 0x80
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fee1 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d016      	beq.n	8003c56 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e00f      	b.n	8003c58 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4e:	2b80      	cmp	r3, #128	@ 0x80
 8003c50:	d0f2      	beq.n	8003c38 <SPI_EndRxTxTransaction+0x78>
 8003c52:	e000      	b.n	8003c56 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c54:	bf00      	nop
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000004 	.word	0x20000004
 8003c64:	165e9f81 	.word	0x165e9f81

08003c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e041      	b.n	8003cfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f839 	bl	8003d06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f000 f9b2 	bl	8004010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d001      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e044      	b.n	8003dbe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1e      	ldr	r2, [pc, #120]	@ (8003dcc <HAL_TIM_Base_Start_IT+0xb0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d5e:	d013      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a19      	ldr	r2, [pc, #100]	@ (8003dd4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a17      	ldr	r2, [pc, #92]	@ (8003dd8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a16      	ldr	r2, [pc, #88]	@ (8003ddc <HAL_TIM_Base_Start_IT+0xc0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d111      	bne.n	8003dac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d010      	beq.n	8003dbc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	e007      	b.n	8003dbc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40014000 	.word	0x40014000

08003de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d020      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01b      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0202 	mvn.w	r2, #2
 8003e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8d2 	bl	8003fd4 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8c4 	bl	8003fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8d5 	bl	8003fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d020      	beq.n	8003e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0204 	mvn.w	r2, #4
 8003e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8ac 	bl	8003fd4 <HAL_TIM_IC_CaptureCallback>
 8003e7c:	e005      	b.n	8003e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f89e 	bl	8003fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f8af 	bl	8003fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d020      	beq.n	8003edc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0208 	mvn.w	r2, #8
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f886 	bl	8003fd4 <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f878 	bl	8003fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f889 	bl	8003fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d020      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01b      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0210 	mvn.w	r2, #16
 8003ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2208      	movs	r2, #8
 8003efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f860 	bl	8003fd4 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f852 	bl	8003fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f863 	bl	8003fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0201 	mvn.w	r2, #1
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fd fece 	bl	8001ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00c      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8e6 	bl	800413c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f834 	bl	8003ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0220 	mvn.w	r2, #32
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8b8 	bl	8004128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3a      	ldr	r2, [pc, #232]	@ (800410c <TIM_Base_SetConfig+0xfc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00f      	beq.n	8004048 <TIM_Base_SetConfig+0x38>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402e:	d00b      	beq.n	8004048 <TIM_Base_SetConfig+0x38>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a37      	ldr	r2, [pc, #220]	@ (8004110 <TIM_Base_SetConfig+0x100>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d007      	beq.n	8004048 <TIM_Base_SetConfig+0x38>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a36      	ldr	r2, [pc, #216]	@ (8004114 <TIM_Base_SetConfig+0x104>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_Base_SetConfig+0x38>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a35      	ldr	r2, [pc, #212]	@ (8004118 <TIM_Base_SetConfig+0x108>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d108      	bne.n	800405a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800404e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2b      	ldr	r2, [pc, #172]	@ (800410c <TIM_Base_SetConfig+0xfc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01b      	beq.n	800409a <TIM_Base_SetConfig+0x8a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004068:	d017      	beq.n	800409a <TIM_Base_SetConfig+0x8a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a28      	ldr	r2, [pc, #160]	@ (8004110 <TIM_Base_SetConfig+0x100>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <TIM_Base_SetConfig+0x8a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a27      	ldr	r2, [pc, #156]	@ (8004114 <TIM_Base_SetConfig+0x104>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00f      	beq.n	800409a <TIM_Base_SetConfig+0x8a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a26      	ldr	r2, [pc, #152]	@ (8004118 <TIM_Base_SetConfig+0x108>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00b      	beq.n	800409a <TIM_Base_SetConfig+0x8a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a25      	ldr	r2, [pc, #148]	@ (800411c <TIM_Base_SetConfig+0x10c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <TIM_Base_SetConfig+0x8a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a24      	ldr	r2, [pc, #144]	@ (8004120 <TIM_Base_SetConfig+0x110>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d003      	beq.n	800409a <TIM_Base_SetConfig+0x8a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a23      	ldr	r2, [pc, #140]	@ (8004124 <TIM_Base_SetConfig+0x114>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d108      	bne.n	80040ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a0e      	ldr	r2, [pc, #56]	@ (800410c <TIM_Base_SetConfig+0xfc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d103      	bne.n	80040e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d105      	bne.n	80040fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f023 0201 	bic.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	611a      	str	r2, [r3, #16]
  }
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e042      	b.n	80041e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd fe6c 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	@ 0x24
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f973 	bl	8004480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	@ 0x28
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b20      	cmp	r3, #32
 800420e:	d175      	bne.n	80042fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_UART_Transmit+0x2c>
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e06e      	b.n	80042fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2221      	movs	r2, #33	@ 0x21
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800422e:	f7fd ff99 	bl	8002164 <HAL_GetTick>
 8004232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	88fa      	ldrh	r2, [r7, #6]
 800423e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004248:	d108      	bne.n	800425c <HAL_UART_Transmit+0x6c>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	e003      	b.n	8004264 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004264:	e02e      	b.n	80042c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	2180      	movs	r1, #128	@ 0x80
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f848 	bl	8004306 <UART_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e03a      	b.n	80042fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10b      	bne.n	80042a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800429c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	3302      	adds	r3, #2
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e007      	b.n	80042b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	3301      	adds	r3, #1
 80042b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1cb      	bne.n	8004266 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2140      	movs	r1, #64	@ 0x40
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f814 	bl	8004306 <UART_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e006      	b.n	80042fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
  }
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004316:	e03b      	b.n	8004390 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d037      	beq.n	8004390 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004320:	f7fd ff20 	bl	8002164 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	6a3a      	ldr	r2, [r7, #32]
 800432c:	429a      	cmp	r2, r3
 800432e:	d302      	bcc.n	8004336 <UART_WaitOnFlagUntilTimeout+0x30>
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e03a      	b.n	80043b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d023      	beq.n	8004390 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b80      	cmp	r3, #128	@ 0x80
 800434c:	d020      	beq.n	8004390 <UART_WaitOnFlagUntilTimeout+0x8a>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	d01d      	beq.n	8004390 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b08      	cmp	r3, #8
 8004360:	d116      	bne.n	8004390 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f81d 	bl	80043b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2208      	movs	r2, #8
 8004382:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e00f      	b.n	80043b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4013      	ands	r3, r2
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	429a      	cmp	r2, r3
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d0b4      	beq.n	8004318 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b095      	sub	sp, #84	@ 0x54
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80043e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	61fb      	str	r3, [r7, #28]
   return(result);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800441a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	2b01      	cmp	r3, #1
 800442e:	d119      	bne.n	8004464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f023 0310 	bic.w	r3, r3, #16
 8004446:	647b      	str	r3, [r7, #68]	@ 0x44
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004450:	61ba      	str	r2, [r7, #24]
 8004452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6979      	ldr	r1, [r7, #20]
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	613b      	str	r3, [r7, #16]
   return(result);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004472:	bf00      	nop
 8004474:	3754      	adds	r7, #84	@ 0x54
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004484:	b0c0      	sub	sp, #256	@ 0x100
 8004486:	af00      	add	r7, sp, #0
 8004488:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449c:	68d9      	ldr	r1, [r3, #12]
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	ea40 0301 	orr.w	r3, r0, r1
 80044a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	431a      	orrs	r2, r3
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044d8:	f021 010c 	bic.w	r1, r1, #12
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044e6:	430b      	orrs	r3, r1
 80044e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fa:	6999      	ldr	r1, [r3, #24]
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	ea40 0301 	orr.w	r3, r0, r1
 8004506:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b8f      	ldr	r3, [pc, #572]	@ (800474c <UART_SetConfig+0x2cc>)
 8004510:	429a      	cmp	r2, r3
 8004512:	d005      	beq.n	8004520 <UART_SetConfig+0xa0>
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b8d      	ldr	r3, [pc, #564]	@ (8004750 <UART_SetConfig+0x2d0>)
 800451c:	429a      	cmp	r2, r3
 800451e:	d104      	bne.n	800452a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7fe fd8a 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 8004524:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004528:	e003      	b.n	8004532 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800452a:	f7fe fd71 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 800452e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453c:	f040 810c 	bne.w	8004758 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004544:	2200      	movs	r2, #0
 8004546:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800454a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800454e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004552:	4622      	mov	r2, r4
 8004554:	462b      	mov	r3, r5
 8004556:	1891      	adds	r1, r2, r2
 8004558:	65b9      	str	r1, [r7, #88]	@ 0x58
 800455a:	415b      	adcs	r3, r3
 800455c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800455e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004562:	4621      	mov	r1, r4
 8004564:	eb12 0801 	adds.w	r8, r2, r1
 8004568:	4629      	mov	r1, r5
 800456a:	eb43 0901 	adc.w	r9, r3, r1
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800457a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800457e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004582:	4690      	mov	r8, r2
 8004584:	4699      	mov	r9, r3
 8004586:	4623      	mov	r3, r4
 8004588:	eb18 0303 	adds.w	r3, r8, r3
 800458c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004590:	462b      	mov	r3, r5
 8004592:	eb49 0303 	adc.w	r3, r9, r3
 8004596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045ae:	460b      	mov	r3, r1
 80045b0:	18db      	adds	r3, r3, r3
 80045b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80045b4:	4613      	mov	r3, r2
 80045b6:	eb42 0303 	adc.w	r3, r2, r3
 80045ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80045bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045c4:	f7fc fb48 	bl	8000c58 <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4b61      	ldr	r3, [pc, #388]	@ (8004754 <UART_SetConfig+0x2d4>)
 80045ce:	fba3 2302 	umull	r2, r3, r3, r2
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	011c      	lsls	r4, r3, #4
 80045d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045e8:	4642      	mov	r2, r8
 80045ea:	464b      	mov	r3, r9
 80045ec:	1891      	adds	r1, r2, r2
 80045ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045f0:	415b      	adcs	r3, r3
 80045f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045f8:	4641      	mov	r1, r8
 80045fa:	eb12 0a01 	adds.w	sl, r2, r1
 80045fe:	4649      	mov	r1, r9
 8004600:	eb43 0b01 	adc.w	fp, r3, r1
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004610:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004618:	4692      	mov	sl, r2
 800461a:	469b      	mov	fp, r3
 800461c:	4643      	mov	r3, r8
 800461e:	eb1a 0303 	adds.w	r3, sl, r3
 8004622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004626:	464b      	mov	r3, r9
 8004628:	eb4b 0303 	adc.w	r3, fp, r3
 800462c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800463c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004640:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004644:	460b      	mov	r3, r1
 8004646:	18db      	adds	r3, r3, r3
 8004648:	643b      	str	r3, [r7, #64]	@ 0x40
 800464a:	4613      	mov	r3, r2
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	647b      	str	r3, [r7, #68]	@ 0x44
 8004652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004656:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800465a:	f7fc fafd 	bl	8000c58 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4611      	mov	r1, r2
 8004664:	4b3b      	ldr	r3, [pc, #236]	@ (8004754 <UART_SetConfig+0x2d4>)
 8004666:	fba3 2301 	umull	r2, r3, r3, r1
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	2264      	movs	r2, #100	@ 0x64
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	1acb      	subs	r3, r1, r3
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800467a:	4b36      	ldr	r3, [pc, #216]	@ (8004754 <UART_SetConfig+0x2d4>)
 800467c:	fba3 2302 	umull	r2, r3, r3, r2
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004688:	441c      	add	r4, r3
 800468a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468e:	2200      	movs	r2, #0
 8004690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004694:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004698:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800469c:	4642      	mov	r2, r8
 800469e:	464b      	mov	r3, r9
 80046a0:	1891      	adds	r1, r2, r2
 80046a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046a4:	415b      	adcs	r3, r3
 80046a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046ac:	4641      	mov	r1, r8
 80046ae:	1851      	adds	r1, r2, r1
 80046b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80046b2:	4649      	mov	r1, r9
 80046b4:	414b      	adcs	r3, r1
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046c4:	4659      	mov	r1, fp
 80046c6:	00cb      	lsls	r3, r1, #3
 80046c8:	4651      	mov	r1, sl
 80046ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ce:	4651      	mov	r1, sl
 80046d0:	00ca      	lsls	r2, r1, #3
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	4642      	mov	r2, r8
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046e0:	464b      	mov	r3, r9
 80046e2:	460a      	mov	r2, r1
 80046e4:	eb42 0303 	adc.w	r3, r2, r3
 80046e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004700:	460b      	mov	r3, r1
 8004702:	18db      	adds	r3, r3, r3
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004706:	4613      	mov	r3, r2
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800470e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004712:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004716:	f7fc fa9f 	bl	8000c58 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <UART_SetConfig+0x2d4>)
 8004720:	fba3 1302 	umull	r1, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2164      	movs	r1, #100	@ 0x64
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	3332      	adds	r3, #50	@ 0x32
 8004732:	4a08      	ldr	r2, [pc, #32]	@ (8004754 <UART_SetConfig+0x2d4>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	f003 0207 	and.w	r2, r3, #7
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4422      	add	r2, r4
 8004746:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004748:	e106      	b.n	8004958 <UART_SetConfig+0x4d8>
 800474a:	bf00      	nop
 800474c:	40011000 	.word	0x40011000
 8004750:	40011400 	.word	0x40011400
 8004754:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800475c:	2200      	movs	r2, #0
 800475e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004762:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004766:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800476a:	4642      	mov	r2, r8
 800476c:	464b      	mov	r3, r9
 800476e:	1891      	adds	r1, r2, r2
 8004770:	6239      	str	r1, [r7, #32]
 8004772:	415b      	adcs	r3, r3
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
 8004776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800477a:	4641      	mov	r1, r8
 800477c:	1854      	adds	r4, r2, r1
 800477e:	4649      	mov	r1, r9
 8004780:	eb43 0501 	adc.w	r5, r3, r1
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	00eb      	lsls	r3, r5, #3
 800478e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004792:	00e2      	lsls	r2, r4, #3
 8004794:	4614      	mov	r4, r2
 8004796:	461d      	mov	r5, r3
 8004798:	4643      	mov	r3, r8
 800479a:	18e3      	adds	r3, r4, r3
 800479c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047a0:	464b      	mov	r3, r9
 80047a2:	eb45 0303 	adc.w	r3, r5, r3
 80047a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047c6:	4629      	mov	r1, r5
 80047c8:	008b      	lsls	r3, r1, #2
 80047ca:	4621      	mov	r1, r4
 80047cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d0:	4621      	mov	r1, r4
 80047d2:	008a      	lsls	r2, r1, #2
 80047d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047d8:	f7fc fa3e 	bl	8000c58 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4b60      	ldr	r3, [pc, #384]	@ (8004964 <UART_SetConfig+0x4e4>)
 80047e2:	fba3 2302 	umull	r2, r3, r3, r2
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	011c      	lsls	r4, r3, #4
 80047ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	1891      	adds	r1, r2, r2
 8004802:	61b9      	str	r1, [r7, #24]
 8004804:	415b      	adcs	r3, r3
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800480c:	4641      	mov	r1, r8
 800480e:	1851      	adds	r1, r2, r1
 8004810:	6139      	str	r1, [r7, #16]
 8004812:	4649      	mov	r1, r9
 8004814:	414b      	adcs	r3, r1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004824:	4659      	mov	r1, fp
 8004826:	00cb      	lsls	r3, r1, #3
 8004828:	4651      	mov	r1, sl
 800482a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482e:	4651      	mov	r1, sl
 8004830:	00ca      	lsls	r2, r1, #3
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	4603      	mov	r3, r0
 8004838:	4642      	mov	r2, r8
 800483a:	189b      	adds	r3, r3, r2
 800483c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004840:	464b      	mov	r3, r9
 8004842:	460a      	mov	r2, r1
 8004844:	eb42 0303 	adc.w	r3, r2, r3
 8004848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004856:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004864:	4649      	mov	r1, r9
 8004866:	008b      	lsls	r3, r1, #2
 8004868:	4641      	mov	r1, r8
 800486a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800486e:	4641      	mov	r1, r8
 8004870:	008a      	lsls	r2, r1, #2
 8004872:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004876:	f7fc f9ef 	bl	8000c58 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4611      	mov	r1, r2
 8004880:	4b38      	ldr	r3, [pc, #224]	@ (8004964 <UART_SetConfig+0x4e4>)
 8004882:	fba3 2301 	umull	r2, r3, r3, r1
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2264      	movs	r2, #100	@ 0x64
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	1acb      	subs	r3, r1, r3
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	3332      	adds	r3, #50	@ 0x32
 8004894:	4a33      	ldr	r2, [pc, #204]	@ (8004964 <UART_SetConfig+0x4e4>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a0:	441c      	add	r4, r3
 80048a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a6:	2200      	movs	r2, #0
 80048a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80048aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80048ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	415b      	adcs	r3, r3
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048c0:	4641      	mov	r1, r8
 80048c2:	1851      	adds	r1, r2, r1
 80048c4:	6039      	str	r1, [r7, #0]
 80048c6:	4649      	mov	r1, r9
 80048c8:	414b      	adcs	r3, r1
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048d8:	4659      	mov	r1, fp
 80048da:	00cb      	lsls	r3, r1, #3
 80048dc:	4651      	mov	r1, sl
 80048de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e2:	4651      	mov	r1, sl
 80048e4:	00ca      	lsls	r2, r1, #3
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	4642      	mov	r2, r8
 80048ee:	189b      	adds	r3, r3, r2
 80048f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048f2:	464b      	mov	r3, r9
 80048f4:	460a      	mov	r2, r1
 80048f6:	eb42 0303 	adc.w	r3, r2, r3
 80048fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	663b      	str	r3, [r7, #96]	@ 0x60
 8004906:	667a      	str	r2, [r7, #100]	@ 0x64
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004914:	4649      	mov	r1, r9
 8004916:	008b      	lsls	r3, r1, #2
 8004918:	4641      	mov	r1, r8
 800491a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491e:	4641      	mov	r1, r8
 8004920:	008a      	lsls	r2, r1, #2
 8004922:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004926:	f7fc f997 	bl	8000c58 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <UART_SetConfig+0x4e4>)
 8004930:	fba3 1302 	umull	r1, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	2164      	movs	r1, #100	@ 0x64
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	3332      	adds	r3, #50	@ 0x32
 8004942:	4a08      	ldr	r2, [pc, #32]	@ (8004964 <UART_SetConfig+0x4e4>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	f003 020f 	and.w	r2, r3, #15
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4422      	add	r2, r4
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800495e:	46bd      	mov	sp, r7
 8004960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004964:	51eb851f 	.word	0x51eb851f

08004968 <MPU9250_Init>:
GPIO_TypeDef *_CS_GPIO;

// <---- ------------ Main MPu9250 Functions ------------ ---->
// <---- ------------ MPU9250 Initialize ------------ ---->
MPU9250_Result MPU9250_Init(SPI_HandleTypeDef* SPIx, GPIO_TypeDef *CS_GPIOx, uint16_t CS_PinNumber, MPU9250TypeDef* datastruct)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	80fb      	strh	r3, [r7, #6]
	_CS_GPIO = CS_GPIOx;
 8004978:	4a84      	ldr	r2, [pc, #528]	@ (8004b8c <MPU9250_Init+0x224>)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6013      	str	r3, [r2, #0]
	_CS_PinNumber = CS_PinNumber;
 800497e:	4a84      	ldr	r2, [pc, #528]	@ (8004b90 <MPU9250_Init+0x228>)
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	8013      	strh	r3, [r2, #0]

	uint8_t WHO_AM_I = MPU9250_WHO_AM_I;
 8004984:	2375      	movs	r3, #117	@ 0x75
 8004986:	75fb      	strb	r3, [r7, #23]
	uint8_t temp;
	uint8_t transmit_buffer[2]={0};
 8004988:	2300      	movs	r3, #0
 800498a:	823b      	strh	r3, [r7, #16]

	// <---- ------------ Initialize Registers ------------ ---->
	uint8_t CLOCK_SEL_PLL = 0x01;
 800498c:	2301      	movs	r3, #1
 800498e:	75bb      	strb	r3, [r7, #22]
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 8004990:	236b      	movs	r3, #107	@ 0x6b
 8004992:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = CLOCK_SEL_PLL;
 8004994:	7dbb      	ldrb	r3, [r7, #22]
 8004996:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004998:	7c3b      	ldrb	r3, [r7, #16]
 800499a:	7c7a      	ldrb	r2, [r7, #17]
 800499c:	4619      	mov	r1, r3
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f934 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80049a4:	2019      	movs	r0, #25
 80049a6:	f000 f9de 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t I2C_MST_EN = 0x20;
 80049aa:	2320      	movs	r3, #32
 80049ac:	757b      	strb	r3, [r7, #21]
	transmit_buffer[0] = MPU9250_USER_CTRL;
 80049ae:	236a      	movs	r3, #106	@ 0x6a
 80049b0:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = I2C_MST_EN;
 80049b2:	7d7b      	ldrb	r3, [r7, #21]
 80049b4:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80049b6:	7c3b      	ldrb	r3, [r7, #16]
 80049b8:	7c7a      	ldrb	r2, [r7, #17]
 80049ba:	4619      	mov	r1, r3
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f925 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80049c2:	2019      	movs	r0, #25
 80049c4:	f000 f9cf 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t I2C_MST_CLK = 0x0D;
 80049c8:	230d      	movs	r3, #13
 80049ca:	753b      	strb	r3, [r7, #20]
	transmit_buffer[0] = I2C_MST_CTRL;
 80049cc:	2324      	movs	r3, #36	@ 0x24
 80049ce:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = I2C_MST_CLK;
 80049d0:	7d3b      	ldrb	r3, [r7, #20]
 80049d2:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80049d4:	7c3b      	ldrb	r3, [r7, #16]
 80049d6:	7c7a      	ldrb	r2, [r7, #17]
 80049d8:	4619      	mov	r1, r3
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f916 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80049e0:	2019      	movs	r0, #25
 80049e2:	f000 f9c0 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t PWR_RESET = 0x80;
 80049e6:	2380      	movs	r3, #128	@ 0x80
 80049e8:	74fb      	strb	r3, [r7, #19]
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 80049ea:	236b      	movs	r3, #107	@ 0x6b
 80049ec:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = PWR_RESET;
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80049f2:	7c3b      	ldrb	r3, [r7, #16]
 80049f4:	7c7a      	ldrb	r2, [r7, #17]
 80049f6:	4619      	mov	r1, r3
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f907 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80049fe:	2019      	movs	r0, #25
 8004a00:	f000 f9b1 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif

	// <---- ------------ Configure PowerManagement 1 ------------ ---->
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 8004a04:	236b      	movs	r3, #107	@ 0x6b
 8004a06:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->PWR_MGMT1;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004a0e:	7c3b      	ldrb	r3, [r7, #16]
 8004a10:	7c7a      	ldrb	r2, [r7, #17]
 8004a12:	4619      	mov	r1, r3
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f8f9 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004a1a:	2019      	movs	r0, #25
 8004a1c:	f000 f9a3 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_1, 1);
 8004a20:	f107 0112 	add.w	r1, r7, #18
 8004a24:	2301      	movs	r3, #1
 8004a26:	226b      	movs	r2, #107	@ 0x6b
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f8b3 	bl	8004b94 <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT1)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	7cbb      	ldrb	r3, [r7, #18]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <MPU9250_Init+0xd4>
		return MPU9250_RESULT_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0a3      	b.n	8004b84 <MPU9250_Init+0x21c>

	// <---- ------------ Check WHO_AM_I Register ------------ ---->
	MPU9250_ReadData(SPIx, &temp, WHO_AM_I, 1);
 8004a3c:	7dfa      	ldrb	r2, [r7, #23]
 8004a3e:	f107 0112 	add.w	r1, r7, #18
 8004a42:	2301      	movs	r3, #1
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f8a5 	bl	8004b94 <MPU9250_ReadData>
	if(temp != MPU9250_I_AM)
 8004a4a:	7cbb      	ldrb	r3, [r7, #18]
 8004a4c:	2b71      	cmp	r3, #113	@ 0x71
 8004a4e:	d001      	beq.n	8004a54 <MPU9250_Init+0xec>
 		return MPU9250_RESULT_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e097      	b.n	8004b84 <MPU9250_Init+0x21c>
#if FreeRTOS_En
	osDelay(25);
 8004a54:	2019      	movs	r0, #25
 8004a56:	f000 f986 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif

	// <---- ------------ Configure PowerManagement 2 ------------ ---->
	transmit_buffer[0] = MPU9250_PWR_MGMT_2;
 8004a5a:	236c      	movs	r3, #108	@ 0x6c
 8004a5c:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->PWR_MGMT2;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004a64:	7c3b      	ldrb	r3, [r7, #16]
 8004a66:	7c7a      	ldrb	r2, [r7, #17]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f8ce 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004a70:	2019      	movs	r0, #25
 8004a72:	f000 f978 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_2, 1);
 8004a76:	f107 0112 	add.w	r1, r7, #18
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	226c      	movs	r2, #108	@ 0x6c
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f888 	bl	8004b94 <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT2)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	785a      	ldrb	r2, [r3, #1]
 8004a88:	7cbb      	ldrb	r3, [r7, #18]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d001      	beq.n	8004a92 <MPU9250_Init+0x12a>
		return MPU9250_RESULT_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e078      	b.n	8004b84 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_CONFIG;
 8004a92:	231a      	movs	r3, #26
 8004a94:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->Gyro_DLPF;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	789b      	ldrb	r3, [r3, #2]
 8004a9a:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004a9c:	7c3b      	ldrb	r3, [r7, #16]
 8004a9e:	7c7a      	ldrb	r2, [r7, #17]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f8b2 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004aa8:	2019      	movs	r0, #25
 8004aaa:	f000 f95c 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_CONFIG, 1);
 8004aae:	f107 0112 	add.w	r1, r7, #18
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	221a      	movs	r2, #26
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f86c 	bl	8004b94 <MPU9250_ReadData>
	if(temp != datastruct->Gyro_DLPF)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	789a      	ldrb	r2, [r3, #2]
 8004ac0:	7cbb      	ldrb	r3, [r7, #18]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <MPU9250_Init+0x162>
		return MPU9250_RESULT_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e05c      	b.n	8004b84 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Gyro_Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_GYRO_CONFIG;
 8004aca:	231b      	movs	r3, #27
 8004acc:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = (datastruct->Gyro_Range) << 3;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	791b      	ldrb	r3, [r3, #4]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004ad8:	7c3b      	ldrb	r3, [r7, #16]
 8004ada:	7c7a      	ldrb	r2, [r7, #17]
 8004adc:	4619      	mov	r1, r3
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f894 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004ae4:	2019      	movs	r0, #25
 8004ae6:	f000 f93e 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_GYRO_CONFIG, 1);
 8004aea:	f107 0112 	add.w	r1, r7, #18
 8004aee:	2301      	movs	r3, #1
 8004af0:	221b      	movs	r2, #27
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f84e 	bl	8004b94 <MPU9250_ReadData>
	if(temp != ((datastruct->Gyro_Range) << 3))
 8004af8:	7cbb      	ldrb	r3, [r7, #18]
 8004afa:	461a      	mov	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	791b      	ldrb	r3, [r3, #4]
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d001      	beq.n	8004b0a <MPU9250_Init+0x1a2>
		return MPU9250_RESULT_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e03c      	b.n	8004b84 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Accel Config Register 2 ------------ ---->
	transmit_buffer[0] = MPU9250_ACCEL_CONFIG_2;
 8004b0a:	231d      	movs	r3, #29
 8004b0c:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->Accel_DLPF;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	78db      	ldrb	r3, [r3, #3]
 8004b12:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004b14:	7c3b      	ldrb	r3, [r7, #16]
 8004b16:	7c7a      	ldrb	r2, [r7, #17]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f876 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004b20:	2019      	movs	r0, #25
 8004b22:	f000 f920 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG_2, 1);
 8004b26:	f107 0112 	add.w	r1, r7, #18
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	221d      	movs	r2, #29
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f830 	bl	8004b94 <MPU9250_ReadData>
	if(temp != datastruct->Accel_DLPF)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	78da      	ldrb	r2, [r3, #3]
 8004b38:	7cbb      	ldrb	r3, [r7, #18]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <MPU9250_Init+0x1da>
		return MPU9250_RESULT_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e020      	b.n	8004b84 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Accel Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_ACCEL_CONFIG;
 8004b42:	231c      	movs	r3, #28
 8004b44:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = (datastruct->Accel_Range) << 3;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	795b      	ldrb	r3, [r3, #5]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004b50:	7c3b      	ldrb	r3, [r7, #16]
 8004b52:	7c7a      	ldrb	r2, [r7, #17]
 8004b54:	4619      	mov	r1, r3
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f858 	bl	8004c0c <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004b5c:	2019      	movs	r0, #25
 8004b5e:	f000 f902 	bl	8004d66 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG, 1);
 8004b62:	f107 0112 	add.w	r1, r7, #18
 8004b66:	2301      	movs	r3, #1
 8004b68:	221c      	movs	r2, #28
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f812 	bl	8004b94 <MPU9250_ReadData>
	if(temp != ((datastruct->Accel_Range) << 3))
 8004b70:	7cbb      	ldrb	r3, [r7, #18]
 8004b72:	461a      	mov	r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	795b      	ldrb	r3, [r3, #5]
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d001      	beq.n	8004b82 <MPU9250_Init+0x21a>
		return MPU9250_RESULT_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <MPU9250_Init+0x21c>

	/* Return OK */
	return MPU9250_RESULT_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000e9c 	.word	0x20000e9c
 8004b90:	20000e98 	.word	0x20000e98

08004b94 <MPU9250_ReadData>:

// <---- ------------ MPU9250 Read Data ------------ ---->
MPU9250_Result MPU9250_ReadData(SPI_HandleTypeDef* SPIx, uint8_t* buffer, uint8_t addr, uint8_t num)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	71fb      	strb	r3, [r7, #7]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	75fb      	strb	r3, [r7, #23]
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8004bb4:	4b13      	ldr	r3, [pc, #76]	@ (8004c04 <MPU9250_ReadData+0x70>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a13      	ldr	r2, [pc, #76]	@ (8004c08 <MPU9250_ReadData+0x74>)
 8004bba:	8811      	ldrh	r1, [r2, #0]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd fd82 	bl	80026c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8004bc4:	2014      	movs	r0, #20
 8004bc6:	f7fd fad9 	bl	800217c <HAL_Delay>
	HAL_SPI_Transmit(SPIx, &reg, 1, 1000);
 8004bca:	f107 0117 	add.w	r1, r7, #23
 8004bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7fe fafe 	bl	80031d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPIx, buffer, num, 1000);
 8004bda:	79bb      	ldrb	r3, [r7, #6]
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7fe fc3a 	bl	800345e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8004bea:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <MPU9250_ReadData+0x70>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a06      	ldr	r2, [pc, #24]	@ (8004c08 <MPU9250_ReadData+0x74>)
 8004bf0:	8811      	ldrh	r1, [r2, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fd fd67 	bl	80026c8 <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000e9c 	.word	0x20000e9c
 8004c08:	20000e98 	.word	0x20000e98

08004c0c <MPU9250_WriteData>:

// <---- ------------ MPU9250 Write Data ------------ ---->
MPU9250_Result MPU9250_WriteData(SPI_HandleTypeDef* SPIx, uint8_t addr, uint8_t data)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {addr, data};
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	733b      	strb	r3, [r7, #12]
 8004c20:	78bb      	ldrb	r3, [r7, #2]
 8004c22:	737b      	strb	r3, [r7, #13]
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8004c24:	4b0f      	ldr	r3, [pc, #60]	@ (8004c64 <MPU9250_WriteData+0x58>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a0f      	ldr	r2, [pc, #60]	@ (8004c68 <MPU9250_WriteData+0x5c>)
 8004c2a:	8811      	ldrh	r1, [r2, #0]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fd fd4a 	bl	80026c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8004c34:	2014      	movs	r0, #20
 8004c36:	f7fd faa1 	bl	800217c <HAL_Delay>
	HAL_SPI_Transmit(SPIx, buffer, 2, 1000);
 8004c3a:	f107 010c 	add.w	r1, r7, #12
 8004c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c42:	2202      	movs	r2, #2
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fe fac6 	bl	80031d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8004c4a:	4b06      	ldr	r3, [pc, #24]	@ (8004c64 <MPU9250_WriteData+0x58>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a06      	ldr	r2, [pc, #24]	@ (8004c68 <MPU9250_WriteData+0x5c>)
 8004c50:	8811      	ldrh	r1, [r2, #0]
 8004c52:	2201      	movs	r2, #1
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fd fd37 	bl	80026c8 <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000e9c 	.word	0x20000e9c
 8004c68:	20000e98 	.word	0x20000e98

08004c6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c7e:	2b84      	cmp	r3, #132	@ 0x84
 8004c80:	d005      	beq.n	8004c8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	3303      	adds	r3, #3
 8004c8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca2:	f3ef 8305 	mrs	r3, IPSR
 8004ca6:	607b      	str	r3, [r7, #4]
  return(result);
 8004ca8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf14      	ite	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	2300      	moveq	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004cc4:	f001 f930 	bl	8005f28 <vTaskStartScheduler>
  
  return osOK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd0:	b089      	sub	sp, #36	@ 0x24
 8004cd2:	af04      	add	r7, sp, #16
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <osThreadCreate+0x54>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01c      	beq.n	8004d22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685c      	ldr	r4, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691e      	ldr	r6, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ffb6 	bl	8004c6c <makeFreeRtosPriority>
 8004d00:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d0a:	9202      	str	r2, [sp, #8]
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	9100      	str	r1, [sp, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4632      	mov	r2, r6
 8004d14:	4629      	mov	r1, r5
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 ff20 	bl	8005b5c <xTaskCreateStatic>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e01c      	b.n	8004d5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685c      	ldr	r4, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d2e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ff98 	bl	8004c6c <makeFreeRtosPriority>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	f107 030c 	add.w	r3, r7, #12
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	9200      	str	r2, [sp, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	4632      	mov	r2, r6
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f000 ff65 	bl	8005c1c <xTaskCreate>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d001      	beq.n	8004d5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e000      	b.n	8004d5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <osDelay+0x16>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	e000      	b.n	8004d7e <osDelay+0x18>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f89c 	bl	8005ebc <vTaskDelay>
  
  return osOK;
 8004d84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004d8e:	b590      	push	{r4, r7, lr}
 8004d90:	b085      	sub	sp, #20
 8004d92:	af02      	add	r7, sp, #8
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d011      	beq.n	8004dc4 <osMessageCreate+0x36>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	2400      	movs	r4, #0
 8004dba:	9400      	str	r4, [sp, #0]
 8004dbc:	f000 f9e2 	bl	8005184 <xQueueGenericCreateStatic>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	e008      	b.n	8004dd6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f000 fa55 	bl	800527e <xQueueGenericCreate>
 8004dd4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd90      	pop	{r4, r7, pc}
	...

08004de0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <osMessagePut+0x1e>
    ticks = 1;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004dfe:	f7ff ff4d 	bl	8004c9c <inHandlerMode>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d018      	beq.n	8004e3a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004e08:	f107 0210 	add.w	r2, r7, #16
 8004e0c:	f107 0108 	add.w	r1, r7, #8
 8004e10:	2300      	movs	r3, #0
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fb90 	bl	8005538 <xQueueGenericSendFromISR>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d001      	beq.n	8004e22 <osMessagePut+0x42>
      return osErrorOS;
 8004e1e:	23ff      	movs	r3, #255	@ 0xff
 8004e20:	e018      	b.n	8004e54 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d014      	beq.n	8004e52 <osMessagePut+0x72>
 8004e28:	4b0c      	ldr	r3, [pc, #48]	@ (8004e5c <osMessagePut+0x7c>)
 8004e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	e00b      	b.n	8004e52 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004e3a:	f107 0108 	add.w	r1, r7, #8
 8004e3e:	2300      	movs	r3, #0
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fa76 	bl	8005334 <xQueueGenericSend>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d001      	beq.n	8004e52 <osMessagePut+0x72>
      return osErrorOS;
 8004e4e:	23ff      	movs	r3, #255	@ 0xff
 8004e50:	e000      	b.n	8004e54 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	e000ed04 	.word	0xe000ed04

08004e60 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b08b      	sub	sp, #44	@ 0x2c
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004e7a:	2380      	movs	r3, #128	@ 0x80
 8004e7c:	617b      	str	r3, [r7, #20]
    return event;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	461c      	mov	r4, r3
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e8e:	e054      	b.n	8004f3a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d103      	bne.n	8004ea8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea6:	e009      	b.n	8004ebc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d006      	beq.n	8004ebc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <osMessageGet+0x5c>
      ticks = 1;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004ebc:	f7ff feee 	bl	8004c9c <inHandlerMode>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01c      	beq.n	8004f00 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004ec6:	f107 0220 	add.w	r2, r7, #32
 8004eca:	f107 0314 	add.w	r3, r7, #20
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	68b8      	ldr	r0, [r7, #8]
 8004ed4:	f000 fcb0 	bl	8005838 <xQueueReceiveFromISR>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d102      	bne.n	8004ee4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004ede:	2310      	movs	r3, #16
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e001      	b.n	8004ee8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01d      	beq.n	8004f2a <osMessageGet+0xca>
 8004eee:	4b15      	ldr	r3, [pc, #84]	@ (8004f44 <osMessageGet+0xe4>)
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	e014      	b.n	8004f2a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	3304      	adds	r3, #4
 8004f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f08:	4619      	mov	r1, r3
 8004f0a:	68b8      	ldr	r0, [r7, #8]
 8004f0c:	f000 fbb2 	bl	8005674 <xQueueReceive>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d102      	bne.n	8004f1c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004f16:	2310      	movs	r3, #16
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e006      	b.n	8004f2a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <osMessageGet+0xc6>
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <osMessageGet+0xc8>
 8004f26:	2340      	movs	r3, #64	@ 0x40
 8004f28:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	461c      	mov	r4, r3
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	372c      	adds	r7, #44	@ 0x2c
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd90      	pop	{r4, r7, pc}
 8004f42:	bf00      	nop
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f103 0208 	add.w	r2, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f103 0208 	add.w	r2, r3, #8
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f103 0208 	add.w	r2, r3, #8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d103      	bne.n	800500a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e00c      	b.n	8005024 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3308      	adds	r3, #8
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e002      	b.n	8005018 <vListInsert+0x2e>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	429a      	cmp	r2, r3
 8005022:	d2f6      	bcs.n	8005012 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	601a      	str	r2, [r3, #0]
}
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6892      	ldr	r2, [r2, #8]
 8005072:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6852      	ldr	r2, [r2, #4]
 800507c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d103      	bne.n	8005090 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	1e5a      	subs	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050dc:	f001 fd84 	bl	8006be8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e8:	68f9      	ldr	r1, [r7, #12]
 80050ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	441a      	add	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510c:	3b01      	subs	r3, #1
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005112:	fb01 f303 	mul.w	r3, r1, r3
 8005116:	441a      	add	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	22ff      	movs	r2, #255	@ 0xff
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	22ff      	movs	r2, #255	@ 0xff
 8005128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d114      	bne.n	800515c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01a      	beq.n	8005170 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3310      	adds	r3, #16
 800513e:	4618      	mov	r0, r3
 8005140:	f001 f94c 	bl	80063dc <xTaskRemoveFromEventList>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d012      	beq.n	8005170 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800514a:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <xQueueGenericReset+0xd0>)
 800514c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	e009      	b.n	8005170 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3310      	adds	r3, #16
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fef1 	bl	8004f48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3324      	adds	r3, #36	@ 0x24
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff feec 	bl	8004f48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005170:	f001 fd6c 	bl	8006c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005174:	2301      	movs	r3, #1
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08e      	sub	sp, #56	@ 0x38
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10b      	bne.n	80051ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	e7fd      	b.n	80051ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <xQueueGenericCreateStatic+0x56>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <xQueueGenericCreateStatic+0x5a>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <xQueueGenericCreateStatic+0x5c>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	623b      	str	r3, [r7, #32]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <xQueueGenericCreateStatic+0x84>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <xQueueGenericCreateStatic+0x88>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <xQueueGenericCreateStatic+0x8a>
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10b      	bne.n	800522a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	61fb      	str	r3, [r7, #28]
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	e7fd      	b.n	8005226 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800522a:	2348      	movs	r3, #72	@ 0x48
 800522c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b48      	cmp	r3, #72	@ 0x48
 8005232:	d00b      	beq.n	800524c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	61bb      	str	r3, [r7, #24]
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800524c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005260:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f840 	bl	80052f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005276:	4618      	mov	r0, r3
 8005278:	3730      	adds	r7, #48	@ 0x30
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800527e:	b580      	push	{r7, lr}
 8005280:	b08a      	sub	sp, #40	@ 0x28
 8005282:	af02      	add	r7, sp, #8
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	4613      	mov	r3, r2
 800528a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <xQueueGenericCreate+0x2c>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	613b      	str	r3, [r7, #16]
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	e7fd      	b.n	80052a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	fb02 f303 	mul.w	r3, r2, r3
 80052b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3348      	adds	r3, #72	@ 0x48
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 fdb7 	bl	8006e2c <pvPortMalloc>
 80052be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d011      	beq.n	80052ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	3348      	adds	r3, #72	@ 0x48
 80052ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052d8:	79fa      	ldrb	r2, [r7, #7]
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	4613      	mov	r3, r2
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f805 	bl	80052f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052ea:	69bb      	ldr	r3, [r7, #24]
	}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d103      	bne.n	8005310 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e002      	b.n	8005316 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005322:	2101      	movs	r1, #1
 8005324:	69b8      	ldr	r0, [r7, #24]
 8005326:	f7ff fec3 	bl	80050b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	@ 0x38
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005342:	2300      	movs	r3, #0
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <xQueueGenericSend+0x34>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005362:	bf00      	nop
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <xQueueGenericSend+0x42>
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <xQueueGenericSend+0x46>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <xQueueGenericSend+0x48>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <xQueueGenericSend+0x64>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d103      	bne.n	80053a6 <xQueueGenericSend+0x72>
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <xQueueGenericSend+0x76>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <xQueueGenericSend+0x78>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10b      	bne.n	80053c8 <xQueueGenericSend+0x94>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	623b      	str	r3, [r7, #32]
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	e7fd      	b.n	80053c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053c8:	f001 f9ce 	bl	8006768 <xTaskGetSchedulerState>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <xQueueGenericSend+0xa4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <xQueueGenericSend+0xa8>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <xQueueGenericSend+0xaa>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <xQueueGenericSend+0xc6>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	61fb      	str	r3, [r7, #28]
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053fa:	f001 fbf5 	bl	8006be8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005406:	429a      	cmp	r2, r3
 8005408:	d302      	bcc.n	8005410 <xQueueGenericSend+0xdc>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d129      	bne.n	8005464 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005416:	f000 fa91 	bl	800593c <prvCopyDataToQueue>
 800541a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	3324      	adds	r3, #36	@ 0x24
 8005428:	4618      	mov	r0, r3
 800542a:	f000 ffd7 	bl	80063dc <xTaskRemoveFromEventList>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005434:	4b3f      	ldr	r3, [pc, #252]	@ (8005534 <xQueueGenericSend+0x200>)
 8005436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	e00a      	b.n	800545c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800544c:	4b39      	ldr	r3, [pc, #228]	@ (8005534 <xQueueGenericSend+0x200>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800545c:	f001 fbf6 	bl	8006c4c <vPortExitCritical>
				return pdPASS;
 8005460:	2301      	movs	r3, #1
 8005462:	e063      	b.n	800552c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800546a:	f001 fbef 	bl	8006c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800546e:	2300      	movs	r3, #0
 8005470:	e05c      	b.n	800552c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005478:	f107 0314 	add.w	r3, r7, #20
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f811 	bl	80064a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005482:	2301      	movs	r3, #1
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005486:	f001 fbe1 	bl	8006c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800548a:	f000 fdb7 	bl	8005ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800548e:	f001 fbab 	bl	8006be8 <vPortEnterCritical>
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005498:	b25b      	sxtb	r3, r3
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d103      	bne.n	80054a8 <xQueueGenericSend+0x174>
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d103      	bne.n	80054be <xQueueGenericSend+0x18a>
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054be:	f001 fbc5 	bl	8006c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054c2:	1d3a      	adds	r2, r7, #4
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 f800 	bl	80064d0 <xTaskCheckForTimeOut>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d124      	bne.n	8005520 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054d8:	f000 fb28 	bl	8005b2c <prvIsQueueFull>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d018      	beq.n	8005514 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	3310      	adds	r3, #16
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 ff50 	bl	8006390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054f2:	f000 fab3 	bl	8005a5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054f6:	f000 fd8f 	bl	8006018 <xTaskResumeAll>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f47f af7c 	bne.w	80053fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005502:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <xQueueGenericSend+0x200>)
 8005504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	e772      	b.n	80053fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005516:	f000 faa1 	bl	8005a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800551a:	f000 fd7d 	bl	8006018 <xTaskResumeAll>
 800551e:	e76c      	b.n	80053fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005522:	f000 fa9b 	bl	8005a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005526:	f000 fd77 	bl	8006018 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800552a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800552c:	4618      	mov	r0, r3
 800552e:	3738      	adds	r7, #56	@ 0x38
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b090      	sub	sp, #64	@ 0x40
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <xQueueGenericSendFromISR+0x3e>
 800556e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <xQueueGenericSendFromISR+0x42>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <xQueueGenericSendFromISR+0x44>
 800557a:	2300      	movs	r3, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10b      	bne.n	8005598 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	e7fd      	b.n	8005594 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d103      	bne.n	80055a6 <xQueueGenericSendFromISR+0x6e>
 800559e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <xQueueGenericSendFromISR+0x72>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <xQueueGenericSendFromISR+0x74>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	623b      	str	r3, [r7, #32]
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055c8:	f001 fbee 	bl	8006da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055cc:	f3ef 8211 	mrs	r2, BASEPRI
 80055d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <xQueueGenericSendFromISR+0xc2>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d12f      	bne.n	800565a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005600:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005610:	f000 f994 	bl	800593c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005614:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d112      	bne.n	8005644 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d016      	beq.n	8005654 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	3324      	adds	r3, #36	@ 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fed6 	bl	80063dc <xTaskRemoveFromEventList>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00e      	beq.n	8005654 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e007      	b.n	8005654 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005644:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005648:	3301      	adds	r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	b25a      	sxtb	r2, r3
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005654:	2301      	movs	r3, #1
 8005656:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005658:	e001      	b.n	800565e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800565a:	2300      	movs	r3, #0
 800565c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800565e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005660:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005668:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800566a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800566c:	4618      	mov	r0, r3
 800566e:	3740      	adds	r7, #64	@ 0x40
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08c      	sub	sp, #48	@ 0x30
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <xQueueReceive+0x32>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	623b      	str	r3, [r7, #32]
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	e7fd      	b.n	80056a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <xQueueReceive+0x40>
 80056ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <xQueueReceive+0x44>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <xQueueReceive+0x46>
 80056b8:	2300      	movs	r3, #0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <xQueueReceive+0x62>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	61fb      	str	r3, [r7, #28]
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056d6:	f001 f847 	bl	8006768 <xTaskGetSchedulerState>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <xQueueReceive+0x72>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <xQueueReceive+0x76>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <xQueueReceive+0x78>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10b      	bne.n	8005708 <xQueueReceive+0x94>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61bb      	str	r3, [r7, #24]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005708:	f001 fa6e 	bl	8006be8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01f      	beq.n	8005758 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800571c:	f000 f978 	bl	8005a10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00f      	beq.n	8005750 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005732:	3310      	adds	r3, #16
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fe51 	bl	80063dc <xTaskRemoveFromEventList>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005740:	4b3c      	ldr	r3, [pc, #240]	@ (8005834 <xQueueReceive+0x1c0>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005750:	f001 fa7c 	bl	8006c4c <vPortExitCritical>
				return pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	e069      	b.n	800582c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d103      	bne.n	8005766 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800575e:	f001 fa75 	bl	8006c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005762:	2300      	movs	r3, #0
 8005764:	e062      	b.n	800582c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800576c:	f107 0310 	add.w	r3, r7, #16
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fe97 	bl	80064a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005776:	2301      	movs	r3, #1
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800577a:	f001 fa67 	bl	8006c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800577e:	f000 fc3d 	bl	8005ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005782:	f001 fa31 	bl	8006be8 <vPortEnterCritical>
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800578c:	b25b      	sxtb	r3, r3
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d103      	bne.n	800579c <xQueueReceive+0x128>
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057a2:	b25b      	sxtb	r3, r3
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d103      	bne.n	80057b2 <xQueueReceive+0x13e>
 80057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057b2:	f001 fa4b 	bl	8006c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b6:	1d3a      	adds	r2, r7, #4
 80057b8:	f107 0310 	add.w	r3, r7, #16
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fe86 	bl	80064d0 <xTaskCheckForTimeOut>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d123      	bne.n	8005812 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057cc:	f000 f998 	bl	8005b00 <prvIsQueueEmpty>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d017      	beq.n	8005806 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d8:	3324      	adds	r3, #36	@ 0x24
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fdd6 	bl	8006390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057e6:	f000 f939 	bl	8005a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057ea:	f000 fc15 	bl	8006018 <xTaskResumeAll>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d189      	bne.n	8005708 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80057f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005834 <xQueueReceive+0x1c0>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	e780      	b.n	8005708 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005808:	f000 f928 	bl	8005a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800580c:	f000 fc04 	bl	8006018 <xTaskResumeAll>
 8005810:	e77a      	b.n	8005708 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005814:	f000 f922 	bl	8005a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005818:	f000 fbfe 	bl	8006018 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800581c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800581e:	f000 f96f 	bl	8005b00 <prvIsQueueEmpty>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	f43f af6f 	beq.w	8005708 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800582a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800582c:	4618      	mov	r0, r3
 800582e:	3730      	adds	r7, #48	@ 0x30
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	@ 0x38
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	623b      	str	r3, [r7, #32]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d103      	bne.n	8005874 <xQueueReceiveFromISR+0x3c>
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <xQueueReceiveFromISR+0x40>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <xQueueReceiveFromISR+0x42>
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	61fb      	str	r3, [r7, #28]
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	e7fd      	b.n	8005892 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005896:	f001 fa87 	bl	8006da8 <vPortValidateInterruptPriority>
	__asm volatile
 800589a:	f3ef 8211 	mrs	r2, BASEPRI
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	61ba      	str	r2, [r7, #24]
 80058b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d02f      	beq.n	8005922 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058d0:	f000 f89e 	bl	8005a10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d6:	1e5a      	subs	r2, r3, #1
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80058dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d112      	bne.n	800590c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d016      	beq.n	800591c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	3310      	adds	r3, #16
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fd72 	bl	80063dc <xTaskRemoveFromEventList>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00e      	beq.n	800591c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e007      	b.n	800591c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800590c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005910:	3301      	adds	r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	b25a      	sxtb	r2, r3
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800591c:	2301      	movs	r3, #1
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005920:	e001      	b.n	8005926 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
 8005926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005928:	613b      	str	r3, [r7, #16]
	__asm volatile
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f383 8811 	msr	BASEPRI, r3
}
 8005930:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005934:	4618      	mov	r0, r3
 8005936:	3738      	adds	r7, #56	@ 0x38
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d14d      	bne.n	80059fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 ff1c 	bl	80067a4 <xTaskPriorityDisinherit>
 800596c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
 8005974:	e043      	b.n	80059fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d119      	bne.n	80059b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6858      	ldr	r0, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005984:	461a      	mov	r2, r3
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	f005 fc93 	bl	800b2b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	441a      	add	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d32b      	bcc.n	80059fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	e026      	b.n	80059fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68d8      	ldr	r0, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	461a      	mov	r2, r3
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	f005 fc79 	bl	800b2b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	425b      	negs	r3, r3
 80059ca:	441a      	add	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d207      	bcs.n	80059ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	425b      	negs	r3, r3
 80059e6:	441a      	add	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d105      	bne.n	80059fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a06:	697b      	ldr	r3, [r7, #20]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d018      	beq.n	8005a54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	441a      	add	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d303      	bcc.n	8005a44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68d9      	ldr	r1, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6838      	ldr	r0, [r7, #0]
 8005a50:	f005 fc2f 	bl	800b2b2 <memcpy>
	}
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a64:	f001 f8c0 	bl	8006be8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a70:	e011      	b.n	8005a96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d012      	beq.n	8005aa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3324      	adds	r3, #36	@ 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fcac 	bl	80063dc <xTaskRemoveFromEventList>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a8a:	f000 fd85 	bl	8006598 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dce9      	bgt.n	8005a72 <prvUnlockQueue+0x16>
 8005a9e:	e000      	b.n	8005aa2 <prvUnlockQueue+0x46>
					break;
 8005aa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	22ff      	movs	r2, #255	@ 0xff
 8005aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005aaa:	f001 f8cf 	bl	8006c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aae:	f001 f89b 	bl	8006be8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aba:	e011      	b.n	8005ae0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d012      	beq.n	8005aea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3310      	adds	r3, #16
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fc87 	bl	80063dc <xTaskRemoveFromEventList>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ad4:	f000 fd60 	bl	8006598 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	dce9      	bgt.n	8005abc <prvUnlockQueue+0x60>
 8005ae8:	e000      	b.n	8005aec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	22ff      	movs	r2, #255	@ 0xff
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005af4:	f001 f8aa 	bl	8006c4c <vPortExitCritical>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b08:	f001 f86e 	bl	8006be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e001      	b.n	8005b1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b1e:	f001 f895 	bl	8006c4c <vPortExitCritical>

	return xReturn;
 8005b22:	68fb      	ldr	r3, [r7, #12]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b34:	f001 f858 	bl	8006be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d102      	bne.n	8005b4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e001      	b.n	8005b4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b4e:	f001 f87d 	bl	8006c4c <vPortExitCritical>

	return xReturn;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08e      	sub	sp, #56	@ 0x38
 8005b60:	af04      	add	r7, sp, #16
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	623b      	str	r3, [r7, #32]
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10b      	bne.n	8005ba6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	61fb      	str	r3, [r7, #28]
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	e7fd      	b.n	8005ba2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ba6:	23a0      	movs	r3, #160	@ 0xa0
 8005ba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2ba0      	cmp	r3, #160	@ 0xa0
 8005bae:	d00b      	beq.n	8005bc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	61bb      	str	r3, [r7, #24]
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	e7fd      	b.n	8005bc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005bc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01e      	beq.n	8005c0e <xTaskCreateStatic+0xb2>
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01b      	beq.n	8005c0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bde:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005be8:	2300      	movs	r3, #0
 8005bea:	9303      	str	r3, [sp, #12]
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	9302      	str	r3, [sp, #8]
 8005bf0:	f107 0314 	add.w	r3, r7, #20
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f851 	bl	8005ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c08:	f000 f8ee 	bl	8005de8 <prvAddNewTaskToReadyList>
 8005c0c:	e001      	b.n	8005c12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c12:	697b      	ldr	r3, [r7, #20]
	}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3728      	adds	r7, #40	@ 0x28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	@ 0x30
 8005c20:	af04      	add	r7, sp, #16
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 f8fb 	bl	8006e2c <pvPortMalloc>
 8005c36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00e      	beq.n	8005c5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c3e:	20a0      	movs	r0, #160	@ 0xa0
 8005c40:	f001 f8f4 	bl	8006e2c <pvPortMalloc>
 8005c44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c52:	e005      	b.n	8005c60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c54:	6978      	ldr	r0, [r7, #20]
 8005c56:	f001 f9b7 	bl	8006fc8 <vPortFree>
 8005c5a:	e001      	b.n	8005c60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d017      	beq.n	8005c96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	2300      	movs	r3, #0
 8005c72:	9303      	str	r3, [sp, #12]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	9302      	str	r3, [sp, #8]
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f80f 	bl	8005ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c8a:	69f8      	ldr	r0, [r7, #28]
 8005c8c:	f000 f8ac 	bl	8005de8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c90:	2301      	movs	r3, #1
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	e002      	b.n	8005c9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
	}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f023 0307 	bic.w	r3, r3, #7
 8005cce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	617b      	str	r3, [r7, #20]
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01f      	beq.n	8005d38 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	e012      	b.n	8005d24 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	7819      	ldrb	r1, [r3, #0]
 8005d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3334      	adds	r3, #52	@ 0x34
 8005d0e:	460a      	mov	r2, r1
 8005d10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	4413      	add	r3, r2
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d006      	beq.n	8005d2c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3301      	adds	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d9e9      	bls.n	8005cfe <prvInitialiseNewTask+0x56>
 8005d2a:	e000      	b.n	8005d2e <prvInitialiseNewTask+0x86>
			{
				break;
 8005d2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d36:	e003      	b.n	8005d40 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d42:	2b06      	cmp	r3, #6
 8005d44:	d901      	bls.n	8005d4a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d46:	2306      	movs	r3, #6
 8005d48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d54:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	2200      	movs	r2, #0
 8005d5a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff f911 	bl	8004f88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	3318      	adds	r3, #24
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff f90c 	bl	8004f88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	f1c3 0207 	rsb	r2, r3, #7
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	334c      	adds	r3, #76	@ 0x4c
 8005d9a:	224c      	movs	r2, #76	@ 0x4c
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f005 f9a2 	bl	800b0e8 <memset>
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	4a0d      	ldr	r2, [pc, #52]	@ (8005ddc <prvInitialiseNewTask+0x134>)
 8005da8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	4a0c      	ldr	r2, [pc, #48]	@ (8005de0 <prvInitialiseNewTask+0x138>)
 8005dae:	655a      	str	r2, [r3, #84]	@ 0x54
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	4a0c      	ldr	r2, [pc, #48]	@ (8005de4 <prvInitialiseNewTask+0x13c>)
 8005db4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	68f9      	ldr	r1, [r7, #12]
 8005dba:	69b8      	ldr	r0, [r7, #24]
 8005dbc:	f000 fde0 	bl	8006980 <pxPortInitialiseStack>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dd2:	bf00      	nop
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20004c70 	.word	0x20004c70
 8005de0:	20004cd8 	.word	0x20004cd8
 8005de4:	20004d40 	.word	0x20004d40

08005de8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005df0:	f000 fefa 	bl	8006be8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005df4:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea0 <prvAddNewTaskToReadyList+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	4a29      	ldr	r2, [pc, #164]	@ (8005ea0 <prvAddNewTaskToReadyList+0xb8>)
 8005dfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dfe:	4b29      	ldr	r3, [pc, #164]	@ (8005ea4 <prvAddNewTaskToReadyList+0xbc>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e06:	4a27      	ldr	r2, [pc, #156]	@ (8005ea4 <prvAddNewTaskToReadyList+0xbc>)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e0c:	4b24      	ldr	r3, [pc, #144]	@ (8005ea0 <prvAddNewTaskToReadyList+0xb8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d110      	bne.n	8005e36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e14:	f000 fbe4 	bl	80065e0 <prvInitialiseTaskLists>
 8005e18:	e00d      	b.n	8005e36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e1a:	4b23      	ldr	r3, [pc, #140]	@ (8005ea8 <prvAddNewTaskToReadyList+0xc0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e22:	4b20      	ldr	r3, [pc, #128]	@ (8005ea4 <prvAddNewTaskToReadyList+0xbc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d802      	bhi.n	8005e36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e30:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea4 <prvAddNewTaskToReadyList+0xbc>)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e36:	4b1d      	ldr	r3, [pc, #116]	@ (8005eac <prvAddNewTaskToReadyList+0xc4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005eac <prvAddNewTaskToReadyList+0xc4>)
 8005e3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	2201      	movs	r2, #1
 8005e46:	409a      	lsls	r2, r3
 8005e48:	4b19      	ldr	r3, [pc, #100]	@ (8005eb0 <prvAddNewTaskToReadyList+0xc8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <prvAddNewTaskToReadyList+0xc8>)
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4a15      	ldr	r2, [pc, #84]	@ (8005eb4 <prvAddNewTaskToReadyList+0xcc>)
 8005e60:	441a      	add	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f7ff f89a 	bl	8004fa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e6e:	f000 feed 	bl	8006c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea8 <prvAddNewTaskToReadyList+0xc0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea4 <prvAddNewTaskToReadyList+0xbc>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d207      	bcs.n	8005e98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e88:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb8 <prvAddNewTaskToReadyList+0xd0>)
 8005e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000fa0 	.word	0x20000fa0
 8005ea4:	20000ea0 	.word	0x20000ea0
 8005ea8:	20000fac 	.word	0x20000fac
 8005eac:	20000fbc 	.word	0x20000fbc
 8005eb0:	20000fa8 	.word	0x20000fa8
 8005eb4:	20000ea4 	.word	0x20000ea4
 8005eb8:	e000ed04 	.word	0xe000ed04

08005ebc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d018      	beq.n	8005f00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ece:	4b14      	ldr	r3, [pc, #80]	@ (8005f20 <vTaskDelay+0x64>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <vTaskDelay+0x32>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	60bb      	str	r3, [r7, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005eee:	f000 f885 	bl	8005ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fcdd 	bl	80068b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005efa:	f000 f88d 	bl	8006018 <xTaskResumeAll>
 8005efe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d107      	bne.n	8005f16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005f06:	4b07      	ldr	r3, [pc, #28]	@ (8005f24 <vTaskDelay+0x68>)
 8005f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000fc8 	.word	0x20000fc8
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	@ 0x28
 8005f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f36:	463a      	mov	r2, r7
 8005f38:	1d39      	adds	r1, r7, #4
 8005f3a:	f107 0308 	add.w	r3, r7, #8
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fb f802 	bl	8000f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	9202      	str	r2, [sp, #8]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	2300      	movs	r3, #0
 8005f54:	460a      	mov	r2, r1
 8005f56:	4921      	ldr	r1, [pc, #132]	@ (8005fdc <vTaskStartScheduler+0xb4>)
 8005f58:	4821      	ldr	r0, [pc, #132]	@ (8005fe0 <vTaskStartScheduler+0xb8>)
 8005f5a:	f7ff fdff 	bl	8005b5c <xTaskCreateStatic>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4a20      	ldr	r2, [pc, #128]	@ (8005fe4 <vTaskStartScheduler+0xbc>)
 8005f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f64:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe4 <vTaskStartScheduler+0xbc>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e001      	b.n	8005f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d11b      	bne.n	8005fb4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	613b      	str	r3, [r7, #16]
}
 8005f8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f90:	4b15      	ldr	r3, [pc, #84]	@ (8005fe8 <vTaskStartScheduler+0xc0>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	334c      	adds	r3, #76	@ 0x4c
 8005f96:	4a15      	ldr	r2, [pc, #84]	@ (8005fec <vTaskStartScheduler+0xc4>)
 8005f98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f9a:	4b15      	ldr	r3, [pc, #84]	@ (8005ff0 <vTaskStartScheduler+0xc8>)
 8005f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fa2:	4b14      	ldr	r3, [pc, #80]	@ (8005ff4 <vTaskStartScheduler+0xcc>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005fa8:	4b13      	ldr	r3, [pc, #76]	@ (8005ff8 <vTaskStartScheduler+0xd0>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fae:	f000 fd77 	bl	8006aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fb2:	e00f      	b.n	8005fd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d10b      	bne.n	8005fd4 <vTaskStartScheduler+0xac>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	60fb      	str	r3, [r7, #12]
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	e7fd      	b.n	8005fd0 <vTaskStartScheduler+0xa8>
}
 8005fd4:	bf00      	nop
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	0800d610 	.word	0x0800d610
 8005fe0:	080065b1 	.word	0x080065b1
 8005fe4:	20000fc4 	.word	0x20000fc4
 8005fe8:	20000ea0 	.word	0x20000ea0
 8005fec:	20000744 	.word	0x20000744
 8005ff0:	20000fc0 	.word	0x20000fc0
 8005ff4:	20000fac 	.word	0x20000fac
 8005ff8:	20000fa4 	.word	0x20000fa4

08005ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006000:	4b04      	ldr	r3, [pc, #16]	@ (8006014 <vTaskSuspendAll+0x18>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a03      	ldr	r2, [pc, #12]	@ (8006014 <vTaskSuspendAll+0x18>)
 8006008:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800600a:	bf00      	nop
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	20000fc8 	.word	0x20000fc8

08006018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006022:	2300      	movs	r3, #0
 8006024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006026:	4b42      	ldr	r3, [pc, #264]	@ (8006130 <xTaskResumeAll+0x118>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <xTaskResumeAll+0x2e>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	603b      	str	r3, [r7, #0]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006046:	f000 fdcf 	bl	8006be8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800604a:	4b39      	ldr	r3, [pc, #228]	@ (8006130 <xTaskResumeAll+0x118>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3b01      	subs	r3, #1
 8006050:	4a37      	ldr	r2, [pc, #220]	@ (8006130 <xTaskResumeAll+0x118>)
 8006052:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006054:	4b36      	ldr	r3, [pc, #216]	@ (8006130 <xTaskResumeAll+0x118>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d161      	bne.n	8006120 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800605c:	4b35      	ldr	r3, [pc, #212]	@ (8006134 <xTaskResumeAll+0x11c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d05d      	beq.n	8006120 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006064:	e02e      	b.n	80060c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006066:	4b34      	ldr	r3, [pc, #208]	@ (8006138 <xTaskResumeAll+0x120>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3318      	adds	r3, #24
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fff2 	bl	800505c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3304      	adds	r3, #4
 800607c:	4618      	mov	r0, r3
 800607e:	f7fe ffed 	bl	800505c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	2201      	movs	r2, #1
 8006088:	409a      	lsls	r2, r3
 800608a:	4b2c      	ldr	r3, [pc, #176]	@ (800613c <xTaskResumeAll+0x124>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4313      	orrs	r3, r2
 8006090:	4a2a      	ldr	r2, [pc, #168]	@ (800613c <xTaskResumeAll+0x124>)
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4a27      	ldr	r2, [pc, #156]	@ (8006140 <xTaskResumeAll+0x128>)
 80060a2:	441a      	add	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3304      	adds	r3, #4
 80060a8:	4619      	mov	r1, r3
 80060aa:	4610      	mov	r0, r2
 80060ac:	f7fe ff79 	bl	8004fa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b4:	4b23      	ldr	r3, [pc, #140]	@ (8006144 <xTaskResumeAll+0x12c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d302      	bcc.n	80060c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80060be:	4b22      	ldr	r3, [pc, #136]	@ (8006148 <xTaskResumeAll+0x130>)
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006138 <xTaskResumeAll+0x120>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1cc      	bne.n	8006066 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060d2:	f000 fb29 	bl	8006728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060d6:	4b1d      	ldr	r3, [pc, #116]	@ (800614c <xTaskResumeAll+0x134>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d010      	beq.n	8006104 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060e2:	f000 f837 	bl	8006154 <xTaskIncrementTick>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80060ec:	4b16      	ldr	r3, [pc, #88]	@ (8006148 <xTaskResumeAll+0x130>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f1      	bne.n	80060e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80060fe:	4b13      	ldr	r3, [pc, #76]	@ (800614c <xTaskResumeAll+0x134>)
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006104:	4b10      	ldr	r3, [pc, #64]	@ (8006148 <xTaskResumeAll+0x130>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800610c:	2301      	movs	r3, #1
 800610e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006110:	4b0f      	ldr	r3, [pc, #60]	@ (8006150 <xTaskResumeAll+0x138>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006120:	f000 fd94 	bl	8006c4c <vPortExitCritical>

	return xAlreadyYielded;
 8006124:	68bb      	ldr	r3, [r7, #8]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000fc8 	.word	0x20000fc8
 8006134:	20000fa0 	.word	0x20000fa0
 8006138:	20000f60 	.word	0x20000f60
 800613c:	20000fa8 	.word	0x20000fa8
 8006140:	20000ea4 	.word	0x20000ea4
 8006144:	20000ea0 	.word	0x20000ea0
 8006148:	20000fb4 	.word	0x20000fb4
 800614c:	20000fb0 	.word	0x20000fb0
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615e:	4b4f      	ldr	r3, [pc, #316]	@ (800629c <xTaskIncrementTick+0x148>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 808f 	bne.w	8006286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006168:	4b4d      	ldr	r3, [pc, #308]	@ (80062a0 <xTaskIncrementTick+0x14c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3301      	adds	r3, #1
 800616e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006170:	4a4b      	ldr	r2, [pc, #300]	@ (80062a0 <xTaskIncrementTick+0x14c>)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d121      	bne.n	80061c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800617c:	4b49      	ldr	r3, [pc, #292]	@ (80062a4 <xTaskIncrementTick+0x150>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	603b      	str	r3, [r7, #0]
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	e7fd      	b.n	800619a <xTaskIncrementTick+0x46>
 800619e:	4b41      	ldr	r3, [pc, #260]	@ (80062a4 <xTaskIncrementTick+0x150>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	4b40      	ldr	r3, [pc, #256]	@ (80062a8 <xTaskIncrementTick+0x154>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a3e      	ldr	r2, [pc, #248]	@ (80062a4 <xTaskIncrementTick+0x150>)
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	4a3e      	ldr	r2, [pc, #248]	@ (80062a8 <xTaskIncrementTick+0x154>)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	4b3e      	ldr	r3, [pc, #248]	@ (80062ac <xTaskIncrementTick+0x158>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	4a3c      	ldr	r2, [pc, #240]	@ (80062ac <xTaskIncrementTick+0x158>)
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	f000 fab4 	bl	8006728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061c0:	4b3b      	ldr	r3, [pc, #236]	@ (80062b0 <xTaskIncrementTick+0x15c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d348      	bcc.n	800625c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ca:	4b36      	ldr	r3, [pc, #216]	@ (80062a4 <xTaskIncrementTick+0x150>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d4:	4b36      	ldr	r3, [pc, #216]	@ (80062b0 <xTaskIncrementTick+0x15c>)
 80061d6:	f04f 32ff 	mov.w	r2, #4294967295
 80061da:	601a      	str	r2, [r3, #0]
					break;
 80061dc:	e03e      	b.n	800625c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061de:	4b31      	ldr	r3, [pc, #196]	@ (80062a4 <xTaskIncrementTick+0x150>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d203      	bcs.n	80061fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061f6:	4a2e      	ldr	r2, [pc, #184]	@ (80062b0 <xTaskIncrementTick+0x15c>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061fc:	e02e      	b.n	800625c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	3304      	adds	r3, #4
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe ff2a 	bl	800505c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	2b00      	cmp	r3, #0
 800620e:	d004      	beq.n	800621a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	3318      	adds	r3, #24
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe ff21 	bl	800505c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	2201      	movs	r2, #1
 8006220:	409a      	lsls	r2, r3
 8006222:	4b24      	ldr	r3, [pc, #144]	@ (80062b4 <xTaskIncrementTick+0x160>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <xTaskIncrementTick+0x160>)
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4a1f      	ldr	r2, [pc, #124]	@ (80062b8 <xTaskIncrementTick+0x164>)
 800623a:	441a      	add	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f7fe fead 	bl	8004fa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624c:	4b1b      	ldr	r3, [pc, #108]	@ (80062bc <xTaskIncrementTick+0x168>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	429a      	cmp	r2, r3
 8006254:	d3b9      	bcc.n	80061ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006256:	2301      	movs	r3, #1
 8006258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625a:	e7b6      	b.n	80061ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800625c:	4b17      	ldr	r3, [pc, #92]	@ (80062bc <xTaskIncrementTick+0x168>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006262:	4915      	ldr	r1, [pc, #84]	@ (80062b8 <xTaskIncrementTick+0x164>)
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d901      	bls.n	8006278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006278:	4b11      	ldr	r3, [pc, #68]	@ (80062c0 <xTaskIncrementTick+0x16c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e004      	b.n	8006290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006286:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <xTaskIncrementTick+0x170>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	4a0d      	ldr	r2, [pc, #52]	@ (80062c4 <xTaskIncrementTick+0x170>)
 800628e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006290:	697b      	ldr	r3, [r7, #20]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000fc8 	.word	0x20000fc8
 80062a0:	20000fa4 	.word	0x20000fa4
 80062a4:	20000f58 	.word	0x20000f58
 80062a8:	20000f5c 	.word	0x20000f5c
 80062ac:	20000fb8 	.word	0x20000fb8
 80062b0:	20000fc0 	.word	0x20000fc0
 80062b4:	20000fa8 	.word	0x20000fa8
 80062b8:	20000ea4 	.word	0x20000ea4
 80062bc:	20000ea0 	.word	0x20000ea0
 80062c0:	20000fb4 	.word	0x20000fb4
 80062c4:	20000fb0 	.word	0x20000fb0

080062c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006378 <vTaskSwitchContext+0xb0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062d6:	4b29      	ldr	r3, [pc, #164]	@ (800637c <vTaskSwitchContext+0xb4>)
 80062d8:	2201      	movs	r2, #1
 80062da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062dc:	e045      	b.n	800636a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80062de:	4b27      	ldr	r3, [pc, #156]	@ (800637c <vTaskSwitchContext+0xb4>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e4:	4b26      	ldr	r3, [pc, #152]	@ (8006380 <vTaskSwitchContext+0xb8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	fab3 f383 	clz	r3, r3
 80062f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062f2:	7afb      	ldrb	r3, [r7, #11]
 80062f4:	f1c3 031f 	rsb	r3, r3, #31
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	4922      	ldr	r1, [pc, #136]	@ (8006384 <vTaskSwitchContext+0xbc>)
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <vTaskSwitchContext+0x5e>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	e7fd      	b.n	8006322 <vTaskSwitchContext+0x5a>
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4a14      	ldr	r2, [pc, #80]	@ (8006384 <vTaskSwitchContext+0xbc>)
 8006332:	4413      	add	r3, r2
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	605a      	str	r2, [r3, #4]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	3308      	adds	r3, #8
 8006348:	429a      	cmp	r2, r3
 800634a:	d104      	bne.n	8006356 <vTaskSwitchContext+0x8e>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	605a      	str	r2, [r3, #4]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	4a0a      	ldr	r2, [pc, #40]	@ (8006388 <vTaskSwitchContext+0xc0>)
 800635e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006360:	4b09      	ldr	r3, [pc, #36]	@ (8006388 <vTaskSwitchContext+0xc0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	334c      	adds	r3, #76	@ 0x4c
 8006366:	4a09      	ldr	r2, [pc, #36]	@ (800638c <vTaskSwitchContext+0xc4>)
 8006368:	6013      	str	r3, [r2, #0]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000fc8 	.word	0x20000fc8
 800637c:	20000fb4 	.word	0x20000fb4
 8006380:	20000fa8 	.word	0x20000fa8
 8006384:	20000ea4 	.word	0x20000ea4
 8006388:	20000ea0 	.word	0x20000ea0
 800638c:	20000744 	.word	0x20000744

08006390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	60fb      	str	r3, [r7, #12]
}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	e7fd      	b.n	80063b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063b8:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <vTaskPlaceOnEventList+0x48>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3318      	adds	r3, #24
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fe fe12 	bl	8004fea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063c6:	2101      	movs	r1, #1
 80063c8:	6838      	ldr	r0, [r7, #0]
 80063ca:	f000 fa73 	bl	80068b4 <prvAddCurrentTaskToDelayedList>
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000ea0 	.word	0x20000ea0

080063dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60fb      	str	r3, [r7, #12]
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	e7fd      	b.n	8006406 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	3318      	adds	r3, #24
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fe24 	bl	800505c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006414:	4b1d      	ldr	r3, [pc, #116]	@ (800648c <xTaskRemoveFromEventList+0xb0>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d11c      	bne.n	8006456 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3304      	adds	r3, #4
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe fe1b 	bl	800505c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642a:	2201      	movs	r2, #1
 800642c:	409a      	lsls	r2, r3
 800642e:	4b18      	ldr	r3, [pc, #96]	@ (8006490 <xTaskRemoveFromEventList+0xb4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4313      	orrs	r3, r2
 8006434:	4a16      	ldr	r2, [pc, #88]	@ (8006490 <xTaskRemoveFromEventList+0xb4>)
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4a13      	ldr	r2, [pc, #76]	@ (8006494 <xTaskRemoveFromEventList+0xb8>)
 8006446:	441a      	add	r2, r3
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f7fe fda7 	bl	8004fa2 <vListInsertEnd>
 8006454:	e005      	b.n	8006462 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3318      	adds	r3, #24
 800645a:	4619      	mov	r1, r3
 800645c:	480e      	ldr	r0, [pc, #56]	@ (8006498 <xTaskRemoveFromEventList+0xbc>)
 800645e:	f7fe fda0 	bl	8004fa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006466:	4b0d      	ldr	r3, [pc, #52]	@ (800649c <xTaskRemoveFromEventList+0xc0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646c:	429a      	cmp	r2, r3
 800646e:	d905      	bls.n	800647c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006474:	4b0a      	ldr	r3, [pc, #40]	@ (80064a0 <xTaskRemoveFromEventList+0xc4>)
 8006476:	2201      	movs	r2, #1
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	e001      	b.n	8006480 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006480:	697b      	ldr	r3, [r7, #20]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000fc8 	.word	0x20000fc8
 8006490:	20000fa8 	.word	0x20000fa8
 8006494:	20000ea4 	.word	0x20000ea4
 8006498:	20000f60 	.word	0x20000f60
 800649c:	20000ea0 	.word	0x20000ea0
 80064a0:	20000fb4 	.word	0x20000fb4

080064a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064ac:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <vTaskInternalSetTimeOutState+0x24>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <vTaskInternalSetTimeOutState+0x28>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	605a      	str	r2, [r3, #4]
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	20000fb8 	.word	0x20000fb8
 80064cc:	20000fa4 	.word	0x20000fa4

080064d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	613b      	str	r3, [r7, #16]
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	e7fd      	b.n	80064f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60fb      	str	r3, [r7, #12]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006516:	f000 fb67 	bl	8006be8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800651a:	4b1d      	ldr	r3, [pc, #116]	@ (8006590 <xTaskCheckForTimeOut+0xc0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d102      	bne.n	800653a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006534:	2300      	movs	r3, #0
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	e023      	b.n	8006582 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b15      	ldr	r3, [pc, #84]	@ (8006594 <xTaskCheckForTimeOut+0xc4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d007      	beq.n	8006556 <xTaskCheckForTimeOut+0x86>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	429a      	cmp	r2, r3
 800654e:	d302      	bcc.n	8006556 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	e015      	b.n	8006582 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	429a      	cmp	r2, r3
 800655e:	d20b      	bcs.n	8006578 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff ff99 	bl	80064a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	e004      	b.n	8006582 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800657e:	2301      	movs	r3, #1
 8006580:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006582:	f000 fb63 	bl	8006c4c <vPortExitCritical>

	return xReturn;
 8006586:	69fb      	ldr	r3, [r7, #28]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000fa4 	.word	0x20000fa4
 8006594:	20000fb8 	.word	0x20000fb8

08006598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800659c:	4b03      	ldr	r3, [pc, #12]	@ (80065ac <vTaskMissedYield+0x14>)
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]
}
 80065a2:	bf00      	nop
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000fb4 	.word	0x20000fb4

080065b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065b8:	f000 f852 	bl	8006660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065bc:	4b06      	ldr	r3, [pc, #24]	@ (80065d8 <prvIdleTask+0x28>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d9f9      	bls.n	80065b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065c4:	4b05      	ldr	r3, [pc, #20]	@ (80065dc <prvIdleTask+0x2c>)
 80065c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065d4:	e7f0      	b.n	80065b8 <prvIdleTask+0x8>
 80065d6:	bf00      	nop
 80065d8:	20000ea4 	.word	0x20000ea4
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065e6:	2300      	movs	r3, #0
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	e00c      	b.n	8006606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4a12      	ldr	r2, [pc, #72]	@ (8006640 <prvInitialiseTaskLists+0x60>)
 80065f8:	4413      	add	r3, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fca4 	bl	8004f48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3301      	adds	r3, #1
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b06      	cmp	r3, #6
 800660a:	d9ef      	bls.n	80065ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800660c:	480d      	ldr	r0, [pc, #52]	@ (8006644 <prvInitialiseTaskLists+0x64>)
 800660e:	f7fe fc9b 	bl	8004f48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006612:	480d      	ldr	r0, [pc, #52]	@ (8006648 <prvInitialiseTaskLists+0x68>)
 8006614:	f7fe fc98 	bl	8004f48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006618:	480c      	ldr	r0, [pc, #48]	@ (800664c <prvInitialiseTaskLists+0x6c>)
 800661a:	f7fe fc95 	bl	8004f48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800661e:	480c      	ldr	r0, [pc, #48]	@ (8006650 <prvInitialiseTaskLists+0x70>)
 8006620:	f7fe fc92 	bl	8004f48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006624:	480b      	ldr	r0, [pc, #44]	@ (8006654 <prvInitialiseTaskLists+0x74>)
 8006626:	f7fe fc8f 	bl	8004f48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800662a:	4b0b      	ldr	r3, [pc, #44]	@ (8006658 <prvInitialiseTaskLists+0x78>)
 800662c:	4a05      	ldr	r2, [pc, #20]	@ (8006644 <prvInitialiseTaskLists+0x64>)
 800662e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006630:	4b0a      	ldr	r3, [pc, #40]	@ (800665c <prvInitialiseTaskLists+0x7c>)
 8006632:	4a05      	ldr	r2, [pc, #20]	@ (8006648 <prvInitialiseTaskLists+0x68>)
 8006634:	601a      	str	r2, [r3, #0]
}
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000ea4 	.word	0x20000ea4
 8006644:	20000f30 	.word	0x20000f30
 8006648:	20000f44 	.word	0x20000f44
 800664c:	20000f60 	.word	0x20000f60
 8006650:	20000f74 	.word	0x20000f74
 8006654:	20000f8c 	.word	0x20000f8c
 8006658:	20000f58 	.word	0x20000f58
 800665c:	20000f5c 	.word	0x20000f5c

08006660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006666:	e019      	b.n	800669c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006668:	f000 fabe 	bl	8006be8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666c:	4b10      	ldr	r3, [pc, #64]	@ (80066b0 <prvCheckTasksWaitingTermination+0x50>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3304      	adds	r3, #4
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe fcef 	bl	800505c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800667e:	4b0d      	ldr	r3, [pc, #52]	@ (80066b4 <prvCheckTasksWaitingTermination+0x54>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3b01      	subs	r3, #1
 8006684:	4a0b      	ldr	r2, [pc, #44]	@ (80066b4 <prvCheckTasksWaitingTermination+0x54>)
 8006686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006688:	4b0b      	ldr	r3, [pc, #44]	@ (80066b8 <prvCheckTasksWaitingTermination+0x58>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3b01      	subs	r3, #1
 800668e:	4a0a      	ldr	r2, [pc, #40]	@ (80066b8 <prvCheckTasksWaitingTermination+0x58>)
 8006690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006692:	f000 fadb 	bl	8006c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f810 	bl	80066bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <prvCheckTasksWaitingTermination+0x58>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e1      	bne.n	8006668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000f74 	.word	0x20000f74
 80066b4:	20000fa0 	.word	0x20000fa0
 80066b8:	20000f88 	.word	0x20000f88

080066bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	334c      	adds	r3, #76	@ 0x4c
 80066c8:	4618      	mov	r0, r3
 80066ca:	f004 fd29 	bl	800b120 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d108      	bne.n	80066ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fc73 	bl	8006fc8 <vPortFree>
				vPortFree( pxTCB );
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fc70 	bl	8006fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066e8:	e019      	b.n	800671e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d103      	bne.n	80066fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fc67 	bl	8006fc8 <vPortFree>
	}
 80066fa:	e010      	b.n	800671e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006702:	2b02      	cmp	r3, #2
 8006704:	d00b      	beq.n	800671e <prvDeleteTCB+0x62>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60fb      	str	r3, [r7, #12]
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	e7fd      	b.n	800671a <prvDeleteTCB+0x5e>
	}
 800671e:	bf00      	nop
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800672e:	4b0c      	ldr	r3, [pc, #48]	@ (8006760 <prvResetNextTaskUnblockTime+0x38>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006738:	4b0a      	ldr	r3, [pc, #40]	@ (8006764 <prvResetNextTaskUnblockTime+0x3c>)
 800673a:	f04f 32ff 	mov.w	r2, #4294967295
 800673e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006740:	e008      	b.n	8006754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006742:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <prvResetNextTaskUnblockTime+0x38>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	4a04      	ldr	r2, [pc, #16]	@ (8006764 <prvResetNextTaskUnblockTime+0x3c>)
 8006752:	6013      	str	r3, [r2, #0]
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	20000f58 	.word	0x20000f58
 8006764:	20000fc0 	.word	0x20000fc0

08006768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800676e:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <xTaskGetSchedulerState+0x34>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006776:	2301      	movs	r3, #1
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	e008      	b.n	800678e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800677c:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <xTaskGetSchedulerState+0x38>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006784:	2302      	movs	r3, #2
 8006786:	607b      	str	r3, [r7, #4]
 8006788:	e001      	b.n	800678e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800678a:	2300      	movs	r3, #0
 800678c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800678e:	687b      	ldr	r3, [r7, #4]
	}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	20000fac 	.word	0x20000fac
 80067a0:	20000fc8 	.word	0x20000fc8

080067a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d070      	beq.n	800689c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067ba:	4b3b      	ldr	r3, [pc, #236]	@ (80068a8 <xTaskPriorityDisinherit+0x104>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d00b      	beq.n	80067dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60fb      	str	r3, [r7, #12]
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	60bb      	str	r3, [r7, #8]
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	e7fd      	b.n	80067f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006800:	1e5a      	subs	r2, r3, #1
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680e:	429a      	cmp	r2, r3
 8006810:	d044      	beq.n	800689c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006816:	2b00      	cmp	r3, #0
 8006818:	d140      	bne.n	800689c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	3304      	adds	r3, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fc1c 	bl	800505c <uxListRemove>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d115      	bne.n	8006856 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682e:	491f      	ldr	r1, [pc, #124]	@ (80068ac <xTaskPriorityDisinherit+0x108>)
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <xTaskPriorityDisinherit+0xb2>
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	2201      	movs	r2, #1
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	43da      	mvns	r2, r3
 800684c:	4b18      	ldr	r3, [pc, #96]	@ (80068b0 <xTaskPriorityDisinherit+0x10c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4013      	ands	r3, r2
 8006852:	4a17      	ldr	r2, [pc, #92]	@ (80068b0 <xTaskPriorityDisinherit+0x10c>)
 8006854:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	f1c3 0207 	rsb	r2, r3, #7
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686e:	2201      	movs	r2, #1
 8006870:	409a      	lsls	r2, r3
 8006872:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <xTaskPriorityDisinherit+0x10c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4313      	orrs	r3, r2
 8006878:	4a0d      	ldr	r2, [pc, #52]	@ (80068b0 <xTaskPriorityDisinherit+0x10c>)
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4a08      	ldr	r2, [pc, #32]	@ (80068ac <xTaskPriorityDisinherit+0x108>)
 800688a:	441a      	add	r2, r3
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	3304      	adds	r3, #4
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f7fe fb85 	bl	8004fa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006898:	2301      	movs	r3, #1
 800689a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800689c:	697b      	ldr	r3, [r7, #20]
	}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000ea0 	.word	0x20000ea0
 80068ac:	20000ea4 	.word	0x20000ea4
 80068b0:	20000fa8 	.word	0x20000fa8

080068b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068be:	4b29      	ldr	r3, [pc, #164]	@ (8006964 <prvAddCurrentTaskToDelayedList+0xb0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068c4:	4b28      	ldr	r3, [pc, #160]	@ (8006968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fbc6 	bl	800505c <uxListRemove>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10b      	bne.n	80068ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80068d6:	4b24      	ldr	r3, [pc, #144]	@ (8006968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	2201      	movs	r2, #1
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	43da      	mvns	r2, r3
 80068e4:	4b21      	ldr	r3, [pc, #132]	@ (800696c <prvAddCurrentTaskToDelayedList+0xb8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4013      	ands	r3, r2
 80068ea:	4a20      	ldr	r2, [pc, #128]	@ (800696c <prvAddCurrentTaskToDelayedList+0xb8>)
 80068ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d10a      	bne.n	800690c <prvAddCurrentTaskToDelayedList+0x58>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d007      	beq.n	800690c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3304      	adds	r3, #4
 8006902:	4619      	mov	r1, r3
 8006904:	481a      	ldr	r0, [pc, #104]	@ (8006970 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006906:	f7fe fb4c 	bl	8004fa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800690a:	e026      	b.n	800695a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4413      	add	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006914:	4b14      	ldr	r3, [pc, #80]	@ (8006968 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	429a      	cmp	r2, r3
 8006922:	d209      	bcs.n	8006938 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006924:	4b13      	ldr	r3, [pc, #76]	@ (8006974 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b0f      	ldr	r3, [pc, #60]	@ (8006968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3304      	adds	r3, #4
 800692e:	4619      	mov	r1, r3
 8006930:	4610      	mov	r0, r2
 8006932:	f7fe fb5a 	bl	8004fea <vListInsert>
}
 8006936:	e010      	b.n	800695a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006938:	4b0f      	ldr	r3, [pc, #60]	@ (8006978 <prvAddCurrentTaskToDelayedList+0xc4>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3304      	adds	r3, #4
 8006942:	4619      	mov	r1, r3
 8006944:	4610      	mov	r0, r2
 8006946:	f7fe fb50 	bl	8004fea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800694a:	4b0c      	ldr	r3, [pc, #48]	@ (800697c <prvAddCurrentTaskToDelayedList+0xc8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	429a      	cmp	r2, r3
 8006952:	d202      	bcs.n	800695a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006954:	4a09      	ldr	r2, [pc, #36]	@ (800697c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6013      	str	r3, [r2, #0]
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000fa4 	.word	0x20000fa4
 8006968:	20000ea0 	.word	0x20000ea0
 800696c:	20000fa8 	.word	0x20000fa8
 8006970:	20000f8c 	.word	0x20000f8c
 8006974:	20000f5c 	.word	0x20000f5c
 8006978:	20000f58 	.word	0x20000f58
 800697c:	20000fc0 	.word	0x20000fc0

08006980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3b04      	subs	r3, #4
 8006990:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3b04      	subs	r3, #4
 800699e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f023 0201 	bic.w	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3b04      	subs	r3, #4
 80069ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069b0:	4a0c      	ldr	r2, [pc, #48]	@ (80069e4 <pxPortInitialiseStack+0x64>)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3b14      	subs	r3, #20
 80069ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3b04      	subs	r3, #4
 80069c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f06f 0202 	mvn.w	r2, #2
 80069ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3b20      	subs	r3, #32
 80069d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069d6:	68fb      	ldr	r3, [r7, #12]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	080069e9 	.word	0x080069e9

080069e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069f2:	4b13      	ldr	r3, [pc, #76]	@ (8006a40 <prvTaskExitError+0x58>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d00b      	beq.n	8006a14 <prvTaskExitError+0x2c>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	60fb      	str	r3, [r7, #12]
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <prvTaskExitError+0x28>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60bb      	str	r3, [r7, #8]
}
 8006a26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a28:	bf00      	nop
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0fc      	beq.n	8006a2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000010 	.word	0x20000010
	...

08006a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a50:	4b07      	ldr	r3, [pc, #28]	@ (8006a70 <pxCurrentTCBConst2>)
 8006a52:	6819      	ldr	r1, [r3, #0]
 8006a54:	6808      	ldr	r0, [r1, #0]
 8006a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	f380 8809 	msr	PSP, r0
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f04f 0000 	mov.w	r0, #0
 8006a66:	f380 8811 	msr	BASEPRI, r0
 8006a6a:	4770      	bx	lr
 8006a6c:	f3af 8000 	nop.w

08006a70 <pxCurrentTCBConst2>:
 8006a70:	20000ea0 	.word	0x20000ea0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop

08006a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a78:	4808      	ldr	r0, [pc, #32]	@ (8006a9c <prvPortStartFirstTask+0x24>)
 8006a7a:	6800      	ldr	r0, [r0, #0]
 8006a7c:	6800      	ldr	r0, [r0, #0]
 8006a7e:	f380 8808 	msr	MSP, r0
 8006a82:	f04f 0000 	mov.w	r0, #0
 8006a86:	f380 8814 	msr	CONTROL, r0
 8006a8a:	b662      	cpsie	i
 8006a8c:	b661      	cpsie	f
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	df00      	svc	0
 8006a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a9a:	bf00      	nop
 8006a9c:	e000ed08 	.word	0xe000ed08

08006aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006aa6:	4b47      	ldr	r3, [pc, #284]	@ (8006bc4 <xPortStartScheduler+0x124>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a47      	ldr	r2, [pc, #284]	@ (8006bc8 <xPortStartScheduler+0x128>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10b      	bne.n	8006ac8 <xPortStartScheduler+0x28>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	613b      	str	r3, [r7, #16]
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	e7fd      	b.n	8006ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8006bc4 <xPortStartScheduler+0x124>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a3f      	ldr	r2, [pc, #252]	@ (8006bcc <xPortStartScheduler+0x12c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10b      	bne.n	8006aea <xPortStartScheduler+0x4a>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60fb      	str	r3, [r7, #12]
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	e7fd      	b.n	8006ae6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006aea:	4b39      	ldr	r3, [pc, #228]	@ (8006bd0 <xPortStartScheduler+0x130>)
 8006aec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	22ff      	movs	r2, #255	@ 0xff
 8006afa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	4b31      	ldr	r3, [pc, #196]	@ (8006bd4 <xPortStartScheduler+0x134>)
 8006b10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b12:	4b31      	ldr	r3, [pc, #196]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b14:	2207      	movs	r2, #7
 8006b16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b18:	e009      	b.n	8006b2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	4a2d      	ldr	r2, [pc, #180]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b36:	2b80      	cmp	r3, #128	@ 0x80
 8006b38:	d0ef      	beq.n	8006b1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b3a:	4b27      	ldr	r3, [pc, #156]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f1c3 0307 	rsb	r3, r3, #7
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d00b      	beq.n	8006b5e <xPortStartScheduler+0xbe>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	60bb      	str	r3, [r7, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b68:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b70:	4a19      	ldr	r2, [pc, #100]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b7c:	4b17      	ldr	r3, [pc, #92]	@ (8006bdc <xPortStartScheduler+0x13c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a16      	ldr	r2, [pc, #88]	@ (8006bdc <xPortStartScheduler+0x13c>)
 8006b82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b88:	4b14      	ldr	r3, [pc, #80]	@ (8006bdc <xPortStartScheduler+0x13c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a13      	ldr	r2, [pc, #76]	@ (8006bdc <xPortStartScheduler+0x13c>)
 8006b8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b94:	f000 f8da 	bl	8006d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b98:	4b11      	ldr	r3, [pc, #68]	@ (8006be0 <xPortStartScheduler+0x140>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b9e:	f000 f8f9 	bl	8006d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ba2:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <xPortStartScheduler+0x144>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8006be4 <xPortStartScheduler+0x144>)
 8006ba8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bae:	f7ff ff63 	bl	8006a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bb2:	f7ff fb89 	bl	80062c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006bb6:	f7ff ff17 	bl	80069e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	e000ed00 	.word	0xe000ed00
 8006bc8:	410fc271 	.word	0x410fc271
 8006bcc:	410fc270 	.word	0x410fc270
 8006bd0:	e000e400 	.word	0xe000e400
 8006bd4:	20000fcc 	.word	0x20000fcc
 8006bd8:	20000fd0 	.word	0x20000fd0
 8006bdc:	e000ed20 	.word	0xe000ed20
 8006be0:	20000010 	.word	0x20000010
 8006be4:	e000ef34 	.word	0xe000ef34

08006be8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	607b      	str	r3, [r7, #4]
}
 8006c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c02:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <vPortEnterCritical+0x5c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	4a0e      	ldr	r2, [pc, #56]	@ (8006c44 <vPortEnterCritical+0x5c>)
 8006c0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c44 <vPortEnterCritical+0x5c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d110      	bne.n	8006c36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c14:	4b0c      	ldr	r3, [pc, #48]	@ (8006c48 <vPortEnterCritical+0x60>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <vPortEnterCritical+0x4e>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	603b      	str	r3, [r7, #0]
}
 8006c30:	bf00      	nop
 8006c32:	bf00      	nop
 8006c34:	e7fd      	b.n	8006c32 <vPortEnterCritical+0x4a>
	}
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000010 	.word	0x20000010
 8006c48:	e000ed04 	.word	0xe000ed04

08006c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c52:	4b12      	ldr	r3, [pc, #72]	@ (8006c9c <vPortExitCritical+0x50>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10b      	bne.n	8006c72 <vPortExitCritical+0x26>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	607b      	str	r3, [r7, #4]
}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	e7fd      	b.n	8006c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c72:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <vPortExitCritical+0x50>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	4a08      	ldr	r2, [pc, #32]	@ (8006c9c <vPortExitCritical+0x50>)
 8006c7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c7c:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <vPortExitCritical+0x50>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d105      	bne.n	8006c90 <vPortExitCritical+0x44>
 8006c84:	2300      	movs	r3, #0
 8006c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f383 8811 	msr	BASEPRI, r3
}
 8006c8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	20000010 	.word	0x20000010

08006ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ca0:	f3ef 8009 	mrs	r0, PSP
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4b15      	ldr	r3, [pc, #84]	@ (8006d00 <pxCurrentTCBConst>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	f01e 0f10 	tst.w	lr, #16
 8006cb0:	bf08      	it	eq
 8006cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cba:	6010      	str	r0, [r2, #0]
 8006cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006cc4:	f380 8811 	msr	BASEPRI, r0
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f7ff fafa 	bl	80062c8 <vTaskSwitchContext>
 8006cd4:	f04f 0000 	mov.w	r0, #0
 8006cd8:	f380 8811 	msr	BASEPRI, r0
 8006cdc:	bc09      	pop	{r0, r3}
 8006cde:	6819      	ldr	r1, [r3, #0]
 8006ce0:	6808      	ldr	r0, [r1, #0]
 8006ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce6:	f01e 0f10 	tst.w	lr, #16
 8006cea:	bf08      	it	eq
 8006cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cf0:	f380 8809 	msr	PSP, r0
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst>:
 8006d00:	20000ea0 	.word	0x20000ea0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	607b      	str	r3, [r7, #4]
}
 8006d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d22:	f7ff fa17 	bl	8006154 <xTaskIncrementTick>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d2c:	4b06      	ldr	r3, [pc, #24]	@ (8006d48 <SysTick_Handler+0x40>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	2300      	movs	r3, #0
 8006d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	f383 8811 	msr	BASEPRI, r3
}
 8006d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d50:	4b0b      	ldr	r3, [pc, #44]	@ (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d56:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <vPortSetupTimerInterrupt+0x38>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <vPortSetupTimerInterrupt+0x3c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0a      	ldr	r2, [pc, #40]	@ (8006d8c <vPortSetupTimerInterrupt+0x40>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	4a09      	ldr	r2, [pc, #36]	@ (8006d90 <vPortSetupTimerInterrupt+0x44>)
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d6e:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d70:	2207      	movs	r2, #7
 8006d72:	601a      	str	r2, [r3, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	e000e010 	.word	0xe000e010
 8006d84:	e000e018 	.word	0xe000e018
 8006d88:	20000004 	.word	0x20000004
 8006d8c:	10624dd3 	.word	0x10624dd3
 8006d90:	e000e014 	.word	0xe000e014

08006d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006da4 <vPortEnableVFP+0x10>
 8006d98:	6801      	ldr	r1, [r0, #0]
 8006d9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d9e:	6001      	str	r1, [r0, #0]
 8006da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006da2:	bf00      	nop
 8006da4:	e000ed88 	.word	0xe000ed88

08006da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dae:	f3ef 8305 	mrs	r3, IPSR
 8006db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b0f      	cmp	r3, #15
 8006db8:	d915      	bls.n	8006de6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dba:	4a18      	ldr	r2, [pc, #96]	@ (8006e1c <vPortValidateInterruptPriority+0x74>)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dc4:	4b16      	ldr	r3, [pc, #88]	@ (8006e20 <vPortValidateInterruptPriority+0x78>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	7afa      	ldrb	r2, [r7, #11]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d20b      	bcs.n	8006de6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	607b      	str	r3, [r7, #4]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006de6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e24 <vPortValidateInterruptPriority+0x7c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006dee:	4b0e      	ldr	r3, [pc, #56]	@ (8006e28 <vPortValidateInterruptPriority+0x80>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d90b      	bls.n	8006e0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	603b      	str	r3, [r7, #0]
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <vPortValidateInterruptPriority+0x62>
	}
 8006e0e:	bf00      	nop
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	e000e3f0 	.word	0xe000e3f0
 8006e20:	20000fcc 	.word	0x20000fcc
 8006e24:	e000ed0c 	.word	0xe000ed0c
 8006e28:	20000fd0 	.word	0x20000fd0

08006e2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	@ 0x28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e38:	f7ff f8e0 	bl	8005ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8006fb0 <pvPortMalloc+0x184>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e44:	f000 f924 	bl	8007090 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e48:	4b5a      	ldr	r3, [pc, #360]	@ (8006fb4 <pvPortMalloc+0x188>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f040 8095 	bne.w	8006f80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01e      	beq.n	8006e9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d015      	beq.n	8006e9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f023 0307 	bic.w	r3, r3, #7
 8006e74:	3308      	adds	r3, #8
 8006e76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00b      	beq.n	8006e9a <pvPortMalloc+0x6e>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	617b      	str	r3, [r7, #20]
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d06f      	beq.n	8006f80 <pvPortMalloc+0x154>
 8006ea0:	4b45      	ldr	r3, [pc, #276]	@ (8006fb8 <pvPortMalloc+0x18c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d86a      	bhi.n	8006f80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eaa:	4b44      	ldr	r3, [pc, #272]	@ (8006fbc <pvPortMalloc+0x190>)
 8006eac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006eae:	4b43      	ldr	r3, [pc, #268]	@ (8006fbc <pvPortMalloc+0x190>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eb4:	e004      	b.n	8006ec0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d903      	bls.n	8006ed2 <pvPortMalloc+0xa6>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f1      	bne.n	8006eb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ed2:	4b37      	ldr	r3, [pc, #220]	@ (8006fb0 <pvPortMalloc+0x184>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d051      	beq.n	8006f80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	4413      	add	r3, r2
 8006ee4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	1ad2      	subs	r2, r2, r3
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d920      	bls.n	8006f40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4413      	add	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <pvPortMalloc+0xfc>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	613b      	str	r3, [r7, #16]
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f3a:	69b8      	ldr	r0, [r7, #24]
 8006f3c:	f000 f90a 	bl	8007154 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f40:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb8 <pvPortMalloc+0x18c>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb8 <pvPortMalloc+0x18c>)
 8006f4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <pvPortMalloc+0x18c>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc0 <pvPortMalloc+0x194>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d203      	bcs.n	8006f62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f5a:	4b17      	ldr	r3, [pc, #92]	@ (8006fb8 <pvPortMalloc+0x18c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a18      	ldr	r2, [pc, #96]	@ (8006fc0 <pvPortMalloc+0x194>)
 8006f60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	4b13      	ldr	r3, [pc, #76]	@ (8006fb4 <pvPortMalloc+0x188>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f76:	4b13      	ldr	r3, [pc, #76]	@ (8006fc4 <pvPortMalloc+0x198>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	4a11      	ldr	r2, [pc, #68]	@ (8006fc4 <pvPortMalloc+0x198>)
 8006f7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f80:	f7ff f84a 	bl	8006018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <pvPortMalloc+0x17a>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	60fb      	str	r3, [r7, #12]
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	e7fd      	b.n	8006fa2 <pvPortMalloc+0x176>
	return pvReturn;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3728      	adds	r7, #40	@ 0x28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20004bdc 	.word	0x20004bdc
 8006fb4:	20004bf0 	.word	0x20004bf0
 8006fb8:	20004be0 	.word	0x20004be0
 8006fbc:	20004bd4 	.word	0x20004bd4
 8006fc0:	20004be4 	.word	0x20004be4
 8006fc4:	20004be8 	.word	0x20004be8

08006fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d04f      	beq.n	800707a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fda:	2308      	movs	r3, #8
 8006fdc:	425b      	negs	r3, r3
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	4b25      	ldr	r3, [pc, #148]	@ (8007084 <vPortFree+0xbc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10b      	bne.n	800700e <vPortFree+0x46>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60fb      	str	r3, [r7, #12]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <vPortFree+0x66>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	60bb      	str	r3, [r7, #8]
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	e7fd      	b.n	800702a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	4b14      	ldr	r3, [pc, #80]	@ (8007084 <vPortFree+0xbc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4013      	ands	r3, r2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d01e      	beq.n	800707a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d11a      	bne.n	800707a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	4b0e      	ldr	r3, [pc, #56]	@ (8007084 <vPortFree+0xbc>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	43db      	mvns	r3, r3
 800704e:	401a      	ands	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007054:	f7fe ffd2 	bl	8005ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <vPortFree+0xc0>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4413      	add	r3, r2
 8007062:	4a09      	ldr	r2, [pc, #36]	@ (8007088 <vPortFree+0xc0>)
 8007064:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007066:	6938      	ldr	r0, [r7, #16]
 8007068:	f000 f874 	bl	8007154 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800706c:	4b07      	ldr	r3, [pc, #28]	@ (800708c <vPortFree+0xc4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	4a06      	ldr	r2, [pc, #24]	@ (800708c <vPortFree+0xc4>)
 8007074:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007076:	f7fe ffcf 	bl	8006018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800707a:	bf00      	nop
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20004bf0 	.word	0x20004bf0
 8007088:	20004be0 	.word	0x20004be0
 800708c:	20004bec 	.word	0x20004bec

08007090 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007096:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800709a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800709c:	4b27      	ldr	r3, [pc, #156]	@ (800713c <prvHeapInit+0xac>)
 800709e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00c      	beq.n	80070c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3307      	adds	r3, #7
 80070ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0307 	bic.w	r3, r3, #7
 80070b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	4a1f      	ldr	r2, [pc, #124]	@ (800713c <prvHeapInit+0xac>)
 80070c0:	4413      	add	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007140 <prvHeapInit+0xb0>)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007140 <prvHeapInit+0xb0>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	4413      	add	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070dc:	2208      	movs	r2, #8
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0307 	bic.w	r3, r3, #7
 80070ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a15      	ldr	r2, [pc, #84]	@ (8007144 <prvHeapInit+0xb4>)
 80070f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070f2:	4b14      	ldr	r3, [pc, #80]	@ (8007144 <prvHeapInit+0xb4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2200      	movs	r2, #0
 80070f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070fa:	4b12      	ldr	r3, [pc, #72]	@ (8007144 <prvHeapInit+0xb4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	1ad2      	subs	r2, r2, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007110:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <prvHeapInit+0xb4>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4a0a      	ldr	r2, [pc, #40]	@ (8007148 <prvHeapInit+0xb8>)
 800711e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	4a09      	ldr	r2, [pc, #36]	@ (800714c <prvHeapInit+0xbc>)
 8007126:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007128:	4b09      	ldr	r3, [pc, #36]	@ (8007150 <prvHeapInit+0xc0>)
 800712a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800712e:	601a      	str	r2, [r3, #0]
}
 8007130:	bf00      	nop
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	20000fd4 	.word	0x20000fd4
 8007140:	20004bd4 	.word	0x20004bd4
 8007144:	20004bdc 	.word	0x20004bdc
 8007148:	20004be4 	.word	0x20004be4
 800714c:	20004be0 	.word	0x20004be0
 8007150:	20004bf0 	.word	0x20004bf0

08007154 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800715c:	4b28      	ldr	r3, [pc, #160]	@ (8007200 <prvInsertBlockIntoFreeList+0xac>)
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	e002      	b.n	8007168 <prvInsertBlockIntoFreeList+0x14>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	429a      	cmp	r2, r3
 8007170:	d8f7      	bhi.n	8007162 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	4413      	add	r3, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d108      	bne.n	8007196 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	441a      	add	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	441a      	add	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d118      	bne.n	80071dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b15      	ldr	r3, [pc, #84]	@ (8007204 <prvInsertBlockIntoFreeList+0xb0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d00d      	beq.n	80071d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	441a      	add	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	e008      	b.n	80071e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007204 <prvInsertBlockIntoFreeList+0xb0>)
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	e003      	b.n	80071e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d002      	beq.n	80071f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f2:	bf00      	nop
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20004bd4 	.word	0x20004bd4
 8007204:	20004bdc 	.word	0x20004bdc

08007208 <imu_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool imu_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_imu_model_activations_map, 1, params)) {
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	2101      	movs	r1, #1
 8007216:	4835      	ldr	r0, [pc, #212]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007218:	f000 fb2a 	bl	8007870 <ai_platform_get_activations_map>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d059      	beq.n	80072d6 <imu_model_configure_activations+0xce>
    /* Updating activations (byte) offsets */
    
    serving_default_input0_output_array.data = AI_PTR(g_imu_model_activations_map[0] + 356);
 8007222:	4b32      	ldr	r3, [pc, #200]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800722a:	4a31      	ldr	r2, [pc, #196]	@ (80072f0 <imu_model_configure_activations+0xe8>)
 800722c:	6093      	str	r3, [r2, #8]
    serving_default_input0_output_array.data_start = AI_PTR(g_imu_model_activations_map[0] + 356);
 800722e:	4b2f      	ldr	r3, [pc, #188]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007236:	4a2e      	ldr	r2, [pc, #184]	@ (80072f0 <imu_model_configure_activations+0xe8>)
 8007238:	60d3      	str	r3, [r2, #12]
    gemm_0_scratch0_array.data = AI_PTR(g_imu_model_activations_map[0] + 32);
 800723a:	4b2c      	ldr	r3, [pc, #176]	@ (80072ec <imu_model_configure_activations+0xe4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3320      	adds	r3, #32
 8007240:	4a2c      	ldr	r2, [pc, #176]	@ (80072f4 <imu_model_configure_activations+0xec>)
 8007242:	6093      	str	r3, [r2, #8]
    gemm_0_scratch0_array.data_start = AI_PTR(g_imu_model_activations_map[0] + 32);
 8007244:	4b29      	ldr	r3, [pc, #164]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3320      	adds	r3, #32
 800724a:	4a2a      	ldr	r2, [pc, #168]	@ (80072f4 <imu_model_configure_activations+0xec>)
 800724c:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_imu_model_activations_map[0] + 0);
 800724e:	4b27      	ldr	r3, [pc, #156]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a29      	ldr	r2, [pc, #164]	@ (80072f8 <imu_model_configure_activations+0xf0>)
 8007254:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_imu_model_activations_map[0] + 0);
 8007256:	4b25      	ldr	r3, [pc, #148]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a27      	ldr	r2, [pc, #156]	@ (80072f8 <imu_model_configure_activations+0xf0>)
 800725c:	60d3      	str	r3, [r2, #12]
    gemm_1_scratch0_array.data = AI_PTR(g_imu_model_activations_map[0] + 32);
 800725e:	4b23      	ldr	r3, [pc, #140]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3320      	adds	r3, #32
 8007264:	4a25      	ldr	r2, [pc, #148]	@ (80072fc <imu_model_configure_activations+0xf4>)
 8007266:	6093      	str	r3, [r2, #8]
    gemm_1_scratch0_array.data_start = AI_PTR(g_imu_model_activations_map[0] + 32);
 8007268:	4b20      	ldr	r3, [pc, #128]	@ (80072ec <imu_model_configure_activations+0xe4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3320      	adds	r3, #32
 800726e:	4a23      	ldr	r2, [pc, #140]	@ (80072fc <imu_model_configure_activations+0xf4>)
 8007270:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_imu_model_activations_map[0] + 256);
 8007272:	4b1e      	ldr	r3, [pc, #120]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800727a:	4a21      	ldr	r2, [pc, #132]	@ (8007300 <imu_model_configure_activations+0xf8>)
 800727c:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_imu_model_activations_map[0] + 256);
 800727e:	4b1b      	ldr	r3, [pc, #108]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007286:	4a1e      	ldr	r2, [pc, #120]	@ (8007300 <imu_model_configure_activations+0xf8>)
 8007288:	60d3      	str	r3, [r2, #12]
    gemm_2_scratch0_array.data = AI_PTR(g_imu_model_activations_map[0] + 0);
 800728a:	4b18      	ldr	r3, [pc, #96]	@ (80072ec <imu_model_configure_activations+0xe4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <imu_model_configure_activations+0xfc>)
 8007290:	6093      	str	r3, [r2, #8]
    gemm_2_scratch0_array.data_start = AI_PTR(g_imu_model_activations_map[0] + 0);
 8007292:	4b16      	ldr	r3, [pc, #88]	@ (80072ec <imu_model_configure_activations+0xe4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1b      	ldr	r2, [pc, #108]	@ (8007304 <imu_model_configure_activations+0xfc>)
 8007298:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_imu_model_activations_map[0] + 64);
 800729a:	4b14      	ldr	r3, [pc, #80]	@ (80072ec <imu_model_configure_activations+0xe4>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3340      	adds	r3, #64	@ 0x40
 80072a0:	4a19      	ldr	r2, [pc, #100]	@ (8007308 <imu_model_configure_activations+0x100>)
 80072a2:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_imu_model_activations_map[0] + 64);
 80072a4:	4b11      	ldr	r3, [pc, #68]	@ (80072ec <imu_model_configure_activations+0xe4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3340      	adds	r3, #64	@ 0x40
 80072aa:	4a17      	ldr	r2, [pc, #92]	@ (8007308 <imu_model_configure_activations+0x100>)
 80072ac:	60d3      	str	r3, [r2, #12]
    nl_3_scratch0_array.data = AI_PTR(g_imu_model_activations_map[0] + 0);
 80072ae:	4b0f      	ldr	r3, [pc, #60]	@ (80072ec <imu_model_configure_activations+0xe4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a16      	ldr	r2, [pc, #88]	@ (800730c <imu_model_configure_activations+0x104>)
 80072b4:	6093      	str	r3, [r2, #8]
    nl_3_scratch0_array.data_start = AI_PTR(g_imu_model_activations_map[0] + 0);
 80072b6:	4b0d      	ldr	r3, [pc, #52]	@ (80072ec <imu_model_configure_activations+0xe4>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a14      	ldr	r2, [pc, #80]	@ (800730c <imu_model_configure_activations+0x104>)
 80072bc:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(g_imu_model_activations_map[0] + 12);
 80072be:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <imu_model_configure_activations+0xe4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	4a12      	ldr	r2, [pc, #72]	@ (8007310 <imu_model_configure_activations+0x108>)
 80072c6:	6093      	str	r3, [r2, #8]
    nl_3_output_array.data_start = AI_PTR(g_imu_model_activations_map[0] + 12);
 80072c8:	4b08      	ldr	r3, [pc, #32]	@ (80072ec <imu_model_configure_activations+0xe4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	330c      	adds	r3, #12
 80072ce:	4a10      	ldr	r2, [pc, #64]	@ (8007310 <imu_model_configure_activations+0x108>)
 80072d0:	60d3      	str	r3, [r2, #12]
    return true;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e005      	b.n	80072e2 <imu_model_configure_activations+0xda>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80072d6:	2213      	movs	r2, #19
 80072d8:	2130      	movs	r1, #48	@ 0x30
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fb86 	bl	80079ec <ai_platform_network_set_error>
  return false;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20004bf4 	.word	0x20004bf4
 80072f0:	20000014 	.word	0x20000014
 80072f4:	200000c4 	.word	0x200000c4
 80072f8:	20000024 	.word	0x20000024
 80072fc:	200000d4 	.word	0x200000d4
 8007300:	20000034 	.word	0x20000034
 8007304:	200000e4 	.word	0x200000e4
 8007308:	20000044 	.word	0x20000044
 800730c:	200000f4 	.word	0x200000f4
 8007310:	20000054 	.word	0x20000054

08007314 <imu_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool imu_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_imu_model_weights_map, 1, params)) {
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	2101      	movs	r1, #1
 8007322:	483b      	ldr	r0, [pc, #236]	@ (8007410 <imu_model_configure_weights+0xfc>)
 8007324:	f000 fa50 	bl	80077c8 <ai_platform_get_weights_map>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d065      	beq.n	80073fa <imu_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800732e:	4b39      	ldr	r3, [pc, #228]	@ (8007414 <imu_model_configure_weights+0x100>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007336:	4a37      	ldr	r2, [pc, #220]	@ (8007414 <imu_model_configure_weights+0x100>)
 8007338:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_imu_model_weights_map[0] + 0);
 800733a:	4b35      	ldr	r3, [pc, #212]	@ (8007410 <imu_model_configure_weights+0xfc>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a35      	ldr	r2, [pc, #212]	@ (8007414 <imu_model_configure_weights+0x100>)
 8007340:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_imu_model_weights_map[0] + 0);
 8007342:	4b33      	ldr	r3, [pc, #204]	@ (8007410 <imu_model_configure_weights+0xfc>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a33      	ldr	r2, [pc, #204]	@ (8007414 <imu_model_configure_weights+0x100>)
 8007348:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800734a:	4b33      	ldr	r3, [pc, #204]	@ (8007418 <imu_model_configure_weights+0x104>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007352:	4a31      	ldr	r2, [pc, #196]	@ (8007418 <imu_model_configure_weights+0x104>)
 8007354:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_imu_model_weights_map[0] + 64);
 8007356:	4b2e      	ldr	r3, [pc, #184]	@ (8007410 <imu_model_configure_weights+0xfc>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3340      	adds	r3, #64	@ 0x40
 800735c:	4a2e      	ldr	r2, [pc, #184]	@ (8007418 <imu_model_configure_weights+0x104>)
 800735e:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_imu_model_weights_map[0] + 64);
 8007360:	4b2b      	ldr	r3, [pc, #172]	@ (8007410 <imu_model_configure_weights+0xfc>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3340      	adds	r3, #64	@ 0x40
 8007366:	4a2c      	ldr	r2, [pc, #176]	@ (8007418 <imu_model_configure_weights+0x104>)
 8007368:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800736a:	4b2c      	ldr	r3, [pc, #176]	@ (800741c <imu_model_configure_weights+0x108>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007372:	4a2a      	ldr	r2, [pc, #168]	@ (800741c <imu_model_configure_weights+0x108>)
 8007374:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_imu_model_weights_map[0] + 192);
 8007376:	4b26      	ldr	r3, [pc, #152]	@ (8007410 <imu_model_configure_weights+0xfc>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	33c0      	adds	r3, #192	@ 0xc0
 800737c:	4a27      	ldr	r2, [pc, #156]	@ (800741c <imu_model_configure_weights+0x108>)
 800737e:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_imu_model_weights_map[0] + 192);
 8007380:	4b23      	ldr	r3, [pc, #140]	@ (8007410 <imu_model_configure_weights+0xfc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	33c0      	adds	r3, #192	@ 0xc0
 8007386:	4a25      	ldr	r2, [pc, #148]	@ (800741c <imu_model_configure_weights+0x108>)
 8007388:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800738a:	4b25      	ldr	r3, [pc, #148]	@ (8007420 <imu_model_configure_weights+0x10c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007392:	4a23      	ldr	r2, [pc, #140]	@ (8007420 <imu_model_configure_weights+0x10c>)
 8007394:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_imu_model_weights_map[0] + 704);
 8007396:	4b1e      	ldr	r3, [pc, #120]	@ (8007410 <imu_model_configure_weights+0xfc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 800739e:	4a20      	ldr	r2, [pc, #128]	@ (8007420 <imu_model_configure_weights+0x10c>)
 80073a0:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_imu_model_weights_map[0] + 704);
 80073a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007410 <imu_model_configure_weights+0xfc>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 80073aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <imu_model_configure_weights+0x10c>)
 80073ac:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80073ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007424 <imu_model_configure_weights+0x110>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007424 <imu_model_configure_weights+0x110>)
 80073b8:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_imu_model_weights_map[0] + 768);
 80073ba:	4b15      	ldr	r3, [pc, #84]	@ (8007410 <imu_model_configure_weights+0xfc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80073c2:	4a18      	ldr	r2, [pc, #96]	@ (8007424 <imu_model_configure_weights+0x110>)
 80073c4:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_imu_model_weights_map[0] + 768);
 80073c6:	4b12      	ldr	r3, [pc, #72]	@ (8007410 <imu_model_configure_weights+0xfc>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80073ce:	4a15      	ldr	r2, [pc, #84]	@ (8007424 <imu_model_configure_weights+0x110>)
 80073d0:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80073d2:	4b15      	ldr	r3, [pc, #84]	@ (8007428 <imu_model_configure_weights+0x114>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073da:	4a13      	ldr	r2, [pc, #76]	@ (8007428 <imu_model_configure_weights+0x114>)
 80073dc:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_imu_model_weights_map[0] + 816);
 80073de:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <imu_model_configure_weights+0xfc>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 80073e6:	4a10      	ldr	r2, [pc, #64]	@ (8007428 <imu_model_configure_weights+0x114>)
 80073e8:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_imu_model_weights_map[0] + 816);
 80073ea:	4b09      	ldr	r3, [pc, #36]	@ (8007410 <imu_model_configure_weights+0xfc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 80073f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007428 <imu_model_configure_weights+0x114>)
 80073f4:	60d3      	str	r3, [r2, #12]
    return true;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e005      	b.n	8007406 <imu_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80073fa:	2212      	movs	r2, #18
 80073fc:	2130      	movs	r1, #48	@ 0x30
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 faf4 	bl	80079ec <ai_platform_network_set_error>
  return false;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20004bf8 	.word	0x20004bf8
 8007414:	20000064 	.word	0x20000064
 8007418:	20000074 	.word	0x20000074
 800741c:	20000084 	.word	0x20000084
 8007420:	20000094 	.word	0x20000094
 8007424:	200000a4 	.word	0x200000a4
 8007428:	200000b4 	.word	0x200000b4

0800742c <ai_imu_model_get_report>:


AI_API_ENTRY
ai_bool ai_imu_model_get_report(
  ai_handle network, ai_network_report* report)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b0a6      	sub	sp, #152	@ 0x98
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fac4 	bl	80079c4 <ai_platform_context_acquire>
 800743c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

  if (report && net_ctx)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d04a      	beq.n	80074dc <ai_imu_model_get_report+0xb0>
 8007446:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800744a:	2b00      	cmp	r3, #0
 800744c:	d046      	beq.n	80074dc <ai_imu_model_get_report+0xb0>
  {
    ai_network_report r = {
 800744e:	f107 0308 	add.w	r3, r7, #8
 8007452:	2288      	movs	r2, #136	@ 0x88
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f003 fe46 	bl	800b0e8 <memset>
 800745c:	4b22      	ldr	r3, [pc, #136]	@ (80074e8 <ai_imu_model_get_report+0xbc>)
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	4b22      	ldr	r3, [pc, #136]	@ (80074ec <ai_imu_model_get_report+0xc0>)
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	4b22      	ldr	r3, [pc, #136]	@ (80074f0 <ai_imu_model_get_report+0xc4>)
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	4b22      	ldr	r3, [pc, #136]	@ (80074f4 <ai_imu_model_get_report+0xc8>)
 800746a:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_IMU_MODEL_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800746c:	f000 fa76 	bl	800795c <ai_platform_runtime_get_revision>
 8007470:	4603      	mov	r3, r0
    ai_network_report r = {
 8007472:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8007474:	f000 fa76 	bl	8007964 <ai_platform_runtime_get_version>
 8007478:	4603      	mov	r3, r0
 800747a:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 800747c:	4b1e      	ldr	r3, [pc, #120]	@ (80074f8 <ai_imu_model_get_report+0xcc>)
 800747e:	623b      	str	r3, [r7, #32]
 8007480:	2309      	movs	r3, #9
 8007482:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8007486:	f000 fa71 	bl	800796c <ai_platform_api_get_version>
 800748a:	4603      	mov	r3, r0
 800748c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800748e:	f000 fa83 	bl	8007998 <ai_platform_interface_api_get_version>
 8007492:	4603      	mov	r3, r0
 8007494:	633b      	str	r3, [r7, #48]	@ 0x30
    ai_network_report r = {
 8007496:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 800749a:	f04f 0300 	mov.w	r3, #0
 800749e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80074a2:	4b16      	ldr	r3, [pc, #88]	@ (80074fc <ai_imu_model_get_report+0xd0>)
 80074a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a6:	4b16      	ldr	r3, [pc, #88]	@ (8007500 <ai_imu_model_get_report+0xd4>)
 80074a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x9e64fc93,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80074ac:	f107 0308 	add.w	r3, r7, #8
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 faa0 	bl	80079f8 <ai_platform_api_get_network_report>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f083 0301 	eor.w	r3, r3, #1
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <ai_imu_model_get_report+0x9c>
 80074c4:	2300      	movs	r3, #0
 80074c6:	e00a      	b.n	80074de <ai_imu_model_get_report+0xb2>

    *report = r;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f107 0308 	add.w	r3, r7, #8
 80074d0:	2288      	movs	r2, #136	@ 0x88
 80074d2:	4619      	mov	r1, r3
 80074d4:	f003 feed 	bl	800b2b2 <memcpy>
    return true;
 80074d8:	2301      	movs	r3, #1
 80074da:	e000      	b.n	80074de <ai_imu_model_get_report+0xb2>
  }
  return false;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3798      	adds	r7, #152	@ 0x98
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	0800d618 	.word	0x0800d618
 80074ec:	0800d624 	.word	0x0800d624
 80074f0:	0800d648 	.word	0x0800d648
 80074f4:	0800d664 	.word	0x0800d664
 80074f8:	0800d67c 	.word	0x0800d67c
 80074fc:	a1facade 	.word	0xa1facade
 8007500:	9e64fc93 	.word	0x9e64fc93

08007504 <ai_imu_model_get_error>:


AI_API_ENTRY
ai_error ai_imu_model_get_error(ai_handle network)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fa61 	bl	80079d4 <ai_platform_network_get_error>
 8007512:	4603      	mov	r3, r0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <ai_imu_model_create>:


AI_API_ENTRY
ai_error ai_imu_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af02      	add	r7, sp, #8
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8007526:	2300      	movs	r3, #0
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	2305      	movs	r3, #5
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	2301      	movs	r3, #1
 8007530:	4a04      	ldr	r2, [pc, #16]	@ (8007544 <ai_imu_model_create+0x28>)
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc0d 	bl	8007d54 <ai_platform_network_create>
 800753a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000694 	.word	0x20000694

08007548 <ai_imu_model_create_and_init>:


AI_API_ENTRY
ai_error ai_imu_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b094      	sub	sp, #80	@ 0x50
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_imu_model_create(network, AI_IMU_MODEL_DATA_CONFIG);
 8007554:	2100      	movs	r1, #0
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff ffe0 	bl	800751c <ai_imu_model_create>
 800755c:	4603      	mov	r3, r0
 800755e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8007560:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <ai_imu_model_create_and_init+0x24>
    return err;
 8007568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800756a:	e067      	b.n	800763c <ai_imu_model_create_and_init+0xf4>
  }
  
  if (ai_imu_model_data_params_get(&params) != true) {
 800756c:	f107 0310 	add.w	r3, r7, #16
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f8b3 	bl	80076dc <ai_imu_model_data_params_get>
 8007576:	4603      	mov	r3, r0
 8007578:	f083 0301 	eor.w	r3, r3, #1
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <ai_imu_model_create_and_init+0x4c>
    err = ai_imu_model_get_error(*network);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff ffbc 	bl	8007504 <ai_imu_model_get_error>
 800758c:	4603      	mov	r3, r0
 800758e:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8007590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007592:	e053      	b.n	800763c <ai_imu_model_create_and_init+0xf4>
  }
#if defined(AI_IMU_MODEL_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8007594:	2300      	movs	r3, #0
 8007596:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800759a:	e012      	b.n	80075c2 <ai_imu_model_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800759c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 80075a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	4413      	add	r3, r2
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	f107 0310 	add.w	r3, r7, #16
 80075b0:	330c      	adds	r3, #12
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 f8f8 	bl	80077a8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80075b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80075bc:	3301      	adds	r3, #1
 80075be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <ai_imu_model_create_and_init+0x8a>
 80075c8:	8bfb      	ldrh	r3, [r7, #30]
 80075ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d3e4      	bcc.n	800759c <ai_imu_model_create_and_init+0x54>
  }
#endif
#if defined(AI_IMU_MODEL_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80075d2:	2300      	movs	r3, #0
 80075d4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80075d8:	e012      	b.n	8007600 <ai_imu_model_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80075da:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 80075de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	4413      	add	r3, r2
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	f107 0310 	add.w	r3, r7, #16
 80075ee:	3304      	adds	r3, #4
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 f8d9 	bl	80077a8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80075f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80075fa:	3301      	adds	r3, #1
 80075fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d004      	beq.n	8007610 <ai_imu_model_create_and_init+0xc8>
 8007606:	8afb      	ldrh	r3, [r7, #22]
 8007608:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800760c:	429a      	cmp	r2, r3
 800760e:	d3e4      	bcc.n	80075da <ai_imu_model_create_and_init+0x92>
  }
#endif
  if (ai_imu_model_init(*network, &params) != true) {
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f107 0210 	add.w	r2, r7, #16
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f000 f812 	bl	8007644 <ai_imu_model_init>
 8007620:	4603      	mov	r3, r0
 8007622:	f083 0301 	eor.w	r3, r3, #1
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d006      	beq.n	800763a <ai_imu_model_create_and_init+0xf2>
    err = ai_imu_model_get_error(*network);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff ff67 	bl	8007504 <ai_imu_model_get_error>
 8007636:	4603      	mov	r3, r0
 8007638:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800763a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800763c:	4618      	mov	r0, r3
 800763e:	3750      	adds	r7, #80	@ 0x50
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <ai_imu_model_init>:


AI_API_ENTRY
ai_bool ai_imu_model_init(
  ai_handle network, const ai_network_params* params)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fbc1 	bl	8007dd8 <ai_platform_network_init>
 8007656:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8007658:	2301      	movs	r3, #1
 800765a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <ai_imu_model_init+0x22>
 8007662:	2300      	movs	r3, #0
 8007664:	e026      	b.n	80076b4 <ai_imu_model_init+0x70>
  ok &= imu_model_configure_weights(net_ctx, params);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7ff fe53 	bl	8007314 <imu_model_configure_weights>
 800766e:	4603      	mov	r3, r0
 8007670:	461a      	mov	r2, r3
 8007672:	7afb      	ldrb	r3, [r7, #11]
 8007674:	4013      	ands	r3, r2
 8007676:	2b00      	cmp	r3, #0
 8007678:	bf14      	ite	ne
 800767a:	2301      	movne	r3, #1
 800767c:	2300      	moveq	r3, #0
 800767e:	72fb      	strb	r3, [r7, #11]
  ok &= imu_model_configure_activations(net_ctx, params);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff fdc0 	bl	8007208 <imu_model_configure_activations>
 8007688:	4603      	mov	r3, r0
 800768a:	461a      	mov	r2, r3
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	4013      	ands	r3, r2
 8007690:	2b00      	cmp	r3, #0
 8007692:	bf14      	ite	ne
 8007694:	2301      	movne	r3, #1
 8007696:	2300      	moveq	r3, #0
 8007698:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fc6a 	bl	8007f74 <ai_platform_network_post_init>
 80076a0:	4603      	mov	r3, r0
 80076a2:	461a      	mov	r2, r3
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	4013      	ands	r3, r2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bf14      	ite	ne
 80076ac:	2301      	movne	r3, #1
 80076ae:	2300      	moveq	r3, #0
 80076b0:	72fb      	strb	r3, [r7, #11]

  return ok;
 80076b2:	7afb      	ldrb	r3, [r7, #11]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <ai_imu_model_run>:


AI_API_ENTRY
ai_i32 ai_imu_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fc81 	bl	8007fd4 <ai_platform_network_process>
 80076d2:	4603      	mov	r3, r0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <ai_imu_model_data_params_get>:
 * @ingroup imu_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_imu_model_data_params_get(ai_network_params* params)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <ai_imu_model_data_params_get+0x12>
 80076ea:	2300      	movs	r3, #0
 80076ec:	e016      	b.n	800771c <ai_imu_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80076ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007724 <ai_imu_model_data_params_get+0x48>)
 80076f0:	f107 0310 	add.w	r3, r7, #16
 80076f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80076f8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_IMU_MODEL_DATA_ACTIVATIONS_COUNT, g_imu_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80076fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007728 <ai_imu_model_data_params_get+0x4c>)
 80076fe:	f107 0308 	add.w	r3, r7, #8
 8007702:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007706:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_IMU_MODEL_DATA_WEIGHTS_COUNT, g_imu_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800770a:	f107 0210 	add.w	r2, r7, #16
 800770e:	f107 0308 	add.w	r3, r7, #8
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f8ff 	bl	8007918 <ai_platform_bind_network_params>
 800771a:	4603      	mov	r3, r0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	0800d6a0 	.word	0x0800d6a0
 8007728:	0800d6a8 	.word	0x0800d6a8

0800772c <ai_buffer_get_size>:
 800772c:	b378      	cbz	r0, 800778e <ai_buffer_get_size+0x62>
 800772e:	b410      	push	{r4}
 8007730:	6803      	ldr	r3, [r0, #0]
 8007732:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <ai_buffer_get_size+0x64>)
 8007734:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8007738:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800773c:	4293      	cmp	r3, r2
 800773e:	d01e      	beq.n	800777e <ai_buffer_get_size+0x52>
 8007740:	6984      	ldr	r4, [r0, #24]
 8007742:	6862      	ldr	r2, [r4, #4]
 8007744:	7d03      	ldrb	r3, [r0, #20]
 8007746:	6941      	ldr	r1, [r0, #20]
 8007748:	f1a3 0301 	sub.w	r3, r3, #1
 800774c:	fab3 f383 	clz	r3, r3
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8007756:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800775a:	da0b      	bge.n	8007774 <ai_buffer_get_size+0x48>
 800775c:	2b01      	cmp	r3, #1
 800775e:	d102      	bne.n	8007766 <ai_buffer_get_size+0x3a>
 8007760:	2802      	cmp	r0, #2
 8007762:	d007      	beq.n	8007774 <ai_buffer_get_size+0x48>
 8007764:	2302      	movs	r3, #2
 8007766:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800776a:	3301      	adds	r3, #1
 800776c:	4298      	cmp	r0, r3
 800776e:	fb01 f202 	mul.w	r2, r1, r2
 8007772:	d1f3      	bne.n	800775c <ai_buffer_get_size+0x30>
 8007774:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8007778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	2900      	cmp	r1, #0
 8007780:	d0de      	beq.n	8007740 <ai_buffer_get_size+0x14>
 8007782:	6984      	ldr	r4, [r0, #24]
 8007784:	6862      	ldr	r2, [r4, #4]
 8007786:	321f      	adds	r2, #31
 8007788:	f022 021f 	bic.w	r2, r2, #31
 800778c:	e7da      	b.n	8007744 <ai_buffer_get_size+0x18>
 800778e:	4770      	bx	lr
 8007790:	000400c0 	.word	0x000400c0

08007794 <ai_buffer_array_sane>:
 8007794:	b138      	cbz	r0, 80077a6 <ai_buffer_array_sane+0x12>
 8007796:	6843      	ldr	r3, [r0, #4]
 8007798:	b123      	cbz	r3, 80077a4 <ai_buffer_array_sane+0x10>
 800779a:	8840      	ldrh	r0, [r0, #2]
 800779c:	3800      	subs	r0, #0
 800779e:	bf18      	it	ne
 80077a0:	2001      	movne	r0, #1
 80077a2:	4770      	bx	lr
 80077a4:	4618      	mov	r0, r3
 80077a6:	4770      	bx	lr

080077a8 <ai_buffer_array_item_set_address>:
 80077a8:	b150      	cbz	r0, 80077c0 <ai_buffer_array_item_set_address+0x18>
 80077aa:	6843      	ldr	r3, [r0, #4]
 80077ac:	b14b      	cbz	r3, 80077c2 <ai_buffer_array_item_set_address+0x1a>
 80077ae:	8840      	ldrh	r0, [r0, #2]
 80077b0:	b900      	cbnz	r0, 80077b4 <ai_buffer_array_item_set_address+0xc>
 80077b2:	4770      	bx	lr
 80077b4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80077b8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80077bc:	2001      	movs	r0, #1
 80077be:	605a      	str	r2, [r3, #4]
 80077c0:	4770      	bx	lr
 80077c2:	4618      	mov	r0, r3
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop

080077c8 <ai_platform_get_weights_map>:
 80077c8:	2a00      	cmp	r2, #0
 80077ca:	d037      	beq.n	800783c <ai_platform_get_weights_map+0x74>
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	4604      	mov	r4, r0
 80077d0:	b1a0      	cbz	r0, 80077fc <ai_platform_get_weights_map+0x34>
 80077d2:	460f      	mov	r7, r1
 80077d4:	b191      	cbz	r1, 80077fc <ai_platform_get_weights_map+0x34>
 80077d6:	4b25      	ldr	r3, [pc, #148]	@ (800786c <ai_platform_get_weights_map+0xa4>)
 80077d8:	6810      	ldr	r0, [r2, #0]
 80077da:	4298      	cmp	r0, r3
 80077dc:	4615      	mov	r5, r2
 80077de:	d00f      	beq.n	8007800 <ai_platform_get_weights_map+0x38>
 80077e0:	6855      	ldr	r5, [r2, #4]
 80077e2:	b15d      	cbz	r5, 80077fc <ai_platform_get_weights_map+0x34>
 80077e4:	682e      	ldr	r6, [r5, #0]
 80077e6:	429e      	cmp	r6, r3
 80077e8:	d02a      	beq.n	8007840 <ai_platform_get_weights_map+0x78>
 80077ea:	f1a1 0001 	sub.w	r0, r1, #1
 80077ee:	6025      	str	r5, [r4, #0]
 80077f0:	fab0 f080 	clz	r0, r0
 80077f4:	0940      	lsrs	r0, r0, #5
 80077f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f8:	42a7      	cmp	r7, r4
 80077fa:	d034      	beq.n	8007866 <ai_platform_get_weights_map+0x9e>
 80077fc:	2000      	movs	r0, #0
 80077fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007800:	1d10      	adds	r0, r2, #4
 8007802:	f7ff ffc7 	bl	8007794 <ai_buffer_array_sane>
 8007806:	2800      	cmp	r0, #0
 8007808:	d0f8      	beq.n	80077fc <ai_platform_get_weights_map+0x34>
 800780a:	88eb      	ldrh	r3, [r5, #6]
 800780c:	429f      	cmp	r7, r3
 800780e:	d1f5      	bne.n	80077fc <ai_platform_get_weights_map+0x34>
 8007810:	f04f 0c00 	mov.w	ip, #0
 8007814:	1f20      	subs	r0, r4, #4
 8007816:	46e6      	mov	lr, ip
 8007818:	68ab      	ldr	r3, [r5, #8]
 800781a:	4463      	add	r3, ip
 800781c:	f10c 0c1c 	add.w	ip, ip, #28
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	b12b      	cbz	r3, 8007830 <ai_platform_get_weights_map+0x68>
 8007824:	f10e 0e01 	add.w	lr, lr, #1
 8007828:	4577      	cmp	r7, lr
 800782a:	f840 3f04 	str.w	r3, [r0, #4]!
 800782e:	d1f3      	bne.n	8007818 <ai_platform_get_weights_map+0x50>
 8007830:	eba7 000e 	sub.w	r0, r7, lr
 8007834:	fab0 f080 	clz	r0, r0
 8007838:	0940      	lsrs	r0, r0, #5
 800783a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800783c:	2000      	movs	r0, #0
 800783e:	4770      	bx	lr
 8007840:	1f20      	subs	r0, r4, #4
 8007842:	462a      	mov	r2, r5
 8007844:	2400      	movs	r4, #0
 8007846:	e000      	b.n	800784a <ai_platform_get_weights_map+0x82>
 8007848:	461c      	mov	r4, r3
 800784a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800784e:	42b3      	cmp	r3, r6
 8007850:	d0d2      	beq.n	80077f8 <ai_platform_get_weights_map+0x30>
 8007852:	f840 3f04 	str.w	r3, [r0, #4]!
 8007856:	1c63      	adds	r3, r4, #1
 8007858:	429f      	cmp	r7, r3
 800785a:	d1f5      	bne.n	8007848 <ai_platform_get_weights_map+0x80>
 800785c:	3402      	adds	r4, #2
 800785e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007862:	42b3      	cmp	r3, r6
 8007864:	d1ca      	bne.n	80077fc <ai_platform_get_weights_map+0x34>
 8007866:	2001      	movs	r0, #1
 8007868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800786a:	bf00      	nop
 800786c:	a1facade 	.word	0xa1facade

08007870 <ai_platform_get_activations_map>:
 8007870:	2a00      	cmp	r2, #0
 8007872:	d038      	beq.n	80078e6 <ai_platform_get_activations_map+0x76>
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	4604      	mov	r4, r0
 8007878:	b1a0      	cbz	r0, 80078a4 <ai_platform_get_activations_map+0x34>
 800787a:	460f      	mov	r7, r1
 800787c:	b191      	cbz	r1, 80078a4 <ai_platform_get_activations_map+0x34>
 800787e:	4b25      	ldr	r3, [pc, #148]	@ (8007914 <ai_platform_get_activations_map+0xa4>)
 8007880:	6810      	ldr	r0, [r2, #0]
 8007882:	4298      	cmp	r0, r3
 8007884:	4615      	mov	r5, r2
 8007886:	d00f      	beq.n	80078a8 <ai_platform_get_activations_map+0x38>
 8007888:	6a15      	ldr	r5, [r2, #32]
 800788a:	b15d      	cbz	r5, 80078a4 <ai_platform_get_activations_map+0x34>
 800788c:	682e      	ldr	r6, [r5, #0]
 800788e:	429e      	cmp	r6, r3
 8007890:	d02b      	beq.n	80078ea <ai_platform_get_activations_map+0x7a>
 8007892:	f1a1 0001 	sub.w	r0, r1, #1
 8007896:	6025      	str	r5, [r4, #0]
 8007898:	fab0 f080 	clz	r0, r0
 800789c:	0940      	lsrs	r0, r0, #5
 800789e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a0:	42a7      	cmp	r7, r4
 80078a2:	d035      	beq.n	8007910 <ai_platform_get_activations_map+0xa0>
 80078a4:	2000      	movs	r0, #0
 80078a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a8:	f102 000c 	add.w	r0, r2, #12
 80078ac:	f7ff ff72 	bl	8007794 <ai_buffer_array_sane>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d0f7      	beq.n	80078a4 <ai_platform_get_activations_map+0x34>
 80078b4:	89eb      	ldrh	r3, [r5, #14]
 80078b6:	429f      	cmp	r7, r3
 80078b8:	d1f4      	bne.n	80078a4 <ai_platform_get_activations_map+0x34>
 80078ba:	f04f 0c00 	mov.w	ip, #0
 80078be:	1f20      	subs	r0, r4, #4
 80078c0:	46e6      	mov	lr, ip
 80078c2:	692b      	ldr	r3, [r5, #16]
 80078c4:	4463      	add	r3, ip
 80078c6:	f10c 0c1c 	add.w	ip, ip, #28
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	b12b      	cbz	r3, 80078da <ai_platform_get_activations_map+0x6a>
 80078ce:	f10e 0e01 	add.w	lr, lr, #1
 80078d2:	4577      	cmp	r7, lr
 80078d4:	f840 3f04 	str.w	r3, [r0, #4]!
 80078d8:	d1f3      	bne.n	80078c2 <ai_platform_get_activations_map+0x52>
 80078da:	eba7 000e 	sub.w	r0, r7, lr
 80078de:	fab0 f080 	clz	r0, r0
 80078e2:	0940      	lsrs	r0, r0, #5
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e6:	2000      	movs	r0, #0
 80078e8:	4770      	bx	lr
 80078ea:	1f20      	subs	r0, r4, #4
 80078ec:	462a      	mov	r2, r5
 80078ee:	2400      	movs	r4, #0
 80078f0:	e000      	b.n	80078f4 <ai_platform_get_activations_map+0x84>
 80078f2:	461c      	mov	r4, r3
 80078f4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80078f8:	42b3      	cmp	r3, r6
 80078fa:	d0d1      	beq.n	80078a0 <ai_platform_get_activations_map+0x30>
 80078fc:	f840 3f04 	str.w	r3, [r0, #4]!
 8007900:	1c63      	adds	r3, r4, #1
 8007902:	429f      	cmp	r7, r3
 8007904:	d1f5      	bne.n	80078f2 <ai_platform_get_activations_map+0x82>
 8007906:	3402      	adds	r4, #2
 8007908:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800790c:	42b3      	cmp	r3, r6
 800790e:	d1c9      	bne.n	80078a4 <ai_platform_get_activations_map+0x34>
 8007910:	2001      	movs	r0, #1
 8007912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007914:	a1facade 	.word	0xa1facade

08007918 <ai_platform_bind_network_params>:
 8007918:	b1a0      	cbz	r0, 8007944 <ai_platform_bind_network_params+0x2c>
 800791a:	b1b1      	cbz	r1, 800794a <ai_platform_bind_network_params+0x32>
 800791c:	b1c2      	cbz	r2, 8007950 <ai_platform_bind_network_params+0x38>
 800791e:	b410      	push	{r4}
 8007920:	4603      	mov	r3, r0
 8007922:	4c0d      	ldr	r4, [pc, #52]	@ (8007958 <ai_platform_bind_network_params+0x40>)
 8007924:	f843 4b04 	str.w	r4, [r3], #4
 8007928:	f100 0c0c 	add.w	ip, r0, #12
 800792c:	c903      	ldmia	r1, {r0, r1}
 800792e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007932:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007936:	e88c 0003 	stmia.w	ip, {r0, r1}
 800793a:	2301      	movs	r3, #1
 800793c:	4618      	mov	r0, r3
 800793e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	4603      	mov	r3, r0
 8007946:	4618      	mov	r0, r3
 8007948:	4770      	bx	lr
 800794a:	460b      	mov	r3, r1
 800794c:	4618      	mov	r0, r3
 800794e:	4770      	bx	lr
 8007950:	4613      	mov	r3, r2
 8007952:	4618      	mov	r0, r3
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	a1facade 	.word	0xa1facade

0800795c <ai_platform_runtime_get_revision>:
 800795c:	4800      	ldr	r0, [pc, #0]	@ (8007960 <ai_platform_runtime_get_revision+0x4>)
 800795e:	4770      	bx	lr
 8007960:	0800dc00 	.word	0x0800dc00

08007964 <ai_platform_runtime_get_version>:
 8007964:	b082      	sub	sp, #8
 8007966:	2009      	movs	r0, #9
 8007968:	b002      	add	sp, #8
 800796a:	4770      	bx	lr

0800796c <ai_platform_api_get_version>:
 800796c:	4b09      	ldr	r3, [pc, #36]	@ (8007994 <ai_platform_api_get_version+0x28>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2000      	movs	r0, #0
 8007972:	b2da      	uxtb	r2, r3
 8007974:	f362 0007 	bfi	r0, r2, #0, #8
 8007978:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800797c:	f362 200f 	bfi	r0, r2, #8, #8
 8007980:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007984:	f362 4017 	bfi	r0, r2, #16, #8
 8007988:	0e1b      	lsrs	r3, r3, #24
 800798a:	b082      	sub	sp, #8
 800798c:	f363 601f 	bfi	r0, r3, #24, #8
 8007990:	b002      	add	sp, #8
 8007992:	4770      	bx	lr
 8007994:	0800dc04 	.word	0x0800dc04

08007998 <ai_platform_interface_api_get_version>:
 8007998:	4b09      	ldr	r3, [pc, #36]	@ (80079c0 <ai_platform_interface_api_get_version+0x28>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2000      	movs	r0, #0
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	f362 0007 	bfi	r0, r2, #0, #8
 80079a4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80079a8:	f362 200f 	bfi	r0, r2, #8, #8
 80079ac:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80079b0:	f362 4017 	bfi	r0, r2, #16, #8
 80079b4:	0e1b      	lsrs	r3, r3, #24
 80079b6:	b082      	sub	sp, #8
 80079b8:	f363 601f 	bfi	r0, r3, #24, #8
 80079bc:	b002      	add	sp, #8
 80079be:	4770      	bx	lr
 80079c0:	0800dc08 	.word	0x0800dc08

080079c4 <ai_platform_context_acquire>:
 80079c4:	6802      	ldr	r2, [r0, #0]
 80079c6:	4b02      	ldr	r3, [pc, #8]	@ (80079d0 <ai_platform_context_acquire+0xc>)
 80079c8:	4393      	bics	r3, r2
 80079ca:	bf18      	it	ne
 80079cc:	2000      	movne	r0, #0
 80079ce:	4770      	bx	lr
 80079d0:	a1c00100 	.word	0xa1c00100

080079d4 <ai_platform_network_get_error>:
 80079d4:	4b04      	ldr	r3, [pc, #16]	@ (80079e8 <ai_platform_network_get_error+0x14>)
 80079d6:	6802      	ldr	r2, [r0, #0]
 80079d8:	4393      	bics	r3, r2
 80079da:	d102      	bne.n	80079e2 <ai_platform_network_get_error+0xe>
 80079dc:	300c      	adds	r0, #12
 80079de:	f000 bd3b 	b.w	8008458 <core_get_error>
 80079e2:	f241 0010 	movw	r0, #4112	@ 0x1010
 80079e6:	4770      	bx	lr
 80079e8:	a1c00100 	.word	0xa1c00100

080079ec <ai_platform_network_set_error>:
 80079ec:	b110      	cbz	r0, 80079f4 <ai_platform_network_set_error+0x8>
 80079ee:	300c      	adds	r0, #12
 80079f0:	f000 bd38 	b.w	8008464 <core_set_error>
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop

080079f8 <ai_platform_api_get_network_report>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	4ba4      	ldr	r3, [pc, #656]	@ (8007c90 <ai_platform_api_get_network_report+0x298>)
 80079fe:	6802      	ldr	r2, [r0, #0]
 8007a00:	b089      	sub	sp, #36	@ 0x24
 8007a02:	4393      	bics	r3, r2
 8007a04:	9002      	str	r0, [sp, #8]
 8007a06:	9103      	str	r1, [sp, #12]
 8007a08:	d164      	bne.n	8007ad4 <ai_platform_api_get_network_report+0xdc>
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	d075      	beq.n	8007afa <ai_platform_api_get_network_report+0x102>
 8007a0e:	2400      	movs	r4, #0
 8007a10:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8007a12:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007a14:	b143      	cbz	r3, 8007a28 <ai_platform_api_get_network_report+0x30>
 8007a16:	3401      	adds	r4, #1
 8007a18:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d003      	beq.n	8007a28 <ai_platform_api_get_network_report+0x30>
 8007a20:	b112      	cbz	r2, 8007a28 <ai_platform_api_get_network_report+0x30>
 8007a22:	4613      	mov	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1f6      	bne.n	8007a16 <ai_platform_api_get_network_report+0x1e>
 8007a28:	2c00      	cmp	r4, #0
 8007a2a:	f000 812a 	beq.w	8007c82 <ai_platform_api_get_network_report+0x28a>
 8007a2e:	9a02      	ldr	r2, [sp, #8]
 8007a30:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d053      	beq.n	8007ade <ai_platform_api_get_network_report+0xe6>
 8007a36:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8007a3a:	f1ba 0f00 	cmp.w	sl, #0
 8007a3e:	d04e      	beq.n	8007ade <ai_platform_api_get_network_report+0xe6>
 8007a40:	f04f 0b00 	mov.w	fp, #0
 8007a44:	465d      	mov	r5, fp
 8007a46:	e015      	b.n	8007a74 <ai_platform_api_get_network_report+0x7c>
 8007a48:	00e9      	lsls	r1, r5, #3
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	507a      	str	r2, [r7, r1]
 8007a4e:	69b1      	ldr	r1, [r6, #24]
 8007a50:	6849      	ldr	r1, [r1, #4]
 8007a52:	60a3      	str	r3, [r4, #8]
 8007a54:	f04f 0201 	mov.w	r2, #1
 8007a58:	7522      	strb	r2, [r4, #20]
 8007a5a:	6963      	ldr	r3, [r4, #20]
 8007a5c:	6121      	str	r1, [r4, #16]
 8007a5e:	f369 231f 	bfi	r3, r9, #8, #24
 8007a62:	e9c4 0c00 	strd	r0, ip, [r4]
 8007a66:	e9c4 3805 	strd	r3, r8, [r4, #20]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	60e2      	str	r2, [r4, #12]
 8007a6e:	3501      	adds	r5, #1
 8007a70:	f10b 0b1c 	add.w	fp, fp, #28
 8007a74:	f8ba 3000 	ldrh.w	r3, [sl]
 8007a78:	42ab      	cmp	r3, r5
 8007a7a:	b2aa      	uxth	r2, r5
 8007a7c:	d942      	bls.n	8007b04 <ai_platform_api_get_network_report+0x10c>
 8007a7e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d03e      	beq.n	8007b04 <ai_platform_api_get_network_report+0x10c>
 8007a86:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007a8a:	2e00      	cmp	r6, #0
 8007a8c:	d03a      	beq.n	8007b04 <ai_platform_api_get_network_report+0x10c>
 8007a8e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007a92:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8007a96:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007a9a:	69b3      	ldr	r3, [r6, #24]
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	68b3      	ldr	r3, [r6, #8]
 8007aa0:	00ea      	lsls	r2, r5, #3
 8007aa2:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007aa6:	9201      	str	r2, [sp, #4]
 8007aa8:	f001 faba 	bl	8009020 <ai_array_to_buffer_fmt>
 8007aac:	69b1      	ldr	r1, [r6, #24]
 8007aae:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8007ab2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007ab6:	445c      	add	r4, fp
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0c9      	beq.n	8007a50 <ai_platform_api_get_network_report+0x58>
 8007abc:	2100      	movs	r1, #0
 8007abe:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8007ac2:	6831      	ldr	r1, [r6, #0]
 8007ac4:	6059      	str	r1, [r3, #4]
 8007ac6:	b111      	cbz	r1, 8007ace <ai_platform_api_get_network_report+0xd6>
 8007ac8:	8849      	ldrh	r1, [r1, #2]
 8007aca:	2900      	cmp	r1, #0
 8007acc:	d1bc      	bne.n	8007a48 <ai_platform_api_get_network_report+0x50>
 8007ace:	69b1      	ldr	r1, [r6, #24]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e7bd      	b.n	8007a50 <ai_platform_api_get_network_report+0x58>
 8007ad4:	2400      	movs	r4, #0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	b009      	add	sp, #36	@ 0x24
 8007ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ade:	9b03      	ldr	r3, [sp, #12]
 8007ae0:	9802      	ldr	r0, [sp, #8]
 8007ae2:	2400      	movs	r4, #0
 8007ae4:	63dc      	str	r4, [r3, #60]	@ 0x3c
 8007ae6:	871c      	strh	r4, [r3, #56]	@ 0x38
 8007ae8:	2218      	movs	r2, #24
 8007aea:	2112      	movs	r1, #18
 8007aec:	300c      	adds	r0, #12
 8007aee:	f000 fcb9 	bl	8008464 <core_set_error>
 8007af2:	4620      	mov	r0, r4
 8007af4:	b009      	add	sp, #36	@ 0x24
 8007af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afa:	460c      	mov	r4, r1
 8007afc:	4620      	mov	r0, r4
 8007afe:	b009      	add	sp, #36	@ 0x24
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	d0ea      	beq.n	8007ade <ai_platform_api_get_network_report+0xe6>
 8007b08:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007b0c:	9903      	ldr	r1, [sp, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8007b12:	9b02      	ldr	r3, [sp, #8]
 8007b14:	870a      	strh	r2, [r1, #56]	@ 0x38
 8007b16:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	f240 80a4 	bls.w	8007c66 <ai_platform_api_get_network_report+0x26e>
 8007b1e:	9b02      	ldr	r3, [sp, #8]
 8007b20:	f04f 0900 	mov.w	r9, #0
 8007b24:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8007b28:	464d      	mov	r5, r9
 8007b2a:	46cb      	mov	fp, r9
 8007b2c:	e016      	b.n	8007b5c <ai_platform_api_get_network_report+0x164>
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f84a 200e 	str.w	r2, [sl, lr]
 8007b34:	69b1      	ldr	r1, [r6, #24]
 8007b36:	684a      	ldr	r2, [r1, #4]
 8007b38:	60a3      	str	r3, [r4, #8]
 8007b3a:	9b01      	ldr	r3, [sp, #4]
 8007b3c:	61a3      	str	r3, [r4, #24]
 8007b3e:	f04f 0301 	mov.w	r3, #1
 8007b42:	7523      	strb	r3, [r4, #20]
 8007b44:	6963      	ldr	r3, [r4, #20]
 8007b46:	6122      	str	r2, [r4, #16]
 8007b48:	e9c4 0c00 	strd	r0, ip, [r4]
 8007b4c:	f367 231f 	bfi	r3, r7, #8, #24
 8007b50:	f8c4 b00c 	str.w	fp, [r4, #12]
 8007b54:	3501      	adds	r5, #1
 8007b56:	f109 091c 	add.w	r9, r9, #28
 8007b5a:	6163      	str	r3, [r4, #20]
 8007b5c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007b60:	42ab      	cmp	r3, r5
 8007b62:	b2aa      	uxth	r2, r5
 8007b64:	d927      	bls.n	8007bb6 <ai_platform_api_get_network_report+0x1be>
 8007b66:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007b6a:	b323      	cbz	r3, 8007bb6 <ai_platform_api_get_network_report+0x1be>
 8007b6c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007b70:	b30e      	cbz	r6, 8007bb6 <ai_platform_api_get_network_report+0x1be>
 8007b72:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007b76:	68b7      	ldr	r7, [r6, #8]
 8007b78:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 8007b7c:	69b3      	ldr	r3, [r6, #24]
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	68f3      	ldr	r3, [r6, #12]
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	f001 fa4c 	bl	8009020 <ai_array_to_buffer_fmt>
 8007b88:	69b1      	ldr	r1, [r6, #24]
 8007b8a:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 8007b8e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007b92:	444c      	add	r4, r9
 8007b94:	f3c7 2717 	ubfx	r7, r7, #8, #24
 8007b98:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0ca      	beq.n	8007b36 <ai_platform_api_get_network_report+0x13e>
 8007ba0:	f84a b035 	str.w	fp, [sl, r5, lsl #3]
 8007ba4:	6831      	ldr	r1, [r6, #0]
 8007ba6:	6059      	str	r1, [r3, #4]
 8007ba8:	b111      	cbz	r1, 8007bb0 <ai_platform_api_get_network_report+0x1b8>
 8007baa:	8849      	ldrh	r1, [r1, #2]
 8007bac:	2900      	cmp	r1, #0
 8007bae:	d1be      	bne.n	8007b2e <ai_platform_api_get_network_report+0x136>
 8007bb0:	69b1      	ldr	r1, [r6, #24]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e7bf      	b.n	8007b36 <ai_platform_api_get_network_report+0x13e>
 8007bb6:	2a00      	cmp	r2, #0
 8007bb8:	d055      	beq.n	8007c66 <ai_platform_api_get_network_report+0x26e>
 8007bba:	9902      	ldr	r1, [sp, #8]
 8007bbc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007bc0:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 8007bc4:	9903      	ldr	r1, [sp, #12]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	640b      	str	r3, [r1, #64]	@ 0x40
 8007bca:	874a      	strh	r2, [r1, #58]	@ 0x3a
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7ff fde1 	bl	8007794 <ai_buffer_array_sane>
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	b968      	cbnz	r0, 8007bf2 <ai_platform_api_get_network_report+0x1fa>
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff fddc 	bl	8007794 <ai_buffer_array_sane>
 8007bdc:	b148      	cbz	r0, 8007bf2 <ai_platform_api_get_network_report+0x1fa>
 8007bde:	9b02      	ldr	r3, [sp, #8]
 8007be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be2:	b133      	cbz	r3, 8007bf2 <ai_platform_api_get_network_report+0x1fa>
 8007be4:	9802      	ldr	r0, [sp, #8]
 8007be6:	2213      	movs	r2, #19
 8007be8:	2111      	movs	r1, #17
 8007bea:	300c      	adds	r0, #12
 8007bec:	f000 fc3a 	bl	8008464 <core_set_error>
 8007bf0:	e771      	b.n	8007ad6 <ai_platform_api_get_network_report+0xde>
 8007bf2:	9d02      	ldr	r5, [sp, #8]
 8007bf4:	f105 0720 	add.w	r7, r5, #32
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f7ff fdcb 	bl	8007794 <ai_buffer_array_sane>
 8007bfe:	4604      	mov	r4, r0
 8007c00:	b960      	cbnz	r0, 8007c1c <ai_platform_api_get_network_report+0x224>
 8007c02:	4638      	mov	r0, r7
 8007c04:	f7ff fdc6 	bl	8007794 <ai_buffer_array_sane>
 8007c08:	b140      	cbz	r0, 8007c1c <ai_platform_api_get_network_report+0x224>
 8007c0a:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8007c0c:	b133      	cbz	r3, 8007c1c <ai_platform_api_get_network_report+0x224>
 8007c0e:	9802      	ldr	r0, [sp, #8]
 8007c10:	2212      	movs	r2, #18
 8007c12:	2111      	movs	r1, #17
 8007c14:	300c      	adds	r0, #12
 8007c16:	f000 fc25 	bl	8008464 <core_set_error>
 8007c1a:	e75c      	b.n	8007ad6 <ai_platform_api_get_network_report+0xde>
 8007c1c:	9a02      	ldr	r2, [sp, #8]
 8007c1e:	9c03      	ldr	r4, [sp, #12]
 8007c20:	6853      	ldr	r3, [r2, #4]
 8007c22:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8007c26:	4b1b      	ldr	r3, [pc, #108]	@ (8007c94 <ai_platform_api_get_network_report+0x29c>)
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	2309      	movs	r3, #9
 8007c2c:	6163      	str	r3, [r4, #20]
 8007c2e:	f240 2c01 	movw	ip, #513	@ 0x201
 8007c32:	f240 5301 	movw	r3, #1281	@ 0x501
 8007c36:	e9c4 c309 	strd	ip, r3, [r4, #36]	@ 0x24
 8007c3a:	6890      	ldr	r0, [r2, #8]
 8007c3c:	f001 fa78 	bl	8009130 <ai_platform_version_get>
 8007c40:	4b15      	ldr	r3, [pc, #84]	@ (8007c98 <ai_platform_api_get_network_report+0x2a0>)
 8007c42:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007c44:	6220      	str	r0, [r4, #32]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d128      	bne.n	8007c9c <ai_platform_api_get_network_report+0x2a4>
 8007c4a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007c4e:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c52:	e882 0003 	stmia.w	r2, {r0, r1}
 8007c56:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007c5a:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8007c5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c62:	2401      	movs	r4, #1
 8007c64:	e737      	b.n	8007ad6 <ai_platform_api_get_network_report+0xde>
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	9802      	ldr	r0, [sp, #8]
 8007c6a:	2400      	movs	r4, #0
 8007c6c:	641c      	str	r4, [r3, #64]	@ 0x40
 8007c6e:	875c      	strh	r4, [r3, #58]	@ 0x3a
 8007c70:	2218      	movs	r2, #24
 8007c72:	2113      	movs	r1, #19
 8007c74:	300c      	adds	r0, #12
 8007c76:	f000 fbf5 	bl	8008464 <core_set_error>
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	b009      	add	sp, #36	@ 0x24
 8007c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c82:	9802      	ldr	r0, [sp, #8]
 8007c84:	2218      	movs	r2, #24
 8007c86:	2111      	movs	r1, #17
 8007c88:	300c      	adds	r0, #12
 8007c8a:	f000 fbeb 	bl	8008464 <core_set_error>
 8007c8e:	e722      	b.n	8007ad6 <ai_platform_api_get_network_report+0xde>
 8007c90:	a1c00100 	.word	0xa1c00100
 8007c94:	0800dc00 	.word	0x0800dc00
 8007c98:	a1facade 	.word	0xa1facade
 8007c9c:	9903      	ldr	r1, [sp, #12]
 8007c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8007d4c <ai_platform_api_get_network_report+0x354>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	e9c1 2212 	strd	r2, r2, [r1, #72]	@ 0x48
 8007ca6:	e9c1 2214 	strd	r2, r2, [r1, #80]	@ 0x50
 8007caa:	4a29      	ldr	r2, [pc, #164]	@ (8007d50 <ai_platform_api_get_network_report+0x358>)
 8007cac:	644a      	str	r2, [r1, #68]	@ 0x44
 8007cae:	f10d 0c10 	add.w	ip, sp, #16
 8007cb2:	f240 4201 	movw	r2, #1025	@ 0x401
 8007cb6:	f8c1 c05c 	str.w	ip, [r1, #92]	@ 0x5c
 8007cba:	658a      	str	r2, [r1, #88]	@ 0x58
 8007cbc:	f101 0844 	add.w	r8, r1, #68	@ 0x44
 8007cc0:	f101 0960 	add.w	r9, r1, #96	@ 0x60
 8007cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007cc6:	4645      	mov	r5, r8
 8007cc8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8007ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cce:	464c      	mov	r4, r9
 8007cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007cd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7ff fd5a 	bl	8007794 <ai_buffer_array_sane>
 8007ce0:	b998      	cbnz	r0, 8007d0a <ai_platform_api_get_network_report+0x312>
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	f7ff fd56 	bl	8007794 <ai_buffer_array_sane>
 8007ce8:	b908      	cbnz	r0, 8007cee <ai_platform_api_get_network_report+0x2f6>
 8007cea:	2401      	movs	r4, #1
 8007cec:	e6f3      	b.n	8007ad6 <ai_platform_api_get_network_report+0xde>
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f7ff fd50 	bl	8007794 <ai_buffer_array_sane>
 8007cf4:	b1b8      	cbz	r0, 8007d26 <ai_platform_api_get_network_report+0x32e>
 8007cf6:	9b02      	ldr	r3, [sp, #8]
 8007cf8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cfc:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8007d00:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007d04:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8007d08:	e7ef      	b.n	8007cea <ai_platform_api_get_network_report+0x2f2>
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7ff fd42 	bl	8007794 <ai_buffer_array_sane>
 8007d10:	b190      	cbz	r0, 8007d38 <ai_platform_api_get_network_report+0x340>
 8007d12:	9b02      	ldr	r3, [sp, #8]
 8007d14:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8007d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d18:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8007d1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007d20:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8007d24:	e7dd      	b.n	8007ce2 <ai_platform_api_get_network_report+0x2ea>
 8007d26:	4604      	mov	r4, r0
 8007d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d2a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8007d2e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007d32:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8007d36:	deff      	udf	#255	@ 0xff
 8007d38:	4604      	mov	r4, r0
 8007d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d3c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8007d40:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007d44:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8007d48:	deff      	udf	#255	@ 0xff
 8007d4a:	bf00      	nop
 8007d4c:	0800d6b0 	.word	0x0800d6b0
 8007d50:	00040440 	.word	0x00040440

08007d54 <ai_platform_network_create>:
 8007d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8007d5e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8007d62:	b320      	cbz	r0, 8007dae <ai_platform_network_create+0x5a>
 8007d64:	6002      	str	r2, [r0, #0]
 8007d66:	4616      	mov	r6, r2
 8007d68:	461f      	mov	r7, r3
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	f000 fb72 	bl	8008454 <core_init>
 8007d70:	b970      	cbnz	r0, 8007d90 <ai_platform_network_create+0x3c>
 8007d72:	2530      	movs	r5, #48	@ 0x30
 8007d74:	2300      	movs	r3, #0
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	2410      	movs	r4, #16
 8007d7a:	4642      	mov	r2, r8
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f001 f9d0 	bl	8009124 <ai_version_get>
 8007d84:	60b0      	str	r0, [r6, #8]
 8007d86:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8007d8a:	b003      	add	sp, #12
 8007d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d90:	2200      	movs	r2, #0
 8007d92:	4649      	mov	r1, r9
 8007d94:	4638      	mov	r0, r7
 8007d96:	f001 f9c5 	bl	8009124 <ai_version_get>
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	2105      	movs	r1, #5
 8007da0:	2001      	movs	r0, #1
 8007da2:	f001 f9bf 	bl	8009124 <ai_version_get>
 8007da6:	4285      	cmp	r5, r0
 8007da8:	d008      	beq.n	8007dbc <ai_platform_network_create+0x68>
 8007daa:	2501      	movs	r5, #1
 8007dac:	e7e2      	b.n	8007d74 <ai_platform_network_create+0x20>
 8007dae:	2510      	movs	r5, #16
 8007db0:	462c      	mov	r4, r5
 8007db2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8007db6:	b003      	add	sp, #12
 8007db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dbc:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <ai_platform_network_create+0x80>)
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	a801      	add	r0, sp, #4
 8007dc2:	f000 fb5b 	bl	800847c <ai_check_custom_types>
 8007dc6:	b110      	cbz	r0, 8007dce <ai_platform_network_create+0x7a>
 8007dc8:	2400      	movs	r4, #0
 8007dca:	4625      	mov	r5, r4
 8007dcc:	e7d5      	b.n	8007d7a <ai_platform_network_create+0x26>
 8007dce:	2502      	movs	r5, #2
 8007dd0:	e7d0      	b.n	8007d74 <ai_platform_network_create+0x20>
 8007dd2:	bf00      	nop
 8007dd4:	84048403 	.word	0x84048403

08007dd8 <ai_platform_network_init>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	4b63      	ldr	r3, [pc, #396]	@ (8007f6c <ai_platform_network_init+0x194>)
 8007dde:	6802      	ldr	r2, [r0, #0]
 8007de0:	4393      	bics	r3, r2
 8007de2:	b083      	sub	sp, #12
 8007de4:	d156      	bne.n	8007e94 <ai_platform_network_init+0xbc>
 8007de6:	4604      	mov	r4, r0
 8007de8:	460f      	mov	r7, r1
 8007dea:	2900      	cmp	r1, #0
 8007dec:	f000 80a9 	beq.w	8007f42 <ai_platform_network_init+0x16a>
 8007df0:	680b      	ldr	r3, [r1, #0]
 8007df2:	495f      	ldr	r1, [pc, #380]	@ (8007f70 <ai_platform_network_init+0x198>)
 8007df4:	428b      	cmp	r3, r1
 8007df6:	d113      	bne.n	8007e20 <ai_platform_network_init+0x48>
 8007df8:	495c      	ldr	r1, [pc, #368]	@ (8007f6c <ai_platform_network_init+0x194>)
 8007dfa:	89bd      	ldrh	r5, [r7, #12]
 8007dfc:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8007e00:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8007e04:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8007e08:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8007e0c:	68be      	ldr	r6, [r7, #8]
 8007e0e:	428a      	cmp	r2, r1
 8007e10:	d02c      	beq.n	8007e6c <ai_platform_network_init+0x94>
 8007e12:	2303      	movs	r3, #3
 8007e14:	6123      	str	r3, [r4, #16]
 8007e16:	4627      	mov	r7, r4
 8007e18:	4638      	mov	r0, r7
 8007e1a:	b003      	add	sp, #12
 8007e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e20:	2101      	movs	r1, #1
 8007e22:	4638      	mov	r0, r7
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8007e2a:	f7ff fc7f 	bl	800772c <ai_buffer_get_size>
 8007e2e:	f107 081c 	add.w	r8, r7, #28
 8007e32:	4605      	mov	r5, r0
 8007e34:	2101      	movs	r1, #1
 8007e36:	4640      	mov	r0, r8
 8007e38:	463e      	mov	r6, r7
 8007e3a:	6a3f      	ldr	r7, [r7, #32]
 8007e3c:	f7ff fc76 	bl	800772c <ai_buffer_get_size>
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	bf0a      	itet	eq
 8007e46:	46a9      	moveq	r9, r5
 8007e48:	f04f 0901 	movne.w	r9, #1
 8007e4c:	462e      	moveq	r6, r5
 8007e4e:	b330      	cbz	r0, 8007e9e <ai_platform_network_init+0xc6>
 8007e50:	2f00      	cmp	r7, #0
 8007e52:	f000 8084 	beq.w	8007f5e <ai_platform_network_init+0x186>
 8007e56:	f04f 0a01 	mov.w	sl, #1
 8007e5a:	f1bb 0f00 	cmp.w	fp, #0
 8007e5e:	d021      	beq.n	8007ea4 <ai_platform_network_init+0xcc>
 8007e60:	2500      	movs	r5, #0
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	4941      	ldr	r1, [pc, #260]	@ (8007f6c <ai_platform_network_init+0x194>)
 8007e66:	428a      	cmp	r2, r1
 8007e68:	46ab      	mov	fp, r5
 8007e6a:	d1d2      	bne.n	8007e12 <ai_platform_network_init+0x3a>
 8007e6c:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8007e6e:	454a      	cmp	r2, r9
 8007e70:	4a3f      	ldr	r2, [pc, #252]	@ (8007f70 <ai_platform_network_init+0x198>)
 8007e72:	d221      	bcs.n	8007eb8 <ai_platform_network_init+0xe0>
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d15c      	bne.n	8007f32 <ai_platform_network_init+0x15a>
 8007e78:	6266      	str	r6, [r4, #36]	@ 0x24
 8007e7a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8007e7e:	f8a4 b020 	strh.w	fp, [r4, #32]
 8007e82:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8007e86:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 8007e8a:	8525      	strh	r5, [r4, #40]	@ 0x28
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 fb1f 	bl	80084d0 <ai_layers_init_all>
 8007e92:	e7be      	b.n	8007e12 <ai_platform_network_init+0x3a>
 8007e94:	2700      	movs	r7, #0
 8007e96:	4638      	mov	r0, r7
 8007e98:	b003      	add	sp, #12
 8007e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9e:	4680      	mov	r8, r0
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	e7da      	b.n	8007e5a <ai_platform_network_init+0x82>
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	d0dc      	beq.n	8007e62 <ai_platform_network_init+0x8a>
 8007ea8:	2212      	movs	r2, #18
 8007eaa:	2110      	movs	r1, #16
 8007eac:	f104 000c 	add.w	r0, r4, #12
 8007eb0:	f000 fad8 	bl	8008464 <core_set_error>
 8007eb4:	465f      	mov	r7, fp
 8007eb6:	e7af      	b.n	8007e18 <ai_platform_network_init+0x40>
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d0dd      	beq.n	8007e78 <ai_platform_network_init+0xa0>
 8007ebc:	f1b9 0f00 	cmp.w	r9, #0
 8007ec0:	d018      	beq.n	8007ef4 <ai_platform_network_init+0x11c>
 8007ec2:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ecc:	2700      	movs	r7, #0
 8007ece:	4699      	mov	r9, r3
 8007ed0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ed2:	eb06 0e07 	add.w	lr, r6, r7
 8007ed6:	eb03 0c07 	add.w	ip, r3, r7
 8007eda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007ede:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007ee2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	45b9      	cmp	r9, r7
 8007eea:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8007eee:	d1ef      	bne.n	8007ed0 <ai_platform_network_init+0xf8>
 8007ef0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007ef4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007ef6:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8007efa:	4553      	cmp	r3, sl
 8007efc:	f8a4 b020 	strh.w	fp, [r4, #32]
 8007f00:	d325      	bcc.n	8007f4e <ai_platform_network_init+0x176>
 8007f02:	f1ba 0f00 	cmp.w	sl, #0
 8007f06:	d0be      	beq.n	8007e86 <ai_platform_network_init+0xae>
 8007f08:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8007f0c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8007f10:	f04f 0c00 	mov.w	ip, #0
 8007f14:	eb08 070c 	add.w	r7, r8, ip
 8007f18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007f1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f1c:	4466      	add	r6, ip
 8007f1e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007f20:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8007f24:	f10c 0c1c 	add.w	ip, ip, #28
 8007f28:	45f4      	cmp	ip, lr
 8007f2a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8007f2e:	d1f1      	bne.n	8007f14 <ai_platform_network_init+0x13c>
 8007f30:	e7a9      	b.n	8007e86 <ai_platform_network_init+0xae>
 8007f32:	2212      	movs	r2, #18
 8007f34:	2116      	movs	r1, #22
 8007f36:	f104 000c 	add.w	r0, r4, #12
 8007f3a:	f000 fa93 	bl	8008464 <core_set_error>
 8007f3e:	2700      	movs	r7, #0
 8007f40:	e76a      	b.n	8007e18 <ai_platform_network_init+0x40>
 8007f42:	2211      	movs	r2, #17
 8007f44:	2110      	movs	r1, #16
 8007f46:	300c      	adds	r0, #12
 8007f48:	f000 fa8c 	bl	8008464 <core_set_error>
 8007f4c:	e764      	b.n	8007e18 <ai_platform_network_init+0x40>
 8007f4e:	2213      	movs	r2, #19
 8007f50:	2116      	movs	r1, #22
 8007f52:	f104 000c 	add.w	r0, r4, #12
 8007f56:	f000 fa85 	bl	8008464 <core_set_error>
 8007f5a:	2700      	movs	r7, #0
 8007f5c:	e75c      	b.n	8007e18 <ai_platform_network_init+0x40>
 8007f5e:	2213      	movs	r2, #19
 8007f60:	2110      	movs	r1, #16
 8007f62:	f104 000c 	add.w	r0, r4, #12
 8007f66:	f000 fa7d 	bl	8008464 <core_set_error>
 8007f6a:	e755      	b.n	8007e18 <ai_platform_network_init+0x40>
 8007f6c:	a1c00100 	.word	0xa1c00100
 8007f70:	a1facade 	.word	0xa1facade

08007f74 <ai_platform_network_post_init>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4b16      	ldr	r3, [pc, #88]	@ (8007fd0 <ai_platform_network_post_init+0x5c>)
 8007f78:	6802      	ldr	r2, [r0, #0]
 8007f7a:	ea02 0103 	and.w	r1, r2, r3
 8007f7e:	4393      	bics	r3, r2
 8007f80:	d108      	bne.n	8007f94 <ai_platform_network_post_init+0x20>
 8007f82:	6903      	ldr	r3, [r0, #16]
 8007f84:	f013 0502 	ands.w	r5, r3, #2
 8007f88:	4604      	mov	r4, r0
 8007f8a:	d005      	beq.n	8007f98 <ai_platform_network_post_init+0x24>
 8007f8c:	428a      	cmp	r2, r1
 8007f8e:	d00a      	beq.n	8007fa6 <ai_platform_network_post_init+0x32>
 8007f90:	2001      	movs	r0, #1
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	2000      	movs	r0, #0
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	2210      	movs	r2, #16
 8007f9a:	2111      	movs	r1, #17
 8007f9c:	300c      	adds	r0, #12
 8007f9e:	f000 fa61 	bl	8008464 <core_set_error>
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	f000 faa1 	bl	80084ec <ai_layers_post_init_all>
 8007faa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0ef      	beq.n	8007f90 <ai_platform_network_post_init+0x1c>
 8007fb0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007fb2:	e008      	b.n	8007fc6 <ai_platform_network_post_init+0x52>
 8007fb4:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8007fb8:	4798      	blx	r3
 8007fba:	692b      	ldr	r3, [r5, #16]
 8007fbc:	42ab      	cmp	r3, r5
 8007fbe:	d0e7      	beq.n	8007f90 <ai_platform_network_post_init+0x1c>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0e5      	beq.n	8007f90 <ai_platform_network_post_init+0x1c>
 8007fc4:	461d      	mov	r5, r3
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	2000      	movs	r0, #0
 8007fca:	2d00      	cmp	r5, #0
 8007fcc:	d1f2      	bne.n	8007fb4 <ai_platform_network_post_init+0x40>
 8007fce:	e7df      	b.n	8007f90 <ai_platform_network_post_init+0x1c>
 8007fd0:	a1c00100 	.word	0xa1c00100

08007fd4 <ai_platform_network_process>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	4bb5      	ldr	r3, [pc, #724]	@ (80082b0 <ai_platform_network_process+0x2dc>)
 8007fda:	4605      	mov	r5, r0
 8007fdc:	6800      	ldr	r0, [r0, #0]
 8007fde:	b085      	sub	sp, #20
 8007fe0:	4383      	bics	r3, r0
 8007fe2:	9202      	str	r2, [sp, #8]
 8007fe4:	f040 8140 	bne.w	8008268 <ai_platform_network_process+0x294>
 8007fe8:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 8125 	beq.w	800823a <ai_platform_network_process+0x266>
 8007ff0:	692b      	ldr	r3, [r5, #16]
 8007ff2:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2700      	movs	r7, #0
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	61af      	str	r7, [r5, #24]
 8008000:	f040 8137 	bne.w	8008272 <ai_platform_network_process+0x29e>
 8008004:	2900      	cmp	r1, #0
 8008006:	f000 811e 	beq.w	8008246 <ai_platform_network_process+0x272>
 800800a:	f1ba 0f00 	cmp.w	sl, #0
 800800e:	f000 811a 	beq.w	8008246 <ai_platform_network_process+0x272>
 8008012:	f8ba 3000 	ldrh.w	r3, [sl]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 8115 	beq.w	8008246 <ai_platform_network_process+0x272>
 800801c:	698b      	ldr	r3, [r1, #24]
 800801e:	9503      	str	r5, [sp, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	460e      	mov	r6, r1
 8008026:	f8da 3004 	ldr.w	r3, [sl, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d072      	beq.n	8008114 <ai_platform_network_process+0x140>
 800802e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8008032:	2c00      	cmp	r4, #0
 8008034:	d06e      	beq.n	8008114 <ai_platform_network_process+0x140>
 8008036:	f8da 3008 	ldr.w	r3, [sl, #8]
 800803a:	f8d3 9000 	ldr.w	r9, [r3]
 800803e:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8008042:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8008046:	f000 81d3 	beq.w	80083f0 <ai_platform_network_process+0x41c>
 800804a:	69a3      	ldr	r3, [r4, #24]
 800804c:	2101      	movs	r1, #1
 800804e:	4630      	mov	r0, r6
 8008050:	685d      	ldr	r5, [r3, #4]
 8008052:	f7ff fb6b 	bl	800772c <ai_buffer_get_size>
 8008056:	4285      	cmp	r5, r0
 8008058:	f0c0 8116 	bcc.w	8008288 <ai_platform_network_process+0x2b4>
 800805c:	68e0      	ldr	r0, [r4, #12]
 800805e:	69b1      	ldr	r1, [r6, #24]
 8008060:	68c2      	ldr	r2, [r0, #12]
 8008062:	68cb      	ldr	r3, [r1, #12]
 8008064:	429a      	cmp	r2, r3
 8008066:	f040 810f 	bne.w	8008288 <ai_platform_network_process+0x2b4>
 800806a:	6882      	ldr	r2, [r0, #8]
 800806c:	688b      	ldr	r3, [r1, #8]
 800806e:	429a      	cmp	r2, r3
 8008070:	f040 810a 	bne.w	8008288 <ai_platform_network_process+0x2b4>
 8008074:	6842      	ldr	r2, [r0, #4]
 8008076:	684b      	ldr	r3, [r1, #4]
 8008078:	429a      	cmp	r2, r3
 800807a:	f040 8105 	bne.w	8008288 <ai_platform_network_process+0x2b4>
 800807e:	69a3      	ldr	r3, [r4, #24]
 8008080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008084:	f001 f83c 	bl	8009100 <ai_array_get_data_byte_size>
 8008088:	4605      	mov	r5, r0
 800808a:	4620      	mov	r0, r4
 800808c:	f001 f862 	bl	8009154 <get_tensor_byte_size>
 8008090:	4285      	cmp	r5, r0
 8008092:	f0c0 80f9 	bcc.w	8008288 <ai_platform_network_process+0x2b4>
 8008096:	69a3      	ldr	r3, [r4, #24]
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	f000 ffc1 	bl	8009020 <ai_array_to_buffer_fmt>
 800809e:	6833      	ldr	r3, [r6, #0]
 80080a0:	4058      	eors	r0, r3
 80080a2:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80080a6:	f040 81a5 	bne.w	80083f4 <ai_platform_network_process+0x420>
 80080aa:	6873      	ldr	r3, [r6, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 819f 	beq.w	80083f0 <ai_platform_network_process+0x41c>
 80080b2:	69b3      	ldr	r3, [r6, #24]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 81a5 	beq.w	8008406 <ai_platform_network_process+0x432>
 80080bc:	9a01      	ldr	r2, [sp, #4]
 80080be:	429a      	cmp	r2, r3
 80080c0:	bf38      	it	cc
 80080c2:	461a      	movcc	r2, r3
 80080c4:	4620      	mov	r0, r4
 80080c6:	9201      	str	r2, [sp, #4]
 80080c8:	f001 f844 	bl	8009154 <get_tensor_byte_size>
 80080cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80080d0:	69b3      	ldr	r3, [r6, #24]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	fb00 f303 	mul.w	r3, r0, r3
 80080d8:	f8c8 300c 	str.w	r3, [r8, #12]
 80080dc:	6871      	ldr	r1, [r6, #4]
 80080de:	f8c8 1004 	str.w	r1, [r8, #4]
 80080e2:	440b      	add	r3, r1
 80080e4:	f849 300b 	str.w	r3, [r9, fp]
 80080e8:	69a0      	ldr	r0, [r4, #24]
 80080ea:	6803      	ldr	r3, [r0, #0]
 80080ec:	009a      	lsls	r2, r3, #2
 80080ee:	f107 0701 	add.w	r7, r7, #1
 80080f2:	f106 061c 	add.w	r6, r6, #28
 80080f6:	f100 80b1 	bmi.w	800825c <ai_platform_network_process+0x288>
 80080fa:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	4419      	add	r1, r3
 8008102:	6081      	str	r1, [r0, #8]
 8008104:	69a3      	ldr	r3, [r4, #24]
 8008106:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800810a:	60da      	str	r2, [r3, #12]
 800810c:	f8ba 3000 	ldrh.w	r3, [sl]
 8008110:	42bb      	cmp	r3, r7
 8008112:	d888      	bhi.n	8008026 <ai_platform_network_process+0x52>
 8008114:	9d03      	ldr	r5, [sp, #12]
 8008116:	9b02      	ldr	r3, [sp, #8]
 8008118:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 817c 	beq.w	8008418 <ai_platform_network_process+0x444>
 8008120:	2a01      	cmp	r2, #1
 8008122:	f240 80bd 	bls.w	80082a0 <ai_platform_network_process+0x2cc>
 8008126:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 800812a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 80b6 	beq.w	80082a0 <ai_platform_network_process+0x2cc>
 8008134:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008138:	2700      	movs	r7, #0
 800813a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 80bd 	beq.w	80082be <ai_platform_network_process+0x2ea>
 8008144:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8008148:	2e00      	cmp	r6, #0
 800814a:	f000 80b8 	beq.w	80082be <ai_platform_network_process+0x2ea>
 800814e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008152:	681c      	ldr	r4, [r3, #0]
 8008154:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8008158:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800815c:	f000 8160 	beq.w	8008420 <ai_platform_network_process+0x44c>
 8008160:	69b3      	ldr	r3, [r6, #24]
 8008162:	2101      	movs	r1, #1
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	9302      	str	r3, [sp, #8]
 8008168:	4658      	mov	r0, fp
 800816a:	f7ff fadf 	bl	800772c <ai_buffer_get_size>
 800816e:	9b02      	ldr	r3, [sp, #8]
 8008170:	4283      	cmp	r3, r0
 8008172:	f0c0 8095 	bcc.w	80082a0 <ai_platform_network_process+0x2cc>
 8008176:	68f0      	ldr	r0, [r6, #12]
 8008178:	f8db 1018 	ldr.w	r1, [fp, #24]
 800817c:	68c2      	ldr	r2, [r0, #12]
 800817e:	68cb      	ldr	r3, [r1, #12]
 8008180:	429a      	cmp	r2, r3
 8008182:	f040 808d 	bne.w	80082a0 <ai_platform_network_process+0x2cc>
 8008186:	6882      	ldr	r2, [r0, #8]
 8008188:	688b      	ldr	r3, [r1, #8]
 800818a:	429a      	cmp	r2, r3
 800818c:	f040 8088 	bne.w	80082a0 <ai_platform_network_process+0x2cc>
 8008190:	6842      	ldr	r2, [r0, #4]
 8008192:	684b      	ldr	r3, [r1, #4]
 8008194:	429a      	cmp	r2, r3
 8008196:	f040 8083 	bne.w	80082a0 <ai_platform_network_process+0x2cc>
 800819a:	69b3      	ldr	r3, [r6, #24]
 800819c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081a0:	f000 ffae 	bl	8009100 <ai_array_get_data_byte_size>
 80081a4:	9002      	str	r0, [sp, #8]
 80081a6:	4630      	mov	r0, r6
 80081a8:	f000 ffd4 	bl	8009154 <get_tensor_byte_size>
 80081ac:	9b02      	ldr	r3, [sp, #8]
 80081ae:	4283      	cmp	r3, r0
 80081b0:	d376      	bcc.n	80082a0 <ai_platform_network_process+0x2cc>
 80081b2:	69b3      	ldr	r3, [r6, #24]
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	f000 ff33 	bl	8009020 <ai_array_to_buffer_fmt>
 80081ba:	f8db 3000 	ldr.w	r3, [fp]
 80081be:	4058      	eors	r0, r3
 80081c0:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80081c4:	f040 8134 	bne.w	8008430 <ai_platform_network_process+0x45c>
 80081c8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8127 	beq.w	8008420 <ai_platform_network_process+0x44c>
 80081d2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 8133 	beq.w	8008444 <ai_platform_network_process+0x470>
 80081de:	9a01      	ldr	r2, [sp, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	bf38      	it	cc
 80081e4:	461a      	movcc	r2, r3
 80081e6:	4630      	mov	r0, r6
 80081e8:	9201      	str	r2, [sp, #4]
 80081ea:	f000 ffb3 	bl	8009154 <get_tensor_byte_size>
 80081ee:	f8c9 0008 	str.w	r0, [r9, #8]
 80081f2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	fb00 f303 	mul.w	r3, r0, r3
 80081fc:	f8c9 300c 	str.w	r3, [r9, #12]
 8008200:	f8db 1004 	ldr.w	r1, [fp, #4]
 8008204:	f8c9 1004 	str.w	r1, [r9, #4]
 8008208:	440b      	add	r3, r1
 800820a:	f844 300a 	str.w	r3, [r4, sl]
 800820e:	69b0      	ldr	r0, [r6, #24]
 8008210:	6803      	ldr	r3, [r0, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	f107 0701 	add.w	r7, r7, #1
 8008218:	f10b 0b1c 	add.w	fp, fp, #28
 800821c:	d44a      	bmi.n	80082b4 <ai_platform_network_process+0x2e0>
 800821e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	4419      	add	r1, r3
 8008226:	6081      	str	r1, [r0, #8]
 8008228:	69b3      	ldr	r3, [r6, #24]
 800822a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800822e:	60da      	str	r2, [r3, #12]
 8008230:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008234:	42bb      	cmp	r3, r7
 8008236:	d880      	bhi.n	800813a <ai_platform_network_process+0x166>
 8008238:	e041      	b.n	80082be <ai_platform_network_process+0x2ea>
 800823a:	692a      	ldr	r2, [r5, #16]
 800823c:	61ab      	str	r3, [r5, #24]
 800823e:	f002 0203 	and.w	r2, r2, #3
 8008242:	2a03      	cmp	r2, #3
 8008244:	d115      	bne.n	8008272 <ai_platform_network_process+0x29e>
 8008246:	2217      	movs	r2, #23
 8008248:	2112      	movs	r1, #18
 800824a:	f105 000c 	add.w	r0, r5, #12
 800824e:	f000 f909 	bl	8008464 <core_set_error>
 8008252:	2400      	movs	r4, #0
 8008254:	4620      	mov	r0, r4
 8008256:	b005      	add	sp, #20
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825c:	f8ba 3000 	ldrh.w	r3, [sl]
 8008260:	429f      	cmp	r7, r3
 8008262:	f4ff aee0 	bcc.w	8008026 <ai_platform_network_process+0x52>
 8008266:	e755      	b.n	8008114 <ai_platform_network_process+0x140>
 8008268:	2400      	movs	r4, #0
 800826a:	4620      	mov	r0, r4
 800826c:	b005      	add	sp, #20
 800826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008272:	2230      	movs	r2, #48	@ 0x30
 8008274:	2111      	movs	r1, #17
 8008276:	f105 000c 	add.w	r0, r5, #12
 800827a:	f000 f8f3 	bl	8008464 <core_set_error>
 800827e:	2400      	movs	r4, #0
 8008280:	4620      	mov	r0, r4
 8008282:	b005      	add	sp, #20
 8008284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008288:	9d03      	ldr	r5, [sp, #12]
 800828a:	2218      	movs	r2, #24
 800828c:	2112      	movs	r1, #18
 800828e:	f105 000c 	add.w	r0, r5, #12
 8008292:	f000 f8e7 	bl	8008464 <core_set_error>
 8008296:	2400      	movs	r4, #0
 8008298:	4620      	mov	r0, r4
 800829a:	b005      	add	sp, #20
 800829c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a0:	2218      	movs	r2, #24
 80082a2:	2113      	movs	r1, #19
 80082a4:	f105 000c 	add.w	r0, r5, #12
 80082a8:	f000 f8dc 	bl	8008464 <core_set_error>
 80082ac:	2400      	movs	r4, #0
 80082ae:	e7d1      	b.n	8008254 <ai_platform_network_process+0x280>
 80082b0:	a1c00100 	.word	0xa1c00100
 80082b4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80082b8:	429f      	cmp	r7, r3
 80082ba:	f4ff af3e 	bcc.w	800813a <ai_platform_network_process+0x166>
 80082be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80082c2:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80082c4:	832b      	strh	r3, [r5, #24]
 80082c6:	2a00      	cmp	r2, #0
 80082c8:	f040 808c 	bne.w	80083e4 <ai_platform_network_process+0x410>
 80082cc:	4616      	mov	r6, r2
 80082ce:	4617      	mov	r7, r2
 80082d0:	8b6c      	ldrh	r4, [r5, #26]
 80082d2:	429c      	cmp	r4, r3
 80082d4:	bf38      	it	cc
 80082d6:	46ab      	movcc	fp, r5
 80082d8:	d2bc      	bcs.n	8008254 <ai_platform_network_process+0x280>
 80082da:	2e00      	cmp	r6, #0
 80082dc:	d030      	beq.n	8008340 <ai_platform_network_process+0x36c>
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	e014      	b.n	800830e <ai_platform_network_process+0x33a>
 80082e4:	6882      	ldr	r2, [r0, #8]
 80082e6:	68c5      	ldr	r5, [r0, #12]
 80082e8:	6863      	ldr	r3, [r4, #4]
 80082ea:	1b52      	subs	r2, r2, r5
 80082ec:	4413      	add	r3, r2
 80082ee:	6083      	str	r3, [r0, #8]
 80082f0:	698b      	ldr	r3, [r1, #24]
 80082f2:	6862      	ldr	r2, [r4, #4]
 80082f4:	60da      	str	r2, [r3, #12]
 80082f6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80082fa:	f859 200a 	ldr.w	r2, [r9, sl]
 80082fe:	440b      	add	r3, r1
 8008300:	4293      	cmp	r3, r2
 8008302:	bf24      	itt	cs
 8008304:	68e3      	ldrcs	r3, [r4, #12]
 8008306:	1ad3      	subcs	r3, r2, r3
 8008308:	6063      	str	r3, [r4, #4]
 800830a:	f108 0801 	add.w	r8, r8, #1
 800830e:	8833      	ldrh	r3, [r6, #0]
 8008310:	4543      	cmp	r3, r8
 8008312:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8008316:	d913      	bls.n	8008340 <ai_platform_network_process+0x36c>
 8008318:	6873      	ldr	r3, [r6, #4]
 800831a:	b18b      	cbz	r3, 8008340 <ai_platform_network_process+0x36c>
 800831c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8008320:	b171      	cbz	r1, 8008340 <ai_platform_network_process+0x36c>
 8008322:	6988      	ldr	r0, [r1, #24]
 8008324:	68b2      	ldr	r2, [r6, #8]
 8008326:	6803      	ldr	r3, [r0, #0]
 8008328:	f8d2 9000 	ldr.w	r9, [r2]
 800832c:	009d      	lsls	r5, r3, #2
 800832e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8008332:	d5d7      	bpl.n	80082e4 <ai_platform_network_process+0x310>
 8008334:	6881      	ldr	r1, [r0, #8]
 8008336:	68a2      	ldr	r2, [r4, #8]
 8008338:	6860      	ldr	r0, [r4, #4]
 800833a:	f000 fdb7 	bl	8008eac <st_int8_copy>
 800833e:	e7da      	b.n	80082f6 <ai_platform_network_process+0x322>
 8008340:	4658      	mov	r0, fp
 8008342:	f000 f8e7 	bl	8008514 <ai_layers_forward_all>
 8008346:	2f00      	cmp	r7, #0
 8008348:	d03d      	beq.n	80083c6 <ai_platform_network_process+0x3f2>
 800834a:	2400      	movs	r4, #0
 800834c:	e016      	b.n	800837c <ai_platform_network_process+0x3a8>
 800834e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8008352:	f859 100a 	ldr.w	r1, [r9, sl]
 8008356:	4413      	add	r3, r2
 8008358:	428b      	cmp	r3, r1
 800835a:	bf24      	itt	cs
 800835c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8008360:	1acb      	subcs	r3, r1, r3
 8008362:	f8c8 3004 	str.w	r3, [r8, #4]
 8008366:	6981      	ldr	r1, [r0, #24]
 8008368:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800836c:	1b52      	subs	r2, r2, r5
 800836e:	4413      	add	r3, r2
 8008370:	608b      	str	r3, [r1, #8]
 8008372:	6983      	ldr	r3, [r0, #24]
 8008374:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008378:	60da      	str	r2, [r3, #12]
 800837a:	3401      	adds	r4, #1
 800837c:	883b      	ldrh	r3, [r7, #0]
 800837e:	42a3      	cmp	r3, r4
 8008380:	d921      	bls.n	80083c6 <ai_platform_network_process+0x3f2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	b1fb      	cbz	r3, 80083c6 <ai_platform_network_process+0x3f2>
 8008386:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800838a:	b1e0      	cbz	r0, 80083c6 <ai_platform_network_process+0x3f2>
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	6983      	ldr	r3, [r0, #24]
 8008390:	f8d2 9000 	ldr.w	r9, [r2]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	0092      	lsls	r2, r2, #2
 8008398:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800839c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80083a0:	d5d5      	bpl.n	800834e <ai_platform_network_process+0x37a>
 80083a2:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80083a6:	6898      	ldr	r0, [r3, #8]
 80083a8:	f000 fd80 	bl	8008eac <st_int8_copy>
 80083ac:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80083b0:	f859 200a 	ldr.w	r2, [r9, sl]
 80083b4:	440b      	add	r3, r1
 80083b6:	4293      	cmp	r3, r2
 80083b8:	bf24      	itt	cs
 80083ba:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80083be:	1ad3      	subcs	r3, r2, r3
 80083c0:	f8c8 3004 	str.w	r3, [r8, #4]
 80083c4:	e7d9      	b.n	800837a <ai_platform_network_process+0x3a6>
 80083c6:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80083ca:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80083ce:	3401      	adds	r4, #1
 80083d0:	b2a4      	uxth	r4, r4
 80083d2:	42a3      	cmp	r3, r4
 80083d4:	f8ab 401a 	strh.w	r4, [fp, #26]
 80083d8:	f63f af7f 	bhi.w	80082da <ai_platform_network_process+0x306>
 80083dc:	4620      	mov	r0, r4
 80083de:	b005      	add	sp, #20
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	2a01      	cmp	r2, #1
 80083e6:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80083e8:	d02a      	beq.n	8008440 <ai_platform_network_process+0x46c>
 80083ea:	f106 070c 	add.w	r7, r6, #12
 80083ee:	e76f      	b.n	80082d0 <ai_platform_network_process+0x2fc>
 80083f0:	9d03      	ldr	r5, [sp, #12]
 80083f2:	e728      	b.n	8008246 <ai_platform_network_process+0x272>
 80083f4:	9d03      	ldr	r5, [sp, #12]
 80083f6:	2219      	movs	r2, #25
 80083f8:	2112      	movs	r1, #18
 80083fa:	f105 000c 	add.w	r0, r5, #12
 80083fe:	f000 f831 	bl	8008464 <core_set_error>
 8008402:	2400      	movs	r4, #0
 8008404:	e726      	b.n	8008254 <ai_platform_network_process+0x280>
 8008406:	9d03      	ldr	r5, [sp, #12]
 8008408:	4604      	mov	r4, r0
 800840a:	2221      	movs	r2, #33	@ 0x21
 800840c:	2112      	movs	r1, #18
 800840e:	f105 000c 	add.w	r0, r5, #12
 8008412:	f000 f827 	bl	8008464 <core_set_error>
 8008416:	e71d      	b.n	8008254 <ai_platform_network_process+0x280>
 8008418:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800841c:	832b      	strh	r3, [r5, #24]
 800841e:	e752      	b.n	80082c6 <ai_platform_network_process+0x2f2>
 8008420:	2217      	movs	r2, #23
 8008422:	2113      	movs	r1, #19
 8008424:	f105 000c 	add.w	r0, r5, #12
 8008428:	f000 f81c 	bl	8008464 <core_set_error>
 800842c:	2400      	movs	r4, #0
 800842e:	e711      	b.n	8008254 <ai_platform_network_process+0x280>
 8008430:	2219      	movs	r2, #25
 8008432:	2113      	movs	r1, #19
 8008434:	f105 000c 	add.w	r0, r5, #12
 8008438:	f000 f814 	bl	8008464 <core_set_error>
 800843c:	2400      	movs	r4, #0
 800843e:	e709      	b.n	8008254 <ai_platform_network_process+0x280>
 8008440:	2700      	movs	r7, #0
 8008442:	e745      	b.n	80082d0 <ai_platform_network_process+0x2fc>
 8008444:	4604      	mov	r4, r0
 8008446:	2221      	movs	r2, #33	@ 0x21
 8008448:	2113      	movs	r1, #19
 800844a:	f105 000c 	add.w	r0, r5, #12
 800844e:	f000 f809 	bl	8008464 <core_set_error>
 8008452:	e6ff      	b.n	8008254 <ai_platform_network_process+0x280>

08008454 <core_init>:
 8008454:	2001      	movs	r0, #1
 8008456:	4770      	bx	lr

08008458 <core_get_error>:
 8008458:	4603      	mov	r3, r0
 800845a:	2200      	movs	r2, #0
 800845c:	6800      	ldr	r0, [r0, #0]
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop

08008464 <core_set_error>:
 8008464:	4603      	mov	r3, r0
 8008466:	7800      	ldrb	r0, [r0, #0]
 8008468:	b108      	cbz	r0, 800846e <core_set_error+0xa>
 800846a:	2000      	movs	r0, #0
 800846c:	4770      	bx	lr
 800846e:	7019      	strb	r1, [r3, #0]
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	f362 211f 	bfi	r1, r2, #8, #24
 8008476:	2001      	movs	r0, #1
 8008478:	6019      	str	r1, [r3, #0]
 800847a:	4770      	bx	lr

0800847c <ai_check_custom_types>:
 800847c:	b082      	sub	sp, #8
 800847e:	4b13      	ldr	r3, [pc, #76]	@ (80084cc <ai_check_custom_types+0x50>)
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	b118      	cbz	r0, 800848c <ai_check_custom_types+0x10>
 8008484:	7803      	ldrb	r3, [r0, #0]
 8008486:	2b03      	cmp	r3, #3
 8008488:	d002      	beq.n	8008490 <ai_check_custom_types+0x14>
 800848a:	2000      	movs	r0, #0
 800848c:	b002      	add	sp, #8
 800848e:	4770      	bx	lr
 8008490:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008494:	4293      	cmp	r3, r2
 8008496:	d004      	beq.n	80084a2 <ai_check_custom_types+0x26>
 8008498:	2001      	movs	r0, #1
 800849a:	f080 0001 	eor.w	r0, r0, #1
 800849e:	b002      	add	sp, #8
 80084a0:	4770      	bx	lr
 80084a2:	7842      	ldrb	r2, [r0, #1]
 80084a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	f100 0001 	add.w	r0, r0, #1
 80084ae:	d1f3      	bne.n	8008498 <ai_check_custom_types+0x1c>
 80084b0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80084b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d1ed      	bne.n	8008498 <ai_check_custom_types+0x1c>
 80084bc:	7842      	ldrb	r2, [r0, #1]
 80084be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d1e8      	bne.n	8008498 <ai_check_custom_types+0x1c>
 80084c6:	2000      	movs	r0, #0
 80084c8:	e7e7      	b.n	800849a <ai_check_custom_types+0x1e>
 80084ca:	bf00      	nop
 80084cc:	84048403 	.word	0x84048403

080084d0 <ai_layers_init_all>:
 80084d0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80084d2:	2100      	movs	r1, #0
 80084d4:	b143      	cbz	r3, 80084e8 <ai_layers_init_all+0x18>
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	60d8      	str	r0, [r3, #12]
 80084da:	429a      	cmp	r2, r3
 80084dc:	f101 0101 	add.w	r1, r1, #1
 80084e0:	d002      	beq.n	80084e8 <ai_layers_init_all+0x18>
 80084e2:	b10a      	cbz	r2, 80084e8 <ai_layers_init_all+0x18>
 80084e4:	4613      	mov	r3, r2
 80084e6:	e7f5      	b.n	80084d4 <ai_layers_init_all+0x4>
 80084e8:	4608      	mov	r0, r1
 80084ea:	4770      	bx	lr

080084ec <ai_layers_post_init_all>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80084f0:	2500      	movs	r5, #0
 80084f2:	b16c      	cbz	r4, 8008510 <ai_layers_post_init_all+0x24>
 80084f4:	6863      	ldr	r3, [r4, #4]
 80084f6:	07db      	lsls	r3, r3, #31
 80084f8:	d504      	bpl.n	8008504 <ai_layers_post_init_all+0x18>
 80084fa:	6a23      	ldr	r3, [r4, #32]
 80084fc:	4620      	mov	r0, r4
 80084fe:	b10b      	cbz	r3, 8008504 <ai_layers_post_init_all+0x18>
 8008500:	4798      	blx	r3
 8008502:	3501      	adds	r5, #1
 8008504:	6923      	ldr	r3, [r4, #16]
 8008506:	42a3      	cmp	r3, r4
 8008508:	d002      	beq.n	8008510 <ai_layers_post_init_all+0x24>
 800850a:	b10b      	cbz	r3, 8008510 <ai_layers_post_init_all+0x24>
 800850c:	461c      	mov	r4, r3
 800850e:	e7f0      	b.n	80084f2 <ai_layers_post_init_all+0x6>
 8008510:	4628      	mov	r0, r5
 8008512:	bd38      	pop	{r3, r4, r5, pc}

08008514 <ai_layers_forward_all>:
 8008514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008518:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800851c:	4604      	mov	r4, r0
 800851e:	f1b8 0f00 	cmp.w	r8, #0
 8008522:	d02b      	beq.n	800857c <ai_layers_forward_all+0x68>
 8008524:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8008526:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8008528:	b321      	cbz	r1, 8008574 <ai_layers_forward_all+0x60>
 800852a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800852c:	2001      	movs	r0, #1
 800852e:	47c0      	blx	r8
 8008530:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8008532:	b1fe      	cbz	r6, 8008574 <ai_layers_forward_all+0x60>
 8008534:	2700      	movs	r7, #0
 8008536:	4631      	mov	r1, r6
 8008538:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800853a:	2002      	movs	r0, #2
 800853c:	47c0      	blx	r8
 800853e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8008540:	4628      	mov	r0, r5
 8008542:	696b      	ldr	r3, [r5, #20]
 8008544:	4798      	blx	r3
 8008546:	692e      	ldr	r6, [r5, #16]
 8008548:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800854a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800854c:	42b5      	cmp	r5, r6
 800854e:	f04f 0003 	mov.w	r0, #3
 8008552:	d007      	beq.n	8008564 <ai_layers_forward_all+0x50>
 8008554:	47c0      	blx	r8
 8008556:	3701      	adds	r7, #1
 8008558:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800855a:	2e00      	cmp	r6, #0
 800855c:	d1eb      	bne.n	8008536 <ai_layers_forward_all+0x22>
 800855e:	4638      	mov	r0, r7
 8008560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008564:	2003      	movs	r0, #3
 8008566:	47c0      	blx	r8
 8008568:	2300      	movs	r3, #0
 800856a:	3701      	adds	r7, #1
 800856c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800856e:	4638      	mov	r0, r7
 8008570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008574:	2700      	movs	r7, #0
 8008576:	4638      	mov	r0, r7
 8008578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800857e:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8008580:	2d00      	cmp	r5, #0
 8008582:	d0f7      	beq.n	8008574 <ai_layers_forward_all+0x60>
 8008584:	4647      	mov	r7, r8
 8008586:	696b      	ldr	r3, [r5, #20]
 8008588:	4628      	mov	r0, r5
 800858a:	4798      	blx	r3
 800858c:	462b      	mov	r3, r5
 800858e:	692d      	ldr	r5, [r5, #16]
 8008590:	429d      	cmp	r5, r3
 8008592:	d004      	beq.n	800859e <ai_layers_forward_all+0x8a>
 8008594:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8008596:	3701      	adds	r7, #1
 8008598:	2d00      	cmp	r5, #0
 800859a:	d1f4      	bne.n	8008586 <ai_layers_forward_all+0x72>
 800859c:	e7df      	b.n	800855e <ai_layers_forward_all+0x4a>
 800859e:	2300      	movs	r3, #0
 80085a0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80085a2:	3701      	adds	r7, #1
 80085a4:	e7db      	b.n	800855e <ai_layers_forward_all+0x4a>
 80085a6:	bf00      	nop

080085a8 <forward_dense_integer_SSSA_ch>:
 80085a8:	6983      	ldr	r3, [r0, #24]
 80085aa:	8818      	ldrh	r0, [r3, #0]
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f000 80af 	beq.w	8008710 <forward_dense_integer_SSSA_ch+0x168>
 80085b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b6:	685c      	ldr	r4, [r3, #4]
 80085b8:	6863      	ldr	r3, [r4, #4]
 80085ba:	b08f      	sub	sp, #60	@ 0x3c
 80085bc:	b103      	cbz	r3, 80085c0 <forward_dense_integer_SSSA_ch+0x18>
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2801      	cmp	r0, #1
 80085c2:	f000 813f 	beq.w	8008844 <forward_dense_integer_SSSA_ch+0x29c>
 80085c6:	6922      	ldr	r2, [r4, #16]
 80085c8:	b102      	cbz	r2, 80085cc <forward_dense_integer_SSSA_ch+0x24>
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	2802      	cmp	r0, #2
 80085ce:	f000 813c 	beq.w	800884a <forward_dense_integer_SSSA_ch+0x2a2>
 80085d2:	69e5      	ldr	r5, [r4, #28]
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	f000 80eb 	beq.w	80087b0 <forward_dense_integer_SSSA_ch+0x208>
 80085da:	8b26      	ldrh	r6, [r4, #24]
 80085dc:	6829      	ldr	r1, [r5, #0]
 80085de:	2e01      	cmp	r6, #1
 80085e0:	f240 8110 	bls.w	8008804 <forward_dense_integer_SSSA_ch+0x25c>
 80085e4:	686d      	ldr	r5, [r5, #4]
 80085e6:	2803      	cmp	r0, #3
 80085e8:	f000 8132 	beq.w	8008850 <forward_dense_integer_SSSA_ch+0x2a8>
 80085ec:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 80085f0:	69a8      	ldr	r0, [r5, #24]
 80085f2:	f1b8 0f00 	cmp.w	r8, #0
 80085f6:	f000 80f2 	beq.w	80087de <forward_dense_integer_SSSA_ch+0x236>
 80085fa:	6880      	ldr	r0, [r0, #8]
 80085fc:	68dc      	ldr	r4, [r3, #12]
 80085fe:	900d      	str	r0, [sp, #52]	@ 0x34
 8008600:	68d0      	ldr	r0, [r2, #12]
 8008602:	6866      	ldr	r6, [r4, #4]
 8008604:	f8d8 8000 	ldr.w	r8, [r8]
 8008608:	6995      	ldr	r5, [r2, #24]
 800860a:	9609      	str	r6, [sp, #36]	@ 0x24
 800860c:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8008610:	68c0      	ldr	r0, [r0, #12]
 8008612:	fb00 f004 	mul.w	r0, r0, r4
 8008616:	9008      	str	r0, [sp, #32]
 8008618:	699c      	ldr	r4, [r3, #24]
 800861a:	fa1f fa86 	uxth.w	sl, r6
 800861e:	fa1f fb89 	uxth.w	fp, r9
 8008622:	f1b8 0f00 	cmp.w	r8, #0
 8008626:	d003      	beq.n	8008630 <forward_dense_integer_SSSA_ch+0x88>
 8008628:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800862c:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f8d2 c000 	ldr.w	ip, [r2]
 8008636:	6808      	ldr	r0, [r1, #0]
 8008638:	698a      	ldr	r2, [r1, #24]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d06a      	beq.n	8008714 <forward_dense_integer_SSSA_ch+0x16c>
 800863e:	6859      	ldr	r1, [r3, #4]
 8008640:	2900      	cmp	r1, #0
 8008642:	f000 8098 	beq.w	8008776 <forward_dense_integer_SSSA_ch+0x1ce>
 8008646:	885e      	ldrh	r6, [r3, #2]
 8008648:	2e00      	cmp	r6, #0
 800864a:	f000 8084 	beq.w	8008756 <forward_dense_integer_SSSA_ch+0x1ae>
 800864e:	680f      	ldr	r7, [r1, #0]
 8008650:	ed97 0a00 	vldr	s0, [r7]
 8008654:	f1bc 0f00 	cmp.w	ip, #0
 8008658:	f000 8083 	beq.w	8008762 <forward_dense_integer_SSSA_ch+0x1ba>
 800865c:	f8dc e004 	ldr.w	lr, [ip, #4]
 8008660:	f1be 0f00 	cmp.w	lr, #0
 8008664:	f000 8092 	beq.w	800878c <forward_dense_integer_SSSA_ch+0x1e4>
 8008668:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 800866c:	2e00      	cmp	r6, #0
 800866e:	d05f      	beq.n	8008730 <forward_dense_integer_SSSA_ch+0x188>
 8008670:	6897      	ldr	r7, [r2, #8]
 8008672:	f8de 2000 	ldr.w	r2, [lr]
 8008676:	68ad      	ldr	r5, [r5, #8]
 8008678:	68a4      	ldr	r4, [r4, #8]
 800867a:	edd2 0a00 	vldr	s1, [r2]
 800867e:	2900      	cmp	r1, #0
 8008680:	d060      	beq.n	8008744 <forward_dense_integer_SSSA_ch+0x19c>
 8008682:	885b      	ldrh	r3, [r3, #2]
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 808a 	beq.w	800879e <forward_dense_integer_SSSA_ch+0x1f6>
 800868a:	684b      	ldr	r3, [r1, #4]
 800868c:	f993 3000 	ldrsb.w	r3, [r3]
 8008690:	930c      	str	r3, [sp, #48]	@ 0x30
 8008692:	f1bc 0f00 	cmp.w	ip, #0
 8008696:	f000 80d2 	beq.w	800883e <forward_dense_integer_SSSA_ch+0x296>
 800869a:	f1be 0f00 	cmp.w	lr, #0
 800869e:	f000 8084 	beq.w	80087aa <forward_dense_integer_SSSA_ch+0x202>
 80086a2:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	d14f      	bne.n	800874a <forward_dense_integer_SSSA_ch+0x1a2>
 80086aa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80086ac:	b110      	cbz	r0, 80086b4 <forward_dense_integer_SSSA_ch+0x10c>
 80086ae:	6840      	ldr	r0, [r0, #4]
 80086b0:	b100      	cbz	r0, 80086b4 <forward_dense_integer_SSSA_ch+0x10c>
 80086b2:	6800      	ldr	r0, [r0, #0]
 80086b4:	fa1f f989 	uxth.w	r9, r9
 80086b8:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
 80086bc:	4642      	mov	r2, r8
 80086be:	4659      	mov	r1, fp
 80086c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c2:	f000 f92b 	bl	800891c <align_factor_ch>
 80086c6:	9b08      	ldr	r3, [sp, #32]
 80086c8:	b1fb      	cbz	r3, 800870a <forward_dense_integer_SSSA_ch+0x162>
 80086ca:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80086ce:	4652      	mov	r2, sl
 80086d0:	2600      	movs	r6, #0
 80086d2:	468a      	mov	sl, r1
 80086d4:	4639      	mov	r1, r7
 80086d6:	4647      	mov	r7, r8
 80086d8:	4698      	mov	r8, r3
 80086da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086dc:	9304      	str	r3, [sp, #16]
 80086de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086e0:	9303      	str	r3, [sp, #12]
 80086e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086e4:	9302      	str	r3, [sp, #8]
 80086e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086e8:	e9cd 5705 	strd	r5, r7, [sp, #20]
 80086ec:	e9cd 7300 	strd	r7, r3, [sp]
 80086f0:	4620      	mov	r0, r4
 80086f2:	3601      	adds	r6, #1
 80086f4:	465b      	mov	r3, fp
 80086f6:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80086fa:	f000 f93f 	bl	800897c <st_sssa8_ch_fully_connected>
 80086fe:	4546      	cmp	r6, r8
 8008700:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8008704:	444d      	add	r5, r9
 8008706:	4454      	add	r4, sl
 8008708:	d1e7      	bne.n	80086da <forward_dense_integer_SSSA_ch+0x132>
 800870a:	b00f      	add	sp, #60	@ 0x3c
 800870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008710:	6843      	ldr	r3, [r0, #4]
 8008712:	deff      	udf	#255	@ 0xff
 8008714:	f1bc 0f00 	cmp.w	ip, #0
 8008718:	d052      	beq.n	80087c0 <forward_dense_integer_SSSA_ch+0x218>
 800871a:	f8dc e004 	ldr.w	lr, [ip, #4]
 800871e:	f1be 0f00 	cmp.w	lr, #0
 8008722:	d058      	beq.n	80087d6 <forward_dense_integer_SSSA_ch+0x22e>
 8008724:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8008728:	2e00      	cmp	r6, #0
 800872a:	d16d      	bne.n	8008808 <forward_dense_integer_SSSA_ch+0x260>
 800872c:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 8008730:	68ad      	ldr	r5, [r5, #8]
 8008732:	68a4      	ldr	r4, [r4, #8]
 8008734:	6897      	ldr	r7, [r2, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d03d      	beq.n	80087b6 <forward_dense_integer_SSSA_ch+0x20e>
 800873a:	6859      	ldr	r1, [r3, #4]
 800873c:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 8008740:	2900      	cmp	r1, #0
 8008742:	d19e      	bne.n	8008682 <forward_dense_integer_SSSA_ch+0xda>
 8008744:	910c      	str	r1, [sp, #48]	@ 0x30
 8008746:	2e00      	cmp	r6, #0
 8008748:	d0af      	beq.n	80086aa <forward_dense_integer_SSSA_ch+0x102>
 800874a:	f8de 3004 	ldr.w	r3, [lr, #4]
 800874e:	f993 3000 	ldrsb.w	r3, [r3]
 8008752:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008754:	e7aa      	b.n	80086ac <forward_dense_integer_SSSA_ch+0x104>
 8008756:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 800875a:	f1bc 0f00 	cmp.w	ip, #0
 800875e:	f47f af7d 	bne.w	800865c <forward_dense_integer_SSSA_ch+0xb4>
 8008762:	68ad      	ldr	r5, [r5, #8]
 8008764:	68a4      	ldr	r4, [r4, #8]
 8008766:	6897      	ldr	r7, [r2, #8]
 8008768:	2e00      	cmp	r6, #0
 800876a:	d158      	bne.n	800881e <forward_dense_integer_SSSA_ch+0x276>
 800876c:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 8008770:	960c      	str	r6, [sp, #48]	@ 0x30
 8008772:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008774:	e79a      	b.n	80086ac <forward_dense_integer_SSSA_ch+0x104>
 8008776:	f1bc 0f00 	cmp.w	ip, #0
 800877a:	d021      	beq.n	80087c0 <forward_dense_integer_SSSA_ch+0x218>
 800877c:	f8dc e004 	ldr.w	lr, [ip, #4]
 8008780:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 8008784:	f1be 0f00 	cmp.w	lr, #0
 8008788:	f47f af6e 	bne.w	8008668 <forward_dense_integer_SSSA_ch+0xc0>
 800878c:	68ad      	ldr	r5, [r5, #8]
 800878e:	68a4      	ldr	r4, [r4, #8]
 8008790:	6897      	ldr	r7, [r2, #8]
 8008792:	b179      	cbz	r1, 80087b4 <forward_dense_integer_SSSA_ch+0x20c>
 8008794:	885b      	ldrh	r3, [r3, #2]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d14a      	bne.n	8008830 <forward_dense_integer_SSSA_ch+0x288>
 800879a:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 800879e:	2300      	movs	r3, #0
 80087a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80087a2:	f1be 0f00 	cmp.w	lr, #0
 80087a6:	f47f af7c 	bne.w	80086a2 <forward_dense_integer_SSSA_ch+0xfa>
 80087aa:	2300      	movs	r3, #0
 80087ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ae:	e77d      	b.n	80086ac <forward_dense_integer_SSSA_ch+0x104>
 80087b0:	4629      	mov	r1, r5
 80087b2:	e718      	b.n	80085e6 <forward_dense_integer_SSSA_ch+0x3e>
 80087b4:	460b      	mov	r3, r1
 80087b6:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 80087ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80087bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087be:	e775      	b.n	80086ac <forward_dense_integer_SSSA_ch+0x104>
 80087c0:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 80087c4:	4663      	mov	r3, ip
 80087c6:	68ad      	ldr	r5, [r5, #8]
 80087c8:	68a4      	ldr	r4, [r4, #8]
 80087ca:	6897      	ldr	r7, [r2, #8]
 80087cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80087ce:	eef0 0a40 	vmov.f32	s1, s0
 80087d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087d4:	e76a      	b.n	80086ac <forward_dense_integer_SSSA_ch+0x104>
 80087d6:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 80087da:	4673      	mov	r3, lr
 80087dc:	e7f3      	b.n	80087c6 <forward_dense_integer_SSSA_ch+0x21e>
 80087de:	6880      	ldr	r0, [r0, #8]
 80087e0:	68dc      	ldr	r4, [r3, #12]
 80087e2:	900d      	str	r0, [sp, #52]	@ 0x34
 80087e4:	68d0      	ldr	r0, [r2, #12]
 80087e6:	6866      	ldr	r6, [r4, #4]
 80087e8:	6995      	ldr	r5, [r2, #24]
 80087ea:	9609      	str	r6, [sp, #36]	@ 0x24
 80087ec:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 80087f0:	68c0      	ldr	r0, [r0, #12]
 80087f2:	fb00 f004 	mul.w	r0, r0, r4
 80087f6:	9008      	str	r0, [sp, #32]
 80087f8:	699c      	ldr	r4, [r3, #24]
 80087fa:	fa1f fa86 	uxth.w	sl, r6
 80087fe:	fa1f fb89 	uxth.w	fp, r9
 8008802:	e715      	b.n	8008630 <forward_dense_integer_SSSA_ch+0x88>
 8008804:	2500      	movs	r5, #0
 8008806:	e6ee      	b.n	80085e6 <forward_dense_integer_SSSA_ch+0x3e>
 8008808:	930c      	str	r3, [sp, #48]	@ 0x30
 800880a:	f8de 3000 	ldr.w	r3, [lr]
 800880e:	68ad      	ldr	r5, [r5, #8]
 8008810:	68a4      	ldr	r4, [r4, #8]
 8008812:	6897      	ldr	r7, [r2, #8]
 8008814:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 8008818:	edd3 0a00 	vldr	s1, [r3]
 800881c:	e795      	b.n	800874a <forward_dense_integer_SSSA_ch+0x1a2>
 800881e:	684b      	ldr	r3, [r1, #4]
 8008820:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 8008824:	f993 3000 	ldrsb.w	r3, [r3]
 8008828:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 800882c:	930c      	str	r3, [sp, #48]	@ 0x30
 800882e:	e73d      	b.n	80086ac <forward_dense_integer_SSSA_ch+0x104>
 8008830:	684b      	ldr	r3, [r1, #4]
 8008832:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8008858 <forward_dense_integer_SSSA_ch+0x2b0>
 8008836:	f993 3000 	ldrsb.w	r3, [r3]
 800883a:	930c      	str	r3, [sp, #48]	@ 0x30
 800883c:	e7b5      	b.n	80087aa <forward_dense_integer_SSSA_ch+0x202>
 800883e:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8008842:	e733      	b.n	80086ac <forward_dense_integer_SSSA_ch+0x104>
 8008844:	2300      	movs	r3, #0
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	deff      	udf	#255	@ 0xff
 800884a:	2300      	movs	r3, #0
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	deff      	udf	#255	@ 0xff
 8008850:	2300      	movs	r3, #0
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	deff      	udf	#255	@ 0xff
 8008856:	bf00      	nop
 8008858:	00000000 	.word	0x00000000

0800885c <forward_sm_integer>:
 800885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008860:	6983      	ldr	r3, [r0, #24]
 8008862:	881f      	ldrh	r7, [r3, #0]
 8008864:	b086      	sub	sp, #24
 8008866:	2f00      	cmp	r7, #0
 8008868:	d042      	beq.n	80088f0 <forward_sm_integer+0x94>
 800886a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800886e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8008872:	b106      	cbz	r6, 8008876 <forward_sm_integer+0x1a>
 8008874:	6836      	ldr	r6, [r6, #0]
 8008876:	2f01      	cmp	r7, #1
 8008878:	d043      	beq.n	8008902 <forward_sm_integer+0xa6>
 800887a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d044      	beq.n	800890c <forward_sm_integer+0xb0>
 8008882:	f8d3 e000 	ldr.w	lr, [r3]
 8008886:	68b1      	ldr	r1, [r6, #8]
 8008888:	f8de 300c 	ldr.w	r3, [lr, #12]
 800888c:	68f5      	ldr	r5, [r6, #12]
 800888e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8008892:	686b      	ldr	r3, [r5, #4]
 8008894:	0a09      	lsrs	r1, r1, #8
 8008896:	d032      	beq.n	80088fe <forward_sm_integer+0xa2>
 8008898:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800889c:	2201      	movs	r2, #1
 800889e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088a2:	428d      	cmp	r5, r1
 80088a4:	fb04 f202 	mul.w	r2, r4, r2
 80088a8:	d1f9      	bne.n	800889e <forward_sm_integer+0x42>
 80088aa:	69c1      	ldr	r1, [r0, #28]
 80088ac:	2f03      	cmp	r7, #3
 80088ae:	688c      	ldr	r4, [r1, #8]
 80088b0:	d927      	bls.n	8008902 <forward_sm_integer+0xa6>
 80088b2:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80088b6:	b339      	cbz	r1, 8008908 <forward_sm_integer+0xac>
 80088b8:	6809      	ldr	r1, [r1, #0]
 80088ba:	69b0      	ldr	r0, [r6, #24]
 80088bc:	6989      	ldr	r1, [r1, #24]
 80088be:	4e14      	ldr	r6, [pc, #80]	@ (8008910 <forward_sm_integer+0xb4>)
 80088c0:	688d      	ldr	r5, [r1, #8]
 80088c2:	6801      	ldr	r1, [r0, #0]
 80088c4:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 80088c8:	42b1      	cmp	r1, r6
 80088ca:	f8de 6018 	ldr.w	r6, [lr, #24]
 80088ce:	6881      	ldr	r1, [r0, #8]
 80088d0:	68b0      	ldr	r0, [r6, #8]
 80088d2:	9505      	str	r5, [sp, #20]
 80088d4:	68a5      	ldr	r5, [r4, #8]
 80088d6:	9504      	str	r5, [sp, #16]
 80088d8:	6865      	ldr	r5, [r4, #4]
 80088da:	9503      	str	r5, [sp, #12]
 80088dc:	6824      	ldr	r4, [r4, #0]
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	e9cd c401 	strd	ip, r4, [sp, #4]
 80088e4:	d006      	beq.n	80088f4 <forward_sm_integer+0x98>
 80088e6:	f000 f817 	bl	8008918 <forward_lite_nl_softmax_iu8ou8>
 80088ea:	b006      	add	sp, #24
 80088ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	deff      	udf	#255	@ 0xff
 80088f4:	f000 f80e 	bl	8008914 <forward_lite_nl_softmax_is8os8>
 80088f8:	b006      	add	sp, #24
 80088fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fe:	2201      	movs	r2, #1
 8008900:	e7d3      	b.n	80088aa <forward_sm_integer+0x4e>
 8008902:	2300      	movs	r3, #0
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	deff      	udf	#255	@ 0xff
 8008908:	698b      	ldr	r3, [r1, #24]
 800890a:	deff      	udf	#255	@ 0xff
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	deff      	udf	#255	@ 0xff
 8008910:	00840440 	.word	0x00840440

08008914 <forward_lite_nl_softmax_is8os8>:
 8008914:	f000 bc36 	b.w	8009184 <_lite_kernel_nl_softmax_is8os8>

08008918 <forward_lite_nl_softmax_iu8ou8>:
 8008918:	f001 b85c 	b.w	80099d4 <_lite_kernel_nl_softmax_iu8ou8>

0800891c <align_factor_ch>:
 800891c:	b361      	cbz	r1, 8008978 <align_factor_ch+0x5c>
 800891e:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8008922:	b570      	push	{r4, r5, r6, lr}
 8008924:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008928:	1e9d      	subs	r5, r3, #2
 800892a:	1f14      	subs	r4, r2, #4
 800892c:	2600      	movs	r6, #0
 800892e:	ecf0 7a01 	vldmia	r0!, {s15}
 8008932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008936:	ee17 ea90 	vmov	lr, s15
 800893a:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 800893e:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 8008942:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 8008946:	f1be 0f00 	cmp.w	lr, #0
 800894a:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 800894e:	bfb8      	it	lt
 8008950:	f1cc 0c00 	rsblt	ip, ip, #0
 8008954:	2a1f      	cmp	r2, #31
 8008956:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800895a:	dc06      	bgt.n	800896a <align_factor_ch+0x4e>
 800895c:	4281      	cmp	r1, r0
 800895e:	f825 2f02 	strh.w	r2, [r5, #2]!
 8008962:	f844 3f04 	str.w	r3, [r4, #4]!
 8008966:	d1e2      	bne.n	800892e <align_factor_ch+0x12>
 8008968:	bd70      	pop	{r4, r5, r6, pc}
 800896a:	4281      	cmp	r1, r0
 800896c:	f825 6f02 	strh.w	r6, [r5, #2]!
 8008970:	f844 6f04 	str.w	r6, [r4, #4]!
 8008974:	d1db      	bne.n	800892e <align_factor_ch+0x12>
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <st_sssa8_ch_fully_connected>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	b097      	sub	sp, #92	@ 0x5c
 8008982:	4693      	mov	fp, r2
 8008984:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008986:	9314      	str	r3, [sp, #80]	@ 0x50
 8008988:	468a      	mov	sl, r1
 800898a:	4619      	mov	r1, r3
 800898c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008990:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008994:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8008998:	930d      	str	r3, [sp, #52]	@ 0x34
 800899a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800899c:	f99d e088 	ldrsb.w	lr, [sp, #136]	@ 0x88
 80089a0:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 80089a4:	9512      	str	r5, [sp, #72]	@ 0x48
 80089a6:	2900      	cmp	r1, #0
 80089a8:	f000 827b 	beq.w	8008ea2 <st_sssa8_ch_fully_connected+0x526>
 80089ac:	463c      	mov	r4, r7
 80089ae:	3504      	adds	r5, #4
 80089b0:	ea4f 0841 	mov.w	r8, r1, lsl #1
 80089b4:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 80089b8:	f04f 0c01 	mov.w	ip, #1
 80089bc:	f934 2b02 	ldrsh.w	r2, [r4], #2
 80089c0:	1e51      	subs	r1, r2, #1
 80089c2:	b289      	uxth	r1, r1
 80089c4:	fa0c f602 	lsl.w	r6, ip, r2
 80089c8:	2914      	cmp	r1, #20
 80089ca:	fa03 f202 	lsl.w	r2, r3, r2
 80089ce:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 80089d2:	f200 81e5 	bhi.w	8008da0 <st_sssa8_ch_fully_connected+0x424>
 80089d6:	42bc      	cmp	r4, r7
 80089d8:	f845 2c04 	str.w	r2, [r5, #-4]
 80089dc:	f105 0504 	add.w	r5, r5, #4
 80089e0:	d1ec      	bne.n	80089bc <st_sssa8_ch_fully_connected+0x40>
 80089e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80089e4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80089e6:	f8cd e000 	str.w	lr, [sp]
 80089ea:	0852      	lsrs	r2, r2, #1
 80089ec:	fa1f f38e 	uxth.w	r3, lr
 80089f0:	4614      	mov	r4, r2
 80089f2:	eba7 0508 	sub.w	r5, r7, r8
 80089f6:	9215      	str	r2, [sp, #84]	@ 0x54
 80089f8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80089fc:	465a      	mov	r2, fp
 80089fe:	4631      	mov	r1, r6
 8008a00:	9513      	str	r5, [sp, #76]	@ 0x4c
 8008a02:	f000 fad9 	bl	8008fb8 <st_int8_reordered_no_shift_zero>
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	f000 8178 	beq.w	8008cfc <st_sssa8_ch_fully_connected+0x380>
 8008a0c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8008a0e:	1e62      	subs	r2, r4, #1
 8008a10:	b292      	uxth	r2, r2
 8008a12:	f100 0110 	add.w	r1, r0, #16
 8008a16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008a1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a1c:	f1ab 0203 	sub.w	r2, fp, #3
 8008a20:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008a22:	4602      	mov	r2, r0
 8008a24:	3208      	adds	r2, #8
 8008a26:	9208      	str	r2, [sp, #32]
 8008a28:	1d2a      	adds	r2, r5, #4
 8008a2a:	9207      	str	r2, [sp, #28]
 8008a2c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8008a2e:	3202      	adds	r2, #2
 8008a30:	9204      	str	r2, [sp, #16]
 8008a32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008a34:	3204      	adds	r2, #4
 8008a36:	f1ab 0310 	sub.w	r3, fp, #16
 8008a3a:	9205      	str	r2, [sp, #20]
 8008a3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008a3e:	091b      	lsrs	r3, r3, #4
 8008a40:	3301      	adds	r3, #1
 8008a42:	3204      	adds	r2, #4
 8008a44:	9206      	str	r2, [sp, #24]
 8008a46:	011a      	lsls	r2, r3, #4
 8008a48:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8008a4c:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a4e:	f1ab 0304 	sub.w	r3, fp, #4
 8008a52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a54:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a56:	46d9      	mov	r9, fp
 8008a58:	9a08      	ldr	r2, [sp, #32]
 8008a5a:	f1b9 0f0f 	cmp.w	r9, #15
 8008a5e:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 8008a62:	eb0a 0b09 	add.w	fp, sl, r9
 8008a66:	f340 81ef 	ble.w	8008e48 <st_sssa8_ch_fully_connected+0x4cc>
 8008a6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a6c:	eb0a 0502 	add.w	r5, sl, r2
 8008a70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a72:	465c      	mov	r4, fp
 8008a74:	f8da 7000 	ldr.w	r7, [sl]
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	fa2f fe87 	sxtb16	lr, r7
 8008a7e:	ea4f 2637 	mov.w	r6, r7, ror #8
 8008a82:	fa2f fc80 	sxtb16	ip, r0
 8008a86:	ea4f 2730 	mov.w	r7, r0, ror #8
 8008a8a:	fa2f f686 	sxtb16	r6, r6
 8008a8e:	6810      	ldr	r0, [r2, #0]
 8008a90:	fa2f f787 	sxtb16	r7, r7
 8008a94:	fb20 330e 	smlad	r3, r0, lr, r3
 8008a98:	fb20 100c 	smlad	r0, r0, ip, r1
 8008a9c:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8008aa0:	fb2e 3606 	smlad	r6, lr, r6, r3
 8008aa4:	fb2e 0e07 	smlad	lr, lr, r7, r0
 8008aa8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008aac:	6861      	ldr	r1, [r4, #4]
 8008aae:	6890      	ldr	r0, [r2, #8]
 8008ab0:	ea4f 2733 	mov.w	r7, r3, ror #8
 8008ab4:	ea4f 2c31 	mov.w	ip, r1, ror #8
 8008ab8:	fa2f f383 	sxtb16	r3, r3
 8008abc:	fa2f f787 	sxtb16	r7, r7
 8008ac0:	fa2f f181 	sxtb16	r1, r1
 8008ac4:	fa2f fc8c 	sxtb16	ip, ip
 8008ac8:	fb20 6303 	smlad	r3, r0, r3, r6
 8008acc:	fb20 e001 	smlad	r0, r0, r1, lr
 8008ad0:	68d1      	ldr	r1, [r2, #12]
 8008ad2:	fb21 3707 	smlad	r7, r1, r7, r3
 8008ad6:	fb21 000c 	smlad	r0, r1, ip, r0
 8008ada:	68a3      	ldr	r3, [r4, #8]
 8008adc:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008ae0:	fa2f fe83 	sxtb16	lr, r3
 8008ae4:	ea4f 2631 	mov.w	r6, r1, ror #8
 8008ae8:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8008aec:	fa2f f181 	sxtb16	r1, r1
 8008af0:	6913      	ldr	r3, [r2, #16]
 8008af2:	fa2f f686 	sxtb16	r6, r6
 8008af6:	fa2f fc8c 	sxtb16	ip, ip
 8008afa:	fb23 7101 	smlad	r1, r3, r1, r7
 8008afe:	fb23 030e 	smlad	r3, r3, lr, r0
 8008b02:	6950      	ldr	r0, [r2, #20]
 8008b04:	fb20 1606 	smlad	r6, r0, r6, r1
 8008b08:	fb20 310c 	smlad	r1, r0, ip, r3
 8008b0c:	68e0      	ldr	r0, [r4, #12]
 8008b0e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008b12:	fa2f fe80 	sxtb16	lr, r0
 8008b16:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8008b1a:	ea4f 2730 	mov.w	r7, r0, ror #8
 8008b1e:	f10a 0a10 	add.w	sl, sl, #16
 8008b22:	6990      	ldr	r0, [r2, #24]
 8008b24:	fa2f f383 	sxtb16	r3, r3
 8008b28:	3410      	adds	r4, #16
 8008b2a:	fa2f fc8c 	sxtb16	ip, ip
 8008b2e:	fa2f f787 	sxtb16	r7, r7
 8008b32:	fb20 6303 	smlad	r3, r0, r3, r6
 8008b36:	fb20 100e 	smlad	r0, r0, lr, r1
 8008b3a:	69d1      	ldr	r1, [r2, #28]
 8008b3c:	3220      	adds	r2, #32
 8008b3e:	fb21 330c 	smlad	r3, r1, ip, r3
 8008b42:	fb21 0107 	smlad	r1, r1, r7, r0
 8008b46:	4555      	cmp	r5, sl
 8008b48:	d194      	bne.n	8008a74 <st_sssa8_ch_fully_connected+0xf8>
 8008b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b4c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008b4e:	9003      	str	r0, [sp, #12]
 8008b50:	4493      	add	fp, r2
 8008b52:	4690      	mov	r8, r2
 8008b54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008b56:	4542      	cmp	r2, r8
 8008b58:	f340 8174 	ble.w	8008e44 <st_sssa8_ch_fully_connected+0x4c8>
 8008b5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b5e:	9d03      	ldr	r5, [sp, #12]
 8008b60:	eba2 0208 	sub.w	r2, r2, r8
 8008b64:	0892      	lsrs	r2, r2, #2
 8008b66:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b68:	3201      	adds	r2, #1
 8008b6a:	0090      	lsls	r0, r2, #2
 8008b6c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008b6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b70:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 8008b74:	46dc      	mov	ip, fp
 8008b76:	f85a 7b04 	ldr.w	r7, [sl], #4
 8008b7a:	f85c 0b04 	ldr.w	r0, [ip], #4
 8008b7e:	682a      	ldr	r2, [r5, #0]
 8008b80:	ea4f 2637 	mov.w	r6, r7, ror #8
 8008b84:	ea4f 2430 	mov.w	r4, r0, ror #8
 8008b88:	fa2f f787 	sxtb16	r7, r7
 8008b8c:	fa2f f686 	sxtb16	r6, r6
 8008b90:	fa2f f080 	sxtb16	r0, r0
 8008b94:	fa2f f484 	sxtb16	r4, r4
 8008b98:	fb22 3307 	smlad	r3, r2, r7, r3
 8008b9c:	fb22 1200 	smlad	r2, r2, r0, r1
 8008ba0:	6869      	ldr	r1, [r5, #4]
 8008ba2:	3508      	adds	r5, #8
 8008ba4:	fb21 3306 	smlad	r3, r1, r6, r3
 8008ba8:	fb21 2104 	smlad	r1, r1, r4, r2
 8008bac:	45d6      	cmp	lr, sl
 8008bae:	d1e2      	bne.n	8008b76 <st_sssa8_ch_fully_connected+0x1fa>
 8008bb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bb2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008bb4:	4493      	add	fp, r2
 8008bb6:	9a03      	ldr	r2, [sp, #12]
 8008bb8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008bbc:	9203      	str	r2, [sp, #12]
 8008bbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008bc0:	f108 0804 	add.w	r8, r8, #4
 8008bc4:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8008bc8:	45c1      	cmp	r9, r8
 8008bca:	dd37      	ble.n	8008c3c <st_sssa8_ch_fully_connected+0x2c0>
 8008bcc:	9c03      	ldr	r4, [sp, #12]
 8008bce:	f99e 0000 	ldrsb.w	r0, [lr]
 8008bd2:	f9b4 2000 	ldrsh.w	r2, [r4]
 8008bd6:	fb12 3300 	smlabb	r3, r2, r0, r3
 8008bda:	f99b 0000 	ldrsb.w	r0, [fp]
 8008bde:	fb12 1100 	smlabb	r1, r2, r0, r1
 8008be2:	f108 0201 	add.w	r2, r8, #1
 8008be6:	454a      	cmp	r2, r9
 8008be8:	da25      	bge.n	8008c36 <st_sssa8_ch_fully_connected+0x2ba>
 8008bea:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8008bee:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 8008bf2:	fb12 3300 	smlabb	r3, r2, r0, r3
 8008bf6:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 8008bfa:	fb12 1100 	smlabb	r1, r2, r0, r1
 8008bfe:	f108 0202 	add.w	r2, r8, #2
 8008c02:	4591      	cmp	r9, r2
 8008c04:	dd17      	ble.n	8008c36 <st_sssa8_ch_fully_connected+0x2ba>
 8008c06:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8008c0a:	f99e 0002 	ldrsb.w	r0, [lr, #2]
 8008c0e:	fb12 3300 	smlabb	r3, r2, r0, r3
 8008c12:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 8008c16:	fb12 1100 	smlabb	r1, r2, r0, r1
 8008c1a:	f108 0203 	add.w	r2, r8, #3
 8008c1e:	4591      	cmp	r9, r2
 8008c20:	dd09      	ble.n	8008c36 <st_sssa8_ch_fully_connected+0x2ba>
 8008c22:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008c26:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 8008c2a:	fb12 1100 	smlabb	r1, r2, r0, r1
 8008c2e:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 8008c32:	fb12 3300 	smlabb	r3, r2, r0, r3
 8008c36:	eba9 0808 	sub.w	r8, r9, r8
 8008c3a:	44c6      	add	lr, r8
 8008c3c:	9e07      	ldr	r6, [sp, #28]
 8008c3e:	f936 0c04 	ldrsh.w	r0, [r6, #-4]
 8008c42:	2815      	cmp	r0, #21
 8008c44:	f340 80c2 	ble.w	8008dcc <st_sssa8_ch_fully_connected+0x450>
 8008c48:	9a06      	ldr	r2, [sp, #24]
 8008c4a:	1e84      	subs	r4, r0, #2
 8008c4c:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	fa02 f404 	lsl.w	r4, r2, r4
 8008c56:	9a05      	ldr	r2, [sp, #20]
 8008c58:	3801      	subs	r0, #1
 8008c5a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8008c5e:	fb53 4202 	smmla	r2, r3, r2, r4
 8008c62:	fa42 f300 	asr.w	r3, r2, r0
 8008c66:	442b      	add	r3, r5
 8008c68:	1eb5      	subs	r5, r6, #2
 8008c6a:	f303 0307 	ssat	r3, #8, r3
 8008c6e:	9a04      	ldr	r2, [sp, #16]
 8008c70:	b25b      	sxtb	r3, r3
 8008c72:	1e50      	subs	r0, r2, #1
 8008c74:	f802 3c02 	strb.w	r3, [r2, #-2]
 8008c78:	f9b5 4000 	ldrsh.w	r4, [r5]
 8008c7c:	2c15      	cmp	r4, #21
 8008c7e:	f340 8097 	ble.w	8008db0 <st_sssa8_ch_fully_connected+0x434>
 8008c82:	9b06      	ldr	r3, [sp, #24]
 8008c84:	1ea2      	subs	r2, r4, #2
 8008c86:	681d      	ldr	r5, [r3, #0]
 8008c88:	2301      	movs	r3, #1
 8008c8a:	fa03 f202 	lsl.w	r2, r3, r2
 8008c8e:	9b05      	ldr	r3, [sp, #20]
 8008c90:	3c01      	subs	r4, #1
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	fb51 2103 	smmla	r1, r1, r3, r2
 8008c98:	fa41 f304 	asr.w	r3, r1, r4
 8008c9c:	442b      	add	r3, r5
 8008c9e:	f303 0307 	ssat	r3, #8, r3
 8008ca2:	b25b      	sxtb	r3, r3
 8008ca4:	9a07      	ldr	r2, [sp, #28]
 8008ca6:	7003      	strb	r3, [r0, #0]
 8008ca8:	3204      	adds	r2, #4
 8008caa:	9207      	str	r2, [sp, #28]
 8008cac:	9a04      	ldr	r2, [sp, #16]
 8008cae:	9b08      	ldr	r3, [sp, #32]
 8008cb0:	3202      	adds	r2, #2
 8008cb2:	9204      	str	r2, [sp, #16]
 8008cb4:	9a05      	ldr	r2, [sp, #20]
 8008cb6:	3208      	adds	r2, #8
 8008cb8:	9205      	str	r2, [sp, #20]
 8008cba:	9a06      	ldr	r2, [sp, #24]
 8008cbc:	3208      	adds	r2, #8
 8008cbe:	9206      	str	r2, [sp, #24]
 8008cc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	9308      	str	r3, [sp, #32]
 8008cc8:	eb0e 0a09 	add.w	sl, lr, r9
 8008ccc:	f47f aec4 	bne.w	8008a58 <st_sssa8_ch_fully_connected+0xdc>
 8008cd0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008cd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008cd4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008cd8:	9220      	str	r2, [sp, #128]	@ 0x80
 8008cda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008cdc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008ce0:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008ce2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008ce4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008ce8:	9224      	str	r2, [sp, #144]	@ 0x90
 8008cea:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8008cec:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8008cf0:	9225      	str	r2, [sp, #148]	@ 0x94
 8008cf2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008cf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cf8:	46cb      	mov	fp, r9
 8008cfa:	9312      	str	r3, [sp, #72]	@ 0x48
 8008cfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008cfe:	07db      	lsls	r3, r3, #31
 8008d00:	d54a      	bpl.n	8008d98 <st_sssa8_ch_fully_connected+0x41c>
 8008d02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d04:	ea5f 079b 	movs.w	r7, fp, lsr #2
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f000 80c8 	beq.w	8008e9e <st_sssa8_ch_fully_connected+0x522>
 8008d0e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008d10:	eb0a 0687 	add.w	r6, sl, r7, lsl #2
 8008d14:	f85a 2b04 	ldr.w	r2, [sl], #4
 8008d18:	6805      	ldr	r5, [r0, #0]
 8008d1a:	6844      	ldr	r4, [r0, #4]
 8008d1c:	ea4f 2132 	mov.w	r1, r2, ror #8
 8008d20:	3008      	adds	r0, #8
 8008d22:	fa2f f282 	sxtb16	r2, r2
 8008d26:	fa2f f181 	sxtb16	r1, r1
 8008d2a:	fb25 3302 	smlad	r3, r5, r2, r3
 8008d2e:	fb24 3301 	smlad	r3, r4, r1, r3
 8008d32:	45b2      	cmp	sl, r6
 8008d34:	d1ee      	bne.n	8008d14 <st_sssa8_ch_fully_connected+0x398>
 8008d36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d38:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8008d3c:	920d      	str	r2, [sp, #52]	@ 0x34
 8008d3e:	f01b 0203 	ands.w	r2, fp, #3
 8008d42:	d014      	beq.n	8008d6e <st_sssa8_ch_fully_connected+0x3f2>
 8008d44:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8008d46:	f996 1000 	ldrsb.w	r1, [r6]
 8008d4a:	8820      	ldrh	r0, [r4, #0]
 8008d4c:	3a01      	subs	r2, #1
 8008d4e:	b292      	uxth	r2, r2
 8008d50:	fb10 3301 	smlabb	r3, r0, r1, r3
 8008d54:	b15a      	cbz	r2, 8008d6e <st_sssa8_ch_fully_connected+0x3f2>
 8008d56:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8008d5a:	8860      	ldrh	r0, [r4, #2]
 8008d5c:	2a01      	cmp	r2, #1
 8008d5e:	fb10 3301 	smlabb	r3, r0, r1, r3
 8008d62:	d004      	beq.n	8008d6e <st_sssa8_ch_fully_connected+0x3f2>
 8008d64:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8008d68:	88a1      	ldrh	r1, [r4, #4]
 8008d6a:	fb11 3302 	smlabb	r3, r1, r2, r3
 8008d6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d70:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008d74:	2a15      	cmp	r2, #21
 8008d76:	dd6c      	ble.n	8008e52 <st_sssa8_ch_fully_connected+0x4d6>
 8008d78:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008d7a:	680c      	ldr	r4, [r1, #0]
 8008d7c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008d7e:	1e95      	subs	r5, r2, #2
 8008d80:	2001      	movs	r0, #1
 8008d82:	3a01      	subs	r2, #1
 8008d84:	6809      	ldr	r1, [r1, #0]
 8008d86:	40a8      	lsls	r0, r5
 8008d88:	fb53 0301 	smmla	r3, r3, r1, r0
 8008d8c:	4113      	asrs	r3, r2
 8008d8e:	4423      	add	r3, r4
 8008d90:	f303 0307 	ssat	r3, #8, r3
 8008d94:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8008d96:	7013      	strb	r3, [r2, #0]
 8008d98:	2000      	movs	r0, #0
 8008d9a:	b017      	add	sp, #92	@ 0x5c
 8008d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da0:	42bc      	cmp	r4, r7
 8008da2:	f845 3c04 	str.w	r3, [r5, #-4]
 8008da6:	f105 0504 	add.w	r5, r5, #4
 8008daa:	f47f ae07 	bne.w	80089bc <st_sssa8_ch_fully_connected+0x40>
 8008dae:	e618      	b.n	80089e2 <st_sssa8_ch_fully_connected+0x66>
 8008db0:	2c00      	cmp	r4, #0
 8008db2:	dd1f      	ble.n	8008df4 <st_sssa8_ch_fully_connected+0x478>
 8008db4:	9b05      	ldr	r3, [sp, #20]
 8008db6:	9a06      	ldr	r2, [sp, #24]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	0049      	lsls	r1, r1, #1
 8008dbe:	fb51 2103 	smmla	r1, r1, r3, r2
 8008dc2:	4121      	asrs	r1, r4
 8008dc4:	f301 0307 	ssat	r3, #8, r1
 8008dc8:	b25b      	sxtb	r3, r3
 8008dca:	e76b      	b.n	8008ca4 <st_sssa8_ch_fully_connected+0x328>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	dd22      	ble.n	8008e16 <st_sssa8_ch_fully_connected+0x49a>
 8008dd0:	005c      	lsls	r4, r3, #1
 8008dd2:	9a06      	ldr	r2, [sp, #24]
 8008dd4:	9b05      	ldr	r3, [sp, #20]
 8008dd6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8008dda:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8008dde:	fb54 2303 	smmla	r3, r4, r3, r2
 8008de2:	9a07      	ldr	r2, [sp, #28]
 8008de4:	4103      	asrs	r3, r0
 8008de6:	1e95      	subs	r5, r2, #2
 8008de8:	f303 0307 	ssat	r3, #8, r3
 8008dec:	9a04      	ldr	r2, [sp, #16]
 8008dee:	b25b      	sxtb	r3, r3
 8008df0:	1e50      	subs	r0, r2, #1
 8008df2:	e73f      	b.n	8008c74 <st_sssa8_ch_fully_connected+0x2f8>
 8008df4:	f1c4 0401 	rsb	r4, r4, #1
 8008df8:	fa01 f204 	lsl.w	r2, r1, r4
 8008dfc:	f302 021f 	ssat	r2, #32, r2
 8008e00:	9b05      	ldr	r3, [sp, #20]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	fb52 f213 	smmulr	r2, r2, r3
 8008e08:	9b06      	ldr	r3, [sp, #24]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f303 0307 	ssat	r3, #8, r3
 8008e12:	b25b      	sxtb	r3, r3
 8008e14:	e746      	b.n	8008ca4 <st_sssa8_ch_fully_connected+0x328>
 8008e16:	f1c0 0201 	rsb	r2, r0, #1
 8008e1a:	fa03 f202 	lsl.w	r2, r3, r2
 8008e1e:	9b07      	ldr	r3, [sp, #28]
 8008e20:	1e9d      	subs	r5, r3, #2
 8008e22:	f302 021f 	ssat	r2, #32, r2
 8008e26:	9b05      	ldr	r3, [sp, #20]
 8008e28:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8008e2c:	fb52 f313 	smmulr	r3, r2, r3
 8008e30:	9a06      	ldr	r2, [sp, #24]
 8008e32:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8008e36:	4413      	add	r3, r2
 8008e38:	f303 0307 	ssat	r3, #8, r3
 8008e3c:	9a04      	ldr	r2, [sp, #16]
 8008e3e:	b25b      	sxtb	r3, r3
 8008e40:	1e50      	subs	r0, r2, #1
 8008e42:	e717      	b.n	8008c74 <st_sssa8_ch_fully_connected+0x2f8>
 8008e44:	46d6      	mov	lr, sl
 8008e46:	e6bf      	b.n	8008bc8 <st_sssa8_ch_fully_connected+0x24c>
 8008e48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e4a:	9203      	str	r2, [sp, #12]
 8008e4c:	f04f 0800 	mov.w	r8, #0
 8008e50:	e680      	b.n	8008b54 <st_sssa8_ch_fully_connected+0x1d8>
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	dd0f      	ble.n	8008e76 <st_sssa8_ch_fully_connected+0x4fa>
 8008e56:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008e58:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008e5a:	6809      	ldr	r1, [r1, #0]
 8008e5c:	6800      	ldr	r0, [r0, #0]
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	fb53 0301 	smmla	r3, r3, r1, r0
 8008e64:	4113      	asrs	r3, r2
 8008e66:	f303 0307 	ssat	r3, #8, r3
 8008e6a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	7013      	strb	r3, [r2, #0]
 8008e70:	b017      	add	sp, #92	@ 0x5c
 8008e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e76:	f1c2 0201 	rsb	r2, r2, #1
 8008e7a:	4093      	lsls	r3, r2
 8008e7c:	f303 031f 	ssat	r3, #32, r3
 8008e80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	fb53 f312 	smmulr	r3, r3, r2
 8008e88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e8a:	6812      	ldr	r2, [r2, #0]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f303 0307 	ssat	r3, #8, r3
 8008e92:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8008e94:	2000      	movs	r0, #0
 8008e96:	7013      	strb	r3, [r2, #0]
 8008e98:	b017      	add	sp, #92	@ 0x5c
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	4656      	mov	r6, sl
 8008ea0:	e74d      	b.n	8008d3e <st_sssa8_ch_fully_connected+0x3c2>
 8008ea2:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 8008ea6:	9212      	str	r2, [sp, #72]	@ 0x48
 8008ea8:	e59b      	b.n	80089e2 <st_sssa8_ch_fully_connected+0x66>
 8008eaa:	bf00      	nop

08008eac <st_int8_copy>:
 8008eac:	4288      	cmp	r0, r1
 8008eae:	d056      	beq.n	8008f5e <st_int8_copy+0xb2>
 8008eb0:	2a00      	cmp	r2, #0
 8008eb2:	d054      	beq.n	8008f5e <st_int8_copy+0xb2>
 8008eb4:	4288      	cmp	r0, r1
 8008eb6:	d353      	bcc.n	8008f60 <st_int8_copy+0xb4>
 8008eb8:	078b      	lsls	r3, r1, #30
 8008eba:	d102      	bne.n	8008ec2 <st_int8_copy+0x16>
 8008ebc:	e009      	b.n	8008ed2 <st_int8_copy+0x26>
 8008ebe:	2a00      	cmp	r2, #0
 8008ec0:	d05b      	beq.n	8008f7a <st_int8_copy+0xce>
 8008ec2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008ec6:	f801 3b01 	strb.w	r3, [r1], #1
 8008eca:	078b      	lsls	r3, r1, #30
 8008ecc:	f102 32ff 	add.w	r2, r2, #4294967295
 8008ed0:	d1f5      	bne.n	8008ebe <st_int8_copy+0x12>
 8008ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed6:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8008eda:	d068      	beq.n	8008fae <st_int8_copy+0x102>
 8008edc:	ea40 0301 	orr.w	r3, r0, r1
 8008ee0:	075b      	lsls	r3, r3, #29
 8008ee2:	d14b      	bne.n	8008f7c <st_int8_copy+0xd0>
 8008ee4:	f1be 0f01 	cmp.w	lr, #1
 8008ee8:	d048      	beq.n	8008f7c <st_int8_copy+0xd0>
 8008eea:	f100 0310 	add.w	r3, r0, #16
 8008eee:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008ef2:	f101 0c10 	add.w	ip, r1, #16
 8008ef6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8008efa:	ed13 6b04 	vldr	d6, [r3, #-16]
 8008efe:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008f02:	3310      	adds	r3, #16
 8008f04:	4573      	cmp	r3, lr
 8008f06:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8008f0a:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8008f0e:	f10c 0c10 	add.w	ip, ip, #16
 8008f12:	d1f2      	bne.n	8008efa <st_int8_copy+0x4e>
 8008f14:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008f18:	4421      	add	r1, r4
 8008f1a:	4420      	add	r0, r4
 8008f1c:	f002 0203 	and.w	r2, r2, #3
 8008f20:	b16b      	cbz	r3, 8008f3e <st_int8_copy+0x92>
 8008f22:	6804      	ldr	r4, [r0, #0]
 8008f24:	600c      	str	r4, [r1, #0]
 8008f26:	1e5c      	subs	r4, r3, #1
 8008f28:	d005      	beq.n	8008f36 <st_int8_copy+0x8a>
 8008f2a:	6845      	ldr	r5, [r0, #4]
 8008f2c:	604d      	str	r5, [r1, #4]
 8008f2e:	2c01      	cmp	r4, #1
 8008f30:	bf1c      	itt	ne
 8008f32:	6884      	ldrne	r4, [r0, #8]
 8008f34:	608c      	strne	r4, [r1, #8]
 8008f36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008f3a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008f3e:	b162      	cbz	r2, 8008f5a <st_int8_copy+0xae>
 8008f40:	f990 3000 	ldrsb.w	r3, [r0]
 8008f44:	700b      	strb	r3, [r1, #0]
 8008f46:	3a01      	subs	r2, #1
 8008f48:	d007      	beq.n	8008f5a <st_int8_copy+0xae>
 8008f4a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008f4e:	704b      	strb	r3, [r1, #1]
 8008f50:	2a01      	cmp	r2, #1
 8008f52:	bf1c      	itt	ne
 8008f54:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8008f58:	708b      	strbne	r3, [r1, #2]
 8008f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5e:	4770      	bx	lr
 8008f60:	1883      	adds	r3, r0, r2
 8008f62:	428b      	cmp	r3, r1
 8008f64:	d9a8      	bls.n	8008eb8 <st_int8_copy+0xc>
 8008f66:	4283      	cmp	r3, r0
 8008f68:	440a      	add	r2, r1
 8008f6a:	d9f8      	bls.n	8008f5e <st_int8_copy+0xb2>
 8008f6c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008f70:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008f74:	4283      	cmp	r3, r0
 8008f76:	d1f9      	bne.n	8008f6c <st_int8_copy+0xc0>
 8008f78:	4770      	bx	lr
 8008f7a:	4770      	bx	lr
 8008f7c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008f80:	460b      	mov	r3, r1
 8008f82:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8008f86:	4684      	mov	ip, r0
 8008f88:	f8dc 7000 	ldr.w	r7, [ip]
 8008f8c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8008f90:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008f94:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8008f98:	f8c3 800c 	str.w	r8, [r3, #12]
 8008f9c:	601f      	str	r7, [r3, #0]
 8008f9e:	605e      	str	r6, [r3, #4]
 8008fa0:	609d      	str	r5, [r3, #8]
 8008fa2:	3310      	adds	r3, #16
 8008fa4:	459e      	cmp	lr, r3
 8008fa6:	f10c 0c10 	add.w	ip, ip, #16
 8008faa:	d1ed      	bne.n	8008f88 <st_int8_copy+0xdc>
 8008fac:	e7b2      	b.n	8008f14 <st_int8_copy+0x68>
 8008fae:	0893      	lsrs	r3, r2, #2
 8008fb0:	f002 0203 	and.w	r2, r2, #3
 8008fb4:	e7b4      	b.n	8008f20 <st_int8_copy+0x74>
 8008fb6:	bf00      	nop

08008fb8 <st_int8_reordered_no_shift_zero>:
 8008fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fba:	0897      	lsrs	r7, r2, #2
 8008fbc:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8008fc0:	d02c      	beq.n	800901c <st_int8_reordered_no_shift_zero+0x64>
 8008fc2:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8008fc6:	468e      	mov	lr, r1
 8008fc8:	f850 cb04 	ldr.w	ip, [r0], #4
 8008fcc:	fa2f f49c 	sxtb16	r4, ip, ror #8
 8008fd0:	fad4 f403 	ssub16	r4, r4, r3
 8008fd4:	fa2f fc8c 	sxtb16	ip, ip
 8008fd8:	fadc fc03 	ssub16	ip, ip, r3
 8008fdc:	42a8      	cmp	r0, r5
 8008fde:	f8ce c000 	str.w	ip, [lr]
 8008fe2:	f8ce 4004 	str.w	r4, [lr, #4]
 8008fe6:	f10e 0e08 	add.w	lr, lr, #8
 8008fea:	d1ed      	bne.n	8008fc8 <st_int8_reordered_no_shift_zero+0x10>
 8008fec:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8008ff0:	f012 0203 	ands.w	r2, r2, #3
 8008ff4:	d011      	beq.n	800901a <st_int8_reordered_no_shift_zero+0x62>
 8008ff6:	f995 0000 	ldrsb.w	r0, [r5]
 8008ffa:	b273      	sxtb	r3, r6
 8008ffc:	1ac0      	subs	r0, r0, r3
 8008ffe:	3a01      	subs	r2, #1
 8009000:	8008      	strh	r0, [r1, #0]
 8009002:	d00a      	beq.n	800901a <st_int8_reordered_no_shift_zero+0x62>
 8009004:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8009008:	2a01      	cmp	r2, #1
 800900a:	eba0 0003 	sub.w	r0, r0, r3
 800900e:	8048      	strh	r0, [r1, #2]
 8009010:	d003      	beq.n	800901a <st_int8_reordered_no_shift_zero+0x62>
 8009012:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	808b      	strh	r3, [r1, #4]
 800901a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901c:	4605      	mov	r5, r0
 800901e:	e7e7      	b.n	8008ff0 <st_int8_reordered_no_shift_zero+0x38>

08009020 <ai_array_to_buffer_fmt>:
 8009020:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009024:	2b02      	cmp	r3, #2
 8009026:	d053      	beq.n	80090d0 <ai_array_to_buffer_fmt+0xb0>
 8009028:	4a2c      	ldr	r2, [pc, #176]	@ (80090dc <ai_array_to_buffer_fmt+0xbc>)
 800902a:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800902e:	4293      	cmp	r3, r2
 8009030:	d010      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 8009032:	dc21      	bgt.n	8009078 <ai_array_to_buffer_fmt+0x58>
 8009034:	4a2a      	ldr	r2, [pc, #168]	@ (80090e0 <ai_array_to_buffer_fmt+0xc0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00c      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 800903a:	dd0f      	ble.n	800905c <ai_array_to_buffer_fmt+0x3c>
 800903c:	4a29      	ldr	r2, [pc, #164]	@ (80090e4 <ai_array_to_buffer_fmt+0xc4>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d008      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 8009042:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8009046:	4293      	cmp	r3, r2
 8009048:	d004      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 800904a:	4a27      	ldr	r2, [pc, #156]	@ (80090e8 <ai_array_to_buffer_fmt+0xc8>)
 800904c:	4293      	cmp	r3, r2
 800904e:	bf0c      	ite	eq
 8009050:	4613      	moveq	r3, r2
 8009052:	2340      	movne	r3, #64	@ 0x40
 8009054:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8009058:	4318      	orrs	r0, r3
 800905a:	4770      	bx	lr
 800905c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8009060:	4293      	cmp	r3, r2
 8009062:	d0f7      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 8009064:	dd2a      	ble.n	80090bc <ai_array_to_buffer_fmt+0x9c>
 8009066:	4a21      	ldr	r2, [pc, #132]	@ (80090ec <ai_array_to_buffer_fmt+0xcc>)
 8009068:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800906c:	4293      	cmp	r3, r2
 800906e:	bf0c      	ite	eq
 8009070:	4613      	moveq	r3, r2
 8009072:	2340      	movne	r3, #64	@ 0x40
 8009074:	4318      	orrs	r0, r3
 8009076:	4770      	bx	lr
 8009078:	4a1d      	ldr	r2, [pc, #116]	@ (80090f0 <ai_array_to_buffer_fmt+0xd0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d0ea      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 800907e:	dd0f      	ble.n	80090a0 <ai_array_to_buffer_fmt+0x80>
 8009080:	4a1c      	ldr	r2, [pc, #112]	@ (80090f4 <ai_array_to_buffer_fmt+0xd4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d0e6      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 8009086:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 800908a:	4293      	cmp	r3, r2
 800908c:	d0e2      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 800908e:	4a1a      	ldr	r2, [pc, #104]	@ (80090f8 <ai_array_to_buffer_fmt+0xd8>)
 8009090:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8009094:	4293      	cmp	r3, r2
 8009096:	bf0c      	ite	eq
 8009098:	4613      	moveq	r3, r2
 800909a:	2340      	movne	r3, #64	@ 0x40
 800909c:	4318      	orrs	r0, r3
 800909e:	4770      	bx	lr
 80090a0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d0d5      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 80090a8:	3207      	adds	r2, #7
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d0d2      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 80090ae:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 80090b2:	4293      	cmp	r3, r2
 80090b4:	bf0c      	ite	eq
 80090b6:	4613      	moveq	r3, r2
 80090b8:	2340      	movne	r3, #64	@ 0x40
 80090ba:	e7cb      	b.n	8009054 <ai_array_to_buffer_fmt+0x34>
 80090bc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d0c7      	beq.n	8009054 <ai_array_to_buffer_fmt+0x34>
 80090c4:	3280      	adds	r2, #128	@ 0x80
 80090c6:	4293      	cmp	r3, r2
 80090c8:	bf0c      	ite	eq
 80090ca:	4613      	moveq	r3, r2
 80090cc:	2340      	movne	r3, #64	@ 0x40
 80090ce:	e7c1      	b.n	8009054 <ai_array_to_buffer_fmt+0x34>
 80090d0:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <ai_array_to_buffer_fmt+0xdc>)
 80090d2:	4003      	ands	r3, r0
 80090d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090d8:	e7bc      	b.n	8009054 <ai_array_to_buffer_fmt+0x34>
 80090da:	bf00      	nop
 80090dc:	00840040 	.word	0x00840040
 80090e0:	00040840 	.word	0x00040840
 80090e4:	00041040 	.word	0x00041040
 80090e8:	0004084f 	.word	0x0004084f
 80090ec:	00040447 	.word	0x00040447
 80090f0:	00840840 	.word	0x00840840
 80090f4:	00841040 	.word	0x00841040
 80090f8:	0084084f 	.word	0x0084084f
 80090fc:	00803fff 	.word	0x00803fff

08009100 <ai_array_get_data_byte_size>:
 8009100:	b169      	cbz	r1, 800911e <ai_array_get_data_byte_size+0x1e>
 8009102:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009106:	fb03 f101 	mul.w	r1, r3, r1
 800910a:	1dcb      	adds	r3, r1, #7
 800910c:	f023 0307 	bic.w	r3, r3, #7
 8009110:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8009114:	fa23 f000 	lsr.w	r0, r3, r0
 8009118:	3007      	adds	r0, #7
 800911a:	08c0      	lsrs	r0, r0, #3
 800911c:	4770      	bx	lr
 800911e:	4608      	mov	r0, r1
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop

08009124 <ai_version_get>:
 8009124:	0212      	lsls	r2, r2, #8
 8009126:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800912a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800912e:	4770      	bx	lr

08009130 <ai_platform_version_get>:
 8009130:	0e02      	lsrs	r2, r0, #24
 8009132:	2300      	movs	r3, #0
 8009134:	f362 0307 	bfi	r3, r2, #0, #8
 8009138:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800913c:	f362 230f 	bfi	r3, r2, #8, #8
 8009140:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009144:	f360 4317 	bfi	r3, r0, #16, #8
 8009148:	b082      	sub	sp, #8
 800914a:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 800914e:	b002      	add	sp, #8
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop

08009154 <get_tensor_byte_size>:
 8009154:	b410      	push	{r4}
 8009156:	6983      	ldr	r3, [r0, #24]
 8009158:	68c4      	ldr	r4, [r0, #12]
 800915a:	6941      	ldr	r1, [r0, #20]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68e0      	ldr	r0, [r4, #12]
 8009160:	4a07      	ldr	r2, [pc, #28]	@ (8009180 <get_tensor_byte_size+0x2c>)
 8009162:	68c9      	ldr	r1, [r1, #12]
 8009164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009168:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800916c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009170:	fb01 f000 	mul.w	r0, r1, r0
 8009174:	4293      	cmp	r3, r2
 8009176:	bf04      	itt	eq
 8009178:	3007      	addeq	r0, #7
 800917a:	08c0      	lsreq	r0, r0, #3
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	000400c0 	.word	0x000400c0

08009184 <_lite_kernel_nl_softmax_is8os8>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	188a      	adds	r2, r1, r2
 800918a:	b09b      	sub	sp, #108	@ 0x6c
 800918c:	4291      	cmp	r1, r2
 800918e:	9218      	str	r2, [sp, #96]	@ 0x60
 8009190:	9015      	str	r0, [sp, #84]	@ 0x54
 8009192:	9303      	str	r3, [sp, #12]
 8009194:	f080 835a 	bcs.w	800984c <_lite_kernel_nl_softmax_is8os8+0x6c8>
 8009198:	461a      	mov	r2, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	18cb      	adds	r3, r1, r3
 800919e:	9316      	str	r3, [sp, #88]	@ 0x58
 80091a0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80091a2:	9102      	str	r1, [sp, #8]
 80091a4:	3b04      	subs	r3, #4
 80091a6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80091a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80091ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80091ae:	9a03      	ldr	r2, [sp, #12]
 80091b0:	9b02      	ldr	r3, [sp, #8]
 80091b2:	2a01      	cmp	r2, #1
 80091b4:	f993 9000 	ldrsb.w	r9, [r3]
 80091b8:	f240 83cc 	bls.w	8009954 <_lite_kernel_nl_softmax_is8os8+0x7d0>
 80091bc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80091be:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
 80091c2:	4591      	cmp	r9, r2
 80091c4:	bfb8      	it	lt
 80091c6:	4691      	movlt	r9, r2
 80091c8:	4299      	cmp	r1, r3
 80091ca:	d1f8      	bne.n	80091be <_lite_kernel_nl_softmax_is8os8+0x3a>
 80091cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80091ce:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 80091d2:	444b      	add	r3, r9
 80091d4:	9305      	str	r3, [sp, #20]
 80091d6:	9b02      	ldr	r3, [sp, #8]
 80091d8:	f103 3bff 	add.w	fp, r3, #4294967295
 80091dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	2300      	movs	r3, #0
 80091e2:	9304      	str	r3, [sp, #16]
 80091e4:	e179      	b.n	80094da <_lite_kernel_nl_softmax_is8os8+0x356>
 80091e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80091e8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80091ea:	1a9b      	subs	r3, r3, r2
 80091ec:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80091ee:	4093      	lsls	r3, r2
 80091f0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80091f2:	405a      	eors	r2, r3
 80091f4:	0fd2      	lsrs	r2, r2, #31
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	4abe      	ldr	r2, [pc, #760]	@ (80094f4 <_lite_kernel_nl_softmax_is8os8+0x370>)
 80091fa:	bf0b      	itete	eq
 80091fc:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 8009200:	4616      	movne	r6, r2
 8009202:	2200      	moveq	r2, #0
 8009204:	f04f 32ff 	movne.w	r2, #4294967295
 8009208:	fbc1 6203 	smlal	r6, r2, r1, r3
 800920c:	2a00      	cmp	r2, #0
 800920e:	da04      	bge.n	800921a <_lite_kernel_nl_softmax_is8os8+0x96>
 8009210:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009214:	1876      	adds	r6, r6, r1
 8009216:	f142 0200 	adc.w	r2, r2, #0
 800921a:	0ff6      	lsrs	r6, r6, #31
 800921c:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
 8009220:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009222:	429a      	cmp	r2, r3
 8009224:	f000 8178 	beq.w	8009518 <_lite_kernel_nl_softmax_is8os8+0x394>
 8009228:	f046 497f 	orr.w	r9, r6, #4278190080	@ 0xff000000
 800922c:	ea4f 1149 	mov.w	r1, r9, lsl #5
 8009230:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8009234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009238:	f04f 0a00 	mov.w	sl, #0
 800923c:	eba9 0906 	sub.w	r9, r9, r6
 8009240:	fbc1 3a01 	smlal	r3, sl, r1, r1
 8009244:	f349 7280 	sbfx	r2, r9, #30, #1
 8009248:	f1ba 0f00 	cmp.w	sl, #0
 800924c:	f3c9 7480 	ubfx	r4, r9, #30, #1
 8009250:	9211      	str	r2, [sp, #68]	@ 0x44
 8009252:	da05      	bge.n	8009260 <_lite_kernel_nl_softmax_is8os8+0xdc>
 8009254:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8009258:	189a      	adds	r2, r3, r2
 800925a:	4613      	mov	r3, r2
 800925c:	f14a 0a00 	adc.w	sl, sl, #0
 8009260:	0fdb      	lsrs	r3, r3, #31
 8009262:	ea43 034a 	orr.w	r3, r3, sl, lsl #1
 8009266:	fba3 2003 	umull	r2, r0, r3, r3
 800926a:	ea4f 7aea 	mov.w	sl, sl, asr #31
 800926e:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8009272:	fb03 f50a 	mul.w	r5, r3, sl
 8009276:	eb40 0045 	adc.w	r0, r0, r5, lsl #1
 800927a:	2800      	cmp	r0, #0
 800927c:	9310      	str	r3, [sp, #64]	@ 0x40
 800927e:	da05      	bge.n	800928c <_lite_kernel_nl_softmax_is8os8+0x108>
 8009280:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8009284:	1955      	adds	r5, r2, r5
 8009286:	462a      	mov	r2, r5
 8009288:	f140 0000 	adc.w	r0, r0, #0
 800928c:	0fd2      	lsrs	r2, r2, #31
 800928e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8009292:	1e60      	subs	r0, r4, #1
 8009294:	fb01 fa0a 	mul.w	sl, r1, sl
 8009298:	900d      	str	r0, [sp, #52]	@ 0x34
 800929a:	17c8      	asrs	r0, r1, #31
 800929c:	fb03 aa00 	mla	sl, r3, r0, sl
 80092a0:	f3c9 7040 	ubfx	r0, r9, #29, #1
 80092a4:	9006      	str	r0, [sp, #24]
 80092a6:	ea83 0e01 	eor.w	lr, r3, r1
 80092aa:	fab6 f686 	clz	r6, r6
 80092ae:	fba1 3003 	umull	r3, r0, r1, r3
 80092b2:	0976      	lsrs	r6, r6, #5
 80092b4:	9312      	str	r3, [sp, #72]	@ 0x48
 80092b6:	4603      	mov	r3, r0
 80092b8:	4453      	add	r3, sl
 80092ba:	f1c6 0a00 	rsb	sl, r6, #0
 80092be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092c0:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 80092c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80092c6:	f349 6340 	sbfx	r3, r9, #25, #1
 80092ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80092cc:	f002 0303 	and.w	r3, r2, #3
 80092d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092d2:	9b06      	ldr	r3, [sp, #24]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80092d8:	9b06      	ldr	r3, [sp, #24]
 80092da:	f3c9 7c00 	ubfx	ip, r9, #28, #1
 80092de:	4258      	negs	r0, r3
 80092e0:	f10c 33ff 	add.w	r3, ip, #4294967295
 80092e4:	f3c9 67c0 	ubfx	r7, r9, #27, #1
 80092e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092ea:	f1cc 0300 	rsb	r3, ip, #0
 80092ee:	9306      	str	r3, [sp, #24]
 80092f0:	1e7b      	subs	r3, r7, #1
 80092f2:	f3c9 6480 	ubfx	r4, r9, #26, #1
 80092f6:	1092      	asrs	r2, r2, #2
 80092f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fa:	427b      	negs	r3, r7
 80092fc:	f3c9 6500 	ubfx	r5, r9, #24, #1
 8009300:	f106 3aff 	add.w	sl, r6, #4294967295
 8009304:	9308      	str	r3, [sp, #32]
 8009306:	f3c9 6640 	ubfx	r6, r9, #25, #1
 800930a:	4263      	negs	r3, r4
 800930c:	2a00      	cmp	r2, #0
 800930e:	f105 3cff 	add.w	ip, r5, #4294967295
 8009312:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8009316:	f106 36ff 	add.w	r6, r6, #4294967295
 800931a:	f104 37ff 	add.w	r7, r4, #4294967295
 800931e:	9307      	str	r3, [sp, #28]
 8009320:	f1c5 0500 	rsb	r5, r5, #0
 8009324:	f2c0 80e2 	blt.w	80094ec <_lite_kernel_nl_softmax_is8os8+0x368>
 8009328:	f04f 0901 	mov.w	r9, #1
 800932c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800932e:	4599      	cmp	r9, r3
 8009330:	4b70      	ldr	r3, [pc, #448]	@ (80094f4 <_lite_kernel_nl_softmax_is8os8+0x370>)
 8009332:	bfb8      	it	lt
 8009334:	3201      	addlt	r2, #1
 8009336:	f1be 0f00 	cmp.w	lr, #0
 800933a:	bf18      	it	ne
 800933c:	469e      	movne	lr, r3
 800933e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009340:	bf06      	itte	eq
 8009342:	f04f 4e80 	moveq.w	lr, #1073741824	@ 0x40000000
 8009346:	f04f 0900 	moveq.w	r9, #0
 800934a:	f04f 39ff 	movne.w	r9, #4294967295
 800934e:	eb1e 0e03 	adds.w	lr, lr, r3
 8009352:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009354:	eb43 0909 	adc.w	r9, r3, r9
 8009358:	f1b9 0f00 	cmp.w	r9, #0
 800935c:	da06      	bge.n	800936c <_lite_kernel_nl_softmax_is8os8+0x1e8>
 800935e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009362:	eb1e 0303 	adds.w	r3, lr, r3
 8009366:	469e      	mov	lr, r3
 8009368:	f149 0900 	adc.w	r9, r9, #0
 800936c:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8009370:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
 8009374:	4496      	add	lr, r2
 8009376:	ea4f 73de 	mov.w	r3, lr, lsr #31
 800937a:	2b00      	cmp	r3, #0
 800937c:	4c5e      	ldr	r4, [pc, #376]	@ (80094f8 <_lite_kernel_nl_softmax_is8os8+0x374>)
 800937e:	4b5d      	ldr	r3, [pc, #372]	@ (80094f4 <_lite_kernel_nl_softmax_is8os8+0x370>)
 8009380:	bf06      	itte	eq
 8009382:	2200      	moveq	r2, #0
 8009384:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8009388:	f04f 32ff 	movne.w	r2, #4294967295
 800938c:	fbce 3204 	smlal	r3, r2, lr, r4
 8009390:	2a00      	cmp	r2, #0
 8009392:	da06      	bge.n	80093a2 <_lite_kernel_nl_softmax_is8os8+0x21e>
 8009394:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8009398:	eb13 0e0e 	adds.w	lr, r3, lr
 800939c:	4673      	mov	r3, lr
 800939e:	f142 0200 	adc.w	r2, r2, #0
 80093a2:	0fdb      	lsrs	r3, r3, #31
 80093a4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80093a8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80093aa:	441a      	add	r2, r3
 80093ac:	4613      	mov	r3, r2
 80093ae:	1052      	asrs	r2, r2, #1
 80093b0:	d402      	bmi.n	80093b8 <_lite_kernel_nl_softmax_is8os8+0x234>
 80093b2:	07dc      	lsls	r4, r3, #31
 80093b4:	bf48      	it	mi
 80093b6:	3201      	addmi	r2, #1
 80093b8:	1853      	adds	r3, r2, r1
 80093ba:	0fda      	lsrs	r2, r3, #31
 80093bc:	2a00      	cmp	r2, #0
 80093be:	4c4f      	ldr	r4, [pc, #316]	@ (80094fc <_lite_kernel_nl_softmax_is8os8+0x378>)
 80093c0:	4a4c      	ldr	r2, [pc, #304]	@ (80094f4 <_lite_kernel_nl_softmax_is8os8+0x370>)
 80093c2:	bf06      	itte	eq
 80093c4:	2100      	moveq	r1, #0
 80093c6:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 80093ca:	f04f 31ff 	movne.w	r1, #4294967295
 80093ce:	fbc3 2104 	smlal	r2, r1, r3, r4
 80093d2:	2900      	cmp	r1, #0
 80093d4:	da05      	bge.n	80093e2 <_lite_kernel_nl_softmax_is8os8+0x25e>
 80093d6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80093da:	18d3      	adds	r3, r2, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	f141 0100 	adc.w	r1, r1, #0
 80093e2:	0fd2      	lsrs	r2, r2, #31
 80093e4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80093e8:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 80093ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80093f0:	2100      	movs	r1, #0
 80093f2:	4c43      	ldr	r4, [pc, #268]	@ (8009500 <_lite_kernel_nl_softmax_is8os8+0x37c>)
 80093f4:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 80093f8:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 80093fc:	469e      	mov	lr, r3
 80093fe:	4689      	mov	r9, r1
 8009400:	fbc2 e904 	smlal	lr, r9, r2, r4
 8009404:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8009408:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
 800940c:	ea02 0c0c 	and.w	ip, r2, ip
 8009410:	4c3c      	ldr	r4, [pc, #240]	@ (8009504 <_lite_kernel_nl_softmax_is8os8+0x380>)
 8009412:	ea05 050e 	and.w	r5, r5, lr
 8009416:	ea8c 0505 	eor.w	r5, ip, r5
 800941a:	461a      	mov	r2, r3
 800941c:	468c      	mov	ip, r1
 800941e:	fbc5 2c04 	smlal	r2, ip, r5, r4
 8009422:	402e      	ands	r6, r5
 8009424:	0fd2      	lsrs	r2, r2, #31
 8009426:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009428:	4c37      	ldr	r4, [pc, #220]	@ (8009508 <_lite_kernel_nl_softmax_is8os8+0x384>)
 800942a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800942e:	4015      	ands	r5, r2
 8009430:	462a      	mov	r2, r5
 8009432:	4072      	eors	r2, r6
 8009434:	461d      	mov	r5, r3
 8009436:	460e      	mov	r6, r1
 8009438:	fbc2 5604 	smlal	r5, r6, r2, r4
 800943c:	0fed      	lsrs	r5, r5, #31
 800943e:	9c07      	ldr	r4, [sp, #28]
 8009440:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 8009444:	4017      	ands	r7, r2
 8009446:	402c      	ands	r4, r5
 8009448:	407c      	eors	r4, r7
 800944a:	4f30      	ldr	r7, [pc, #192]	@ (800950c <_lite_kernel_nl_softmax_is8os8+0x388>)
 800944c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800944e:	461a      	mov	r2, r3
 8009450:	460e      	mov	r6, r1
 8009452:	fbc4 2607 	smlal	r2, r6, r4, r7
 8009456:	4025      	ands	r5, r4
 8009458:	0fd2      	lsrs	r2, r2, #31
 800945a:	9c08      	ldr	r4, [sp, #32]
 800945c:	4f2c      	ldr	r7, [pc, #176]	@ (8009510 <_lite_kernel_nl_softmax_is8os8+0x38c>)
 800945e:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 8009462:	4014      	ands	r4, r2
 8009464:	4622      	mov	r2, r4
 8009466:	406a      	eors	r2, r5
 8009468:	461c      	mov	r4, r3
 800946a:	460e      	mov	r6, r1
 800946c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800946e:	fbc2 4607 	smlal	r4, r6, r2, r7
 8009472:	4015      	ands	r5, r2
 8009474:	0fe4      	lsrs	r4, r4, #31
 8009476:	9a06      	ldr	r2, [sp, #24]
 8009478:	4f26      	ldr	r7, [pc, #152]	@ (8009514 <_lite_kernel_nl_softmax_is8os8+0x390>)
 800947a:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
 800947e:	4022      	ands	r2, r4
 8009480:	406a      	eors	r2, r5
 8009482:	461c      	mov	r4, r3
 8009484:	460e      	mov	r6, r1
 8009486:	fbc2 4607 	smlal	r4, r6, r2, r7
 800948a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800948c:	0fe4      	lsrs	r4, r4, #31
 800948e:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
 8009492:	4015      	ands	r5, r2
 8009494:	4020      	ands	r0, r4
 8009496:	4068      	eors	r0, r5
 8009498:	24f2      	movs	r4, #242	@ 0xf2
 800949a:	fbc0 3104 	smlal	r3, r1, r0, r4
 800949e:	0fdb      	lsrs	r3, r3, #31
 80094a0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80094a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80094a8:	4002      	ands	r2, r0
 80094aa:	4019      	ands	r1, r3
 80094ac:	404a      	eors	r2, r1
 80094ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094b0:	ea02 020a 	and.w	r2, r2, sl
 80094b4:	405a      	eors	r2, r3
 80094b6:	1313      	asrs	r3, r2, #12
 80094b8:	0511      	lsls	r1, r2, #20
 80094ba:	9904      	ldr	r1, [sp, #16]
 80094bc:	bf48      	it	mi
 80094be:	3301      	addmi	r3, #1
 80094c0:	4419      	add	r1, r3
 80094c2:	9104      	str	r1, [sp, #16]
 80094c4:	9b01      	ldr	r3, [sp, #4]
 80094c6:	f843 2f04 	str.w	r2, [r3, #4]!
 80094ca:	9a02      	ldr	r2, [sp, #8]
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	f108 0302 	add.w	r3, r8, #2
 80094d2:	1a9b      	subs	r3, r3, r2
 80094d4:	9a03      	ldr	r2, [sp, #12]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d93f      	bls.n	800955a <_lite_kernel_nl_softmax_is8os8+0x3d6>
 80094da:	9a05      	ldr	r2, [sp, #20]
 80094dc:	46d8      	mov	r8, fp
 80094de:	f91b 3f01 	ldrsb.w	r3, [fp, #1]!
 80094e2:	429a      	cmp	r2, r3
 80094e4:	f77f ae7f 	ble.w	80091e6 <_lite_kernel_nl_softmax_is8os8+0x62>
 80094e8:	2200      	movs	r2, #0
 80094ea:	e7eb      	b.n	80094c4 <_lite_kernel_nl_softmax_is8os8+0x340>
 80094ec:	f04f 0902 	mov.w	r9, #2
 80094f0:	e71c      	b.n	800932c <_lite_kernel_nl_softmax_is8os8+0x1a8>
 80094f2:	bf00      	nop
 80094f4:	c0000001 	.word	0xc0000001
 80094f8:	2aaaaaab 	.word	0x2aaaaaab
 80094fc:	70f5a894 	.word	0x70f5a894
 8009500:	63afbe7b 	.word	0x63afbe7b
 8009504:	4da2cbf2 	.word	0x4da2cbf2
 8009508:	2f16ac6c 	.word	0x2f16ac6c
 800950c:	1152aaa4 	.word	0x1152aaa4
 8009510:	02582ab7 	.word	0x02582ab7
 8009514:	000afe11 	.word	0x000afe11
 8009518:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800951c:	f47f ae84 	bne.w	8009228 <_lite_kernel_nl_softmax_is8os8+0xa4>
 8009520:	4dcf      	ldr	r5, [pc, #828]	@ (8009860 <_lite_kernel_nl_softmax_is8os8+0x6dc>)
 8009522:	4bd0      	ldr	r3, [pc, #832]	@ (8009864 <_lite_kernel_nl_softmax_is8os8+0x6e0>)
 8009524:	49d0      	ldr	r1, [pc, #832]	@ (8009868 <_lite_kernel_nl_softmax_is8os8+0x6e4>)
 8009526:	2000      	movs	r0, #0
 8009528:	f04f 3aff 	mov.w	sl, #4294967295
 800952c:	e9cd 5312 	strd	r5, r3, [sp, #72]	@ 0x48
 8009530:	4bce      	ldr	r3, [pc, #824]	@ (800986c <_lite_kernel_nl_softmax_is8os8+0x6e8>)
 8009532:	9310      	str	r3, [sp, #64]	@ 0x40
 8009534:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8009538:	e9cd a009 	strd	sl, r0, [sp, #36]	@ 0x24
 800953c:	e9cd aa0b 	strd	sl, sl, [sp, #44]	@ 0x2c
 8009540:	e9cd a00d 	strd	sl, r0, [sp, #52]	@ 0x34
 8009544:	9008      	str	r0, [sp, #32]
 8009546:	4605      	mov	r5, r0
 8009548:	46d4      	mov	ip, sl
 800954a:	4657      	mov	r7, sl
 800954c:	4656      	mov	r6, sl
 800954e:	4686      	mov	lr, r0
 8009550:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009554:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009556:	9011      	str	r0, [sp, #68]	@ 0x44
 8009558:	e6e6      	b.n	8009328 <_lite_kernel_nl_softmax_is8os8+0x1a4>
 800955a:	9b04      	ldr	r3, [sp, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 81fc 	beq.w	800995a <_lite_kernel_nl_softmax_is8os8+0x7d6>
 8009562:	fab3 fa83 	clz	sl, r3
 8009566:	fa03 f20a 	lsl.w	r2, r3, sl
 800956a:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 800956e:	17d9      	asrs	r1, r3, #31
 8009570:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009574:	bf08      	it	eq
 8009576:	2a00      	cmpeq	r2, #0
 8009578:	f1ca 0523 	rsb	r5, sl, #35	@ 0x23
 800957c:	f000 81f0 	beq.w	8009960 <_lite_kernel_nl_softmax_is8os8+0x7dc>
 8009580:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 8009584:	f141 0100 	adc.w	r1, r1, #0
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 800958e:	4ab8      	ldr	r2, [pc, #736]	@ (8009870 <_lite_kernel_nl_softmax_is8os8+0x6ec>)
 8009590:	4eb8      	ldr	r6, [pc, #736]	@ (8009874 <_lite_kernel_nl_softmax_is8os8+0x6f0>)
 8009592:	1049      	asrs	r1, r1, #1
 8009594:	4258      	negs	r0, r3
 8009596:	fb02 0001 	mla	r0, r2, r1, r0
 800959a:	fba3 2402 	umull	r2, r4, r3, r2
 800959e:	1992      	adds	r2, r2, r6
 80095a0:	4420      	add	r0, r4
 80095a2:	f160 0000 	sbc.w	r0, r0, #0
 80095a6:	2800      	cmp	r0, #0
 80095a8:	469e      	mov	lr, r3
 80095aa:	da05      	bge.n	80095b8 <_lite_kernel_nl_softmax_is8os8+0x434>
 80095ac:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80095b0:	1914      	adds	r4, r2, r4
 80095b2:	4622      	mov	r2, r4
 80095b4:	f140 0000 	adc.w	r0, r0, #0
 80095b8:	0fd2      	lsrs	r2, r2, #31
 80095ba:	ea42 0640 	orr.w	r6, r2, r0, lsl #1
 80095be:	f106 375a 	add.w	r7, r6, #1515870810	@ 0x5a5a5a5a
 80095c2:	17fc      	asrs	r4, r7, #31
 80095c4:	fba3 0c07 	umull	r0, ip, r3, r7
 80095c8:	fb03 f804 	mul.w	r8, r3, r4
 80095cc:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 80095d0:	fb07 8801 	mla	r8, r7, r1, r8
 80095d4:	eb48 0c0c 	adc.w	ip, r8, ip
 80095d8:	f1bc 0f00 	cmp.w	ip, #0
 80095dc:	463a      	mov	r2, r7
 80095de:	da06      	bge.n	80095ee <_lite_kernel_nl_softmax_is8os8+0x46a>
 80095e0:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 80095e4:	eb10 0808 	adds.w	r8, r0, r8
 80095e8:	4640      	mov	r0, r8
 80095ea:	f14c 0c00 	adc.w	ip, ip, #0
 80095ee:	0fc0      	lsrs	r0, r0, #31
 80095f0:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
 80095f4:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 80095f8:	ea80 0c07 	eor.w	ip, r0, r7
 80095fc:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8009600:	f1bc 0f00 	cmp.w	ip, #0
 8009604:	bf08      	it	eq
 8009606:	f04f 0900 	moveq.w	r9, #0
 800960a:	f8df c268 	ldr.w	ip, [pc, #616]	@ 8009874 <_lite_kernel_nl_softmax_is8os8+0x6f0>
 800960e:	bf14      	ite	ne
 8009610:	f04f 39ff 	movne.w	r9, #4294967295
 8009614:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8009618:	fb00 f404 	mul.w	r4, r0, r4
 800961c:	ea4f 78e0 	mov.w	r8, r0, asr #31
 8009620:	fb02 4408 	mla	r4, r2, r8, r4
 8009624:	fba0 2002 	umull	r2, r0, r0, r2
 8009628:	eb12 020c 	adds.w	r2, r2, ip
 800962c:	4404      	add	r4, r0
 800962e:	eb44 0409 	adc.w	r4, r4, r9
 8009632:	2c00      	cmp	r4, #0
 8009634:	da05      	bge.n	8009642 <_lite_kernel_nl_softmax_is8os8+0x4be>
 8009636:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800963a:	1810      	adds	r0, r2, r0
 800963c:	4602      	mov	r2, r0
 800963e:	f144 0400 	adc.w	r4, r4, #0
 8009642:	0fd2      	lsrs	r2, r2, #31
 8009644:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8009648:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 800964c:	f340 812a 	ble.w	80098a4 <_lite_kernel_nl_softmax_is8os8+0x720>
 8009650:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 8009654:	ea80 020e 	eor.w	r2, r0, lr
 8009658:	0fd2      	lsrs	r2, r2, #31
 800965a:	2a00      	cmp	r2, #0
 800965c:	4f85      	ldr	r7, [pc, #532]	@ (8009874 <_lite_kernel_nl_softmax_is8os8+0x6f0>)
 800965e:	ea4f 74e0 	mov.w	r4, r0, asr #31
 8009662:	fb00 f601 	mul.w	r6, r0, r1
 8009666:	fba0 2803 	umull	r2, r8, r0, r3
 800966a:	bf08      	it	eq
 800966c:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8009670:	fb03 6604 	mla	r6, r3, r4, r6
 8009674:	bf0c      	ite	eq
 8009676:	f04f 0c00 	moveq.w	ip, #0
 800967a:	f04f 3cff 	movne.w	ip, #4294967295
 800967e:	4446      	add	r6, r8
 8009680:	19d2      	adds	r2, r2, r7
 8009682:	eb46 060c 	adc.w	r6, r6, ip
 8009686:	2e00      	cmp	r6, #0
 8009688:	da05      	bge.n	8009696 <_lite_kernel_nl_softmax_is8os8+0x512>
 800968a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800968e:	19d7      	adds	r7, r2, r7
 8009690:	463a      	mov	r2, r7
 8009692:	f146 0600 	adc.w	r6, r6, #0
 8009696:	0fd2      	lsrs	r2, r2, #31
 8009698:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 800969c:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 80096a0:	ea80 0602 	eor.w	r6, r0, r2
 80096a4:	0ff6      	lsrs	r6, r6, #31
 80096a6:	2e00      	cmp	r6, #0
 80096a8:	bf08      	it	eq
 80096aa:	2700      	moveq	r7, #0
 80096ac:	4e71      	ldr	r6, [pc, #452]	@ (8009874 <_lite_kernel_nl_softmax_is8os8+0x6f0>)
 80096ae:	bf14      	ite	ne
 80096b0:	f04f 37ff 	movne.w	r7, #4294967295
 80096b4:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 80096b8:	fb02 f404 	mul.w	r4, r2, r4
 80096bc:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80096c0:	fb00 440c 	mla	r4, r0, ip, r4
 80096c4:	fba2 2c00 	umull	r2, ip, r2, r0
 80096c8:	1992      	adds	r2, r2, r6
 80096ca:	4464      	add	r4, ip
 80096cc:	eb44 0407 	adc.w	r4, r4, r7
 80096d0:	2c00      	cmp	r4, #0
 80096d2:	da05      	bge.n	80096e0 <_lite_kernel_nl_softmax_is8os8+0x55c>
 80096d4:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80096d8:	1996      	adds	r6, r2, r6
 80096da:	4632      	mov	r2, r6
 80096dc:	f144 0400 	adc.w	r4, r4, #0
 80096e0:	0fd2      	lsrs	r2, r2, #31
 80096e2:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80096e6:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80096ea:	f2c0 810b 	blt.w	8009904 <_lite_kernel_nl_softmax_is8os8+0x780>
 80096ee:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80096f2:	1902      	adds	r2, r0, r4
 80096f4:	ea92 0f0e 	teq	r2, lr
 80096f8:	f140 80d0 	bpl.w	800989c <_lite_kernel_nl_softmax_is8os8+0x718>
 80096fc:	4c5d      	ldr	r4, [pc, #372]	@ (8009874 <_lite_kernel_nl_softmax_is8os8+0x6f0>)
 80096fe:	f04f 36ff 	mov.w	r6, #4294967295
 8009702:	fb02 f101 	mul.w	r1, r2, r1
 8009706:	17d0      	asrs	r0, r2, #31
 8009708:	fb03 1100 	mla	r1, r3, r0, r1
 800970c:	fba2 3703 	umull	r3, r7, r2, r3
 8009710:	191b      	adds	r3, r3, r4
 8009712:	4439      	add	r1, r7
 8009714:	eb41 0106 	adc.w	r1, r1, r6
 8009718:	2900      	cmp	r1, #0
 800971a:	da05      	bge.n	8009728 <_lite_kernel_nl_softmax_is8os8+0x5a4>
 800971c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8009720:	191c      	adds	r4, r3, r4
 8009722:	4623      	mov	r3, r4
 8009724:	f141 0100 	adc.w	r1, r1, #0
 8009728:	0fdb      	lsrs	r3, r3, #31
 800972a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800972e:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8009732:	ea83 0102 	eor.w	r1, r3, r2
 8009736:	0fc9      	lsrs	r1, r1, #31
 8009738:	2900      	cmp	r1, #0
 800973a:	bf08      	it	eq
 800973c:	2400      	moveq	r4, #0
 800973e:	494d      	ldr	r1, [pc, #308]	@ (8009874 <_lite_kernel_nl_softmax_is8os8+0x6f0>)
 8009740:	bf14      	ite	ne
 8009742:	f04f 34ff 	movne.w	r4, #4294967295
 8009746:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 800974a:	fb03 f000 	mul.w	r0, r3, r0
 800974e:	17de      	asrs	r6, r3, #31
 8009750:	fb02 0006 	mla	r0, r2, r6, r0
 8009754:	fba3 3602 	umull	r3, r6, r3, r2
 8009758:	185b      	adds	r3, r3, r1
 800975a:	4430      	add	r0, r6
 800975c:	eb40 0004 	adc.w	r0, r0, r4
 8009760:	2800      	cmp	r0, #0
 8009762:	da05      	bge.n	8009770 <_lite_kernel_nl_softmax_is8os8+0x5ec>
 8009764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009768:	1859      	adds	r1, r3, r1
 800976a:	460b      	mov	r3, r1
 800976c:	f140 0000 	adc.w	r0, r0, #0
 8009770:	0fdb      	lsrs	r3, r3, #31
 8009772:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8009776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800977a:	f2c0 8082 	blt.w	8009882 <_lite_kernel_nl_softmax_is8os8+0x6fe>
 800977e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8009782:	4402      	add	r2, r0
 8009784:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8009788:	bfb8      	it	lt
 800978a:	0050      	lsllt	r0, r2, #1
 800978c:	2d1f      	cmp	r5, #31
 800978e:	dd03      	ble.n	8009798 <_lite_kernel_nl_softmax_is8os8+0x614>
 8009790:	f1ca 0304 	rsb	r3, sl, #4
 8009794:	4118      	asrs	r0, r3
 8009796:	251f      	movs	r5, #31
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d046      	beq.n	800982c <_lite_kernel_nl_softmax_is8os8+0x6a8>
 800979e:	2701      	movs	r7, #1
 80097a0:	40af      	lsls	r7, r5
 80097a2:	3f01      	subs	r7, #1
 80097a4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80097a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097aa:	f8df e0c8 	ldr.w	lr, [pc, #200]	@ 8009874 <_lite_kernel_nl_softmax_is8os8+0x6f0>
 80097ae:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80097b0:	ea07 0b0c 	and.w	fp, r7, ip
 80097b4:	ea4f 0867 	mov.w	r8, r7, asr #1
 80097b8:	f8cd b004 	str.w	fp, [sp, #4]
 80097bc:	f108 0901 	add.w	r9, r8, #1
 80097c0:	f8dd b064 	ldr.w	fp, [sp, #100]	@ 0x64
 80097c4:	fa4c fa05 	asr.w	sl, ip, r5
 80097c8:	1e5e      	subs	r6, r3, #1
 80097ca:	e009      	b.n	80097e0 <_lite_kernel_nl_softmax_is8os8+0x65c>
 80097cc:	4590      	cmp	r8, r2
 80097ce:	da00      	bge.n	80097d2 <_lite_kernel_nl_softmax_is8os8+0x64e>
 80097d0:	3301      	adds	r3, #1
 80097d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80097d4:	dd50      	ble.n	8009878 <_lite_kernel_nl_softmax_is8os8+0x6f4>
 80097d6:	237f      	movs	r3, #127	@ 0x7f
 80097d8:	45a3      	cmp	fp, r4
 80097da:	f806 3f01 	strb.w	r3, [r6, #1]!
 80097de:	d025      	beq.n	800982c <_lite_kernel_nl_softmax_is8os8+0x6a8>
 80097e0:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80097e4:	ea80 0301 	eor.w	r3, r0, r1
 80097e8:	0fdb      	lsrs	r3, r3, #31
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bf0b      	itete	eq
 80097ee:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80097f2:	4673      	movne	r3, lr
 80097f4:	2200      	moveq	r2, #0
 80097f6:	f04f 32ff 	movne.w	r2, #4294967295
 80097fa:	fbc1 3200 	smlal	r3, r2, r1, r0
 80097fe:	2a00      	cmp	r2, #0
 8009800:	da03      	bge.n	800980a <_lite_kernel_nl_softmax_is8os8+0x686>
 8009802:	eb13 030c 	adds.w	r3, r3, ip
 8009806:	f142 0200 	adc.w	r2, r2, #0
 800980a:	0fdb      	lsrs	r3, r3, #31
 800980c:	4288      	cmp	r0, r1
 800980e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8009812:	d01e      	beq.n	8009852 <_lite_kernel_nl_softmax_is8os8+0x6ce>
 8009814:	ea07 0203 	and.w	r2, r7, r3
 8009818:	412b      	asrs	r3, r5
 800981a:	d5d7      	bpl.n	80097cc <_lite_kernel_nl_softmax_is8os8+0x648>
 800981c:	4591      	cmp	r9, r2
 800981e:	dbd7      	blt.n	80097d0 <_lite_kernel_nl_softmax_is8os8+0x64c>
 8009820:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8009824:	45a3      	cmp	fp, r4
 8009826:	f806 3f01 	strb.w	r3, [r6, #1]!
 800982a:	d1d9      	bne.n	80097e0 <_lite_kernel_nl_softmax_is8os8+0x65c>
 800982c:	9b02      	ldr	r3, [sp, #8]
 800982e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009830:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8009832:	4413      	add	r3, r2
 8009834:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	440a      	add	r2, r1
 800983a:	9215      	str	r2, [sp, #84]	@ 0x54
 800983c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800983e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009840:	440a      	add	r2, r1
 8009842:	9216      	str	r2, [sp, #88]	@ 0x58
 8009844:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009846:	429a      	cmp	r2, r3
 8009848:	f63f acb1 	bhi.w	80091ae <_lite_kernel_nl_softmax_is8os8+0x2a>
 800984c:	b01b      	add	sp, #108	@ 0x6c
 800984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009852:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8009856:	d1dd      	bne.n	8009814 <_lite_kernel_nl_softmax_is8os8+0x690>
 8009858:	9a01      	ldr	r2, [sp, #4]
 800985a:	4653      	mov	r3, sl
 800985c:	e7b6      	b.n	80097cc <_lite_kernel_nl_softmax_is8os8+0x648>
 800985e:	bf00      	nop
 8009860:	40000100 	.word	0x40000100
 8009864:	001fffff 	.word	0x001fffff
 8009868:	0fffffe0 	.word	0x0fffffe0
 800986c:	01fffff8 	.word	0x01fffff8
 8009870:	c3c3c3c4 	.word	0xc3c3c3c4
 8009874:	c0000001 	.word	0xc0000001
 8009878:	2b00      	cmp	r3, #0
 800987a:	ddd1      	ble.n	8009820 <_lite_kernel_nl_softmax_is8os8+0x69c>
 800987c:	3b80      	subs	r3, #128	@ 0x80
 800987e:	b25b      	sxtb	r3, r3
 8009880:	e7aa      	b.n	80097d8 <_lite_kernel_nl_softmax_is8os8+0x654>
 8009882:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8009886:	f300 8095 	bgt.w	80099b4 <_lite_kernel_nl_softmax_is8os8+0x830>
 800988a:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 800988e:	0050      	lsls	r0, r2, #1
 8009890:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009894:	bfd8      	it	le
 8009896:	f04f 4000 	movle.w	r0, #2147483648	@ 0x80000000
 800989a:	e777      	b.n	800978c <_lite_kernel_nl_softmax_is8os8+0x608>
 800989c:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80098a0:	2600      	movs	r6, #0
 80098a2:	e72e      	b.n	8009702 <_lite_kernel_nl_softmax_is8os8+0x57e>
 80098a4:	f106 305a 	add.w	r0, r6, #1515870810	@ 0x5a5a5a5a
 80098a8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80098ac:	ea90 0f0e 	teq	r0, lr
 80098b0:	d564      	bpl.n	800997c <_lite_kernel_nl_softmax_is8os8+0x7f8>
 80098b2:	4e46      	ldr	r6, [pc, #280]	@ (80099cc <_lite_kernel_nl_softmax_is8os8+0x848>)
 80098b4:	17c2      	asrs	r2, r0, #31
 80098b6:	fb00 f401 	mul.w	r4, r0, r1
 80098ba:	fb03 4402 	mla	r4, r3, r2, r4
 80098be:	fba0 2703 	umull	r2, r7, r0, r3
 80098c2:	1992      	adds	r2, r2, r6
 80098c4:	443c      	add	r4, r7
 80098c6:	f164 0600 	sbc.w	r6, r4, #0
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	da05      	bge.n	80098da <_lite_kernel_nl_softmax_is8os8+0x756>
 80098ce:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80098d2:	1914      	adds	r4, r2, r4
 80098d4:	4622      	mov	r2, r4
 80098d6:	f146 0600 	adc.w	r6, r6, #0
 80098da:	0fd2      	lsrs	r2, r2, #31
 80098dc:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 80098e0:	f1c2 5400 	rsb	r4, r2, #536870912	@ 0x20000000
 80098e4:	4a39      	ldr	r2, [pc, #228]	@ (80099cc <_lite_kernel_nl_softmax_is8os8+0x848>)
 80098e6:	f04f 36ff 	mov.w	r6, #4294967295
 80098ea:	fbc0 2604 	smlal	r2, r6, r0, r4
 80098ee:	2e00      	cmp	r6, #0
 80098f0:	da05      	bge.n	80098fe <_lite_kernel_nl_softmax_is8os8+0x77a>
 80098f2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80098f6:	1914      	adds	r4, r2, r4
 80098f8:	4622      	mov	r2, r4
 80098fa:	f146 0600 	adc.w	r6, r6, #0
 80098fe:	0fd2      	lsrs	r2, r2, #31
 8009900:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 8009904:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 8009908:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800990c:	f73f aef1 	bgt.w	80096f2 <_lite_kernel_nl_softmax_is8os8+0x56e>
 8009910:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8009914:	ea9e 0f02 	teq	lr, r2
 8009918:	d5c0      	bpl.n	800989c <_lite_kernel_nl_softmax_is8os8+0x718>
 800991a:	4c2c      	ldr	r4, [pc, #176]	@ (80099cc <_lite_kernel_nl_softmax_is8os8+0x848>)
 800991c:	fb02 f101 	mul.w	r1, r2, r1
 8009920:	17d0      	asrs	r0, r2, #31
 8009922:	fb03 1100 	mla	r1, r3, r0, r1
 8009926:	fba2 3603 	umull	r3, r6, r2, r3
 800992a:	191b      	adds	r3, r3, r4
 800992c:	4431      	add	r1, r6
 800992e:	f161 0100 	sbc.w	r1, r1, #0
 8009932:	2900      	cmp	r1, #0
 8009934:	da05      	bge.n	8009942 <_lite_kernel_nl_softmax_is8os8+0x7be>
 8009936:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800993a:	191c      	adds	r4, r3, r4
 800993c:	4623      	mov	r3, r4
 800993e:	f141 0100 	adc.w	r1, r1, #0
 8009942:	0fdb      	lsrs	r3, r3, #31
 8009944:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8009948:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800994c:	491f      	ldr	r1, [pc, #124]	@ (80099cc <_lite_kernel_nl_softmax_is8os8+0x848>)
 800994e:	f04f 34ff 	mov.w	r4, #4294967295
 8009952:	e6fa      	b.n	800974a <_lite_kernel_nl_softmax_is8os8+0x5c6>
 8009954:	2a00      	cmp	r2, #0
 8009956:	f47f ac39 	bne.w	80091cc <_lite_kernel_nl_softmax_is8os8+0x48>
 800995a:	2503      	movs	r5, #3
 800995c:	f04f 0a20 	mov.w	sl, #32
 8009960:	2400      	movs	r4, #0
 8009962:	f04f 33ff 	mov.w	r3, #4294967295
 8009966:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
 800996a:	4819      	ldr	r0, [pc, #100]	@ (80099d0 <_lite_kernel_nl_softmax_is8os8+0x84c>)
 800996c:	4617      	mov	r7, r2
 800996e:	4626      	mov	r6, r4
 8009970:	4619      	mov	r1, r3
 8009972:	469e      	mov	lr, r3
 8009974:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 8009978:	46a1      	mov	r9, r4
 800997a:	e64d      	b.n	8009618 <_lite_kernel_nl_softmax_is8os8+0x494>
 800997c:	17c4      	asrs	r4, r0, #31
 800997e:	fba3 2600 	umull	r2, r6, r3, r0
 8009982:	fb03 f704 	mul.w	r7, r3, r4
 8009986:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800998a:	fb00 7701 	mla	r7, r0, r1, r7
 800998e:	eb47 0606 	adc.w	r6, r7, r6
 8009992:	2e00      	cmp	r6, #0
 8009994:	da05      	bge.n	80099a2 <_lite_kernel_nl_softmax_is8os8+0x81e>
 8009996:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800999a:	19d7      	adds	r7, r2, r7
 800999c:	463a      	mov	r2, r7
 800999e:	f146 0600 	adc.w	r6, r6, #0
 80099a2:	0fd2      	lsrs	r2, r2, #31
 80099a4:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 80099a8:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 80099ac:	4e07      	ldr	r6, [pc, #28]	@ (80099cc <_lite_kernel_nl_softmax_is8os8+0x848>)
 80099ae:	f04f 37ff 	mov.w	r7, #4294967295
 80099b2:	e681      	b.n	80096b8 <_lite_kernel_nl_softmax_is8os8+0x534>
 80099b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099bc:	ea4f 0043 	mov.w	r0, r3, lsl #1
 80099c0:	f6ff af66 	blt.w	8009890 <_lite_kernel_nl_softmax_is8os8+0x70c>
 80099c4:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80099c8:	e6e0      	b.n	800978c <_lite_kernel_nl_softmax_is8os8+0x608>
 80099ca:	bf00      	nop
 80099cc:	c0000001 	.word	0xc0000001
 80099d0:	20000001 	.word	0x20000001

080099d4 <_lite_kernel_nl_softmax_iu8ou8>:
 80099d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	188a      	adds	r2, r1, r2
 80099da:	b09b      	sub	sp, #108	@ 0x6c
 80099dc:	4291      	cmp	r1, r2
 80099de:	9218      	str	r2, [sp, #96]	@ 0x60
 80099e0:	9015      	str	r0, [sp, #84]	@ 0x54
 80099e2:	9303      	str	r3, [sp, #12]
 80099e4:	f080 8358 	bcs.w	800a098 <_lite_kernel_nl_softmax_iu8ou8+0x6c4>
 80099e8:	461a      	mov	r2, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	18cb      	adds	r3, r1, r3
 80099ee:	9316      	str	r3, [sp, #88]	@ 0x58
 80099f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80099f2:	9102      	str	r1, [sp, #8]
 80099f4:	3b04      	subs	r3, #4
 80099f6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80099f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80099fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80099fe:	9a03      	ldr	r2, [sp, #12]
 8009a00:	9b02      	ldr	r3, [sp, #8]
 8009a02:	2a01      	cmp	r2, #1
 8009a04:	f893 9000 	ldrb.w	r9, [r3]
 8009a08:	f240 83c9 	bls.w	800a19e <_lite_kernel_nl_softmax_iu8ou8+0x7ca>
 8009a0c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8009a0e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8009a12:	4591      	cmp	r9, r2
 8009a14:	bfb8      	it	lt
 8009a16:	4691      	movlt	r9, r2
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	d1f8      	bne.n	8009a0e <_lite_kernel_nl_softmax_iu8ou8+0x3a>
 8009a1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009a1e:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8009a22:	444b      	add	r3, r9
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	9b02      	ldr	r3, [sp, #8]
 8009a28:	f103 3bff 	add.w	fp, r3, #4294967295
 8009a2c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	2300      	movs	r3, #0
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	e179      	b.n	8009d2a <_lite_kernel_nl_softmax_iu8ou8+0x356>
 8009a36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a38:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8009a3a:	1a9b      	subs	r3, r3, r2
 8009a3c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8009a3e:	4093      	lsls	r3, r2
 8009a40:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009a42:	405a      	eors	r2, r3
 8009a44:	0fd2      	lsrs	r2, r2, #31
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	4abe      	ldr	r2, [pc, #760]	@ (8009d44 <_lite_kernel_nl_softmax_iu8ou8+0x370>)
 8009a4a:	bf0b      	itete	eq
 8009a4c:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 8009a50:	4616      	movne	r6, r2
 8009a52:	2200      	moveq	r2, #0
 8009a54:	f04f 32ff 	movne.w	r2, #4294967295
 8009a58:	fbc1 6203 	smlal	r6, r2, r1, r3
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	da04      	bge.n	8009a6a <_lite_kernel_nl_softmax_iu8ou8+0x96>
 8009a60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a64:	1876      	adds	r6, r6, r1
 8009a66:	f142 0200 	adc.w	r2, r2, #0
 8009a6a:	0ff6      	lsrs	r6, r6, #31
 8009a6c:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
 8009a70:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009a72:	429a      	cmp	r2, r3
 8009a74:	f000 8178 	beq.w	8009d68 <_lite_kernel_nl_softmax_iu8ou8+0x394>
 8009a78:	f046 497f 	orr.w	r9, r6, #4278190080	@ 0xff000000
 8009a7c:	ea4f 1149 	mov.w	r1, r9, lsl #5
 8009a80:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8009a84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a88:	f04f 0a00 	mov.w	sl, #0
 8009a8c:	eba9 0906 	sub.w	r9, r9, r6
 8009a90:	fbc1 3a01 	smlal	r3, sl, r1, r1
 8009a94:	f349 7280 	sbfx	r2, r9, #30, #1
 8009a98:	f1ba 0f00 	cmp.w	sl, #0
 8009a9c:	f3c9 7480 	ubfx	r4, r9, #30, #1
 8009aa0:	9211      	str	r2, [sp, #68]	@ 0x44
 8009aa2:	da05      	bge.n	8009ab0 <_lite_kernel_nl_softmax_iu8ou8+0xdc>
 8009aa4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8009aa8:	189a      	adds	r2, r3, r2
 8009aaa:	4613      	mov	r3, r2
 8009aac:	f14a 0a00 	adc.w	sl, sl, #0
 8009ab0:	0fdb      	lsrs	r3, r3, #31
 8009ab2:	ea43 034a 	orr.w	r3, r3, sl, lsl #1
 8009ab6:	fba3 2003 	umull	r2, r0, r3, r3
 8009aba:	ea4f 7aea 	mov.w	sl, sl, asr #31
 8009abe:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8009ac2:	fb03 f50a 	mul.w	r5, r3, sl
 8009ac6:	eb40 0045 	adc.w	r0, r0, r5, lsl #1
 8009aca:	2800      	cmp	r0, #0
 8009acc:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ace:	da05      	bge.n	8009adc <_lite_kernel_nl_softmax_iu8ou8+0x108>
 8009ad0:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8009ad4:	1955      	adds	r5, r2, r5
 8009ad6:	462a      	mov	r2, r5
 8009ad8:	f140 0000 	adc.w	r0, r0, #0
 8009adc:	0fd2      	lsrs	r2, r2, #31
 8009ade:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8009ae2:	1e60      	subs	r0, r4, #1
 8009ae4:	fb01 fa0a 	mul.w	sl, r1, sl
 8009ae8:	900d      	str	r0, [sp, #52]	@ 0x34
 8009aea:	17c8      	asrs	r0, r1, #31
 8009aec:	fb03 aa00 	mla	sl, r3, r0, sl
 8009af0:	f3c9 7040 	ubfx	r0, r9, #29, #1
 8009af4:	9006      	str	r0, [sp, #24]
 8009af6:	ea83 0e01 	eor.w	lr, r3, r1
 8009afa:	fab6 f686 	clz	r6, r6
 8009afe:	fba1 3003 	umull	r3, r0, r1, r3
 8009b02:	0976      	lsrs	r6, r6, #5
 8009b04:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b06:	4603      	mov	r3, r0
 8009b08:	4453      	add	r3, sl
 8009b0a:	f1c6 0a00 	rsb	sl, r6, #0
 8009b0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b10:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8009b14:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b16:	f349 6340 	sbfx	r3, r9, #25, #1
 8009b1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b1c:	f002 0303 	and.w	r3, r2, #3
 8009b20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b22:	9b06      	ldr	r3, [sp, #24]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	f3c9 7c00 	ubfx	ip, r9, #28, #1
 8009b2e:	4258      	negs	r0, r3
 8009b30:	f10c 33ff 	add.w	r3, ip, #4294967295
 8009b34:	f3c9 67c0 	ubfx	r7, r9, #27, #1
 8009b38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b3a:	f1cc 0300 	rsb	r3, ip, #0
 8009b3e:	9306      	str	r3, [sp, #24]
 8009b40:	1e7b      	subs	r3, r7, #1
 8009b42:	f3c9 6480 	ubfx	r4, r9, #26, #1
 8009b46:	1092      	asrs	r2, r2, #2
 8009b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b4a:	427b      	negs	r3, r7
 8009b4c:	f3c9 6500 	ubfx	r5, r9, #24, #1
 8009b50:	f106 3aff 	add.w	sl, r6, #4294967295
 8009b54:	9308      	str	r3, [sp, #32]
 8009b56:	f3c9 6640 	ubfx	r6, r9, #25, #1
 8009b5a:	4263      	negs	r3, r4
 8009b5c:	2a00      	cmp	r2, #0
 8009b5e:	f105 3cff 	add.w	ip, r5, #4294967295
 8009b62:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8009b66:	f106 36ff 	add.w	r6, r6, #4294967295
 8009b6a:	f104 37ff 	add.w	r7, r4, #4294967295
 8009b6e:	9307      	str	r3, [sp, #28]
 8009b70:	f1c5 0500 	rsb	r5, r5, #0
 8009b74:	f2c0 80e2 	blt.w	8009d3c <_lite_kernel_nl_softmax_iu8ou8+0x368>
 8009b78:	f04f 0901 	mov.w	r9, #1
 8009b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b7e:	4599      	cmp	r9, r3
 8009b80:	4b70      	ldr	r3, [pc, #448]	@ (8009d44 <_lite_kernel_nl_softmax_iu8ou8+0x370>)
 8009b82:	bfb8      	it	lt
 8009b84:	3201      	addlt	r2, #1
 8009b86:	f1be 0f00 	cmp.w	lr, #0
 8009b8a:	bf18      	it	ne
 8009b8c:	469e      	movne	lr, r3
 8009b8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b90:	bf06      	itte	eq
 8009b92:	f04f 4e80 	moveq.w	lr, #1073741824	@ 0x40000000
 8009b96:	f04f 0900 	moveq.w	r9, #0
 8009b9a:	f04f 39ff 	movne.w	r9, #4294967295
 8009b9e:	eb1e 0e03 	adds.w	lr, lr, r3
 8009ba2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ba4:	eb43 0909 	adc.w	r9, r3, r9
 8009ba8:	f1b9 0f00 	cmp.w	r9, #0
 8009bac:	da06      	bge.n	8009bbc <_lite_kernel_nl_softmax_iu8ou8+0x1e8>
 8009bae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009bb2:	eb1e 0303 	adds.w	r3, lr, r3
 8009bb6:	469e      	mov	lr, r3
 8009bb8:	f149 0900 	adc.w	r9, r9, #0
 8009bbc:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8009bc0:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
 8009bc4:	4496      	add	lr, r2
 8009bc6:	ea4f 73de 	mov.w	r3, lr, lsr #31
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	4c5e      	ldr	r4, [pc, #376]	@ (8009d48 <_lite_kernel_nl_softmax_iu8ou8+0x374>)
 8009bce:	4b5d      	ldr	r3, [pc, #372]	@ (8009d44 <_lite_kernel_nl_softmax_iu8ou8+0x370>)
 8009bd0:	bf06      	itte	eq
 8009bd2:	2200      	moveq	r2, #0
 8009bd4:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8009bd8:	f04f 32ff 	movne.w	r2, #4294967295
 8009bdc:	fbce 3204 	smlal	r3, r2, lr, r4
 8009be0:	2a00      	cmp	r2, #0
 8009be2:	da06      	bge.n	8009bf2 <_lite_kernel_nl_softmax_iu8ou8+0x21e>
 8009be4:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8009be8:	eb13 0e0e 	adds.w	lr, r3, lr
 8009bec:	4673      	mov	r3, lr
 8009bee:	f142 0200 	adc.w	r2, r2, #0
 8009bf2:	0fdb      	lsrs	r3, r3, #31
 8009bf4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8009bf8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009bfa:	441a      	add	r2, r3
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	1052      	asrs	r2, r2, #1
 8009c00:	d402      	bmi.n	8009c08 <_lite_kernel_nl_softmax_iu8ou8+0x234>
 8009c02:	07dc      	lsls	r4, r3, #31
 8009c04:	bf48      	it	mi
 8009c06:	3201      	addmi	r2, #1
 8009c08:	1853      	adds	r3, r2, r1
 8009c0a:	0fda      	lsrs	r2, r3, #31
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	4c4f      	ldr	r4, [pc, #316]	@ (8009d4c <_lite_kernel_nl_softmax_iu8ou8+0x378>)
 8009c10:	4a4c      	ldr	r2, [pc, #304]	@ (8009d44 <_lite_kernel_nl_softmax_iu8ou8+0x370>)
 8009c12:	bf06      	itte	eq
 8009c14:	2100      	moveq	r1, #0
 8009c16:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8009c1a:	f04f 31ff 	movne.w	r1, #4294967295
 8009c1e:	fbc3 2104 	smlal	r2, r1, r3, r4
 8009c22:	2900      	cmp	r1, #0
 8009c24:	da05      	bge.n	8009c32 <_lite_kernel_nl_softmax_iu8ou8+0x25e>
 8009c26:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009c2a:	18d3      	adds	r3, r2, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	f141 0100 	adc.w	r1, r1, #0
 8009c32:	0fd2      	lsrs	r2, r2, #31
 8009c34:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8009c38:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 8009c3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009c40:	2100      	movs	r1, #0
 8009c42:	4c43      	ldr	r4, [pc, #268]	@ (8009d50 <_lite_kernel_nl_softmax_iu8ou8+0x37c>)
 8009c44:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 8009c48:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 8009c4c:	469e      	mov	lr, r3
 8009c4e:	4689      	mov	r9, r1
 8009c50:	fbc2 e904 	smlal	lr, r9, r2, r4
 8009c54:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8009c58:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
 8009c5c:	ea02 0c0c 	and.w	ip, r2, ip
 8009c60:	4c3c      	ldr	r4, [pc, #240]	@ (8009d54 <_lite_kernel_nl_softmax_iu8ou8+0x380>)
 8009c62:	ea05 050e 	and.w	r5, r5, lr
 8009c66:	ea8c 0505 	eor.w	r5, ip, r5
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	468c      	mov	ip, r1
 8009c6e:	fbc5 2c04 	smlal	r2, ip, r5, r4
 8009c72:	402e      	ands	r6, r5
 8009c74:	0fd2      	lsrs	r2, r2, #31
 8009c76:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009c78:	4c37      	ldr	r4, [pc, #220]	@ (8009d58 <_lite_kernel_nl_softmax_iu8ou8+0x384>)
 8009c7a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8009c7e:	4015      	ands	r5, r2
 8009c80:	462a      	mov	r2, r5
 8009c82:	4072      	eors	r2, r6
 8009c84:	461d      	mov	r5, r3
 8009c86:	460e      	mov	r6, r1
 8009c88:	fbc2 5604 	smlal	r5, r6, r2, r4
 8009c8c:	0fed      	lsrs	r5, r5, #31
 8009c8e:	9c07      	ldr	r4, [sp, #28]
 8009c90:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 8009c94:	4017      	ands	r7, r2
 8009c96:	402c      	ands	r4, r5
 8009c98:	407c      	eors	r4, r7
 8009c9a:	4f30      	ldr	r7, [pc, #192]	@ (8009d5c <_lite_kernel_nl_softmax_iu8ou8+0x388>)
 8009c9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	460e      	mov	r6, r1
 8009ca2:	fbc4 2607 	smlal	r2, r6, r4, r7
 8009ca6:	4025      	ands	r5, r4
 8009ca8:	0fd2      	lsrs	r2, r2, #31
 8009caa:	9c08      	ldr	r4, [sp, #32]
 8009cac:	4f2c      	ldr	r7, [pc, #176]	@ (8009d60 <_lite_kernel_nl_softmax_iu8ou8+0x38c>)
 8009cae:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 8009cb2:	4014      	ands	r4, r2
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	406a      	eors	r2, r5
 8009cb8:	461c      	mov	r4, r3
 8009cba:	460e      	mov	r6, r1
 8009cbc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009cbe:	fbc2 4607 	smlal	r4, r6, r2, r7
 8009cc2:	4015      	ands	r5, r2
 8009cc4:	0fe4      	lsrs	r4, r4, #31
 8009cc6:	9a06      	ldr	r2, [sp, #24]
 8009cc8:	4f26      	ldr	r7, [pc, #152]	@ (8009d64 <_lite_kernel_nl_softmax_iu8ou8+0x390>)
 8009cca:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
 8009cce:	4022      	ands	r2, r4
 8009cd0:	406a      	eors	r2, r5
 8009cd2:	461c      	mov	r4, r3
 8009cd4:	460e      	mov	r6, r1
 8009cd6:	fbc2 4607 	smlal	r4, r6, r2, r7
 8009cda:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8009cdc:	0fe4      	lsrs	r4, r4, #31
 8009cde:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
 8009ce2:	4015      	ands	r5, r2
 8009ce4:	4020      	ands	r0, r4
 8009ce6:	4068      	eors	r0, r5
 8009ce8:	24f2      	movs	r4, #242	@ 0xf2
 8009cea:	fbc0 3104 	smlal	r3, r1, r0, r4
 8009cee:	0fdb      	lsrs	r3, r3, #31
 8009cf0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8009cf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cf6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009cf8:	4002      	ands	r2, r0
 8009cfa:	4019      	ands	r1, r3
 8009cfc:	404a      	eors	r2, r1
 8009cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d00:	ea02 020a 	and.w	r2, r2, sl
 8009d04:	405a      	eors	r2, r3
 8009d06:	1313      	asrs	r3, r2, #12
 8009d08:	0511      	lsls	r1, r2, #20
 8009d0a:	9904      	ldr	r1, [sp, #16]
 8009d0c:	bf48      	it	mi
 8009d0e:	3301      	addmi	r3, #1
 8009d10:	4419      	add	r1, r3
 8009d12:	9104      	str	r1, [sp, #16]
 8009d14:	9b01      	ldr	r3, [sp, #4]
 8009d16:	f843 2f04 	str.w	r2, [r3, #4]!
 8009d1a:	9a02      	ldr	r2, [sp, #8]
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	f108 0302 	add.w	r3, r8, #2
 8009d22:	1a9b      	subs	r3, r3, r2
 8009d24:	9a03      	ldr	r2, [sp, #12]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d93f      	bls.n	8009daa <_lite_kernel_nl_softmax_iu8ou8+0x3d6>
 8009d2a:	9a05      	ldr	r2, [sp, #20]
 8009d2c:	46d8      	mov	r8, fp
 8009d2e:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8009d32:	429a      	cmp	r2, r3
 8009d34:	f77f ae7f 	ble.w	8009a36 <_lite_kernel_nl_softmax_iu8ou8+0x62>
 8009d38:	2200      	movs	r2, #0
 8009d3a:	e7eb      	b.n	8009d14 <_lite_kernel_nl_softmax_iu8ou8+0x340>
 8009d3c:	f04f 0902 	mov.w	r9, #2
 8009d40:	e71c      	b.n	8009b7c <_lite_kernel_nl_softmax_iu8ou8+0x1a8>
 8009d42:	bf00      	nop
 8009d44:	c0000001 	.word	0xc0000001
 8009d48:	2aaaaaab 	.word	0x2aaaaaab
 8009d4c:	70f5a894 	.word	0x70f5a894
 8009d50:	63afbe7b 	.word	0x63afbe7b
 8009d54:	4da2cbf2 	.word	0x4da2cbf2
 8009d58:	2f16ac6c 	.word	0x2f16ac6c
 8009d5c:	1152aaa4 	.word	0x1152aaa4
 8009d60:	02582ab7 	.word	0x02582ab7
 8009d64:	000afe11 	.word	0x000afe11
 8009d68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8009d6c:	f47f ae84 	bne.w	8009a78 <_lite_kernel_nl_softmax_iu8ou8+0xa4>
 8009d70:	4dce      	ldr	r5, [pc, #824]	@ (800a0ac <_lite_kernel_nl_softmax_iu8ou8+0x6d8>)
 8009d72:	4bcf      	ldr	r3, [pc, #828]	@ (800a0b0 <_lite_kernel_nl_softmax_iu8ou8+0x6dc>)
 8009d74:	49cf      	ldr	r1, [pc, #828]	@ (800a0b4 <_lite_kernel_nl_softmax_iu8ou8+0x6e0>)
 8009d76:	2000      	movs	r0, #0
 8009d78:	f04f 3aff 	mov.w	sl, #4294967295
 8009d7c:	e9cd 5312 	strd	r5, r3, [sp, #72]	@ 0x48
 8009d80:	4bcd      	ldr	r3, [pc, #820]	@ (800a0b8 <_lite_kernel_nl_softmax_iu8ou8+0x6e4>)
 8009d82:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d84:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8009d88:	e9cd a009 	strd	sl, r0, [sp, #36]	@ 0x24
 8009d8c:	e9cd aa0b 	strd	sl, sl, [sp, #44]	@ 0x2c
 8009d90:	e9cd a00d 	strd	sl, r0, [sp, #52]	@ 0x34
 8009d94:	9008      	str	r0, [sp, #32]
 8009d96:	4605      	mov	r5, r0
 8009d98:	46d4      	mov	ip, sl
 8009d9a:	4657      	mov	r7, sl
 8009d9c:	4656      	mov	r6, sl
 8009d9e:	4686      	mov	lr, r0
 8009da0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009da4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009da6:	9011      	str	r0, [sp, #68]	@ 0x44
 8009da8:	e6e6      	b.n	8009b78 <_lite_kernel_nl_softmax_iu8ou8+0x1a4>
 8009daa:	9b04      	ldr	r3, [sp, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 81f9 	beq.w	800a1a4 <_lite_kernel_nl_softmax_iu8ou8+0x7d0>
 8009db2:	fab3 fa83 	clz	sl, r3
 8009db6:	fa03 f20a 	lsl.w	r2, r3, sl
 8009dba:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8009dbe:	17d9      	asrs	r1, r3, #31
 8009dc0:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009dc4:	bf08      	it	eq
 8009dc6:	2a00      	cmpeq	r2, #0
 8009dc8:	f1ca 0523 	rsb	r5, sl, #35	@ 0x23
 8009dcc:	f000 81ed 	beq.w	800a1aa <_lite_kernel_nl_softmax_iu8ou8+0x7d6>
 8009dd0:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 8009dd4:	f141 0100 	adc.w	r1, r1, #0
 8009dd8:	085b      	lsrs	r3, r3, #1
 8009dda:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 8009dde:	4ab7      	ldr	r2, [pc, #732]	@ (800a0bc <_lite_kernel_nl_softmax_iu8ou8+0x6e8>)
 8009de0:	4eb7      	ldr	r6, [pc, #732]	@ (800a0c0 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8009de2:	1049      	asrs	r1, r1, #1
 8009de4:	4258      	negs	r0, r3
 8009de6:	fb02 0001 	mla	r0, r2, r1, r0
 8009dea:	fba3 2402 	umull	r2, r4, r3, r2
 8009dee:	1992      	adds	r2, r2, r6
 8009df0:	4420      	add	r0, r4
 8009df2:	f160 0000 	sbc.w	r0, r0, #0
 8009df6:	2800      	cmp	r0, #0
 8009df8:	469e      	mov	lr, r3
 8009dfa:	da05      	bge.n	8009e08 <_lite_kernel_nl_softmax_iu8ou8+0x434>
 8009dfc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8009e00:	1914      	adds	r4, r2, r4
 8009e02:	4622      	mov	r2, r4
 8009e04:	f140 0000 	adc.w	r0, r0, #0
 8009e08:	0fd2      	lsrs	r2, r2, #31
 8009e0a:	ea42 0640 	orr.w	r6, r2, r0, lsl #1
 8009e0e:	f106 375a 	add.w	r7, r6, #1515870810	@ 0x5a5a5a5a
 8009e12:	17fc      	asrs	r4, r7, #31
 8009e14:	fba3 0c07 	umull	r0, ip, r3, r7
 8009e18:	fb03 f804 	mul.w	r8, r3, r4
 8009e1c:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 8009e20:	fb07 8801 	mla	r8, r7, r1, r8
 8009e24:	eb48 0c0c 	adc.w	ip, r8, ip
 8009e28:	f1bc 0f00 	cmp.w	ip, #0
 8009e2c:	463a      	mov	r2, r7
 8009e2e:	da06      	bge.n	8009e3e <_lite_kernel_nl_softmax_iu8ou8+0x46a>
 8009e30:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 8009e34:	eb10 0808 	adds.w	r8, r0, r8
 8009e38:	4640      	mov	r0, r8
 8009e3a:	f14c 0c00 	adc.w	ip, ip, #0
 8009e3e:	0fc0      	lsrs	r0, r0, #31
 8009e40:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
 8009e44:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 8009e48:	ea80 0c07 	eor.w	ip, r0, r7
 8009e4c:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8009e50:	f1bc 0f00 	cmp.w	ip, #0
 8009e54:	bf08      	it	eq
 8009e56:	f04f 0900 	moveq.w	r9, #0
 8009e5a:	f8df c264 	ldr.w	ip, [pc, #612]	@ 800a0c0 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>
 8009e5e:	bf14      	ite	ne
 8009e60:	f04f 39ff 	movne.w	r9, #4294967295
 8009e64:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8009e68:	fb00 f404 	mul.w	r4, r0, r4
 8009e6c:	ea4f 78e0 	mov.w	r8, r0, asr #31
 8009e70:	fb02 4408 	mla	r4, r2, r8, r4
 8009e74:	fba0 2002 	umull	r2, r0, r0, r2
 8009e78:	eb12 020c 	adds.w	r2, r2, ip
 8009e7c:	4404      	add	r4, r0
 8009e7e:	eb44 0409 	adc.w	r4, r4, r9
 8009e82:	2c00      	cmp	r4, #0
 8009e84:	da05      	bge.n	8009e92 <_lite_kernel_nl_softmax_iu8ou8+0x4be>
 8009e86:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8009e8a:	1810      	adds	r0, r2, r0
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	f144 0400 	adc.w	r4, r4, #0
 8009e92:	0fd2      	lsrs	r2, r2, #31
 8009e94:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8009e98:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 8009e9c:	f340 8127 	ble.w	800a0ee <_lite_kernel_nl_softmax_iu8ou8+0x71a>
 8009ea0:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 8009ea4:	ea80 020e 	eor.w	r2, r0, lr
 8009ea8:	0fd2      	lsrs	r2, r2, #31
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	4f84      	ldr	r7, [pc, #528]	@ (800a0c0 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8009eae:	ea4f 74e0 	mov.w	r4, r0, asr #31
 8009eb2:	fb00 f601 	mul.w	r6, r0, r1
 8009eb6:	fba0 2803 	umull	r2, r8, r0, r3
 8009eba:	bf08      	it	eq
 8009ebc:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8009ec0:	fb03 6604 	mla	r6, r3, r4, r6
 8009ec4:	bf0c      	ite	eq
 8009ec6:	f04f 0c00 	moveq.w	ip, #0
 8009eca:	f04f 3cff 	movne.w	ip, #4294967295
 8009ece:	4446      	add	r6, r8
 8009ed0:	19d2      	adds	r2, r2, r7
 8009ed2:	eb46 060c 	adc.w	r6, r6, ip
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	da05      	bge.n	8009ee6 <_lite_kernel_nl_softmax_iu8ou8+0x512>
 8009eda:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8009ede:	19d7      	adds	r7, r2, r7
 8009ee0:	463a      	mov	r2, r7
 8009ee2:	f146 0600 	adc.w	r6, r6, #0
 8009ee6:	0fd2      	lsrs	r2, r2, #31
 8009ee8:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 8009eec:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8009ef0:	ea80 0602 	eor.w	r6, r0, r2
 8009ef4:	0ff6      	lsrs	r6, r6, #31
 8009ef6:	2e00      	cmp	r6, #0
 8009ef8:	bf08      	it	eq
 8009efa:	2700      	moveq	r7, #0
 8009efc:	4e70      	ldr	r6, [pc, #448]	@ (800a0c0 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8009efe:	bf14      	ite	ne
 8009f00:	f04f 37ff 	movne.w	r7, #4294967295
 8009f04:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 8009f08:	fb02 f404 	mul.w	r4, r2, r4
 8009f0c:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8009f10:	fb00 440c 	mla	r4, r0, ip, r4
 8009f14:	fba2 2c00 	umull	r2, ip, r2, r0
 8009f18:	1992      	adds	r2, r2, r6
 8009f1a:	4464      	add	r4, ip
 8009f1c:	eb44 0407 	adc.w	r4, r4, r7
 8009f20:	2c00      	cmp	r4, #0
 8009f22:	da05      	bge.n	8009f30 <_lite_kernel_nl_softmax_iu8ou8+0x55c>
 8009f24:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8009f28:	1996      	adds	r6, r2, r6
 8009f2a:	4632      	mov	r2, r6
 8009f2c:	f144 0400 	adc.w	r4, r4, #0
 8009f30:	0fd2      	lsrs	r2, r2, #31
 8009f32:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8009f36:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8009f3a:	f2c0 8108 	blt.w	800a14e <_lite_kernel_nl_softmax_iu8ou8+0x77a>
 8009f3e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8009f42:	1902      	adds	r2, r0, r4
 8009f44:	ea92 0f0e 	teq	r2, lr
 8009f48:	f140 80cd 	bpl.w	800a0e6 <_lite_kernel_nl_softmax_iu8ou8+0x712>
 8009f4c:	4c5c      	ldr	r4, [pc, #368]	@ (800a0c0 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8009f4e:	f04f 36ff 	mov.w	r6, #4294967295
 8009f52:	fb02 f101 	mul.w	r1, r2, r1
 8009f56:	17d0      	asrs	r0, r2, #31
 8009f58:	fb03 1100 	mla	r1, r3, r0, r1
 8009f5c:	fba2 3703 	umull	r3, r7, r2, r3
 8009f60:	191b      	adds	r3, r3, r4
 8009f62:	4439      	add	r1, r7
 8009f64:	eb41 0106 	adc.w	r1, r1, r6
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	da05      	bge.n	8009f78 <_lite_kernel_nl_softmax_iu8ou8+0x5a4>
 8009f6c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8009f70:	191c      	adds	r4, r3, r4
 8009f72:	4623      	mov	r3, r4
 8009f74:	f141 0100 	adc.w	r1, r1, #0
 8009f78:	0fdb      	lsrs	r3, r3, #31
 8009f7a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8009f7e:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8009f82:	ea82 0103 	eor.w	r1, r2, r3
 8009f86:	0fc9      	lsrs	r1, r1, #31
 8009f88:	2900      	cmp	r1, #0
 8009f8a:	bf08      	it	eq
 8009f8c:	2400      	moveq	r4, #0
 8009f8e:	494c      	ldr	r1, [pc, #304]	@ (800a0c0 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8009f90:	bf14      	ite	ne
 8009f92:	f04f 34ff 	movne.w	r4, #4294967295
 8009f96:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8009f9a:	fb03 f000 	mul.w	r0, r3, r0
 8009f9e:	17de      	asrs	r6, r3, #31
 8009fa0:	fb02 0006 	mla	r0, r2, r6, r0
 8009fa4:	fba3 3602 	umull	r3, r6, r3, r2
 8009fa8:	185b      	adds	r3, r3, r1
 8009faa:	4430      	add	r0, r6
 8009fac:	eb40 0004 	adc.w	r0, r0, r4
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	da05      	bge.n	8009fc0 <_lite_kernel_nl_softmax_iu8ou8+0x5ec>
 8009fb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009fb8:	1859      	adds	r1, r3, r1
 8009fba:	460b      	mov	r3, r1
 8009fbc:	f140 0000 	adc.w	r0, r0, #0
 8009fc0:	0fdb      	lsrs	r3, r3, #31
 8009fc2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8009fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fca:	db7f      	blt.n	800a0cc <_lite_kernel_nl_softmax_iu8ou8+0x6f8>
 8009fcc:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8009fd0:	4402      	add	r2, r0
 8009fd2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8009fd6:	bfb8      	it	lt
 8009fd8:	0050      	lsllt	r0, r2, #1
 8009fda:	2d1f      	cmp	r5, #31
 8009fdc:	dd03      	ble.n	8009fe6 <_lite_kernel_nl_softmax_iu8ou8+0x612>
 8009fde:	f1ca 0304 	rsb	r3, sl, #4
 8009fe2:	4118      	asrs	r0, r3
 8009fe4:	251f      	movs	r5, #31
 8009fe6:	9b03      	ldr	r3, [sp, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d045      	beq.n	800a078 <_lite_kernel_nl_softmax_iu8ou8+0x6a4>
 8009fec:	2701      	movs	r7, #1
 8009fee:	40af      	lsls	r7, r5
 8009ff0:	3f01      	subs	r7, #1
 8009ff2:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8009ff6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009ff8:	f8df e0c4 	ldr.w	lr, [pc, #196]	@ 800a0c0 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>
 8009ffc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8009ffe:	ea07 0b0c 	and.w	fp, r7, ip
 800a002:	ea4f 0867 	mov.w	r8, r7, asr #1
 800a006:	f8cd b004 	str.w	fp, [sp, #4]
 800a00a:	f108 0901 	add.w	r9, r8, #1
 800a00e:	f8dd b064 	ldr.w	fp, [sp, #100]	@ 0x64
 800a012:	fa4c fa05 	asr.w	sl, ip, r5
 800a016:	1e5e      	subs	r6, r3, #1
 800a018:	e009      	b.n	800a02e <_lite_kernel_nl_softmax_iu8ou8+0x65a>
 800a01a:	4590      	cmp	r8, r2
 800a01c:	da00      	bge.n	800a020 <_lite_kernel_nl_softmax_iu8ou8+0x64c>
 800a01e:	3301      	adds	r3, #1
 800a020:	2bfe      	cmp	r3, #254	@ 0xfe
 800a022:	dd4f      	ble.n	800a0c4 <_lite_kernel_nl_softmax_iu8ou8+0x6f0>
 800a024:	23ff      	movs	r3, #255	@ 0xff
 800a026:	45a3      	cmp	fp, r4
 800a028:	f806 3f01 	strb.w	r3, [r6, #1]!
 800a02c:	d024      	beq.n	800a078 <_lite_kernel_nl_softmax_iu8ou8+0x6a4>
 800a02e:	f854 1f04 	ldr.w	r1, [r4, #4]!
 800a032:	ea80 0301 	eor.w	r3, r0, r1
 800a036:	0fdb      	lsrs	r3, r3, #31
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bf0b      	itete	eq
 800a03c:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800a040:	4673      	movne	r3, lr
 800a042:	2200      	moveq	r2, #0
 800a044:	f04f 32ff 	movne.w	r2, #4294967295
 800a048:	fbc1 3200 	smlal	r3, r2, r1, r0
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	da03      	bge.n	800a058 <_lite_kernel_nl_softmax_iu8ou8+0x684>
 800a050:	eb13 030c 	adds.w	r3, r3, ip
 800a054:	f142 0200 	adc.w	r2, r2, #0
 800a058:	0fdb      	lsrs	r3, r3, #31
 800a05a:	4288      	cmp	r0, r1
 800a05c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800a060:	d01d      	beq.n	800a09e <_lite_kernel_nl_softmax_iu8ou8+0x6ca>
 800a062:	ea07 0203 	and.w	r2, r7, r3
 800a066:	412b      	asrs	r3, r5
 800a068:	d5d7      	bpl.n	800a01a <_lite_kernel_nl_softmax_iu8ou8+0x646>
 800a06a:	4591      	cmp	r9, r2
 800a06c:	dbd7      	blt.n	800a01e <_lite_kernel_nl_softmax_iu8ou8+0x64a>
 800a06e:	2300      	movs	r3, #0
 800a070:	45a3      	cmp	fp, r4
 800a072:	f806 3f01 	strb.w	r3, [r6, #1]!
 800a076:	d1da      	bne.n	800a02e <_lite_kernel_nl_softmax_iu8ou8+0x65a>
 800a078:	9b02      	ldr	r3, [sp, #8]
 800a07a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a07c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800a07e:	4413      	add	r3, r2
 800a080:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a082:	9302      	str	r3, [sp, #8]
 800a084:	440a      	add	r2, r1
 800a086:	9215      	str	r2, [sp, #84]	@ 0x54
 800a088:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800a08a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a08c:	440a      	add	r2, r1
 800a08e:	9216      	str	r2, [sp, #88]	@ 0x58
 800a090:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a092:	429a      	cmp	r2, r3
 800a094:	f63f acb3 	bhi.w	80099fe <_lite_kernel_nl_softmax_iu8ou8+0x2a>
 800a098:	b01b      	add	sp, #108	@ 0x6c
 800a09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800a0a2:	d1de      	bne.n	800a062 <_lite_kernel_nl_softmax_iu8ou8+0x68e>
 800a0a4:	9a01      	ldr	r2, [sp, #4]
 800a0a6:	4653      	mov	r3, sl
 800a0a8:	e7b7      	b.n	800a01a <_lite_kernel_nl_softmax_iu8ou8+0x646>
 800a0aa:	bf00      	nop
 800a0ac:	40000100 	.word	0x40000100
 800a0b0:	001fffff 	.word	0x001fffff
 800a0b4:	0fffffe0 	.word	0x0fffffe0
 800a0b8:	01fffff8 	.word	0x01fffff8
 800a0bc:	c3c3c3c4 	.word	0xc3c3c3c4
 800a0c0:	c0000001 	.word	0xc0000001
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	ddd2      	ble.n	800a06e <_lite_kernel_nl_softmax_iu8ou8+0x69a>
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	e7ac      	b.n	800a026 <_lite_kernel_nl_softmax_iu8ou8+0x652>
 800a0cc:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800a0d0:	f300 8095 	bgt.w	800a1fe <_lite_kernel_nl_softmax_iu8ou8+0x82a>
 800a0d4:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 800a0d8:	0050      	lsls	r0, r2, #1
 800a0da:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a0de:	bfd8      	it	le
 800a0e0:	f04f 4000 	movle.w	r0, #2147483648	@ 0x80000000
 800a0e4:	e779      	b.n	8009fda <_lite_kernel_nl_softmax_iu8ou8+0x606>
 800a0e6:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 800a0ea:	2600      	movs	r6, #0
 800a0ec:	e731      	b.n	8009f52 <_lite_kernel_nl_softmax_iu8ou8+0x57e>
 800a0ee:	f106 305a 	add.w	r0, r6, #1515870810	@ 0x5a5a5a5a
 800a0f2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a0f6:	ea90 0f0e 	teq	r0, lr
 800a0fa:	d564      	bpl.n	800a1c6 <_lite_kernel_nl_softmax_iu8ou8+0x7f2>
 800a0fc:	4e45      	ldr	r6, [pc, #276]	@ (800a214 <_lite_kernel_nl_softmax_iu8ou8+0x840>)
 800a0fe:	17c2      	asrs	r2, r0, #31
 800a100:	fb00 f401 	mul.w	r4, r0, r1
 800a104:	fb03 4402 	mla	r4, r3, r2, r4
 800a108:	fba0 2703 	umull	r2, r7, r0, r3
 800a10c:	1992      	adds	r2, r2, r6
 800a10e:	443c      	add	r4, r7
 800a110:	f164 0600 	sbc.w	r6, r4, #0
 800a114:	2e00      	cmp	r6, #0
 800a116:	da05      	bge.n	800a124 <_lite_kernel_nl_softmax_iu8ou8+0x750>
 800a118:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800a11c:	1914      	adds	r4, r2, r4
 800a11e:	4622      	mov	r2, r4
 800a120:	f146 0600 	adc.w	r6, r6, #0
 800a124:	0fd2      	lsrs	r2, r2, #31
 800a126:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 800a12a:	f1c2 5400 	rsb	r4, r2, #536870912	@ 0x20000000
 800a12e:	4a39      	ldr	r2, [pc, #228]	@ (800a214 <_lite_kernel_nl_softmax_iu8ou8+0x840>)
 800a130:	f04f 36ff 	mov.w	r6, #4294967295
 800a134:	fbc0 2604 	smlal	r2, r6, r0, r4
 800a138:	2e00      	cmp	r6, #0
 800a13a:	da05      	bge.n	800a148 <_lite_kernel_nl_softmax_iu8ou8+0x774>
 800a13c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800a140:	1914      	adds	r4, r2, r4
 800a142:	4622      	mov	r2, r4
 800a144:	f146 0600 	adc.w	r6, r6, #0
 800a148:	0fd2      	lsrs	r2, r2, #31
 800a14a:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 800a14e:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 800a152:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800a156:	f73f aef4 	bgt.w	8009f42 <_lite_kernel_nl_softmax_iu8ou8+0x56e>
 800a15a:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 800a15e:	ea9e 0f02 	teq	lr, r2
 800a162:	d5c0      	bpl.n	800a0e6 <_lite_kernel_nl_softmax_iu8ou8+0x712>
 800a164:	4c2b      	ldr	r4, [pc, #172]	@ (800a214 <_lite_kernel_nl_softmax_iu8ou8+0x840>)
 800a166:	fb02 f101 	mul.w	r1, r2, r1
 800a16a:	17d0      	asrs	r0, r2, #31
 800a16c:	fb03 1100 	mla	r1, r3, r0, r1
 800a170:	fba2 3603 	umull	r3, r6, r2, r3
 800a174:	191b      	adds	r3, r3, r4
 800a176:	4431      	add	r1, r6
 800a178:	f161 0100 	sbc.w	r1, r1, #0
 800a17c:	2900      	cmp	r1, #0
 800a17e:	da05      	bge.n	800a18c <_lite_kernel_nl_softmax_iu8ou8+0x7b8>
 800a180:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800a184:	191c      	adds	r4, r3, r4
 800a186:	4623      	mov	r3, r4
 800a188:	f141 0100 	adc.w	r1, r1, #0
 800a18c:	0fdb      	lsrs	r3, r3, #31
 800a18e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800a192:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800a196:	491f      	ldr	r1, [pc, #124]	@ (800a214 <_lite_kernel_nl_softmax_iu8ou8+0x840>)
 800a198:	f04f 34ff 	mov.w	r4, #4294967295
 800a19c:	e6fd      	b.n	8009f9a <_lite_kernel_nl_softmax_iu8ou8+0x5c6>
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	f47f ac3c 	bne.w	8009a1c <_lite_kernel_nl_softmax_iu8ou8+0x48>
 800a1a4:	2503      	movs	r5, #3
 800a1a6:	f04f 0a20 	mov.w	sl, #32
 800a1aa:	f04f 3eff 	mov.w	lr, #4294967295
 800a1ae:	2400      	movs	r4, #0
 800a1b0:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
 800a1b4:	4818      	ldr	r0, [pc, #96]	@ (800a218 <_lite_kernel_nl_softmax_iu8ou8+0x844>)
 800a1b6:	4673      	mov	r3, lr
 800a1b8:	4671      	mov	r1, lr
 800a1ba:	4617      	mov	r7, r2
 800a1bc:	4626      	mov	r6, r4
 800a1be:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 800a1c2:	46a1      	mov	r9, r4
 800a1c4:	e650      	b.n	8009e68 <_lite_kernel_nl_softmax_iu8ou8+0x494>
 800a1c6:	17c4      	asrs	r4, r0, #31
 800a1c8:	fba3 2600 	umull	r2, r6, r3, r0
 800a1cc:	fb03 f704 	mul.w	r7, r3, r4
 800a1d0:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800a1d4:	fb00 7701 	mla	r7, r0, r1, r7
 800a1d8:	eb47 0606 	adc.w	r6, r7, r6
 800a1dc:	2e00      	cmp	r6, #0
 800a1de:	da05      	bge.n	800a1ec <_lite_kernel_nl_softmax_iu8ou8+0x818>
 800a1e0:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800a1e4:	19d7      	adds	r7, r2, r7
 800a1e6:	463a      	mov	r2, r7
 800a1e8:	f146 0600 	adc.w	r6, r6, #0
 800a1ec:	0fd2      	lsrs	r2, r2, #31
 800a1ee:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 800a1f2:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 800a1f6:	4e07      	ldr	r6, [pc, #28]	@ (800a214 <_lite_kernel_nl_softmax_iu8ou8+0x840>)
 800a1f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a1fc:	e684      	b.n	8009f08 <_lite_kernel_nl_softmax_iu8ou8+0x534>
 800a1fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a206:	ea4f 0043 	mov.w	r0, r3, lsl #1
 800a20a:	f6ff af66 	blt.w	800a0da <_lite_kernel_nl_softmax_iu8ou8+0x706>
 800a20e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800a212:	e6e2      	b.n	8009fda <_lite_kernel_nl_softmax_iu8ou8+0x606>
 800a214:	c0000001 	.word	0xc0000001
 800a218:	20000001 	.word	0x20000001

0800a21c <malloc>:
 800a21c:	4b02      	ldr	r3, [pc, #8]	@ (800a228 <malloc+0xc>)
 800a21e:	4601      	mov	r1, r0
 800a220:	6818      	ldr	r0, [r3, #0]
 800a222:	f000 b825 	b.w	800a270 <_malloc_r>
 800a226:	bf00      	nop
 800a228:	20000744 	.word	0x20000744

0800a22c <sbrk_aligned>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	4e0f      	ldr	r6, [pc, #60]	@ (800a26c <sbrk_aligned+0x40>)
 800a230:	460c      	mov	r4, r1
 800a232:	6831      	ldr	r1, [r6, #0]
 800a234:	4605      	mov	r5, r0
 800a236:	b911      	cbnz	r1, 800a23e <sbrk_aligned+0x12>
 800a238:	f000 ffec 	bl	800b214 <_sbrk_r>
 800a23c:	6030      	str	r0, [r6, #0]
 800a23e:	4621      	mov	r1, r4
 800a240:	4628      	mov	r0, r5
 800a242:	f000 ffe7 	bl	800b214 <_sbrk_r>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d103      	bne.n	800a252 <sbrk_aligned+0x26>
 800a24a:	f04f 34ff 	mov.w	r4, #4294967295
 800a24e:	4620      	mov	r0, r4
 800a250:	bd70      	pop	{r4, r5, r6, pc}
 800a252:	1cc4      	adds	r4, r0, #3
 800a254:	f024 0403 	bic.w	r4, r4, #3
 800a258:	42a0      	cmp	r0, r4
 800a25a:	d0f8      	beq.n	800a24e <sbrk_aligned+0x22>
 800a25c:	1a21      	subs	r1, r4, r0
 800a25e:	4628      	mov	r0, r5
 800a260:	f000 ffd8 	bl	800b214 <_sbrk_r>
 800a264:	3001      	adds	r0, #1
 800a266:	d1f2      	bne.n	800a24e <sbrk_aligned+0x22>
 800a268:	e7ef      	b.n	800a24a <sbrk_aligned+0x1e>
 800a26a:	bf00      	nop
 800a26c:	20004c68 	.word	0x20004c68

0800a270 <_malloc_r>:
 800a270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a274:	1ccd      	adds	r5, r1, #3
 800a276:	f025 0503 	bic.w	r5, r5, #3
 800a27a:	3508      	adds	r5, #8
 800a27c:	2d0c      	cmp	r5, #12
 800a27e:	bf38      	it	cc
 800a280:	250c      	movcc	r5, #12
 800a282:	2d00      	cmp	r5, #0
 800a284:	4606      	mov	r6, r0
 800a286:	db01      	blt.n	800a28c <_malloc_r+0x1c>
 800a288:	42a9      	cmp	r1, r5
 800a28a:	d904      	bls.n	800a296 <_malloc_r+0x26>
 800a28c:	230c      	movs	r3, #12
 800a28e:	6033      	str	r3, [r6, #0]
 800a290:	2000      	movs	r0, #0
 800a292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a36c <_malloc_r+0xfc>
 800a29a:	f000 f869 	bl	800a370 <__malloc_lock>
 800a29e:	f8d8 3000 	ldr.w	r3, [r8]
 800a2a2:	461c      	mov	r4, r3
 800a2a4:	bb44      	cbnz	r4, 800a2f8 <_malloc_r+0x88>
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7ff ffbf 	bl	800a22c <sbrk_aligned>
 800a2ae:	1c43      	adds	r3, r0, #1
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	d158      	bne.n	800a366 <_malloc_r+0xf6>
 800a2b4:	f8d8 4000 	ldr.w	r4, [r8]
 800a2b8:	4627      	mov	r7, r4
 800a2ba:	2f00      	cmp	r7, #0
 800a2bc:	d143      	bne.n	800a346 <_malloc_r+0xd6>
 800a2be:	2c00      	cmp	r4, #0
 800a2c0:	d04b      	beq.n	800a35a <_malloc_r+0xea>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	eb04 0903 	add.w	r9, r4, r3
 800a2cc:	f000 ffa2 	bl	800b214 <_sbrk_r>
 800a2d0:	4581      	cmp	r9, r0
 800a2d2:	d142      	bne.n	800a35a <_malloc_r+0xea>
 800a2d4:	6821      	ldr	r1, [r4, #0]
 800a2d6:	1a6d      	subs	r5, r5, r1
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7ff ffa6 	bl	800a22c <sbrk_aligned>
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d03a      	beq.n	800a35a <_malloc_r+0xea>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	442b      	add	r3, r5
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	bb62      	cbnz	r2, 800a34c <_malloc_r+0xdc>
 800a2f2:	f8c8 7000 	str.w	r7, [r8]
 800a2f6:	e00f      	b.n	800a318 <_malloc_r+0xa8>
 800a2f8:	6822      	ldr	r2, [r4, #0]
 800a2fa:	1b52      	subs	r2, r2, r5
 800a2fc:	d420      	bmi.n	800a340 <_malloc_r+0xd0>
 800a2fe:	2a0b      	cmp	r2, #11
 800a300:	d917      	bls.n	800a332 <_malloc_r+0xc2>
 800a302:	1961      	adds	r1, r4, r5
 800a304:	42a3      	cmp	r3, r4
 800a306:	6025      	str	r5, [r4, #0]
 800a308:	bf18      	it	ne
 800a30a:	6059      	strne	r1, [r3, #4]
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	bf08      	it	eq
 800a310:	f8c8 1000 	streq.w	r1, [r8]
 800a314:	5162      	str	r2, [r4, r5]
 800a316:	604b      	str	r3, [r1, #4]
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 f82f 	bl	800a37c <__malloc_unlock>
 800a31e:	f104 000b 	add.w	r0, r4, #11
 800a322:	1d23      	adds	r3, r4, #4
 800a324:	f020 0007 	bic.w	r0, r0, #7
 800a328:	1ac2      	subs	r2, r0, r3
 800a32a:	bf1c      	itt	ne
 800a32c:	1a1b      	subne	r3, r3, r0
 800a32e:	50a3      	strne	r3, [r4, r2]
 800a330:	e7af      	b.n	800a292 <_malloc_r+0x22>
 800a332:	6862      	ldr	r2, [r4, #4]
 800a334:	42a3      	cmp	r3, r4
 800a336:	bf0c      	ite	eq
 800a338:	f8c8 2000 	streq.w	r2, [r8]
 800a33c:	605a      	strne	r2, [r3, #4]
 800a33e:	e7eb      	b.n	800a318 <_malloc_r+0xa8>
 800a340:	4623      	mov	r3, r4
 800a342:	6864      	ldr	r4, [r4, #4]
 800a344:	e7ae      	b.n	800a2a4 <_malloc_r+0x34>
 800a346:	463c      	mov	r4, r7
 800a348:	687f      	ldr	r7, [r7, #4]
 800a34a:	e7b6      	b.n	800a2ba <_malloc_r+0x4a>
 800a34c:	461a      	mov	r2, r3
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	42a3      	cmp	r3, r4
 800a352:	d1fb      	bne.n	800a34c <_malloc_r+0xdc>
 800a354:	2300      	movs	r3, #0
 800a356:	6053      	str	r3, [r2, #4]
 800a358:	e7de      	b.n	800a318 <_malloc_r+0xa8>
 800a35a:	230c      	movs	r3, #12
 800a35c:	6033      	str	r3, [r6, #0]
 800a35e:	4630      	mov	r0, r6
 800a360:	f000 f80c 	bl	800a37c <__malloc_unlock>
 800a364:	e794      	b.n	800a290 <_malloc_r+0x20>
 800a366:	6005      	str	r5, [r0, #0]
 800a368:	e7d6      	b.n	800a318 <_malloc_r+0xa8>
 800a36a:	bf00      	nop
 800a36c:	20004c6c 	.word	0x20004c6c

0800a370 <__malloc_lock>:
 800a370:	4801      	ldr	r0, [pc, #4]	@ (800a378 <__malloc_lock+0x8>)
 800a372:	f000 bf9c 	b.w	800b2ae <__retarget_lock_acquire_recursive>
 800a376:	bf00      	nop
 800a378:	20004db0 	.word	0x20004db0

0800a37c <__malloc_unlock>:
 800a37c:	4801      	ldr	r0, [pc, #4]	@ (800a384 <__malloc_unlock+0x8>)
 800a37e:	f000 bf97 	b.w	800b2b0 <__retarget_lock_release_recursive>
 800a382:	bf00      	nop
 800a384:	20004db0 	.word	0x20004db0

0800a388 <_realloc_r>:
 800a388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a38c:	4680      	mov	r8, r0
 800a38e:	4615      	mov	r5, r2
 800a390:	460c      	mov	r4, r1
 800a392:	b921      	cbnz	r1, 800a39e <_realloc_r+0x16>
 800a394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a398:	4611      	mov	r1, r2
 800a39a:	f7ff bf69 	b.w	800a270 <_malloc_r>
 800a39e:	b92a      	cbnz	r2, 800a3ac <_realloc_r+0x24>
 800a3a0:	f001 fde2 	bl	800bf68 <_free_r>
 800a3a4:	2400      	movs	r4, #0
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ac:	f002 f9a8 	bl	800c700 <_malloc_usable_size_r>
 800a3b0:	4285      	cmp	r5, r0
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	d802      	bhi.n	800a3bc <_realloc_r+0x34>
 800a3b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a3ba:	d8f4      	bhi.n	800a3a6 <_realloc_r+0x1e>
 800a3bc:	4629      	mov	r1, r5
 800a3be:	4640      	mov	r0, r8
 800a3c0:	f7ff ff56 	bl	800a270 <_malloc_r>
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d0ec      	beq.n	800a3a4 <_realloc_r+0x1c>
 800a3ca:	42b5      	cmp	r5, r6
 800a3cc:	462a      	mov	r2, r5
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	bf28      	it	cs
 800a3d2:	4632      	movcs	r2, r6
 800a3d4:	f000 ff6d 	bl	800b2b2 <memcpy>
 800a3d8:	4621      	mov	r1, r4
 800a3da:	4640      	mov	r0, r8
 800a3dc:	f001 fdc4 	bl	800bf68 <_free_r>
 800a3e0:	463c      	mov	r4, r7
 800a3e2:	e7e0      	b.n	800a3a6 <_realloc_r+0x1e>

0800a3e4 <__cvt>:
 800a3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e8:	ec57 6b10 	vmov	r6, r7, d0
 800a3ec:	2f00      	cmp	r7, #0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	463b      	mov	r3, r7
 800a3f4:	bfbb      	ittet	lt
 800a3f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a3fa:	461f      	movlt	r7, r3
 800a3fc:	2300      	movge	r3, #0
 800a3fe:	232d      	movlt	r3, #45	@ 0x2d
 800a400:	700b      	strb	r3, [r1, #0]
 800a402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a404:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a408:	4691      	mov	r9, r2
 800a40a:	f023 0820 	bic.w	r8, r3, #32
 800a40e:	bfbc      	itt	lt
 800a410:	4632      	movlt	r2, r6
 800a412:	4616      	movlt	r6, r2
 800a414:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a418:	d005      	beq.n	800a426 <__cvt+0x42>
 800a41a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a41e:	d100      	bne.n	800a422 <__cvt+0x3e>
 800a420:	3401      	adds	r4, #1
 800a422:	2102      	movs	r1, #2
 800a424:	e000      	b.n	800a428 <__cvt+0x44>
 800a426:	2103      	movs	r1, #3
 800a428:	ab03      	add	r3, sp, #12
 800a42a:	9301      	str	r3, [sp, #4]
 800a42c:	ab02      	add	r3, sp, #8
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	ec47 6b10 	vmov	d0, r6, r7
 800a434:	4653      	mov	r3, sl
 800a436:	4622      	mov	r2, r4
 800a438:	f000 ffd2 	bl	800b3e0 <_dtoa_r>
 800a43c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a440:	4605      	mov	r5, r0
 800a442:	d119      	bne.n	800a478 <__cvt+0x94>
 800a444:	f019 0f01 	tst.w	r9, #1
 800a448:	d00e      	beq.n	800a468 <__cvt+0x84>
 800a44a:	eb00 0904 	add.w	r9, r0, r4
 800a44e:	2200      	movs	r2, #0
 800a450:	2300      	movs	r3, #0
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	f7f6 fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a45a:	b108      	cbz	r0, 800a460 <__cvt+0x7c>
 800a45c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a460:	2230      	movs	r2, #48	@ 0x30
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	454b      	cmp	r3, r9
 800a466:	d31e      	bcc.n	800a4a6 <__cvt+0xc2>
 800a468:	9b03      	ldr	r3, [sp, #12]
 800a46a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a46c:	1b5b      	subs	r3, r3, r5
 800a46e:	4628      	mov	r0, r5
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	b004      	add	sp, #16
 800a474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a478:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a47c:	eb00 0904 	add.w	r9, r0, r4
 800a480:	d1e5      	bne.n	800a44e <__cvt+0x6a>
 800a482:	7803      	ldrb	r3, [r0, #0]
 800a484:	2b30      	cmp	r3, #48	@ 0x30
 800a486:	d10a      	bne.n	800a49e <__cvt+0xba>
 800a488:	2200      	movs	r2, #0
 800a48a:	2300      	movs	r3, #0
 800a48c:	4630      	mov	r0, r6
 800a48e:	4639      	mov	r1, r7
 800a490:	f7f6 fb22 	bl	8000ad8 <__aeabi_dcmpeq>
 800a494:	b918      	cbnz	r0, 800a49e <__cvt+0xba>
 800a496:	f1c4 0401 	rsb	r4, r4, #1
 800a49a:	f8ca 4000 	str.w	r4, [sl]
 800a49e:	f8da 3000 	ldr.w	r3, [sl]
 800a4a2:	4499      	add	r9, r3
 800a4a4:	e7d3      	b.n	800a44e <__cvt+0x6a>
 800a4a6:	1c59      	adds	r1, r3, #1
 800a4a8:	9103      	str	r1, [sp, #12]
 800a4aa:	701a      	strb	r2, [r3, #0]
 800a4ac:	e7d9      	b.n	800a462 <__cvt+0x7e>

0800a4ae <__exponent>:
 800a4ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4b0:	2900      	cmp	r1, #0
 800a4b2:	bfba      	itte	lt
 800a4b4:	4249      	neglt	r1, r1
 800a4b6:	232d      	movlt	r3, #45	@ 0x2d
 800a4b8:	232b      	movge	r3, #43	@ 0x2b
 800a4ba:	2909      	cmp	r1, #9
 800a4bc:	7002      	strb	r2, [r0, #0]
 800a4be:	7043      	strb	r3, [r0, #1]
 800a4c0:	dd29      	ble.n	800a516 <__exponent+0x68>
 800a4c2:	f10d 0307 	add.w	r3, sp, #7
 800a4c6:	461d      	mov	r5, r3
 800a4c8:	270a      	movs	r7, #10
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	fbb1 f6f7 	udiv	r6, r1, r7
 800a4d0:	fb07 1416 	mls	r4, r7, r6, r1
 800a4d4:	3430      	adds	r4, #48	@ 0x30
 800a4d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a4da:	460c      	mov	r4, r1
 800a4dc:	2c63      	cmp	r4, #99	@ 0x63
 800a4de:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	dcf1      	bgt.n	800a4ca <__exponent+0x1c>
 800a4e6:	3130      	adds	r1, #48	@ 0x30
 800a4e8:	1e94      	subs	r4, r2, #2
 800a4ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a4ee:	1c41      	adds	r1, r0, #1
 800a4f0:	4623      	mov	r3, r4
 800a4f2:	42ab      	cmp	r3, r5
 800a4f4:	d30a      	bcc.n	800a50c <__exponent+0x5e>
 800a4f6:	f10d 0309 	add.w	r3, sp, #9
 800a4fa:	1a9b      	subs	r3, r3, r2
 800a4fc:	42ac      	cmp	r4, r5
 800a4fe:	bf88      	it	hi
 800a500:	2300      	movhi	r3, #0
 800a502:	3302      	adds	r3, #2
 800a504:	4403      	add	r3, r0
 800a506:	1a18      	subs	r0, r3, r0
 800a508:	b003      	add	sp, #12
 800a50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a50c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a510:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a514:	e7ed      	b.n	800a4f2 <__exponent+0x44>
 800a516:	2330      	movs	r3, #48	@ 0x30
 800a518:	3130      	adds	r1, #48	@ 0x30
 800a51a:	7083      	strb	r3, [r0, #2]
 800a51c:	70c1      	strb	r1, [r0, #3]
 800a51e:	1d03      	adds	r3, r0, #4
 800a520:	e7f1      	b.n	800a506 <__exponent+0x58>
	...

0800a524 <_printf_float>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	b08d      	sub	sp, #52	@ 0x34
 800a52a:	460c      	mov	r4, r1
 800a52c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a530:	4616      	mov	r6, r2
 800a532:	461f      	mov	r7, r3
 800a534:	4605      	mov	r5, r0
 800a536:	f000 fddf 	bl	800b0f8 <_localeconv_r>
 800a53a:	6803      	ldr	r3, [r0, #0]
 800a53c:	9304      	str	r3, [sp, #16]
 800a53e:	4618      	mov	r0, r3
 800a540:	f7f5 fe9e 	bl	8000280 <strlen>
 800a544:	2300      	movs	r3, #0
 800a546:	930a      	str	r3, [sp, #40]	@ 0x28
 800a548:	f8d8 3000 	ldr.w	r3, [r8]
 800a54c:	9005      	str	r0, [sp, #20]
 800a54e:	3307      	adds	r3, #7
 800a550:	f023 0307 	bic.w	r3, r3, #7
 800a554:	f103 0208 	add.w	r2, r3, #8
 800a558:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a55c:	f8d4 b000 	ldr.w	fp, [r4]
 800a560:	f8c8 2000 	str.w	r2, [r8]
 800a564:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a568:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a56c:	9307      	str	r3, [sp, #28]
 800a56e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a572:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a57a:	4b9c      	ldr	r3, [pc, #624]	@ (800a7ec <_printf_float+0x2c8>)
 800a57c:	f04f 32ff 	mov.w	r2, #4294967295
 800a580:	f7f6 fadc 	bl	8000b3c <__aeabi_dcmpun>
 800a584:	bb70      	cbnz	r0, 800a5e4 <_printf_float+0xc0>
 800a586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a58a:	4b98      	ldr	r3, [pc, #608]	@ (800a7ec <_printf_float+0x2c8>)
 800a58c:	f04f 32ff 	mov.w	r2, #4294967295
 800a590:	f7f6 fab6 	bl	8000b00 <__aeabi_dcmple>
 800a594:	bb30      	cbnz	r0, 800a5e4 <_printf_float+0xc0>
 800a596:	2200      	movs	r2, #0
 800a598:	2300      	movs	r3, #0
 800a59a:	4640      	mov	r0, r8
 800a59c:	4649      	mov	r1, r9
 800a59e:	f7f6 faa5 	bl	8000aec <__aeabi_dcmplt>
 800a5a2:	b110      	cbz	r0, 800a5aa <_printf_float+0x86>
 800a5a4:	232d      	movs	r3, #45	@ 0x2d
 800a5a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5aa:	4a91      	ldr	r2, [pc, #580]	@ (800a7f0 <_printf_float+0x2cc>)
 800a5ac:	4b91      	ldr	r3, [pc, #580]	@ (800a7f4 <_printf_float+0x2d0>)
 800a5ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a5b2:	bf94      	ite	ls
 800a5b4:	4690      	movls	r8, r2
 800a5b6:	4698      	movhi	r8, r3
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	f02b 0304 	bic.w	r3, fp, #4
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	f04f 0900 	mov.w	r9, #0
 800a5c6:	9700      	str	r7, [sp, #0]
 800a5c8:	4633      	mov	r3, r6
 800a5ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 f9d2 	bl	800a978 <_printf_common>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	f040 808d 	bne.w	800a6f4 <_printf_float+0x1d0>
 800a5da:	f04f 30ff 	mov.w	r0, #4294967295
 800a5de:	b00d      	add	sp, #52	@ 0x34
 800a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e4:	4642      	mov	r2, r8
 800a5e6:	464b      	mov	r3, r9
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	f7f6 faa6 	bl	8000b3c <__aeabi_dcmpun>
 800a5f0:	b140      	cbz	r0, 800a604 <_printf_float+0xe0>
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bfbc      	itt	lt
 800a5f8:	232d      	movlt	r3, #45	@ 0x2d
 800a5fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a5fe:	4a7e      	ldr	r2, [pc, #504]	@ (800a7f8 <_printf_float+0x2d4>)
 800a600:	4b7e      	ldr	r3, [pc, #504]	@ (800a7fc <_printf_float+0x2d8>)
 800a602:	e7d4      	b.n	800a5ae <_printf_float+0x8a>
 800a604:	6863      	ldr	r3, [r4, #4]
 800a606:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a60a:	9206      	str	r2, [sp, #24]
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	d13b      	bne.n	800a688 <_printf_float+0x164>
 800a610:	2306      	movs	r3, #6
 800a612:	6063      	str	r3, [r4, #4]
 800a614:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a618:	2300      	movs	r3, #0
 800a61a:	6022      	str	r2, [r4, #0]
 800a61c:	9303      	str	r3, [sp, #12]
 800a61e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a620:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a624:	ab09      	add	r3, sp, #36	@ 0x24
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	6861      	ldr	r1, [r4, #4]
 800a62a:	ec49 8b10 	vmov	d0, r8, r9
 800a62e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a632:	4628      	mov	r0, r5
 800a634:	f7ff fed6 	bl	800a3e4 <__cvt>
 800a638:	9b06      	ldr	r3, [sp, #24]
 800a63a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a63c:	2b47      	cmp	r3, #71	@ 0x47
 800a63e:	4680      	mov	r8, r0
 800a640:	d129      	bne.n	800a696 <_printf_float+0x172>
 800a642:	1cc8      	adds	r0, r1, #3
 800a644:	db02      	blt.n	800a64c <_printf_float+0x128>
 800a646:	6863      	ldr	r3, [r4, #4]
 800a648:	4299      	cmp	r1, r3
 800a64a:	dd41      	ble.n	800a6d0 <_printf_float+0x1ac>
 800a64c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a650:	fa5f fa8a 	uxtb.w	sl, sl
 800a654:	3901      	subs	r1, #1
 800a656:	4652      	mov	r2, sl
 800a658:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a65c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a65e:	f7ff ff26 	bl	800a4ae <__exponent>
 800a662:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a664:	1813      	adds	r3, r2, r0
 800a666:	2a01      	cmp	r2, #1
 800a668:	4681      	mov	r9, r0
 800a66a:	6123      	str	r3, [r4, #16]
 800a66c:	dc02      	bgt.n	800a674 <_printf_float+0x150>
 800a66e:	6822      	ldr	r2, [r4, #0]
 800a670:	07d2      	lsls	r2, r2, #31
 800a672:	d501      	bpl.n	800a678 <_printf_float+0x154>
 800a674:	3301      	adds	r3, #1
 800a676:	6123      	str	r3, [r4, #16]
 800a678:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0a2      	beq.n	800a5c6 <_printf_float+0xa2>
 800a680:	232d      	movs	r3, #45	@ 0x2d
 800a682:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a686:	e79e      	b.n	800a5c6 <_printf_float+0xa2>
 800a688:	9a06      	ldr	r2, [sp, #24]
 800a68a:	2a47      	cmp	r2, #71	@ 0x47
 800a68c:	d1c2      	bne.n	800a614 <_printf_float+0xf0>
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1c0      	bne.n	800a614 <_printf_float+0xf0>
 800a692:	2301      	movs	r3, #1
 800a694:	e7bd      	b.n	800a612 <_printf_float+0xee>
 800a696:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a69a:	d9db      	bls.n	800a654 <_printf_float+0x130>
 800a69c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a6a0:	d118      	bne.n	800a6d4 <_printf_float+0x1b0>
 800a6a2:	2900      	cmp	r1, #0
 800a6a4:	6863      	ldr	r3, [r4, #4]
 800a6a6:	dd0b      	ble.n	800a6c0 <_printf_float+0x19c>
 800a6a8:	6121      	str	r1, [r4, #16]
 800a6aa:	b913      	cbnz	r3, 800a6b2 <_printf_float+0x18e>
 800a6ac:	6822      	ldr	r2, [r4, #0]
 800a6ae:	07d0      	lsls	r0, r2, #31
 800a6b0:	d502      	bpl.n	800a6b8 <_printf_float+0x194>
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	440b      	add	r3, r1
 800a6b6:	6123      	str	r3, [r4, #16]
 800a6b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	e7db      	b.n	800a678 <_printf_float+0x154>
 800a6c0:	b913      	cbnz	r3, 800a6c8 <_printf_float+0x1a4>
 800a6c2:	6822      	ldr	r2, [r4, #0]
 800a6c4:	07d2      	lsls	r2, r2, #31
 800a6c6:	d501      	bpl.n	800a6cc <_printf_float+0x1a8>
 800a6c8:	3302      	adds	r3, #2
 800a6ca:	e7f4      	b.n	800a6b6 <_printf_float+0x192>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e7f2      	b.n	800a6b6 <_printf_float+0x192>
 800a6d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	db05      	blt.n	800a6e6 <_printf_float+0x1c2>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	6121      	str	r1, [r4, #16]
 800a6de:	07d8      	lsls	r0, r3, #31
 800a6e0:	d5ea      	bpl.n	800a6b8 <_printf_float+0x194>
 800a6e2:	1c4b      	adds	r3, r1, #1
 800a6e4:	e7e7      	b.n	800a6b6 <_printf_float+0x192>
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	bfd4      	ite	le
 800a6ea:	f1c1 0202 	rsble	r2, r1, #2
 800a6ee:	2201      	movgt	r2, #1
 800a6f0:	4413      	add	r3, r2
 800a6f2:	e7e0      	b.n	800a6b6 <_printf_float+0x192>
 800a6f4:	6823      	ldr	r3, [r4, #0]
 800a6f6:	055a      	lsls	r2, r3, #21
 800a6f8:	d407      	bmi.n	800a70a <_printf_float+0x1e6>
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	4631      	mov	r1, r6
 800a700:	4628      	mov	r0, r5
 800a702:	47b8      	blx	r7
 800a704:	3001      	adds	r0, #1
 800a706:	d12b      	bne.n	800a760 <_printf_float+0x23c>
 800a708:	e767      	b.n	800a5da <_printf_float+0xb6>
 800a70a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a70e:	f240 80dd 	bls.w	800a8cc <_printf_float+0x3a8>
 800a712:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a716:	2200      	movs	r2, #0
 800a718:	2300      	movs	r3, #0
 800a71a:	f7f6 f9dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d033      	beq.n	800a78a <_printf_float+0x266>
 800a722:	4a37      	ldr	r2, [pc, #220]	@ (800a800 <_printf_float+0x2dc>)
 800a724:	2301      	movs	r3, #1
 800a726:	4631      	mov	r1, r6
 800a728:	4628      	mov	r0, r5
 800a72a:	47b8      	blx	r7
 800a72c:	3001      	adds	r0, #1
 800a72e:	f43f af54 	beq.w	800a5da <_printf_float+0xb6>
 800a732:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a736:	4543      	cmp	r3, r8
 800a738:	db02      	blt.n	800a740 <_printf_float+0x21c>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	07d8      	lsls	r0, r3, #31
 800a73e:	d50f      	bpl.n	800a760 <_printf_float+0x23c>
 800a740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a744:	4631      	mov	r1, r6
 800a746:	4628      	mov	r0, r5
 800a748:	47b8      	blx	r7
 800a74a:	3001      	adds	r0, #1
 800a74c:	f43f af45 	beq.w	800a5da <_printf_float+0xb6>
 800a750:	f04f 0900 	mov.w	r9, #0
 800a754:	f108 38ff 	add.w	r8, r8, #4294967295
 800a758:	f104 0a1a 	add.w	sl, r4, #26
 800a75c:	45c8      	cmp	r8, r9
 800a75e:	dc09      	bgt.n	800a774 <_printf_float+0x250>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	079b      	lsls	r3, r3, #30
 800a764:	f100 8103 	bmi.w	800a96e <_printf_float+0x44a>
 800a768:	68e0      	ldr	r0, [r4, #12]
 800a76a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a76c:	4298      	cmp	r0, r3
 800a76e:	bfb8      	it	lt
 800a770:	4618      	movlt	r0, r3
 800a772:	e734      	b.n	800a5de <_printf_float+0xba>
 800a774:	2301      	movs	r3, #1
 800a776:	4652      	mov	r2, sl
 800a778:	4631      	mov	r1, r6
 800a77a:	4628      	mov	r0, r5
 800a77c:	47b8      	blx	r7
 800a77e:	3001      	adds	r0, #1
 800a780:	f43f af2b 	beq.w	800a5da <_printf_float+0xb6>
 800a784:	f109 0901 	add.w	r9, r9, #1
 800a788:	e7e8      	b.n	800a75c <_printf_float+0x238>
 800a78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dc39      	bgt.n	800a804 <_printf_float+0x2e0>
 800a790:	4a1b      	ldr	r2, [pc, #108]	@ (800a800 <_printf_float+0x2dc>)
 800a792:	2301      	movs	r3, #1
 800a794:	4631      	mov	r1, r6
 800a796:	4628      	mov	r0, r5
 800a798:	47b8      	blx	r7
 800a79a:	3001      	adds	r0, #1
 800a79c:	f43f af1d 	beq.w	800a5da <_printf_float+0xb6>
 800a7a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a7a4:	ea59 0303 	orrs.w	r3, r9, r3
 800a7a8:	d102      	bne.n	800a7b0 <_printf_float+0x28c>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	07d9      	lsls	r1, r3, #31
 800a7ae:	d5d7      	bpl.n	800a760 <_printf_float+0x23c>
 800a7b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	47b8      	blx	r7
 800a7ba:	3001      	adds	r0, #1
 800a7bc:	f43f af0d 	beq.w	800a5da <_printf_float+0xb6>
 800a7c0:	f04f 0a00 	mov.w	sl, #0
 800a7c4:	f104 0b1a 	add.w	fp, r4, #26
 800a7c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ca:	425b      	negs	r3, r3
 800a7cc:	4553      	cmp	r3, sl
 800a7ce:	dc01      	bgt.n	800a7d4 <_printf_float+0x2b0>
 800a7d0:	464b      	mov	r3, r9
 800a7d2:	e793      	b.n	800a6fc <_printf_float+0x1d8>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	465a      	mov	r2, fp
 800a7d8:	4631      	mov	r1, r6
 800a7da:	4628      	mov	r0, r5
 800a7dc:	47b8      	blx	r7
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f43f aefb 	beq.w	800a5da <_printf_float+0xb6>
 800a7e4:	f10a 0a01 	add.w	sl, sl, #1
 800a7e8:	e7ee      	b.n	800a7c8 <_printf_float+0x2a4>
 800a7ea:	bf00      	nop
 800a7ec:	7fefffff 	.word	0x7fefffff
 800a7f0:	0800dc0c 	.word	0x0800dc0c
 800a7f4:	0800dc10 	.word	0x0800dc10
 800a7f8:	0800dc14 	.word	0x0800dc14
 800a7fc:	0800dc18 	.word	0x0800dc18
 800a800:	0800dc1c 	.word	0x0800dc1c
 800a804:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a806:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a80a:	4553      	cmp	r3, sl
 800a80c:	bfa8      	it	ge
 800a80e:	4653      	movge	r3, sl
 800a810:	2b00      	cmp	r3, #0
 800a812:	4699      	mov	r9, r3
 800a814:	dc36      	bgt.n	800a884 <_printf_float+0x360>
 800a816:	f04f 0b00 	mov.w	fp, #0
 800a81a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a81e:	f104 021a 	add.w	r2, r4, #26
 800a822:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a824:	9306      	str	r3, [sp, #24]
 800a826:	eba3 0309 	sub.w	r3, r3, r9
 800a82a:	455b      	cmp	r3, fp
 800a82c:	dc31      	bgt.n	800a892 <_printf_float+0x36e>
 800a82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a830:	459a      	cmp	sl, r3
 800a832:	dc3a      	bgt.n	800a8aa <_printf_float+0x386>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	07da      	lsls	r2, r3, #31
 800a838:	d437      	bmi.n	800a8aa <_printf_float+0x386>
 800a83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83c:	ebaa 0903 	sub.w	r9, sl, r3
 800a840:	9b06      	ldr	r3, [sp, #24]
 800a842:	ebaa 0303 	sub.w	r3, sl, r3
 800a846:	4599      	cmp	r9, r3
 800a848:	bfa8      	it	ge
 800a84a:	4699      	movge	r9, r3
 800a84c:	f1b9 0f00 	cmp.w	r9, #0
 800a850:	dc33      	bgt.n	800a8ba <_printf_float+0x396>
 800a852:	f04f 0800 	mov.w	r8, #0
 800a856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a85a:	f104 0b1a 	add.w	fp, r4, #26
 800a85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a860:	ebaa 0303 	sub.w	r3, sl, r3
 800a864:	eba3 0309 	sub.w	r3, r3, r9
 800a868:	4543      	cmp	r3, r8
 800a86a:	f77f af79 	ble.w	800a760 <_printf_float+0x23c>
 800a86e:	2301      	movs	r3, #1
 800a870:	465a      	mov	r2, fp
 800a872:	4631      	mov	r1, r6
 800a874:	4628      	mov	r0, r5
 800a876:	47b8      	blx	r7
 800a878:	3001      	adds	r0, #1
 800a87a:	f43f aeae 	beq.w	800a5da <_printf_float+0xb6>
 800a87e:	f108 0801 	add.w	r8, r8, #1
 800a882:	e7ec      	b.n	800a85e <_printf_float+0x33a>
 800a884:	4642      	mov	r2, r8
 800a886:	4631      	mov	r1, r6
 800a888:	4628      	mov	r0, r5
 800a88a:	47b8      	blx	r7
 800a88c:	3001      	adds	r0, #1
 800a88e:	d1c2      	bne.n	800a816 <_printf_float+0x2f2>
 800a890:	e6a3      	b.n	800a5da <_printf_float+0xb6>
 800a892:	2301      	movs	r3, #1
 800a894:	4631      	mov	r1, r6
 800a896:	4628      	mov	r0, r5
 800a898:	9206      	str	r2, [sp, #24]
 800a89a:	47b8      	blx	r7
 800a89c:	3001      	adds	r0, #1
 800a89e:	f43f ae9c 	beq.w	800a5da <_printf_float+0xb6>
 800a8a2:	9a06      	ldr	r2, [sp, #24]
 800a8a4:	f10b 0b01 	add.w	fp, fp, #1
 800a8a8:	e7bb      	b.n	800a822 <_printf_float+0x2fe>
 800a8aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	47b8      	blx	r7
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d1c0      	bne.n	800a83a <_printf_float+0x316>
 800a8b8:	e68f      	b.n	800a5da <_printf_float+0xb6>
 800a8ba:	9a06      	ldr	r2, [sp, #24]
 800a8bc:	464b      	mov	r3, r9
 800a8be:	4442      	add	r2, r8
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	47b8      	blx	r7
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d1c3      	bne.n	800a852 <_printf_float+0x32e>
 800a8ca:	e686      	b.n	800a5da <_printf_float+0xb6>
 800a8cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8d0:	f1ba 0f01 	cmp.w	sl, #1
 800a8d4:	dc01      	bgt.n	800a8da <_printf_float+0x3b6>
 800a8d6:	07db      	lsls	r3, r3, #31
 800a8d8:	d536      	bpl.n	800a948 <_printf_float+0x424>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	4642      	mov	r2, r8
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b8      	blx	r7
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	f43f ae78 	beq.w	800a5da <_printf_float+0xb6>
 800a8ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8ee:	4631      	mov	r1, r6
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	47b8      	blx	r7
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	f43f ae70 	beq.w	800a5da <_printf_float+0xb6>
 800a8fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8fe:	2200      	movs	r2, #0
 800a900:	2300      	movs	r3, #0
 800a902:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a906:	f7f6 f8e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a90a:	b9c0      	cbnz	r0, 800a93e <_printf_float+0x41a>
 800a90c:	4653      	mov	r3, sl
 800a90e:	f108 0201 	add.w	r2, r8, #1
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	d10c      	bne.n	800a936 <_printf_float+0x412>
 800a91c:	e65d      	b.n	800a5da <_printf_float+0xb6>
 800a91e:	2301      	movs	r3, #1
 800a920:	465a      	mov	r2, fp
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	f43f ae56 	beq.w	800a5da <_printf_float+0xb6>
 800a92e:	f108 0801 	add.w	r8, r8, #1
 800a932:	45d0      	cmp	r8, sl
 800a934:	dbf3      	blt.n	800a91e <_printf_float+0x3fa>
 800a936:	464b      	mov	r3, r9
 800a938:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a93c:	e6df      	b.n	800a6fe <_printf_float+0x1da>
 800a93e:	f04f 0800 	mov.w	r8, #0
 800a942:	f104 0b1a 	add.w	fp, r4, #26
 800a946:	e7f4      	b.n	800a932 <_printf_float+0x40e>
 800a948:	2301      	movs	r3, #1
 800a94a:	4642      	mov	r2, r8
 800a94c:	e7e1      	b.n	800a912 <_printf_float+0x3ee>
 800a94e:	2301      	movs	r3, #1
 800a950:	464a      	mov	r2, r9
 800a952:	4631      	mov	r1, r6
 800a954:	4628      	mov	r0, r5
 800a956:	47b8      	blx	r7
 800a958:	3001      	adds	r0, #1
 800a95a:	f43f ae3e 	beq.w	800a5da <_printf_float+0xb6>
 800a95e:	f108 0801 	add.w	r8, r8, #1
 800a962:	68e3      	ldr	r3, [r4, #12]
 800a964:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a966:	1a5b      	subs	r3, r3, r1
 800a968:	4543      	cmp	r3, r8
 800a96a:	dcf0      	bgt.n	800a94e <_printf_float+0x42a>
 800a96c:	e6fc      	b.n	800a768 <_printf_float+0x244>
 800a96e:	f04f 0800 	mov.w	r8, #0
 800a972:	f104 0919 	add.w	r9, r4, #25
 800a976:	e7f4      	b.n	800a962 <_printf_float+0x43e>

0800a978 <_printf_common>:
 800a978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a97c:	4616      	mov	r6, r2
 800a97e:	4698      	mov	r8, r3
 800a980:	688a      	ldr	r2, [r1, #8]
 800a982:	690b      	ldr	r3, [r1, #16]
 800a984:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a988:	4293      	cmp	r3, r2
 800a98a:	bfb8      	it	lt
 800a98c:	4613      	movlt	r3, r2
 800a98e:	6033      	str	r3, [r6, #0]
 800a990:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a994:	4607      	mov	r7, r0
 800a996:	460c      	mov	r4, r1
 800a998:	b10a      	cbz	r2, 800a99e <_printf_common+0x26>
 800a99a:	3301      	adds	r3, #1
 800a99c:	6033      	str	r3, [r6, #0]
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	0699      	lsls	r1, r3, #26
 800a9a2:	bf42      	ittt	mi
 800a9a4:	6833      	ldrmi	r3, [r6, #0]
 800a9a6:	3302      	addmi	r3, #2
 800a9a8:	6033      	strmi	r3, [r6, #0]
 800a9aa:	6825      	ldr	r5, [r4, #0]
 800a9ac:	f015 0506 	ands.w	r5, r5, #6
 800a9b0:	d106      	bne.n	800a9c0 <_printf_common+0x48>
 800a9b2:	f104 0a19 	add.w	sl, r4, #25
 800a9b6:	68e3      	ldr	r3, [r4, #12]
 800a9b8:	6832      	ldr	r2, [r6, #0]
 800a9ba:	1a9b      	subs	r3, r3, r2
 800a9bc:	42ab      	cmp	r3, r5
 800a9be:	dc26      	bgt.n	800aa0e <_printf_common+0x96>
 800a9c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9c4:	6822      	ldr	r2, [r4, #0]
 800a9c6:	3b00      	subs	r3, #0
 800a9c8:	bf18      	it	ne
 800a9ca:	2301      	movne	r3, #1
 800a9cc:	0692      	lsls	r2, r2, #26
 800a9ce:	d42b      	bmi.n	800aa28 <_printf_common+0xb0>
 800a9d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a9d4:	4641      	mov	r1, r8
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	47c8      	blx	r9
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d01e      	beq.n	800aa1c <_printf_common+0xa4>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	6922      	ldr	r2, [r4, #16]
 800a9e2:	f003 0306 	and.w	r3, r3, #6
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	bf02      	ittt	eq
 800a9ea:	68e5      	ldreq	r5, [r4, #12]
 800a9ec:	6833      	ldreq	r3, [r6, #0]
 800a9ee:	1aed      	subeq	r5, r5, r3
 800a9f0:	68a3      	ldr	r3, [r4, #8]
 800a9f2:	bf0c      	ite	eq
 800a9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9f8:	2500      	movne	r5, #0
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	bfc4      	itt	gt
 800a9fe:	1a9b      	subgt	r3, r3, r2
 800aa00:	18ed      	addgt	r5, r5, r3
 800aa02:	2600      	movs	r6, #0
 800aa04:	341a      	adds	r4, #26
 800aa06:	42b5      	cmp	r5, r6
 800aa08:	d11a      	bne.n	800aa40 <_printf_common+0xc8>
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e008      	b.n	800aa20 <_printf_common+0xa8>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	4652      	mov	r2, sl
 800aa12:	4641      	mov	r1, r8
 800aa14:	4638      	mov	r0, r7
 800aa16:	47c8      	blx	r9
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d103      	bne.n	800aa24 <_printf_common+0xac>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa24:	3501      	adds	r5, #1
 800aa26:	e7c6      	b.n	800a9b6 <_printf_common+0x3e>
 800aa28:	18e1      	adds	r1, r4, r3
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	2030      	movs	r0, #48	@ 0x30
 800aa2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa32:	4422      	add	r2, r4
 800aa34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa3c:	3302      	adds	r3, #2
 800aa3e:	e7c7      	b.n	800a9d0 <_printf_common+0x58>
 800aa40:	2301      	movs	r3, #1
 800aa42:	4622      	mov	r2, r4
 800aa44:	4641      	mov	r1, r8
 800aa46:	4638      	mov	r0, r7
 800aa48:	47c8      	blx	r9
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	d0e6      	beq.n	800aa1c <_printf_common+0xa4>
 800aa4e:	3601      	adds	r6, #1
 800aa50:	e7d9      	b.n	800aa06 <_printf_common+0x8e>
	...

0800aa54 <_printf_i>:
 800aa54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa58:	7e0f      	ldrb	r7, [r1, #24]
 800aa5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa5c:	2f78      	cmp	r7, #120	@ 0x78
 800aa5e:	4691      	mov	r9, r2
 800aa60:	4680      	mov	r8, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	469a      	mov	sl, r3
 800aa66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa6a:	d807      	bhi.n	800aa7c <_printf_i+0x28>
 800aa6c:	2f62      	cmp	r7, #98	@ 0x62
 800aa6e:	d80a      	bhi.n	800aa86 <_printf_i+0x32>
 800aa70:	2f00      	cmp	r7, #0
 800aa72:	f000 80d2 	beq.w	800ac1a <_printf_i+0x1c6>
 800aa76:	2f58      	cmp	r7, #88	@ 0x58
 800aa78:	f000 80b9 	beq.w	800abee <_printf_i+0x19a>
 800aa7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa84:	e03a      	b.n	800aafc <_printf_i+0xa8>
 800aa86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa8a:	2b15      	cmp	r3, #21
 800aa8c:	d8f6      	bhi.n	800aa7c <_printf_i+0x28>
 800aa8e:	a101      	add	r1, pc, #4	@ (adr r1, 800aa94 <_printf_i+0x40>)
 800aa90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa94:	0800aaed 	.word	0x0800aaed
 800aa98:	0800ab01 	.word	0x0800ab01
 800aa9c:	0800aa7d 	.word	0x0800aa7d
 800aaa0:	0800aa7d 	.word	0x0800aa7d
 800aaa4:	0800aa7d 	.word	0x0800aa7d
 800aaa8:	0800aa7d 	.word	0x0800aa7d
 800aaac:	0800ab01 	.word	0x0800ab01
 800aab0:	0800aa7d 	.word	0x0800aa7d
 800aab4:	0800aa7d 	.word	0x0800aa7d
 800aab8:	0800aa7d 	.word	0x0800aa7d
 800aabc:	0800aa7d 	.word	0x0800aa7d
 800aac0:	0800ac01 	.word	0x0800ac01
 800aac4:	0800ab2b 	.word	0x0800ab2b
 800aac8:	0800abbb 	.word	0x0800abbb
 800aacc:	0800aa7d 	.word	0x0800aa7d
 800aad0:	0800aa7d 	.word	0x0800aa7d
 800aad4:	0800ac23 	.word	0x0800ac23
 800aad8:	0800aa7d 	.word	0x0800aa7d
 800aadc:	0800ab2b 	.word	0x0800ab2b
 800aae0:	0800aa7d 	.word	0x0800aa7d
 800aae4:	0800aa7d 	.word	0x0800aa7d
 800aae8:	0800abc3 	.word	0x0800abc3
 800aaec:	6833      	ldr	r3, [r6, #0]
 800aaee:	1d1a      	adds	r2, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	6032      	str	r2, [r6, #0]
 800aaf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aaf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aafc:	2301      	movs	r3, #1
 800aafe:	e09d      	b.n	800ac3c <_printf_i+0x1e8>
 800ab00:	6833      	ldr	r3, [r6, #0]
 800ab02:	6820      	ldr	r0, [r4, #0]
 800ab04:	1d19      	adds	r1, r3, #4
 800ab06:	6031      	str	r1, [r6, #0]
 800ab08:	0606      	lsls	r6, r0, #24
 800ab0a:	d501      	bpl.n	800ab10 <_printf_i+0xbc>
 800ab0c:	681d      	ldr	r5, [r3, #0]
 800ab0e:	e003      	b.n	800ab18 <_printf_i+0xc4>
 800ab10:	0645      	lsls	r5, r0, #25
 800ab12:	d5fb      	bpl.n	800ab0c <_printf_i+0xb8>
 800ab14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab18:	2d00      	cmp	r5, #0
 800ab1a:	da03      	bge.n	800ab24 <_printf_i+0xd0>
 800ab1c:	232d      	movs	r3, #45	@ 0x2d
 800ab1e:	426d      	negs	r5, r5
 800ab20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab24:	4859      	ldr	r0, [pc, #356]	@ (800ac8c <_printf_i+0x238>)
 800ab26:	230a      	movs	r3, #10
 800ab28:	e011      	b.n	800ab4e <_printf_i+0xfa>
 800ab2a:	6821      	ldr	r1, [r4, #0]
 800ab2c:	6833      	ldr	r3, [r6, #0]
 800ab2e:	0608      	lsls	r0, r1, #24
 800ab30:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab34:	d402      	bmi.n	800ab3c <_printf_i+0xe8>
 800ab36:	0649      	lsls	r1, r1, #25
 800ab38:	bf48      	it	mi
 800ab3a:	b2ad      	uxthmi	r5, r5
 800ab3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab3e:	4853      	ldr	r0, [pc, #332]	@ (800ac8c <_printf_i+0x238>)
 800ab40:	6033      	str	r3, [r6, #0]
 800ab42:	bf14      	ite	ne
 800ab44:	230a      	movne	r3, #10
 800ab46:	2308      	moveq	r3, #8
 800ab48:	2100      	movs	r1, #0
 800ab4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab4e:	6866      	ldr	r6, [r4, #4]
 800ab50:	60a6      	str	r6, [r4, #8]
 800ab52:	2e00      	cmp	r6, #0
 800ab54:	bfa2      	ittt	ge
 800ab56:	6821      	ldrge	r1, [r4, #0]
 800ab58:	f021 0104 	bicge.w	r1, r1, #4
 800ab5c:	6021      	strge	r1, [r4, #0]
 800ab5e:	b90d      	cbnz	r5, 800ab64 <_printf_i+0x110>
 800ab60:	2e00      	cmp	r6, #0
 800ab62:	d04b      	beq.n	800abfc <_printf_i+0x1a8>
 800ab64:	4616      	mov	r6, r2
 800ab66:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab6a:	fb03 5711 	mls	r7, r3, r1, r5
 800ab6e:	5dc7      	ldrb	r7, [r0, r7]
 800ab70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab74:	462f      	mov	r7, r5
 800ab76:	42bb      	cmp	r3, r7
 800ab78:	460d      	mov	r5, r1
 800ab7a:	d9f4      	bls.n	800ab66 <_printf_i+0x112>
 800ab7c:	2b08      	cmp	r3, #8
 800ab7e:	d10b      	bne.n	800ab98 <_printf_i+0x144>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	07df      	lsls	r7, r3, #31
 800ab84:	d508      	bpl.n	800ab98 <_printf_i+0x144>
 800ab86:	6923      	ldr	r3, [r4, #16]
 800ab88:	6861      	ldr	r1, [r4, #4]
 800ab8a:	4299      	cmp	r1, r3
 800ab8c:	bfde      	ittt	le
 800ab8e:	2330      	movle	r3, #48	@ 0x30
 800ab90:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab94:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab98:	1b92      	subs	r2, r2, r6
 800ab9a:	6122      	str	r2, [r4, #16]
 800ab9c:	f8cd a000 	str.w	sl, [sp]
 800aba0:	464b      	mov	r3, r9
 800aba2:	aa03      	add	r2, sp, #12
 800aba4:	4621      	mov	r1, r4
 800aba6:	4640      	mov	r0, r8
 800aba8:	f7ff fee6 	bl	800a978 <_printf_common>
 800abac:	3001      	adds	r0, #1
 800abae:	d14a      	bne.n	800ac46 <_printf_i+0x1f2>
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295
 800abb4:	b004      	add	sp, #16
 800abb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	f043 0320 	orr.w	r3, r3, #32
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	4833      	ldr	r0, [pc, #204]	@ (800ac90 <_printf_i+0x23c>)
 800abc4:	2778      	movs	r7, #120	@ 0x78
 800abc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	6831      	ldr	r1, [r6, #0]
 800abce:	061f      	lsls	r7, r3, #24
 800abd0:	f851 5b04 	ldr.w	r5, [r1], #4
 800abd4:	d402      	bmi.n	800abdc <_printf_i+0x188>
 800abd6:	065f      	lsls	r7, r3, #25
 800abd8:	bf48      	it	mi
 800abda:	b2ad      	uxthmi	r5, r5
 800abdc:	6031      	str	r1, [r6, #0]
 800abde:	07d9      	lsls	r1, r3, #31
 800abe0:	bf44      	itt	mi
 800abe2:	f043 0320 	orrmi.w	r3, r3, #32
 800abe6:	6023      	strmi	r3, [r4, #0]
 800abe8:	b11d      	cbz	r5, 800abf2 <_printf_i+0x19e>
 800abea:	2310      	movs	r3, #16
 800abec:	e7ac      	b.n	800ab48 <_printf_i+0xf4>
 800abee:	4827      	ldr	r0, [pc, #156]	@ (800ac8c <_printf_i+0x238>)
 800abf0:	e7e9      	b.n	800abc6 <_printf_i+0x172>
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	f023 0320 	bic.w	r3, r3, #32
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	e7f6      	b.n	800abea <_printf_i+0x196>
 800abfc:	4616      	mov	r6, r2
 800abfe:	e7bd      	b.n	800ab7c <_printf_i+0x128>
 800ac00:	6833      	ldr	r3, [r6, #0]
 800ac02:	6825      	ldr	r5, [r4, #0]
 800ac04:	6961      	ldr	r1, [r4, #20]
 800ac06:	1d18      	adds	r0, r3, #4
 800ac08:	6030      	str	r0, [r6, #0]
 800ac0a:	062e      	lsls	r6, r5, #24
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	d501      	bpl.n	800ac14 <_printf_i+0x1c0>
 800ac10:	6019      	str	r1, [r3, #0]
 800ac12:	e002      	b.n	800ac1a <_printf_i+0x1c6>
 800ac14:	0668      	lsls	r0, r5, #25
 800ac16:	d5fb      	bpl.n	800ac10 <_printf_i+0x1bc>
 800ac18:	8019      	strh	r1, [r3, #0]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6123      	str	r3, [r4, #16]
 800ac1e:	4616      	mov	r6, r2
 800ac20:	e7bc      	b.n	800ab9c <_printf_i+0x148>
 800ac22:	6833      	ldr	r3, [r6, #0]
 800ac24:	1d1a      	adds	r2, r3, #4
 800ac26:	6032      	str	r2, [r6, #0]
 800ac28:	681e      	ldr	r6, [r3, #0]
 800ac2a:	6862      	ldr	r2, [r4, #4]
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f7f5 fad6 	bl	80001e0 <memchr>
 800ac34:	b108      	cbz	r0, 800ac3a <_printf_i+0x1e6>
 800ac36:	1b80      	subs	r0, r0, r6
 800ac38:	6060      	str	r0, [r4, #4]
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	6123      	str	r3, [r4, #16]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac44:	e7aa      	b.n	800ab9c <_printf_i+0x148>
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	4632      	mov	r2, r6
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	4640      	mov	r0, r8
 800ac4e:	47d0      	blx	sl
 800ac50:	3001      	adds	r0, #1
 800ac52:	d0ad      	beq.n	800abb0 <_printf_i+0x15c>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	079b      	lsls	r3, r3, #30
 800ac58:	d413      	bmi.n	800ac82 <_printf_i+0x22e>
 800ac5a:	68e0      	ldr	r0, [r4, #12]
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	4298      	cmp	r0, r3
 800ac60:	bfb8      	it	lt
 800ac62:	4618      	movlt	r0, r3
 800ac64:	e7a6      	b.n	800abb4 <_printf_i+0x160>
 800ac66:	2301      	movs	r3, #1
 800ac68:	4632      	mov	r2, r6
 800ac6a:	4649      	mov	r1, r9
 800ac6c:	4640      	mov	r0, r8
 800ac6e:	47d0      	blx	sl
 800ac70:	3001      	adds	r0, #1
 800ac72:	d09d      	beq.n	800abb0 <_printf_i+0x15c>
 800ac74:	3501      	adds	r5, #1
 800ac76:	68e3      	ldr	r3, [r4, #12]
 800ac78:	9903      	ldr	r1, [sp, #12]
 800ac7a:	1a5b      	subs	r3, r3, r1
 800ac7c:	42ab      	cmp	r3, r5
 800ac7e:	dcf2      	bgt.n	800ac66 <_printf_i+0x212>
 800ac80:	e7eb      	b.n	800ac5a <_printf_i+0x206>
 800ac82:	2500      	movs	r5, #0
 800ac84:	f104 0619 	add.w	r6, r4, #25
 800ac88:	e7f5      	b.n	800ac76 <_printf_i+0x222>
 800ac8a:	bf00      	nop
 800ac8c:	0800dc1e 	.word	0x0800dc1e
 800ac90:	0800dc2f 	.word	0x0800dc2f

0800ac94 <std>:
 800ac94:	2300      	movs	r3, #0
 800ac96:	b510      	push	{r4, lr}
 800ac98:	4604      	mov	r4, r0
 800ac9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aca2:	6083      	str	r3, [r0, #8]
 800aca4:	8181      	strh	r1, [r0, #12]
 800aca6:	6643      	str	r3, [r0, #100]	@ 0x64
 800aca8:	81c2      	strh	r2, [r0, #14]
 800acaa:	6183      	str	r3, [r0, #24]
 800acac:	4619      	mov	r1, r3
 800acae:	2208      	movs	r2, #8
 800acb0:	305c      	adds	r0, #92	@ 0x5c
 800acb2:	f000 fa19 	bl	800b0e8 <memset>
 800acb6:	4b0d      	ldr	r3, [pc, #52]	@ (800acec <std+0x58>)
 800acb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800acba:	4b0d      	ldr	r3, [pc, #52]	@ (800acf0 <std+0x5c>)
 800acbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acbe:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <std+0x60>)
 800acc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acc2:	4b0d      	ldr	r3, [pc, #52]	@ (800acf8 <std+0x64>)
 800acc4:	6323      	str	r3, [r4, #48]	@ 0x30
 800acc6:	4b0d      	ldr	r3, [pc, #52]	@ (800acfc <std+0x68>)
 800acc8:	6224      	str	r4, [r4, #32]
 800acca:	429c      	cmp	r4, r3
 800accc:	d006      	beq.n	800acdc <std+0x48>
 800acce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800acd2:	4294      	cmp	r4, r2
 800acd4:	d002      	beq.n	800acdc <std+0x48>
 800acd6:	33d0      	adds	r3, #208	@ 0xd0
 800acd8:	429c      	cmp	r4, r3
 800acda:	d105      	bne.n	800ace8 <std+0x54>
 800acdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ace0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace4:	f000 bae2 	b.w	800b2ac <__retarget_lock_init_recursive>
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	bf00      	nop
 800acec:	0800af39 	.word	0x0800af39
 800acf0:	0800af5b 	.word	0x0800af5b
 800acf4:	0800af93 	.word	0x0800af93
 800acf8:	0800afb7 	.word	0x0800afb7
 800acfc:	20004c70 	.word	0x20004c70

0800ad00 <stdio_exit_handler>:
 800ad00:	4a02      	ldr	r2, [pc, #8]	@ (800ad0c <stdio_exit_handler+0xc>)
 800ad02:	4903      	ldr	r1, [pc, #12]	@ (800ad10 <stdio_exit_handler+0x10>)
 800ad04:	4803      	ldr	r0, [pc, #12]	@ (800ad14 <stdio_exit_handler+0x14>)
 800ad06:	f000 b869 	b.w	800addc <_fwalk_sglue>
 800ad0a:	bf00      	nop
 800ad0c:	20000738 	.word	0x20000738
 800ad10:	0800cd4d 	.word	0x0800cd4d
 800ad14:	20000748 	.word	0x20000748

0800ad18 <cleanup_stdio>:
 800ad18:	6841      	ldr	r1, [r0, #4]
 800ad1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad4c <cleanup_stdio+0x34>)
 800ad1c:	4299      	cmp	r1, r3
 800ad1e:	b510      	push	{r4, lr}
 800ad20:	4604      	mov	r4, r0
 800ad22:	d001      	beq.n	800ad28 <cleanup_stdio+0x10>
 800ad24:	f002 f812 	bl	800cd4c <_fflush_r>
 800ad28:	68a1      	ldr	r1, [r4, #8]
 800ad2a:	4b09      	ldr	r3, [pc, #36]	@ (800ad50 <cleanup_stdio+0x38>)
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	d002      	beq.n	800ad36 <cleanup_stdio+0x1e>
 800ad30:	4620      	mov	r0, r4
 800ad32:	f002 f80b 	bl	800cd4c <_fflush_r>
 800ad36:	68e1      	ldr	r1, [r4, #12]
 800ad38:	4b06      	ldr	r3, [pc, #24]	@ (800ad54 <cleanup_stdio+0x3c>)
 800ad3a:	4299      	cmp	r1, r3
 800ad3c:	d004      	beq.n	800ad48 <cleanup_stdio+0x30>
 800ad3e:	4620      	mov	r0, r4
 800ad40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad44:	f002 b802 	b.w	800cd4c <_fflush_r>
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20004c70 	.word	0x20004c70
 800ad50:	20004cd8 	.word	0x20004cd8
 800ad54:	20004d40 	.word	0x20004d40

0800ad58 <global_stdio_init.part.0>:
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad88 <global_stdio_init.part.0+0x30>)
 800ad5c:	4c0b      	ldr	r4, [pc, #44]	@ (800ad8c <global_stdio_init.part.0+0x34>)
 800ad5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ad90 <global_stdio_init.part.0+0x38>)
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	4620      	mov	r0, r4
 800ad64:	2200      	movs	r2, #0
 800ad66:	2104      	movs	r1, #4
 800ad68:	f7ff ff94 	bl	800ac94 <std>
 800ad6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad70:	2201      	movs	r2, #1
 800ad72:	2109      	movs	r1, #9
 800ad74:	f7ff ff8e 	bl	800ac94 <std>
 800ad78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad7c:	2202      	movs	r2, #2
 800ad7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad82:	2112      	movs	r1, #18
 800ad84:	f7ff bf86 	b.w	800ac94 <std>
 800ad88:	20004da8 	.word	0x20004da8
 800ad8c:	20004c70 	.word	0x20004c70
 800ad90:	0800ad01 	.word	0x0800ad01

0800ad94 <__sfp_lock_acquire>:
 800ad94:	4801      	ldr	r0, [pc, #4]	@ (800ad9c <__sfp_lock_acquire+0x8>)
 800ad96:	f000 ba8a 	b.w	800b2ae <__retarget_lock_acquire_recursive>
 800ad9a:	bf00      	nop
 800ad9c:	20004db1 	.word	0x20004db1

0800ada0 <__sfp_lock_release>:
 800ada0:	4801      	ldr	r0, [pc, #4]	@ (800ada8 <__sfp_lock_release+0x8>)
 800ada2:	f000 ba85 	b.w	800b2b0 <__retarget_lock_release_recursive>
 800ada6:	bf00      	nop
 800ada8:	20004db1 	.word	0x20004db1

0800adac <__sinit>:
 800adac:	b510      	push	{r4, lr}
 800adae:	4604      	mov	r4, r0
 800adb0:	f7ff fff0 	bl	800ad94 <__sfp_lock_acquire>
 800adb4:	6a23      	ldr	r3, [r4, #32]
 800adb6:	b11b      	cbz	r3, 800adc0 <__sinit+0x14>
 800adb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adbc:	f7ff bff0 	b.w	800ada0 <__sfp_lock_release>
 800adc0:	4b04      	ldr	r3, [pc, #16]	@ (800add4 <__sinit+0x28>)
 800adc2:	6223      	str	r3, [r4, #32]
 800adc4:	4b04      	ldr	r3, [pc, #16]	@ (800add8 <__sinit+0x2c>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1f5      	bne.n	800adb8 <__sinit+0xc>
 800adcc:	f7ff ffc4 	bl	800ad58 <global_stdio_init.part.0>
 800add0:	e7f2      	b.n	800adb8 <__sinit+0xc>
 800add2:	bf00      	nop
 800add4:	0800ad19 	.word	0x0800ad19
 800add8:	20004da8 	.word	0x20004da8

0800addc <_fwalk_sglue>:
 800addc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade0:	4607      	mov	r7, r0
 800ade2:	4688      	mov	r8, r1
 800ade4:	4614      	mov	r4, r2
 800ade6:	2600      	movs	r6, #0
 800ade8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adec:	f1b9 0901 	subs.w	r9, r9, #1
 800adf0:	d505      	bpl.n	800adfe <_fwalk_sglue+0x22>
 800adf2:	6824      	ldr	r4, [r4, #0]
 800adf4:	2c00      	cmp	r4, #0
 800adf6:	d1f7      	bne.n	800ade8 <_fwalk_sglue+0xc>
 800adf8:	4630      	mov	r0, r6
 800adfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adfe:	89ab      	ldrh	r3, [r5, #12]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d907      	bls.n	800ae14 <_fwalk_sglue+0x38>
 800ae04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	d003      	beq.n	800ae14 <_fwalk_sglue+0x38>
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4638      	mov	r0, r7
 800ae10:	47c0      	blx	r8
 800ae12:	4306      	orrs	r6, r0
 800ae14:	3568      	adds	r5, #104	@ 0x68
 800ae16:	e7e9      	b.n	800adec <_fwalk_sglue+0x10>

0800ae18 <iprintf>:
 800ae18:	b40f      	push	{r0, r1, r2, r3}
 800ae1a:	b507      	push	{r0, r1, r2, lr}
 800ae1c:	4906      	ldr	r1, [pc, #24]	@ (800ae38 <iprintf+0x20>)
 800ae1e:	ab04      	add	r3, sp, #16
 800ae20:	6808      	ldr	r0, [r1, #0]
 800ae22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae26:	6881      	ldr	r1, [r0, #8]
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	f001 fdf3 	bl	800ca14 <_vfiprintf_r>
 800ae2e:	b003      	add	sp, #12
 800ae30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae34:	b004      	add	sp, #16
 800ae36:	4770      	bx	lr
 800ae38:	20000744 	.word	0x20000744

0800ae3c <_puts_r>:
 800ae3c:	6a03      	ldr	r3, [r0, #32]
 800ae3e:	b570      	push	{r4, r5, r6, lr}
 800ae40:	6884      	ldr	r4, [r0, #8]
 800ae42:	4605      	mov	r5, r0
 800ae44:	460e      	mov	r6, r1
 800ae46:	b90b      	cbnz	r3, 800ae4c <_puts_r+0x10>
 800ae48:	f7ff ffb0 	bl	800adac <__sinit>
 800ae4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae4e:	07db      	lsls	r3, r3, #31
 800ae50:	d405      	bmi.n	800ae5e <_puts_r+0x22>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	0598      	lsls	r0, r3, #22
 800ae56:	d402      	bmi.n	800ae5e <_puts_r+0x22>
 800ae58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae5a:	f000 fa28 	bl	800b2ae <__retarget_lock_acquire_recursive>
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	0719      	lsls	r1, r3, #28
 800ae62:	d502      	bpl.n	800ae6a <_puts_r+0x2e>
 800ae64:	6923      	ldr	r3, [r4, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d135      	bne.n	800aed6 <_puts_r+0x9a>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f000 f8e5 	bl	800b03c <__swsetup_r>
 800ae72:	b380      	cbz	r0, 800aed6 <_puts_r+0x9a>
 800ae74:	f04f 35ff 	mov.w	r5, #4294967295
 800ae78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae7a:	07da      	lsls	r2, r3, #31
 800ae7c:	d405      	bmi.n	800ae8a <_puts_r+0x4e>
 800ae7e:	89a3      	ldrh	r3, [r4, #12]
 800ae80:	059b      	lsls	r3, r3, #22
 800ae82:	d402      	bmi.n	800ae8a <_puts_r+0x4e>
 800ae84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae86:	f000 fa13 	bl	800b2b0 <__retarget_lock_release_recursive>
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	da04      	bge.n	800ae9c <_puts_r+0x60>
 800ae92:	69a2      	ldr	r2, [r4, #24]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	dc17      	bgt.n	800aec8 <_puts_r+0x8c>
 800ae98:	290a      	cmp	r1, #10
 800ae9a:	d015      	beq.n	800aec8 <_puts_r+0x8c>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	6022      	str	r2, [r4, #0]
 800aea2:	7019      	strb	r1, [r3, #0]
 800aea4:	68a3      	ldr	r3, [r4, #8]
 800aea6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	60a3      	str	r3, [r4, #8]
 800aeae:	2900      	cmp	r1, #0
 800aeb0:	d1ed      	bne.n	800ae8e <_puts_r+0x52>
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da11      	bge.n	800aeda <_puts_r+0x9e>
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	210a      	movs	r1, #10
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 f87f 	bl	800afbe <__swbuf_r>
 800aec0:	3001      	adds	r0, #1
 800aec2:	d0d7      	beq.n	800ae74 <_puts_r+0x38>
 800aec4:	250a      	movs	r5, #10
 800aec6:	e7d7      	b.n	800ae78 <_puts_r+0x3c>
 800aec8:	4622      	mov	r2, r4
 800aeca:	4628      	mov	r0, r5
 800aecc:	f000 f877 	bl	800afbe <__swbuf_r>
 800aed0:	3001      	adds	r0, #1
 800aed2:	d1e7      	bne.n	800aea4 <_puts_r+0x68>
 800aed4:	e7ce      	b.n	800ae74 <_puts_r+0x38>
 800aed6:	3e01      	subs	r6, #1
 800aed8:	e7e4      	b.n	800aea4 <_puts_r+0x68>
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	1c5a      	adds	r2, r3, #1
 800aede:	6022      	str	r2, [r4, #0]
 800aee0:	220a      	movs	r2, #10
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	e7ee      	b.n	800aec4 <_puts_r+0x88>
	...

0800aee8 <puts>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	@ (800aef4 <puts+0xc>)
 800aeea:	4601      	mov	r1, r0
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f7ff bfa5 	b.w	800ae3c <_puts_r>
 800aef2:	bf00      	nop
 800aef4:	20000744 	.word	0x20000744

0800aef8 <siprintf>:
 800aef8:	b40e      	push	{r1, r2, r3}
 800aefa:	b500      	push	{lr}
 800aefc:	b09c      	sub	sp, #112	@ 0x70
 800aefe:	ab1d      	add	r3, sp, #116	@ 0x74
 800af00:	9002      	str	r0, [sp, #8]
 800af02:	9006      	str	r0, [sp, #24]
 800af04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af08:	4809      	ldr	r0, [pc, #36]	@ (800af30 <siprintf+0x38>)
 800af0a:	9107      	str	r1, [sp, #28]
 800af0c:	9104      	str	r1, [sp, #16]
 800af0e:	4909      	ldr	r1, [pc, #36]	@ (800af34 <siprintf+0x3c>)
 800af10:	f853 2b04 	ldr.w	r2, [r3], #4
 800af14:	9105      	str	r1, [sp, #20]
 800af16:	6800      	ldr	r0, [r0, #0]
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	a902      	add	r1, sp, #8
 800af1c:	f001 fc54 	bl	800c7c8 <_svfiprintf_r>
 800af20:	9b02      	ldr	r3, [sp, #8]
 800af22:	2200      	movs	r2, #0
 800af24:	701a      	strb	r2, [r3, #0]
 800af26:	b01c      	add	sp, #112	@ 0x70
 800af28:	f85d eb04 	ldr.w	lr, [sp], #4
 800af2c:	b003      	add	sp, #12
 800af2e:	4770      	bx	lr
 800af30:	20000744 	.word	0x20000744
 800af34:	ffff0208 	.word	0xffff0208

0800af38 <__sread>:
 800af38:	b510      	push	{r4, lr}
 800af3a:	460c      	mov	r4, r1
 800af3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af40:	f000 f956 	bl	800b1f0 <_read_r>
 800af44:	2800      	cmp	r0, #0
 800af46:	bfab      	itete	ge
 800af48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af4a:	89a3      	ldrhlt	r3, [r4, #12]
 800af4c:	181b      	addge	r3, r3, r0
 800af4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af52:	bfac      	ite	ge
 800af54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af56:	81a3      	strhlt	r3, [r4, #12]
 800af58:	bd10      	pop	{r4, pc}

0800af5a <__swrite>:
 800af5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5e:	461f      	mov	r7, r3
 800af60:	898b      	ldrh	r3, [r1, #12]
 800af62:	05db      	lsls	r3, r3, #23
 800af64:	4605      	mov	r5, r0
 800af66:	460c      	mov	r4, r1
 800af68:	4616      	mov	r6, r2
 800af6a:	d505      	bpl.n	800af78 <__swrite+0x1e>
 800af6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af70:	2302      	movs	r3, #2
 800af72:	2200      	movs	r2, #0
 800af74:	f000 f92a 	bl	800b1cc <_lseek_r>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af82:	81a3      	strh	r3, [r4, #12]
 800af84:	4632      	mov	r2, r6
 800af86:	463b      	mov	r3, r7
 800af88:	4628      	mov	r0, r5
 800af8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af8e:	f000 b951 	b.w	800b234 <_write_r>

0800af92 <__sseek>:
 800af92:	b510      	push	{r4, lr}
 800af94:	460c      	mov	r4, r1
 800af96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9a:	f000 f917 	bl	800b1cc <_lseek_r>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	bf15      	itete	ne
 800afa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800afa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800afaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800afae:	81a3      	strheq	r3, [r4, #12]
 800afb0:	bf18      	it	ne
 800afb2:	81a3      	strhne	r3, [r4, #12]
 800afb4:	bd10      	pop	{r4, pc}

0800afb6 <__sclose>:
 800afb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afba:	f000 b8a1 	b.w	800b100 <_close_r>

0800afbe <__swbuf_r>:
 800afbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc0:	460e      	mov	r6, r1
 800afc2:	4614      	mov	r4, r2
 800afc4:	4605      	mov	r5, r0
 800afc6:	b118      	cbz	r0, 800afd0 <__swbuf_r+0x12>
 800afc8:	6a03      	ldr	r3, [r0, #32]
 800afca:	b90b      	cbnz	r3, 800afd0 <__swbuf_r+0x12>
 800afcc:	f7ff feee 	bl	800adac <__sinit>
 800afd0:	69a3      	ldr	r3, [r4, #24]
 800afd2:	60a3      	str	r3, [r4, #8]
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	071a      	lsls	r2, r3, #28
 800afd8:	d501      	bpl.n	800afde <__swbuf_r+0x20>
 800afda:	6923      	ldr	r3, [r4, #16]
 800afdc:	b943      	cbnz	r3, 800aff0 <__swbuf_r+0x32>
 800afde:	4621      	mov	r1, r4
 800afe0:	4628      	mov	r0, r5
 800afe2:	f000 f82b 	bl	800b03c <__swsetup_r>
 800afe6:	b118      	cbz	r0, 800aff0 <__swbuf_r+0x32>
 800afe8:	f04f 37ff 	mov.w	r7, #4294967295
 800afec:	4638      	mov	r0, r7
 800afee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aff0:	6823      	ldr	r3, [r4, #0]
 800aff2:	6922      	ldr	r2, [r4, #16]
 800aff4:	1a98      	subs	r0, r3, r2
 800aff6:	6963      	ldr	r3, [r4, #20]
 800aff8:	b2f6      	uxtb	r6, r6
 800affa:	4283      	cmp	r3, r0
 800affc:	4637      	mov	r7, r6
 800affe:	dc05      	bgt.n	800b00c <__swbuf_r+0x4e>
 800b000:	4621      	mov	r1, r4
 800b002:	4628      	mov	r0, r5
 800b004:	f001 fea2 	bl	800cd4c <_fflush_r>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d1ed      	bne.n	800afe8 <__swbuf_r+0x2a>
 800b00c:	68a3      	ldr	r3, [r4, #8]
 800b00e:	3b01      	subs	r3, #1
 800b010:	60a3      	str	r3, [r4, #8]
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	1c5a      	adds	r2, r3, #1
 800b016:	6022      	str	r2, [r4, #0]
 800b018:	701e      	strb	r6, [r3, #0]
 800b01a:	6962      	ldr	r2, [r4, #20]
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	429a      	cmp	r2, r3
 800b020:	d004      	beq.n	800b02c <__swbuf_r+0x6e>
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	07db      	lsls	r3, r3, #31
 800b026:	d5e1      	bpl.n	800afec <__swbuf_r+0x2e>
 800b028:	2e0a      	cmp	r6, #10
 800b02a:	d1df      	bne.n	800afec <__swbuf_r+0x2e>
 800b02c:	4621      	mov	r1, r4
 800b02e:	4628      	mov	r0, r5
 800b030:	f001 fe8c 	bl	800cd4c <_fflush_r>
 800b034:	2800      	cmp	r0, #0
 800b036:	d0d9      	beq.n	800afec <__swbuf_r+0x2e>
 800b038:	e7d6      	b.n	800afe8 <__swbuf_r+0x2a>
	...

0800b03c <__swsetup_r>:
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	4b29      	ldr	r3, [pc, #164]	@ (800b0e4 <__swsetup_r+0xa8>)
 800b040:	4605      	mov	r5, r0
 800b042:	6818      	ldr	r0, [r3, #0]
 800b044:	460c      	mov	r4, r1
 800b046:	b118      	cbz	r0, 800b050 <__swsetup_r+0x14>
 800b048:	6a03      	ldr	r3, [r0, #32]
 800b04a:	b90b      	cbnz	r3, 800b050 <__swsetup_r+0x14>
 800b04c:	f7ff feae 	bl	800adac <__sinit>
 800b050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b054:	0719      	lsls	r1, r3, #28
 800b056:	d422      	bmi.n	800b09e <__swsetup_r+0x62>
 800b058:	06da      	lsls	r2, r3, #27
 800b05a:	d407      	bmi.n	800b06c <__swsetup_r+0x30>
 800b05c:	2209      	movs	r2, #9
 800b05e:	602a      	str	r2, [r5, #0]
 800b060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	f04f 30ff 	mov.w	r0, #4294967295
 800b06a:	e033      	b.n	800b0d4 <__swsetup_r+0x98>
 800b06c:	0758      	lsls	r0, r3, #29
 800b06e:	d512      	bpl.n	800b096 <__swsetup_r+0x5a>
 800b070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b072:	b141      	cbz	r1, 800b086 <__swsetup_r+0x4a>
 800b074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b078:	4299      	cmp	r1, r3
 800b07a:	d002      	beq.n	800b082 <__swsetup_r+0x46>
 800b07c:	4628      	mov	r0, r5
 800b07e:	f000 ff73 	bl	800bf68 <_free_r>
 800b082:	2300      	movs	r3, #0
 800b084:	6363      	str	r3, [r4, #52]	@ 0x34
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b08c:	81a3      	strh	r3, [r4, #12]
 800b08e:	2300      	movs	r3, #0
 800b090:	6063      	str	r3, [r4, #4]
 800b092:	6923      	ldr	r3, [r4, #16]
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f043 0308 	orr.w	r3, r3, #8
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	6923      	ldr	r3, [r4, #16]
 800b0a0:	b94b      	cbnz	r3, 800b0b6 <__swsetup_r+0x7a>
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0ac:	d003      	beq.n	800b0b6 <__swsetup_r+0x7a>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f001 fe99 	bl	800cde8 <__smakebuf_r>
 800b0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ba:	f013 0201 	ands.w	r2, r3, #1
 800b0be:	d00a      	beq.n	800b0d6 <__swsetup_r+0x9a>
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	60a2      	str	r2, [r4, #8]
 800b0c4:	6962      	ldr	r2, [r4, #20]
 800b0c6:	4252      	negs	r2, r2
 800b0c8:	61a2      	str	r2, [r4, #24]
 800b0ca:	6922      	ldr	r2, [r4, #16]
 800b0cc:	b942      	cbnz	r2, 800b0e0 <__swsetup_r+0xa4>
 800b0ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0d2:	d1c5      	bne.n	800b060 <__swsetup_r+0x24>
 800b0d4:	bd38      	pop	{r3, r4, r5, pc}
 800b0d6:	0799      	lsls	r1, r3, #30
 800b0d8:	bf58      	it	pl
 800b0da:	6962      	ldrpl	r2, [r4, #20]
 800b0dc:	60a2      	str	r2, [r4, #8]
 800b0de:	e7f4      	b.n	800b0ca <__swsetup_r+0x8e>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	e7f7      	b.n	800b0d4 <__swsetup_r+0x98>
 800b0e4:	20000744 	.word	0x20000744

0800b0e8 <memset>:
 800b0e8:	4402      	add	r2, r0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d100      	bne.n	800b0f2 <memset+0xa>
 800b0f0:	4770      	bx	lr
 800b0f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b0f6:	e7f9      	b.n	800b0ec <memset+0x4>

0800b0f8 <_localeconv_r>:
 800b0f8:	4800      	ldr	r0, [pc, #0]	@ (800b0fc <_localeconv_r+0x4>)
 800b0fa:	4770      	bx	lr
 800b0fc:	20000884 	.word	0x20000884

0800b100 <_close_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4d06      	ldr	r5, [pc, #24]	@ (800b11c <_close_r+0x1c>)
 800b104:	2300      	movs	r3, #0
 800b106:	4604      	mov	r4, r0
 800b108:	4608      	mov	r0, r1
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	f002 f934 	bl	800d378 <_close>
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	d102      	bne.n	800b11a <_close_r+0x1a>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	b103      	cbz	r3, 800b11a <_close_r+0x1a>
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	20004dac 	.word	0x20004dac

0800b120 <_reclaim_reent>:
 800b120:	4b29      	ldr	r3, [pc, #164]	@ (800b1c8 <_reclaim_reent+0xa8>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4283      	cmp	r3, r0
 800b126:	b570      	push	{r4, r5, r6, lr}
 800b128:	4604      	mov	r4, r0
 800b12a:	d04b      	beq.n	800b1c4 <_reclaim_reent+0xa4>
 800b12c:	69c3      	ldr	r3, [r0, #28]
 800b12e:	b1ab      	cbz	r3, 800b15c <_reclaim_reent+0x3c>
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	b16b      	cbz	r3, 800b150 <_reclaim_reent+0x30>
 800b134:	2500      	movs	r5, #0
 800b136:	69e3      	ldr	r3, [r4, #28]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	5959      	ldr	r1, [r3, r5]
 800b13c:	2900      	cmp	r1, #0
 800b13e:	d13b      	bne.n	800b1b8 <_reclaim_reent+0x98>
 800b140:	3504      	adds	r5, #4
 800b142:	2d80      	cmp	r5, #128	@ 0x80
 800b144:	d1f7      	bne.n	800b136 <_reclaim_reent+0x16>
 800b146:	69e3      	ldr	r3, [r4, #28]
 800b148:	4620      	mov	r0, r4
 800b14a:	68d9      	ldr	r1, [r3, #12]
 800b14c:	f000 ff0c 	bl	800bf68 <_free_r>
 800b150:	69e3      	ldr	r3, [r4, #28]
 800b152:	6819      	ldr	r1, [r3, #0]
 800b154:	b111      	cbz	r1, 800b15c <_reclaim_reent+0x3c>
 800b156:	4620      	mov	r0, r4
 800b158:	f000 ff06 	bl	800bf68 <_free_r>
 800b15c:	6961      	ldr	r1, [r4, #20]
 800b15e:	b111      	cbz	r1, 800b166 <_reclaim_reent+0x46>
 800b160:	4620      	mov	r0, r4
 800b162:	f000 ff01 	bl	800bf68 <_free_r>
 800b166:	69e1      	ldr	r1, [r4, #28]
 800b168:	b111      	cbz	r1, 800b170 <_reclaim_reent+0x50>
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 fefc 	bl	800bf68 <_free_r>
 800b170:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b172:	b111      	cbz	r1, 800b17a <_reclaim_reent+0x5a>
 800b174:	4620      	mov	r0, r4
 800b176:	f000 fef7 	bl	800bf68 <_free_r>
 800b17a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b17c:	b111      	cbz	r1, 800b184 <_reclaim_reent+0x64>
 800b17e:	4620      	mov	r0, r4
 800b180:	f000 fef2 	bl	800bf68 <_free_r>
 800b184:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b186:	b111      	cbz	r1, 800b18e <_reclaim_reent+0x6e>
 800b188:	4620      	mov	r0, r4
 800b18a:	f000 feed 	bl	800bf68 <_free_r>
 800b18e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b190:	b111      	cbz	r1, 800b198 <_reclaim_reent+0x78>
 800b192:	4620      	mov	r0, r4
 800b194:	f000 fee8 	bl	800bf68 <_free_r>
 800b198:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b19a:	b111      	cbz	r1, 800b1a2 <_reclaim_reent+0x82>
 800b19c:	4620      	mov	r0, r4
 800b19e:	f000 fee3 	bl	800bf68 <_free_r>
 800b1a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b1a4:	b111      	cbz	r1, 800b1ac <_reclaim_reent+0x8c>
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 fede 	bl	800bf68 <_free_r>
 800b1ac:	6a23      	ldr	r3, [r4, #32]
 800b1ae:	b14b      	cbz	r3, 800b1c4 <_reclaim_reent+0xa4>
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1b6:	4718      	bx	r3
 800b1b8:	680e      	ldr	r6, [r1, #0]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fed4 	bl	800bf68 <_free_r>
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	e7bb      	b.n	800b13c <_reclaim_reent+0x1c>
 800b1c4:	bd70      	pop	{r4, r5, r6, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20000744 	.word	0x20000744

0800b1cc <_lseek_r>:
 800b1cc:	b538      	push	{r3, r4, r5, lr}
 800b1ce:	4d07      	ldr	r5, [pc, #28]	@ (800b1ec <_lseek_r+0x20>)
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	4608      	mov	r0, r1
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	602a      	str	r2, [r5, #0]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f002 f8f4 	bl	800d3c8 <_lseek>
 800b1e0:	1c43      	adds	r3, r0, #1
 800b1e2:	d102      	bne.n	800b1ea <_lseek_r+0x1e>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	b103      	cbz	r3, 800b1ea <_lseek_r+0x1e>
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	bd38      	pop	{r3, r4, r5, pc}
 800b1ec:	20004dac 	.word	0x20004dac

0800b1f0 <_read_r>:
 800b1f0:	b538      	push	{r3, r4, r5, lr}
 800b1f2:	4d07      	ldr	r5, [pc, #28]	@ (800b210 <_read_r+0x20>)
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	4608      	mov	r0, r1
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	602a      	str	r2, [r5, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	f002 f8ea 	bl	800d3d8 <_read>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d102      	bne.n	800b20e <_read_r+0x1e>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	b103      	cbz	r3, 800b20e <_read_r+0x1e>
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	20004dac 	.word	0x20004dac

0800b214 <_sbrk_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	4d06      	ldr	r5, [pc, #24]	@ (800b230 <_sbrk_r+0x1c>)
 800b218:	2300      	movs	r3, #0
 800b21a:	4604      	mov	r4, r0
 800b21c:	4608      	mov	r0, r1
 800b21e:	602b      	str	r3, [r5, #0]
 800b220:	f7f6 fef8 	bl	8002014 <_sbrk>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	d102      	bne.n	800b22e <_sbrk_r+0x1a>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	b103      	cbz	r3, 800b22e <_sbrk_r+0x1a>
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	20004dac 	.word	0x20004dac

0800b234 <_write_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d07      	ldr	r5, [pc, #28]	@ (800b254 <_write_r+0x20>)
 800b238:	4604      	mov	r4, r0
 800b23a:	4608      	mov	r0, r1
 800b23c:	4611      	mov	r1, r2
 800b23e:	2200      	movs	r2, #0
 800b240:	602a      	str	r2, [r5, #0]
 800b242:	461a      	mov	r2, r3
 800b244:	f7f5 fec1 	bl	8000fca <_write>
 800b248:	1c43      	adds	r3, r0, #1
 800b24a:	d102      	bne.n	800b252 <_write_r+0x1e>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	b103      	cbz	r3, 800b252 <_write_r+0x1e>
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	bd38      	pop	{r3, r4, r5, pc}
 800b254:	20004dac 	.word	0x20004dac

0800b258 <__errno>:
 800b258:	4b01      	ldr	r3, [pc, #4]	@ (800b260 <__errno+0x8>)
 800b25a:	6818      	ldr	r0, [r3, #0]
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	20000744 	.word	0x20000744

0800b264 <__libc_init_array>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	4d0d      	ldr	r5, [pc, #52]	@ (800b29c <__libc_init_array+0x38>)
 800b268:	4c0d      	ldr	r4, [pc, #52]	@ (800b2a0 <__libc_init_array+0x3c>)
 800b26a:	1b64      	subs	r4, r4, r5
 800b26c:	10a4      	asrs	r4, r4, #2
 800b26e:	2600      	movs	r6, #0
 800b270:	42a6      	cmp	r6, r4
 800b272:	d109      	bne.n	800b288 <__libc_init_array+0x24>
 800b274:	4d0b      	ldr	r5, [pc, #44]	@ (800b2a4 <__libc_init_array+0x40>)
 800b276:	4c0c      	ldr	r4, [pc, #48]	@ (800b2a8 <__libc_init_array+0x44>)
 800b278:	f002 f8b8 	bl	800d3ec <_init>
 800b27c:	1b64      	subs	r4, r4, r5
 800b27e:	10a4      	asrs	r4, r4, #2
 800b280:	2600      	movs	r6, #0
 800b282:	42a6      	cmp	r6, r4
 800b284:	d105      	bne.n	800b292 <__libc_init_array+0x2e>
 800b286:	bd70      	pop	{r4, r5, r6, pc}
 800b288:	f855 3b04 	ldr.w	r3, [r5], #4
 800b28c:	4798      	blx	r3
 800b28e:	3601      	adds	r6, #1
 800b290:	e7ee      	b.n	800b270 <__libc_init_array+0xc>
 800b292:	f855 3b04 	ldr.w	r3, [r5], #4
 800b296:	4798      	blx	r3
 800b298:	3601      	adds	r6, #1
 800b29a:	e7f2      	b.n	800b282 <__libc_init_array+0x1e>
 800b29c:	0800dfc0 	.word	0x0800dfc0
 800b2a0:	0800dfc0 	.word	0x0800dfc0
 800b2a4:	0800dfc0 	.word	0x0800dfc0
 800b2a8:	0800dfc4 	.word	0x0800dfc4

0800b2ac <__retarget_lock_init_recursive>:
 800b2ac:	4770      	bx	lr

0800b2ae <__retarget_lock_acquire_recursive>:
 800b2ae:	4770      	bx	lr

0800b2b0 <__retarget_lock_release_recursive>:
 800b2b0:	4770      	bx	lr

0800b2b2 <memcpy>:
 800b2b2:	440a      	add	r2, r1
 800b2b4:	4291      	cmp	r1, r2
 800b2b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2ba:	d100      	bne.n	800b2be <memcpy+0xc>
 800b2bc:	4770      	bx	lr
 800b2be:	b510      	push	{r4, lr}
 800b2c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2c8:	4291      	cmp	r1, r2
 800b2ca:	d1f9      	bne.n	800b2c0 <memcpy+0xe>
 800b2cc:	bd10      	pop	{r4, pc}

0800b2ce <quorem>:
 800b2ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d2:	6903      	ldr	r3, [r0, #16]
 800b2d4:	690c      	ldr	r4, [r1, #16]
 800b2d6:	42a3      	cmp	r3, r4
 800b2d8:	4607      	mov	r7, r0
 800b2da:	db7e      	blt.n	800b3da <quorem+0x10c>
 800b2dc:	3c01      	subs	r4, #1
 800b2de:	f101 0814 	add.w	r8, r1, #20
 800b2e2:	00a3      	lsls	r3, r4, #2
 800b2e4:	f100 0514 	add.w	r5, r0, #20
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b2f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b300:	fbb2 f6f3 	udiv	r6, r2, r3
 800b304:	d32e      	bcc.n	800b364 <quorem+0x96>
 800b306:	f04f 0a00 	mov.w	sl, #0
 800b30a:	46c4      	mov	ip, r8
 800b30c:	46ae      	mov	lr, r5
 800b30e:	46d3      	mov	fp, sl
 800b310:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b314:	b298      	uxth	r0, r3
 800b316:	fb06 a000 	mla	r0, r6, r0, sl
 800b31a:	0c02      	lsrs	r2, r0, #16
 800b31c:	0c1b      	lsrs	r3, r3, #16
 800b31e:	fb06 2303 	mla	r3, r6, r3, r2
 800b322:	f8de 2000 	ldr.w	r2, [lr]
 800b326:	b280      	uxth	r0, r0
 800b328:	b292      	uxth	r2, r2
 800b32a:	1a12      	subs	r2, r2, r0
 800b32c:	445a      	add	r2, fp
 800b32e:	f8de 0000 	ldr.w	r0, [lr]
 800b332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b336:	b29b      	uxth	r3, r3
 800b338:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b33c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b340:	b292      	uxth	r2, r2
 800b342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b346:	45e1      	cmp	r9, ip
 800b348:	f84e 2b04 	str.w	r2, [lr], #4
 800b34c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b350:	d2de      	bcs.n	800b310 <quorem+0x42>
 800b352:	9b00      	ldr	r3, [sp, #0]
 800b354:	58eb      	ldr	r3, [r5, r3]
 800b356:	b92b      	cbnz	r3, 800b364 <quorem+0x96>
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	3b04      	subs	r3, #4
 800b35c:	429d      	cmp	r5, r3
 800b35e:	461a      	mov	r2, r3
 800b360:	d32f      	bcc.n	800b3c2 <quorem+0xf4>
 800b362:	613c      	str	r4, [r7, #16]
 800b364:	4638      	mov	r0, r7
 800b366:	f001 f8c3 	bl	800c4f0 <__mcmp>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	db25      	blt.n	800b3ba <quorem+0xec>
 800b36e:	4629      	mov	r1, r5
 800b370:	2000      	movs	r0, #0
 800b372:	f858 2b04 	ldr.w	r2, [r8], #4
 800b376:	f8d1 c000 	ldr.w	ip, [r1]
 800b37a:	fa1f fe82 	uxth.w	lr, r2
 800b37e:	fa1f f38c 	uxth.w	r3, ip
 800b382:	eba3 030e 	sub.w	r3, r3, lr
 800b386:	4403      	add	r3, r0
 800b388:	0c12      	lsrs	r2, r2, #16
 800b38a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b38e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b392:	b29b      	uxth	r3, r3
 800b394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b398:	45c1      	cmp	r9, r8
 800b39a:	f841 3b04 	str.w	r3, [r1], #4
 800b39e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3a2:	d2e6      	bcs.n	800b372 <quorem+0xa4>
 800b3a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3ac:	b922      	cbnz	r2, 800b3b8 <quorem+0xea>
 800b3ae:	3b04      	subs	r3, #4
 800b3b0:	429d      	cmp	r5, r3
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	d30b      	bcc.n	800b3ce <quorem+0x100>
 800b3b6:	613c      	str	r4, [r7, #16]
 800b3b8:	3601      	adds	r6, #1
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	b003      	add	sp, #12
 800b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c2:	6812      	ldr	r2, [r2, #0]
 800b3c4:	3b04      	subs	r3, #4
 800b3c6:	2a00      	cmp	r2, #0
 800b3c8:	d1cb      	bne.n	800b362 <quorem+0x94>
 800b3ca:	3c01      	subs	r4, #1
 800b3cc:	e7c6      	b.n	800b35c <quorem+0x8e>
 800b3ce:	6812      	ldr	r2, [r2, #0]
 800b3d0:	3b04      	subs	r3, #4
 800b3d2:	2a00      	cmp	r2, #0
 800b3d4:	d1ef      	bne.n	800b3b6 <quorem+0xe8>
 800b3d6:	3c01      	subs	r4, #1
 800b3d8:	e7ea      	b.n	800b3b0 <quorem+0xe2>
 800b3da:	2000      	movs	r0, #0
 800b3dc:	e7ee      	b.n	800b3bc <quorem+0xee>
	...

0800b3e0 <_dtoa_r>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	69c7      	ldr	r7, [r0, #28]
 800b3e6:	b099      	sub	sp, #100	@ 0x64
 800b3e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b3ec:	ec55 4b10 	vmov	r4, r5, d0
 800b3f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b3f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3f4:	4683      	mov	fp, r0
 800b3f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3fa:	b97f      	cbnz	r7, 800b41c <_dtoa_r+0x3c>
 800b3fc:	2010      	movs	r0, #16
 800b3fe:	f7fe ff0d 	bl	800a21c <malloc>
 800b402:	4602      	mov	r2, r0
 800b404:	f8cb 001c 	str.w	r0, [fp, #28]
 800b408:	b920      	cbnz	r0, 800b414 <_dtoa_r+0x34>
 800b40a:	4ba7      	ldr	r3, [pc, #668]	@ (800b6a8 <_dtoa_r+0x2c8>)
 800b40c:	21ef      	movs	r1, #239	@ 0xef
 800b40e:	48a7      	ldr	r0, [pc, #668]	@ (800b6ac <_dtoa_r+0x2cc>)
 800b410:	f001 fd62 	bl	800ced8 <__assert_func>
 800b414:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b418:	6007      	str	r7, [r0, #0]
 800b41a:	60c7      	str	r7, [r0, #12]
 800b41c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b420:	6819      	ldr	r1, [r3, #0]
 800b422:	b159      	cbz	r1, 800b43c <_dtoa_r+0x5c>
 800b424:	685a      	ldr	r2, [r3, #4]
 800b426:	604a      	str	r2, [r1, #4]
 800b428:	2301      	movs	r3, #1
 800b42a:	4093      	lsls	r3, r2
 800b42c:	608b      	str	r3, [r1, #8]
 800b42e:	4658      	mov	r0, fp
 800b430:	f000 fe24 	bl	800c07c <_Bfree>
 800b434:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b438:	2200      	movs	r2, #0
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	1e2b      	subs	r3, r5, #0
 800b43e:	bfb9      	ittee	lt
 800b440:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b444:	9303      	strlt	r3, [sp, #12]
 800b446:	2300      	movge	r3, #0
 800b448:	6033      	strge	r3, [r6, #0]
 800b44a:	9f03      	ldr	r7, [sp, #12]
 800b44c:	4b98      	ldr	r3, [pc, #608]	@ (800b6b0 <_dtoa_r+0x2d0>)
 800b44e:	bfbc      	itt	lt
 800b450:	2201      	movlt	r2, #1
 800b452:	6032      	strlt	r2, [r6, #0]
 800b454:	43bb      	bics	r3, r7
 800b456:	d112      	bne.n	800b47e <_dtoa_r+0x9e>
 800b458:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b45a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b464:	4323      	orrs	r3, r4
 800b466:	f000 854d 	beq.w	800bf04 <_dtoa_r+0xb24>
 800b46a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b46c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b6c4 <_dtoa_r+0x2e4>
 800b470:	2b00      	cmp	r3, #0
 800b472:	f000 854f 	beq.w	800bf14 <_dtoa_r+0xb34>
 800b476:	f10a 0303 	add.w	r3, sl, #3
 800b47a:	f000 bd49 	b.w	800bf10 <_dtoa_r+0xb30>
 800b47e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b482:	2200      	movs	r2, #0
 800b484:	ec51 0b17 	vmov	r0, r1, d7
 800b488:	2300      	movs	r3, #0
 800b48a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b48e:	f7f5 fb23 	bl	8000ad8 <__aeabi_dcmpeq>
 800b492:	4680      	mov	r8, r0
 800b494:	b158      	cbz	r0, 800b4ae <_dtoa_r+0xce>
 800b496:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b498:	2301      	movs	r3, #1
 800b49a:	6013      	str	r3, [r2, #0]
 800b49c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b49e:	b113      	cbz	r3, 800b4a6 <_dtoa_r+0xc6>
 800b4a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4a2:	4b84      	ldr	r3, [pc, #528]	@ (800b6b4 <_dtoa_r+0x2d4>)
 800b4a4:	6013      	str	r3, [r2, #0]
 800b4a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b6c8 <_dtoa_r+0x2e8>
 800b4aa:	f000 bd33 	b.w	800bf14 <_dtoa_r+0xb34>
 800b4ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b4b2:	aa16      	add	r2, sp, #88	@ 0x58
 800b4b4:	a917      	add	r1, sp, #92	@ 0x5c
 800b4b6:	4658      	mov	r0, fp
 800b4b8:	f001 f8ca 	bl	800c650 <__d2b>
 800b4bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b4c0:	4681      	mov	r9, r0
 800b4c2:	2e00      	cmp	r6, #0
 800b4c4:	d077      	beq.n	800b5b6 <_dtoa_r+0x1d6>
 800b4c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b4cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b4d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b4dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	4b74      	ldr	r3, [pc, #464]	@ (800b6b8 <_dtoa_r+0x2d8>)
 800b4e6:	f7f4 fed7 	bl	8000298 <__aeabi_dsub>
 800b4ea:	a369      	add	r3, pc, #420	@ (adr r3, 800b690 <_dtoa_r+0x2b0>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7f5 f88a 	bl	8000608 <__aeabi_dmul>
 800b4f4:	a368      	add	r3, pc, #416	@ (adr r3, 800b698 <_dtoa_r+0x2b8>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7f4 fecf 	bl	800029c <__adddf3>
 800b4fe:	4604      	mov	r4, r0
 800b500:	4630      	mov	r0, r6
 800b502:	460d      	mov	r5, r1
 800b504:	f7f5 f816 	bl	8000534 <__aeabi_i2d>
 800b508:	a365      	add	r3, pc, #404	@ (adr r3, 800b6a0 <_dtoa_r+0x2c0>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f5 f87b 	bl	8000608 <__aeabi_dmul>
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4620      	mov	r0, r4
 800b518:	4629      	mov	r1, r5
 800b51a:	f7f4 febf 	bl	800029c <__adddf3>
 800b51e:	4604      	mov	r4, r0
 800b520:	460d      	mov	r5, r1
 800b522:	f7f5 fb21 	bl	8000b68 <__aeabi_d2iz>
 800b526:	2200      	movs	r2, #0
 800b528:	4607      	mov	r7, r0
 800b52a:	2300      	movs	r3, #0
 800b52c:	4620      	mov	r0, r4
 800b52e:	4629      	mov	r1, r5
 800b530:	f7f5 fadc 	bl	8000aec <__aeabi_dcmplt>
 800b534:	b140      	cbz	r0, 800b548 <_dtoa_r+0x168>
 800b536:	4638      	mov	r0, r7
 800b538:	f7f4 fffc 	bl	8000534 <__aeabi_i2d>
 800b53c:	4622      	mov	r2, r4
 800b53e:	462b      	mov	r3, r5
 800b540:	f7f5 faca 	bl	8000ad8 <__aeabi_dcmpeq>
 800b544:	b900      	cbnz	r0, 800b548 <_dtoa_r+0x168>
 800b546:	3f01      	subs	r7, #1
 800b548:	2f16      	cmp	r7, #22
 800b54a:	d851      	bhi.n	800b5f0 <_dtoa_r+0x210>
 800b54c:	4b5b      	ldr	r3, [pc, #364]	@ (800b6bc <_dtoa_r+0x2dc>)
 800b54e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b55a:	f7f5 fac7 	bl	8000aec <__aeabi_dcmplt>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d048      	beq.n	800b5f4 <_dtoa_r+0x214>
 800b562:	3f01      	subs	r7, #1
 800b564:	2300      	movs	r3, #0
 800b566:	9312      	str	r3, [sp, #72]	@ 0x48
 800b568:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b56a:	1b9b      	subs	r3, r3, r6
 800b56c:	1e5a      	subs	r2, r3, #1
 800b56e:	bf44      	itt	mi
 800b570:	f1c3 0801 	rsbmi	r8, r3, #1
 800b574:	2300      	movmi	r3, #0
 800b576:	9208      	str	r2, [sp, #32]
 800b578:	bf54      	ite	pl
 800b57a:	f04f 0800 	movpl.w	r8, #0
 800b57e:	9308      	strmi	r3, [sp, #32]
 800b580:	2f00      	cmp	r7, #0
 800b582:	db39      	blt.n	800b5f8 <_dtoa_r+0x218>
 800b584:	9b08      	ldr	r3, [sp, #32]
 800b586:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b588:	443b      	add	r3, r7
 800b58a:	9308      	str	r3, [sp, #32]
 800b58c:	2300      	movs	r3, #0
 800b58e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b592:	2b09      	cmp	r3, #9
 800b594:	d864      	bhi.n	800b660 <_dtoa_r+0x280>
 800b596:	2b05      	cmp	r3, #5
 800b598:	bfc4      	itt	gt
 800b59a:	3b04      	subgt	r3, #4
 800b59c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a0:	f1a3 0302 	sub.w	r3, r3, #2
 800b5a4:	bfcc      	ite	gt
 800b5a6:	2400      	movgt	r4, #0
 800b5a8:	2401      	movle	r4, #1
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d863      	bhi.n	800b676 <_dtoa_r+0x296>
 800b5ae:	e8df f003 	tbb	[pc, r3]
 800b5b2:	372a      	.short	0x372a
 800b5b4:	5535      	.short	0x5535
 800b5b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b5ba:	441e      	add	r6, r3
 800b5bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b5c0:	2b20      	cmp	r3, #32
 800b5c2:	bfc1      	itttt	gt
 800b5c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b5c8:	409f      	lslgt	r7, r3
 800b5ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b5ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b5d2:	bfd6      	itet	le
 800b5d4:	f1c3 0320 	rsble	r3, r3, #32
 800b5d8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b5dc:	fa04 f003 	lslle.w	r0, r4, r3
 800b5e0:	f7f4 ff98 	bl	8000514 <__aeabi_ui2d>
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b5ea:	3e01      	subs	r6, #1
 800b5ec:	9214      	str	r2, [sp, #80]	@ 0x50
 800b5ee:	e777      	b.n	800b4e0 <_dtoa_r+0x100>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e7b8      	b.n	800b566 <_dtoa_r+0x186>
 800b5f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b5f6:	e7b7      	b.n	800b568 <_dtoa_r+0x188>
 800b5f8:	427b      	negs	r3, r7
 800b5fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	eba8 0807 	sub.w	r8, r8, r7
 800b602:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b604:	e7c4      	b.n	800b590 <_dtoa_r+0x1b0>
 800b606:	2300      	movs	r3, #0
 800b608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dc35      	bgt.n	800b67c <_dtoa_r+0x29c>
 800b610:	2301      	movs	r3, #1
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	9307      	str	r3, [sp, #28]
 800b616:	461a      	mov	r2, r3
 800b618:	920e      	str	r2, [sp, #56]	@ 0x38
 800b61a:	e00b      	b.n	800b634 <_dtoa_r+0x254>
 800b61c:	2301      	movs	r3, #1
 800b61e:	e7f3      	b.n	800b608 <_dtoa_r+0x228>
 800b620:	2300      	movs	r3, #0
 800b622:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b626:	18fb      	adds	r3, r7, r3
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	3301      	adds	r3, #1
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	9307      	str	r3, [sp, #28]
 800b630:	bfb8      	it	lt
 800b632:	2301      	movlt	r3, #1
 800b634:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b638:	2100      	movs	r1, #0
 800b63a:	2204      	movs	r2, #4
 800b63c:	f102 0514 	add.w	r5, r2, #20
 800b640:	429d      	cmp	r5, r3
 800b642:	d91f      	bls.n	800b684 <_dtoa_r+0x2a4>
 800b644:	6041      	str	r1, [r0, #4]
 800b646:	4658      	mov	r0, fp
 800b648:	f000 fcd8 	bl	800bffc <_Balloc>
 800b64c:	4682      	mov	sl, r0
 800b64e:	2800      	cmp	r0, #0
 800b650:	d13c      	bne.n	800b6cc <_dtoa_r+0x2ec>
 800b652:	4b1b      	ldr	r3, [pc, #108]	@ (800b6c0 <_dtoa_r+0x2e0>)
 800b654:	4602      	mov	r2, r0
 800b656:	f240 11af 	movw	r1, #431	@ 0x1af
 800b65a:	e6d8      	b.n	800b40e <_dtoa_r+0x2e>
 800b65c:	2301      	movs	r3, #1
 800b65e:	e7e0      	b.n	800b622 <_dtoa_r+0x242>
 800b660:	2401      	movs	r4, #1
 800b662:	2300      	movs	r3, #0
 800b664:	9309      	str	r3, [sp, #36]	@ 0x24
 800b666:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b668:	f04f 33ff 	mov.w	r3, #4294967295
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	9307      	str	r3, [sp, #28]
 800b670:	2200      	movs	r2, #0
 800b672:	2312      	movs	r3, #18
 800b674:	e7d0      	b.n	800b618 <_dtoa_r+0x238>
 800b676:	2301      	movs	r3, #1
 800b678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b67a:	e7f5      	b.n	800b668 <_dtoa_r+0x288>
 800b67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	9307      	str	r3, [sp, #28]
 800b682:	e7d7      	b.n	800b634 <_dtoa_r+0x254>
 800b684:	3101      	adds	r1, #1
 800b686:	0052      	lsls	r2, r2, #1
 800b688:	e7d8      	b.n	800b63c <_dtoa_r+0x25c>
 800b68a:	bf00      	nop
 800b68c:	f3af 8000 	nop.w
 800b690:	636f4361 	.word	0x636f4361
 800b694:	3fd287a7 	.word	0x3fd287a7
 800b698:	8b60c8b3 	.word	0x8b60c8b3
 800b69c:	3fc68a28 	.word	0x3fc68a28
 800b6a0:	509f79fb 	.word	0x509f79fb
 800b6a4:	3fd34413 	.word	0x3fd34413
 800b6a8:	0800dc4d 	.word	0x0800dc4d
 800b6ac:	0800dc64 	.word	0x0800dc64
 800b6b0:	7ff00000 	.word	0x7ff00000
 800b6b4:	0800dc1d 	.word	0x0800dc1d
 800b6b8:	3ff80000 	.word	0x3ff80000
 800b6bc:	0800dd60 	.word	0x0800dd60
 800b6c0:	0800dcbc 	.word	0x0800dcbc
 800b6c4:	0800dc49 	.word	0x0800dc49
 800b6c8:	0800dc1c 	.word	0x0800dc1c
 800b6cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6d0:	6018      	str	r0, [r3, #0]
 800b6d2:	9b07      	ldr	r3, [sp, #28]
 800b6d4:	2b0e      	cmp	r3, #14
 800b6d6:	f200 80a4 	bhi.w	800b822 <_dtoa_r+0x442>
 800b6da:	2c00      	cmp	r4, #0
 800b6dc:	f000 80a1 	beq.w	800b822 <_dtoa_r+0x442>
 800b6e0:	2f00      	cmp	r7, #0
 800b6e2:	dd33      	ble.n	800b74c <_dtoa_r+0x36c>
 800b6e4:	4bad      	ldr	r3, [pc, #692]	@ (800b99c <_dtoa_r+0x5bc>)
 800b6e6:	f007 020f 	and.w	r2, r7, #15
 800b6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ee:	ed93 7b00 	vldr	d7, [r3]
 800b6f2:	05f8      	lsls	r0, r7, #23
 800b6f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b6f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b6fc:	d516      	bpl.n	800b72c <_dtoa_r+0x34c>
 800b6fe:	4ba8      	ldr	r3, [pc, #672]	@ (800b9a0 <_dtoa_r+0x5c0>)
 800b700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b708:	f7f5 f8a8 	bl	800085c <__aeabi_ddiv>
 800b70c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b710:	f004 040f 	and.w	r4, r4, #15
 800b714:	2603      	movs	r6, #3
 800b716:	4da2      	ldr	r5, [pc, #648]	@ (800b9a0 <_dtoa_r+0x5c0>)
 800b718:	b954      	cbnz	r4, 800b730 <_dtoa_r+0x350>
 800b71a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b722:	f7f5 f89b 	bl	800085c <__aeabi_ddiv>
 800b726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b72a:	e028      	b.n	800b77e <_dtoa_r+0x39e>
 800b72c:	2602      	movs	r6, #2
 800b72e:	e7f2      	b.n	800b716 <_dtoa_r+0x336>
 800b730:	07e1      	lsls	r1, r4, #31
 800b732:	d508      	bpl.n	800b746 <_dtoa_r+0x366>
 800b734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b73c:	f7f4 ff64 	bl	8000608 <__aeabi_dmul>
 800b740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b744:	3601      	adds	r6, #1
 800b746:	1064      	asrs	r4, r4, #1
 800b748:	3508      	adds	r5, #8
 800b74a:	e7e5      	b.n	800b718 <_dtoa_r+0x338>
 800b74c:	f000 80d2 	beq.w	800b8f4 <_dtoa_r+0x514>
 800b750:	427c      	negs	r4, r7
 800b752:	4b92      	ldr	r3, [pc, #584]	@ (800b99c <_dtoa_r+0x5bc>)
 800b754:	4d92      	ldr	r5, [pc, #584]	@ (800b9a0 <_dtoa_r+0x5c0>)
 800b756:	f004 020f 	and.w	r2, r4, #15
 800b75a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b766:	f7f4 ff4f 	bl	8000608 <__aeabi_dmul>
 800b76a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b76e:	1124      	asrs	r4, r4, #4
 800b770:	2300      	movs	r3, #0
 800b772:	2602      	movs	r6, #2
 800b774:	2c00      	cmp	r4, #0
 800b776:	f040 80b2 	bne.w	800b8de <_dtoa_r+0x4fe>
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1d3      	bne.n	800b726 <_dtoa_r+0x346>
 800b77e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b780:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 80b7 	beq.w	800b8f8 <_dtoa_r+0x518>
 800b78a:	4b86      	ldr	r3, [pc, #536]	@ (800b9a4 <_dtoa_r+0x5c4>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	4620      	mov	r0, r4
 800b790:	4629      	mov	r1, r5
 800b792:	f7f5 f9ab 	bl	8000aec <__aeabi_dcmplt>
 800b796:	2800      	cmp	r0, #0
 800b798:	f000 80ae 	beq.w	800b8f8 <_dtoa_r+0x518>
 800b79c:	9b07      	ldr	r3, [sp, #28]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 80aa 	beq.w	800b8f8 <_dtoa_r+0x518>
 800b7a4:	9b00      	ldr	r3, [sp, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	dd37      	ble.n	800b81a <_dtoa_r+0x43a>
 800b7aa:	1e7b      	subs	r3, r7, #1
 800b7ac:	9304      	str	r3, [sp, #16]
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	4b7d      	ldr	r3, [pc, #500]	@ (800b9a8 <_dtoa_r+0x5c8>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	f7f4 ff27 	bl	8000608 <__aeabi_dmul>
 800b7ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7be:	9c00      	ldr	r4, [sp, #0]
 800b7c0:	3601      	adds	r6, #1
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7f4 feb6 	bl	8000534 <__aeabi_i2d>
 800b7c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7cc:	f7f4 ff1c 	bl	8000608 <__aeabi_dmul>
 800b7d0:	4b76      	ldr	r3, [pc, #472]	@ (800b9ac <_dtoa_r+0x5cc>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f7f4 fd62 	bl	800029c <__adddf3>
 800b7d8:	4605      	mov	r5, r0
 800b7da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	f040 808d 	bne.w	800b8fe <_dtoa_r+0x51e>
 800b7e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7e8:	4b71      	ldr	r3, [pc, #452]	@ (800b9b0 <_dtoa_r+0x5d0>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f7f4 fd54 	bl	8000298 <__aeabi_dsub>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7f8:	462a      	mov	r2, r5
 800b7fa:	4633      	mov	r3, r6
 800b7fc:	f7f5 f994 	bl	8000b28 <__aeabi_dcmpgt>
 800b800:	2800      	cmp	r0, #0
 800b802:	f040 828b 	bne.w	800bd1c <_dtoa_r+0x93c>
 800b806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b80a:	462a      	mov	r2, r5
 800b80c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b810:	f7f5 f96c 	bl	8000aec <__aeabi_dcmplt>
 800b814:	2800      	cmp	r0, #0
 800b816:	f040 8128 	bne.w	800ba6a <_dtoa_r+0x68a>
 800b81a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b81e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b822:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b824:	2b00      	cmp	r3, #0
 800b826:	f2c0 815a 	blt.w	800bade <_dtoa_r+0x6fe>
 800b82a:	2f0e      	cmp	r7, #14
 800b82c:	f300 8157 	bgt.w	800bade <_dtoa_r+0x6fe>
 800b830:	4b5a      	ldr	r3, [pc, #360]	@ (800b99c <_dtoa_r+0x5bc>)
 800b832:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b836:	ed93 7b00 	vldr	d7, [r3]
 800b83a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	ed8d 7b00 	vstr	d7, [sp]
 800b842:	da03      	bge.n	800b84c <_dtoa_r+0x46c>
 800b844:	9b07      	ldr	r3, [sp, #28]
 800b846:	2b00      	cmp	r3, #0
 800b848:	f340 8101 	ble.w	800ba4e <_dtoa_r+0x66e>
 800b84c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b850:	4656      	mov	r6, sl
 800b852:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b856:	4620      	mov	r0, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	f7f4 ffff 	bl	800085c <__aeabi_ddiv>
 800b85e:	f7f5 f983 	bl	8000b68 <__aeabi_d2iz>
 800b862:	4680      	mov	r8, r0
 800b864:	f7f4 fe66 	bl	8000534 <__aeabi_i2d>
 800b868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b86c:	f7f4 fecc 	bl	8000608 <__aeabi_dmul>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4620      	mov	r0, r4
 800b876:	4629      	mov	r1, r5
 800b878:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b87c:	f7f4 fd0c 	bl	8000298 <__aeabi_dsub>
 800b880:	f806 4b01 	strb.w	r4, [r6], #1
 800b884:	9d07      	ldr	r5, [sp, #28]
 800b886:	eba6 040a 	sub.w	r4, r6, sl
 800b88a:	42a5      	cmp	r5, r4
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	f040 8117 	bne.w	800bac2 <_dtoa_r+0x6e2>
 800b894:	f7f4 fd02 	bl	800029c <__adddf3>
 800b898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b89c:	4604      	mov	r4, r0
 800b89e:	460d      	mov	r5, r1
 800b8a0:	f7f5 f942 	bl	8000b28 <__aeabi_dcmpgt>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	f040 80f9 	bne.w	800ba9c <_dtoa_r+0x6bc>
 800b8aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f5 f911 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8b6:	b118      	cbz	r0, 800b8c0 <_dtoa_r+0x4e0>
 800b8b8:	f018 0f01 	tst.w	r8, #1
 800b8bc:	f040 80ee 	bne.w	800ba9c <_dtoa_r+0x6bc>
 800b8c0:	4649      	mov	r1, r9
 800b8c2:	4658      	mov	r0, fp
 800b8c4:	f000 fbda 	bl	800c07c <_Bfree>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	7033      	strb	r3, [r6, #0]
 800b8cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b8ce:	3701      	adds	r7, #1
 800b8d0:	601f      	str	r7, [r3, #0]
 800b8d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 831d 	beq.w	800bf14 <_dtoa_r+0xb34>
 800b8da:	601e      	str	r6, [r3, #0]
 800b8dc:	e31a      	b.n	800bf14 <_dtoa_r+0xb34>
 800b8de:	07e2      	lsls	r2, r4, #31
 800b8e0:	d505      	bpl.n	800b8ee <_dtoa_r+0x50e>
 800b8e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8e6:	f7f4 fe8f 	bl	8000608 <__aeabi_dmul>
 800b8ea:	3601      	adds	r6, #1
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	1064      	asrs	r4, r4, #1
 800b8f0:	3508      	adds	r5, #8
 800b8f2:	e73f      	b.n	800b774 <_dtoa_r+0x394>
 800b8f4:	2602      	movs	r6, #2
 800b8f6:	e742      	b.n	800b77e <_dtoa_r+0x39e>
 800b8f8:	9c07      	ldr	r4, [sp, #28]
 800b8fa:	9704      	str	r7, [sp, #16]
 800b8fc:	e761      	b.n	800b7c2 <_dtoa_r+0x3e2>
 800b8fe:	4b27      	ldr	r3, [pc, #156]	@ (800b99c <_dtoa_r+0x5bc>)
 800b900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b902:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b906:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b90a:	4454      	add	r4, sl
 800b90c:	2900      	cmp	r1, #0
 800b90e:	d053      	beq.n	800b9b8 <_dtoa_r+0x5d8>
 800b910:	4928      	ldr	r1, [pc, #160]	@ (800b9b4 <_dtoa_r+0x5d4>)
 800b912:	2000      	movs	r0, #0
 800b914:	f7f4 ffa2 	bl	800085c <__aeabi_ddiv>
 800b918:	4633      	mov	r3, r6
 800b91a:	462a      	mov	r2, r5
 800b91c:	f7f4 fcbc 	bl	8000298 <__aeabi_dsub>
 800b920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b924:	4656      	mov	r6, sl
 800b926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b92a:	f7f5 f91d 	bl	8000b68 <__aeabi_d2iz>
 800b92e:	4605      	mov	r5, r0
 800b930:	f7f4 fe00 	bl	8000534 <__aeabi_i2d>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b93c:	f7f4 fcac 	bl	8000298 <__aeabi_dsub>
 800b940:	3530      	adds	r5, #48	@ 0x30
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b94a:	f806 5b01 	strb.w	r5, [r6], #1
 800b94e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b952:	f7f5 f8cb 	bl	8000aec <__aeabi_dcmplt>
 800b956:	2800      	cmp	r0, #0
 800b958:	d171      	bne.n	800ba3e <_dtoa_r+0x65e>
 800b95a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b95e:	4911      	ldr	r1, [pc, #68]	@ (800b9a4 <_dtoa_r+0x5c4>)
 800b960:	2000      	movs	r0, #0
 800b962:	f7f4 fc99 	bl	8000298 <__aeabi_dsub>
 800b966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b96a:	f7f5 f8bf 	bl	8000aec <__aeabi_dcmplt>
 800b96e:	2800      	cmp	r0, #0
 800b970:	f040 8095 	bne.w	800ba9e <_dtoa_r+0x6be>
 800b974:	42a6      	cmp	r6, r4
 800b976:	f43f af50 	beq.w	800b81a <_dtoa_r+0x43a>
 800b97a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b97e:	4b0a      	ldr	r3, [pc, #40]	@ (800b9a8 <_dtoa_r+0x5c8>)
 800b980:	2200      	movs	r2, #0
 800b982:	f7f4 fe41 	bl	8000608 <__aeabi_dmul>
 800b986:	4b08      	ldr	r3, [pc, #32]	@ (800b9a8 <_dtoa_r+0x5c8>)
 800b988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b98c:	2200      	movs	r2, #0
 800b98e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b992:	f7f4 fe39 	bl	8000608 <__aeabi_dmul>
 800b996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b99a:	e7c4      	b.n	800b926 <_dtoa_r+0x546>
 800b99c:	0800dd60 	.word	0x0800dd60
 800b9a0:	0800dd38 	.word	0x0800dd38
 800b9a4:	3ff00000 	.word	0x3ff00000
 800b9a8:	40240000 	.word	0x40240000
 800b9ac:	401c0000 	.word	0x401c0000
 800b9b0:	40140000 	.word	0x40140000
 800b9b4:	3fe00000 	.word	0x3fe00000
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	f7f4 fe24 	bl	8000608 <__aeabi_dmul>
 800b9c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9c4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b9c6:	4656      	mov	r6, sl
 800b9c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9cc:	f7f5 f8cc 	bl	8000b68 <__aeabi_d2iz>
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	f7f4 fdaf 	bl	8000534 <__aeabi_i2d>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9de:	f7f4 fc5b 	bl	8000298 <__aeabi_dsub>
 800b9e2:	3530      	adds	r5, #48	@ 0x30
 800b9e4:	f806 5b01 	strb.w	r5, [r6], #1
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	42a6      	cmp	r6, r4
 800b9ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9f2:	f04f 0200 	mov.w	r2, #0
 800b9f6:	d124      	bne.n	800ba42 <_dtoa_r+0x662>
 800b9f8:	4bac      	ldr	r3, [pc, #688]	@ (800bcac <_dtoa_r+0x8cc>)
 800b9fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9fe:	f7f4 fc4d 	bl	800029c <__adddf3>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba0a:	f7f5 f88d 	bl	8000b28 <__aeabi_dcmpgt>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d145      	bne.n	800ba9e <_dtoa_r+0x6be>
 800ba12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba16:	49a5      	ldr	r1, [pc, #660]	@ (800bcac <_dtoa_r+0x8cc>)
 800ba18:	2000      	movs	r0, #0
 800ba1a:	f7f4 fc3d 	bl	8000298 <__aeabi_dsub>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba26:	f7f5 f861 	bl	8000aec <__aeabi_dcmplt>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f43f aef5 	beq.w	800b81a <_dtoa_r+0x43a>
 800ba30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ba32:	1e73      	subs	r3, r6, #1
 800ba34:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba3a:	2b30      	cmp	r3, #48	@ 0x30
 800ba3c:	d0f8      	beq.n	800ba30 <_dtoa_r+0x650>
 800ba3e:	9f04      	ldr	r7, [sp, #16]
 800ba40:	e73e      	b.n	800b8c0 <_dtoa_r+0x4e0>
 800ba42:	4b9b      	ldr	r3, [pc, #620]	@ (800bcb0 <_dtoa_r+0x8d0>)
 800ba44:	f7f4 fde0 	bl	8000608 <__aeabi_dmul>
 800ba48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba4c:	e7bc      	b.n	800b9c8 <_dtoa_r+0x5e8>
 800ba4e:	d10c      	bne.n	800ba6a <_dtoa_r+0x68a>
 800ba50:	4b98      	ldr	r3, [pc, #608]	@ (800bcb4 <_dtoa_r+0x8d4>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba58:	f7f4 fdd6 	bl	8000608 <__aeabi_dmul>
 800ba5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba60:	f7f5 f858 	bl	8000b14 <__aeabi_dcmpge>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	f000 8157 	beq.w	800bd18 <_dtoa_r+0x938>
 800ba6a:	2400      	movs	r4, #0
 800ba6c:	4625      	mov	r5, r4
 800ba6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba70:	43db      	mvns	r3, r3
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	4656      	mov	r6, sl
 800ba76:	2700      	movs	r7, #0
 800ba78:	4621      	mov	r1, r4
 800ba7a:	4658      	mov	r0, fp
 800ba7c:	f000 fafe 	bl	800c07c <_Bfree>
 800ba80:	2d00      	cmp	r5, #0
 800ba82:	d0dc      	beq.n	800ba3e <_dtoa_r+0x65e>
 800ba84:	b12f      	cbz	r7, 800ba92 <_dtoa_r+0x6b2>
 800ba86:	42af      	cmp	r7, r5
 800ba88:	d003      	beq.n	800ba92 <_dtoa_r+0x6b2>
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	4658      	mov	r0, fp
 800ba8e:	f000 faf5 	bl	800c07c <_Bfree>
 800ba92:	4629      	mov	r1, r5
 800ba94:	4658      	mov	r0, fp
 800ba96:	f000 faf1 	bl	800c07c <_Bfree>
 800ba9a:	e7d0      	b.n	800ba3e <_dtoa_r+0x65e>
 800ba9c:	9704      	str	r7, [sp, #16]
 800ba9e:	4633      	mov	r3, r6
 800baa0:	461e      	mov	r6, r3
 800baa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baa6:	2a39      	cmp	r2, #57	@ 0x39
 800baa8:	d107      	bne.n	800baba <_dtoa_r+0x6da>
 800baaa:	459a      	cmp	sl, r3
 800baac:	d1f8      	bne.n	800baa0 <_dtoa_r+0x6c0>
 800baae:	9a04      	ldr	r2, [sp, #16]
 800bab0:	3201      	adds	r2, #1
 800bab2:	9204      	str	r2, [sp, #16]
 800bab4:	2230      	movs	r2, #48	@ 0x30
 800bab6:	f88a 2000 	strb.w	r2, [sl]
 800baba:	781a      	ldrb	r2, [r3, #0]
 800babc:	3201      	adds	r2, #1
 800babe:	701a      	strb	r2, [r3, #0]
 800bac0:	e7bd      	b.n	800ba3e <_dtoa_r+0x65e>
 800bac2:	4b7b      	ldr	r3, [pc, #492]	@ (800bcb0 <_dtoa_r+0x8d0>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	f7f4 fd9f 	bl	8000608 <__aeabi_dmul>
 800baca:	2200      	movs	r2, #0
 800bacc:	2300      	movs	r3, #0
 800bace:	4604      	mov	r4, r0
 800bad0:	460d      	mov	r5, r1
 800bad2:	f7f5 f801 	bl	8000ad8 <__aeabi_dcmpeq>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	f43f aebb 	beq.w	800b852 <_dtoa_r+0x472>
 800badc:	e6f0      	b.n	800b8c0 <_dtoa_r+0x4e0>
 800bade:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bae0:	2a00      	cmp	r2, #0
 800bae2:	f000 80db 	beq.w	800bc9c <_dtoa_r+0x8bc>
 800bae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bae8:	2a01      	cmp	r2, #1
 800baea:	f300 80bf 	bgt.w	800bc6c <_dtoa_r+0x88c>
 800baee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800baf0:	2a00      	cmp	r2, #0
 800baf2:	f000 80b7 	beq.w	800bc64 <_dtoa_r+0x884>
 800baf6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bafa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bafc:	4646      	mov	r6, r8
 800bafe:	9a08      	ldr	r2, [sp, #32]
 800bb00:	2101      	movs	r1, #1
 800bb02:	441a      	add	r2, r3
 800bb04:	4658      	mov	r0, fp
 800bb06:	4498      	add	r8, r3
 800bb08:	9208      	str	r2, [sp, #32]
 800bb0a:	f000 fb6b 	bl	800c1e4 <__i2b>
 800bb0e:	4605      	mov	r5, r0
 800bb10:	b15e      	cbz	r6, 800bb2a <_dtoa_r+0x74a>
 800bb12:	9b08      	ldr	r3, [sp, #32]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	dd08      	ble.n	800bb2a <_dtoa_r+0x74a>
 800bb18:	42b3      	cmp	r3, r6
 800bb1a:	9a08      	ldr	r2, [sp, #32]
 800bb1c:	bfa8      	it	ge
 800bb1e:	4633      	movge	r3, r6
 800bb20:	eba8 0803 	sub.w	r8, r8, r3
 800bb24:	1af6      	subs	r6, r6, r3
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	9308      	str	r3, [sp, #32]
 800bb2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb2c:	b1f3      	cbz	r3, 800bb6c <_dtoa_r+0x78c>
 800bb2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 80b7 	beq.w	800bca4 <_dtoa_r+0x8c4>
 800bb36:	b18c      	cbz	r4, 800bb5c <_dtoa_r+0x77c>
 800bb38:	4629      	mov	r1, r5
 800bb3a:	4622      	mov	r2, r4
 800bb3c:	4658      	mov	r0, fp
 800bb3e:	f000 fc11 	bl	800c364 <__pow5mult>
 800bb42:	464a      	mov	r2, r9
 800bb44:	4601      	mov	r1, r0
 800bb46:	4605      	mov	r5, r0
 800bb48:	4658      	mov	r0, fp
 800bb4a:	f000 fb61 	bl	800c210 <__multiply>
 800bb4e:	4649      	mov	r1, r9
 800bb50:	9004      	str	r0, [sp, #16]
 800bb52:	4658      	mov	r0, fp
 800bb54:	f000 fa92 	bl	800c07c <_Bfree>
 800bb58:	9b04      	ldr	r3, [sp, #16]
 800bb5a:	4699      	mov	r9, r3
 800bb5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb5e:	1b1a      	subs	r2, r3, r4
 800bb60:	d004      	beq.n	800bb6c <_dtoa_r+0x78c>
 800bb62:	4649      	mov	r1, r9
 800bb64:	4658      	mov	r0, fp
 800bb66:	f000 fbfd 	bl	800c364 <__pow5mult>
 800bb6a:	4681      	mov	r9, r0
 800bb6c:	2101      	movs	r1, #1
 800bb6e:	4658      	mov	r0, fp
 800bb70:	f000 fb38 	bl	800c1e4 <__i2b>
 800bb74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb76:	4604      	mov	r4, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 81cf 	beq.w	800bf1c <_dtoa_r+0xb3c>
 800bb7e:	461a      	mov	r2, r3
 800bb80:	4601      	mov	r1, r0
 800bb82:	4658      	mov	r0, fp
 800bb84:	f000 fbee 	bl	800c364 <__pow5mult>
 800bb88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	f300 8095 	bgt.w	800bcbc <_dtoa_r+0x8dc>
 800bb92:	9b02      	ldr	r3, [sp, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f040 8087 	bne.w	800bca8 <_dtoa_r+0x8c8>
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f040 8089 	bne.w	800bcb8 <_dtoa_r+0x8d8>
 800bba6:	9b03      	ldr	r3, [sp, #12]
 800bba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbac:	0d1b      	lsrs	r3, r3, #20
 800bbae:	051b      	lsls	r3, r3, #20
 800bbb0:	b12b      	cbz	r3, 800bbbe <_dtoa_r+0x7de>
 800bbb2:	9b08      	ldr	r3, [sp, #32]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	9308      	str	r3, [sp, #32]
 800bbb8:	f108 0801 	add.w	r8, r8, #1
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f000 81b0 	beq.w	800bf28 <_dtoa_r+0xb48>
 800bbc8:	6923      	ldr	r3, [r4, #16]
 800bbca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbce:	6918      	ldr	r0, [r3, #16]
 800bbd0:	f000 fabc 	bl	800c14c <__hi0bits>
 800bbd4:	f1c0 0020 	rsb	r0, r0, #32
 800bbd8:	9b08      	ldr	r3, [sp, #32]
 800bbda:	4418      	add	r0, r3
 800bbdc:	f010 001f 	ands.w	r0, r0, #31
 800bbe0:	d077      	beq.n	800bcd2 <_dtoa_r+0x8f2>
 800bbe2:	f1c0 0320 	rsb	r3, r0, #32
 800bbe6:	2b04      	cmp	r3, #4
 800bbe8:	dd6b      	ble.n	800bcc2 <_dtoa_r+0x8e2>
 800bbea:	9b08      	ldr	r3, [sp, #32]
 800bbec:	f1c0 001c 	rsb	r0, r0, #28
 800bbf0:	4403      	add	r3, r0
 800bbf2:	4480      	add	r8, r0
 800bbf4:	4406      	add	r6, r0
 800bbf6:	9308      	str	r3, [sp, #32]
 800bbf8:	f1b8 0f00 	cmp.w	r8, #0
 800bbfc:	dd05      	ble.n	800bc0a <_dtoa_r+0x82a>
 800bbfe:	4649      	mov	r1, r9
 800bc00:	4642      	mov	r2, r8
 800bc02:	4658      	mov	r0, fp
 800bc04:	f000 fc08 	bl	800c418 <__lshift>
 800bc08:	4681      	mov	r9, r0
 800bc0a:	9b08      	ldr	r3, [sp, #32]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	dd05      	ble.n	800bc1c <_dtoa_r+0x83c>
 800bc10:	4621      	mov	r1, r4
 800bc12:	461a      	mov	r2, r3
 800bc14:	4658      	mov	r0, fp
 800bc16:	f000 fbff 	bl	800c418 <__lshift>
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d059      	beq.n	800bcd6 <_dtoa_r+0x8f6>
 800bc22:	4621      	mov	r1, r4
 800bc24:	4648      	mov	r0, r9
 800bc26:	f000 fc63 	bl	800c4f0 <__mcmp>
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	da53      	bge.n	800bcd6 <_dtoa_r+0x8f6>
 800bc2e:	1e7b      	subs	r3, r7, #1
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	4649      	mov	r1, r9
 800bc34:	2300      	movs	r3, #0
 800bc36:	220a      	movs	r2, #10
 800bc38:	4658      	mov	r0, fp
 800bc3a:	f000 fa41 	bl	800c0c0 <__multadd>
 800bc3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc40:	4681      	mov	r9, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 8172 	beq.w	800bf2c <_dtoa_r+0xb4c>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	220a      	movs	r2, #10
 800bc4e:	4658      	mov	r0, fp
 800bc50:	f000 fa36 	bl	800c0c0 <__multadd>
 800bc54:	9b00      	ldr	r3, [sp, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	4605      	mov	r5, r0
 800bc5a:	dc67      	bgt.n	800bd2c <_dtoa_r+0x94c>
 800bc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	dc41      	bgt.n	800bce6 <_dtoa_r+0x906>
 800bc62:	e063      	b.n	800bd2c <_dtoa_r+0x94c>
 800bc64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bc6a:	e746      	b.n	800bafa <_dtoa_r+0x71a>
 800bc6c:	9b07      	ldr	r3, [sp, #28]
 800bc6e:	1e5c      	subs	r4, r3, #1
 800bc70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc72:	42a3      	cmp	r3, r4
 800bc74:	bfbf      	itttt	lt
 800bc76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bc7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bc7c:	1ae3      	sublt	r3, r4, r3
 800bc7e:	bfb4      	ite	lt
 800bc80:	18d2      	addlt	r2, r2, r3
 800bc82:	1b1c      	subge	r4, r3, r4
 800bc84:	9b07      	ldr	r3, [sp, #28]
 800bc86:	bfbc      	itt	lt
 800bc88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bc8a:	2400      	movlt	r4, #0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	bfb5      	itete	lt
 800bc90:	eba8 0603 	sublt.w	r6, r8, r3
 800bc94:	9b07      	ldrge	r3, [sp, #28]
 800bc96:	2300      	movlt	r3, #0
 800bc98:	4646      	movge	r6, r8
 800bc9a:	e730      	b.n	800bafe <_dtoa_r+0x71e>
 800bc9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bca0:	4646      	mov	r6, r8
 800bca2:	e735      	b.n	800bb10 <_dtoa_r+0x730>
 800bca4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bca6:	e75c      	b.n	800bb62 <_dtoa_r+0x782>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	e788      	b.n	800bbbe <_dtoa_r+0x7de>
 800bcac:	3fe00000 	.word	0x3fe00000
 800bcb0:	40240000 	.word	0x40240000
 800bcb4:	40140000 	.word	0x40140000
 800bcb8:	9b02      	ldr	r3, [sp, #8]
 800bcba:	e780      	b.n	800bbbe <_dtoa_r+0x7de>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcc0:	e782      	b.n	800bbc8 <_dtoa_r+0x7e8>
 800bcc2:	d099      	beq.n	800bbf8 <_dtoa_r+0x818>
 800bcc4:	9a08      	ldr	r2, [sp, #32]
 800bcc6:	331c      	adds	r3, #28
 800bcc8:	441a      	add	r2, r3
 800bcca:	4498      	add	r8, r3
 800bccc:	441e      	add	r6, r3
 800bcce:	9208      	str	r2, [sp, #32]
 800bcd0:	e792      	b.n	800bbf8 <_dtoa_r+0x818>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	e7f6      	b.n	800bcc4 <_dtoa_r+0x8e4>
 800bcd6:	9b07      	ldr	r3, [sp, #28]
 800bcd8:	9704      	str	r7, [sp, #16]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dc20      	bgt.n	800bd20 <_dtoa_r+0x940>
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	dd1e      	ble.n	800bd24 <_dtoa_r+0x944>
 800bce6:	9b00      	ldr	r3, [sp, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f47f aec0 	bne.w	800ba6e <_dtoa_r+0x68e>
 800bcee:	4621      	mov	r1, r4
 800bcf0:	2205      	movs	r2, #5
 800bcf2:	4658      	mov	r0, fp
 800bcf4:	f000 f9e4 	bl	800c0c0 <__multadd>
 800bcf8:	4601      	mov	r1, r0
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	4648      	mov	r0, r9
 800bcfe:	f000 fbf7 	bl	800c4f0 <__mcmp>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	f77f aeb3 	ble.w	800ba6e <_dtoa_r+0x68e>
 800bd08:	4656      	mov	r6, sl
 800bd0a:	2331      	movs	r3, #49	@ 0x31
 800bd0c:	f806 3b01 	strb.w	r3, [r6], #1
 800bd10:	9b04      	ldr	r3, [sp, #16]
 800bd12:	3301      	adds	r3, #1
 800bd14:	9304      	str	r3, [sp, #16]
 800bd16:	e6ae      	b.n	800ba76 <_dtoa_r+0x696>
 800bd18:	9c07      	ldr	r4, [sp, #28]
 800bd1a:	9704      	str	r7, [sp, #16]
 800bd1c:	4625      	mov	r5, r4
 800bd1e:	e7f3      	b.n	800bd08 <_dtoa_r+0x928>
 800bd20:	9b07      	ldr	r3, [sp, #28]
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 8104 	beq.w	800bf34 <_dtoa_r+0xb54>
 800bd2c:	2e00      	cmp	r6, #0
 800bd2e:	dd05      	ble.n	800bd3c <_dtoa_r+0x95c>
 800bd30:	4629      	mov	r1, r5
 800bd32:	4632      	mov	r2, r6
 800bd34:	4658      	mov	r0, fp
 800bd36:	f000 fb6f 	bl	800c418 <__lshift>
 800bd3a:	4605      	mov	r5, r0
 800bd3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d05a      	beq.n	800bdf8 <_dtoa_r+0xa18>
 800bd42:	6869      	ldr	r1, [r5, #4]
 800bd44:	4658      	mov	r0, fp
 800bd46:	f000 f959 	bl	800bffc <_Balloc>
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	b928      	cbnz	r0, 800bd5a <_dtoa_r+0x97a>
 800bd4e:	4b84      	ldr	r3, [pc, #528]	@ (800bf60 <_dtoa_r+0xb80>)
 800bd50:	4602      	mov	r2, r0
 800bd52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd56:	f7ff bb5a 	b.w	800b40e <_dtoa_r+0x2e>
 800bd5a:	692a      	ldr	r2, [r5, #16]
 800bd5c:	3202      	adds	r2, #2
 800bd5e:	0092      	lsls	r2, r2, #2
 800bd60:	f105 010c 	add.w	r1, r5, #12
 800bd64:	300c      	adds	r0, #12
 800bd66:	f7ff faa4 	bl	800b2b2 <memcpy>
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	4658      	mov	r0, fp
 800bd70:	f000 fb52 	bl	800c418 <__lshift>
 800bd74:	f10a 0301 	add.w	r3, sl, #1
 800bd78:	9307      	str	r3, [sp, #28]
 800bd7a:	9b00      	ldr	r3, [sp, #0]
 800bd7c:	4453      	add	r3, sl
 800bd7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd80:	9b02      	ldr	r3, [sp, #8]
 800bd82:	f003 0301 	and.w	r3, r3, #1
 800bd86:	462f      	mov	r7, r5
 800bd88:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	9b07      	ldr	r3, [sp, #28]
 800bd8e:	4621      	mov	r1, r4
 800bd90:	3b01      	subs	r3, #1
 800bd92:	4648      	mov	r0, r9
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	f7ff fa9a 	bl	800b2ce <quorem>
 800bd9a:	4639      	mov	r1, r7
 800bd9c:	9002      	str	r0, [sp, #8]
 800bd9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bda2:	4648      	mov	r0, r9
 800bda4:	f000 fba4 	bl	800c4f0 <__mcmp>
 800bda8:	462a      	mov	r2, r5
 800bdaa:	9008      	str	r0, [sp, #32]
 800bdac:	4621      	mov	r1, r4
 800bdae:	4658      	mov	r0, fp
 800bdb0:	f000 fbba 	bl	800c528 <__mdiff>
 800bdb4:	68c2      	ldr	r2, [r0, #12]
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	bb02      	cbnz	r2, 800bdfc <_dtoa_r+0xa1c>
 800bdba:	4601      	mov	r1, r0
 800bdbc:	4648      	mov	r0, r9
 800bdbe:	f000 fb97 	bl	800c4f0 <__mcmp>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	4631      	mov	r1, r6
 800bdc6:	4658      	mov	r0, fp
 800bdc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bdca:	f000 f957 	bl	800c07c <_Bfree>
 800bdce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdd2:	9e07      	ldr	r6, [sp, #28]
 800bdd4:	ea43 0102 	orr.w	r1, r3, r2
 800bdd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdda:	4319      	orrs	r1, r3
 800bddc:	d110      	bne.n	800be00 <_dtoa_r+0xa20>
 800bdde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bde2:	d029      	beq.n	800be38 <_dtoa_r+0xa58>
 800bde4:	9b08      	ldr	r3, [sp, #32]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dd02      	ble.n	800bdf0 <_dtoa_r+0xa10>
 800bdea:	9b02      	ldr	r3, [sp, #8]
 800bdec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bdf0:	9b00      	ldr	r3, [sp, #0]
 800bdf2:	f883 8000 	strb.w	r8, [r3]
 800bdf6:	e63f      	b.n	800ba78 <_dtoa_r+0x698>
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	e7bb      	b.n	800bd74 <_dtoa_r+0x994>
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	e7e1      	b.n	800bdc4 <_dtoa_r+0x9e4>
 800be00:	9b08      	ldr	r3, [sp, #32]
 800be02:	2b00      	cmp	r3, #0
 800be04:	db04      	blt.n	800be10 <_dtoa_r+0xa30>
 800be06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be08:	430b      	orrs	r3, r1
 800be0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be0c:	430b      	orrs	r3, r1
 800be0e:	d120      	bne.n	800be52 <_dtoa_r+0xa72>
 800be10:	2a00      	cmp	r2, #0
 800be12:	dded      	ble.n	800bdf0 <_dtoa_r+0xa10>
 800be14:	4649      	mov	r1, r9
 800be16:	2201      	movs	r2, #1
 800be18:	4658      	mov	r0, fp
 800be1a:	f000 fafd 	bl	800c418 <__lshift>
 800be1e:	4621      	mov	r1, r4
 800be20:	4681      	mov	r9, r0
 800be22:	f000 fb65 	bl	800c4f0 <__mcmp>
 800be26:	2800      	cmp	r0, #0
 800be28:	dc03      	bgt.n	800be32 <_dtoa_r+0xa52>
 800be2a:	d1e1      	bne.n	800bdf0 <_dtoa_r+0xa10>
 800be2c:	f018 0f01 	tst.w	r8, #1
 800be30:	d0de      	beq.n	800bdf0 <_dtoa_r+0xa10>
 800be32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be36:	d1d8      	bne.n	800bdea <_dtoa_r+0xa0a>
 800be38:	9a00      	ldr	r2, [sp, #0]
 800be3a:	2339      	movs	r3, #57	@ 0x39
 800be3c:	7013      	strb	r3, [r2, #0]
 800be3e:	4633      	mov	r3, r6
 800be40:	461e      	mov	r6, r3
 800be42:	3b01      	subs	r3, #1
 800be44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be48:	2a39      	cmp	r2, #57	@ 0x39
 800be4a:	d052      	beq.n	800bef2 <_dtoa_r+0xb12>
 800be4c:	3201      	adds	r2, #1
 800be4e:	701a      	strb	r2, [r3, #0]
 800be50:	e612      	b.n	800ba78 <_dtoa_r+0x698>
 800be52:	2a00      	cmp	r2, #0
 800be54:	dd07      	ble.n	800be66 <_dtoa_r+0xa86>
 800be56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be5a:	d0ed      	beq.n	800be38 <_dtoa_r+0xa58>
 800be5c:	9a00      	ldr	r2, [sp, #0]
 800be5e:	f108 0301 	add.w	r3, r8, #1
 800be62:	7013      	strb	r3, [r2, #0]
 800be64:	e608      	b.n	800ba78 <_dtoa_r+0x698>
 800be66:	9b07      	ldr	r3, [sp, #28]
 800be68:	9a07      	ldr	r2, [sp, #28]
 800be6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800be6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be70:	4293      	cmp	r3, r2
 800be72:	d028      	beq.n	800bec6 <_dtoa_r+0xae6>
 800be74:	4649      	mov	r1, r9
 800be76:	2300      	movs	r3, #0
 800be78:	220a      	movs	r2, #10
 800be7a:	4658      	mov	r0, fp
 800be7c:	f000 f920 	bl	800c0c0 <__multadd>
 800be80:	42af      	cmp	r7, r5
 800be82:	4681      	mov	r9, r0
 800be84:	f04f 0300 	mov.w	r3, #0
 800be88:	f04f 020a 	mov.w	r2, #10
 800be8c:	4639      	mov	r1, r7
 800be8e:	4658      	mov	r0, fp
 800be90:	d107      	bne.n	800bea2 <_dtoa_r+0xac2>
 800be92:	f000 f915 	bl	800c0c0 <__multadd>
 800be96:	4607      	mov	r7, r0
 800be98:	4605      	mov	r5, r0
 800be9a:	9b07      	ldr	r3, [sp, #28]
 800be9c:	3301      	adds	r3, #1
 800be9e:	9307      	str	r3, [sp, #28]
 800bea0:	e774      	b.n	800bd8c <_dtoa_r+0x9ac>
 800bea2:	f000 f90d 	bl	800c0c0 <__multadd>
 800bea6:	4629      	mov	r1, r5
 800bea8:	4607      	mov	r7, r0
 800beaa:	2300      	movs	r3, #0
 800beac:	220a      	movs	r2, #10
 800beae:	4658      	mov	r0, fp
 800beb0:	f000 f906 	bl	800c0c0 <__multadd>
 800beb4:	4605      	mov	r5, r0
 800beb6:	e7f0      	b.n	800be9a <_dtoa_r+0xaba>
 800beb8:	9b00      	ldr	r3, [sp, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	bfcc      	ite	gt
 800bebe:	461e      	movgt	r6, r3
 800bec0:	2601      	movle	r6, #1
 800bec2:	4456      	add	r6, sl
 800bec4:	2700      	movs	r7, #0
 800bec6:	4649      	mov	r1, r9
 800bec8:	2201      	movs	r2, #1
 800beca:	4658      	mov	r0, fp
 800becc:	f000 faa4 	bl	800c418 <__lshift>
 800bed0:	4621      	mov	r1, r4
 800bed2:	4681      	mov	r9, r0
 800bed4:	f000 fb0c 	bl	800c4f0 <__mcmp>
 800bed8:	2800      	cmp	r0, #0
 800beda:	dcb0      	bgt.n	800be3e <_dtoa_r+0xa5e>
 800bedc:	d102      	bne.n	800bee4 <_dtoa_r+0xb04>
 800bede:	f018 0f01 	tst.w	r8, #1
 800bee2:	d1ac      	bne.n	800be3e <_dtoa_r+0xa5e>
 800bee4:	4633      	mov	r3, r6
 800bee6:	461e      	mov	r6, r3
 800bee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beec:	2a30      	cmp	r2, #48	@ 0x30
 800beee:	d0fa      	beq.n	800bee6 <_dtoa_r+0xb06>
 800bef0:	e5c2      	b.n	800ba78 <_dtoa_r+0x698>
 800bef2:	459a      	cmp	sl, r3
 800bef4:	d1a4      	bne.n	800be40 <_dtoa_r+0xa60>
 800bef6:	9b04      	ldr	r3, [sp, #16]
 800bef8:	3301      	adds	r3, #1
 800befa:	9304      	str	r3, [sp, #16]
 800befc:	2331      	movs	r3, #49	@ 0x31
 800befe:	f88a 3000 	strb.w	r3, [sl]
 800bf02:	e5b9      	b.n	800ba78 <_dtoa_r+0x698>
 800bf04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bf64 <_dtoa_r+0xb84>
 800bf0a:	b11b      	cbz	r3, 800bf14 <_dtoa_r+0xb34>
 800bf0c:	f10a 0308 	add.w	r3, sl, #8
 800bf10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bf12:	6013      	str	r3, [r2, #0]
 800bf14:	4650      	mov	r0, sl
 800bf16:	b019      	add	sp, #100	@ 0x64
 800bf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	f77f ae37 	ble.w	800bb92 <_dtoa_r+0x7b2>
 800bf24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf26:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf28:	2001      	movs	r0, #1
 800bf2a:	e655      	b.n	800bbd8 <_dtoa_r+0x7f8>
 800bf2c:	9b00      	ldr	r3, [sp, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f77f aed6 	ble.w	800bce0 <_dtoa_r+0x900>
 800bf34:	4656      	mov	r6, sl
 800bf36:	4621      	mov	r1, r4
 800bf38:	4648      	mov	r0, r9
 800bf3a:	f7ff f9c8 	bl	800b2ce <quorem>
 800bf3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf42:	f806 8b01 	strb.w	r8, [r6], #1
 800bf46:	9b00      	ldr	r3, [sp, #0]
 800bf48:	eba6 020a 	sub.w	r2, r6, sl
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	ddb3      	ble.n	800beb8 <_dtoa_r+0xad8>
 800bf50:	4649      	mov	r1, r9
 800bf52:	2300      	movs	r3, #0
 800bf54:	220a      	movs	r2, #10
 800bf56:	4658      	mov	r0, fp
 800bf58:	f000 f8b2 	bl	800c0c0 <__multadd>
 800bf5c:	4681      	mov	r9, r0
 800bf5e:	e7ea      	b.n	800bf36 <_dtoa_r+0xb56>
 800bf60:	0800dcbc 	.word	0x0800dcbc
 800bf64:	0800dc40 	.word	0x0800dc40

0800bf68 <_free_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4605      	mov	r5, r0
 800bf6c:	2900      	cmp	r1, #0
 800bf6e:	d041      	beq.n	800bff4 <_free_r+0x8c>
 800bf70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf74:	1f0c      	subs	r4, r1, #4
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	bfb8      	it	lt
 800bf7a:	18e4      	addlt	r4, r4, r3
 800bf7c:	f7fe f9f8 	bl	800a370 <__malloc_lock>
 800bf80:	4a1d      	ldr	r2, [pc, #116]	@ (800bff8 <_free_r+0x90>)
 800bf82:	6813      	ldr	r3, [r2, #0]
 800bf84:	b933      	cbnz	r3, 800bf94 <_free_r+0x2c>
 800bf86:	6063      	str	r3, [r4, #4]
 800bf88:	6014      	str	r4, [r2, #0]
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf90:	f7fe b9f4 	b.w	800a37c <__malloc_unlock>
 800bf94:	42a3      	cmp	r3, r4
 800bf96:	d908      	bls.n	800bfaa <_free_r+0x42>
 800bf98:	6820      	ldr	r0, [r4, #0]
 800bf9a:	1821      	adds	r1, r4, r0
 800bf9c:	428b      	cmp	r3, r1
 800bf9e:	bf01      	itttt	eq
 800bfa0:	6819      	ldreq	r1, [r3, #0]
 800bfa2:	685b      	ldreq	r3, [r3, #4]
 800bfa4:	1809      	addeq	r1, r1, r0
 800bfa6:	6021      	streq	r1, [r4, #0]
 800bfa8:	e7ed      	b.n	800bf86 <_free_r+0x1e>
 800bfaa:	461a      	mov	r2, r3
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	b10b      	cbz	r3, 800bfb4 <_free_r+0x4c>
 800bfb0:	42a3      	cmp	r3, r4
 800bfb2:	d9fa      	bls.n	800bfaa <_free_r+0x42>
 800bfb4:	6811      	ldr	r1, [r2, #0]
 800bfb6:	1850      	adds	r0, r2, r1
 800bfb8:	42a0      	cmp	r0, r4
 800bfba:	d10b      	bne.n	800bfd4 <_free_r+0x6c>
 800bfbc:	6820      	ldr	r0, [r4, #0]
 800bfbe:	4401      	add	r1, r0
 800bfc0:	1850      	adds	r0, r2, r1
 800bfc2:	4283      	cmp	r3, r0
 800bfc4:	6011      	str	r1, [r2, #0]
 800bfc6:	d1e0      	bne.n	800bf8a <_free_r+0x22>
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	6053      	str	r3, [r2, #4]
 800bfce:	4408      	add	r0, r1
 800bfd0:	6010      	str	r0, [r2, #0]
 800bfd2:	e7da      	b.n	800bf8a <_free_r+0x22>
 800bfd4:	d902      	bls.n	800bfdc <_free_r+0x74>
 800bfd6:	230c      	movs	r3, #12
 800bfd8:	602b      	str	r3, [r5, #0]
 800bfda:	e7d6      	b.n	800bf8a <_free_r+0x22>
 800bfdc:	6820      	ldr	r0, [r4, #0]
 800bfde:	1821      	adds	r1, r4, r0
 800bfe0:	428b      	cmp	r3, r1
 800bfe2:	bf04      	itt	eq
 800bfe4:	6819      	ldreq	r1, [r3, #0]
 800bfe6:	685b      	ldreq	r3, [r3, #4]
 800bfe8:	6063      	str	r3, [r4, #4]
 800bfea:	bf04      	itt	eq
 800bfec:	1809      	addeq	r1, r1, r0
 800bfee:	6021      	streq	r1, [r4, #0]
 800bff0:	6054      	str	r4, [r2, #4]
 800bff2:	e7ca      	b.n	800bf8a <_free_r+0x22>
 800bff4:	bd38      	pop	{r3, r4, r5, pc}
 800bff6:	bf00      	nop
 800bff8:	20004c6c 	.word	0x20004c6c

0800bffc <_Balloc>:
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	69c6      	ldr	r6, [r0, #28]
 800c000:	4604      	mov	r4, r0
 800c002:	460d      	mov	r5, r1
 800c004:	b976      	cbnz	r6, 800c024 <_Balloc+0x28>
 800c006:	2010      	movs	r0, #16
 800c008:	f7fe f908 	bl	800a21c <malloc>
 800c00c:	4602      	mov	r2, r0
 800c00e:	61e0      	str	r0, [r4, #28]
 800c010:	b920      	cbnz	r0, 800c01c <_Balloc+0x20>
 800c012:	4b18      	ldr	r3, [pc, #96]	@ (800c074 <_Balloc+0x78>)
 800c014:	4818      	ldr	r0, [pc, #96]	@ (800c078 <_Balloc+0x7c>)
 800c016:	216b      	movs	r1, #107	@ 0x6b
 800c018:	f000 ff5e 	bl	800ced8 <__assert_func>
 800c01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c020:	6006      	str	r6, [r0, #0]
 800c022:	60c6      	str	r6, [r0, #12]
 800c024:	69e6      	ldr	r6, [r4, #28]
 800c026:	68f3      	ldr	r3, [r6, #12]
 800c028:	b183      	cbz	r3, 800c04c <_Balloc+0x50>
 800c02a:	69e3      	ldr	r3, [r4, #28]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c032:	b9b8      	cbnz	r0, 800c064 <_Balloc+0x68>
 800c034:	2101      	movs	r1, #1
 800c036:	fa01 f605 	lsl.w	r6, r1, r5
 800c03a:	1d72      	adds	r2, r6, #5
 800c03c:	0092      	lsls	r2, r2, #2
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 ff68 	bl	800cf14 <_calloc_r>
 800c044:	b160      	cbz	r0, 800c060 <_Balloc+0x64>
 800c046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c04a:	e00e      	b.n	800c06a <_Balloc+0x6e>
 800c04c:	2221      	movs	r2, #33	@ 0x21
 800c04e:	2104      	movs	r1, #4
 800c050:	4620      	mov	r0, r4
 800c052:	f000 ff5f 	bl	800cf14 <_calloc_r>
 800c056:	69e3      	ldr	r3, [r4, #28]
 800c058:	60f0      	str	r0, [r6, #12]
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e4      	bne.n	800c02a <_Balloc+0x2e>
 800c060:	2000      	movs	r0, #0
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	6802      	ldr	r2, [r0, #0]
 800c066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c06a:	2300      	movs	r3, #0
 800c06c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c070:	e7f7      	b.n	800c062 <_Balloc+0x66>
 800c072:	bf00      	nop
 800c074:	0800dc4d 	.word	0x0800dc4d
 800c078:	0800dccd 	.word	0x0800dccd

0800c07c <_Bfree>:
 800c07c:	b570      	push	{r4, r5, r6, lr}
 800c07e:	69c6      	ldr	r6, [r0, #28]
 800c080:	4605      	mov	r5, r0
 800c082:	460c      	mov	r4, r1
 800c084:	b976      	cbnz	r6, 800c0a4 <_Bfree+0x28>
 800c086:	2010      	movs	r0, #16
 800c088:	f7fe f8c8 	bl	800a21c <malloc>
 800c08c:	4602      	mov	r2, r0
 800c08e:	61e8      	str	r0, [r5, #28]
 800c090:	b920      	cbnz	r0, 800c09c <_Bfree+0x20>
 800c092:	4b09      	ldr	r3, [pc, #36]	@ (800c0b8 <_Bfree+0x3c>)
 800c094:	4809      	ldr	r0, [pc, #36]	@ (800c0bc <_Bfree+0x40>)
 800c096:	218f      	movs	r1, #143	@ 0x8f
 800c098:	f000 ff1e 	bl	800ced8 <__assert_func>
 800c09c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0a0:	6006      	str	r6, [r0, #0]
 800c0a2:	60c6      	str	r6, [r0, #12]
 800c0a4:	b13c      	cbz	r4, 800c0b6 <_Bfree+0x3a>
 800c0a6:	69eb      	ldr	r3, [r5, #28]
 800c0a8:	6862      	ldr	r2, [r4, #4]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0b0:	6021      	str	r1, [r4, #0]
 800c0b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0b6:	bd70      	pop	{r4, r5, r6, pc}
 800c0b8:	0800dc4d 	.word	0x0800dc4d
 800c0bc:	0800dccd 	.word	0x0800dccd

0800c0c0 <__multadd>:
 800c0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c4:	690d      	ldr	r5, [r1, #16]
 800c0c6:	4607      	mov	r7, r0
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	461e      	mov	r6, r3
 800c0cc:	f101 0c14 	add.w	ip, r1, #20
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	f8dc 3000 	ldr.w	r3, [ip]
 800c0d6:	b299      	uxth	r1, r3
 800c0d8:	fb02 6101 	mla	r1, r2, r1, r6
 800c0dc:	0c1e      	lsrs	r6, r3, #16
 800c0de:	0c0b      	lsrs	r3, r1, #16
 800c0e0:	fb02 3306 	mla	r3, r2, r6, r3
 800c0e4:	b289      	uxth	r1, r1
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0ec:	4285      	cmp	r5, r0
 800c0ee:	f84c 1b04 	str.w	r1, [ip], #4
 800c0f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0f6:	dcec      	bgt.n	800c0d2 <__multadd+0x12>
 800c0f8:	b30e      	cbz	r6, 800c13e <__multadd+0x7e>
 800c0fa:	68a3      	ldr	r3, [r4, #8]
 800c0fc:	42ab      	cmp	r3, r5
 800c0fe:	dc19      	bgt.n	800c134 <__multadd+0x74>
 800c100:	6861      	ldr	r1, [r4, #4]
 800c102:	4638      	mov	r0, r7
 800c104:	3101      	adds	r1, #1
 800c106:	f7ff ff79 	bl	800bffc <_Balloc>
 800c10a:	4680      	mov	r8, r0
 800c10c:	b928      	cbnz	r0, 800c11a <__multadd+0x5a>
 800c10e:	4602      	mov	r2, r0
 800c110:	4b0c      	ldr	r3, [pc, #48]	@ (800c144 <__multadd+0x84>)
 800c112:	480d      	ldr	r0, [pc, #52]	@ (800c148 <__multadd+0x88>)
 800c114:	21ba      	movs	r1, #186	@ 0xba
 800c116:	f000 fedf 	bl	800ced8 <__assert_func>
 800c11a:	6922      	ldr	r2, [r4, #16]
 800c11c:	3202      	adds	r2, #2
 800c11e:	f104 010c 	add.w	r1, r4, #12
 800c122:	0092      	lsls	r2, r2, #2
 800c124:	300c      	adds	r0, #12
 800c126:	f7ff f8c4 	bl	800b2b2 <memcpy>
 800c12a:	4621      	mov	r1, r4
 800c12c:	4638      	mov	r0, r7
 800c12e:	f7ff ffa5 	bl	800c07c <_Bfree>
 800c132:	4644      	mov	r4, r8
 800c134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c138:	3501      	adds	r5, #1
 800c13a:	615e      	str	r6, [r3, #20]
 800c13c:	6125      	str	r5, [r4, #16]
 800c13e:	4620      	mov	r0, r4
 800c140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c144:	0800dcbc 	.word	0x0800dcbc
 800c148:	0800dccd 	.word	0x0800dccd

0800c14c <__hi0bits>:
 800c14c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c150:	4603      	mov	r3, r0
 800c152:	bf36      	itet	cc
 800c154:	0403      	lslcc	r3, r0, #16
 800c156:	2000      	movcs	r0, #0
 800c158:	2010      	movcc	r0, #16
 800c15a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c15e:	bf3c      	itt	cc
 800c160:	021b      	lslcc	r3, r3, #8
 800c162:	3008      	addcc	r0, #8
 800c164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c168:	bf3c      	itt	cc
 800c16a:	011b      	lslcc	r3, r3, #4
 800c16c:	3004      	addcc	r0, #4
 800c16e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c172:	bf3c      	itt	cc
 800c174:	009b      	lslcc	r3, r3, #2
 800c176:	3002      	addcc	r0, #2
 800c178:	2b00      	cmp	r3, #0
 800c17a:	db05      	blt.n	800c188 <__hi0bits+0x3c>
 800c17c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c180:	f100 0001 	add.w	r0, r0, #1
 800c184:	bf08      	it	eq
 800c186:	2020      	moveq	r0, #32
 800c188:	4770      	bx	lr

0800c18a <__lo0bits>:
 800c18a:	6803      	ldr	r3, [r0, #0]
 800c18c:	4602      	mov	r2, r0
 800c18e:	f013 0007 	ands.w	r0, r3, #7
 800c192:	d00b      	beq.n	800c1ac <__lo0bits+0x22>
 800c194:	07d9      	lsls	r1, r3, #31
 800c196:	d421      	bmi.n	800c1dc <__lo0bits+0x52>
 800c198:	0798      	lsls	r0, r3, #30
 800c19a:	bf49      	itett	mi
 800c19c:	085b      	lsrmi	r3, r3, #1
 800c19e:	089b      	lsrpl	r3, r3, #2
 800c1a0:	2001      	movmi	r0, #1
 800c1a2:	6013      	strmi	r3, [r2, #0]
 800c1a4:	bf5c      	itt	pl
 800c1a6:	6013      	strpl	r3, [r2, #0]
 800c1a8:	2002      	movpl	r0, #2
 800c1aa:	4770      	bx	lr
 800c1ac:	b299      	uxth	r1, r3
 800c1ae:	b909      	cbnz	r1, 800c1b4 <__lo0bits+0x2a>
 800c1b0:	0c1b      	lsrs	r3, r3, #16
 800c1b2:	2010      	movs	r0, #16
 800c1b4:	b2d9      	uxtb	r1, r3
 800c1b6:	b909      	cbnz	r1, 800c1bc <__lo0bits+0x32>
 800c1b8:	3008      	adds	r0, #8
 800c1ba:	0a1b      	lsrs	r3, r3, #8
 800c1bc:	0719      	lsls	r1, r3, #28
 800c1be:	bf04      	itt	eq
 800c1c0:	091b      	lsreq	r3, r3, #4
 800c1c2:	3004      	addeq	r0, #4
 800c1c4:	0799      	lsls	r1, r3, #30
 800c1c6:	bf04      	itt	eq
 800c1c8:	089b      	lsreq	r3, r3, #2
 800c1ca:	3002      	addeq	r0, #2
 800c1cc:	07d9      	lsls	r1, r3, #31
 800c1ce:	d403      	bmi.n	800c1d8 <__lo0bits+0x4e>
 800c1d0:	085b      	lsrs	r3, r3, #1
 800c1d2:	f100 0001 	add.w	r0, r0, #1
 800c1d6:	d003      	beq.n	800c1e0 <__lo0bits+0x56>
 800c1d8:	6013      	str	r3, [r2, #0]
 800c1da:	4770      	bx	lr
 800c1dc:	2000      	movs	r0, #0
 800c1de:	4770      	bx	lr
 800c1e0:	2020      	movs	r0, #32
 800c1e2:	4770      	bx	lr

0800c1e4 <__i2b>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	f7ff ff07 	bl	800bffc <_Balloc>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	b928      	cbnz	r0, 800c1fe <__i2b+0x1a>
 800c1f2:	4b05      	ldr	r3, [pc, #20]	@ (800c208 <__i2b+0x24>)
 800c1f4:	4805      	ldr	r0, [pc, #20]	@ (800c20c <__i2b+0x28>)
 800c1f6:	f240 1145 	movw	r1, #325	@ 0x145
 800c1fa:	f000 fe6d 	bl	800ced8 <__assert_func>
 800c1fe:	2301      	movs	r3, #1
 800c200:	6144      	str	r4, [r0, #20]
 800c202:	6103      	str	r3, [r0, #16]
 800c204:	bd10      	pop	{r4, pc}
 800c206:	bf00      	nop
 800c208:	0800dcbc 	.word	0x0800dcbc
 800c20c:	0800dccd 	.word	0x0800dccd

0800c210 <__multiply>:
 800c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	4614      	mov	r4, r2
 800c216:	690a      	ldr	r2, [r1, #16]
 800c218:	6923      	ldr	r3, [r4, #16]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	bfa8      	it	ge
 800c21e:	4623      	movge	r3, r4
 800c220:	460f      	mov	r7, r1
 800c222:	bfa4      	itt	ge
 800c224:	460c      	movge	r4, r1
 800c226:	461f      	movge	r7, r3
 800c228:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c22c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c230:	68a3      	ldr	r3, [r4, #8]
 800c232:	6861      	ldr	r1, [r4, #4]
 800c234:	eb0a 0609 	add.w	r6, sl, r9
 800c238:	42b3      	cmp	r3, r6
 800c23a:	b085      	sub	sp, #20
 800c23c:	bfb8      	it	lt
 800c23e:	3101      	addlt	r1, #1
 800c240:	f7ff fedc 	bl	800bffc <_Balloc>
 800c244:	b930      	cbnz	r0, 800c254 <__multiply+0x44>
 800c246:	4602      	mov	r2, r0
 800c248:	4b44      	ldr	r3, [pc, #272]	@ (800c35c <__multiply+0x14c>)
 800c24a:	4845      	ldr	r0, [pc, #276]	@ (800c360 <__multiply+0x150>)
 800c24c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c250:	f000 fe42 	bl	800ced8 <__assert_func>
 800c254:	f100 0514 	add.w	r5, r0, #20
 800c258:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c25c:	462b      	mov	r3, r5
 800c25e:	2200      	movs	r2, #0
 800c260:	4543      	cmp	r3, r8
 800c262:	d321      	bcc.n	800c2a8 <__multiply+0x98>
 800c264:	f107 0114 	add.w	r1, r7, #20
 800c268:	f104 0214 	add.w	r2, r4, #20
 800c26c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c270:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c274:	9302      	str	r3, [sp, #8]
 800c276:	1b13      	subs	r3, r2, r4
 800c278:	3b15      	subs	r3, #21
 800c27a:	f023 0303 	bic.w	r3, r3, #3
 800c27e:	3304      	adds	r3, #4
 800c280:	f104 0715 	add.w	r7, r4, #21
 800c284:	42ba      	cmp	r2, r7
 800c286:	bf38      	it	cc
 800c288:	2304      	movcc	r3, #4
 800c28a:	9301      	str	r3, [sp, #4]
 800c28c:	9b02      	ldr	r3, [sp, #8]
 800c28e:	9103      	str	r1, [sp, #12]
 800c290:	428b      	cmp	r3, r1
 800c292:	d80c      	bhi.n	800c2ae <__multiply+0x9e>
 800c294:	2e00      	cmp	r6, #0
 800c296:	dd03      	ble.n	800c2a0 <__multiply+0x90>
 800c298:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d05b      	beq.n	800c358 <__multiply+0x148>
 800c2a0:	6106      	str	r6, [r0, #16]
 800c2a2:	b005      	add	sp, #20
 800c2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a8:	f843 2b04 	str.w	r2, [r3], #4
 800c2ac:	e7d8      	b.n	800c260 <__multiply+0x50>
 800c2ae:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2b2:	f1ba 0f00 	cmp.w	sl, #0
 800c2b6:	d024      	beq.n	800c302 <__multiply+0xf2>
 800c2b8:	f104 0e14 	add.w	lr, r4, #20
 800c2bc:	46a9      	mov	r9, r5
 800c2be:	f04f 0c00 	mov.w	ip, #0
 800c2c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2c6:	f8d9 3000 	ldr.w	r3, [r9]
 800c2ca:	fa1f fb87 	uxth.w	fp, r7
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c2d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c2d8:	f8d9 7000 	ldr.w	r7, [r9]
 800c2dc:	4463      	add	r3, ip
 800c2de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2e2:	fb0a c70b 	mla	r7, sl, fp, ip
 800c2e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2f0:	4572      	cmp	r2, lr
 800c2f2:	f849 3b04 	str.w	r3, [r9], #4
 800c2f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2fa:	d8e2      	bhi.n	800c2c2 <__multiply+0xb2>
 800c2fc:	9b01      	ldr	r3, [sp, #4]
 800c2fe:	f845 c003 	str.w	ip, [r5, r3]
 800c302:	9b03      	ldr	r3, [sp, #12]
 800c304:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c308:	3104      	adds	r1, #4
 800c30a:	f1b9 0f00 	cmp.w	r9, #0
 800c30e:	d021      	beq.n	800c354 <__multiply+0x144>
 800c310:	682b      	ldr	r3, [r5, #0]
 800c312:	f104 0c14 	add.w	ip, r4, #20
 800c316:	46ae      	mov	lr, r5
 800c318:	f04f 0a00 	mov.w	sl, #0
 800c31c:	f8bc b000 	ldrh.w	fp, [ip]
 800c320:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c324:	fb09 770b 	mla	r7, r9, fp, r7
 800c328:	4457      	add	r7, sl
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c330:	f84e 3b04 	str.w	r3, [lr], #4
 800c334:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c338:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c33c:	f8be 3000 	ldrh.w	r3, [lr]
 800c340:	fb09 330a 	mla	r3, r9, sl, r3
 800c344:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c348:	4562      	cmp	r2, ip
 800c34a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c34e:	d8e5      	bhi.n	800c31c <__multiply+0x10c>
 800c350:	9f01      	ldr	r7, [sp, #4]
 800c352:	51eb      	str	r3, [r5, r7]
 800c354:	3504      	adds	r5, #4
 800c356:	e799      	b.n	800c28c <__multiply+0x7c>
 800c358:	3e01      	subs	r6, #1
 800c35a:	e79b      	b.n	800c294 <__multiply+0x84>
 800c35c:	0800dcbc 	.word	0x0800dcbc
 800c360:	0800dccd 	.word	0x0800dccd

0800c364 <__pow5mult>:
 800c364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c368:	4615      	mov	r5, r2
 800c36a:	f012 0203 	ands.w	r2, r2, #3
 800c36e:	4607      	mov	r7, r0
 800c370:	460e      	mov	r6, r1
 800c372:	d007      	beq.n	800c384 <__pow5mult+0x20>
 800c374:	4c25      	ldr	r4, [pc, #148]	@ (800c40c <__pow5mult+0xa8>)
 800c376:	3a01      	subs	r2, #1
 800c378:	2300      	movs	r3, #0
 800c37a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c37e:	f7ff fe9f 	bl	800c0c0 <__multadd>
 800c382:	4606      	mov	r6, r0
 800c384:	10ad      	asrs	r5, r5, #2
 800c386:	d03d      	beq.n	800c404 <__pow5mult+0xa0>
 800c388:	69fc      	ldr	r4, [r7, #28]
 800c38a:	b97c      	cbnz	r4, 800c3ac <__pow5mult+0x48>
 800c38c:	2010      	movs	r0, #16
 800c38e:	f7fd ff45 	bl	800a21c <malloc>
 800c392:	4602      	mov	r2, r0
 800c394:	61f8      	str	r0, [r7, #28]
 800c396:	b928      	cbnz	r0, 800c3a4 <__pow5mult+0x40>
 800c398:	4b1d      	ldr	r3, [pc, #116]	@ (800c410 <__pow5mult+0xac>)
 800c39a:	481e      	ldr	r0, [pc, #120]	@ (800c414 <__pow5mult+0xb0>)
 800c39c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3a0:	f000 fd9a 	bl	800ced8 <__assert_func>
 800c3a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3a8:	6004      	str	r4, [r0, #0]
 800c3aa:	60c4      	str	r4, [r0, #12]
 800c3ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3b4:	b94c      	cbnz	r4, 800c3ca <__pow5mult+0x66>
 800c3b6:	f240 2171 	movw	r1, #625	@ 0x271
 800c3ba:	4638      	mov	r0, r7
 800c3bc:	f7ff ff12 	bl	800c1e4 <__i2b>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	6003      	str	r3, [r0, #0]
 800c3ca:	f04f 0900 	mov.w	r9, #0
 800c3ce:	07eb      	lsls	r3, r5, #31
 800c3d0:	d50a      	bpl.n	800c3e8 <__pow5mult+0x84>
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f7ff ff1a 	bl	800c210 <__multiply>
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4680      	mov	r8, r0
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	f7ff fe4b 	bl	800c07c <_Bfree>
 800c3e6:	4646      	mov	r6, r8
 800c3e8:	106d      	asrs	r5, r5, #1
 800c3ea:	d00b      	beq.n	800c404 <__pow5mult+0xa0>
 800c3ec:	6820      	ldr	r0, [r4, #0]
 800c3ee:	b938      	cbnz	r0, 800c400 <__pow5mult+0x9c>
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f7ff ff0b 	bl	800c210 <__multiply>
 800c3fa:	6020      	str	r0, [r4, #0]
 800c3fc:	f8c0 9000 	str.w	r9, [r0]
 800c400:	4604      	mov	r4, r0
 800c402:	e7e4      	b.n	800c3ce <__pow5mult+0x6a>
 800c404:	4630      	mov	r0, r6
 800c406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40a:	bf00      	nop
 800c40c:	0800dd28 	.word	0x0800dd28
 800c410:	0800dc4d 	.word	0x0800dc4d
 800c414:	0800dccd 	.word	0x0800dccd

0800c418 <__lshift>:
 800c418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c41c:	460c      	mov	r4, r1
 800c41e:	6849      	ldr	r1, [r1, #4]
 800c420:	6923      	ldr	r3, [r4, #16]
 800c422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c426:	68a3      	ldr	r3, [r4, #8]
 800c428:	4607      	mov	r7, r0
 800c42a:	4691      	mov	r9, r2
 800c42c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c430:	f108 0601 	add.w	r6, r8, #1
 800c434:	42b3      	cmp	r3, r6
 800c436:	db0b      	blt.n	800c450 <__lshift+0x38>
 800c438:	4638      	mov	r0, r7
 800c43a:	f7ff fddf 	bl	800bffc <_Balloc>
 800c43e:	4605      	mov	r5, r0
 800c440:	b948      	cbnz	r0, 800c456 <__lshift+0x3e>
 800c442:	4602      	mov	r2, r0
 800c444:	4b28      	ldr	r3, [pc, #160]	@ (800c4e8 <__lshift+0xd0>)
 800c446:	4829      	ldr	r0, [pc, #164]	@ (800c4ec <__lshift+0xd4>)
 800c448:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c44c:	f000 fd44 	bl	800ced8 <__assert_func>
 800c450:	3101      	adds	r1, #1
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	e7ee      	b.n	800c434 <__lshift+0x1c>
 800c456:	2300      	movs	r3, #0
 800c458:	f100 0114 	add.w	r1, r0, #20
 800c45c:	f100 0210 	add.w	r2, r0, #16
 800c460:	4618      	mov	r0, r3
 800c462:	4553      	cmp	r3, sl
 800c464:	db33      	blt.n	800c4ce <__lshift+0xb6>
 800c466:	6920      	ldr	r0, [r4, #16]
 800c468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c46c:	f104 0314 	add.w	r3, r4, #20
 800c470:	f019 091f 	ands.w	r9, r9, #31
 800c474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c478:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c47c:	d02b      	beq.n	800c4d6 <__lshift+0xbe>
 800c47e:	f1c9 0e20 	rsb	lr, r9, #32
 800c482:	468a      	mov	sl, r1
 800c484:	2200      	movs	r2, #0
 800c486:	6818      	ldr	r0, [r3, #0]
 800c488:	fa00 f009 	lsl.w	r0, r0, r9
 800c48c:	4310      	orrs	r0, r2
 800c48e:	f84a 0b04 	str.w	r0, [sl], #4
 800c492:	f853 2b04 	ldr.w	r2, [r3], #4
 800c496:	459c      	cmp	ip, r3
 800c498:	fa22 f20e 	lsr.w	r2, r2, lr
 800c49c:	d8f3      	bhi.n	800c486 <__lshift+0x6e>
 800c49e:	ebac 0304 	sub.w	r3, ip, r4
 800c4a2:	3b15      	subs	r3, #21
 800c4a4:	f023 0303 	bic.w	r3, r3, #3
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	f104 0015 	add.w	r0, r4, #21
 800c4ae:	4584      	cmp	ip, r0
 800c4b0:	bf38      	it	cc
 800c4b2:	2304      	movcc	r3, #4
 800c4b4:	50ca      	str	r2, [r1, r3]
 800c4b6:	b10a      	cbz	r2, 800c4bc <__lshift+0xa4>
 800c4b8:	f108 0602 	add.w	r6, r8, #2
 800c4bc:	3e01      	subs	r6, #1
 800c4be:	4638      	mov	r0, r7
 800c4c0:	612e      	str	r6, [r5, #16]
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	f7ff fdda 	bl	800c07c <_Bfree>
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	e7c5      	b.n	800c462 <__lshift+0x4a>
 800c4d6:	3904      	subs	r1, #4
 800c4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4e0:	459c      	cmp	ip, r3
 800c4e2:	d8f9      	bhi.n	800c4d8 <__lshift+0xc0>
 800c4e4:	e7ea      	b.n	800c4bc <__lshift+0xa4>
 800c4e6:	bf00      	nop
 800c4e8:	0800dcbc 	.word	0x0800dcbc
 800c4ec:	0800dccd 	.word	0x0800dccd

0800c4f0 <__mcmp>:
 800c4f0:	690a      	ldr	r2, [r1, #16]
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	6900      	ldr	r0, [r0, #16]
 800c4f6:	1a80      	subs	r0, r0, r2
 800c4f8:	b530      	push	{r4, r5, lr}
 800c4fa:	d10e      	bne.n	800c51a <__mcmp+0x2a>
 800c4fc:	3314      	adds	r3, #20
 800c4fe:	3114      	adds	r1, #20
 800c500:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c504:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c508:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c50c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c510:	4295      	cmp	r5, r2
 800c512:	d003      	beq.n	800c51c <__mcmp+0x2c>
 800c514:	d205      	bcs.n	800c522 <__mcmp+0x32>
 800c516:	f04f 30ff 	mov.w	r0, #4294967295
 800c51a:	bd30      	pop	{r4, r5, pc}
 800c51c:	42a3      	cmp	r3, r4
 800c51e:	d3f3      	bcc.n	800c508 <__mcmp+0x18>
 800c520:	e7fb      	b.n	800c51a <__mcmp+0x2a>
 800c522:	2001      	movs	r0, #1
 800c524:	e7f9      	b.n	800c51a <__mcmp+0x2a>
	...

0800c528 <__mdiff>:
 800c528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	4689      	mov	r9, r1
 800c52e:	4606      	mov	r6, r0
 800c530:	4611      	mov	r1, r2
 800c532:	4648      	mov	r0, r9
 800c534:	4614      	mov	r4, r2
 800c536:	f7ff ffdb 	bl	800c4f0 <__mcmp>
 800c53a:	1e05      	subs	r5, r0, #0
 800c53c:	d112      	bne.n	800c564 <__mdiff+0x3c>
 800c53e:	4629      	mov	r1, r5
 800c540:	4630      	mov	r0, r6
 800c542:	f7ff fd5b 	bl	800bffc <_Balloc>
 800c546:	4602      	mov	r2, r0
 800c548:	b928      	cbnz	r0, 800c556 <__mdiff+0x2e>
 800c54a:	4b3f      	ldr	r3, [pc, #252]	@ (800c648 <__mdiff+0x120>)
 800c54c:	f240 2137 	movw	r1, #567	@ 0x237
 800c550:	483e      	ldr	r0, [pc, #248]	@ (800c64c <__mdiff+0x124>)
 800c552:	f000 fcc1 	bl	800ced8 <__assert_func>
 800c556:	2301      	movs	r3, #1
 800c558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c55c:	4610      	mov	r0, r2
 800c55e:	b003      	add	sp, #12
 800c560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c564:	bfbc      	itt	lt
 800c566:	464b      	movlt	r3, r9
 800c568:	46a1      	movlt	r9, r4
 800c56a:	4630      	mov	r0, r6
 800c56c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c570:	bfba      	itte	lt
 800c572:	461c      	movlt	r4, r3
 800c574:	2501      	movlt	r5, #1
 800c576:	2500      	movge	r5, #0
 800c578:	f7ff fd40 	bl	800bffc <_Balloc>
 800c57c:	4602      	mov	r2, r0
 800c57e:	b918      	cbnz	r0, 800c588 <__mdiff+0x60>
 800c580:	4b31      	ldr	r3, [pc, #196]	@ (800c648 <__mdiff+0x120>)
 800c582:	f240 2145 	movw	r1, #581	@ 0x245
 800c586:	e7e3      	b.n	800c550 <__mdiff+0x28>
 800c588:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c58c:	6926      	ldr	r6, [r4, #16]
 800c58e:	60c5      	str	r5, [r0, #12]
 800c590:	f109 0310 	add.w	r3, r9, #16
 800c594:	f109 0514 	add.w	r5, r9, #20
 800c598:	f104 0e14 	add.w	lr, r4, #20
 800c59c:	f100 0b14 	add.w	fp, r0, #20
 800c5a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	46d9      	mov	r9, fp
 800c5ac:	f04f 0c00 	mov.w	ip, #0
 800c5b0:	9b01      	ldr	r3, [sp, #4]
 800c5b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5ba:	9301      	str	r3, [sp, #4]
 800c5bc:	fa1f f38a 	uxth.w	r3, sl
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	b283      	uxth	r3, r0
 800c5c4:	1acb      	subs	r3, r1, r3
 800c5c6:	0c00      	lsrs	r0, r0, #16
 800c5c8:	4463      	add	r3, ip
 800c5ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c5ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c5d8:	4576      	cmp	r6, lr
 800c5da:	f849 3b04 	str.w	r3, [r9], #4
 800c5de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5e2:	d8e5      	bhi.n	800c5b0 <__mdiff+0x88>
 800c5e4:	1b33      	subs	r3, r6, r4
 800c5e6:	3b15      	subs	r3, #21
 800c5e8:	f023 0303 	bic.w	r3, r3, #3
 800c5ec:	3415      	adds	r4, #21
 800c5ee:	3304      	adds	r3, #4
 800c5f0:	42a6      	cmp	r6, r4
 800c5f2:	bf38      	it	cc
 800c5f4:	2304      	movcc	r3, #4
 800c5f6:	441d      	add	r5, r3
 800c5f8:	445b      	add	r3, fp
 800c5fa:	461e      	mov	r6, r3
 800c5fc:	462c      	mov	r4, r5
 800c5fe:	4544      	cmp	r4, r8
 800c600:	d30e      	bcc.n	800c620 <__mdiff+0xf8>
 800c602:	f108 0103 	add.w	r1, r8, #3
 800c606:	1b49      	subs	r1, r1, r5
 800c608:	f021 0103 	bic.w	r1, r1, #3
 800c60c:	3d03      	subs	r5, #3
 800c60e:	45a8      	cmp	r8, r5
 800c610:	bf38      	it	cc
 800c612:	2100      	movcc	r1, #0
 800c614:	440b      	add	r3, r1
 800c616:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c61a:	b191      	cbz	r1, 800c642 <__mdiff+0x11a>
 800c61c:	6117      	str	r7, [r2, #16]
 800c61e:	e79d      	b.n	800c55c <__mdiff+0x34>
 800c620:	f854 1b04 	ldr.w	r1, [r4], #4
 800c624:	46e6      	mov	lr, ip
 800c626:	0c08      	lsrs	r0, r1, #16
 800c628:	fa1c fc81 	uxtah	ip, ip, r1
 800c62c:	4471      	add	r1, lr
 800c62e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c632:	b289      	uxth	r1, r1
 800c634:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c638:	f846 1b04 	str.w	r1, [r6], #4
 800c63c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c640:	e7dd      	b.n	800c5fe <__mdiff+0xd6>
 800c642:	3f01      	subs	r7, #1
 800c644:	e7e7      	b.n	800c616 <__mdiff+0xee>
 800c646:	bf00      	nop
 800c648:	0800dcbc 	.word	0x0800dcbc
 800c64c:	0800dccd 	.word	0x0800dccd

0800c650 <__d2b>:
 800c650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c654:	460f      	mov	r7, r1
 800c656:	2101      	movs	r1, #1
 800c658:	ec59 8b10 	vmov	r8, r9, d0
 800c65c:	4616      	mov	r6, r2
 800c65e:	f7ff fccd 	bl	800bffc <_Balloc>
 800c662:	4604      	mov	r4, r0
 800c664:	b930      	cbnz	r0, 800c674 <__d2b+0x24>
 800c666:	4602      	mov	r2, r0
 800c668:	4b23      	ldr	r3, [pc, #140]	@ (800c6f8 <__d2b+0xa8>)
 800c66a:	4824      	ldr	r0, [pc, #144]	@ (800c6fc <__d2b+0xac>)
 800c66c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c670:	f000 fc32 	bl	800ced8 <__assert_func>
 800c674:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c67c:	b10d      	cbz	r5, 800c682 <__d2b+0x32>
 800c67e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	f1b8 0300 	subs.w	r3, r8, #0
 800c688:	d023      	beq.n	800c6d2 <__d2b+0x82>
 800c68a:	4668      	mov	r0, sp
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	f7ff fd7c 	bl	800c18a <__lo0bits>
 800c692:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c696:	b1d0      	cbz	r0, 800c6ce <__d2b+0x7e>
 800c698:	f1c0 0320 	rsb	r3, r0, #32
 800c69c:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a0:	430b      	orrs	r3, r1
 800c6a2:	40c2      	lsrs	r2, r0
 800c6a4:	6163      	str	r3, [r4, #20]
 800c6a6:	9201      	str	r2, [sp, #4]
 800c6a8:	9b01      	ldr	r3, [sp, #4]
 800c6aa:	61a3      	str	r3, [r4, #24]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	bf0c      	ite	eq
 800c6b0:	2201      	moveq	r2, #1
 800c6b2:	2202      	movne	r2, #2
 800c6b4:	6122      	str	r2, [r4, #16]
 800c6b6:	b1a5      	cbz	r5, 800c6e2 <__d2b+0x92>
 800c6b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6bc:	4405      	add	r5, r0
 800c6be:	603d      	str	r5, [r7, #0]
 800c6c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c6c4:	6030      	str	r0, [r6, #0]
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	b003      	add	sp, #12
 800c6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6ce:	6161      	str	r1, [r4, #20]
 800c6d0:	e7ea      	b.n	800c6a8 <__d2b+0x58>
 800c6d2:	a801      	add	r0, sp, #4
 800c6d4:	f7ff fd59 	bl	800c18a <__lo0bits>
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	6163      	str	r3, [r4, #20]
 800c6dc:	3020      	adds	r0, #32
 800c6de:	2201      	movs	r2, #1
 800c6e0:	e7e8      	b.n	800c6b4 <__d2b+0x64>
 800c6e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c6ea:	6038      	str	r0, [r7, #0]
 800c6ec:	6918      	ldr	r0, [r3, #16]
 800c6ee:	f7ff fd2d 	bl	800c14c <__hi0bits>
 800c6f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6f6:	e7e5      	b.n	800c6c4 <__d2b+0x74>
 800c6f8:	0800dcbc 	.word	0x0800dcbc
 800c6fc:	0800dccd 	.word	0x0800dccd

0800c700 <_malloc_usable_size_r>:
 800c700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c704:	1f18      	subs	r0, r3, #4
 800c706:	2b00      	cmp	r3, #0
 800c708:	bfbc      	itt	lt
 800c70a:	580b      	ldrlt	r3, [r1, r0]
 800c70c:	18c0      	addlt	r0, r0, r3
 800c70e:	4770      	bx	lr

0800c710 <__ssputs_r>:
 800c710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c714:	688e      	ldr	r6, [r1, #8]
 800c716:	461f      	mov	r7, r3
 800c718:	42be      	cmp	r6, r7
 800c71a:	680b      	ldr	r3, [r1, #0]
 800c71c:	4682      	mov	sl, r0
 800c71e:	460c      	mov	r4, r1
 800c720:	4690      	mov	r8, r2
 800c722:	d82d      	bhi.n	800c780 <__ssputs_r+0x70>
 800c724:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c728:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c72c:	d026      	beq.n	800c77c <__ssputs_r+0x6c>
 800c72e:	6965      	ldr	r5, [r4, #20]
 800c730:	6909      	ldr	r1, [r1, #16]
 800c732:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c736:	eba3 0901 	sub.w	r9, r3, r1
 800c73a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c73e:	1c7b      	adds	r3, r7, #1
 800c740:	444b      	add	r3, r9
 800c742:	106d      	asrs	r5, r5, #1
 800c744:	429d      	cmp	r5, r3
 800c746:	bf38      	it	cc
 800c748:	461d      	movcc	r5, r3
 800c74a:	0553      	lsls	r3, r2, #21
 800c74c:	d527      	bpl.n	800c79e <__ssputs_r+0x8e>
 800c74e:	4629      	mov	r1, r5
 800c750:	f7fd fd8e 	bl	800a270 <_malloc_r>
 800c754:	4606      	mov	r6, r0
 800c756:	b360      	cbz	r0, 800c7b2 <__ssputs_r+0xa2>
 800c758:	6921      	ldr	r1, [r4, #16]
 800c75a:	464a      	mov	r2, r9
 800c75c:	f7fe fda9 	bl	800b2b2 <memcpy>
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c76a:	81a3      	strh	r3, [r4, #12]
 800c76c:	6126      	str	r6, [r4, #16]
 800c76e:	6165      	str	r5, [r4, #20]
 800c770:	444e      	add	r6, r9
 800c772:	eba5 0509 	sub.w	r5, r5, r9
 800c776:	6026      	str	r6, [r4, #0]
 800c778:	60a5      	str	r5, [r4, #8]
 800c77a:	463e      	mov	r6, r7
 800c77c:	42be      	cmp	r6, r7
 800c77e:	d900      	bls.n	800c782 <__ssputs_r+0x72>
 800c780:	463e      	mov	r6, r7
 800c782:	6820      	ldr	r0, [r4, #0]
 800c784:	4632      	mov	r2, r6
 800c786:	4641      	mov	r1, r8
 800c788:	f000 fb6a 	bl	800ce60 <memmove>
 800c78c:	68a3      	ldr	r3, [r4, #8]
 800c78e:	1b9b      	subs	r3, r3, r6
 800c790:	60a3      	str	r3, [r4, #8]
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	4433      	add	r3, r6
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	2000      	movs	r0, #0
 800c79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c79e:	462a      	mov	r2, r5
 800c7a0:	f7fd fdf2 	bl	800a388 <_realloc_r>
 800c7a4:	4606      	mov	r6, r0
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d1e0      	bne.n	800c76c <__ssputs_r+0x5c>
 800c7aa:	6921      	ldr	r1, [r4, #16]
 800c7ac:	4650      	mov	r0, sl
 800c7ae:	f7ff fbdb 	bl	800bf68 <_free_r>
 800c7b2:	230c      	movs	r3, #12
 800c7b4:	f8ca 3000 	str.w	r3, [sl]
 800c7b8:	89a3      	ldrh	r3, [r4, #12]
 800c7ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7be:	81a3      	strh	r3, [r4, #12]
 800c7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c4:	e7e9      	b.n	800c79a <__ssputs_r+0x8a>
	...

0800c7c8 <_svfiprintf_r>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	4698      	mov	r8, r3
 800c7ce:	898b      	ldrh	r3, [r1, #12]
 800c7d0:	061b      	lsls	r3, r3, #24
 800c7d2:	b09d      	sub	sp, #116	@ 0x74
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	4614      	mov	r4, r2
 800c7da:	d510      	bpl.n	800c7fe <_svfiprintf_r+0x36>
 800c7dc:	690b      	ldr	r3, [r1, #16]
 800c7de:	b973      	cbnz	r3, 800c7fe <_svfiprintf_r+0x36>
 800c7e0:	2140      	movs	r1, #64	@ 0x40
 800c7e2:	f7fd fd45 	bl	800a270 <_malloc_r>
 800c7e6:	6028      	str	r0, [r5, #0]
 800c7e8:	6128      	str	r0, [r5, #16]
 800c7ea:	b930      	cbnz	r0, 800c7fa <_svfiprintf_r+0x32>
 800c7ec:	230c      	movs	r3, #12
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f4:	b01d      	add	sp, #116	@ 0x74
 800c7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fa:	2340      	movs	r3, #64	@ 0x40
 800c7fc:	616b      	str	r3, [r5, #20]
 800c7fe:	2300      	movs	r3, #0
 800c800:	9309      	str	r3, [sp, #36]	@ 0x24
 800c802:	2320      	movs	r3, #32
 800c804:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c808:	f8cd 800c 	str.w	r8, [sp, #12]
 800c80c:	2330      	movs	r3, #48	@ 0x30
 800c80e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c9ac <_svfiprintf_r+0x1e4>
 800c812:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c816:	f04f 0901 	mov.w	r9, #1
 800c81a:	4623      	mov	r3, r4
 800c81c:	469a      	mov	sl, r3
 800c81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c822:	b10a      	cbz	r2, 800c828 <_svfiprintf_r+0x60>
 800c824:	2a25      	cmp	r2, #37	@ 0x25
 800c826:	d1f9      	bne.n	800c81c <_svfiprintf_r+0x54>
 800c828:	ebba 0b04 	subs.w	fp, sl, r4
 800c82c:	d00b      	beq.n	800c846 <_svfiprintf_r+0x7e>
 800c82e:	465b      	mov	r3, fp
 800c830:	4622      	mov	r2, r4
 800c832:	4629      	mov	r1, r5
 800c834:	4638      	mov	r0, r7
 800c836:	f7ff ff6b 	bl	800c710 <__ssputs_r>
 800c83a:	3001      	adds	r0, #1
 800c83c:	f000 80a7 	beq.w	800c98e <_svfiprintf_r+0x1c6>
 800c840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c842:	445a      	add	r2, fp
 800c844:	9209      	str	r2, [sp, #36]	@ 0x24
 800c846:	f89a 3000 	ldrb.w	r3, [sl]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 809f 	beq.w	800c98e <_svfiprintf_r+0x1c6>
 800c850:	2300      	movs	r3, #0
 800c852:	f04f 32ff 	mov.w	r2, #4294967295
 800c856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c85a:	f10a 0a01 	add.w	sl, sl, #1
 800c85e:	9304      	str	r3, [sp, #16]
 800c860:	9307      	str	r3, [sp, #28]
 800c862:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c866:	931a      	str	r3, [sp, #104]	@ 0x68
 800c868:	4654      	mov	r4, sl
 800c86a:	2205      	movs	r2, #5
 800c86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c870:	484e      	ldr	r0, [pc, #312]	@ (800c9ac <_svfiprintf_r+0x1e4>)
 800c872:	f7f3 fcb5 	bl	80001e0 <memchr>
 800c876:	9a04      	ldr	r2, [sp, #16]
 800c878:	b9d8      	cbnz	r0, 800c8b2 <_svfiprintf_r+0xea>
 800c87a:	06d0      	lsls	r0, r2, #27
 800c87c:	bf44      	itt	mi
 800c87e:	2320      	movmi	r3, #32
 800c880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c884:	0711      	lsls	r1, r2, #28
 800c886:	bf44      	itt	mi
 800c888:	232b      	movmi	r3, #43	@ 0x2b
 800c88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c88e:	f89a 3000 	ldrb.w	r3, [sl]
 800c892:	2b2a      	cmp	r3, #42	@ 0x2a
 800c894:	d015      	beq.n	800c8c2 <_svfiprintf_r+0xfa>
 800c896:	9a07      	ldr	r2, [sp, #28]
 800c898:	4654      	mov	r4, sl
 800c89a:	2000      	movs	r0, #0
 800c89c:	f04f 0c0a 	mov.w	ip, #10
 800c8a0:	4621      	mov	r1, r4
 800c8a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8a6:	3b30      	subs	r3, #48	@ 0x30
 800c8a8:	2b09      	cmp	r3, #9
 800c8aa:	d94b      	bls.n	800c944 <_svfiprintf_r+0x17c>
 800c8ac:	b1b0      	cbz	r0, 800c8dc <_svfiprintf_r+0x114>
 800c8ae:	9207      	str	r2, [sp, #28]
 800c8b0:	e014      	b.n	800c8dc <_svfiprintf_r+0x114>
 800c8b2:	eba0 0308 	sub.w	r3, r0, r8
 800c8b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	9304      	str	r3, [sp, #16]
 800c8be:	46a2      	mov	sl, r4
 800c8c0:	e7d2      	b.n	800c868 <_svfiprintf_r+0xa0>
 800c8c2:	9b03      	ldr	r3, [sp, #12]
 800c8c4:	1d19      	adds	r1, r3, #4
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	9103      	str	r1, [sp, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	bfbb      	ittet	lt
 800c8ce:	425b      	neglt	r3, r3
 800c8d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c8d4:	9307      	strge	r3, [sp, #28]
 800c8d6:	9307      	strlt	r3, [sp, #28]
 800c8d8:	bfb8      	it	lt
 800c8da:	9204      	strlt	r2, [sp, #16]
 800c8dc:	7823      	ldrb	r3, [r4, #0]
 800c8de:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8e0:	d10a      	bne.n	800c8f8 <_svfiprintf_r+0x130>
 800c8e2:	7863      	ldrb	r3, [r4, #1]
 800c8e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8e6:	d132      	bne.n	800c94e <_svfiprintf_r+0x186>
 800c8e8:	9b03      	ldr	r3, [sp, #12]
 800c8ea:	1d1a      	adds	r2, r3, #4
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	9203      	str	r2, [sp, #12]
 800c8f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8f4:	3402      	adds	r4, #2
 800c8f6:	9305      	str	r3, [sp, #20]
 800c8f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c9bc <_svfiprintf_r+0x1f4>
 800c8fc:	7821      	ldrb	r1, [r4, #0]
 800c8fe:	2203      	movs	r2, #3
 800c900:	4650      	mov	r0, sl
 800c902:	f7f3 fc6d 	bl	80001e0 <memchr>
 800c906:	b138      	cbz	r0, 800c918 <_svfiprintf_r+0x150>
 800c908:	9b04      	ldr	r3, [sp, #16]
 800c90a:	eba0 000a 	sub.w	r0, r0, sl
 800c90e:	2240      	movs	r2, #64	@ 0x40
 800c910:	4082      	lsls	r2, r0
 800c912:	4313      	orrs	r3, r2
 800c914:	3401      	adds	r4, #1
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c91c:	4824      	ldr	r0, [pc, #144]	@ (800c9b0 <_svfiprintf_r+0x1e8>)
 800c91e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c922:	2206      	movs	r2, #6
 800c924:	f7f3 fc5c 	bl	80001e0 <memchr>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d036      	beq.n	800c99a <_svfiprintf_r+0x1d2>
 800c92c:	4b21      	ldr	r3, [pc, #132]	@ (800c9b4 <_svfiprintf_r+0x1ec>)
 800c92e:	bb1b      	cbnz	r3, 800c978 <_svfiprintf_r+0x1b0>
 800c930:	9b03      	ldr	r3, [sp, #12]
 800c932:	3307      	adds	r3, #7
 800c934:	f023 0307 	bic.w	r3, r3, #7
 800c938:	3308      	adds	r3, #8
 800c93a:	9303      	str	r3, [sp, #12]
 800c93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c93e:	4433      	add	r3, r6
 800c940:	9309      	str	r3, [sp, #36]	@ 0x24
 800c942:	e76a      	b.n	800c81a <_svfiprintf_r+0x52>
 800c944:	fb0c 3202 	mla	r2, ip, r2, r3
 800c948:	460c      	mov	r4, r1
 800c94a:	2001      	movs	r0, #1
 800c94c:	e7a8      	b.n	800c8a0 <_svfiprintf_r+0xd8>
 800c94e:	2300      	movs	r3, #0
 800c950:	3401      	adds	r4, #1
 800c952:	9305      	str	r3, [sp, #20]
 800c954:	4619      	mov	r1, r3
 800c956:	f04f 0c0a 	mov.w	ip, #10
 800c95a:	4620      	mov	r0, r4
 800c95c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c960:	3a30      	subs	r2, #48	@ 0x30
 800c962:	2a09      	cmp	r2, #9
 800c964:	d903      	bls.n	800c96e <_svfiprintf_r+0x1a6>
 800c966:	2b00      	cmp	r3, #0
 800c968:	d0c6      	beq.n	800c8f8 <_svfiprintf_r+0x130>
 800c96a:	9105      	str	r1, [sp, #20]
 800c96c:	e7c4      	b.n	800c8f8 <_svfiprintf_r+0x130>
 800c96e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c972:	4604      	mov	r4, r0
 800c974:	2301      	movs	r3, #1
 800c976:	e7f0      	b.n	800c95a <_svfiprintf_r+0x192>
 800c978:	ab03      	add	r3, sp, #12
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	462a      	mov	r2, r5
 800c97e:	4b0e      	ldr	r3, [pc, #56]	@ (800c9b8 <_svfiprintf_r+0x1f0>)
 800c980:	a904      	add	r1, sp, #16
 800c982:	4638      	mov	r0, r7
 800c984:	f7fd fdce 	bl	800a524 <_printf_float>
 800c988:	1c42      	adds	r2, r0, #1
 800c98a:	4606      	mov	r6, r0
 800c98c:	d1d6      	bne.n	800c93c <_svfiprintf_r+0x174>
 800c98e:	89ab      	ldrh	r3, [r5, #12]
 800c990:	065b      	lsls	r3, r3, #25
 800c992:	f53f af2d 	bmi.w	800c7f0 <_svfiprintf_r+0x28>
 800c996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c998:	e72c      	b.n	800c7f4 <_svfiprintf_r+0x2c>
 800c99a:	ab03      	add	r3, sp, #12
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	462a      	mov	r2, r5
 800c9a0:	4b05      	ldr	r3, [pc, #20]	@ (800c9b8 <_svfiprintf_r+0x1f0>)
 800c9a2:	a904      	add	r1, sp, #16
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f7fe f855 	bl	800aa54 <_printf_i>
 800c9aa:	e7ed      	b.n	800c988 <_svfiprintf_r+0x1c0>
 800c9ac:	0800de28 	.word	0x0800de28
 800c9b0:	0800de32 	.word	0x0800de32
 800c9b4:	0800a525 	.word	0x0800a525
 800c9b8:	0800c711 	.word	0x0800c711
 800c9bc:	0800de2e 	.word	0x0800de2e

0800c9c0 <__sfputc_r>:
 800c9c0:	6893      	ldr	r3, [r2, #8]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	b410      	push	{r4}
 800c9c8:	6093      	str	r3, [r2, #8]
 800c9ca:	da08      	bge.n	800c9de <__sfputc_r+0x1e>
 800c9cc:	6994      	ldr	r4, [r2, #24]
 800c9ce:	42a3      	cmp	r3, r4
 800c9d0:	db01      	blt.n	800c9d6 <__sfputc_r+0x16>
 800c9d2:	290a      	cmp	r1, #10
 800c9d4:	d103      	bne.n	800c9de <__sfputc_r+0x1e>
 800c9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9da:	f7fe baf0 	b.w	800afbe <__swbuf_r>
 800c9de:	6813      	ldr	r3, [r2, #0]
 800c9e0:	1c58      	adds	r0, r3, #1
 800c9e2:	6010      	str	r0, [r2, #0]
 800c9e4:	7019      	strb	r1, [r3, #0]
 800c9e6:	4608      	mov	r0, r1
 800c9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <__sfputs_r>:
 800c9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	460f      	mov	r7, r1
 800c9f4:	4614      	mov	r4, r2
 800c9f6:	18d5      	adds	r5, r2, r3
 800c9f8:	42ac      	cmp	r4, r5
 800c9fa:	d101      	bne.n	800ca00 <__sfputs_r+0x12>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e007      	b.n	800ca10 <__sfputs_r+0x22>
 800ca00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca04:	463a      	mov	r2, r7
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7ff ffda 	bl	800c9c0 <__sfputc_r>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d1f3      	bne.n	800c9f8 <__sfputs_r+0xa>
 800ca10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca14 <_vfiprintf_r>:
 800ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	460d      	mov	r5, r1
 800ca1a:	b09d      	sub	sp, #116	@ 0x74
 800ca1c:	4614      	mov	r4, r2
 800ca1e:	4698      	mov	r8, r3
 800ca20:	4606      	mov	r6, r0
 800ca22:	b118      	cbz	r0, 800ca2c <_vfiprintf_r+0x18>
 800ca24:	6a03      	ldr	r3, [r0, #32]
 800ca26:	b90b      	cbnz	r3, 800ca2c <_vfiprintf_r+0x18>
 800ca28:	f7fe f9c0 	bl	800adac <__sinit>
 800ca2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca2e:	07d9      	lsls	r1, r3, #31
 800ca30:	d405      	bmi.n	800ca3e <_vfiprintf_r+0x2a>
 800ca32:	89ab      	ldrh	r3, [r5, #12]
 800ca34:	059a      	lsls	r2, r3, #22
 800ca36:	d402      	bmi.n	800ca3e <_vfiprintf_r+0x2a>
 800ca38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca3a:	f7fe fc38 	bl	800b2ae <__retarget_lock_acquire_recursive>
 800ca3e:	89ab      	ldrh	r3, [r5, #12]
 800ca40:	071b      	lsls	r3, r3, #28
 800ca42:	d501      	bpl.n	800ca48 <_vfiprintf_r+0x34>
 800ca44:	692b      	ldr	r3, [r5, #16]
 800ca46:	b99b      	cbnz	r3, 800ca70 <_vfiprintf_r+0x5c>
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	f7fe faf6 	bl	800b03c <__swsetup_r>
 800ca50:	b170      	cbz	r0, 800ca70 <_vfiprintf_r+0x5c>
 800ca52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca54:	07dc      	lsls	r4, r3, #31
 800ca56:	d504      	bpl.n	800ca62 <_vfiprintf_r+0x4e>
 800ca58:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5c:	b01d      	add	sp, #116	@ 0x74
 800ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca62:	89ab      	ldrh	r3, [r5, #12]
 800ca64:	0598      	lsls	r0, r3, #22
 800ca66:	d4f7      	bmi.n	800ca58 <_vfiprintf_r+0x44>
 800ca68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca6a:	f7fe fc21 	bl	800b2b0 <__retarget_lock_release_recursive>
 800ca6e:	e7f3      	b.n	800ca58 <_vfiprintf_r+0x44>
 800ca70:	2300      	movs	r3, #0
 800ca72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca74:	2320      	movs	r3, #32
 800ca76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca7e:	2330      	movs	r3, #48	@ 0x30
 800ca80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc30 <_vfiprintf_r+0x21c>
 800ca84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca88:	f04f 0901 	mov.w	r9, #1
 800ca8c:	4623      	mov	r3, r4
 800ca8e:	469a      	mov	sl, r3
 800ca90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca94:	b10a      	cbz	r2, 800ca9a <_vfiprintf_r+0x86>
 800ca96:	2a25      	cmp	r2, #37	@ 0x25
 800ca98:	d1f9      	bne.n	800ca8e <_vfiprintf_r+0x7a>
 800ca9a:	ebba 0b04 	subs.w	fp, sl, r4
 800ca9e:	d00b      	beq.n	800cab8 <_vfiprintf_r+0xa4>
 800caa0:	465b      	mov	r3, fp
 800caa2:	4622      	mov	r2, r4
 800caa4:	4629      	mov	r1, r5
 800caa6:	4630      	mov	r0, r6
 800caa8:	f7ff ffa1 	bl	800c9ee <__sfputs_r>
 800caac:	3001      	adds	r0, #1
 800caae:	f000 80a7 	beq.w	800cc00 <_vfiprintf_r+0x1ec>
 800cab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cab4:	445a      	add	r2, fp
 800cab6:	9209      	str	r2, [sp, #36]	@ 0x24
 800cab8:	f89a 3000 	ldrb.w	r3, [sl]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f000 809f 	beq.w	800cc00 <_vfiprintf_r+0x1ec>
 800cac2:	2300      	movs	r3, #0
 800cac4:	f04f 32ff 	mov.w	r2, #4294967295
 800cac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cacc:	f10a 0a01 	add.w	sl, sl, #1
 800cad0:	9304      	str	r3, [sp, #16]
 800cad2:	9307      	str	r3, [sp, #28]
 800cad4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cad8:	931a      	str	r3, [sp, #104]	@ 0x68
 800cada:	4654      	mov	r4, sl
 800cadc:	2205      	movs	r2, #5
 800cade:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae2:	4853      	ldr	r0, [pc, #332]	@ (800cc30 <_vfiprintf_r+0x21c>)
 800cae4:	f7f3 fb7c 	bl	80001e0 <memchr>
 800cae8:	9a04      	ldr	r2, [sp, #16]
 800caea:	b9d8      	cbnz	r0, 800cb24 <_vfiprintf_r+0x110>
 800caec:	06d1      	lsls	r1, r2, #27
 800caee:	bf44      	itt	mi
 800caf0:	2320      	movmi	r3, #32
 800caf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caf6:	0713      	lsls	r3, r2, #28
 800caf8:	bf44      	itt	mi
 800cafa:	232b      	movmi	r3, #43	@ 0x2b
 800cafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb00:	f89a 3000 	ldrb.w	r3, [sl]
 800cb04:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb06:	d015      	beq.n	800cb34 <_vfiprintf_r+0x120>
 800cb08:	9a07      	ldr	r2, [sp, #28]
 800cb0a:	4654      	mov	r4, sl
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	f04f 0c0a 	mov.w	ip, #10
 800cb12:	4621      	mov	r1, r4
 800cb14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb18:	3b30      	subs	r3, #48	@ 0x30
 800cb1a:	2b09      	cmp	r3, #9
 800cb1c:	d94b      	bls.n	800cbb6 <_vfiprintf_r+0x1a2>
 800cb1e:	b1b0      	cbz	r0, 800cb4e <_vfiprintf_r+0x13a>
 800cb20:	9207      	str	r2, [sp, #28]
 800cb22:	e014      	b.n	800cb4e <_vfiprintf_r+0x13a>
 800cb24:	eba0 0308 	sub.w	r3, r0, r8
 800cb28:	fa09 f303 	lsl.w	r3, r9, r3
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	9304      	str	r3, [sp, #16]
 800cb30:	46a2      	mov	sl, r4
 800cb32:	e7d2      	b.n	800cada <_vfiprintf_r+0xc6>
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	1d19      	adds	r1, r3, #4
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	9103      	str	r1, [sp, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	bfbb      	ittet	lt
 800cb40:	425b      	neglt	r3, r3
 800cb42:	f042 0202 	orrlt.w	r2, r2, #2
 800cb46:	9307      	strge	r3, [sp, #28]
 800cb48:	9307      	strlt	r3, [sp, #28]
 800cb4a:	bfb8      	it	lt
 800cb4c:	9204      	strlt	r2, [sp, #16]
 800cb4e:	7823      	ldrb	r3, [r4, #0]
 800cb50:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb52:	d10a      	bne.n	800cb6a <_vfiprintf_r+0x156>
 800cb54:	7863      	ldrb	r3, [r4, #1]
 800cb56:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb58:	d132      	bne.n	800cbc0 <_vfiprintf_r+0x1ac>
 800cb5a:	9b03      	ldr	r3, [sp, #12]
 800cb5c:	1d1a      	adds	r2, r3, #4
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	9203      	str	r2, [sp, #12]
 800cb62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb66:	3402      	adds	r4, #2
 800cb68:	9305      	str	r3, [sp, #20]
 800cb6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc40 <_vfiprintf_r+0x22c>
 800cb6e:	7821      	ldrb	r1, [r4, #0]
 800cb70:	2203      	movs	r2, #3
 800cb72:	4650      	mov	r0, sl
 800cb74:	f7f3 fb34 	bl	80001e0 <memchr>
 800cb78:	b138      	cbz	r0, 800cb8a <_vfiprintf_r+0x176>
 800cb7a:	9b04      	ldr	r3, [sp, #16]
 800cb7c:	eba0 000a 	sub.w	r0, r0, sl
 800cb80:	2240      	movs	r2, #64	@ 0x40
 800cb82:	4082      	lsls	r2, r0
 800cb84:	4313      	orrs	r3, r2
 800cb86:	3401      	adds	r4, #1
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb8e:	4829      	ldr	r0, [pc, #164]	@ (800cc34 <_vfiprintf_r+0x220>)
 800cb90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb94:	2206      	movs	r2, #6
 800cb96:	f7f3 fb23 	bl	80001e0 <memchr>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d03f      	beq.n	800cc1e <_vfiprintf_r+0x20a>
 800cb9e:	4b26      	ldr	r3, [pc, #152]	@ (800cc38 <_vfiprintf_r+0x224>)
 800cba0:	bb1b      	cbnz	r3, 800cbea <_vfiprintf_r+0x1d6>
 800cba2:	9b03      	ldr	r3, [sp, #12]
 800cba4:	3307      	adds	r3, #7
 800cba6:	f023 0307 	bic.w	r3, r3, #7
 800cbaa:	3308      	adds	r3, #8
 800cbac:	9303      	str	r3, [sp, #12]
 800cbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb0:	443b      	add	r3, r7
 800cbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbb4:	e76a      	b.n	800ca8c <_vfiprintf_r+0x78>
 800cbb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbba:	460c      	mov	r4, r1
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	e7a8      	b.n	800cb12 <_vfiprintf_r+0xfe>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	3401      	adds	r4, #1
 800cbc4:	9305      	str	r3, [sp, #20]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	f04f 0c0a 	mov.w	ip, #10
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbd2:	3a30      	subs	r2, #48	@ 0x30
 800cbd4:	2a09      	cmp	r2, #9
 800cbd6:	d903      	bls.n	800cbe0 <_vfiprintf_r+0x1cc>
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d0c6      	beq.n	800cb6a <_vfiprintf_r+0x156>
 800cbdc:	9105      	str	r1, [sp, #20]
 800cbde:	e7c4      	b.n	800cb6a <_vfiprintf_r+0x156>
 800cbe0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e7f0      	b.n	800cbcc <_vfiprintf_r+0x1b8>
 800cbea:	ab03      	add	r3, sp, #12
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	462a      	mov	r2, r5
 800cbf0:	4b12      	ldr	r3, [pc, #72]	@ (800cc3c <_vfiprintf_r+0x228>)
 800cbf2:	a904      	add	r1, sp, #16
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f7fd fc95 	bl	800a524 <_printf_float>
 800cbfa:	4607      	mov	r7, r0
 800cbfc:	1c78      	adds	r0, r7, #1
 800cbfe:	d1d6      	bne.n	800cbae <_vfiprintf_r+0x19a>
 800cc00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc02:	07d9      	lsls	r1, r3, #31
 800cc04:	d405      	bmi.n	800cc12 <_vfiprintf_r+0x1fe>
 800cc06:	89ab      	ldrh	r3, [r5, #12]
 800cc08:	059a      	lsls	r2, r3, #22
 800cc0a:	d402      	bmi.n	800cc12 <_vfiprintf_r+0x1fe>
 800cc0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc0e:	f7fe fb4f 	bl	800b2b0 <__retarget_lock_release_recursive>
 800cc12:	89ab      	ldrh	r3, [r5, #12]
 800cc14:	065b      	lsls	r3, r3, #25
 800cc16:	f53f af1f 	bmi.w	800ca58 <_vfiprintf_r+0x44>
 800cc1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc1c:	e71e      	b.n	800ca5c <_vfiprintf_r+0x48>
 800cc1e:	ab03      	add	r3, sp, #12
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	462a      	mov	r2, r5
 800cc24:	4b05      	ldr	r3, [pc, #20]	@ (800cc3c <_vfiprintf_r+0x228>)
 800cc26:	a904      	add	r1, sp, #16
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7fd ff13 	bl	800aa54 <_printf_i>
 800cc2e:	e7e4      	b.n	800cbfa <_vfiprintf_r+0x1e6>
 800cc30:	0800de28 	.word	0x0800de28
 800cc34:	0800de32 	.word	0x0800de32
 800cc38:	0800a525 	.word	0x0800a525
 800cc3c:	0800c9ef 	.word	0x0800c9ef
 800cc40:	0800de2e 	.word	0x0800de2e

0800cc44 <__sflush_r>:
 800cc44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4c:	0716      	lsls	r6, r2, #28
 800cc4e:	4605      	mov	r5, r0
 800cc50:	460c      	mov	r4, r1
 800cc52:	d454      	bmi.n	800ccfe <__sflush_r+0xba>
 800cc54:	684b      	ldr	r3, [r1, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	dc02      	bgt.n	800cc60 <__sflush_r+0x1c>
 800cc5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	dd48      	ble.n	800ccf2 <__sflush_r+0xae>
 800cc60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc62:	2e00      	cmp	r6, #0
 800cc64:	d045      	beq.n	800ccf2 <__sflush_r+0xae>
 800cc66:	2300      	movs	r3, #0
 800cc68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc6c:	682f      	ldr	r7, [r5, #0]
 800cc6e:	6a21      	ldr	r1, [r4, #32]
 800cc70:	602b      	str	r3, [r5, #0]
 800cc72:	d030      	beq.n	800ccd6 <__sflush_r+0x92>
 800cc74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc76:	89a3      	ldrh	r3, [r4, #12]
 800cc78:	0759      	lsls	r1, r3, #29
 800cc7a:	d505      	bpl.n	800cc88 <__sflush_r+0x44>
 800cc7c:	6863      	ldr	r3, [r4, #4]
 800cc7e:	1ad2      	subs	r2, r2, r3
 800cc80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc82:	b10b      	cbz	r3, 800cc88 <__sflush_r+0x44>
 800cc84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc86:	1ad2      	subs	r2, r2, r3
 800cc88:	2300      	movs	r3, #0
 800cc8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc8c:	6a21      	ldr	r1, [r4, #32]
 800cc8e:	4628      	mov	r0, r5
 800cc90:	47b0      	blx	r6
 800cc92:	1c43      	adds	r3, r0, #1
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	d106      	bne.n	800cca6 <__sflush_r+0x62>
 800cc98:	6829      	ldr	r1, [r5, #0]
 800cc9a:	291d      	cmp	r1, #29
 800cc9c:	d82b      	bhi.n	800ccf6 <__sflush_r+0xb2>
 800cc9e:	4a2a      	ldr	r2, [pc, #168]	@ (800cd48 <__sflush_r+0x104>)
 800cca0:	410a      	asrs	r2, r1
 800cca2:	07d6      	lsls	r6, r2, #31
 800cca4:	d427      	bmi.n	800ccf6 <__sflush_r+0xb2>
 800cca6:	2200      	movs	r2, #0
 800cca8:	6062      	str	r2, [r4, #4]
 800ccaa:	04d9      	lsls	r1, r3, #19
 800ccac:	6922      	ldr	r2, [r4, #16]
 800ccae:	6022      	str	r2, [r4, #0]
 800ccb0:	d504      	bpl.n	800ccbc <__sflush_r+0x78>
 800ccb2:	1c42      	adds	r2, r0, #1
 800ccb4:	d101      	bne.n	800ccba <__sflush_r+0x76>
 800ccb6:	682b      	ldr	r3, [r5, #0]
 800ccb8:	b903      	cbnz	r3, 800ccbc <__sflush_r+0x78>
 800ccba:	6560      	str	r0, [r4, #84]	@ 0x54
 800ccbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccbe:	602f      	str	r7, [r5, #0]
 800ccc0:	b1b9      	cbz	r1, 800ccf2 <__sflush_r+0xae>
 800ccc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccc6:	4299      	cmp	r1, r3
 800ccc8:	d002      	beq.n	800ccd0 <__sflush_r+0x8c>
 800ccca:	4628      	mov	r0, r5
 800cccc:	f7ff f94c 	bl	800bf68 <_free_r>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccd4:	e00d      	b.n	800ccf2 <__sflush_r+0xae>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	4628      	mov	r0, r5
 800ccda:	47b0      	blx	r6
 800ccdc:	4602      	mov	r2, r0
 800ccde:	1c50      	adds	r0, r2, #1
 800cce0:	d1c9      	bne.n	800cc76 <__sflush_r+0x32>
 800cce2:	682b      	ldr	r3, [r5, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d0c6      	beq.n	800cc76 <__sflush_r+0x32>
 800cce8:	2b1d      	cmp	r3, #29
 800ccea:	d001      	beq.n	800ccf0 <__sflush_r+0xac>
 800ccec:	2b16      	cmp	r3, #22
 800ccee:	d11e      	bne.n	800cd2e <__sflush_r+0xea>
 800ccf0:	602f      	str	r7, [r5, #0]
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	e022      	b.n	800cd3c <__sflush_r+0xf8>
 800ccf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccfa:	b21b      	sxth	r3, r3
 800ccfc:	e01b      	b.n	800cd36 <__sflush_r+0xf2>
 800ccfe:	690f      	ldr	r7, [r1, #16]
 800cd00:	2f00      	cmp	r7, #0
 800cd02:	d0f6      	beq.n	800ccf2 <__sflush_r+0xae>
 800cd04:	0793      	lsls	r3, r2, #30
 800cd06:	680e      	ldr	r6, [r1, #0]
 800cd08:	bf08      	it	eq
 800cd0a:	694b      	ldreq	r3, [r1, #20]
 800cd0c:	600f      	str	r7, [r1, #0]
 800cd0e:	bf18      	it	ne
 800cd10:	2300      	movne	r3, #0
 800cd12:	eba6 0807 	sub.w	r8, r6, r7
 800cd16:	608b      	str	r3, [r1, #8]
 800cd18:	f1b8 0f00 	cmp.w	r8, #0
 800cd1c:	dde9      	ble.n	800ccf2 <__sflush_r+0xae>
 800cd1e:	6a21      	ldr	r1, [r4, #32]
 800cd20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd22:	4643      	mov	r3, r8
 800cd24:	463a      	mov	r2, r7
 800cd26:	4628      	mov	r0, r5
 800cd28:	47b0      	blx	r6
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	dc08      	bgt.n	800cd40 <__sflush_r+0xfc>
 800cd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd36:	81a3      	strh	r3, [r4, #12]
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd40:	4407      	add	r7, r0
 800cd42:	eba8 0800 	sub.w	r8, r8, r0
 800cd46:	e7e7      	b.n	800cd18 <__sflush_r+0xd4>
 800cd48:	dfbffffe 	.word	0xdfbffffe

0800cd4c <_fflush_r>:
 800cd4c:	b538      	push	{r3, r4, r5, lr}
 800cd4e:	690b      	ldr	r3, [r1, #16]
 800cd50:	4605      	mov	r5, r0
 800cd52:	460c      	mov	r4, r1
 800cd54:	b913      	cbnz	r3, 800cd5c <_fflush_r+0x10>
 800cd56:	2500      	movs	r5, #0
 800cd58:	4628      	mov	r0, r5
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	b118      	cbz	r0, 800cd66 <_fflush_r+0x1a>
 800cd5e:	6a03      	ldr	r3, [r0, #32]
 800cd60:	b90b      	cbnz	r3, 800cd66 <_fflush_r+0x1a>
 800cd62:	f7fe f823 	bl	800adac <__sinit>
 800cd66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0f3      	beq.n	800cd56 <_fflush_r+0xa>
 800cd6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd70:	07d0      	lsls	r0, r2, #31
 800cd72:	d404      	bmi.n	800cd7e <_fflush_r+0x32>
 800cd74:	0599      	lsls	r1, r3, #22
 800cd76:	d402      	bmi.n	800cd7e <_fflush_r+0x32>
 800cd78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd7a:	f7fe fa98 	bl	800b2ae <__retarget_lock_acquire_recursive>
 800cd7e:	4628      	mov	r0, r5
 800cd80:	4621      	mov	r1, r4
 800cd82:	f7ff ff5f 	bl	800cc44 <__sflush_r>
 800cd86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd88:	07da      	lsls	r2, r3, #31
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	d4e4      	bmi.n	800cd58 <_fflush_r+0xc>
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	059b      	lsls	r3, r3, #22
 800cd92:	d4e1      	bmi.n	800cd58 <_fflush_r+0xc>
 800cd94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd96:	f7fe fa8b 	bl	800b2b0 <__retarget_lock_release_recursive>
 800cd9a:	e7dd      	b.n	800cd58 <_fflush_r+0xc>

0800cd9c <__swhatbuf_r>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	460c      	mov	r4, r1
 800cda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda4:	2900      	cmp	r1, #0
 800cda6:	b096      	sub	sp, #88	@ 0x58
 800cda8:	4615      	mov	r5, r2
 800cdaa:	461e      	mov	r6, r3
 800cdac:	da0d      	bge.n	800cdca <__swhatbuf_r+0x2e>
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cdb4:	f04f 0100 	mov.w	r1, #0
 800cdb8:	bf14      	ite	ne
 800cdba:	2340      	movne	r3, #64	@ 0x40
 800cdbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	6031      	str	r1, [r6, #0]
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	b016      	add	sp, #88	@ 0x58
 800cdc8:	bd70      	pop	{r4, r5, r6, pc}
 800cdca:	466a      	mov	r2, sp
 800cdcc:	f000 f862 	bl	800ce94 <_fstat_r>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	dbec      	blt.n	800cdae <__swhatbuf_r+0x12>
 800cdd4:	9901      	ldr	r1, [sp, #4]
 800cdd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cdde:	4259      	negs	r1, r3
 800cde0:	4159      	adcs	r1, r3
 800cde2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cde6:	e7eb      	b.n	800cdc0 <__swhatbuf_r+0x24>

0800cde8 <__smakebuf_r>:
 800cde8:	898b      	ldrh	r3, [r1, #12]
 800cdea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdec:	079d      	lsls	r5, r3, #30
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	d507      	bpl.n	800ce04 <__smakebuf_r+0x1c>
 800cdf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	6123      	str	r3, [r4, #16]
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	6163      	str	r3, [r4, #20]
 800ce00:	b003      	add	sp, #12
 800ce02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce04:	ab01      	add	r3, sp, #4
 800ce06:	466a      	mov	r2, sp
 800ce08:	f7ff ffc8 	bl	800cd9c <__swhatbuf_r>
 800ce0c:	9f00      	ldr	r7, [sp, #0]
 800ce0e:	4605      	mov	r5, r0
 800ce10:	4639      	mov	r1, r7
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7fd fa2c 	bl	800a270 <_malloc_r>
 800ce18:	b948      	cbnz	r0, 800ce2e <__smakebuf_r+0x46>
 800ce1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1e:	059a      	lsls	r2, r3, #22
 800ce20:	d4ee      	bmi.n	800ce00 <__smakebuf_r+0x18>
 800ce22:	f023 0303 	bic.w	r3, r3, #3
 800ce26:	f043 0302 	orr.w	r3, r3, #2
 800ce2a:	81a3      	strh	r3, [r4, #12]
 800ce2c:	e7e2      	b.n	800cdf4 <__smakebuf_r+0xc>
 800ce2e:	89a3      	ldrh	r3, [r4, #12]
 800ce30:	6020      	str	r0, [r4, #0]
 800ce32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce36:	81a3      	strh	r3, [r4, #12]
 800ce38:	9b01      	ldr	r3, [sp, #4]
 800ce3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce3e:	b15b      	cbz	r3, 800ce58 <__smakebuf_r+0x70>
 800ce40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce44:	4630      	mov	r0, r6
 800ce46:	f000 f837 	bl	800ceb8 <_isatty_r>
 800ce4a:	b128      	cbz	r0, 800ce58 <__smakebuf_r+0x70>
 800ce4c:	89a3      	ldrh	r3, [r4, #12]
 800ce4e:	f023 0303 	bic.w	r3, r3, #3
 800ce52:	f043 0301 	orr.w	r3, r3, #1
 800ce56:	81a3      	strh	r3, [r4, #12]
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	431d      	orrs	r5, r3
 800ce5c:	81a5      	strh	r5, [r4, #12]
 800ce5e:	e7cf      	b.n	800ce00 <__smakebuf_r+0x18>

0800ce60 <memmove>:
 800ce60:	4288      	cmp	r0, r1
 800ce62:	b510      	push	{r4, lr}
 800ce64:	eb01 0402 	add.w	r4, r1, r2
 800ce68:	d902      	bls.n	800ce70 <memmove+0x10>
 800ce6a:	4284      	cmp	r4, r0
 800ce6c:	4623      	mov	r3, r4
 800ce6e:	d807      	bhi.n	800ce80 <memmove+0x20>
 800ce70:	1e43      	subs	r3, r0, #1
 800ce72:	42a1      	cmp	r1, r4
 800ce74:	d008      	beq.n	800ce88 <memmove+0x28>
 800ce76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce7e:	e7f8      	b.n	800ce72 <memmove+0x12>
 800ce80:	4402      	add	r2, r0
 800ce82:	4601      	mov	r1, r0
 800ce84:	428a      	cmp	r2, r1
 800ce86:	d100      	bne.n	800ce8a <memmove+0x2a>
 800ce88:	bd10      	pop	{r4, pc}
 800ce8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce92:	e7f7      	b.n	800ce84 <memmove+0x24>

0800ce94 <_fstat_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4d07      	ldr	r5, [pc, #28]	@ (800ceb4 <_fstat_r+0x20>)
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	4611      	mov	r1, r2
 800cea0:	602b      	str	r3, [r5, #0]
 800cea2:	f000 fa71 	bl	800d388 <_fstat>
 800cea6:	1c43      	adds	r3, r0, #1
 800cea8:	d102      	bne.n	800ceb0 <_fstat_r+0x1c>
 800ceaa:	682b      	ldr	r3, [r5, #0]
 800ceac:	b103      	cbz	r3, 800ceb0 <_fstat_r+0x1c>
 800ceae:	6023      	str	r3, [r4, #0]
 800ceb0:	bd38      	pop	{r3, r4, r5, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20004dac 	.word	0x20004dac

0800ceb8 <_isatty_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d06      	ldr	r5, [pc, #24]	@ (800ced4 <_isatty_r+0x1c>)
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	602b      	str	r3, [r5, #0]
 800cec4:	f000 fa70 	bl	800d3a8 <_isatty>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_isatty_r+0x1a>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_isatty_r+0x1a>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	20004dac 	.word	0x20004dac

0800ced8 <__assert_func>:
 800ced8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceda:	4614      	mov	r4, r2
 800cedc:	461a      	mov	r2, r3
 800cede:	4b09      	ldr	r3, [pc, #36]	@ (800cf04 <__assert_func+0x2c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4605      	mov	r5, r0
 800cee4:	68d8      	ldr	r0, [r3, #12]
 800cee6:	b954      	cbnz	r4, 800cefe <__assert_func+0x26>
 800cee8:	4b07      	ldr	r3, [pc, #28]	@ (800cf08 <__assert_func+0x30>)
 800ceea:	461c      	mov	r4, r3
 800ceec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cef0:	9100      	str	r1, [sp, #0]
 800cef2:	462b      	mov	r3, r5
 800cef4:	4905      	ldr	r1, [pc, #20]	@ (800cf0c <__assert_func+0x34>)
 800cef6:	f000 f841 	bl	800cf7c <fiprintf>
 800cefa:	f000 f851 	bl	800cfa0 <abort>
 800cefe:	4b04      	ldr	r3, [pc, #16]	@ (800cf10 <__assert_func+0x38>)
 800cf00:	e7f4      	b.n	800ceec <__assert_func+0x14>
 800cf02:	bf00      	nop
 800cf04:	20000744 	.word	0x20000744
 800cf08:	0800de7e 	.word	0x0800de7e
 800cf0c:	0800de50 	.word	0x0800de50
 800cf10:	0800de43 	.word	0x0800de43

0800cf14 <_calloc_r>:
 800cf14:	b570      	push	{r4, r5, r6, lr}
 800cf16:	fba1 5402 	umull	r5, r4, r1, r2
 800cf1a:	b93c      	cbnz	r4, 800cf2c <_calloc_r+0x18>
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	f7fd f9a7 	bl	800a270 <_malloc_r>
 800cf22:	4606      	mov	r6, r0
 800cf24:	b928      	cbnz	r0, 800cf32 <_calloc_r+0x1e>
 800cf26:	2600      	movs	r6, #0
 800cf28:	4630      	mov	r0, r6
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
 800cf2c:	220c      	movs	r2, #12
 800cf2e:	6002      	str	r2, [r0, #0]
 800cf30:	e7f9      	b.n	800cf26 <_calloc_r+0x12>
 800cf32:	462a      	mov	r2, r5
 800cf34:	4621      	mov	r1, r4
 800cf36:	f7fe f8d7 	bl	800b0e8 <memset>
 800cf3a:	e7f5      	b.n	800cf28 <_calloc_r+0x14>

0800cf3c <__ascii_mbtowc>:
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	b901      	cbnz	r1, 800cf42 <__ascii_mbtowc+0x6>
 800cf40:	a901      	add	r1, sp, #4
 800cf42:	b142      	cbz	r2, 800cf56 <__ascii_mbtowc+0x1a>
 800cf44:	b14b      	cbz	r3, 800cf5a <__ascii_mbtowc+0x1e>
 800cf46:	7813      	ldrb	r3, [r2, #0]
 800cf48:	600b      	str	r3, [r1, #0]
 800cf4a:	7812      	ldrb	r2, [r2, #0]
 800cf4c:	1e10      	subs	r0, r2, #0
 800cf4e:	bf18      	it	ne
 800cf50:	2001      	movne	r0, #1
 800cf52:	b002      	add	sp, #8
 800cf54:	4770      	bx	lr
 800cf56:	4610      	mov	r0, r2
 800cf58:	e7fb      	b.n	800cf52 <__ascii_mbtowc+0x16>
 800cf5a:	f06f 0001 	mvn.w	r0, #1
 800cf5e:	e7f8      	b.n	800cf52 <__ascii_mbtowc+0x16>

0800cf60 <__ascii_wctomb>:
 800cf60:	4603      	mov	r3, r0
 800cf62:	4608      	mov	r0, r1
 800cf64:	b141      	cbz	r1, 800cf78 <__ascii_wctomb+0x18>
 800cf66:	2aff      	cmp	r2, #255	@ 0xff
 800cf68:	d904      	bls.n	800cf74 <__ascii_wctomb+0x14>
 800cf6a:	228a      	movs	r2, #138	@ 0x8a
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf72:	4770      	bx	lr
 800cf74:	700a      	strb	r2, [r1, #0]
 800cf76:	2001      	movs	r0, #1
 800cf78:	4770      	bx	lr
	...

0800cf7c <fiprintf>:
 800cf7c:	b40e      	push	{r1, r2, r3}
 800cf7e:	b503      	push	{r0, r1, lr}
 800cf80:	4601      	mov	r1, r0
 800cf82:	ab03      	add	r3, sp, #12
 800cf84:	4805      	ldr	r0, [pc, #20]	@ (800cf9c <fiprintf+0x20>)
 800cf86:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf8a:	6800      	ldr	r0, [r0, #0]
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	f7ff fd41 	bl	800ca14 <_vfiprintf_r>
 800cf92:	b002      	add	sp, #8
 800cf94:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf98:	b003      	add	sp, #12
 800cf9a:	4770      	bx	lr
 800cf9c:	20000744 	.word	0x20000744

0800cfa0 <abort>:
 800cfa0:	b508      	push	{r3, lr}
 800cfa2:	2006      	movs	r0, #6
 800cfa4:	f000 f82c 	bl	800d000 <raise>
 800cfa8:	2001      	movs	r0, #1
 800cfaa:	f000 fa1d 	bl	800d3e8 <_exit>

0800cfae <_raise_r>:
 800cfae:	291f      	cmp	r1, #31
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	d904      	bls.n	800cfc2 <_raise_r+0x14>
 800cfb8:	2316      	movs	r3, #22
 800cfba:	6003      	str	r3, [r0, #0]
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc0:	bd38      	pop	{r3, r4, r5, pc}
 800cfc2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfc4:	b112      	cbz	r2, 800cfcc <_raise_r+0x1e>
 800cfc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfca:	b94b      	cbnz	r3, 800cfe0 <_raise_r+0x32>
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f000 f831 	bl	800d034 <_getpid_r>
 800cfd2:	4622      	mov	r2, r4
 800cfd4:	4601      	mov	r1, r0
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfdc:	f000 b818 	b.w	800d010 <_kill_r>
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d00a      	beq.n	800cffa <_raise_r+0x4c>
 800cfe4:	1c59      	adds	r1, r3, #1
 800cfe6:	d103      	bne.n	800cff0 <_raise_r+0x42>
 800cfe8:	2316      	movs	r3, #22
 800cfea:	6003      	str	r3, [r0, #0]
 800cfec:	2001      	movs	r0, #1
 800cfee:	e7e7      	b.n	800cfc0 <_raise_r+0x12>
 800cff0:	2100      	movs	r1, #0
 800cff2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cff6:	4620      	mov	r0, r4
 800cff8:	4798      	blx	r3
 800cffa:	2000      	movs	r0, #0
 800cffc:	e7e0      	b.n	800cfc0 <_raise_r+0x12>
	...

0800d000 <raise>:
 800d000:	4b02      	ldr	r3, [pc, #8]	@ (800d00c <raise+0xc>)
 800d002:	4601      	mov	r1, r0
 800d004:	6818      	ldr	r0, [r3, #0]
 800d006:	f7ff bfd2 	b.w	800cfae <_raise_r>
 800d00a:	bf00      	nop
 800d00c:	20000744 	.word	0x20000744

0800d010 <_kill_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d07      	ldr	r5, [pc, #28]	@ (800d030 <_kill_r+0x20>)
 800d014:	2300      	movs	r3, #0
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	4611      	mov	r1, r2
 800d01c:	602b      	str	r3, [r5, #0]
 800d01e:	f000 f9cb 	bl	800d3b8 <_kill>
 800d022:	1c43      	adds	r3, r0, #1
 800d024:	d102      	bne.n	800d02c <_kill_r+0x1c>
 800d026:	682b      	ldr	r3, [r5, #0]
 800d028:	b103      	cbz	r3, 800d02c <_kill_r+0x1c>
 800d02a:	6023      	str	r3, [r4, #0]
 800d02c:	bd38      	pop	{r3, r4, r5, pc}
 800d02e:	bf00      	nop
 800d030:	20004dac 	.word	0x20004dac

0800d034 <_getpid_r>:
 800d034:	f000 b9b0 	b.w	800d398 <_getpid>

0800d038 <atan2f>:
 800d038:	f000 b822 	b.w	800d080 <__ieee754_atan2f>

0800d03c <sqrtf>:
 800d03c:	b508      	push	{r3, lr}
 800d03e:	ed2d 8b02 	vpush	{d8}
 800d042:	eeb0 8a40 	vmov.f32	s16, s0
 800d046:	f000 f817 	bl	800d078 <__ieee754_sqrtf>
 800d04a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d052:	d60c      	bvs.n	800d06e <sqrtf+0x32>
 800d054:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d074 <sqrtf+0x38>
 800d058:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d060:	d505      	bpl.n	800d06e <sqrtf+0x32>
 800d062:	f7fe f8f9 	bl	800b258 <__errno>
 800d066:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d06a:	2321      	movs	r3, #33	@ 0x21
 800d06c:	6003      	str	r3, [r0, #0]
 800d06e:	ecbd 8b02 	vpop	{d8}
 800d072:	bd08      	pop	{r3, pc}
 800d074:	00000000 	.word	0x00000000

0800d078 <__ieee754_sqrtf>:
 800d078:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d07c:	4770      	bx	lr
	...

0800d080 <__ieee754_atan2f>:
 800d080:	ee10 2a90 	vmov	r2, s1
 800d084:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d088:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d08c:	b510      	push	{r4, lr}
 800d08e:	eef0 7a40 	vmov.f32	s15, s0
 800d092:	d806      	bhi.n	800d0a2 <__ieee754_atan2f+0x22>
 800d094:	ee10 0a10 	vmov	r0, s0
 800d098:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d09c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d0a0:	d904      	bls.n	800d0ac <__ieee754_atan2f+0x2c>
 800d0a2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d0a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d0aa:	bd10      	pop	{r4, pc}
 800d0ac:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d0b0:	d103      	bne.n	800d0ba <__ieee754_atan2f+0x3a>
 800d0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0b6:	f000 b883 	b.w	800d1c0 <atanf>
 800d0ba:	1794      	asrs	r4, r2, #30
 800d0bc:	f004 0402 	and.w	r4, r4, #2
 800d0c0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d0c4:	b943      	cbnz	r3, 800d0d8 <__ieee754_atan2f+0x58>
 800d0c6:	2c02      	cmp	r4, #2
 800d0c8:	d05e      	beq.n	800d188 <__ieee754_atan2f+0x108>
 800d0ca:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d19c <__ieee754_atan2f+0x11c>
 800d0ce:	2c03      	cmp	r4, #3
 800d0d0:	bf08      	it	eq
 800d0d2:	eef0 7a47 	vmoveq.f32	s15, s14
 800d0d6:	e7e6      	b.n	800d0a6 <__ieee754_atan2f+0x26>
 800d0d8:	b941      	cbnz	r1, 800d0ec <__ieee754_atan2f+0x6c>
 800d0da:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800d1a0 <__ieee754_atan2f+0x120>
 800d0de:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d1a4 <__ieee754_atan2f+0x124>
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	bfb8      	it	lt
 800d0e6:	eef0 7a47 	vmovlt.f32	s15, s14
 800d0ea:	e7dc      	b.n	800d0a6 <__ieee754_atan2f+0x26>
 800d0ec:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d0f0:	d110      	bne.n	800d114 <__ieee754_atan2f+0x94>
 800d0f2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d0f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800d0fa:	d107      	bne.n	800d10c <__ieee754_atan2f+0x8c>
 800d0fc:	2c02      	cmp	r4, #2
 800d0fe:	d846      	bhi.n	800d18e <__ieee754_atan2f+0x10e>
 800d100:	4b29      	ldr	r3, [pc, #164]	@ (800d1a8 <__ieee754_atan2f+0x128>)
 800d102:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d106:	edd3 7a00 	vldr	s15, [r3]
 800d10a:	e7cc      	b.n	800d0a6 <__ieee754_atan2f+0x26>
 800d10c:	2c02      	cmp	r4, #2
 800d10e:	d841      	bhi.n	800d194 <__ieee754_atan2f+0x114>
 800d110:	4b26      	ldr	r3, [pc, #152]	@ (800d1ac <__ieee754_atan2f+0x12c>)
 800d112:	e7f6      	b.n	800d102 <__ieee754_atan2f+0x82>
 800d114:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d118:	d0df      	beq.n	800d0da <__ieee754_atan2f+0x5a>
 800d11a:	1a5b      	subs	r3, r3, r1
 800d11c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d120:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d124:	da1a      	bge.n	800d15c <__ieee754_atan2f+0xdc>
 800d126:	2a00      	cmp	r2, #0
 800d128:	da01      	bge.n	800d12e <__ieee754_atan2f+0xae>
 800d12a:	313c      	adds	r1, #60	@ 0x3c
 800d12c:	db19      	blt.n	800d162 <__ieee754_atan2f+0xe2>
 800d12e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d132:	f000 f919 	bl	800d368 <fabsf>
 800d136:	f000 f843 	bl	800d1c0 <atanf>
 800d13a:	eef0 7a40 	vmov.f32	s15, s0
 800d13e:	2c01      	cmp	r4, #1
 800d140:	d012      	beq.n	800d168 <__ieee754_atan2f+0xe8>
 800d142:	2c02      	cmp	r4, #2
 800d144:	d017      	beq.n	800d176 <__ieee754_atan2f+0xf6>
 800d146:	2c00      	cmp	r4, #0
 800d148:	d0ad      	beq.n	800d0a6 <__ieee754_atan2f+0x26>
 800d14a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d1b0 <__ieee754_atan2f+0x130>
 800d14e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d152:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d1b4 <__ieee754_atan2f+0x134>
 800d156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d15a:	e7a4      	b.n	800d0a6 <__ieee754_atan2f+0x26>
 800d15c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d1a0 <__ieee754_atan2f+0x120>
 800d160:	e7ed      	b.n	800d13e <__ieee754_atan2f+0xbe>
 800d162:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d1b8 <__ieee754_atan2f+0x138>
 800d166:	e7ea      	b.n	800d13e <__ieee754_atan2f+0xbe>
 800d168:	ee17 3a90 	vmov	r3, s15
 800d16c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d170:	ee07 3a90 	vmov	s15, r3
 800d174:	e797      	b.n	800d0a6 <__ieee754_atan2f+0x26>
 800d176:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d1b0 <__ieee754_atan2f+0x130>
 800d17a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d17e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d1b4 <__ieee754_atan2f+0x134>
 800d182:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d186:	e78e      	b.n	800d0a6 <__ieee754_atan2f+0x26>
 800d188:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d1b4 <__ieee754_atan2f+0x134>
 800d18c:	e78b      	b.n	800d0a6 <__ieee754_atan2f+0x26>
 800d18e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d1bc <__ieee754_atan2f+0x13c>
 800d192:	e788      	b.n	800d0a6 <__ieee754_atan2f+0x26>
 800d194:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d1b8 <__ieee754_atan2f+0x138>
 800d198:	e785      	b.n	800d0a6 <__ieee754_atan2f+0x26>
 800d19a:	bf00      	nop
 800d19c:	c0490fdb 	.word	0xc0490fdb
 800d1a0:	3fc90fdb 	.word	0x3fc90fdb
 800d1a4:	bfc90fdb 	.word	0xbfc90fdb
 800d1a8:	0800df8c 	.word	0x0800df8c
 800d1ac:	0800df80 	.word	0x0800df80
 800d1b0:	33bbbd2e 	.word	0x33bbbd2e
 800d1b4:	40490fdb 	.word	0x40490fdb
 800d1b8:	00000000 	.word	0x00000000
 800d1bc:	3f490fdb 	.word	0x3f490fdb

0800d1c0 <atanf>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	ee10 5a10 	vmov	r5, s0
 800d1c6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d1ca:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d1ce:	eef0 7a40 	vmov.f32	s15, s0
 800d1d2:	d310      	bcc.n	800d1f6 <atanf+0x36>
 800d1d4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d1d8:	d904      	bls.n	800d1e4 <atanf+0x24>
 800d1da:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d1de:	eeb0 0a67 	vmov.f32	s0, s15
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d31c <atanf+0x15c>
 800d1e8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d320 <atanf+0x160>
 800d1ec:	2d00      	cmp	r5, #0
 800d1ee:	bfc8      	it	gt
 800d1f0:	eef0 7a47 	vmovgt.f32	s15, s14
 800d1f4:	e7f3      	b.n	800d1de <atanf+0x1e>
 800d1f6:	4b4b      	ldr	r3, [pc, #300]	@ (800d324 <atanf+0x164>)
 800d1f8:	429c      	cmp	r4, r3
 800d1fa:	d810      	bhi.n	800d21e <atanf+0x5e>
 800d1fc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d200:	d20a      	bcs.n	800d218 <atanf+0x58>
 800d202:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d328 <atanf+0x168>
 800d206:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d20a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d20e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d216:	dce2      	bgt.n	800d1de <atanf+0x1e>
 800d218:	f04f 33ff 	mov.w	r3, #4294967295
 800d21c:	e013      	b.n	800d246 <atanf+0x86>
 800d21e:	f000 f8a3 	bl	800d368 <fabsf>
 800d222:	4b42      	ldr	r3, [pc, #264]	@ (800d32c <atanf+0x16c>)
 800d224:	429c      	cmp	r4, r3
 800d226:	d84f      	bhi.n	800d2c8 <atanf+0x108>
 800d228:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d22c:	429c      	cmp	r4, r3
 800d22e:	d841      	bhi.n	800d2b4 <atanf+0xf4>
 800d230:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d234:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d238:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d23c:	2300      	movs	r3, #0
 800d23e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d242:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d246:	1c5a      	adds	r2, r3, #1
 800d248:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d24c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d330 <atanf+0x170>
 800d250:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d334 <atanf+0x174>
 800d254:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d338 <atanf+0x178>
 800d258:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d25c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d260:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d33c <atanf+0x17c>
 800d264:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d268:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d340 <atanf+0x180>
 800d26c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d270:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d344 <atanf+0x184>
 800d274:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d278:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d348 <atanf+0x188>
 800d27c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d280:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d34c <atanf+0x18c>
 800d284:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d288:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d350 <atanf+0x190>
 800d28c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d290:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d354 <atanf+0x194>
 800d294:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d298:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d358 <atanf+0x198>
 800d29c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d2a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d2a4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d2a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d2ac:	d121      	bne.n	800d2f2 <atanf+0x132>
 800d2ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2b2:	e794      	b.n	800d1de <atanf+0x1e>
 800d2b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d2b8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d2bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d2c6:	e7be      	b.n	800d246 <atanf+0x86>
 800d2c8:	4b24      	ldr	r3, [pc, #144]	@ (800d35c <atanf+0x19c>)
 800d2ca:	429c      	cmp	r4, r3
 800d2cc:	d80b      	bhi.n	800d2e6 <atanf+0x126>
 800d2ce:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d2d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2d6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d2da:	2302      	movs	r3, #2
 800d2dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d2e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2e4:	e7af      	b.n	800d246 <atanf+0x86>
 800d2e6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d2ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e7a9      	b.n	800d246 <atanf+0x86>
 800d2f2:	4a1b      	ldr	r2, [pc, #108]	@ (800d360 <atanf+0x1a0>)
 800d2f4:	491b      	ldr	r1, [pc, #108]	@ (800d364 <atanf+0x1a4>)
 800d2f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d2fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d2fe:	edd3 6a00 	vldr	s13, [r3]
 800d302:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d306:	2d00      	cmp	r5, #0
 800d308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d30c:	edd2 7a00 	vldr	s15, [r2]
 800d310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d314:	bfb8      	it	lt
 800d316:	eef1 7a67 	vneglt.f32	s15, s15
 800d31a:	e760      	b.n	800d1de <atanf+0x1e>
 800d31c:	bfc90fdb 	.word	0xbfc90fdb
 800d320:	3fc90fdb 	.word	0x3fc90fdb
 800d324:	3edfffff 	.word	0x3edfffff
 800d328:	7149f2ca 	.word	0x7149f2ca
 800d32c:	3f97ffff 	.word	0x3f97ffff
 800d330:	3c8569d7 	.word	0x3c8569d7
 800d334:	3d4bda59 	.word	0x3d4bda59
 800d338:	bd6ef16b 	.word	0xbd6ef16b
 800d33c:	3d886b35 	.word	0x3d886b35
 800d340:	3dba2e6e 	.word	0x3dba2e6e
 800d344:	3e124925 	.word	0x3e124925
 800d348:	3eaaaaab 	.word	0x3eaaaaab
 800d34c:	bd15a221 	.word	0xbd15a221
 800d350:	bd9d8795 	.word	0xbd9d8795
 800d354:	bde38e38 	.word	0xbde38e38
 800d358:	be4ccccd 	.word	0xbe4ccccd
 800d35c:	401bffff 	.word	0x401bffff
 800d360:	0800dfa8 	.word	0x0800dfa8
 800d364:	0800df98 	.word	0x0800df98

0800d368 <fabsf>:
 800d368:	ee10 3a10 	vmov	r3, s0
 800d36c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d370:	ee00 3a10 	vmov	s0, r3
 800d374:	4770      	bx	lr
	...

0800d378 <_close>:
 800d378:	4b02      	ldr	r3, [pc, #8]	@ (800d384 <_close+0xc>)
 800d37a:	2258      	movs	r2, #88	@ 0x58
 800d37c:	601a      	str	r2, [r3, #0]
 800d37e:	f04f 30ff 	mov.w	r0, #4294967295
 800d382:	4770      	bx	lr
 800d384:	20004dac 	.word	0x20004dac

0800d388 <_fstat>:
 800d388:	4b02      	ldr	r3, [pc, #8]	@ (800d394 <_fstat+0xc>)
 800d38a:	2258      	movs	r2, #88	@ 0x58
 800d38c:	601a      	str	r2, [r3, #0]
 800d38e:	f04f 30ff 	mov.w	r0, #4294967295
 800d392:	4770      	bx	lr
 800d394:	20004dac 	.word	0x20004dac

0800d398 <_getpid>:
 800d398:	4b02      	ldr	r3, [pc, #8]	@ (800d3a4 <_getpid+0xc>)
 800d39a:	2258      	movs	r2, #88	@ 0x58
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a2:	4770      	bx	lr
 800d3a4:	20004dac 	.word	0x20004dac

0800d3a8 <_isatty>:
 800d3a8:	4b02      	ldr	r3, [pc, #8]	@ (800d3b4 <_isatty+0xc>)
 800d3aa:	2258      	movs	r2, #88	@ 0x58
 800d3ac:	601a      	str	r2, [r3, #0]
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	20004dac 	.word	0x20004dac

0800d3b8 <_kill>:
 800d3b8:	4b02      	ldr	r3, [pc, #8]	@ (800d3c4 <_kill+0xc>)
 800d3ba:	2258      	movs	r2, #88	@ 0x58
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c2:	4770      	bx	lr
 800d3c4:	20004dac 	.word	0x20004dac

0800d3c8 <_lseek>:
 800d3c8:	4b02      	ldr	r3, [pc, #8]	@ (800d3d4 <_lseek+0xc>)
 800d3ca:	2258      	movs	r2, #88	@ 0x58
 800d3cc:	601a      	str	r2, [r3, #0]
 800d3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d2:	4770      	bx	lr
 800d3d4:	20004dac 	.word	0x20004dac

0800d3d8 <_read>:
 800d3d8:	4b02      	ldr	r3, [pc, #8]	@ (800d3e4 <_read+0xc>)
 800d3da:	2258      	movs	r2, #88	@ 0x58
 800d3dc:	601a      	str	r2, [r3, #0]
 800d3de:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e2:	4770      	bx	lr
 800d3e4:	20004dac 	.word	0x20004dac

0800d3e8 <_exit>:
 800d3e8:	e7fe      	b.n	800d3e8 <_exit>
	...

0800d3ec <_init>:
 800d3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ee:	bf00      	nop
 800d3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3f2:	bc08      	pop	{r3}
 800d3f4:	469e      	mov	lr, r3
 800d3f6:	4770      	bx	lr

0800d3f8 <_fini>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	bf00      	nop
 800d3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3fe:	bc08      	pop	{r3}
 800d400:	469e      	mov	lr, r3
 800d402:	4770      	bx	lr
