
CubeAI_GestureRecognition_MPU9250_AHRS_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005ffc  08005ffc  00006ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b4  080060b4  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080060b4  080060b4  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060bc  080060bc  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060bc  080060bc  000070bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080060c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a4  20000064  08006128  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004308  08006128  00008308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170a6  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333e  00000000  00000000  0001f13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00022478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f42  00000000  00000000  00023810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a60  00000000  00000000  00024752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016763  00000000  00000000  0003d1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009978d  00000000  00000000  00053915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed0a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005738  00000000  00000000  000ed0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bf  00000000  00000000  000f2820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fe4 	.word	0x08005fe4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08005fe4 	.word	0x08005fe4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b96a 	b.w	8000d08 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9d08      	ldr	r5, [sp, #32]
 8000a52:	460c      	mov	r4, r1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d14e      	bne.n	8000af6 <__udivmoddi4+0xaa>
 8000a58:	4694      	mov	ip, r2
 8000a5a:	458c      	cmp	ip, r1
 8000a5c:	4686      	mov	lr, r0
 8000a5e:	fab2 f282 	clz	r2, r2
 8000a62:	d962      	bls.n	8000b2a <__udivmoddi4+0xde>
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0320 	rsb	r3, r2, #32
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	4319      	orrs	r1, r3
 8000a76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7e:	fa1f f68c 	uxth.w	r6, ip
 8000a82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a92:	fb04 f106 	mul.w	r1, r4, r6
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x64>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aa2:	f080 8112 	bcs.w	8000cca <__udivmoddi4+0x27e>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 810f 	bls.w	8000cca <__udivmoddi4+0x27e>
 8000aac:	3c02      	subs	r4, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a59      	subs	r1, r3, r1
 8000ab2:	fa1f f38e 	uxth.w	r3, lr
 8000ab6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aba:	fb07 1110 	mls	r1, r7, r0, r1
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac2:	fb00 f606 	mul.w	r6, r0, r6
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x94>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ad2:	f080 80fc 	bcs.w	8000cce <__udivmoddi4+0x282>
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	f240 80f9 	bls.w	8000cce <__udivmoddi4+0x282>
 8000adc:	4463      	add	r3, ip
 8000ade:	3802      	subs	r0, #2
 8000ae0:	1b9b      	subs	r3, r3, r6
 8000ae2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	b11d      	cbz	r5, 8000af2 <__udivmoddi4+0xa6>
 8000aea:	40d3      	lsrs	r3, r2
 8000aec:	2200      	movs	r2, #0
 8000aee:	e9c5 3200 	strd	r3, r2, [r5]
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d905      	bls.n	8000b06 <__udivmoddi4+0xba>
 8000afa:	b10d      	cbz	r5, 8000b00 <__udivmoddi4+0xb4>
 8000afc:	e9c5 0100 	strd	r0, r1, [r5]
 8000b00:	2100      	movs	r1, #0
 8000b02:	4608      	mov	r0, r1
 8000b04:	e7f5      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b06:	fab3 f183 	clz	r1, r3
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d146      	bne.n	8000b9c <__udivmoddi4+0x150>
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xcc>
 8000b12:	4290      	cmp	r0, r2
 8000b14:	f0c0 80f0 	bcc.w	8000cf8 <__udivmoddi4+0x2ac>
 8000b18:	1a86      	subs	r6, r0, r2
 8000b1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d0e6      	beq.n	8000af2 <__udivmoddi4+0xa6>
 8000b24:	e9c5 6300 	strd	r6, r3, [r5]
 8000b28:	e7e3      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	f040 8090 	bne.w	8000c50 <__udivmoddi4+0x204>
 8000b30:	eba1 040c 	sub.w	r4, r1, ip
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa1f f78c 	uxth.w	r7, ip
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b46:	fb08 4416 	mls	r4, r8, r6, r4
 8000b4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4e:	fb07 f006 	mul.w	r0, r7, r6
 8000b52:	4298      	cmp	r0, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x11c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x11a>
 8000b60:	4298      	cmp	r0, r3
 8000b62:	f200 80cd 	bhi.w	8000d00 <__udivmoddi4+0x2b4>
 8000b66:	4626      	mov	r6, r4
 8000b68:	1a1c      	subs	r4, r3, r0
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b72:	fb08 4410 	mls	r4, r8, r0, r4
 8000b76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b7a:	fb00 f707 	mul.w	r7, r0, r7
 8000b7e:	429f      	cmp	r7, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x148>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x146>
 8000b8c:	429f      	cmp	r7, r3
 8000b8e:	f200 80b0 	bhi.w	8000cf2 <__udivmoddi4+0x2a6>
 8000b92:	4620      	mov	r0, r4
 8000b94:	1bdb      	subs	r3, r3, r7
 8000b96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9a:	e7a5      	b.n	8000ae8 <__udivmoddi4+0x9c>
 8000b9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ba6:	431f      	orrs	r7, r3
 8000ba8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bac:	fa04 f301 	lsl.w	r3, r4, r1
 8000bb0:	ea43 030c 	orr.w	r3, r3, ip
 8000bb4:	40f4      	lsrs	r4, r6
 8000bb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bba:	0c38      	lsrs	r0, r7, #16
 8000bbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bc4:	fa1f fc87 	uxth.w	ip, r7
 8000bc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bcc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bd4:	45a1      	cmp	r9, r4
 8000bd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x1a6>
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000be2:	f080 8084 	bcs.w	8000cee <__udivmoddi4+0x2a2>
 8000be6:	45a1      	cmp	r9, r4
 8000be8:	f240 8081 	bls.w	8000cee <__udivmoddi4+0x2a2>
 8000bec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	eba4 0409 	sub.w	r4, r4, r9
 8000bf6:	fa1f f983 	uxth.w	r9, r3
 8000bfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000c02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x1d2>
 8000c0e:	193c      	adds	r4, r7, r4
 8000c10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c14:	d267      	bcs.n	8000ce6 <__udivmoddi4+0x29a>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d965      	bls.n	8000ce6 <__udivmoddi4+0x29a>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	443c      	add	r4, r7
 8000c1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c22:	fba0 9302 	umull	r9, r3, r0, r2
 8000c26:	eba4 040c 	sub.w	r4, r4, ip
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	46ce      	mov	lr, r9
 8000c2e:	469c      	mov	ip, r3
 8000c30:	d351      	bcc.n	8000cd6 <__udivmoddi4+0x28a>
 8000c32:	d04e      	beq.n	8000cd2 <__udivmoddi4+0x286>
 8000c34:	b155      	cbz	r5, 8000c4c <__udivmoddi4+0x200>
 8000c36:	ebb8 030e 	subs.w	r3, r8, lr
 8000c3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c42:	40cb      	lsrs	r3, r1
 8000c44:	431e      	orrs	r6, r3
 8000c46:	40cc      	lsrs	r4, r1
 8000c48:	e9c5 6400 	strd	r6, r4, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e750      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000c50:	f1c2 0320 	rsb	r3, r2, #32
 8000c54:	fa20 f103 	lsr.w	r1, r0, r3
 8000c58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c60:	4094      	lsls	r4, r2
 8000c62:	430c      	orrs	r4, r1
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3110 	mls	r1, r8, r0, r3
 8000c78:	0c23      	lsrs	r3, r4, #16
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f107 	mul.w	r1, r0, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x24c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c8e:	d22c      	bcs.n	8000cea <__udivmoddi4+0x29e>
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d92a      	bls.n	8000cea <__udivmoddi4+0x29e>
 8000c94:	3802      	subs	r0, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ca0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb01 f307 	mul.w	r3, r1, r7
 8000cac:	42a3      	cmp	r3, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x276>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb8:	d213      	bcs.n	8000ce2 <__udivmoddi4+0x296>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d911      	bls.n	8000ce2 <__udivmoddi4+0x296>
 8000cbe:	3902      	subs	r1, #2
 8000cc0:	4464      	add	r4, ip
 8000cc2:	1ae4      	subs	r4, r4, r3
 8000cc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc8:	e739      	b.n	8000b3e <__udivmoddi4+0xf2>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	e6f0      	b.n	8000ab0 <__udivmoddi4+0x64>
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e706      	b.n	8000ae0 <__udivmoddi4+0x94>
 8000cd2:	45c8      	cmp	r8, r9
 8000cd4:	d2ae      	bcs.n	8000c34 <__udivmoddi4+0x1e8>
 8000cd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cde:	3801      	subs	r0, #1
 8000ce0:	e7a8      	b.n	8000c34 <__udivmoddi4+0x1e8>
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	e7ed      	b.n	8000cc2 <__udivmoddi4+0x276>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	e799      	b.n	8000c1e <__udivmoddi4+0x1d2>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e7d4      	b.n	8000c98 <__udivmoddi4+0x24c>
 8000cee:	46d6      	mov	lr, sl
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1a6>
 8000cf2:	4463      	add	r3, ip
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	e74d      	b.n	8000b94 <__udivmoddi4+0x148>
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	e70f      	b.n	8000b20 <__udivmoddi4+0xd4>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	e730      	b.n	8000b68 <__udivmoddi4+0x11c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <vApplicationGetIdleTaskMemory+0x30>)
 8000d22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2280      	movs	r2, #128	@ 0x80
 8000d28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000080 	.word	0x20000080
 8000d3c:	20000120 	.word	0x20000120

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b092      	sub	sp, #72	@ 0x48
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f000 fe1d 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f849 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f000 f90f 	bl	8000f70 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d52:	f000 f8ad 	bl	8000eb0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 f8e1 	bl	8000f1c <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue_1 */
  osMessageQDef(Queue_1, 1, uint8_t);
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <main+0x88>)
 8000d5c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_1Handle = osMessageCreate(osMessageQ(Queue_1), NULL);
 8000d66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 fade 	bl	800432e <osMessageCreate>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a15      	ldr	r2, [pc, #84]	@ (8000dcc <main+0x8c>)
 8000d76:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of runTask */
  osThreadDef(runTask, StartRunTask, osPriorityNormal, 0, 128);
 8000d78:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <main+0x90>)
 8000d7a:	f107 041c 	add.w	r4, r7, #28
 8000d7e:	461d      	mov	r5, r3
 8000d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  runTaskHandle = osThreadCreate(osThread(runTask), NULL);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fa6b 	bl	800426e <osThreadCreate>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <main+0x94>)
 8000d9c:	6013      	str	r3, [r2, #0]

  /* definition and creation of readDataTask */
  osThreadDef(readDataTask, StartReadDataTask, osPriorityIdle, 0, 512);
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <main+0x98>)
 8000da0:	463c      	mov	r4, r7
 8000da2:	461d      	mov	r5, r3
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readDataTaskHandle = osThreadCreate(osThread(readDataTask), NULL);
 8000db0:	463b      	mov	r3, r7
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 fa5a 	bl	800426e <osThreadCreate>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <main+0x9c>)
 8000dbe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dc0:	f003 fa4e 	bl	8004260 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <main+0x84>
 8000dc8:	08005ffc 	.word	0x08005ffc
 8000dcc:	200003c8 	.word	0x200003c8
 8000dd0:	08006014 	.word	0x08006014
 8000dd4:	200003c0 	.word	0x200003c0
 8000dd8:	08006040 	.word	0x08006040
 8000ddc:	200003c4 	.word	0x200003c4

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	@ 0x50
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	2230      	movs	r2, #48	@ 0x30
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fe78 	bl	8005ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <SystemClock_Config+0xc8>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a26      	ldr	r2, [pc, #152]	@ (8000ea8 <SystemClock_Config+0xc8>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <SystemClock_Config+0xc8>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <SystemClock_Config+0xcc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a20      	ldr	r2, [pc, #128]	@ (8000eac <SystemClock_Config+0xcc>)
 8000e2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <SystemClock_Config+0xcc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e54:	2364      	movs	r3, #100	@ 0x64
 8000e56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 f88d 	bl	8001f84 <HAL_RCC_OscConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e70:	f000 fbea 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
 8000e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2103      	movs	r1, #3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 faef 	bl	8002474 <HAL_RCC_ClockConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e9c:	f000 fbd4 	bl	8001648 <Error_Handler>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3750      	adds	r7, #80	@ 0x50
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40007000 	.word	0x40007000

08000eb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000eb6:	4a18      	ldr	r2, [pc, #96]	@ (8000f18 <MX_SPI1_Init+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000ebc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000efc:	220a      	movs	r2, #10
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_SPI1_Init+0x64>)
 8000f02:	f001 fd09 	bl	8002918 <HAL_SPI_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f0c:	f000 fb9c 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000320 	.word	0x20000320
 8000f18:	40013000 	.word	0x40013000

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <MX_USART2_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f002 fd26 	bl	80039a4 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f000 fb73 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000378 	.word	0x20000378
 8000f6c:	40004400 	.word	0x40004400

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b31      	ldr	r3, [pc, #196]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a30      	ldr	r2, [pc, #192]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a29      	ldr	r2, [pc, #164]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a22      	ldr	r2, [pc, #136]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <MX_GPIO_Init+0xe0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4816      	ldr	r0, [pc, #88]	@ (8001054 <MX_GPIO_Init+0xe4>)
 8000ffc:	f000 ff8e 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Run_Pin|LED_Error_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001006:	4814      	ldr	r0, [pc, #80]	@ (8001058 <MX_GPIO_Init+0xe8>)
 8001008:	f000 ff88 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800100c:	2310      	movs	r3, #16
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <MX_GPIO_Init+0xe4>)
 8001024:	f000 fdf6 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Run_Pin LED_Error_Pin */
  GPIO_InitStruct.Pin = LED_Run_Pin|LED_Error_Pin;
 8001028:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_GPIO_Init+0xe8>)
 8001042:	f000 fde7 	bl	8001c14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	@ 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020c00 	.word	0x40020c00

0800105c <IMU_Init>:

/* USER CODE BEGIN 4 */
void IMU_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	MPU9250.PWR_MGMT1	= CLKSEL_1;						// CLOCK_SEL_PLL
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <IMU_Init+0x44>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
	MPU9250.PWR_MGMT2	= ENABLE_ALL;					// Enable All Sensors
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <IMU_Init+0x44>)
 8001068:	2200      	movs	r2, #0
 800106a:	705a      	strb	r2, [r3, #1]
	MPU9250.Gyro_DLPF   = BW250_D970;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <IMU_Init+0x44>)
 800106e:	2200      	movs	r2, #0
 8001070:	709a      	strb	r2, [r3, #2]
	MPU9250.Accel_DLPF  = BW218_D1880;
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <IMU_Init+0x44>)
 8001074:	2200      	movs	r2, #0
 8001076:	70da      	strb	r2, [r3, #3]
	MPU9250.Gyro_Range  = MPU9250_Gyroscope_2000;
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <IMU_Init+0x44>)
 800107a:	2203      	movs	r2, #3
 800107c:	711a      	strb	r2, [r3, #4]
	MPU9250.Accel_Range = MPU9250_Accelerometer_16;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <IMU_Init+0x44>)
 8001080:	2203      	movs	r2, #3
 8001082:	715a      	strb	r2, [r3, #5]

	if(MPU9250_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &MPU9250) != MPU9250_RESULT_OK)
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <IMU_Init+0x44>)
 8001086:	2210      	movs	r2, #16
 8001088:	4906      	ldr	r1, [pc, #24]	@ (80010a4 <IMU_Init+0x48>)
 800108a:	4807      	ldr	r0, [pc, #28]	@ (80010a8 <IMU_Init+0x4c>)
 800108c:	f002 ff4e 	bl	8003f2c <MPU9250_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <IMU_Init+0x3e>
	{
		Error_Handler();
 8001096:	f000 fad7 	bl	8001648 <Error_Handler>
	}
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200003cc 	.word	0x200003cc
 80010a4:	40020000 	.word	0x40020000
 80010a8:	20000320 	.word	0x20000320
 80010ac:	00000000 	.word	0x00000000

080010b0 <IMU_readRawData>:

void IMU_readRawData(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	// <---- ------------ Merging Data to get real IMU data ------------ ---->
	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_ACCEL_XOUT_H, 6);
 80010b4:	2306      	movs	r3, #6
 80010b6:	223b      	movs	r2, #59	@ 0x3b
 80010b8:	499d      	ldr	r1, [pc, #628]	@ (8001330 <IMU_readRawData+0x280>)
 80010ba:	489e      	ldr	r0, [pc, #632]	@ (8001334 <IMU_readRawData+0x284>)
 80010bc:	f003 f84c 	bl	8004158 <MPU9250_ReadData>
	Raw_Accel[0] = (int16_t)(IMU_rawData[0] << 8 | IMU_rawData[1]);
 80010c0:	4b9b      	ldr	r3, [pc, #620]	@ (8001330 <IMU_readRawData+0x280>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b99      	ldr	r3, [pc, #612]	@ (8001330 <IMU_readRawData+0x280>)
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	4b99      	ldr	r3, [pc, #612]	@ (8001338 <IMU_readRawData+0x288>)
 80010d4:	801a      	strh	r2, [r3, #0]
	Raw_Accel[1] = (int16_t)(IMU_rawData[2] << 8 | IMU_rawData[3]);
 80010d6:	4b96      	ldr	r3, [pc, #600]	@ (8001330 <IMU_readRawData+0x280>)
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	4b94      	ldr	r3, [pc, #592]	@ (8001330 <IMU_readRawData+0x280>)
 80010e0:	78db      	ldrb	r3, [r3, #3]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	4b93      	ldr	r3, [pc, #588]	@ (8001338 <IMU_readRawData+0x288>)
 80010ea:	805a      	strh	r2, [r3, #2]
	Raw_Accel[2] = (int16_t)(IMU_rawData[4] << 8 | IMU_rawData[5]);
 80010ec:	4b90      	ldr	r3, [pc, #576]	@ (8001330 <IMU_readRawData+0x280>)
 80010ee:	791b      	ldrb	r3, [r3, #4]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001330 <IMU_readRawData+0x280>)
 80010f6:	795b      	ldrb	r3, [r3, #5]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b8e      	ldr	r3, [pc, #568]	@ (8001338 <IMU_readRawData+0x288>)
 8001100:	809a      	strh	r2, [r3, #4]

	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_GYRO_XOUT_H, 6);
 8001102:	2306      	movs	r3, #6
 8001104:	2243      	movs	r2, #67	@ 0x43
 8001106:	498a      	ldr	r1, [pc, #552]	@ (8001330 <IMU_readRawData+0x280>)
 8001108:	488a      	ldr	r0, [pc, #552]	@ (8001334 <IMU_readRawData+0x284>)
 800110a:	f003 f825 	bl	8004158 <MPU9250_ReadData>
	Raw_Gyro[0] = (int16_t)(IMU_rawData[0] << 8 | IMU_rawData[1]);
 800110e:	4b88      	ldr	r3, [pc, #544]	@ (8001330 <IMU_readRawData+0x280>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	4b86      	ldr	r3, [pc, #536]	@ (8001330 <IMU_readRawData+0x280>)
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b86      	ldr	r3, [pc, #536]	@ (800133c <IMU_readRawData+0x28c>)
 8001122:	801a      	strh	r2, [r3, #0]
	Raw_Gyro[1] = (int16_t)(IMU_rawData[2] << 8 | IMU_rawData[3]);
 8001124:	4b82      	ldr	r3, [pc, #520]	@ (8001330 <IMU_readRawData+0x280>)
 8001126:	789b      	ldrb	r3, [r3, #2]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	4b80      	ldr	r3, [pc, #512]	@ (8001330 <IMU_readRawData+0x280>)
 800112e:	78db      	ldrb	r3, [r3, #3]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b81      	ldr	r3, [pc, #516]	@ (800133c <IMU_readRawData+0x28c>)
 8001138:	805a      	strh	r2, [r3, #2]
	Raw_Gyro[2] = (int16_t)(IMU_rawData[4] << 8 | IMU_rawData[5]);
 800113a:	4b7d      	ldr	r3, [pc, #500]	@ (8001330 <IMU_readRawData+0x280>)
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b7b      	ldr	r3, [pc, #492]	@ (8001330 <IMU_readRawData+0x280>)
 8001144:	795b      	ldrb	r3, [r3, #5]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21a      	sxth	r2, r3
 800114c:	4b7b      	ldr	r3, [pc, #492]	@ (800133c <IMU_readRawData+0x28c>)
 800114e:	809a      	strh	r2, [r3, #4]

	// <---- ------------ Removing Gyro's Noise around 0 state ------------ ---->
	Raw_Gyro[0] = (Raw_Gyro[0] <= ZERO_MAX && Raw_Gyro[0] >= ZERO_MIN)? 0: Raw_Gyro[0];
 8001150:	4b7a      	ldr	r3, [pc, #488]	@ (800133c <IMU_readRawData+0x28c>)
 8001152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001156:	2b14      	cmp	r3, #20
 8001158:	dc05      	bgt.n	8001166 <IMU_readRawData+0xb6>
 800115a:	4b78      	ldr	r3, [pc, #480]	@ (800133c <IMU_readRawData+0x28c>)
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	f113 0f14 	cmn.w	r3, #20
 8001164:	da03      	bge.n	800116e <IMU_readRawData+0xbe>
 8001166:	4b75      	ldr	r3, [pc, #468]	@ (800133c <IMU_readRawData+0x28c>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	e000      	b.n	8001170 <IMU_readRawData+0xc0>
 800116e:	2300      	movs	r3, #0
 8001170:	4a72      	ldr	r2, [pc, #456]	@ (800133c <IMU_readRawData+0x28c>)
 8001172:	8013      	strh	r3, [r2, #0]
	Raw_Gyro[1] = (Raw_Gyro[1] <= ZERO_MAX && Raw_Gyro[1] >= ZERO_MIN)? 0: Raw_Gyro[1];
 8001174:	4b71      	ldr	r3, [pc, #452]	@ (800133c <IMU_readRawData+0x28c>)
 8001176:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800117a:	2b14      	cmp	r3, #20
 800117c:	dc05      	bgt.n	800118a <IMU_readRawData+0xda>
 800117e:	4b6f      	ldr	r3, [pc, #444]	@ (800133c <IMU_readRawData+0x28c>)
 8001180:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001184:	f113 0f14 	cmn.w	r3, #20
 8001188:	da03      	bge.n	8001192 <IMU_readRawData+0xe2>
 800118a:	4b6c      	ldr	r3, [pc, #432]	@ (800133c <IMU_readRawData+0x28c>)
 800118c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001190:	e000      	b.n	8001194 <IMU_readRawData+0xe4>
 8001192:	2300      	movs	r3, #0
 8001194:	4a69      	ldr	r2, [pc, #420]	@ (800133c <IMU_readRawData+0x28c>)
 8001196:	8053      	strh	r3, [r2, #2]
	Raw_Gyro[2] = (Raw_Gyro[2] <= ZERO_MAX && Raw_Gyro[2] >= ZERO_MIN)? 0: Raw_Gyro[2];
 8001198:	4b68      	ldr	r3, [pc, #416]	@ (800133c <IMU_readRawData+0x28c>)
 800119a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800119e:	2b14      	cmp	r3, #20
 80011a0:	dc05      	bgt.n	80011ae <IMU_readRawData+0xfe>
 80011a2:	4b66      	ldr	r3, [pc, #408]	@ (800133c <IMU_readRawData+0x28c>)
 80011a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011a8:	f113 0f14 	cmn.w	r3, #20
 80011ac:	da03      	bge.n	80011b6 <IMU_readRawData+0x106>
 80011ae:	4b63      	ldr	r3, [pc, #396]	@ (800133c <IMU_readRawData+0x28c>)
 80011b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011b4:	e000      	b.n	80011b8 <IMU_readRawData+0x108>
 80011b6:	2300      	movs	r3, #0
 80011b8:	4a60      	ldr	r2, [pc, #384]	@ (800133c <IMU_readRawData+0x28c>)
 80011ba:	8093      	strh	r3, [r2, #4]

	GX = (float)(Raw_Gyro[0] * (2000 / 32768.0));
 80011bc:	4b5f      	ldr	r3, [pc, #380]	@ (800133c <IMU_readRawData+0x28c>)
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f95e 	bl	8000484 <__aeabi_i2d>
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001340 <IMU_readRawData+0x290>)
 80011ce:	f7ff f9c3 	bl	8000558 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fbcf 	bl	800097c <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a58      	ldr	r2, [pc, #352]	@ (8001344 <IMU_readRawData+0x294>)
 80011e2:	6013      	str	r3, [r2, #0]
	GY = (float)(Raw_Gyro[1] * (2000 / 32768.0));
 80011e4:	4b55      	ldr	r3, [pc, #340]	@ (800133c <IMU_readRawData+0x28c>)
 80011e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f94a 	bl	8000484 <__aeabi_i2d>
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <IMU_readRawData+0x290>)
 80011f6:	f7ff f9af 	bl	8000558 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fbbb 	bl	800097c <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4a4f      	ldr	r2, [pc, #316]	@ (8001348 <IMU_readRawData+0x298>)
 800120a:	6013      	str	r3, [r2, #0]
	GZ = (float)(Raw_Gyro[2] * (2000 / 32768.0));
 800120c:	4b4b      	ldr	r3, [pc, #300]	@ (800133c <IMU_readRawData+0x28c>)
 800120e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f936 	bl	8000484 <__aeabi_i2d>
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	4b48      	ldr	r3, [pc, #288]	@ (8001340 <IMU_readRawData+0x290>)
 800121e:	f7ff f99b 	bl	8000558 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fba7 	bl	800097c <__aeabi_d2f>
 800122e:	4603      	mov	r3, r0
 8001230:	4a46      	ldr	r2, [pc, #280]	@ (800134c <IMU_readRawData+0x29c>)
 8001232:	6013      	str	r3, [r2, #0]

	AX = (float)(Raw_Accel[0] * (16.0 / 32768.0));
 8001234:	4b40      	ldr	r3, [pc, #256]	@ (8001338 <IMU_readRawData+0x288>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f922 	bl	8000484 <__aeabi_i2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8001248:	f7ff f986 	bl	8000558 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fb92 	bl	800097c <__aeabi_d2f>
 8001258:	4603      	mov	r3, r0
 800125a:	4a3d      	ldr	r2, [pc, #244]	@ (8001350 <IMU_readRawData+0x2a0>)
 800125c:	6013      	str	r3, [r2, #0]
	AY = (float)(Raw_Accel[1] * (16.0 / 32768.0));
 800125e:	4b36      	ldr	r3, [pc, #216]	@ (8001338 <IMU_readRawData+0x288>)
 8001260:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f90d 	bl	8000484 <__aeabi_i2d>
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8001272:	f7ff f971 	bl	8000558 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fb7d 	bl	800097c <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	4a33      	ldr	r2, [pc, #204]	@ (8001354 <IMU_readRawData+0x2a4>)
 8001286:	6013      	str	r3, [r2, #0]
	AZ = (float)(Raw_Accel[2] * (16.0 / 32768.0));
 8001288:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <IMU_readRawData+0x288>)
 800128a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f8f8 	bl	8000484 <__aeabi_i2d>
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 800129c:	f7ff f95c 	bl	8000558 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fb68 	bl	800097c <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001358 <IMU_readRawData+0x2a8>)
 80012b0:	6013      	str	r3, [r2, #0]

//	// <---- ------------ Converting Degree to Radian------------ ---->
	GX = GX / (180.0 / M_PI);
 80012b2:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <IMU_readRawData+0x294>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f8f6 	bl	80004a8 <__aeabi_f2d>
 80012bc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001328 <IMU_readRawData+0x278>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff fa73 	bl	80007ac <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fb55 	bl	800097c <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <IMU_readRawData+0x294>)
 80012d6:	6013      	str	r3, [r2, #0]
	GY = GY / (180.0 / M_PI);
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <IMU_readRawData+0x298>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f8e3 	bl	80004a8 <__aeabi_f2d>
 80012e2:	a311      	add	r3, pc, #68	@ (adr r3, 8001328 <IMU_readRawData+0x278>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fa60 	bl	80007ac <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fb42 	bl	800097c <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a13      	ldr	r2, [pc, #76]	@ (8001348 <IMU_readRawData+0x298>)
 80012fc:	6013      	str	r3, [r2, #0]
	GZ = GZ / (180.0 / M_PI);
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <IMU_readRawData+0x29c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8d0 	bl	80004a8 <__aeabi_f2d>
 8001308:	a307      	add	r3, pc, #28	@ (adr r3, 8001328 <IMU_readRawData+0x278>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff fa4d 	bl	80007ac <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fb2f 	bl	800097c <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <IMU_readRawData+0x29c>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	1a63c1f8 	.word	0x1a63c1f8
 800132c:	404ca5dc 	.word	0x404ca5dc
 8001330:	200003d4 	.word	0x200003d4
 8001334:	20000320 	.word	0x20000320
 8001338:	200003e4 	.word	0x200003e4
 800133c:	200003ec 	.word	0x200003ec
 8001340:	3faf4000 	.word	0x3faf4000
 8001344:	200003f4 	.word	0x200003f4
 8001348:	200003f8 	.word	0x200003f8
 800134c:	200003fc 	.word	0x200003fc
 8001350:	20000400 	.word	0x20000400
 8001354:	20000404 	.word	0x20000404
 8001358:	20000408 	.word	0x20000408

0800135c <IMU_UpdateAngles>:

void IMU_UpdateAngles(float dt)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	ed2d 8b02 	vpush	{d8}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	ed87 0a01 	vstr	s0, [r7, #4]
    static int first_run = 1;
    static float last_roll, last_pitch;

    if(first_run)
 800136a:	4b7c      	ldr	r3, [pc, #496]	@ (800155c <IMU_UpdateAngles+0x200>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d051      	beq.n	8001416 <IMU_UpdateAngles+0xba>
    {
        float roll_acc = atan2f(AY, sqrtf(AX*AX + AZ*AZ));
 8001372:	4b7b      	ldr	r3, [pc, #492]	@ (8001560 <IMU_UpdateAngles+0x204>)
 8001374:	ed93 8a00 	vldr	s16, [r3]
 8001378:	4b7a      	ldr	r3, [pc, #488]	@ (8001564 <IMU_UpdateAngles+0x208>)
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	4b79      	ldr	r3, [pc, #484]	@ (8001564 <IMU_UpdateAngles+0x208>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001388:	4b77      	ldr	r3, [pc, #476]	@ (8001568 <IMU_UpdateAngles+0x20c>)
 800138a:	edd3 6a00 	vldr	s13, [r3]
 800138e:	4b76      	ldr	r3, [pc, #472]	@ (8001568 <IMU_UpdateAngles+0x20c>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	f004 fc82 	bl	8005ca8 <sqrtf>
 80013a4:	eef0 7a40 	vmov.f32	s15, s0
 80013a8:	eef0 0a67 	vmov.f32	s1, s15
 80013ac:	eeb0 0a48 	vmov.f32	s0, s16
 80013b0:	f004 fc78 	bl	8005ca4 <atan2f>
 80013b4:	ed87 0a03 	vstr	s0, [r7, #12]
        float pitch_acc = atan2f(-AX, sqrtf(AY*AY + AZ*AZ));
 80013b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001564 <IMU_UpdateAngles+0x208>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	eeb1 8a67 	vneg.f32	s16, s15
 80013c2:	4b67      	ldr	r3, [pc, #412]	@ (8001560 <IMU_UpdateAngles+0x204>)
 80013c4:	ed93 7a00 	vldr	s14, [r3]
 80013c8:	4b65      	ldr	r3, [pc, #404]	@ (8001560 <IMU_UpdateAngles+0x204>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d2:	4b65      	ldr	r3, [pc, #404]	@ (8001568 <IMU_UpdateAngles+0x20c>)
 80013d4:	edd3 6a00 	vldr	s13, [r3]
 80013d8:	4b63      	ldr	r3, [pc, #396]	@ (8001568 <IMU_UpdateAngles+0x20c>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	f004 fc5d 	bl	8005ca8 <sqrtf>
 80013ee:	eef0 7a40 	vmov.f32	s15, s0
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	eeb0 0a48 	vmov.f32	s0, s16
 80013fa:	f004 fc53 	bl	8005ca4 <atan2f>
 80013fe:	ed87 0a02 	vstr	s0, [r7, #8]
        last_roll = roll_acc;
 8001402:	4a5a      	ldr	r2, [pc, #360]	@ (800156c <IMU_UpdateAngles+0x210>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6013      	str	r3, [r2, #0]
        last_pitch = pitch_acc;
 8001408:	4a59      	ldr	r2, [pc, #356]	@ (8001570 <IMU_UpdateAngles+0x214>)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	6013      	str	r3, [r2, #0]
        first_run = 0;
 800140e:	4b53      	ldr	r3, [pc, #332]	@ (800155c <IMU_UpdateAngles+0x200>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
        return;
 8001414:	e09c      	b.n	8001550 <IMU_UpdateAngles+0x1f4>
    }

    // Gyro integration
    float gyro_roll = last_roll + GX * dt;
 8001416:	4b57      	ldr	r3, [pc, #348]	@ (8001574 <IMU_UpdateAngles+0x218>)
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001424:	4b51      	ldr	r3, [pc, #324]	@ (800156c <IMU_UpdateAngles+0x210>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142e:	edc7 7a07 	vstr	s15, [r7, #28]
    float gyro_pitch = last_pitch + GY * dt;
 8001432:	4b51      	ldr	r3, [pc, #324]	@ (8001578 <IMU_UpdateAngles+0x21c>)
 8001434:	ed93 7a00 	vldr	s14, [r3]
 8001438:	edd7 7a01 	vldr	s15, [r7, #4]
 800143c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001440:	4b4b      	ldr	r3, [pc, #300]	@ (8001570 <IMU_UpdateAngles+0x214>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Accelerometer angles
    float roll_acc = atan2f(AY, sqrtf(AX * AX + AZ * AZ));
 800144e:	4b44      	ldr	r3, [pc, #272]	@ (8001560 <IMU_UpdateAngles+0x204>)
 8001450:	ed93 8a00 	vldr	s16, [r3]
 8001454:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <IMU_UpdateAngles+0x208>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b42      	ldr	r3, [pc, #264]	@ (8001564 <IMU_UpdateAngles+0x208>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001464:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <IMU_UpdateAngles+0x20c>)
 8001466:	edd3 6a00 	vldr	s13, [r3]
 800146a:	4b3f      	ldr	r3, [pc, #252]	@ (8001568 <IMU_UpdateAngles+0x20c>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	f004 fc14 	bl	8005ca8 <sqrtf>
 8001480:	eef0 7a40 	vmov.f32	s15, s0
 8001484:	eef0 0a67 	vmov.f32	s1, s15
 8001488:	eeb0 0a48 	vmov.f32	s0, s16
 800148c:	f004 fc0a 	bl	8005ca4 <atan2f>
 8001490:	ed87 0a05 	vstr	s0, [r7, #20]
    float pitch_acc = atan2f(-AX, sqrtf(AY * AY + AZ * AZ));
 8001494:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <IMU_UpdateAngles+0x208>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eeb1 8a67 	vneg.f32	s16, s15
 800149e:	4b30      	ldr	r3, [pc, #192]	@ (8001560 <IMU_UpdateAngles+0x204>)
 80014a0:	ed93 7a00 	vldr	s14, [r3]
 80014a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001560 <IMU_UpdateAngles+0x204>)
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001568 <IMU_UpdateAngles+0x20c>)
 80014b0:	edd3 6a00 	vldr	s13, [r3]
 80014b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <IMU_UpdateAngles+0x20c>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c2:	eeb0 0a67 	vmov.f32	s0, s15
 80014c6:	f004 fbef 	bl	8005ca8 <sqrtf>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	eef0 0a67 	vmov.f32	s1, s15
 80014d2:	eeb0 0a48 	vmov.f32	s0, s16
 80014d6:	f004 fbe5 	bl	8005ca4 <atan2f>
 80014da:	ed87 0a04 	vstr	s0, [r7, #16]

    // Complementary filter
    Roll = ALPHA * gyro_roll + (1 - ALPHA) * roll_acc;
 80014de:	edd7 7a07 	vldr	s15, [r7, #28]
 80014e2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800157c <IMU_UpdateAngles+0x220>
 80014e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ee:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001580 <IMU_UpdateAngles+0x224>
 80014f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <IMU_UpdateAngles+0x228>)
 80014fc:	edc3 7a00 	vstr	s15, [r3]
    Pitch = ALPHA * gyro_pitch + (1 - ALPHA) * pitch_acc;
 8001500:	edd7 7a06 	vldr	s15, [r7, #24]
 8001504:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800157c <IMU_UpdateAngles+0x220>
 8001508:	ee27 7a87 	vmul.f32	s14, s15, s14
 800150c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001510:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001580 <IMU_UpdateAngles+0x224>
 8001514:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <IMU_UpdateAngles+0x22c>)
 800151e:	edc3 7a00 	vstr	s15, [r3]

    // Yaw integration (will drift without magnetometer)
    Yaw += GZ * dt;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <IMU_UpdateAngles+0x230>)
 8001524:	ed93 7a00 	vldr	s14, [r3]
 8001528:	edd7 7a01 	vldr	s15, [r7, #4]
 800152c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <IMU_UpdateAngles+0x234>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <IMU_UpdateAngles+0x234>)
 800153c:	edc3 7a00 	vstr	s15, [r3]

    // Store for next iteration
    last_roll = Roll;
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <IMU_UpdateAngles+0x228>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a09      	ldr	r2, [pc, #36]	@ (800156c <IMU_UpdateAngles+0x210>)
 8001546:	6013      	str	r3, [r2, #0]
    last_pitch = Pitch;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <IMU_UpdateAngles+0x22c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <IMU_UpdateAngles+0x214>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	ecbd 8b02 	vpop	{d8}
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000000 	.word	0x20000000
 8001560:	20000404 	.word	0x20000404
 8001564:	20000400 	.word	0x20000400
 8001568:	20000408 	.word	0x20000408
 800156c:	20000418 	.word	0x20000418
 8001570:	2000041c 	.word	0x2000041c
 8001574:	200003f4 	.word	0x200003f4
 8001578:	200003f8 	.word	0x200003f8
 800157c:	3f7ae148 	.word	0x3f7ae148
 8001580:	3ca3d700 	.word	0x3ca3d700
 8001584:	2000040c 	.word	0x2000040c
 8001588:	20000410 	.word	0x20000410
 800158c:	200003fc 	.word	0x200003fc
 8001590:	20000414 	.word	0x20000414

08001594 <StartRunTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRunTask */
void StartRunTask(void const * argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 800159c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <StartRunTask+0x20>)
 80015a2:	f000 fcd4 	bl	8001f4e <HAL_GPIO_TogglePin>
    osDelay(500);
 80015a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015aa:	f002 feac 	bl	8004306 <osDelay>
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 80015ae:	bf00      	nop
 80015b0:	e7f4      	b.n	800159c <StartRunTask+0x8>
 80015b2:	bf00      	nop
 80015b4:	40020c00 	.word	0x40020c00

080015b8 <StartReadDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadDataTask */
void StartReadDataTask(void const * argument)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadDataTask */
  uint32_t last_time = HAL_GetTick();
 80015c0:	f000 fa16 	bl	80019f0 <HAL_GetTick>
 80015c4:	6178      	str	r0, [r7, #20]
  uint32_t now = HAL_GetTick();
 80015c6:	f000 fa13 	bl	80019f0 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]
  float dt = (now - last_time) * 0.001f;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015da:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001620 <StartReadDataTask+0x68>
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	edc7 7a03 	vstr	s15, [r7, #12]

  IMU_Init();
 80015e6:	f7ff fd39 	bl	800105c <IMU_Init>
  /* Infinite loop */
  for(;;)
  {
	IMU_readRawData();
 80015ea:	f7ff fd61 	bl	80010b0 <IMU_readRawData>

	now = HAL_GetTick();
 80015ee:	f000 f9ff 	bl	80019f0 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]
    dt = (now - last_time) * 0.001f;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001602:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001620 <StartReadDataTask+0x68>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	edc7 7a03 	vstr	s15, [r7, #12]
    last_time = now;
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	617b      	str	r3, [r7, #20]

    IMU_UpdateAngles(dt);
 8001612:	ed97 0a03 	vldr	s0, [r7, #12]
 8001616:	f7ff fea1 	bl	800135c <IMU_UpdateAngles>
	IMU_readRawData();
 800161a:	bf00      	nop
 800161c:	e7e5      	b.n	80015ea <StartReadDataTask+0x32>
 800161e:	bf00      	nop
 8001620:	3a83126f 	.word	0x3a83126f

08001624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001636:	f000 f9c7 	bl	80019c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40014800 	.word	0x40014800

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_Error_GPIO_Port, LED_Error_Pin, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001652:	4803      	ldr	r0, [pc, #12]	@ (8001660 <Error_Handler+0x18>)
 8001654:	f000 fc62 	bl	8001f1c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <Error_Handler+0x14>
 8001660:	40020c00 	.word	0x40020c00

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_MspInit+0x54>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <HAL_MspInit+0x54>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001678:	6453      	str	r3, [r2, #68]	@ 0x44
 800167a:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <HAL_MspInit+0x54>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_MspInit+0x54>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <HAL_MspInit+0x54>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	@ 0x40
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <HAL_MspInit+0x54>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	210f      	movs	r1, #15
 80016a6:	f06f 0001 	mvn.w	r0, #1
 80016aa:	f000 fa89 	bl	8001bc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <HAL_SPI_MspInit+0x84>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12b      	bne.n	8001736 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_SPI_MspInit+0x88>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_SPI_MspInit+0x88>)
 80016e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_SPI_MspInit+0x88>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_SPI_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_SPI_MspInit+0x88>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_SPI_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001716:	23e0      	movs	r3, #224	@ 0xe0
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001726:	2305      	movs	r3, #5
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	@ (8001748 <HAL_SPI_MspInit+0x8c>)
 8001732:	f000 fa6f 	bl	8001c14 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	@ 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40013000 	.word	0x40013000
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000

0800174c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a19      	ldr	r2, [pc, #100]	@ (80017d0 <HAL_UART_MspInit+0x84>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d12b      	bne.n	80017c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_UART_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	4a17      	ldr	r2, [pc, #92]	@ (80017d4 <HAL_UART_MspInit+0x88>)
 8001778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800177c:	6413      	str	r3, [r2, #64]	@ 0x40
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_UART_MspInit+0x88>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_UART_MspInit+0x88>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <HAL_UART_MspInit+0x88>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_UART_MspInit+0x88>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017a6:	230c      	movs	r3, #12
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b6:	2307      	movs	r3, #7
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <HAL_UART_MspInit+0x8c>)
 80017c2:	f000 fa27 	bl	8001c14 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	@ 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40004400 	.word	0x40004400
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	@ 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <HAL_InitTick+0xd0>)
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	4a2d      	ldr	r2, [pc, #180]	@ (80018ac <HAL_InitTick+0xd0>)
 80017f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fc:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <HAL_InitTick+0xd0>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001808:	f107 020c 	add.w	r2, r7, #12
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f001 f84e 	bl	80028b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001818:	f001 f838 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 800181c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800181e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001820:	4a23      	ldr	r2, [pc, #140]	@ (80018b0 <HAL_InitTick+0xd4>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	0c9b      	lsrs	r3, r3, #18
 8001828:	3b01      	subs	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <HAL_InitTick+0xd8>)
 800182e:	4a22      	ldr	r2, [pc, #136]	@ (80018b8 <HAL_InitTick+0xdc>)
 8001830:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_InitTick+0xd8>)
 8001834:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001838:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800183a:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <HAL_InitTick+0xd8>)
 800183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001840:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <HAL_InitTick+0xd8>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_InitTick+0xd8>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_InitTick+0xd8>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001852:	4818      	ldr	r0, [pc, #96]	@ (80018b4 <HAL_InitTick+0xd8>)
 8001854:	f001 fe32 	bl	80034bc <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800185e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001862:	2b00      	cmp	r3, #0
 8001864:	d11b      	bne.n	800189e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001866:	4813      	ldr	r0, [pc, #76]	@ (80018b4 <HAL_InitTick+0xd8>)
 8001868:	f001 fe82 	bl	8003570 <HAL_TIM_Base_Start_IT>
 800186c:	4603      	mov	r3, r0
 800186e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001872:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001876:	2b00      	cmp	r3, #0
 8001878:	d111      	bne.n	800189e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800187a:	201a      	movs	r0, #26
 800187c:	f000 f9bc 	bl	8001bf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	d808      	bhi.n	8001898 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001886:	2200      	movs	r2, #0
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	201a      	movs	r0, #26
 800188c:	f000 f998 	bl	8001bc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <HAL_InitTick+0xe0>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e002      	b.n	800189e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800189e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3730      	adds	r7, #48	@ 0x30
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	20000420 	.word	0x20000420
 80018b8:	40014800 	.word	0x40014800
 80018bc:	20000008 	.word	0x20000008

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <NMI_Handler+0x4>

080018c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <MemManage_Handler+0x4>

080018d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80018fe:	f001 fe99 	bl	8003634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000420 	.word	0x20000420

0800190c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001934:	f7ff ffea 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	@ (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	@ (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f004 f925 	bl	8005bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7ff f9ed 	bl	8000d40 <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001974:	080060c4 	.word	0x080060c4
  ldr r2, =_sbss
 8001978:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800197c:	20004308 	.word	0x20004308

08001980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f8fc 	bl	8001baa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f7ff ff12 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fe54 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000000c 	.word	0x2000000c
 80019ec:	20000468 	.word	0x20000468

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000468 	.word	0x20000468

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	@ (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	@ (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	@ (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	@ 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff4c 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd2:	f7ff ff61 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001bd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	6978      	ldr	r0, [r7, #20]
 8001bde:	f7ff ffb1 	bl	8001b44 <NVIC_EncodePriority>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff80 	bl	8001af0 <__NVIC_SetPriority>
}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff54 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e159      	b.n	8001ee4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f040 8148 	bne.w	8001ede <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d005      	beq.n	8001c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d130      	bne.n	8001cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 0201 	and.w	r2, r3, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d017      	beq.n	8001d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d123      	bne.n	8001d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	69b9      	ldr	r1, [r7, #24]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a2 	beq.w	8001ede <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b57      	ldr	r3, [pc, #348]	@ (8001efc <HAL_GPIO_Init+0x2e8>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	4a56      	ldr	r2, [pc, #344]	@ (8001efc <HAL_GPIO_Init+0x2e8>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001daa:	4b54      	ldr	r3, [pc, #336]	@ (8001efc <HAL_GPIO_Init+0x2e8>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db6:	4a52      	ldr	r2, [pc, #328]	@ (8001f00 <HAL_GPIO_Init+0x2ec>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a49      	ldr	r2, [pc, #292]	@ (8001f04 <HAL_GPIO_Init+0x2f0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d019      	beq.n	8001e16 <HAL_GPIO_Init+0x202>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a48      	ldr	r2, [pc, #288]	@ (8001f08 <HAL_GPIO_Init+0x2f4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x1fe>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a47      	ldr	r2, [pc, #284]	@ (8001f0c <HAL_GPIO_Init+0x2f8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x1fa>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a46      	ldr	r2, [pc, #280]	@ (8001f10 <HAL_GPIO_Init+0x2fc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x1f6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a45      	ldr	r2, [pc, #276]	@ (8001f14 <HAL_GPIO_Init+0x300>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x1f2>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e008      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e06:	2307      	movs	r3, #7
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e004      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e16:	2300      	movs	r3, #0
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	f002 0203 	and.w	r2, r2, #3
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	4093      	lsls	r3, r2
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e28:	4935      	ldr	r1, [pc, #212]	@ (8001f00 <HAL_GPIO_Init+0x2ec>)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e36:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e60:	4b2d      	ldr	r3, [pc, #180]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e84:	4a24      	ldr	r2, [pc, #144]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8a:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eae:	4a1a      	ldr	r2, [pc, #104]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb4:	4b18      	ldr	r3, [pc, #96]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b0f      	cmp	r3, #15
 8001ee8:	f67f aea2 	bls.w	8001c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3724      	adds	r7, #36	@ 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40013800 	.word	0x40013800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40013c00 	.word	0x40013c00

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f38:	e003      	b.n	8001f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3a:	887b      	ldrh	r3, [r7, #2]
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	619a      	str	r2, [r3, #24]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f60:	887a      	ldrh	r2, [r7, #2]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	041a      	lsls	r2, r3, #16
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	400b      	ands	r3, r1
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e267      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d075      	beq.n	800208e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fa2:	4b88      	ldr	r3, [pc, #544]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d00c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fae:	4b85      	ldr	r3, [pc, #532]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d112      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fba:	4b82      	ldr	r3, [pc, #520]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05b      	beq.n	800208c <HAL_RCC_OscConfig+0x108>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d157      	bne.n	800208c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e242      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x74>
 8001fea:	4b76      	ldr	r3, [pc, #472]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a75      	ldr	r2, [pc, #468]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e01d      	b.n	8002034 <HAL_RCC_OscConfig+0xb0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x98>
 8002002:	4b70      	ldr	r3, [pc, #448]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6f      	ldr	r2, [pc, #444]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b6d      	ldr	r3, [pc, #436]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6c      	ldr	r2, [pc, #432]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0xb0>
 800201c:	4b69      	ldr	r3, [pc, #420]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a68      	ldr	r2, [pc, #416]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b66      	ldr	r3, [pc, #408]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a65      	ldr	r2, [pc, #404]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fcd8 	bl	80019f0 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fcd4 	bl	80019f0 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	@ 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e207      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b5b      	ldr	r3, [pc, #364]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0xc0>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fcc4 	bl	80019f0 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fcc0 	bl	80019f0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	@ 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1f3      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	4b51      	ldr	r3, [pc, #324]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0xe8>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d063      	beq.n	8002162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800209a:	4b4a      	ldr	r3, [pc, #296]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00b      	beq.n	80020be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a6:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d11c      	bne.n	80020ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b2:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d116      	bne.n	80020ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	4b41      	ldr	r3, [pc, #260]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_RCC_OscConfig+0x152>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e1c7      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d6:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4937      	ldr	r1, [pc, #220]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	e03a      	b.n	8002162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f4:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_OscConfig+0x244>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7ff fc79 	bl	80019f0 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002102:	f7ff fc75 	bl	80019f0 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e1a8      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4925      	ldr	r1, [pc, #148]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e015      	b.n	8002162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002136:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <HAL_RCC_OscConfig+0x244>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fc58 	bl	80019f0 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7ff fc54 	bl	80019f0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e187      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d036      	beq.n	80021dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <HAL_RCC_OscConfig+0x248>)
 8002178:	2201      	movs	r2, #1
 800217a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7ff fc38 	bl	80019f0 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7ff fc34 	bl	80019f0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e167      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x200>
 80021a2:	e01b      	b.n	80021dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <HAL_RCC_OscConfig+0x248>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fc21 	bl	80019f0 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	e00e      	b.n	80021d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b2:	f7ff fc1d 	bl	80019f0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d907      	bls.n	80021d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e150      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
 80021c4:	40023800 	.word	0x40023800
 80021c8:	42470000 	.word	0x42470000
 80021cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	4b88      	ldr	r3, [pc, #544]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ea      	bne.n	80021b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8097 	beq.w	8002318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ee:	4b81      	ldr	r3, [pc, #516]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10f      	bne.n	800221a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b7d      	ldr	r3, [pc, #500]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	4a7c      	ldr	r2, [pc, #496]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	@ 0x40
 800220a:	4b7a      	ldr	r3, [pc, #488]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b77      	ldr	r3, [pc, #476]	@ (80023f8 <HAL_RCC_OscConfig+0x474>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002226:	4b74      	ldr	r3, [pc, #464]	@ (80023f8 <HAL_RCC_OscConfig+0x474>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a73      	ldr	r2, [pc, #460]	@ (80023f8 <HAL_RCC_OscConfig+0x474>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7ff fbdd 	bl	80019f0 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7ff fbd9 	bl	80019f0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e10c      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b6a      	ldr	r3, [pc, #424]	@ (80023f8 <HAL_RCC_OscConfig+0x474>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x2ea>
 8002260:	4b64      	ldr	r3, [pc, #400]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	4a63      	ldr	r2, [pc, #396]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	@ 0x70
 800226c:	e01c      	b.n	80022a8 <HAL_RCC_OscConfig+0x324>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b05      	cmp	r3, #5
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x30c>
 8002276:	4b5f      	ldr	r3, [pc, #380]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227a:	4a5e      	ldr	r2, [pc, #376]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6713      	str	r3, [r2, #112]	@ 0x70
 8002282:	4b5c      	ldr	r3, [pc, #368]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002286:	4a5b      	ldr	r2, [pc, #364]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6713      	str	r3, [r2, #112]	@ 0x70
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0x324>
 8002290:	4b58      	ldr	r3, [pc, #352]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002294:	4a57      	ldr	r2, [pc, #348]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	@ 0x70
 800229c:	4b55      	ldr	r3, [pc, #340]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a0:	4a54      	ldr	r2, [pc, #336]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80022a2:	f023 0304 	bic.w	r3, r3, #4
 80022a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff fb9e 	bl	80019f0 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7ff fb9a 	bl	80019f0 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0cb      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	4b49      	ldr	r3, [pc, #292]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ee      	beq.n	80022b8 <HAL_RCC_OscConfig+0x334>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff fb88 	bl	80019f0 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7ff fb84 	bl	80019f0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0b5      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fa:	4b3e      	ldr	r3, [pc, #248]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ee      	bne.n	80022e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230c:	4b39      	ldr	r3, [pc, #228]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	4a38      	ldr	r2, [pc, #224]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002316:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a1 	beq.w	8002464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002322:	4b34      	ldr	r3, [pc, #208]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b08      	cmp	r3, #8
 800232c:	d05c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d141      	bne.n	80023ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b31      	ldr	r3, [pc, #196]	@ (80023fc <HAL_RCC_OscConfig+0x478>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff fb58 	bl	80019f0 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff fb54 	bl	80019f0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e087      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	3b01      	subs	r3, #1
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	061b      	lsls	r3, r3, #24
 8002386:	491b      	ldr	r1, [pc, #108]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCC_OscConfig+0x478>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff fb2d 	bl	80019f0 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7ff fb29 	bl	80019f0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e05c      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x416>
 80023b8:	e054      	b.n	8002464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <HAL_RCC_OscConfig+0x478>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff fb16 	bl	80019f0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff fb12 	bl	80019f0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e045      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x444>
 80023e6:	e03d      	b.n	8002464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e038      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40007000 	.word	0x40007000
 80023fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002400:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <HAL_RCC_OscConfig+0x4ec>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d028      	beq.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d121      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d11a      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002438:	4293      	cmp	r3, r2
 800243a:	d111      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d107      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0cc      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b68      	ldr	r3, [pc, #416]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d90c      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b65      	ldr	r3, [pc, #404]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a58      	ldr	r2, [pc, #352]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a52      	ldr	r2, [pc, #328]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d044      	beq.n	8002594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252e:	2b03      	cmp	r3, #3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b3f      	ldr	r3, [pc, #252]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e067      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b37      	ldr	r3, [pc, #220]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4934      	ldr	r1, [pc, #208]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002564:	f7ff fa44 	bl	80019f0 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff fa40 	bl	80019f0 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e04f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b2b      	ldr	r3, [pc, #172]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b25      	ldr	r3, [pc, #148]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20c      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b22      	ldr	r3, [pc, #136]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f8de 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00
 8002630:	40023800 	.word	0x40023800
 8002634:	08006064 	.word	0x08006064
 8002638:	20000004 	.word	0x20000004
 800263c:	20000008 	.word	0x20000008

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002644:	b094      	sub	sp, #80	@ 0x50
 8002646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002658:	4b79      	ldr	r3, [pc, #484]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d00d      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x40>
 8002664:	2b08      	cmp	r3, #8
 8002666:	f200 80e1 	bhi.w	800282c <HAL_RCC_GetSysClockFreq+0x1ec>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x34>
 800266e:	2b04      	cmp	r3, #4
 8002670:	d003      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x3a>
 8002672:	e0db      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b73      	ldr	r3, [pc, #460]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x204>)
 8002676:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002678:	e0db      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267a:	4b73      	ldr	r3, [pc, #460]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x208>)
 800267c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800267e:	e0d8      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002680:	4b6f      	ldr	r3, [pc, #444]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002688:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800268a:	4b6d      	ldr	r3, [pc, #436]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d063      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002696:	4b6a      	ldr	r3, [pc, #424]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	2200      	movs	r2, #0
 800269e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80026a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026b2:	4622      	mov	r2, r4
 80026b4:	462b      	mov	r3, r5
 80026b6:	f04f 0000 	mov.w	r0, #0
 80026ba:	f04f 0100 	mov.w	r1, #0
 80026be:	0159      	lsls	r1, r3, #5
 80026c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c4:	0150      	lsls	r0, r2, #5
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4621      	mov	r1, r4
 80026cc:	1a51      	subs	r1, r2, r1
 80026ce:	6139      	str	r1, [r7, #16]
 80026d0:	4629      	mov	r1, r5
 80026d2:	eb63 0301 	sbc.w	r3, r3, r1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026e4:	4659      	mov	r1, fp
 80026e6:	018b      	lsls	r3, r1, #6
 80026e8:	4651      	mov	r1, sl
 80026ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ee:	4651      	mov	r1, sl
 80026f0:	018a      	lsls	r2, r1, #6
 80026f2:	4651      	mov	r1, sl
 80026f4:	ebb2 0801 	subs.w	r8, r2, r1
 80026f8:	4659      	mov	r1, fp
 80026fa:	eb63 0901 	sbc.w	r9, r3, r1
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800270a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800270e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002712:	4690      	mov	r8, r2
 8002714:	4699      	mov	r9, r3
 8002716:	4623      	mov	r3, r4
 8002718:	eb18 0303 	adds.w	r3, r8, r3
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	462b      	mov	r3, r5
 8002720:	eb49 0303 	adc.w	r3, r9, r3
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002732:	4629      	mov	r1, r5
 8002734:	024b      	lsls	r3, r1, #9
 8002736:	4621      	mov	r1, r4
 8002738:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800273c:	4621      	mov	r1, r4
 800273e:	024a      	lsls	r2, r1, #9
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002746:	2200      	movs	r2, #0
 8002748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800274a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800274c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002750:	f7fe f964 	bl	8000a1c <__aeabi_uldivmod>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4613      	mov	r3, r2
 800275a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800275c:	e058      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275e:	4b38      	ldr	r3, [pc, #224]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	099b      	lsrs	r3, r3, #6
 8002764:	2200      	movs	r2, #0
 8002766:	4618      	mov	r0, r3
 8002768:	4611      	mov	r1, r2
 800276a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800276e:	623b      	str	r3, [r7, #32]
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
 8002774:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	f04f 0000 	mov.w	r0, #0
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	0159      	lsls	r1, r3, #5
 8002786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278a:	0150      	lsls	r0, r2, #5
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4641      	mov	r1, r8
 8002792:	ebb2 0a01 	subs.w	sl, r2, r1
 8002796:	4649      	mov	r1, r9
 8002798:	eb63 0b01 	sbc.w	fp, r3, r1
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027b0:	ebb2 040a 	subs.w	r4, r2, sl
 80027b4:	eb63 050b 	sbc.w	r5, r3, fp
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	00eb      	lsls	r3, r5, #3
 80027c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c6:	00e2      	lsls	r2, r4, #3
 80027c8:	4614      	mov	r4, r2
 80027ca:	461d      	mov	r5, r3
 80027cc:	4643      	mov	r3, r8
 80027ce:	18e3      	adds	r3, r4, r3
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	464b      	mov	r3, r9
 80027d4:	eb45 0303 	adc.w	r3, r5, r3
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027e6:	4629      	mov	r1, r5
 80027e8:	028b      	lsls	r3, r1, #10
 80027ea:	4621      	mov	r1, r4
 80027ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027f0:	4621      	mov	r1, r4
 80027f2:	028a      	lsls	r2, r1, #10
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027fa:	2200      	movs	r2, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	61fa      	str	r2, [r7, #28]
 8002800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002804:	f7fe f90a 	bl	8000a1c <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4613      	mov	r3, r2
 800280e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	3301      	adds	r3, #1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800282a:	e002      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x204>)
 800282e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002834:	4618      	mov	r0, r3
 8002836:	3750      	adds	r7, #80	@ 0x50
 8002838:	46bd      	mov	sp, r7
 800283a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	00f42400 	.word	0x00f42400
 8002848:	007a1200 	.word	0x007a1200

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_RCC_GetHCLKFreq+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000004 	.word	0x20000004

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002868:	f7ff fff0 	bl	800284c <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	0a9b      	lsrs	r3, r3, #10
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4903      	ldr	r1, [pc, #12]	@ (8002888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	08006074 	.word	0x08006074

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002890:	f7ff ffdc 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0b5b      	lsrs	r3, r3, #13
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	@ (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	08006074 	.word	0x08006074

080028b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	220f      	movs	r2, #15
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028c4:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <HAL_RCC_GetClockConfig+0x5c>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <HAL_RCC_GetClockConfig+0x5c>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <HAL_RCC_GetClockConfig+0x5c>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCC_GetClockConfig+0x5c>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	08db      	lsrs	r3, r3, #3
 80028ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028f6:	4b07      	ldr	r3, [pc, #28]	@ (8002914 <HAL_RCC_GetClockConfig+0x60>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0207 	and.w	r2, r3, #7
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	601a      	str	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	40023c00 	.word	0x40023c00

08002918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07b      	b.n	8002a22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800293a:	d009      	beq.n	8002950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
 8002942:	e005      	b.n	8002950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe fea6 	bl	80016bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002986:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d4:	ea42 0103 	orr.w	r1, r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	f003 0104 	and.w	r1, r3, #4
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	f003 0210 	and.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b088      	sub	sp, #32
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a3a:	f7fe ffd9 	bl	80019f0 <HAL_GetTick>
 8002a3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d001      	beq.n	8002a54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
 8002a52:	e12a      	b.n	8002caa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_SPI_Transmit+0x36>
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e122      	b.n	8002caa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_SPI_Transmit+0x48>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e11b      	b.n	8002caa <HAL_SPI_Transmit+0x280>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ad0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ae0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aec:	2b40      	cmp	r3, #64	@ 0x40
 8002aee:	d007      	beq.n	8002b00 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b08:	d152      	bne.n	8002bb0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_SPI_Transmit+0xee>
 8002b12:	8b7b      	ldrh	r3, [r7, #26]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d145      	bne.n	8002ba4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b3c:	e032      	b.n	8002ba4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d112      	bne.n	8002b72 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	881a      	ldrh	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	1c9a      	adds	r2, r3, #2
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b70:	e018      	b.n	8002ba4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b72:	f7fe ff3d 	bl	80019f0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d803      	bhi.n	8002b8a <HAL_SPI_Transmit+0x160>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d102      	bne.n	8002b90 <HAL_SPI_Transmit+0x166>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e082      	b.n	8002caa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1c7      	bne.n	8002b3e <HAL_SPI_Transmit+0x114>
 8002bae:	e053      	b.n	8002c58 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_SPI_Transmit+0x194>
 8002bb8:	8b7b      	ldrh	r3, [r7, #26]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d147      	bne.n	8002c4e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002be4:	e033      	b.n	8002c4e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d113      	bne.n	8002c1c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c1a:	e018      	b.n	8002c4e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c1c:	f7fe fee8 	bl	80019f0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d803      	bhi.n	8002c34 <HAL_SPI_Transmit+0x20a>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d102      	bne.n	8002c3a <HAL_SPI_Transmit+0x210>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e02d      	b.n	8002caa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1c6      	bne.n	8002be6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	6839      	ldr	r1, [r7, #0]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fbd9 	bl	8003414 <SPI_EndRxTxTransaction>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
  }
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b088      	sub	sp, #32
 8002cb6:	af02      	add	r7, sp, #8
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e104      	b.n	8002edc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cda:	d112      	bne.n	8002d02 <HAL_SPI_Receive+0x50>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10e      	bne.n	8002d02 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f8f3 	bl	8002ee4 <HAL_SPI_TransmitReceive>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	e0ec      	b.n	8002edc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d02:	f7fe fe75 	bl	80019f0 <HAL_GetTick>
 8002d06:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_SPI_Receive+0x62>
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0e1      	b.n	8002edc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_SPI_Receive+0x74>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0da      	b.n	8002edc <HAL_SPI_Receive+0x22a>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2204      	movs	r2, #4
 8002d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d74:	d10f      	bne.n	8002d96 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da0:	2b40      	cmp	r3, #64	@ 0x40
 8002da2:	d007      	beq.n	8002db4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002db2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d170      	bne.n	8002e9e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002dbc:	e035      	b.n	8002e2a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d115      	bne.n	8002df8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f103 020c 	add.w	r2, r3, #12
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002df6:	e018      	b.n	8002e2a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df8:	f7fe fdfa 	bl	80019f0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d803      	bhi.n	8002e10 <HAL_SPI_Receive+0x15e>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0e:	d102      	bne.n	8002e16 <HAL_SPI_Receive+0x164>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e058      	b.n	8002edc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1c4      	bne.n	8002dbe <HAL_SPI_Receive+0x10c>
 8002e34:	e038      	b.n	8002ea8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d113      	bne.n	8002e6c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	1c9a      	adds	r2, r3, #2
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e6a:	e018      	b.n	8002e9e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e6c:	f7fe fdc0 	bl	80019f0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d803      	bhi.n	8002e84 <HAL_SPI_Receive+0x1d2>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e82:	d102      	bne.n	8002e8a <HAL_SPI_Receive+0x1d8>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e01e      	b.n	8002edc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1c6      	bne.n	8002e36 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fa4b 	bl	8003348 <SPI_EndRxTransaction>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
  }
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ef6:	f7fe fd7b 	bl	80019f0 <HAL_GetTick>
 8002efa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f02:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f0a:	887b      	ldrh	r3, [r7, #2]
 8002f0c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d00c      	beq.n	8002f2e <HAL_SPI_TransmitReceive+0x4a>
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f1a:	d106      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x46>
 8002f24:	7ffb      	ldrb	r3, [r7, #31]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d001      	beq.n	8002f2e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e17f      	b.n	800322e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x5c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x5c>
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e174      	b.n	800322e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_SPI_TransmitReceive+0x6e>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e16d      	b.n	800322e <HAL_SPI_TransmitReceive+0x34a>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d003      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2205      	movs	r2, #5
 8002f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	887a      	ldrh	r2, [r7, #2]
 8002f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d007      	beq.n	8002fc2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fca:	d17e      	bne.n	80030ca <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_SPI_TransmitReceive+0xf6>
 8002fd4:	8afb      	ldrh	r3, [r7, #22]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d16c      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	881a      	ldrh	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	1c9a      	adds	r2, r3, #2
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ffe:	e059      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d11b      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x162>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d016      	beq.n	8003046 <HAL_SPI_TransmitReceive+0x162>
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	2b01      	cmp	r3, #1
 800301c:	d113      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	881a      	ldrh	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	1c9a      	adds	r2, r3, #2
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d119      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x1a4>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d014      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003068:	b292      	uxth	r2, r2
 800306a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003070:	1c9a      	adds	r2, r3, #2
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003084:	2301      	movs	r3, #1
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003088:	f7fe fcb2 	bl	80019f0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003094:	429a      	cmp	r2, r3
 8003096:	d80d      	bhi.n	80030b4 <HAL_SPI_TransmitReceive+0x1d0>
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d009      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0bc      	b.n	800322e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1a0      	bne.n	8003000 <HAL_SPI_TransmitReceive+0x11c>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d19b      	bne.n	8003000 <HAL_SPI_TransmitReceive+0x11c>
 80030c8:	e082      	b.n	80031d0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x1f4>
 80030d2:	8afb      	ldrh	r3, [r7, #22]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d171      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030fe:	e05d      	b.n	80031bc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d11c      	bne.n	8003148 <HAL_SPI_TransmitReceive+0x264>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x264>
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	2b01      	cmp	r3, #1
 800311c:	d114      	bne.n	8003148 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d119      	bne.n	800318a <HAL_SPI_TransmitReceive+0x2a6>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d014      	beq.n	800318a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003186:	2301      	movs	r3, #1
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800318a:	f7fe fc31 	bl	80019f0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003196:	429a      	cmp	r2, r3
 8003198:	d803      	bhi.n	80031a2 <HAL_SPI_TransmitReceive+0x2be>
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x2c4>
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e038      	b.n	800322e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d19c      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x21c>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d197      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f91d 	bl	8003414 <SPI_EndRxTxTransaction>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e01d      	b.n	800322e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800322c:	2300      	movs	r3, #0
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3728      	adds	r7, #40	@ 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003248:	f7fe fbd2 	bl	80019f0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	4413      	add	r3, r2
 8003256:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003258:	f7fe fbca 	bl	80019f0 <HAL_GetTick>
 800325c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800325e:	4b39      	ldr	r3, [pc, #228]	@ (8003344 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	015b      	lsls	r3, r3, #5
 8003264:	0d1b      	lsrs	r3, r3, #20
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800326e:	e054      	b.n	800331a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d050      	beq.n	800331a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003278:	f7fe fbba 	bl	80019f0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	429a      	cmp	r2, r3
 8003286:	d902      	bls.n	800328e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d13d      	bne.n	800330a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800329c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032a6:	d111      	bne.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b0:	d004      	beq.n	80032bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ba:	d107      	bne.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032d4:	d10f      	bne.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e017      	b.n	800333a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3b01      	subs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	429a      	cmp	r2, r3
 8003336:	d19b      	bne.n	8003270 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000004 	.word	0x20000004

08003348 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800335c:	d111      	bne.n	8003382 <SPI_EndRxTransaction+0x3a>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003366:	d004      	beq.n	8003372 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003370:	d107      	bne.n	8003382 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003380:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338a:	d12a      	bne.n	80033e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003394:	d012      	beq.n	80033bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2200      	movs	r2, #0
 800339e:	2180      	movs	r1, #128	@ 0x80
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff ff49 	bl	8003238 <SPI_WaitFlagStateUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02d      	beq.n	8003408 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e026      	b.n	800340a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2200      	movs	r2, #0
 80033c4:	2101      	movs	r1, #1
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7ff ff36 	bl	8003238 <SPI_WaitFlagStateUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01a      	beq.n	8003408 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d6:	f043 0220 	orr.w	r2, r3, #32
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e013      	b.n	800340a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2101      	movs	r1, #1
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff ff23 	bl	8003238 <SPI_WaitFlagStateUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e000      	b.n	800340a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2201      	movs	r2, #1
 8003428:	2102      	movs	r1, #2
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff ff04 	bl	8003238 <SPI_WaitFlagStateUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e032      	b.n	80034ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003446:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <SPI_EndRxTxTransaction+0xa0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1b      	ldr	r2, [pc, #108]	@ (80034b8 <SPI_EndRxTxTransaction+0xa4>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	0d5b      	lsrs	r3, r3, #21
 8003452:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003464:	d112      	bne.n	800348c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	@ 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff fee1 	bl	8003238 <SPI_WaitFlagStateUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d016      	beq.n	80034aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e00f      	b.n	80034ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	3b01      	subs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a2:	2b80      	cmp	r3, #128	@ 0x80
 80034a4:	d0f2      	beq.n	800348c <SPI_EndRxTxTransaction+0x78>
 80034a6:	e000      	b.n	80034aa <SPI_EndRxTxTransaction+0x96>
        break;
 80034a8:	bf00      	nop
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000004 	.word	0x20000004
 80034b8:	165e9f81 	.word	0x165e9f81

080034bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e041      	b.n	8003552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f839 	bl	800355a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 f9b2 	bl	8003864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d001      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e044      	b.n	8003612 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003620 <HAL_TIM_Base_Start_IT+0xb0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d018      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b2:	d013      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_TIM_Base_Start_IT+0xb4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a19      	ldr	r2, [pc, #100]	@ (8003628 <HAL_TIM_Base_Start_IT+0xb8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a17      	ldr	r2, [pc, #92]	@ (800362c <HAL_TIM_Base_Start_IT+0xbc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a16      	ldr	r2, [pc, #88]	@ (8003630 <HAL_TIM_Base_Start_IT+0xc0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d111      	bne.n	8003600 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d010      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e007      	b.n	8003610 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40000c00 	.word	0x40000c00
 8003630:	40014000 	.word	0x40014000

08003634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d020      	beq.n	8003698 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01b      	beq.n	8003698 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0202 	mvn.w	r2, #2
 8003668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8d2 	bl	8003828 <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8c4 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8d5 	bl	800383c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d020      	beq.n	80036e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01b      	beq.n	80036e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0204 	mvn.w	r2, #4
 80036b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f8ac 	bl	8003828 <HAL_TIM_IC_CaptureCallback>
 80036d0:	e005      	b.n	80036de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f89e 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8af 	bl	800383c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d020      	beq.n	8003730 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01b      	beq.n	8003730 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0208 	mvn.w	r2, #8
 8003700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2204      	movs	r2, #4
 8003706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f886 	bl	8003828 <HAL_TIM_IC_CaptureCallback>
 800371c:	e005      	b.n	800372a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f878 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f889 	bl	800383c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d020      	beq.n	800377c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01b      	beq.n	800377c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0210 	mvn.w	r2, #16
 800374c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2208      	movs	r2, #8
 8003752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f860 	bl	8003828 <HAL_TIM_IC_CaptureCallback>
 8003768:	e005      	b.n	8003776 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f852 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f863 	bl	800383c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00c      	beq.n	80037a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0201 	mvn.w	r2, #1
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd ff42 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00c      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8e6 	bl	8003990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00c      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f834 	bl	8003850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0220 	mvn.w	r2, #32
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8b8 	bl	800397c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3a      	ldr	r2, [pc, #232]	@ (8003960 <TIM_Base_SetConfig+0xfc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00f      	beq.n	800389c <TIM_Base_SetConfig+0x38>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003882:	d00b      	beq.n	800389c <TIM_Base_SetConfig+0x38>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a37      	ldr	r2, [pc, #220]	@ (8003964 <TIM_Base_SetConfig+0x100>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <TIM_Base_SetConfig+0x38>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a36      	ldr	r2, [pc, #216]	@ (8003968 <TIM_Base_SetConfig+0x104>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d003      	beq.n	800389c <TIM_Base_SetConfig+0x38>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a35      	ldr	r2, [pc, #212]	@ (800396c <TIM_Base_SetConfig+0x108>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d108      	bne.n	80038ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003960 <TIM_Base_SetConfig+0xfc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01b      	beq.n	80038ee <TIM_Base_SetConfig+0x8a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038bc:	d017      	beq.n	80038ee <TIM_Base_SetConfig+0x8a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a28      	ldr	r2, [pc, #160]	@ (8003964 <TIM_Base_SetConfig+0x100>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <TIM_Base_SetConfig+0x8a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a27      	ldr	r2, [pc, #156]	@ (8003968 <TIM_Base_SetConfig+0x104>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_Base_SetConfig+0x8a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a26      	ldr	r2, [pc, #152]	@ (800396c <TIM_Base_SetConfig+0x108>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_Base_SetConfig+0x8a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a25      	ldr	r2, [pc, #148]	@ (8003970 <TIM_Base_SetConfig+0x10c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_Base_SetConfig+0x8a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a24      	ldr	r2, [pc, #144]	@ (8003974 <TIM_Base_SetConfig+0x110>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_Base_SetConfig+0x8a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a23      	ldr	r2, [pc, #140]	@ (8003978 <TIM_Base_SetConfig+0x114>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d108      	bne.n	8003900 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a0e      	ldr	r2, [pc, #56]	@ (8003960 <TIM_Base_SetConfig+0xfc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d103      	bne.n	8003934 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d105      	bne.n	8003952 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f023 0201 	bic.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	611a      	str	r2, [r3, #16]
  }
}
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800

0800397c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e042      	b.n	8003a3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd febe 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2224      	movs	r2, #36	@ 0x24
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f82b 	bl	8003a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a48:	b0c0      	sub	sp, #256	@ 0x100
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	68d9      	ldr	r1, [r3, #12]
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	ea40 0301 	orr.w	r3, r0, r1
 8003a6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a9c:	f021 010c 	bic.w	r1, r1, #12
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abe:	6999      	ldr	r1, [r3, #24]
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	ea40 0301 	orr.w	r3, r0, r1
 8003aca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b8f      	ldr	r3, [pc, #572]	@ (8003d10 <UART_SetConfig+0x2cc>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d005      	beq.n	8003ae4 <UART_SetConfig+0xa0>
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b8d      	ldr	r3, [pc, #564]	@ (8003d14 <UART_SetConfig+0x2d0>)
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d104      	bne.n	8003aee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7fe fed2 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8003ae8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003aec:	e003      	b.n	8003af6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aee:	f7fe feb9 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 8003af2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b00:	f040 810c 	bne.w	8003d1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	1891      	adds	r1, r2, r2
 8003b1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b1e:	415b      	adcs	r3, r3
 8003b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b26:	4621      	mov	r1, r4
 8003b28:	eb12 0801 	adds.w	r8, r2, r1
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	eb43 0901 	adc.w	r9, r3, r1
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b46:	4690      	mov	r8, r2
 8003b48:	4699      	mov	r9, r3
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	eb18 0303 	adds.w	r3, r8, r3
 8003b50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b54:	462b      	mov	r3, r5
 8003b56:	eb49 0303 	adc.w	r3, r9, r3
 8003b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b72:	460b      	mov	r3, r1
 8003b74:	18db      	adds	r3, r3, r3
 8003b76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b78:	4613      	mov	r3, r2
 8003b7a:	eb42 0303 	adc.w	r3, r2, r3
 8003b7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b88:	f7fc ff48 	bl	8000a1c <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4b61      	ldr	r3, [pc, #388]	@ (8003d18 <UART_SetConfig+0x2d4>)
 8003b92:	fba3 2302 	umull	r2, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	011c      	lsls	r4, r3, #4
 8003b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ba4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ba8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bac:	4642      	mov	r2, r8
 8003bae:	464b      	mov	r3, r9
 8003bb0:	1891      	adds	r1, r2, r2
 8003bb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bb4:	415b      	adcs	r3, r3
 8003bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	eb12 0a01 	adds.w	sl, r2, r1
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	eb43 0b01 	adc.w	fp, r3, r1
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bdc:	4692      	mov	sl, r2
 8003bde:	469b      	mov	fp, r3
 8003be0:	4643      	mov	r3, r8
 8003be2:	eb1a 0303 	adds.w	r3, sl, r3
 8003be6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bea:	464b      	mov	r3, r9
 8003bec:	eb4b 0303 	adc.w	r3, fp, r3
 8003bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	18db      	adds	r3, r3, r3
 8003c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c0e:	4613      	mov	r3, r2
 8003c10:	eb42 0303 	adc.w	r3, r2, r3
 8003c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c1e:	f7fc fefd 	bl	8000a1c <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	4b3b      	ldr	r3, [pc, #236]	@ (8003d18 <UART_SetConfig+0x2d4>)
 8003c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2264      	movs	r2, #100	@ 0x64
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	1acb      	subs	r3, r1, r3
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c3e:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <UART_SetConfig+0x2d4>)
 8003c40:	fba3 2302 	umull	r2, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c4c:	441c      	add	r4, r3
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c70:	4641      	mov	r1, r8
 8003c72:	1851      	adds	r1, r2, r1
 8003c74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c76:	4649      	mov	r1, r9
 8003c78:	414b      	adcs	r3, r1
 8003c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c88:	4659      	mov	r1, fp
 8003c8a:	00cb      	lsls	r3, r1, #3
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c92:	4651      	mov	r1, sl
 8003c94:	00ca      	lsls	r2, r1, #3
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	eb42 0303 	adc.w	r3, r2, r3
 8003cac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	18db      	adds	r3, r3, r3
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cca:	4613      	mov	r3, r2
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cda:	f7fc fe9f 	bl	8000a1c <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <UART_SetConfig+0x2d4>)
 8003ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	2164      	movs	r1, #100	@ 0x64
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	3332      	adds	r3, #50	@ 0x32
 8003cf6:	4a08      	ldr	r2, [pc, #32]	@ (8003d18 <UART_SetConfig+0x2d4>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	f003 0207 	and.w	r2, r3, #7
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4422      	add	r2, r4
 8003d0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d0c:	e106      	b.n	8003f1c <UART_SetConfig+0x4d8>
 8003d0e:	bf00      	nop
 8003d10:	40011000 	.word	0x40011000
 8003d14:	40011400 	.word	0x40011400
 8003d18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d2e:	4642      	mov	r2, r8
 8003d30:	464b      	mov	r3, r9
 8003d32:	1891      	adds	r1, r2, r2
 8003d34:	6239      	str	r1, [r7, #32]
 8003d36:	415b      	adcs	r3, r3
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d3e:	4641      	mov	r1, r8
 8003d40:	1854      	adds	r4, r2, r1
 8003d42:	4649      	mov	r1, r9
 8003d44:	eb43 0501 	adc.w	r5, r3, r1
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	00eb      	lsls	r3, r5, #3
 8003d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d56:	00e2      	lsls	r2, r4, #3
 8003d58:	4614      	mov	r4, r2
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	4643      	mov	r3, r8
 8003d5e:	18e3      	adds	r3, r4, r3
 8003d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d64:	464b      	mov	r3, r9
 8003d66:	eb45 0303 	adc.w	r3, r5, r3
 8003d6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	008b      	lsls	r3, r1, #2
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d94:	4621      	mov	r1, r4
 8003d96:	008a      	lsls	r2, r1, #2
 8003d98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d9c:	f7fc fe3e 	bl	8000a1c <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4b60      	ldr	r3, [pc, #384]	@ (8003f28 <UART_SetConfig+0x4e4>)
 8003da6:	fba3 2302 	umull	r2, r3, r3, r2
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	011c      	lsls	r4, r3, #4
 8003dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003db8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003dbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	1891      	adds	r1, r2, r2
 8003dc6:	61b9      	str	r1, [r7, #24]
 8003dc8:	415b      	adcs	r3, r3
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	1851      	adds	r1, r2, r1
 8003dd4:	6139      	str	r1, [r7, #16]
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	414b      	adcs	r3, r1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de8:	4659      	mov	r1, fp
 8003dea:	00cb      	lsls	r3, r1, #3
 8003dec:	4651      	mov	r1, sl
 8003dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df2:	4651      	mov	r1, sl
 8003df4:	00ca      	lsls	r2, r1, #3
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e04:	464b      	mov	r3, r9
 8003e06:	460a      	mov	r2, r1
 8003e08:	eb42 0303 	adc.w	r3, r2, r3
 8003e0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e28:	4649      	mov	r1, r9
 8003e2a:	008b      	lsls	r3, r1, #2
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e32:	4641      	mov	r1, r8
 8003e34:	008a      	lsls	r2, r1, #2
 8003e36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e3a:	f7fc fdef 	bl	8000a1c <__aeabi_uldivmod>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	4b38      	ldr	r3, [pc, #224]	@ (8003f28 <UART_SetConfig+0x4e4>)
 8003e46:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2264      	movs	r2, #100	@ 0x64
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	1acb      	subs	r3, r1, r3
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	3332      	adds	r3, #50	@ 0x32
 8003e58:	4a33      	ldr	r2, [pc, #204]	@ (8003f28 <UART_SetConfig+0x4e4>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e64:	441c      	add	r4, r3
 8003e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e84:	4641      	mov	r1, r8
 8003e86:	1851      	adds	r1, r2, r1
 8003e88:	6039      	str	r1, [r7, #0]
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	414b      	adcs	r3, r1
 8003e8e:	607b      	str	r3, [r7, #4]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	00cb      	lsls	r3, r1, #3
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	00ca      	lsls	r2, r1, #3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	460a      	mov	r2, r1
 8003eba:	eb42 0303 	adc.w	r3, r2, r3
 8003ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eca:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ed8:	4649      	mov	r1, r9
 8003eda:	008b      	lsls	r3, r1, #2
 8003edc:	4641      	mov	r1, r8
 8003ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	008a      	lsls	r2, r1, #2
 8003ee6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003eea:	f7fc fd97 	bl	8000a1c <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <UART_SetConfig+0x4e4>)
 8003ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	2164      	movs	r1, #100	@ 0x64
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	3332      	adds	r3, #50	@ 0x32
 8003f06:	4a08      	ldr	r2, [pc, #32]	@ (8003f28 <UART_SetConfig+0x4e4>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4422      	add	r2, r4
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f28:	51eb851f 	.word	0x51eb851f

08003f2c <MPU9250_Init>:
GPIO_TypeDef *_CS_GPIO;

// <---- ------------ Main MPu9250 Functions ------------ ---->
// <---- ------------ MPU9250 Initialize ------------ ---->
MPU9250_Result MPU9250_Init(SPI_HandleTypeDef* SPIx, GPIO_TypeDef *CS_GPIOx, uint16_t CS_PinNumber, MPU9250TypeDef* datastruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80fb      	strh	r3, [r7, #6]
	_CS_GPIO = CS_GPIOx;
 8003f3c:	4a84      	ldr	r2, [pc, #528]	@ (8004150 <MPU9250_Init+0x224>)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6013      	str	r3, [r2, #0]
	_CS_PinNumber = CS_PinNumber;
 8003f42:	4a84      	ldr	r2, [pc, #528]	@ (8004154 <MPU9250_Init+0x228>)
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	8013      	strh	r3, [r2, #0]

	uint8_t WHO_AM_I = MPU9250_WHO_AM_I;
 8003f48:	2375      	movs	r3, #117	@ 0x75
 8003f4a:	75fb      	strb	r3, [r7, #23]
	uint8_t temp;
	uint8_t transmit_buffer[2]={0};
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	823b      	strh	r3, [r7, #16]

	// <---- ------------ Initialize Registers ------------ ---->
	uint8_t CLOCK_SEL_PLL = 0x01;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75bb      	strb	r3, [r7, #22]
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 8003f54:	236b      	movs	r3, #107	@ 0x6b
 8003f56:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = CLOCK_SEL_PLL;
 8003f58:	7dbb      	ldrb	r3, [r7, #22]
 8003f5a:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8003f5c:	7c3b      	ldrb	r3, [r7, #16]
 8003f5e:	7c7a      	ldrb	r2, [r7, #17]
 8003f60:	4619      	mov	r1, r3
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f934 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8003f68:	2019      	movs	r0, #25
 8003f6a:	f000 f9cc 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t I2C_MST_EN = 0x20;
 8003f6e:	2320      	movs	r3, #32
 8003f70:	757b      	strb	r3, [r7, #21]
	transmit_buffer[0] = MPU9250_USER_CTRL;
 8003f72:	236a      	movs	r3, #106	@ 0x6a
 8003f74:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = I2C_MST_EN;
 8003f76:	7d7b      	ldrb	r3, [r7, #21]
 8003f78:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8003f7a:	7c3b      	ldrb	r3, [r7, #16]
 8003f7c:	7c7a      	ldrb	r2, [r7, #17]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f925 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8003f86:	2019      	movs	r0, #25
 8003f88:	f000 f9bd 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t I2C_MST_CLK = 0x0D;
 8003f8c:	230d      	movs	r3, #13
 8003f8e:	753b      	strb	r3, [r7, #20]
	transmit_buffer[0] = I2C_MST_CTRL;
 8003f90:	2324      	movs	r3, #36	@ 0x24
 8003f92:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = I2C_MST_CLK;
 8003f94:	7d3b      	ldrb	r3, [r7, #20]
 8003f96:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8003f98:	7c3b      	ldrb	r3, [r7, #16]
 8003f9a:	7c7a      	ldrb	r2, [r7, #17]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f916 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8003fa4:	2019      	movs	r0, #25
 8003fa6:	f000 f9ae 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t PWR_RESET = 0x80;
 8003faa:	2380      	movs	r3, #128	@ 0x80
 8003fac:	74fb      	strb	r3, [r7, #19]
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 8003fae:	236b      	movs	r3, #107	@ 0x6b
 8003fb0:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = PWR_RESET;
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8003fb6:	7c3b      	ldrb	r3, [r7, #16]
 8003fb8:	7c7a      	ldrb	r2, [r7, #17]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f907 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8003fc2:	2019      	movs	r0, #25
 8003fc4:	f000 f99f 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif

	// <---- ------------ Configure PowerManagement 1 ------------ ---->
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 8003fc8:	236b      	movs	r3, #107	@ 0x6b
 8003fca:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->PWR_MGMT1;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8003fd2:	7c3b      	ldrb	r3, [r7, #16]
 8003fd4:	7c7a      	ldrb	r2, [r7, #17]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f8f9 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8003fde:	2019      	movs	r0, #25
 8003fe0:	f000 f991 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_1, 1);
 8003fe4:	f107 0112 	add.w	r1, r7, #18
 8003fe8:	2301      	movs	r3, #1
 8003fea:	226b      	movs	r2, #107	@ 0x6b
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f8b3 	bl	8004158 <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT1)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	7cbb      	ldrb	r3, [r7, #18]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <MPU9250_Init+0xd4>
		return MPU9250_RESULT_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0a3      	b.n	8004148 <MPU9250_Init+0x21c>

	// <---- ------------ Check WHO_AM_I Register ------------ ---->
	MPU9250_ReadData(SPIx, &temp, WHO_AM_I, 1);
 8004000:	7dfa      	ldrb	r2, [r7, #23]
 8004002:	f107 0112 	add.w	r1, r7, #18
 8004006:	2301      	movs	r3, #1
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f8a5 	bl	8004158 <MPU9250_ReadData>
	if(temp != MPU9250_I_AM)
 800400e:	7cbb      	ldrb	r3, [r7, #18]
 8004010:	2b71      	cmp	r3, #113	@ 0x71
 8004012:	d001      	beq.n	8004018 <MPU9250_Init+0xec>
 		return MPU9250_RESULT_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e097      	b.n	8004148 <MPU9250_Init+0x21c>
#if FreeRTOS_En
	osDelay(25);
 8004018:	2019      	movs	r0, #25
 800401a:	f000 f974 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif

	// <---- ------------ Configure PowerManagement 2 ------------ ---->
	transmit_buffer[0] = MPU9250_PWR_MGMT_2;
 800401e:	236c      	movs	r3, #108	@ 0x6c
 8004020:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->PWR_MGMT2;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004028:	7c3b      	ldrb	r3, [r7, #16]
 800402a:	7c7a      	ldrb	r2, [r7, #17]
 800402c:	4619      	mov	r1, r3
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f8ce 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004034:	2019      	movs	r0, #25
 8004036:	f000 f966 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_2, 1);
 800403a:	f107 0112 	add.w	r1, r7, #18
 800403e:	2301      	movs	r3, #1
 8004040:	226c      	movs	r2, #108	@ 0x6c
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f888 	bl	8004158 <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT2)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	785a      	ldrb	r2, [r3, #1]
 800404c:	7cbb      	ldrb	r3, [r7, #18]
 800404e:	429a      	cmp	r2, r3
 8004050:	d001      	beq.n	8004056 <MPU9250_Init+0x12a>
		return MPU9250_RESULT_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e078      	b.n	8004148 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_CONFIG;
 8004056:	231a      	movs	r3, #26
 8004058:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->Gyro_DLPF;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	789b      	ldrb	r3, [r3, #2]
 800405e:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004060:	7c3b      	ldrb	r3, [r7, #16]
 8004062:	7c7a      	ldrb	r2, [r7, #17]
 8004064:	4619      	mov	r1, r3
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f8b2 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 800406c:	2019      	movs	r0, #25
 800406e:	f000 f94a 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_CONFIG, 1);
 8004072:	f107 0112 	add.w	r1, r7, #18
 8004076:	2301      	movs	r3, #1
 8004078:	221a      	movs	r2, #26
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f86c 	bl	8004158 <MPU9250_ReadData>
	if(temp != datastruct->Gyro_DLPF)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	789a      	ldrb	r2, [r3, #2]
 8004084:	7cbb      	ldrb	r3, [r7, #18]
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <MPU9250_Init+0x162>
		return MPU9250_RESULT_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e05c      	b.n	8004148 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Gyro_Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_GYRO_CONFIG;
 800408e:	231b      	movs	r3, #27
 8004090:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = (datastruct->Gyro_Range) << 3;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	791b      	ldrb	r3, [r3, #4]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	b2db      	uxtb	r3, r3
 800409a:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 800409c:	7c3b      	ldrb	r3, [r7, #16]
 800409e:	7c7a      	ldrb	r2, [r7, #17]
 80040a0:	4619      	mov	r1, r3
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f894 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80040a8:	2019      	movs	r0, #25
 80040aa:	f000 f92c 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_GYRO_CONFIG, 1);
 80040ae:	f107 0112 	add.w	r1, r7, #18
 80040b2:	2301      	movs	r3, #1
 80040b4:	221b      	movs	r2, #27
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f84e 	bl	8004158 <MPU9250_ReadData>
	if(temp != ((datastruct->Gyro_Range) << 3))
 80040bc:	7cbb      	ldrb	r3, [r7, #18]
 80040be:	461a      	mov	r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	791b      	ldrb	r3, [r3, #4]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d001      	beq.n	80040ce <MPU9250_Init+0x1a2>
		return MPU9250_RESULT_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e03c      	b.n	8004148 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Accel Config Register 2 ------------ ---->
	transmit_buffer[0] = MPU9250_ACCEL_CONFIG_2;
 80040ce:	231d      	movs	r3, #29
 80040d0:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->Accel_DLPF;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	78db      	ldrb	r3, [r3, #3]
 80040d6:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80040d8:	7c3b      	ldrb	r3, [r7, #16]
 80040da:	7c7a      	ldrb	r2, [r7, #17]
 80040dc:	4619      	mov	r1, r3
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f876 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80040e4:	2019      	movs	r0, #25
 80040e6:	f000 f90e 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG_2, 1);
 80040ea:	f107 0112 	add.w	r1, r7, #18
 80040ee:	2301      	movs	r3, #1
 80040f0:	221d      	movs	r2, #29
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f830 	bl	8004158 <MPU9250_ReadData>
	if(temp != datastruct->Accel_DLPF)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	78da      	ldrb	r2, [r3, #3]
 80040fc:	7cbb      	ldrb	r3, [r7, #18]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d001      	beq.n	8004106 <MPU9250_Init+0x1da>
		return MPU9250_RESULT_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e020      	b.n	8004148 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Accel Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_ACCEL_CONFIG;
 8004106:	231c      	movs	r3, #28
 8004108:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = (datastruct->Accel_Range) << 3;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	795b      	ldrb	r3, [r3, #5]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	b2db      	uxtb	r3, r3
 8004112:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004114:	7c3b      	ldrb	r3, [r7, #16]
 8004116:	7c7a      	ldrb	r2, [r7, #17]
 8004118:	4619      	mov	r1, r3
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f858 	bl	80041d0 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004120:	2019      	movs	r0, #25
 8004122:	f000 f8f0 	bl	8004306 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG, 1);
 8004126:	f107 0112 	add.w	r1, r7, #18
 800412a:	2301      	movs	r3, #1
 800412c:	221c      	movs	r2, #28
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f812 	bl	8004158 <MPU9250_ReadData>
	if(temp != ((datastruct->Accel_Range) << 3))
 8004134:	7cbb      	ldrb	r3, [r7, #18]
 8004136:	461a      	mov	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	795b      	ldrb	r3, [r3, #5]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	429a      	cmp	r2, r3
 8004140:	d001      	beq.n	8004146 <MPU9250_Init+0x21a>
		return MPU9250_RESULT_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <MPU9250_Init+0x21c>

	/* Return OK */
	return MPU9250_RESULT_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000470 	.word	0x20000470
 8004154:	2000046c 	.word	0x2000046c

08004158 <MPU9250_ReadData>:

// <---- ------------ MPU9250 Read Data ------------ ---->
MPU9250_Result MPU9250_ReadData(SPI_HandleTypeDef* SPIx, uint8_t* buffer, uint8_t addr, uint8_t num)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	4611      	mov	r1, r2
 8004164:	461a      	mov	r2, r3
 8004166:	460b      	mov	r3, r1
 8004168:	71fb      	strb	r3, [r7, #7]
 800416a:	4613      	mov	r3, r2
 800416c:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004174:	b2db      	uxtb	r3, r3
 8004176:	75fb      	strb	r3, [r7, #23]
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8004178:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <MPU9250_ReadData+0x70>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a13      	ldr	r2, [pc, #76]	@ (80041cc <MPU9250_ReadData+0x74>)
 800417e:	8811      	ldrh	r1, [r2, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f7fd feca 	bl	8001f1c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8004188:	2014      	movs	r0, #20
 800418a:	f7fd fc3d 	bl	8001a08 <HAL_Delay>
	HAL_SPI_Transmit(SPIx, &reg, 1, 1000);
 800418e:	f107 0117 	add.w	r1, r7, #23
 8004192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004196:	2201      	movs	r2, #1
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7fe fc46 	bl	8002a2a <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPIx, buffer, num, 1000);
 800419e:	79bb      	ldrb	r3, [r7, #6]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7fe fd82 	bl	8002cb2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 80041ae:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <MPU9250_ReadData+0x70>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a06      	ldr	r2, [pc, #24]	@ (80041cc <MPU9250_ReadData+0x74>)
 80041b4:	8811      	ldrh	r1, [r2, #0]
 80041b6:	2201      	movs	r2, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd feaf 	bl	8001f1c <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000470 	.word	0x20000470
 80041cc:	2000046c 	.word	0x2000046c

080041d0 <MPU9250_WriteData>:

// <---- ------------ MPU9250 Write Data ------------ ---->
MPU9250_Result MPU9250_WriteData(SPI_HandleTypeDef* SPIx, uint8_t addr, uint8_t data)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
 80041dc:	4613      	mov	r3, r2
 80041de:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {addr, data};
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	733b      	strb	r3, [r7, #12]
 80041e4:	78bb      	ldrb	r3, [r7, #2]
 80041e6:	737b      	strb	r3, [r7, #13]
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 80041e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004228 <MPU9250_WriteData+0x58>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a0f      	ldr	r2, [pc, #60]	@ (800422c <MPU9250_WriteData+0x5c>)
 80041ee:	8811      	ldrh	r1, [r2, #0]
 80041f0:	2200      	movs	r2, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd fe92 	bl	8001f1c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80041f8:	2014      	movs	r0, #20
 80041fa:	f7fd fc05 	bl	8001a08 <HAL_Delay>
	HAL_SPI_Transmit(SPIx, buffer, 2, 1000);
 80041fe:	f107 010c 	add.w	r1, r7, #12
 8004202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004206:	2202      	movs	r2, #2
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fe fc0e 	bl	8002a2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 800420e:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <MPU9250_WriteData+0x58>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a06      	ldr	r2, [pc, #24]	@ (800422c <MPU9250_WriteData+0x5c>)
 8004214:	8811      	ldrh	r1, [r2, #0]
 8004216:	2201      	movs	r2, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f7fd fe7f 	bl	8001f1c <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20000470 	.word	0x20000470
 800422c:	2000046c 	.word	0x2000046c

08004230 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800423e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004242:	2b84      	cmp	r3, #132	@ 0x84
 8004244:	d005      	beq.n	8004252 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004246:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	3303      	adds	r3, #3
 8004250:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004252:	68fb      	ldr	r3, [r7, #12]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004264:	f000 fc66 	bl	8004b34 <vTaskStartScheduler>
  
  return osOK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	bd80      	pop	{r7, pc}

0800426e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800426e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004270:	b089      	sub	sp, #36	@ 0x24
 8004272:	af04      	add	r7, sp, #16
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <osThreadCreate+0x54>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01c      	beq.n	80042c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685c      	ldr	r4, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691e      	ldr	r6, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff ffc8 	bl	8004230 <makeFreeRtosPriority>
 80042a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042aa:	9202      	str	r2, [sp, #8]
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	9100      	str	r1, [sp, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	4632      	mov	r2, r6
 80042b4:	4629      	mov	r1, r5
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 fa57 	bl	800476a <xTaskCreateStatic>
 80042bc:	4603      	mov	r3, r0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	e01c      	b.n	80042fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685c      	ldr	r4, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff ffaa 	bl	8004230 <makeFreeRtosPriority>
 80042dc:	4602      	mov	r2, r0
 80042de:	f107 030c 	add.w	r3, r7, #12
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	9200      	str	r2, [sp, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	4632      	mov	r2, r6
 80042ea:	4629      	mov	r1, r5
 80042ec:	4620      	mov	r0, r4
 80042ee:	f000 fa9c 	bl	800482a <xTaskCreate>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042fc:	68fb      	ldr	r3, [r7, #12]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004306 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <osDelay+0x16>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	e000      	b.n	800431e <osDelay+0x18>
 800431c:	2301      	movs	r3, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fbd2 	bl	8004ac8 <vTaskDelay>
  
  return osOK;
 8004324:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800432e:	b590      	push	{r4, r7, lr}
 8004330:	b085      	sub	sp, #20
 8004332:	af02      	add	r7, sp, #8
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d011      	beq.n	8004364 <osMessageCreate+0x36>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2400      	movs	r4, #0
 800435a:	9400      	str	r4, [sp, #0]
 800435c:	f000 f92e 	bl	80045bc <xQueueGenericCreateStatic>
 8004360:	4603      	mov	r3, r0
 8004362:	e008      	b.n	8004376 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	4619      	mov	r1, r3
 8004370:	f000 f9a1 	bl	80046b6 <xQueueGenericCreate>
 8004374:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bd90      	pop	{r4, r7, pc}

0800437e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f103 0208 	add.w	r2, r3, #8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f04f 32ff 	mov.w	r2, #4294967295
 8004396:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f103 0208 	add.w	r2, r3, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f103 0208 	add.w	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d103      	bne.n	8004440 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e00c      	b.n	800445a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3308      	adds	r3, #8
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e002      	b.n	800444e <vListInsert+0x2e>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	d2f6      	bcs.n	8004448 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6852      	ldr	r2, [r2, #4]
 80044b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d103      	bne.n	80044c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	1e5a      	subs	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10b      	bne.n	8004514 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004514:	f001 f818 	bl	8005548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	441a      	add	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004544:	3b01      	subs	r3, #1
 8004546:	68f9      	ldr	r1, [r7, #12]
 8004548:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800454a:	fb01 f303 	mul.w	r3, r1, r3
 800454e:	441a      	add	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	22ff      	movs	r2, #255	@ 0xff
 8004558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	22ff      	movs	r2, #255	@ 0xff
 8004560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d114      	bne.n	8004594 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01a      	beq.n	80045a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3310      	adds	r3, #16
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fd10 	bl	8004f9c <xTaskRemoveFromEventList>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d012      	beq.n	80045a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004582:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <xQueueGenericReset+0xd0>)
 8004584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	e009      	b.n	80045a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3310      	adds	r3, #16
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fef0 	bl	800437e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3324      	adds	r3, #36	@ 0x24
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff feeb 	bl	800437e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045a8:	f001 f800 	bl	80055ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045ac:	2301      	movs	r3, #1
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08e      	sub	sp, #56	@ 0x38
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <xQueueGenericCreateStatic+0x56>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <xQueueGenericCreateStatic+0x5a>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <xQueueGenericCreateStatic+0x5c>
 8004616:	2300      	movs	r3, #0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	623b      	str	r3, [r7, #32]
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	e7fd      	b.n	8004630 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <xQueueGenericCreateStatic+0x84>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <xQueueGenericCreateStatic+0x88>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <xQueueGenericCreateStatic+0x8a>
 8004644:	2300      	movs	r3, #0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	61fb      	str	r3, [r7, #28]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004662:	2348      	movs	r3, #72	@ 0x48
 8004664:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b48      	cmp	r3, #72	@ 0x48
 800466a:	d00b      	beq.n	8004684 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	61bb      	str	r3, [r7, #24]
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004684:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004698:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f840 	bl	800472c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3730      	adds	r7, #48	@ 0x30
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08a      	sub	sp, #40	@ 0x28
 80046ba:	af02      	add	r7, sp, #8
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	613b      	str	r3, [r7, #16]
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	e7fd      	b.n	80046de <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	3348      	adds	r3, #72	@ 0x48
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 f809 	bl	8005708 <pvPortMalloc>
 80046f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d011      	beq.n	8004722 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	3348      	adds	r3, #72	@ 0x48
 8004706:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004710:	79fa      	ldrb	r2, [r7, #7]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f805 	bl	800472c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004722:	69bb      	ldr	r3, [r7, #24]
	}
 8004724:	4618      	mov	r0, r3
 8004726:	3720      	adds	r7, #32
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e002      	b.n	800474e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800475a:	2101      	movs	r1, #1
 800475c:	69b8      	ldr	r0, [r7, #24]
 800475e:	f7ff fec3 	bl	80044e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800476a:	b580      	push	{r7, lr}
 800476c:	b08e      	sub	sp, #56	@ 0x38
 800476e:	af04      	add	r7, sp, #16
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <xTaskCreateStatic+0x2c>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	623b      	str	r3, [r7, #32]
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	61fb      	str	r3, [r7, #28]
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047b4:	23a0      	movs	r3, #160	@ 0xa0
 80047b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80047bc:	d00b      	beq.n	80047d6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	61bb      	str	r3, [r7, #24]
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	e7fd      	b.n	80047d2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01e      	beq.n	800481c <xTaskCreateStatic+0xb2>
 80047de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047ec:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047f6:	2300      	movs	r3, #0
 80047f8:	9303      	str	r3, [sp, #12]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	9302      	str	r3, [sp, #8]
 80047fe:	f107 0314 	add.w	r3, r7, #20
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f850 	bl	80048b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004814:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004816:	f000 f8ed 	bl	80049f4 <prvAddNewTaskToReadyList>
 800481a:	e001      	b.n	8004820 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004820:	697b      	ldr	r3, [r7, #20]
	}
 8004822:	4618      	mov	r0, r3
 8004824:	3728      	adds	r7, #40	@ 0x28
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800482a:	b580      	push	{r7, lr}
 800482c:	b08c      	sub	sp, #48	@ 0x30
 800482e:	af04      	add	r7, sp, #16
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 ff62 	bl	8005708 <pvPortMalloc>
 8004844:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00e      	beq.n	800486a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800484c:	20a0      	movs	r0, #160	@ 0xa0
 800484e:	f000 ff5b 	bl	8005708 <pvPortMalloc>
 8004852:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004860:	e005      	b.n	800486e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004862:	6978      	ldr	r0, [r7, #20]
 8004864:	f001 f81e 	bl	80058a4 <vPortFree>
 8004868:	e001      	b.n	800486e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d017      	beq.n	80048a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	2300      	movs	r3, #0
 8004880:	9303      	str	r3, [sp, #12]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	9302      	str	r3, [sp, #8]
 8004886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f80e 	bl	80048b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004898:	69f8      	ldr	r0, [r7, #28]
 800489a:	f000 f8ab 	bl	80049f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800489e:	2301      	movs	r3, #1
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e002      	b.n	80048aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048aa:	69bb      	ldr	r3, [r7, #24]
	}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048cc:	3b01      	subs	r3, #1
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f023 0307 	bic.w	r3, r3, #7
 80048da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <prvInitialiseNewTask+0x4a>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	617b      	str	r3, [r7, #20]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01f      	beq.n	8004944 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	e012      	b.n	8004930 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	7819      	ldrb	r1, [r3, #0]
 8004912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	3334      	adds	r3, #52	@ 0x34
 800491a:	460a      	mov	r2, r1
 800491c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3301      	adds	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b0f      	cmp	r3, #15
 8004934:	d9e9      	bls.n	800490a <prvInitialiseNewTask+0x56>
 8004936:	e000      	b.n	800493a <prvInitialiseNewTask+0x86>
			{
				break;
 8004938:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004942:	e003      	b.n	800494c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494e:	2b06      	cmp	r3, #6
 8004950:	d901      	bls.n	8004956 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004952:	2306      	movs	r3, #6
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004958:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800495a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800495c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004960:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	2200      	movs	r2, #0
 8004966:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	3304      	adds	r3, #4
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fd26 	bl	80043be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004974:	3318      	adds	r3, #24
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fd21 	bl	80043be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004980:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	f1c3 0207 	rsb	r2, r3, #7
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004990:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	2200      	movs	r2, #0
 8004996:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	2200      	movs	r2, #0
 800499e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	334c      	adds	r3, #76	@ 0x4c
 80049a6:	224c      	movs	r2, #76	@ 0x4c
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f89a 	bl	8005ae4 <memset>
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	4a0d      	ldr	r2, [pc, #52]	@ (80049e8 <prvInitialiseNewTask+0x134>)
 80049b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	4a0c      	ldr	r2, [pc, #48]	@ (80049ec <prvInitialiseNewTask+0x138>)
 80049ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	4a0c      	ldr	r2, [pc, #48]	@ (80049f0 <prvInitialiseNewTask+0x13c>)
 80049c0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	68f9      	ldr	r1, [r7, #12]
 80049c6:	69b8      	ldr	r0, [r7, #24]
 80049c8:	f000 fc8e 	bl	80052e8 <pxPortInitialiseStack>
 80049cc:	4602      	mov	r2, r0
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049de:	bf00      	nop
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	200041c8 	.word	0x200041c8
 80049ec:	20004230 	.word	0x20004230
 80049f0:	20004298 	.word	0x20004298

080049f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049fc:	f000 fda4 	bl	8005548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a00:	4b2a      	ldr	r3, [pc, #168]	@ (8004aac <prvAddNewTaskToReadyList+0xb8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	4a29      	ldr	r2, [pc, #164]	@ (8004aac <prvAddNewTaskToReadyList+0xb8>)
 8004a08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a0a:	4b29      	ldr	r3, [pc, #164]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a12:	4a27      	ldr	r2, [pc, #156]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a18:	4b24      	ldr	r3, [pc, #144]	@ (8004aac <prvAddNewTaskToReadyList+0xb8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d110      	bne.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a20:	f000 fb38 	bl	8005094 <prvInitialiseTaskLists>
 8004a24:	e00d      	b.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a26:	4b23      	ldr	r3, [pc, #140]	@ (8004ab4 <prvAddNewTaskToReadyList+0xc0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a2e:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d802      	bhi.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a42:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	2201      	movs	r2, #1
 8004a52:	409a      	lsls	r2, r3
 8004a54:	4b19      	ldr	r3, [pc, #100]	@ (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	4a18      	ldr	r2, [pc, #96]	@ (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ac0 <prvAddNewTaskToReadyList+0xcc>)
 8004a6c:	441a      	add	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	4610      	mov	r0, r2
 8004a76:	f7ff fcaf 	bl	80043d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a7a:	f000 fd97 	bl	80055ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <prvAddNewTaskToReadyList+0xc0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00e      	beq.n	8004aa4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a86:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d207      	bcs.n	8004aa4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <prvAddNewTaskToReadyList+0xd0>)
 8004a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000574 	.word	0x20000574
 8004ab0:	20000474 	.word	0x20000474
 8004ab4:	20000580 	.word	0x20000580
 8004ab8:	20000590 	.word	0x20000590
 8004abc:	2000057c 	.word	0x2000057c
 8004ac0:	20000478 	.word	0x20000478
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d018      	beq.n	8004b0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ada:	4b14      	ldr	r3, [pc, #80]	@ (8004b2c <vTaskDelay+0x64>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <vTaskDelay+0x32>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	60bb      	str	r3, [r7, #8]
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	e7fd      	b.n	8004af6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004afa:	f000 f885 	bl	8004c08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004afe:	2100      	movs	r1, #0
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fb8b 	bl	800521c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b06:	f000 f88d 	bl	8004c24 <xTaskResumeAll>
 8004b0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d107      	bne.n	8004b22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b12:	4b07      	ldr	r3, [pc, #28]	@ (8004b30 <vTaskDelay+0x68>)
 8004b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2000059c 	.word	0x2000059c
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	@ 0x28
 8004b38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b42:	463a      	mov	r2, r7
 8004b44:	1d39      	adds	r1, r7, #4
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fc f8de 	bl	8000d0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	9202      	str	r2, [sp, #8]
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	460a      	mov	r2, r1
 8004b62:	4921      	ldr	r1, [pc, #132]	@ (8004be8 <vTaskStartScheduler+0xb4>)
 8004b64:	4821      	ldr	r0, [pc, #132]	@ (8004bec <vTaskStartScheduler+0xb8>)
 8004b66:	f7ff fe00 	bl	800476a <xTaskCreateStatic>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4a20      	ldr	r2, [pc, #128]	@ (8004bf0 <vTaskStartScheduler+0xbc>)
 8004b6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b70:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf0 <vTaskStartScheduler+0xbc>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e001      	b.n	8004b82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d11b      	bne.n	8004bc0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	613b      	str	r3, [r7, #16]
}
 8004b9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b9c:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <vTaskStartScheduler+0xc0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	334c      	adds	r3, #76	@ 0x4c
 8004ba2:	4a15      	ldr	r2, [pc, #84]	@ (8004bf8 <vTaskStartScheduler+0xc4>)
 8004ba4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ba6:	4b15      	ldr	r3, [pc, #84]	@ (8004bfc <vTaskStartScheduler+0xc8>)
 8004ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bae:	4b14      	ldr	r3, [pc, #80]	@ (8004c00 <vTaskStartScheduler+0xcc>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004bb4:	4b13      	ldr	r3, [pc, #76]	@ (8004c04 <vTaskStartScheduler+0xd0>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bba:	f000 fc21 	bl	8005400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bbe:	e00f      	b.n	8004be0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d10b      	bne.n	8004be0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60fb      	str	r3, [r7, #12]
}
 8004bda:	bf00      	nop
 8004bdc:	bf00      	nop
 8004bde:	e7fd      	b.n	8004bdc <vTaskStartScheduler+0xa8>
}
 8004be0:	bf00      	nop
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	0800605c 	.word	0x0800605c
 8004bec:	08005065 	.word	0x08005065
 8004bf0:	20000598 	.word	0x20000598
 8004bf4:	20000474 	.word	0x20000474
 8004bf8:	20000014 	.word	0x20000014
 8004bfc:	20000594 	.word	0x20000594
 8004c00:	20000580 	.word	0x20000580
 8004c04:	20000578 	.word	0x20000578

08004c08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <vTaskSuspendAll+0x18>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	4a03      	ldr	r2, [pc, #12]	@ (8004c20 <vTaskSuspendAll+0x18>)
 8004c14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c16:	bf00      	nop
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	2000059c 	.word	0x2000059c

08004c24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c32:	4b42      	ldr	r3, [pc, #264]	@ (8004d3c <xTaskResumeAll+0x118>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <xTaskResumeAll+0x2e>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	603b      	str	r3, [r7, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c52:	f000 fc79 	bl	8005548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c56:	4b39      	ldr	r3, [pc, #228]	@ (8004d3c <xTaskResumeAll+0x118>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	4a37      	ldr	r2, [pc, #220]	@ (8004d3c <xTaskResumeAll+0x118>)
 8004c5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c60:	4b36      	ldr	r3, [pc, #216]	@ (8004d3c <xTaskResumeAll+0x118>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d161      	bne.n	8004d2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c68:	4b35      	ldr	r3, [pc, #212]	@ (8004d40 <xTaskResumeAll+0x11c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d05d      	beq.n	8004d2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c70:	e02e      	b.n	8004cd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c72:	4b34      	ldr	r3, [pc, #208]	@ (8004d44 <xTaskResumeAll+0x120>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3318      	adds	r3, #24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fc07 	bl	8004492 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fc02 	bl	8004492 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c92:	2201      	movs	r2, #1
 8004c94:	409a      	lsls	r2, r3
 8004c96:	4b2c      	ldr	r3, [pc, #176]	@ (8004d48 <xTaskResumeAll+0x124>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d48 <xTaskResumeAll+0x124>)
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4a27      	ldr	r2, [pc, #156]	@ (8004d4c <xTaskResumeAll+0x128>)
 8004cae:	441a      	add	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f7ff fb8e 	bl	80043d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc0:	4b23      	ldr	r3, [pc, #140]	@ (8004d50 <xTaskResumeAll+0x12c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004cca:	4b22      	ldr	r3, [pc, #136]	@ (8004d54 <xTaskResumeAll+0x130>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d44 <xTaskResumeAll+0x120>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1cc      	bne.n	8004c72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cde:	f000 fa7d 	bl	80051dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <xTaskResumeAll+0x134>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d010      	beq.n	8004d10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cee:	f000 f837 	bl	8004d60 <xTaskIncrementTick>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004cf8:	4b16      	ldr	r3, [pc, #88]	@ (8004d54 <xTaskResumeAll+0x130>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f1      	bne.n	8004cee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d0a:	4b13      	ldr	r3, [pc, #76]	@ (8004d58 <xTaskResumeAll+0x134>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d10:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <xTaskResumeAll+0x130>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d5c <xTaskResumeAll+0x138>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d2c:	f000 fc3e 	bl	80055ac <vPortExitCritical>

	return xAlreadyYielded;
 8004d30:	68bb      	ldr	r3, [r7, #8]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	2000059c 	.word	0x2000059c
 8004d40:	20000574 	.word	0x20000574
 8004d44:	20000534 	.word	0x20000534
 8004d48:	2000057c 	.word	0x2000057c
 8004d4c:	20000478 	.word	0x20000478
 8004d50:	20000474 	.word	0x20000474
 8004d54:	20000588 	.word	0x20000588
 8004d58:	20000584 	.word	0x20000584
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea8 <xTaskIncrementTick+0x148>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f040 808f 	bne.w	8004e92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d74:	4b4d      	ldr	r3, [pc, #308]	@ (8004eac <xTaskIncrementTick+0x14c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d7c:	4a4b      	ldr	r2, [pc, #300]	@ (8004eac <xTaskIncrementTick+0x14c>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d121      	bne.n	8004dcc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d88:	4b49      	ldr	r3, [pc, #292]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	603b      	str	r3, [r7, #0]
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	e7fd      	b.n	8004da6 <xTaskIncrementTick+0x46>
 8004daa:	4b41      	ldr	r3, [pc, #260]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	4b40      	ldr	r3, [pc, #256]	@ (8004eb4 <xTaskIncrementTick+0x154>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb4 <xTaskIncrementTick+0x154>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb8 <xTaskIncrementTick+0x158>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8004eb8 <xTaskIncrementTick+0x158>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	f000 fa08 	bl	80051dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <xTaskIncrementTick+0x15c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d348      	bcc.n	8004e68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dd6:	4b36      	ldr	r3, [pc, #216]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de0:	4b36      	ldr	r3, [pc, #216]	@ (8004ebc <xTaskIncrementTick+0x15c>)
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295
 8004de6:	601a      	str	r2, [r3, #0]
					break;
 8004de8:	e03e      	b.n	8004e68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dea:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d203      	bcs.n	8004e0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e02:	4a2e      	ldr	r2, [pc, #184]	@ (8004ebc <xTaskIncrementTick+0x15c>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e08:	e02e      	b.n	8004e68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fb3f 	bl	8004492 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	3318      	adds	r3, #24
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fb36 	bl	8004492 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <xTaskIncrementTick+0x160>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	4a22      	ldr	r2, [pc, #136]	@ (8004ec0 <xTaskIncrementTick+0x160>)
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec4 <xTaskIncrementTick+0x164>)
 8004e46:	441a      	add	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f7ff fac2 	bl	80043d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <xTaskIncrementTick+0x168>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d3b9      	bcc.n	8004dd6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e62:	2301      	movs	r3, #1
 8004e64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e66:	e7b6      	b.n	8004dd6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e68:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <xTaskIncrementTick+0x168>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6e:	4915      	ldr	r1, [pc, #84]	@ (8004ec4 <xTaskIncrementTick+0x164>)
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d901      	bls.n	8004e84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e84:	4b11      	ldr	r3, [pc, #68]	@ (8004ecc <xTaskIncrementTick+0x16c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e004      	b.n	8004e9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e92:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed0 <xTaskIncrementTick+0x170>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed0 <xTaskIncrementTick+0x170>)
 8004e9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e9c:	697b      	ldr	r3, [r7, #20]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000059c 	.word	0x2000059c
 8004eac:	20000578 	.word	0x20000578
 8004eb0:	2000052c 	.word	0x2000052c
 8004eb4:	20000530 	.word	0x20000530
 8004eb8:	2000058c 	.word	0x2000058c
 8004ebc:	20000594 	.word	0x20000594
 8004ec0:	2000057c 	.word	0x2000057c
 8004ec4:	20000478 	.word	0x20000478
 8004ec8:	20000474 	.word	0x20000474
 8004ecc:	20000588 	.word	0x20000588
 8004ed0:	20000584 	.word	0x20000584

08004ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004eda:	4b2a      	ldr	r3, [pc, #168]	@ (8004f84 <vTaskSwitchContext+0xb0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ee2:	4b29      	ldr	r3, [pc, #164]	@ (8004f88 <vTaskSwitchContext+0xb4>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ee8:	e045      	b.n	8004f76 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004eea:	4b27      	ldr	r3, [pc, #156]	@ (8004f88 <vTaskSwitchContext+0xb4>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef0:	4b26      	ldr	r3, [pc, #152]	@ (8004f8c <vTaskSwitchContext+0xb8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	fab3 f383 	clz	r3, r3
 8004efc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004efe:	7afb      	ldrb	r3, [r7, #11]
 8004f00:	f1c3 031f 	rsb	r3, r3, #31
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	4922      	ldr	r1, [pc, #136]	@ (8004f90 <vTaskSwitchContext+0xbc>)
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	607b      	str	r3, [r7, #4]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <vTaskSwitchContext+0x5a>
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4a14      	ldr	r2, [pc, #80]	@ (8004f90 <vTaskSwitchContext+0xbc>)
 8004f3e:	4413      	add	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	605a      	str	r2, [r3, #4]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3308      	adds	r3, #8
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d104      	bne.n	8004f62 <vTaskSwitchContext+0x8e>
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4a0a      	ldr	r2, [pc, #40]	@ (8004f94 <vTaskSwitchContext+0xc0>)
 8004f6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f6c:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <vTaskSwitchContext+0xc0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	334c      	adds	r3, #76	@ 0x4c
 8004f72:	4a09      	ldr	r2, [pc, #36]	@ (8004f98 <vTaskSwitchContext+0xc4>)
 8004f74:	6013      	str	r3, [r2, #0]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	2000059c 	.word	0x2000059c
 8004f88:	20000588 	.word	0x20000588
 8004f8c:	2000057c 	.word	0x2000057c
 8004f90:	20000478 	.word	0x20000478
 8004f94:	20000474 	.word	0x20000474
 8004f98:	20000014 	.word	0x20000014

08004f9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60fb      	str	r3, [r7, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3318      	adds	r3, #24
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fa5f 	bl	8004492 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800504c <xTaskRemoveFromEventList+0xb0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d11c      	bne.n	8005016 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fa56 	bl	8004492 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	2201      	movs	r2, #1
 8004fec:	409a      	lsls	r2, r3
 8004fee:	4b18      	ldr	r3, [pc, #96]	@ (8005050 <xTaskRemoveFromEventList+0xb4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	4a16      	ldr	r2, [pc, #88]	@ (8005050 <xTaskRemoveFromEventList+0xb4>)
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4a13      	ldr	r2, [pc, #76]	@ (8005054 <xTaskRemoveFromEventList+0xb8>)
 8005006:	441a      	add	r2, r3
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7ff f9e2 	bl	80043d8 <vListInsertEnd>
 8005014:	e005      	b.n	8005022 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	3318      	adds	r3, #24
 800501a:	4619      	mov	r1, r3
 800501c:	480e      	ldr	r0, [pc, #56]	@ (8005058 <xTaskRemoveFromEventList+0xbc>)
 800501e:	f7ff f9db 	bl	80043d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <xTaskRemoveFromEventList+0xc0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	429a      	cmp	r2, r3
 800502e:	d905      	bls.n	800503c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005034:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <xTaskRemoveFromEventList+0xc4>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e001      	b.n	8005040 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005040:	697b      	ldr	r3, [r7, #20]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	2000059c 	.word	0x2000059c
 8005050:	2000057c 	.word	0x2000057c
 8005054:	20000478 	.word	0x20000478
 8005058:	20000534 	.word	0x20000534
 800505c:	20000474 	.word	0x20000474
 8005060:	20000588 	.word	0x20000588

08005064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800506c:	f000 f852 	bl	8005114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005070:	4b06      	ldr	r3, [pc, #24]	@ (800508c <prvIdleTask+0x28>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d9f9      	bls.n	800506c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005078:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <prvIdleTask+0x2c>)
 800507a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005088:	e7f0      	b.n	800506c <prvIdleTask+0x8>
 800508a:	bf00      	nop
 800508c:	20000478 	.word	0x20000478
 8005090:	e000ed04 	.word	0xe000ed04

08005094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800509a:	2300      	movs	r3, #0
 800509c:	607b      	str	r3, [r7, #4]
 800509e:	e00c      	b.n	80050ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4a12      	ldr	r2, [pc, #72]	@ (80050f4 <prvInitialiseTaskLists+0x60>)
 80050ac:	4413      	add	r3, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff f965 	bl	800437e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3301      	adds	r3, #1
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b06      	cmp	r3, #6
 80050be:	d9ef      	bls.n	80050a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050c0:	480d      	ldr	r0, [pc, #52]	@ (80050f8 <prvInitialiseTaskLists+0x64>)
 80050c2:	f7ff f95c 	bl	800437e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050c6:	480d      	ldr	r0, [pc, #52]	@ (80050fc <prvInitialiseTaskLists+0x68>)
 80050c8:	f7ff f959 	bl	800437e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050cc:	480c      	ldr	r0, [pc, #48]	@ (8005100 <prvInitialiseTaskLists+0x6c>)
 80050ce:	f7ff f956 	bl	800437e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050d2:	480c      	ldr	r0, [pc, #48]	@ (8005104 <prvInitialiseTaskLists+0x70>)
 80050d4:	f7ff f953 	bl	800437e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050d8:	480b      	ldr	r0, [pc, #44]	@ (8005108 <prvInitialiseTaskLists+0x74>)
 80050da:	f7ff f950 	bl	800437e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050de:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <prvInitialiseTaskLists+0x78>)
 80050e0:	4a05      	ldr	r2, [pc, #20]	@ (80050f8 <prvInitialiseTaskLists+0x64>)
 80050e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <prvInitialiseTaskLists+0x7c>)
 80050e6:	4a05      	ldr	r2, [pc, #20]	@ (80050fc <prvInitialiseTaskLists+0x68>)
 80050e8:	601a      	str	r2, [r3, #0]
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000478 	.word	0x20000478
 80050f8:	20000504 	.word	0x20000504
 80050fc:	20000518 	.word	0x20000518
 8005100:	20000534 	.word	0x20000534
 8005104:	20000548 	.word	0x20000548
 8005108:	20000560 	.word	0x20000560
 800510c:	2000052c 	.word	0x2000052c
 8005110:	20000530 	.word	0x20000530

08005114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800511a:	e019      	b.n	8005150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800511c:	f000 fa14 	bl	8005548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005120:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <prvCheckTasksWaitingTermination+0x50>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff f9b0 	bl	8004492 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005132:	4b0d      	ldr	r3, [pc, #52]	@ (8005168 <prvCheckTasksWaitingTermination+0x54>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3b01      	subs	r3, #1
 8005138:	4a0b      	ldr	r2, [pc, #44]	@ (8005168 <prvCheckTasksWaitingTermination+0x54>)
 800513a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <prvCheckTasksWaitingTermination+0x58>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3b01      	subs	r3, #1
 8005142:	4a0a      	ldr	r2, [pc, #40]	@ (800516c <prvCheckTasksWaitingTermination+0x58>)
 8005144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005146:	f000 fa31 	bl	80055ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f810 	bl	8005170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005150:	4b06      	ldr	r3, [pc, #24]	@ (800516c <prvCheckTasksWaitingTermination+0x58>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e1      	bne.n	800511c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000548 	.word	0x20000548
 8005168:	20000574 	.word	0x20000574
 800516c:	2000055c 	.word	0x2000055c

08005170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	334c      	adds	r3, #76	@ 0x4c
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fcb9 	bl	8005af4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005188:	2b00      	cmp	r3, #0
 800518a:	d108      	bne.n	800519e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fb87 	bl	80058a4 <vPortFree>
				vPortFree( pxTCB );
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fb84 	bl	80058a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800519c:	e019      	b.n	80051d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d103      	bne.n	80051b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fb7b 	bl	80058a4 <vPortFree>
	}
 80051ae:	e010      	b.n	80051d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d00b      	beq.n	80051d2 <prvDeleteTCB+0x62>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	60fb      	str	r3, [r7, #12]
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <prvDeleteTCB+0x5e>
	}
 80051d2:	bf00      	nop
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <prvResetNextTaskUnblockTime+0x38>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d104      	bne.n	80051f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005218 <prvResetNextTaskUnblockTime+0x3c>)
 80051ee:	f04f 32ff 	mov.w	r2, #4294967295
 80051f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051f4:	e008      	b.n	8005208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f6:	4b07      	ldr	r3, [pc, #28]	@ (8005214 <prvResetNextTaskUnblockTime+0x38>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4a04      	ldr	r2, [pc, #16]	@ (8005218 <prvResetNextTaskUnblockTime+0x3c>)
 8005206:	6013      	str	r3, [r2, #0]
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	2000052c 	.word	0x2000052c
 8005218:	20000594 	.word	0x20000594

0800521c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005226:	4b29      	ldr	r3, [pc, #164]	@ (80052cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800522c:	4b28      	ldr	r3, [pc, #160]	@ (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3304      	adds	r3, #4
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f92d 	bl	8004492 <uxListRemove>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800523e:	4b24      	ldr	r3, [pc, #144]	@ (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	2201      	movs	r2, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43da      	mvns	r2, r3
 800524c:	4b21      	ldr	r3, [pc, #132]	@ (80052d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4013      	ands	r3, r2
 8005252:	4a20      	ldr	r2, [pc, #128]	@ (80052d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005254:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d10a      	bne.n	8005274 <prvAddCurrentTaskToDelayedList+0x58>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005264:	4b1a      	ldr	r3, [pc, #104]	@ (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3304      	adds	r3, #4
 800526a:	4619      	mov	r1, r3
 800526c:	481a      	ldr	r0, [pc, #104]	@ (80052d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800526e:	f7ff f8b3 	bl	80043d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005272:	e026      	b.n	80052c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4413      	add	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800527c:	4b14      	ldr	r3, [pc, #80]	@ (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	429a      	cmp	r2, r3
 800528a:	d209      	bcs.n	80052a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800528c:	4b13      	ldr	r3, [pc, #76]	@ (80052dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b0f      	ldr	r3, [pc, #60]	@ (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3304      	adds	r3, #4
 8005296:	4619      	mov	r1, r3
 8005298:	4610      	mov	r0, r2
 800529a:	f7ff f8c1 	bl	8004420 <vListInsert>
}
 800529e:	e010      	b.n	80052c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052a0:	4b0f      	ldr	r3, [pc, #60]	@ (80052e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7ff f8b7 	bl	8004420 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052b2:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d202      	bcs.n	80052c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052bc:	4a09      	ldr	r2, [pc, #36]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6013      	str	r3, [r2, #0]
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000578 	.word	0x20000578
 80052d0:	20000474 	.word	0x20000474
 80052d4:	2000057c 	.word	0x2000057c
 80052d8:	20000560 	.word	0x20000560
 80052dc:	20000530 	.word	0x20000530
 80052e0:	2000052c 	.word	0x2000052c
 80052e4:	20000594 	.word	0x20000594

080052e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3b04      	subs	r3, #4
 80052f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b04      	subs	r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f023 0201 	bic.w	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3b04      	subs	r3, #4
 8005316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005318:	4a0c      	ldr	r2, [pc, #48]	@ (800534c <pxPortInitialiseStack+0x64>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b14      	subs	r3, #20
 8005322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3b04      	subs	r3, #4
 800532e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f06f 0202 	mvn.w	r2, #2
 8005336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3b20      	subs	r3, #32
 800533c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800533e:	68fb      	ldr	r3, [r7, #12]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	08005351 	.word	0x08005351

08005350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800535a:	4b13      	ldr	r3, [pc, #76]	@ (80053a8 <prvTaskExitError+0x58>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d00b      	beq.n	800537c <prvTaskExitError+0x2c>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	60fb      	str	r3, [r7, #12]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <prvTaskExitError+0x28>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60bb      	str	r3, [r7, #8]
}
 800538e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005390:	bf00      	nop
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0fc      	beq.n	8005392 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000010 	.word	0x20000010
 80053ac:	00000000 	.word	0x00000000

080053b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053b0:	4b07      	ldr	r3, [pc, #28]	@ (80053d0 <pxCurrentTCBConst2>)
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	6808      	ldr	r0, [r1, #0]
 80053b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ba:	f380 8809 	msr	PSP, r0
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8811 	msr	BASEPRI, r0
 80053ca:	4770      	bx	lr
 80053cc:	f3af 8000 	nop.w

080053d0 <pxCurrentTCBConst2>:
 80053d0:	20000474 	.word	0x20000474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053d8:	4808      	ldr	r0, [pc, #32]	@ (80053fc <prvPortStartFirstTask+0x24>)
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	6800      	ldr	r0, [r0, #0]
 80053de:	f380 8808 	msr	MSP, r0
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8814 	msr	CONTROL, r0
 80053ea:	b662      	cpsie	i
 80053ec:	b661      	cpsie	f
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	df00      	svc	0
 80053f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053fa:	bf00      	nop
 80053fc:	e000ed08 	.word	0xe000ed08

08005400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005406:	4b47      	ldr	r3, [pc, #284]	@ (8005524 <xPortStartScheduler+0x124>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a47      	ldr	r2, [pc, #284]	@ (8005528 <xPortStartScheduler+0x128>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d10b      	bne.n	8005428 <xPortStartScheduler+0x28>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	613b      	str	r3, [r7, #16]
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005428:	4b3e      	ldr	r3, [pc, #248]	@ (8005524 <xPortStartScheduler+0x124>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3f      	ldr	r2, [pc, #252]	@ (800552c <xPortStartScheduler+0x12c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d10b      	bne.n	800544a <xPortStartScheduler+0x4a>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60fb      	str	r3, [r7, #12]
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	e7fd      	b.n	8005446 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800544a:	4b39      	ldr	r3, [pc, #228]	@ (8005530 <xPortStartScheduler+0x130>)
 800544c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	22ff      	movs	r2, #255	@ 0xff
 800545a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b31      	ldr	r3, [pc, #196]	@ (8005534 <xPortStartScheduler+0x134>)
 8005470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005472:	4b31      	ldr	r3, [pc, #196]	@ (8005538 <xPortStartScheduler+0x138>)
 8005474:	2207      	movs	r2, #7
 8005476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005478:	e009      	b.n	800548e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800547a:	4b2f      	ldr	r3, [pc, #188]	@ (8005538 <xPortStartScheduler+0x138>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3b01      	subs	r3, #1
 8005480:	4a2d      	ldr	r2, [pc, #180]	@ (8005538 <xPortStartScheduler+0x138>)
 8005482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005496:	2b80      	cmp	r3, #128	@ 0x80
 8005498:	d0ef      	beq.n	800547a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800549a:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <xPortStartScheduler+0x138>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f1c3 0307 	rsb	r3, r3, #7
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d00b      	beq.n	80054be <xPortStartScheduler+0xbe>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	60bb      	str	r3, [r7, #8]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054be:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <xPortStartScheduler+0x138>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <xPortStartScheduler+0x138>)
 80054c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <xPortStartScheduler+0x138>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054d0:	4a19      	ldr	r2, [pc, #100]	@ (8005538 <xPortStartScheduler+0x138>)
 80054d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054dc:	4b17      	ldr	r3, [pc, #92]	@ (800553c <xPortStartScheduler+0x13c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a16      	ldr	r2, [pc, #88]	@ (800553c <xPortStartScheduler+0x13c>)
 80054e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054e8:	4b14      	ldr	r3, [pc, #80]	@ (800553c <xPortStartScheduler+0x13c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a13      	ldr	r2, [pc, #76]	@ (800553c <xPortStartScheduler+0x13c>)
 80054ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80054f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054f4:	f000 f8da 	bl	80056ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054f8:	4b11      	ldr	r3, [pc, #68]	@ (8005540 <xPortStartScheduler+0x140>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054fe:	f000 f8f9 	bl	80056f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005502:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <xPortStartScheduler+0x144>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a0f      	ldr	r2, [pc, #60]	@ (8005544 <xPortStartScheduler+0x144>)
 8005508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800550c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800550e:	f7ff ff63 	bl	80053d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005512:	f7ff fcdf 	bl	8004ed4 <vTaskSwitchContext>
	prvTaskExitError();
 8005516:	f7ff ff1b 	bl	8005350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	e000ed00 	.word	0xe000ed00
 8005528:	410fc271 	.word	0x410fc271
 800552c:	410fc270 	.word	0x410fc270
 8005530:	e000e400 	.word	0xe000e400
 8005534:	200005a0 	.word	0x200005a0
 8005538:	200005a4 	.word	0x200005a4
 800553c:	e000ed20 	.word	0xe000ed20
 8005540:	20000010 	.word	0x20000010
 8005544:	e000ef34 	.word	0xe000ef34

08005548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
}
 8005560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005562:	4b10      	ldr	r3, [pc, #64]	@ (80055a4 <vPortEnterCritical+0x5c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3301      	adds	r3, #1
 8005568:	4a0e      	ldr	r2, [pc, #56]	@ (80055a4 <vPortEnterCritical+0x5c>)
 800556a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800556c:	4b0d      	ldr	r3, [pc, #52]	@ (80055a4 <vPortEnterCritical+0x5c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d110      	bne.n	8005596 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005574:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <vPortEnterCritical+0x60>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <vPortEnterCritical+0x4e>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	603b      	str	r3, [r7, #0]
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	e7fd      	b.n	8005592 <vPortEnterCritical+0x4a>
	}
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000010 	.word	0x20000010
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055b2:	4b12      	ldr	r3, [pc, #72]	@ (80055fc <vPortExitCritical+0x50>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10b      	bne.n	80055d2 <vPortExitCritical+0x26>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	607b      	str	r3, [r7, #4]
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055d2:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <vPortExitCritical+0x50>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	4a08      	ldr	r2, [pc, #32]	@ (80055fc <vPortExitCritical+0x50>)
 80055da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055dc:	4b07      	ldr	r3, [pc, #28]	@ (80055fc <vPortExitCritical+0x50>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <vPortExitCritical+0x44>
 80055e4:	2300      	movs	r3, #0
 80055e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	20000010 	.word	0x20000010

08005600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005600:	f3ef 8009 	mrs	r0, PSP
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4b15      	ldr	r3, [pc, #84]	@ (8005660 <pxCurrentTCBConst>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	f01e 0f10 	tst.w	lr, #16
 8005610:	bf08      	it	eq
 8005612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	6010      	str	r0, [r2, #0]
 800561c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005624:	f380 8811 	msr	BASEPRI, r0
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f7ff fc50 	bl	8004ed4 <vTaskSwitchContext>
 8005634:	f04f 0000 	mov.w	r0, #0
 8005638:	f380 8811 	msr	BASEPRI, r0
 800563c:	bc09      	pop	{r0, r3}
 800563e:	6819      	ldr	r1, [r3, #0]
 8005640:	6808      	ldr	r0, [r1, #0]
 8005642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005646:	f01e 0f10 	tst.w	lr, #16
 800564a:	bf08      	it	eq
 800564c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005650:	f380 8809 	msr	PSP, r0
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	f3af 8000 	nop.w

08005660 <pxCurrentTCBConst>:
 8005660:	20000474 	.word	0x20000474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop

08005668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	607b      	str	r3, [r7, #4]
}
 8005680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005682:	f7ff fb6d 	bl	8004d60 <xTaskIncrementTick>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <SysTick_Handler+0x40>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	2300      	movs	r3, #0
 8005696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056b0:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <vPortSetupTimerInterrupt+0x34>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056b6:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <vPortSetupTimerInterrupt+0x38>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056bc:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <vPortSetupTimerInterrupt+0x3c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a0a      	ldr	r2, [pc, #40]	@ (80056ec <vPortSetupTimerInterrupt+0x40>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	099b      	lsrs	r3, r3, #6
 80056c8:	4a09      	ldr	r2, [pc, #36]	@ (80056f0 <vPortSetupTimerInterrupt+0x44>)
 80056ca:	3b01      	subs	r3, #1
 80056cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ce:	4b04      	ldr	r3, [pc, #16]	@ (80056e0 <vPortSetupTimerInterrupt+0x34>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	e000e010 	.word	0xe000e010
 80056e4:	e000e018 	.word	0xe000e018
 80056e8:	20000004 	.word	0x20000004
 80056ec:	10624dd3 	.word	0x10624dd3
 80056f0:	e000e014 	.word	0xe000e014

080056f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005704 <vPortEnableVFP+0x10>
 80056f8:	6801      	ldr	r1, [r0, #0]
 80056fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80056fe:	6001      	str	r1, [r0, #0]
 8005700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005702:	bf00      	nop
 8005704:	e000ed88 	.word	0xe000ed88

08005708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	@ 0x28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005710:	2300      	movs	r3, #0
 8005712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005714:	f7ff fa78 	bl	8004c08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005718:	4b5c      	ldr	r3, [pc, #368]	@ (800588c <pvPortMalloc+0x184>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005720:	f000 f924 	bl	800596c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005724:	4b5a      	ldr	r3, [pc, #360]	@ (8005890 <pvPortMalloc+0x188>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	f040 8095 	bne.w	800585c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01e      	beq.n	8005776 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005738:	2208      	movs	r2, #8
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4413      	add	r3, r2
 800573e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	2b00      	cmp	r3, #0
 8005748:	d015      	beq.n	8005776 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f023 0307 	bic.w	r3, r3, #7
 8005750:	3308      	adds	r3, #8
 8005752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <pvPortMalloc+0x6e>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	617b      	str	r3, [r7, #20]
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	e7fd      	b.n	8005772 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d06f      	beq.n	800585c <pvPortMalloc+0x154>
 800577c:	4b45      	ldr	r3, [pc, #276]	@ (8005894 <pvPortMalloc+0x18c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d86a      	bhi.n	800585c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005786:	4b44      	ldr	r3, [pc, #272]	@ (8005898 <pvPortMalloc+0x190>)
 8005788:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800578a:	4b43      	ldr	r3, [pc, #268]	@ (8005898 <pvPortMalloc+0x190>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005790:	e004      	b.n	800579c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d903      	bls.n	80057ae <pvPortMalloc+0xa6>
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f1      	bne.n	8005792 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057ae:	4b37      	ldr	r3, [pc, #220]	@ (800588c <pvPortMalloc+0x184>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d051      	beq.n	800585c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2208      	movs	r2, #8
 80057be:	4413      	add	r3, r2
 80057c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	1ad2      	subs	r2, r2, r3
 80057d2:	2308      	movs	r3, #8
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d920      	bls.n	800581c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4413      	add	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <pvPortMalloc+0xfc>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	613b      	str	r3, [r7, #16]
}
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	1ad2      	subs	r2, r2, r3
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005816:	69b8      	ldr	r0, [r7, #24]
 8005818:	f000 f90a 	bl	8005a30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800581c:	4b1d      	ldr	r3, [pc, #116]	@ (8005894 <pvPortMalloc+0x18c>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	4a1b      	ldr	r2, [pc, #108]	@ (8005894 <pvPortMalloc+0x18c>)
 8005828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800582a:	4b1a      	ldr	r3, [pc, #104]	@ (8005894 <pvPortMalloc+0x18c>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b1b      	ldr	r3, [pc, #108]	@ (800589c <pvPortMalloc+0x194>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d203      	bcs.n	800583e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005836:	4b17      	ldr	r3, [pc, #92]	@ (8005894 <pvPortMalloc+0x18c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a18      	ldr	r2, [pc, #96]	@ (800589c <pvPortMalloc+0x194>)
 800583c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	4b13      	ldr	r3, [pc, #76]	@ (8005890 <pvPortMalloc+0x188>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	431a      	orrs	r2, r3
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005852:	4b13      	ldr	r3, [pc, #76]	@ (80058a0 <pvPortMalloc+0x198>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	4a11      	ldr	r2, [pc, #68]	@ (80058a0 <pvPortMalloc+0x198>)
 800585a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800585c:	f7ff f9e2 	bl	8004c24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <pvPortMalloc+0x17a>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	60fb      	str	r3, [r7, #12]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <pvPortMalloc+0x176>
	return pvReturn;
 8005882:	69fb      	ldr	r3, [r7, #28]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3728      	adds	r7, #40	@ 0x28
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200041b0 	.word	0x200041b0
 8005890:	200041c4 	.word	0x200041c4
 8005894:	200041b4 	.word	0x200041b4
 8005898:	200041a8 	.word	0x200041a8
 800589c:	200041b8 	.word	0x200041b8
 80058a0:	200041bc 	.word	0x200041bc

080058a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d04f      	beq.n	8005956 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058b6:	2308      	movs	r3, #8
 80058b8:	425b      	negs	r3, r3
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4413      	add	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	4b25      	ldr	r3, [pc, #148]	@ (8005960 <vPortFree+0xbc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <vPortFree+0x46>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	60fb      	str	r3, [r7, #12]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <vPortFree+0x66>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	60bb      	str	r3, [r7, #8]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	4b14      	ldr	r3, [pc, #80]	@ (8005960 <vPortFree+0xbc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01e      	beq.n	8005956 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11a      	bne.n	8005956 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	4b0e      	ldr	r3, [pc, #56]	@ (8005960 <vPortFree+0xbc>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	43db      	mvns	r3, r3
 800592a:	401a      	ands	r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005930:	f7ff f96a 	bl	8004c08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	4b0a      	ldr	r3, [pc, #40]	@ (8005964 <vPortFree+0xc0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4413      	add	r3, r2
 800593e:	4a09      	ldr	r2, [pc, #36]	@ (8005964 <vPortFree+0xc0>)
 8005940:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005942:	6938      	ldr	r0, [r7, #16]
 8005944:	f000 f874 	bl	8005a30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005948:	4b07      	ldr	r3, [pc, #28]	@ (8005968 <vPortFree+0xc4>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3301      	adds	r3, #1
 800594e:	4a06      	ldr	r2, [pc, #24]	@ (8005968 <vPortFree+0xc4>)
 8005950:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005952:	f7ff f967 	bl	8004c24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005956:	bf00      	nop
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	200041c4 	.word	0x200041c4
 8005964:	200041b4 	.word	0x200041b4
 8005968:	200041c0 	.word	0x200041c0

0800596c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005972:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005976:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005978:	4b27      	ldr	r3, [pc, #156]	@ (8005a18 <prvHeapInit+0xac>)
 800597a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3307      	adds	r3, #7
 800598a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0307 	bic.w	r3, r3, #7
 8005992:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	4a1f      	ldr	r2, [pc, #124]	@ (8005a18 <prvHeapInit+0xac>)
 800599c:	4413      	add	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059a4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a1c <prvHeapInit+0xb0>)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059aa:	4b1c      	ldr	r3, [pc, #112]	@ (8005a1c <prvHeapInit+0xb0>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	4413      	add	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059b8:	2208      	movs	r2, #8
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0307 	bic.w	r3, r3, #7
 80059c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4a15      	ldr	r2, [pc, #84]	@ (8005a20 <prvHeapInit+0xb4>)
 80059cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059ce:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <prvHeapInit+0xb4>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2200      	movs	r2, #0
 80059d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059d6:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <prvHeapInit+0xb4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	1ad2      	subs	r2, r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <prvHeapInit+0xb4>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005a24 <prvHeapInit+0xb8>)
 80059fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a09      	ldr	r2, [pc, #36]	@ (8005a28 <prvHeapInit+0xbc>)
 8005a02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a04:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <prvHeapInit+0xc0>)
 8005a06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a0a:	601a      	str	r2, [r3, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	200005a8 	.word	0x200005a8
 8005a1c:	200041a8 	.word	0x200041a8
 8005a20:	200041b0 	.word	0x200041b0
 8005a24:	200041b8 	.word	0x200041b8
 8005a28:	200041b4 	.word	0x200041b4
 8005a2c:	200041c4 	.word	0x200041c4

08005a30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a38:	4b28      	ldr	r3, [pc, #160]	@ (8005adc <prvInsertBlockIntoFreeList+0xac>)
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e002      	b.n	8005a44 <prvInsertBlockIntoFreeList+0x14>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d8f7      	bhi.n	8005a3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	4413      	add	r3, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d108      	bne.n	8005a72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	441a      	add	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	441a      	add	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d118      	bne.n	8005ab8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b15      	ldr	r3, [pc, #84]	@ (8005ae0 <prvInsertBlockIntoFreeList+0xb0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d00d      	beq.n	8005aae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	441a      	add	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e008      	b.n	8005ac0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005aae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <prvInsertBlockIntoFreeList+0xb0>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e003      	b.n	8005ac0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d002      	beq.n	8005ace <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	200041a8 	.word	0x200041a8
 8005ae0:	200041b0 	.word	0x200041b0

08005ae4 <memset>:
 8005ae4:	4402      	add	r2, r0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d100      	bne.n	8005aee <memset+0xa>
 8005aec:	4770      	bx	lr
 8005aee:	f803 1b01 	strb.w	r1, [r3], #1
 8005af2:	e7f9      	b.n	8005ae8 <memset+0x4>

08005af4 <_reclaim_reent>:
 8005af4:	4b29      	ldr	r3, [pc, #164]	@ (8005b9c <_reclaim_reent+0xa8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4283      	cmp	r3, r0
 8005afa:	b570      	push	{r4, r5, r6, lr}
 8005afc:	4604      	mov	r4, r0
 8005afe:	d04b      	beq.n	8005b98 <_reclaim_reent+0xa4>
 8005b00:	69c3      	ldr	r3, [r0, #28]
 8005b02:	b1ab      	cbz	r3, 8005b30 <_reclaim_reent+0x3c>
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	b16b      	cbz	r3, 8005b24 <_reclaim_reent+0x30>
 8005b08:	2500      	movs	r5, #0
 8005b0a:	69e3      	ldr	r3, [r4, #28]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	5959      	ldr	r1, [r3, r5]
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d13b      	bne.n	8005b8c <_reclaim_reent+0x98>
 8005b14:	3504      	adds	r5, #4
 8005b16:	2d80      	cmp	r5, #128	@ 0x80
 8005b18:	d1f7      	bne.n	8005b0a <_reclaim_reent+0x16>
 8005b1a:	69e3      	ldr	r3, [r4, #28]
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	68d9      	ldr	r1, [r3, #12]
 8005b20:	f000 f86a 	bl	8005bf8 <_free_r>
 8005b24:	69e3      	ldr	r3, [r4, #28]
 8005b26:	6819      	ldr	r1, [r3, #0]
 8005b28:	b111      	cbz	r1, 8005b30 <_reclaim_reent+0x3c>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f864 	bl	8005bf8 <_free_r>
 8005b30:	6961      	ldr	r1, [r4, #20]
 8005b32:	b111      	cbz	r1, 8005b3a <_reclaim_reent+0x46>
 8005b34:	4620      	mov	r0, r4
 8005b36:	f000 f85f 	bl	8005bf8 <_free_r>
 8005b3a:	69e1      	ldr	r1, [r4, #28]
 8005b3c:	b111      	cbz	r1, 8005b44 <_reclaim_reent+0x50>
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 f85a 	bl	8005bf8 <_free_r>
 8005b44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005b46:	b111      	cbz	r1, 8005b4e <_reclaim_reent+0x5a>
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 f855 	bl	8005bf8 <_free_r>
 8005b4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b50:	b111      	cbz	r1, 8005b58 <_reclaim_reent+0x64>
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 f850 	bl	8005bf8 <_free_r>
 8005b58:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b5a:	b111      	cbz	r1, 8005b62 <_reclaim_reent+0x6e>
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 f84b 	bl	8005bf8 <_free_r>
 8005b62:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b64:	b111      	cbz	r1, 8005b6c <_reclaim_reent+0x78>
 8005b66:	4620      	mov	r0, r4
 8005b68:	f000 f846 	bl	8005bf8 <_free_r>
 8005b6c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005b6e:	b111      	cbz	r1, 8005b76 <_reclaim_reent+0x82>
 8005b70:	4620      	mov	r0, r4
 8005b72:	f000 f841 	bl	8005bf8 <_free_r>
 8005b76:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005b78:	b111      	cbz	r1, 8005b80 <_reclaim_reent+0x8c>
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f000 f83c 	bl	8005bf8 <_free_r>
 8005b80:	6a23      	ldr	r3, [r4, #32]
 8005b82:	b14b      	cbz	r3, 8005b98 <_reclaim_reent+0xa4>
 8005b84:	4620      	mov	r0, r4
 8005b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b8a:	4718      	bx	r3
 8005b8c:	680e      	ldr	r6, [r1, #0]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 f832 	bl	8005bf8 <_free_r>
 8005b94:	4631      	mov	r1, r6
 8005b96:	e7bb      	b.n	8005b10 <_reclaim_reent+0x1c>
 8005b98:	bd70      	pop	{r4, r5, r6, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000014 	.word	0x20000014

08005ba0 <__errno>:
 8005ba0:	4b01      	ldr	r3, [pc, #4]	@ (8005ba8 <__errno+0x8>)
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000014 	.word	0x20000014

08005bac <__libc_init_array>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	4d0d      	ldr	r5, [pc, #52]	@ (8005be4 <__libc_init_array+0x38>)
 8005bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8005be8 <__libc_init_array+0x3c>)
 8005bb2:	1b64      	subs	r4, r4, r5
 8005bb4:	10a4      	asrs	r4, r4, #2
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	42a6      	cmp	r6, r4
 8005bba:	d109      	bne.n	8005bd0 <__libc_init_array+0x24>
 8005bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8005bec <__libc_init_array+0x40>)
 8005bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8005bf0 <__libc_init_array+0x44>)
 8005bc0:	f000 fa10 	bl	8005fe4 <_init>
 8005bc4:	1b64      	subs	r4, r4, r5
 8005bc6:	10a4      	asrs	r4, r4, #2
 8005bc8:	2600      	movs	r6, #0
 8005bca:	42a6      	cmp	r6, r4
 8005bcc:	d105      	bne.n	8005bda <__libc_init_array+0x2e>
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd4:	4798      	blx	r3
 8005bd6:	3601      	adds	r6, #1
 8005bd8:	e7ee      	b.n	8005bb8 <__libc_init_array+0xc>
 8005bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bde:	4798      	blx	r3
 8005be0:	3601      	adds	r6, #1
 8005be2:	e7f2      	b.n	8005bca <__libc_init_array+0x1e>
 8005be4:	080060bc 	.word	0x080060bc
 8005be8:	080060bc 	.word	0x080060bc
 8005bec:	080060bc 	.word	0x080060bc
 8005bf0:	080060c0 	.word	0x080060c0

08005bf4 <__retarget_lock_acquire_recursive>:
 8005bf4:	4770      	bx	lr

08005bf6 <__retarget_lock_release_recursive>:
 8005bf6:	4770      	bx	lr

08005bf8 <_free_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	d041      	beq.n	8005c84 <_free_r+0x8c>
 8005c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c04:	1f0c      	subs	r4, r1, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bfb8      	it	lt
 8005c0a:	18e4      	addlt	r4, r4, r3
 8005c0c:	f000 f83e 	bl	8005c8c <__malloc_lock>
 8005c10:	4a1d      	ldr	r2, [pc, #116]	@ (8005c88 <_free_r+0x90>)
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	b933      	cbnz	r3, 8005c24 <_free_r+0x2c>
 8005c16:	6063      	str	r3, [r4, #4]
 8005c18:	6014      	str	r4, [r2, #0]
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c20:	f000 b83a 	b.w	8005c98 <__malloc_unlock>
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d908      	bls.n	8005c3a <_free_r+0x42>
 8005c28:	6820      	ldr	r0, [r4, #0]
 8005c2a:	1821      	adds	r1, r4, r0
 8005c2c:	428b      	cmp	r3, r1
 8005c2e:	bf01      	itttt	eq
 8005c30:	6819      	ldreq	r1, [r3, #0]
 8005c32:	685b      	ldreq	r3, [r3, #4]
 8005c34:	1809      	addeq	r1, r1, r0
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	e7ed      	b.n	8005c16 <_free_r+0x1e>
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	b10b      	cbz	r3, 8005c44 <_free_r+0x4c>
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	d9fa      	bls.n	8005c3a <_free_r+0x42>
 8005c44:	6811      	ldr	r1, [r2, #0]
 8005c46:	1850      	adds	r0, r2, r1
 8005c48:	42a0      	cmp	r0, r4
 8005c4a:	d10b      	bne.n	8005c64 <_free_r+0x6c>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	4401      	add	r1, r0
 8005c50:	1850      	adds	r0, r2, r1
 8005c52:	4283      	cmp	r3, r0
 8005c54:	6011      	str	r1, [r2, #0]
 8005c56:	d1e0      	bne.n	8005c1a <_free_r+0x22>
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	6053      	str	r3, [r2, #4]
 8005c5e:	4408      	add	r0, r1
 8005c60:	6010      	str	r0, [r2, #0]
 8005c62:	e7da      	b.n	8005c1a <_free_r+0x22>
 8005c64:	d902      	bls.n	8005c6c <_free_r+0x74>
 8005c66:	230c      	movs	r3, #12
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	e7d6      	b.n	8005c1a <_free_r+0x22>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	1821      	adds	r1, r4, r0
 8005c70:	428b      	cmp	r3, r1
 8005c72:	bf04      	itt	eq
 8005c74:	6819      	ldreq	r1, [r3, #0]
 8005c76:	685b      	ldreq	r3, [r3, #4]
 8005c78:	6063      	str	r3, [r4, #4]
 8005c7a:	bf04      	itt	eq
 8005c7c:	1809      	addeq	r1, r1, r0
 8005c7e:	6021      	streq	r1, [r4, #0]
 8005c80:	6054      	str	r4, [r2, #4]
 8005c82:	e7ca      	b.n	8005c1a <_free_r+0x22>
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	20004304 	.word	0x20004304

08005c8c <__malloc_lock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	@ (8005c94 <__malloc_lock+0x8>)
 8005c8e:	f7ff bfb1 	b.w	8005bf4 <__retarget_lock_acquire_recursive>
 8005c92:	bf00      	nop
 8005c94:	20004300 	.word	0x20004300

08005c98 <__malloc_unlock>:
 8005c98:	4801      	ldr	r0, [pc, #4]	@ (8005ca0 <__malloc_unlock+0x8>)
 8005c9a:	f7ff bfac 	b.w	8005bf6 <__retarget_lock_release_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	20004300 	.word	0x20004300

08005ca4 <atan2f>:
 8005ca4:	f000 b822 	b.w	8005cec <__ieee754_atan2f>

08005ca8 <sqrtf>:
 8005ca8:	b508      	push	{r3, lr}
 8005caa:	ed2d 8b02 	vpush	{d8}
 8005cae:	eeb0 8a40 	vmov.f32	s16, s0
 8005cb2:	f000 f817 	bl	8005ce4 <__ieee754_sqrtf>
 8005cb6:	eeb4 8a48 	vcmp.f32	s16, s16
 8005cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbe:	d60c      	bvs.n	8005cda <sqrtf+0x32>
 8005cc0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8005ce0 <sqrtf+0x38>
 8005cc4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ccc:	d505      	bpl.n	8005cda <sqrtf+0x32>
 8005cce:	f7ff ff67 	bl	8005ba0 <__errno>
 8005cd2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005cd6:	2321      	movs	r3, #33	@ 0x21
 8005cd8:	6003      	str	r3, [r0, #0]
 8005cda:	ecbd 8b02 	vpop	{d8}
 8005cde:	bd08      	pop	{r3, pc}
 8005ce0:	00000000 	.word	0x00000000

08005ce4 <__ieee754_sqrtf>:
 8005ce4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005ce8:	4770      	bx	lr
	...

08005cec <__ieee754_atan2f>:
 8005cec:	ee10 2a90 	vmov	r2, s1
 8005cf0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8005cf4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	eef0 7a40 	vmov.f32	s15, s0
 8005cfe:	d806      	bhi.n	8005d0e <__ieee754_atan2f+0x22>
 8005d00:	ee10 0a10 	vmov	r0, s0
 8005d04:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005d08:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005d0c:	d904      	bls.n	8005d18 <__ieee754_atan2f+0x2c>
 8005d0e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005d12:	eeb0 0a67 	vmov.f32	s0, s15
 8005d16:	bd10      	pop	{r4, pc}
 8005d18:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8005d1c:	d103      	bne.n	8005d26 <__ieee754_atan2f+0x3a>
 8005d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d22:	f000 b883 	b.w	8005e2c <atanf>
 8005d26:	1794      	asrs	r4, r2, #30
 8005d28:	f004 0402 	and.w	r4, r4, #2
 8005d2c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005d30:	b943      	cbnz	r3, 8005d44 <__ieee754_atan2f+0x58>
 8005d32:	2c02      	cmp	r4, #2
 8005d34:	d05e      	beq.n	8005df4 <__ieee754_atan2f+0x108>
 8005d36:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005e08 <__ieee754_atan2f+0x11c>
 8005d3a:	2c03      	cmp	r4, #3
 8005d3c:	bf08      	it	eq
 8005d3e:	eef0 7a47 	vmoveq.f32	s15, s14
 8005d42:	e7e6      	b.n	8005d12 <__ieee754_atan2f+0x26>
 8005d44:	b941      	cbnz	r1, 8005d58 <__ieee754_atan2f+0x6c>
 8005d46:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8005e0c <__ieee754_atan2f+0x120>
 8005d4a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005e10 <__ieee754_atan2f+0x124>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	bfb8      	it	lt
 8005d52:	eef0 7a47 	vmovlt.f32	s15, s14
 8005d56:	e7dc      	b.n	8005d12 <__ieee754_atan2f+0x26>
 8005d58:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005d5c:	d110      	bne.n	8005d80 <__ieee754_atan2f+0x94>
 8005d5e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005d62:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d66:	d107      	bne.n	8005d78 <__ieee754_atan2f+0x8c>
 8005d68:	2c02      	cmp	r4, #2
 8005d6a:	d846      	bhi.n	8005dfa <__ieee754_atan2f+0x10e>
 8005d6c:	4b29      	ldr	r3, [pc, #164]	@ (8005e14 <__ieee754_atan2f+0x128>)
 8005d6e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005d72:	edd3 7a00 	vldr	s15, [r3]
 8005d76:	e7cc      	b.n	8005d12 <__ieee754_atan2f+0x26>
 8005d78:	2c02      	cmp	r4, #2
 8005d7a:	d841      	bhi.n	8005e00 <__ieee754_atan2f+0x114>
 8005d7c:	4b26      	ldr	r3, [pc, #152]	@ (8005e18 <__ieee754_atan2f+0x12c>)
 8005d7e:	e7f6      	b.n	8005d6e <__ieee754_atan2f+0x82>
 8005d80:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005d84:	d0df      	beq.n	8005d46 <__ieee754_atan2f+0x5a>
 8005d86:	1a5b      	subs	r3, r3, r1
 8005d88:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8005d8c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8005d90:	da1a      	bge.n	8005dc8 <__ieee754_atan2f+0xdc>
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	da01      	bge.n	8005d9a <__ieee754_atan2f+0xae>
 8005d96:	313c      	adds	r1, #60	@ 0x3c
 8005d98:	db19      	blt.n	8005dce <__ieee754_atan2f+0xe2>
 8005d9a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8005d9e:	f000 f919 	bl	8005fd4 <fabsf>
 8005da2:	f000 f843 	bl	8005e2c <atanf>
 8005da6:	eef0 7a40 	vmov.f32	s15, s0
 8005daa:	2c01      	cmp	r4, #1
 8005dac:	d012      	beq.n	8005dd4 <__ieee754_atan2f+0xe8>
 8005dae:	2c02      	cmp	r4, #2
 8005db0:	d017      	beq.n	8005de2 <__ieee754_atan2f+0xf6>
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	d0ad      	beq.n	8005d12 <__ieee754_atan2f+0x26>
 8005db6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005e1c <__ieee754_atan2f+0x130>
 8005dba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dbe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005e20 <__ieee754_atan2f+0x134>
 8005dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dc6:	e7a4      	b.n	8005d12 <__ieee754_atan2f+0x26>
 8005dc8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8005e0c <__ieee754_atan2f+0x120>
 8005dcc:	e7ed      	b.n	8005daa <__ieee754_atan2f+0xbe>
 8005dce:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005e24 <__ieee754_atan2f+0x138>
 8005dd2:	e7ea      	b.n	8005daa <__ieee754_atan2f+0xbe>
 8005dd4:	ee17 3a90 	vmov	r3, s15
 8005dd8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	e797      	b.n	8005d12 <__ieee754_atan2f+0x26>
 8005de2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005e1c <__ieee754_atan2f+0x130>
 8005de6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dea:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005e20 <__ieee754_atan2f+0x134>
 8005dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df2:	e78e      	b.n	8005d12 <__ieee754_atan2f+0x26>
 8005df4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8005e20 <__ieee754_atan2f+0x134>
 8005df8:	e78b      	b.n	8005d12 <__ieee754_atan2f+0x26>
 8005dfa:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8005e28 <__ieee754_atan2f+0x13c>
 8005dfe:	e788      	b.n	8005d12 <__ieee754_atan2f+0x26>
 8005e00:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005e24 <__ieee754_atan2f+0x138>
 8005e04:	e785      	b.n	8005d12 <__ieee754_atan2f+0x26>
 8005e06:	bf00      	nop
 8005e08:	c0490fdb 	.word	0xc0490fdb
 8005e0c:	3fc90fdb 	.word	0x3fc90fdb
 8005e10:	bfc90fdb 	.word	0xbfc90fdb
 8005e14:	08006088 	.word	0x08006088
 8005e18:	0800607c 	.word	0x0800607c
 8005e1c:	33bbbd2e 	.word	0x33bbbd2e
 8005e20:	40490fdb 	.word	0x40490fdb
 8005e24:	00000000 	.word	0x00000000
 8005e28:	3f490fdb 	.word	0x3f490fdb

08005e2c <atanf>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	ee10 5a10 	vmov	r5, s0
 8005e32:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8005e36:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8005e3a:	eef0 7a40 	vmov.f32	s15, s0
 8005e3e:	d310      	bcc.n	8005e62 <atanf+0x36>
 8005e40:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8005e44:	d904      	bls.n	8005e50 <atanf+0x24>
 8005e46:	ee70 7a00 	vadd.f32	s15, s0, s0
 8005e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8005f88 <atanf+0x15c>
 8005e54:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8005f8c <atanf+0x160>
 8005e58:	2d00      	cmp	r5, #0
 8005e5a:	bfc8      	it	gt
 8005e5c:	eef0 7a47 	vmovgt.f32	s15, s14
 8005e60:	e7f3      	b.n	8005e4a <atanf+0x1e>
 8005e62:	4b4b      	ldr	r3, [pc, #300]	@ (8005f90 <atanf+0x164>)
 8005e64:	429c      	cmp	r4, r3
 8005e66:	d810      	bhi.n	8005e8a <atanf+0x5e>
 8005e68:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8005e6c:	d20a      	bcs.n	8005e84 <atanf+0x58>
 8005e6e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8005f94 <atanf+0x168>
 8005e72:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e7a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e82:	dce2      	bgt.n	8005e4a <atanf+0x1e>
 8005e84:	f04f 33ff 	mov.w	r3, #4294967295
 8005e88:	e013      	b.n	8005eb2 <atanf+0x86>
 8005e8a:	f000 f8a3 	bl	8005fd4 <fabsf>
 8005e8e:	4b42      	ldr	r3, [pc, #264]	@ (8005f98 <atanf+0x16c>)
 8005e90:	429c      	cmp	r4, r3
 8005e92:	d84f      	bhi.n	8005f34 <atanf+0x108>
 8005e94:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	d841      	bhi.n	8005f20 <atanf+0xf4>
 8005e9c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005ea0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005ea4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005eae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005eb8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005f9c <atanf+0x170>
 8005ebc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8005fa0 <atanf+0x174>
 8005ec0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8005fa4 <atanf+0x178>
 8005ec4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005ec8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005ecc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005fa8 <atanf+0x17c>
 8005ed0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005ed4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8005fac <atanf+0x180>
 8005ed8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005edc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005fb0 <atanf+0x184>
 8005ee0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005ee4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8005fb4 <atanf+0x188>
 8005ee8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005eec:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8005fb8 <atanf+0x18c>
 8005ef0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005ef4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005fbc <atanf+0x190>
 8005ef8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005efc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8005fc0 <atanf+0x194>
 8005f00:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005f04:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005fc4 <atanf+0x198>
 8005f08:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005f0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005f10:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f18:	d121      	bne.n	8005f5e <atanf+0x132>
 8005f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f1e:	e794      	b.n	8005e4a <atanf+0x1e>
 8005f20:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005f24:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005f28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005f32:	e7be      	b.n	8005eb2 <atanf+0x86>
 8005f34:	4b24      	ldr	r3, [pc, #144]	@ (8005fc8 <atanf+0x19c>)
 8005f36:	429c      	cmp	r4, r3
 8005f38:	d80b      	bhi.n	8005f52 <atanf+0x126>
 8005f3a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8005f3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f42:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005f46:	2302      	movs	r3, #2
 8005f48:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f50:	e7af      	b.n	8005eb2 <atanf+0x86>
 8005f52:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005f56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e7a9      	b.n	8005eb2 <atanf+0x86>
 8005f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8005fcc <atanf+0x1a0>)
 8005f60:	491b      	ldr	r1, [pc, #108]	@ (8005fd0 <atanf+0x1a4>)
 8005f62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005f66:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005f6a:	edd3 6a00 	vldr	s13, [r3]
 8005f6e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005f72:	2d00      	cmp	r5, #0
 8005f74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f78:	edd2 7a00 	vldr	s15, [r2]
 8005f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f80:	bfb8      	it	lt
 8005f82:	eef1 7a67 	vneglt.f32	s15, s15
 8005f86:	e760      	b.n	8005e4a <atanf+0x1e>
 8005f88:	bfc90fdb 	.word	0xbfc90fdb
 8005f8c:	3fc90fdb 	.word	0x3fc90fdb
 8005f90:	3edfffff 	.word	0x3edfffff
 8005f94:	7149f2ca 	.word	0x7149f2ca
 8005f98:	3f97ffff 	.word	0x3f97ffff
 8005f9c:	3c8569d7 	.word	0x3c8569d7
 8005fa0:	3d4bda59 	.word	0x3d4bda59
 8005fa4:	bd6ef16b 	.word	0xbd6ef16b
 8005fa8:	3d886b35 	.word	0x3d886b35
 8005fac:	3dba2e6e 	.word	0x3dba2e6e
 8005fb0:	3e124925 	.word	0x3e124925
 8005fb4:	3eaaaaab 	.word	0x3eaaaaab
 8005fb8:	bd15a221 	.word	0xbd15a221
 8005fbc:	bd9d8795 	.word	0xbd9d8795
 8005fc0:	bde38e38 	.word	0xbde38e38
 8005fc4:	be4ccccd 	.word	0xbe4ccccd
 8005fc8:	401bffff 	.word	0x401bffff
 8005fcc:	080060a4 	.word	0x080060a4
 8005fd0:	08006094 	.word	0x08006094

08005fd4 <fabsf>:
 8005fd4:	ee10 3a10 	vmov	r3, s0
 8005fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fdc:	ee00 3a10 	vmov	s0, r3
 8005fe0:	4770      	bx	lr
	...

08005fe4 <_init>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr

08005ff0 <_fini>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr
