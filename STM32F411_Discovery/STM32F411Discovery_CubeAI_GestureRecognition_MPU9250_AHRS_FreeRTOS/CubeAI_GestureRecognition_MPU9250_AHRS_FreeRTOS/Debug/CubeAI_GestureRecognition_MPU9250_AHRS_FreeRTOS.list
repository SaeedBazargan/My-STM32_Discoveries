
CubeAI_GestureRecognition_MPU9250_AHRS_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005644  08005644  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005644  08005644  00006644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800564c  0800564c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800564c  0800564c  0000664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005650  08005650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005654  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004258  20000064  080056b8  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042bc  080056b8  000072bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001220a  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c38  00000000  00000000  0001929e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca5  00000000  00000000  0001cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018286  00000000  00000000  0001dbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001274f  00000000  00000000  00035e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096b78  00000000  00000000  000485c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df13a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004914  00000000  00000000  000df180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bf  00000000  00000000  000e3a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005584 	.word	0x08005584

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08005584 	.word	0x08005584

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b96a 	b.w	8000d08 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9d08      	ldr	r5, [sp, #32]
 8000a52:	460c      	mov	r4, r1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d14e      	bne.n	8000af6 <__udivmoddi4+0xaa>
 8000a58:	4694      	mov	ip, r2
 8000a5a:	458c      	cmp	ip, r1
 8000a5c:	4686      	mov	lr, r0
 8000a5e:	fab2 f282 	clz	r2, r2
 8000a62:	d962      	bls.n	8000b2a <__udivmoddi4+0xde>
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0320 	rsb	r3, r2, #32
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	4319      	orrs	r1, r3
 8000a76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7e:	fa1f f68c 	uxth.w	r6, ip
 8000a82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a92:	fb04 f106 	mul.w	r1, r4, r6
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x64>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aa2:	f080 8112 	bcs.w	8000cca <__udivmoddi4+0x27e>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 810f 	bls.w	8000cca <__udivmoddi4+0x27e>
 8000aac:	3c02      	subs	r4, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a59      	subs	r1, r3, r1
 8000ab2:	fa1f f38e 	uxth.w	r3, lr
 8000ab6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aba:	fb07 1110 	mls	r1, r7, r0, r1
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac2:	fb00 f606 	mul.w	r6, r0, r6
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x94>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ad2:	f080 80fc 	bcs.w	8000cce <__udivmoddi4+0x282>
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	f240 80f9 	bls.w	8000cce <__udivmoddi4+0x282>
 8000adc:	4463      	add	r3, ip
 8000ade:	3802      	subs	r0, #2
 8000ae0:	1b9b      	subs	r3, r3, r6
 8000ae2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	b11d      	cbz	r5, 8000af2 <__udivmoddi4+0xa6>
 8000aea:	40d3      	lsrs	r3, r2
 8000aec:	2200      	movs	r2, #0
 8000aee:	e9c5 3200 	strd	r3, r2, [r5]
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d905      	bls.n	8000b06 <__udivmoddi4+0xba>
 8000afa:	b10d      	cbz	r5, 8000b00 <__udivmoddi4+0xb4>
 8000afc:	e9c5 0100 	strd	r0, r1, [r5]
 8000b00:	2100      	movs	r1, #0
 8000b02:	4608      	mov	r0, r1
 8000b04:	e7f5      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b06:	fab3 f183 	clz	r1, r3
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d146      	bne.n	8000b9c <__udivmoddi4+0x150>
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xcc>
 8000b12:	4290      	cmp	r0, r2
 8000b14:	f0c0 80f0 	bcc.w	8000cf8 <__udivmoddi4+0x2ac>
 8000b18:	1a86      	subs	r6, r0, r2
 8000b1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d0e6      	beq.n	8000af2 <__udivmoddi4+0xa6>
 8000b24:	e9c5 6300 	strd	r6, r3, [r5]
 8000b28:	e7e3      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	f040 8090 	bne.w	8000c50 <__udivmoddi4+0x204>
 8000b30:	eba1 040c 	sub.w	r4, r1, ip
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa1f f78c 	uxth.w	r7, ip
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b46:	fb08 4416 	mls	r4, r8, r6, r4
 8000b4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4e:	fb07 f006 	mul.w	r0, r7, r6
 8000b52:	4298      	cmp	r0, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x11c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x11a>
 8000b60:	4298      	cmp	r0, r3
 8000b62:	f200 80cd 	bhi.w	8000d00 <__udivmoddi4+0x2b4>
 8000b66:	4626      	mov	r6, r4
 8000b68:	1a1c      	subs	r4, r3, r0
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b72:	fb08 4410 	mls	r4, r8, r0, r4
 8000b76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b7a:	fb00 f707 	mul.w	r7, r0, r7
 8000b7e:	429f      	cmp	r7, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x148>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x146>
 8000b8c:	429f      	cmp	r7, r3
 8000b8e:	f200 80b0 	bhi.w	8000cf2 <__udivmoddi4+0x2a6>
 8000b92:	4620      	mov	r0, r4
 8000b94:	1bdb      	subs	r3, r3, r7
 8000b96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9a:	e7a5      	b.n	8000ae8 <__udivmoddi4+0x9c>
 8000b9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ba6:	431f      	orrs	r7, r3
 8000ba8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bac:	fa04 f301 	lsl.w	r3, r4, r1
 8000bb0:	ea43 030c 	orr.w	r3, r3, ip
 8000bb4:	40f4      	lsrs	r4, r6
 8000bb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bba:	0c38      	lsrs	r0, r7, #16
 8000bbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bc4:	fa1f fc87 	uxth.w	ip, r7
 8000bc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bcc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bd4:	45a1      	cmp	r9, r4
 8000bd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x1a6>
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000be2:	f080 8084 	bcs.w	8000cee <__udivmoddi4+0x2a2>
 8000be6:	45a1      	cmp	r9, r4
 8000be8:	f240 8081 	bls.w	8000cee <__udivmoddi4+0x2a2>
 8000bec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	eba4 0409 	sub.w	r4, r4, r9
 8000bf6:	fa1f f983 	uxth.w	r9, r3
 8000bfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000c02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x1d2>
 8000c0e:	193c      	adds	r4, r7, r4
 8000c10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c14:	d267      	bcs.n	8000ce6 <__udivmoddi4+0x29a>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d965      	bls.n	8000ce6 <__udivmoddi4+0x29a>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	443c      	add	r4, r7
 8000c1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c22:	fba0 9302 	umull	r9, r3, r0, r2
 8000c26:	eba4 040c 	sub.w	r4, r4, ip
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	46ce      	mov	lr, r9
 8000c2e:	469c      	mov	ip, r3
 8000c30:	d351      	bcc.n	8000cd6 <__udivmoddi4+0x28a>
 8000c32:	d04e      	beq.n	8000cd2 <__udivmoddi4+0x286>
 8000c34:	b155      	cbz	r5, 8000c4c <__udivmoddi4+0x200>
 8000c36:	ebb8 030e 	subs.w	r3, r8, lr
 8000c3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c42:	40cb      	lsrs	r3, r1
 8000c44:	431e      	orrs	r6, r3
 8000c46:	40cc      	lsrs	r4, r1
 8000c48:	e9c5 6400 	strd	r6, r4, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e750      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000c50:	f1c2 0320 	rsb	r3, r2, #32
 8000c54:	fa20 f103 	lsr.w	r1, r0, r3
 8000c58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c60:	4094      	lsls	r4, r2
 8000c62:	430c      	orrs	r4, r1
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3110 	mls	r1, r8, r0, r3
 8000c78:	0c23      	lsrs	r3, r4, #16
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f107 	mul.w	r1, r0, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x24c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c8e:	d22c      	bcs.n	8000cea <__udivmoddi4+0x29e>
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d92a      	bls.n	8000cea <__udivmoddi4+0x29e>
 8000c94:	3802      	subs	r0, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ca0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb01 f307 	mul.w	r3, r1, r7
 8000cac:	42a3      	cmp	r3, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x276>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb8:	d213      	bcs.n	8000ce2 <__udivmoddi4+0x296>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d911      	bls.n	8000ce2 <__udivmoddi4+0x296>
 8000cbe:	3902      	subs	r1, #2
 8000cc0:	4464      	add	r4, ip
 8000cc2:	1ae4      	subs	r4, r4, r3
 8000cc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc8:	e739      	b.n	8000b3e <__udivmoddi4+0xf2>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	e6f0      	b.n	8000ab0 <__udivmoddi4+0x64>
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e706      	b.n	8000ae0 <__udivmoddi4+0x94>
 8000cd2:	45c8      	cmp	r8, r9
 8000cd4:	d2ae      	bcs.n	8000c34 <__udivmoddi4+0x1e8>
 8000cd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cde:	3801      	subs	r0, #1
 8000ce0:	e7a8      	b.n	8000c34 <__udivmoddi4+0x1e8>
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	e7ed      	b.n	8000cc2 <__udivmoddi4+0x276>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	e799      	b.n	8000c1e <__udivmoddi4+0x1d2>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e7d4      	b.n	8000c98 <__udivmoddi4+0x24c>
 8000cee:	46d6      	mov	lr, sl
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1a6>
 8000cf2:	4463      	add	r3, ip
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	e74d      	b.n	8000b94 <__udivmoddi4+0x148>
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	e70f      	b.n	8000b20 <__udivmoddi4+0xd4>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	e730      	b.n	8000b68 <__udivmoddi4+0x11c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <vApplicationGetIdleTaskMemory+0x30>)
 8000d22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2280      	movs	r2, #128	@ 0x80
 8000d28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000080 	.word	0x20000080
 8000d3c:	20000120 	.word	0x20000120

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b08e      	sub	sp, #56	@ 0x38
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f000 fd95 	bl	8001874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f835 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f000 f8d1 	bl	8000ef4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d52:	f000 f899 	bl	8000e88 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of runTask */
  osThreadDef(runTask, StartRunTask, osPriorityNormal, 0, 128);
 8000d56:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <main+0x68>)
 8000d58:	f107 041c 	add.w	r4, r7, #28
 8000d5c:	461d      	mov	r5, r3
 8000d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  runTaskHandle = osThreadCreate(osThread(runTask), NULL);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 ff1c 	bl	8003bae <osThreadCreate>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a0c      	ldr	r2, [pc, #48]	@ (8000dac <main+0x6c>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of readDataTask */
  osThreadDef(readDataTask, StartReadDataTask, osPriorityIdle, 0, 2048);
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <main+0x70>)
 8000d7e:	463c      	mov	r4, r7
 8000d80:	461d      	mov	r5, r3
 8000d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readDataTaskHandle = osThreadCreate(osThread(readDataTask), NULL);
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 ff0b 	bl	8003bae <osThreadCreate>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <main+0x74>)
 8000d9c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d9e:	f002 feff 	bl	8003ba0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da2:	bf00      	nop
 8000da4:	e7fd      	b.n	8000da2 <main+0x62>
 8000da6:	bf00      	nop
 8000da8:	080055a4 	.word	0x080055a4
 8000dac:	20000378 	.word	0x20000378
 8000db0:	080055d0 	.word	0x080055d0
 8000db4:	2000037c 	.word	0x2000037c

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	@ 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2230      	movs	r2, #48	@ 0x30
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 f95c 	bl	8005084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <SystemClock_Config+0xc8>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	4a26      	ldr	r2, [pc, #152]	@ (8000e80 <SystemClock_Config+0xc8>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dec:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <SystemClock_Config+0xc8>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a20      	ldr	r2, [pc, #128]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000e02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e2c:	2364      	movs	r3, #100	@ 0x64
 8000e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e34:	2304      	movs	r3, #4
 8000e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 f819 	bl	8001e74 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e48:	f000 fbbe 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2302      	movs	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2103      	movs	r1, #3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fa7b 	bl	8002364 <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e74:	f000 fba8 	bl	80015c8 <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3750      	adds	r7, #80	@ 0x50
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40007000 	.word	0x40007000

08000e88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000e8e:	4a18      	ldr	r2, [pc, #96]	@ (8000ef0 <MX_SPI1_Init+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e92:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000e94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	@ (8000eec <MX_SPI1_Init+0x64>)
 8000eda:	f001 fc81 	bl	80027e0 <HAL_SPI_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ee4:	f000 fb70 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000320 	.word	0x20000320
 8000ef0:	40013000 	.word	0x40013000

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	@ 0x28
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a30      	ldr	r2, [pc, #192]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a29      	ldr	r2, [pc, #164]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_GPIO_Init+0xe0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	4816      	ldr	r0, [pc, #88]	@ (8000fd8 <MX_GPIO_Init+0xe4>)
 8000f80:	f000 ff44 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Run_Pin|LED_Error_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000f8a:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <MX_GPIO_Init+0xe8>)
 8000f8c:	f000 ff3e 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f90:	2310      	movs	r3, #16
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <MX_GPIO_Init+0xe4>)
 8000fa8:	f000 fdac 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Run_Pin LED_Error_Pin */
  GPIO_InitStruct.Pin = LED_Run_Pin|LED_Error_Pin;
 8000fac:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_GPIO_Init+0xe8>)
 8000fc6:	f000 fd9d 	bl	8001b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <IMU_Init>:

/* USER CODE BEGIN 4 */
void IMU_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	MPU9250.PWR_MGMT1	= CLKSEL_1;						// CLOCK_SEL_PLL
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <IMU_Init+0x44>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
	MPU9250.PWR_MGMT2	= ENABLE_ALL;					// Enable All Sensors
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <IMU_Init+0x44>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	705a      	strb	r2, [r3, #1]
	MPU9250.Gyro_DLPF   = BW250_D970;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <IMU_Init+0x44>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	709a      	strb	r2, [r3, #2]
	MPU9250.Accel_DLPF  = BW218_D1880;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <IMU_Init+0x44>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	70da      	strb	r2, [r3, #3]
	MPU9250.Gyro_Range  = MPU9250_Gyroscope_2000;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <IMU_Init+0x44>)
 8000ffe:	2203      	movs	r2, #3
 8001000:	711a      	strb	r2, [r3, #4]
	MPU9250.Accel_Range = MPU9250_Accelerometer_16;
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <IMU_Init+0x44>)
 8001004:	2203      	movs	r2, #3
 8001006:	715a      	strb	r2, [r3, #5]

	if(MPU9250_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &MPU9250) != MPU9250_RESULT_OK)
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <IMU_Init+0x44>)
 800100a:	2210      	movs	r2, #16
 800100c:	4906      	ldr	r1, [pc, #24]	@ (8001028 <IMU_Init+0x48>)
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <IMU_Init+0x4c>)
 8001010:	f002 fc2c 	bl	800386c <MPU9250_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <IMU_Init+0x3e>
	{
		Error_Handler();
 800101a:	f000 fad5 	bl	80015c8 <Error_Handler>
	}
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000380 	.word	0x20000380
 8001028:	40020000 	.word	0x40020000
 800102c:	20000320 	.word	0x20000320

08001030 <IMU_readRawData>:

void IMU_readRawData(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	// <---- ------------ Merging Data to get real IMU data ------------ ---->
	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_ACCEL_XOUT_H, 6);
 8001034:	2306      	movs	r3, #6
 8001036:	223b      	movs	r2, #59	@ 0x3b
 8001038:	499d      	ldr	r1, [pc, #628]	@ (80012b0 <IMU_readRawData+0x280>)
 800103a:	489e      	ldr	r0, [pc, #632]	@ (80012b4 <IMU_readRawData+0x284>)
 800103c:	f002 fd2c 	bl	8003a98 <MPU9250_ReadData>
	Raw_Accel[0] = (int16_t)(IMU_rawData[0] << 8 | IMU_rawData[1]);
 8001040:	4b9b      	ldr	r3, [pc, #620]	@ (80012b0 <IMU_readRawData+0x280>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b99      	ldr	r3, [pc, #612]	@ (80012b0 <IMU_readRawData+0x280>)
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b99      	ldr	r3, [pc, #612]	@ (80012b8 <IMU_readRawData+0x288>)
 8001054:	801a      	strh	r2, [r3, #0]
	Raw_Accel[1] = (int16_t)(IMU_rawData[2] << 8 | IMU_rawData[3]);
 8001056:	4b96      	ldr	r3, [pc, #600]	@ (80012b0 <IMU_readRawData+0x280>)
 8001058:	789b      	ldrb	r3, [r3, #2]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b94      	ldr	r3, [pc, #592]	@ (80012b0 <IMU_readRawData+0x280>)
 8001060:	78db      	ldrb	r3, [r3, #3]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b93      	ldr	r3, [pc, #588]	@ (80012b8 <IMU_readRawData+0x288>)
 800106a:	805a      	strh	r2, [r3, #2]
	Raw_Accel[2] = (int16_t)(IMU_rawData[4] << 8 | IMU_rawData[5]);
 800106c:	4b90      	ldr	r3, [pc, #576]	@ (80012b0 <IMU_readRawData+0x280>)
 800106e:	791b      	ldrb	r3, [r3, #4]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b8e      	ldr	r3, [pc, #568]	@ (80012b0 <IMU_readRawData+0x280>)
 8001076:	795b      	ldrb	r3, [r3, #5]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b8e      	ldr	r3, [pc, #568]	@ (80012b8 <IMU_readRawData+0x288>)
 8001080:	809a      	strh	r2, [r3, #4]

	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_GYRO_XOUT_H, 6);
 8001082:	2306      	movs	r3, #6
 8001084:	2243      	movs	r2, #67	@ 0x43
 8001086:	498a      	ldr	r1, [pc, #552]	@ (80012b0 <IMU_readRawData+0x280>)
 8001088:	488a      	ldr	r0, [pc, #552]	@ (80012b4 <IMU_readRawData+0x284>)
 800108a:	f002 fd05 	bl	8003a98 <MPU9250_ReadData>
	Raw_Gyro[0] = (int16_t)(IMU_rawData[0] << 8 | IMU_rawData[1]);
 800108e:	4b88      	ldr	r3, [pc, #544]	@ (80012b0 <IMU_readRawData+0x280>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	4b86      	ldr	r3, [pc, #536]	@ (80012b0 <IMU_readRawData+0x280>)
 8001098:	785b      	ldrb	r3, [r3, #1]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b86      	ldr	r3, [pc, #536]	@ (80012bc <IMU_readRawData+0x28c>)
 80010a2:	801a      	strh	r2, [r3, #0]
	Raw_Gyro[1] = (int16_t)(IMU_rawData[2] << 8 | IMU_rawData[3]);
 80010a4:	4b82      	ldr	r3, [pc, #520]	@ (80012b0 <IMU_readRawData+0x280>)
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b80      	ldr	r3, [pc, #512]	@ (80012b0 <IMU_readRawData+0x280>)
 80010ae:	78db      	ldrb	r3, [r3, #3]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b81      	ldr	r3, [pc, #516]	@ (80012bc <IMU_readRawData+0x28c>)
 80010b8:	805a      	strh	r2, [r3, #2]
	Raw_Gyro[2] = (int16_t)(IMU_rawData[4] << 8 | IMU_rawData[5]);
 80010ba:	4b7d      	ldr	r3, [pc, #500]	@ (80012b0 <IMU_readRawData+0x280>)
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b7b      	ldr	r3, [pc, #492]	@ (80012b0 <IMU_readRawData+0x280>)
 80010c4:	795b      	ldrb	r3, [r3, #5]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b7b      	ldr	r3, [pc, #492]	@ (80012bc <IMU_readRawData+0x28c>)
 80010ce:	809a      	strh	r2, [r3, #4]

	// <---- ------------ Removing Gyro's Noise around 0 state ------------ ---->
	Raw_Gyro[0] = (Raw_Gyro[0] <= ZERO_MAX && Raw_Gyro[0] >= ZERO_MIN)? 0: Raw_Gyro[0];
 80010d0:	4b7a      	ldr	r3, [pc, #488]	@ (80012bc <IMU_readRawData+0x28c>)
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	2b14      	cmp	r3, #20
 80010d8:	dc05      	bgt.n	80010e6 <IMU_readRawData+0xb6>
 80010da:	4b78      	ldr	r3, [pc, #480]	@ (80012bc <IMU_readRawData+0x28c>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	f113 0f14 	cmn.w	r3, #20
 80010e4:	da03      	bge.n	80010ee <IMU_readRawData+0xbe>
 80010e6:	4b75      	ldr	r3, [pc, #468]	@ (80012bc <IMU_readRawData+0x28c>)
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	e000      	b.n	80010f0 <IMU_readRawData+0xc0>
 80010ee:	2300      	movs	r3, #0
 80010f0:	4a72      	ldr	r2, [pc, #456]	@ (80012bc <IMU_readRawData+0x28c>)
 80010f2:	8013      	strh	r3, [r2, #0]
	Raw_Gyro[1] = (Raw_Gyro[1] <= ZERO_MAX && Raw_Gyro[1] >= ZERO_MIN)? 0: Raw_Gyro[1];
 80010f4:	4b71      	ldr	r3, [pc, #452]	@ (80012bc <IMU_readRawData+0x28c>)
 80010f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010fa:	2b14      	cmp	r3, #20
 80010fc:	dc05      	bgt.n	800110a <IMU_readRawData+0xda>
 80010fe:	4b6f      	ldr	r3, [pc, #444]	@ (80012bc <IMU_readRawData+0x28c>)
 8001100:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001104:	f113 0f14 	cmn.w	r3, #20
 8001108:	da03      	bge.n	8001112 <IMU_readRawData+0xe2>
 800110a:	4b6c      	ldr	r3, [pc, #432]	@ (80012bc <IMU_readRawData+0x28c>)
 800110c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001110:	e000      	b.n	8001114 <IMU_readRawData+0xe4>
 8001112:	2300      	movs	r3, #0
 8001114:	4a69      	ldr	r2, [pc, #420]	@ (80012bc <IMU_readRawData+0x28c>)
 8001116:	8053      	strh	r3, [r2, #2]
	Raw_Gyro[2] = (Raw_Gyro[2] <= ZERO_MAX && Raw_Gyro[2] >= ZERO_MIN)? 0: Raw_Gyro[2];
 8001118:	4b68      	ldr	r3, [pc, #416]	@ (80012bc <IMU_readRawData+0x28c>)
 800111a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800111e:	2b14      	cmp	r3, #20
 8001120:	dc05      	bgt.n	800112e <IMU_readRawData+0xfe>
 8001122:	4b66      	ldr	r3, [pc, #408]	@ (80012bc <IMU_readRawData+0x28c>)
 8001124:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001128:	f113 0f14 	cmn.w	r3, #20
 800112c:	da03      	bge.n	8001136 <IMU_readRawData+0x106>
 800112e:	4b63      	ldr	r3, [pc, #396]	@ (80012bc <IMU_readRawData+0x28c>)
 8001130:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001134:	e000      	b.n	8001138 <IMU_readRawData+0x108>
 8001136:	2300      	movs	r3, #0
 8001138:	4a60      	ldr	r2, [pc, #384]	@ (80012bc <IMU_readRawData+0x28c>)
 800113a:	8093      	strh	r3, [r2, #4]

	GX = (float)(Raw_Gyro[0] * (2000 / 32768.0));
 800113c:	4b5f      	ldr	r3, [pc, #380]	@ (80012bc <IMU_readRawData+0x28c>)
 800113e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f99e 	bl	8000484 <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <IMU_readRawData+0x290>)
 800114e:	f7ff fa03 	bl	8000558 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fc0f 	bl	800097c <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a58      	ldr	r2, [pc, #352]	@ (80012c4 <IMU_readRawData+0x294>)
 8001162:	6013      	str	r3, [r2, #0]
	GY = (float)(Raw_Gyro[1] * (2000 / 32768.0));
 8001164:	4b55      	ldr	r3, [pc, #340]	@ (80012bc <IMU_readRawData+0x28c>)
 8001166:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f98a 	bl	8000484 <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b52      	ldr	r3, [pc, #328]	@ (80012c0 <IMU_readRawData+0x290>)
 8001176:	f7ff f9ef 	bl	8000558 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fbfb 	bl	800097c <__aeabi_d2f>
 8001186:	4603      	mov	r3, r0
 8001188:	4a4f      	ldr	r2, [pc, #316]	@ (80012c8 <IMU_readRawData+0x298>)
 800118a:	6013      	str	r3, [r2, #0]
	GZ = (float)(Raw_Gyro[2] * (2000 / 32768.0));
 800118c:	4b4b      	ldr	r3, [pc, #300]	@ (80012bc <IMU_readRawData+0x28c>)
 800118e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f976 	bl	8000484 <__aeabi_i2d>
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b48      	ldr	r3, [pc, #288]	@ (80012c0 <IMU_readRawData+0x290>)
 800119e:	f7ff f9db 	bl	8000558 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fbe7 	bl	800097c <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a46      	ldr	r2, [pc, #280]	@ (80012cc <IMU_readRawData+0x29c>)
 80011b2:	6013      	str	r3, [r2, #0]

	AX = (float)(Raw_Accel[0] * (16.0 / 32768.0));
 80011b4:	4b40      	ldr	r3, [pc, #256]	@ (80012b8 <IMU_readRawData+0x288>)
 80011b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f962 	bl	8000484 <__aeabi_i2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80011c8:	f7ff f9c6 	bl	8000558 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fbd2 	bl	800097c <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a3d      	ldr	r2, [pc, #244]	@ (80012d0 <IMU_readRawData+0x2a0>)
 80011dc:	6013      	str	r3, [r2, #0]
	AY = (float)(Raw_Accel[1] * (16.0 / 32768.0));
 80011de:	4b36      	ldr	r3, [pc, #216]	@ (80012b8 <IMU_readRawData+0x288>)
 80011e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f94d 	bl	8000484 <__aeabi_i2d>
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80011f2:	f7ff f9b1 	bl	8000558 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fbbd 	bl	800097c <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	4a33      	ldr	r2, [pc, #204]	@ (80012d4 <IMU_readRawData+0x2a4>)
 8001206:	6013      	str	r3, [r2, #0]
	AZ = (float)(Raw_Accel[2] * (16.0 / 32768.0));
 8001208:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <IMU_readRawData+0x288>)
 800120a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f938 	bl	8000484 <__aeabi_i2d>
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 800121c:	f7ff f99c 	bl	8000558 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fba8 	bl	800097c <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	4a2a      	ldr	r2, [pc, #168]	@ (80012d8 <IMU_readRawData+0x2a8>)
 8001230:	6013      	str	r3, [r2, #0]

//	// <---- ------------ Converting Degree to Radian------------ ---->
	GX = GX / (180.0 / M_PI);
 8001232:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <IMU_readRawData+0x294>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f936 	bl	80004a8 <__aeabi_f2d>
 800123c:	a31a      	add	r3, pc, #104	@ (adr r3, 80012a8 <IMU_readRawData+0x278>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff fab3 	bl	80007ac <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fb95 	bl	800097c <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a1b      	ldr	r2, [pc, #108]	@ (80012c4 <IMU_readRawData+0x294>)
 8001256:	6013      	str	r3, [r2, #0]
	GY = GY / (180.0 / M_PI);
 8001258:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <IMU_readRawData+0x298>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f923 	bl	80004a8 <__aeabi_f2d>
 8001262:	a311      	add	r3, pc, #68	@ (adr r3, 80012a8 <IMU_readRawData+0x278>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff faa0 	bl	80007ac <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fb82 	bl	800097c <__aeabi_d2f>
 8001278:	4603      	mov	r3, r0
 800127a:	4a13      	ldr	r2, [pc, #76]	@ (80012c8 <IMU_readRawData+0x298>)
 800127c:	6013      	str	r3, [r2, #0]
	GZ = GZ / (180.0 / M_PI);
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <IMU_readRawData+0x29c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f910 	bl	80004a8 <__aeabi_f2d>
 8001288:	a307      	add	r3, pc, #28	@ (adr r3, 80012a8 <IMU_readRawData+0x278>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff fa8d 	bl	80007ac <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fb6f 	bl	800097c <__aeabi_d2f>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <IMU_readRawData+0x29c>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	1a63c1f8 	.word	0x1a63c1f8
 80012ac:	404ca5dc 	.word	0x404ca5dc
 80012b0:	20000388 	.word	0x20000388
 80012b4:	20000320 	.word	0x20000320
 80012b8:	20000398 	.word	0x20000398
 80012bc:	200003a0 	.word	0x200003a0
 80012c0:	3faf4000 	.word	0x3faf4000
 80012c4:	200003a8 	.word	0x200003a8
 80012c8:	200003ac 	.word	0x200003ac
 80012cc:	200003b0 	.word	0x200003b0
 80012d0:	200003b4 	.word	0x200003b4
 80012d4:	200003b8 	.word	0x200003b8
 80012d8:	200003bc 	.word	0x200003bc

080012dc <IMU_UpdateAngles>:

void IMU_UpdateAngles(float dt)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	ed2d 8b02 	vpush	{d8}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	ed87 0a01 	vstr	s0, [r7, #4]
    static int first_run = 1;
    static float last_roll, last_pitch;

    if(first_run)
 80012ea:	4b7c      	ldr	r3, [pc, #496]	@ (80014dc <IMU_UpdateAngles+0x200>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d051      	beq.n	8001396 <IMU_UpdateAngles+0xba>
    {
        float roll_acc = atan2f(AY, sqrtf(AX*AX + AZ*AZ));
 80012f2:	4b7b      	ldr	r3, [pc, #492]	@ (80014e0 <IMU_UpdateAngles+0x204>)
 80012f4:	ed93 8a00 	vldr	s16, [r3]
 80012f8:	4b7a      	ldr	r3, [pc, #488]	@ (80014e4 <IMU_UpdateAngles+0x208>)
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	4b79      	ldr	r3, [pc, #484]	@ (80014e4 <IMU_UpdateAngles+0x208>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001308:	4b77      	ldr	r3, [pc, #476]	@ (80014e8 <IMU_UpdateAngles+0x20c>)
 800130a:	edd3 6a00 	vldr	s13, [r3]
 800130e:	4b76      	ldr	r3, [pc, #472]	@ (80014e8 <IMU_UpdateAngles+0x20c>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	eeb0 0a67 	vmov.f32	s0, s15
 8001320:	f003 ff92 	bl	8005248 <sqrtf>
 8001324:	eef0 7a40 	vmov.f32	s15, s0
 8001328:	eef0 0a67 	vmov.f32	s1, s15
 800132c:	eeb0 0a48 	vmov.f32	s0, s16
 8001330:	f003 ff88 	bl	8005244 <atan2f>
 8001334:	ed87 0a03 	vstr	s0, [r7, #12]
        float pitch_acc = atan2f(-AX, sqrtf(AY*AY + AZ*AZ));
 8001338:	4b6a      	ldr	r3, [pc, #424]	@ (80014e4 <IMU_UpdateAngles+0x208>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb1 8a67 	vneg.f32	s16, s15
 8001342:	4b67      	ldr	r3, [pc, #412]	@ (80014e0 <IMU_UpdateAngles+0x204>)
 8001344:	ed93 7a00 	vldr	s14, [r3]
 8001348:	4b65      	ldr	r3, [pc, #404]	@ (80014e0 <IMU_UpdateAngles+0x204>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001352:	4b65      	ldr	r3, [pc, #404]	@ (80014e8 <IMU_UpdateAngles+0x20c>)
 8001354:	edd3 6a00 	vldr	s13, [r3]
 8001358:	4b63      	ldr	r3, [pc, #396]	@ (80014e8 <IMU_UpdateAngles+0x20c>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	eeb0 0a67 	vmov.f32	s0, s15
 800136a:	f003 ff6d 	bl	8005248 <sqrtf>
 800136e:	eef0 7a40 	vmov.f32	s15, s0
 8001372:	eef0 0a67 	vmov.f32	s1, s15
 8001376:	eeb0 0a48 	vmov.f32	s0, s16
 800137a:	f003 ff63 	bl	8005244 <atan2f>
 800137e:	ed87 0a02 	vstr	s0, [r7, #8]
        last_roll = roll_acc;
 8001382:	4a5a      	ldr	r2, [pc, #360]	@ (80014ec <IMU_UpdateAngles+0x210>)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6013      	str	r3, [r2, #0]
        last_pitch = pitch_acc;
 8001388:	4a59      	ldr	r2, [pc, #356]	@ (80014f0 <IMU_UpdateAngles+0x214>)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	6013      	str	r3, [r2, #0]
        first_run = 0;
 800138e:	4b53      	ldr	r3, [pc, #332]	@ (80014dc <IMU_UpdateAngles+0x200>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
        return;
 8001394:	e09c      	b.n	80014d0 <IMU_UpdateAngles+0x1f4>
    }

    // Gyro integration
    float gyro_roll = last_roll + GX * dt;
 8001396:	4b57      	ldr	r3, [pc, #348]	@ (80014f4 <IMU_UpdateAngles+0x218>)
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a4:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <IMU_UpdateAngles+0x210>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	edc7 7a07 	vstr	s15, [r7, #28]
    float gyro_pitch = last_pitch + GY * dt;
 80013b2:	4b51      	ldr	r3, [pc, #324]	@ (80014f8 <IMU_UpdateAngles+0x21c>)
 80013b4:	ed93 7a00 	vldr	s14, [r3]
 80013b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c0:	4b4b      	ldr	r3, [pc, #300]	@ (80014f0 <IMU_UpdateAngles+0x214>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	edc7 7a06 	vstr	s15, [r7, #24]

    // Accelerometer angles
    float roll_acc = atan2f(AY, sqrtf(AX * AX + AZ * AZ));
 80013ce:	4b44      	ldr	r3, [pc, #272]	@ (80014e0 <IMU_UpdateAngles+0x204>)
 80013d0:	ed93 8a00 	vldr	s16, [r3]
 80013d4:	4b43      	ldr	r3, [pc, #268]	@ (80014e4 <IMU_UpdateAngles+0x208>)
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	4b42      	ldr	r3, [pc, #264]	@ (80014e4 <IMU_UpdateAngles+0x208>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e4:	4b40      	ldr	r3, [pc, #256]	@ (80014e8 <IMU_UpdateAngles+0x20c>)
 80013e6:	edd3 6a00 	vldr	s13, [r3]
 80013ea:	4b3f      	ldr	r3, [pc, #252]	@ (80014e8 <IMU_UpdateAngles+0x20c>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	eeb0 0a67 	vmov.f32	s0, s15
 80013fc:	f003 ff24 	bl	8005248 <sqrtf>
 8001400:	eef0 7a40 	vmov.f32	s15, s0
 8001404:	eef0 0a67 	vmov.f32	s1, s15
 8001408:	eeb0 0a48 	vmov.f32	s0, s16
 800140c:	f003 ff1a 	bl	8005244 <atan2f>
 8001410:	ed87 0a05 	vstr	s0, [r7, #20]
    float pitch_acc = atan2f(-AX, sqrtf(AY * AY + AZ * AZ));
 8001414:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <IMU_UpdateAngles+0x208>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	eeb1 8a67 	vneg.f32	s16, s15
 800141e:	4b30      	ldr	r3, [pc, #192]	@ (80014e0 <IMU_UpdateAngles+0x204>)
 8001420:	ed93 7a00 	vldr	s14, [r3]
 8001424:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <IMU_UpdateAngles+0x204>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142e:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <IMU_UpdateAngles+0x20c>)
 8001430:	edd3 6a00 	vldr	s13, [r3]
 8001434:	4b2c      	ldr	r3, [pc, #176]	@ (80014e8 <IMU_UpdateAngles+0x20c>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	f003 feff 	bl	8005248 <sqrtf>
 800144a:	eef0 7a40 	vmov.f32	s15, s0
 800144e:	eef0 0a67 	vmov.f32	s1, s15
 8001452:	eeb0 0a48 	vmov.f32	s0, s16
 8001456:	f003 fef5 	bl	8005244 <atan2f>
 800145a:	ed87 0a04 	vstr	s0, [r7, #16]

    // Complementary filter
    Roll = ALPHA * gyro_roll + (1 - ALPHA) * roll_acc;
 800145e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001462:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80014fc <IMU_UpdateAngles+0x220>
 8001466:	ee27 7a87 	vmul.f32	s14, s15, s14
 800146a:	edd7 7a05 	vldr	s15, [r7, #20]
 800146e:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001500 <IMU_UpdateAngles+0x224>
 8001472:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <IMU_UpdateAngles+0x228>)
 800147c:	edc3 7a00 	vstr	s15, [r3]
    Pitch = ALPHA * gyro_pitch + (1 - ALPHA) * pitch_acc;
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80014fc <IMU_UpdateAngles+0x220>
 8001488:	ee27 7a87 	vmul.f32	s14, s15, s14
 800148c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001490:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001500 <IMU_UpdateAngles+0x224>
 8001494:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <IMU_UpdateAngles+0x22c>)
 800149e:	edc3 7a00 	vstr	s15, [r3]

    // Yaw integration (will drift without magnetometer)
    Yaw += GZ * dt;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <IMU_UpdateAngles+0x230>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <IMU_UpdateAngles+0x234>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <IMU_UpdateAngles+0x234>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]

    // Store for next iteration
    last_roll = Roll;
 80014c0:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <IMU_UpdateAngles+0x228>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <IMU_UpdateAngles+0x210>)
 80014c6:	6013      	str	r3, [r2, #0]
    last_pitch = Pitch;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <IMU_UpdateAngles+0x22c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a08      	ldr	r2, [pc, #32]	@ (80014f0 <IMU_UpdateAngles+0x214>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	3720      	adds	r7, #32
 80014d2:	46bd      	mov	sp, r7
 80014d4:	ecbd 8b02 	vpop	{d8}
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000000 	.word	0x20000000
 80014e0:	200003b8 	.word	0x200003b8
 80014e4:	200003b4 	.word	0x200003b4
 80014e8:	200003bc 	.word	0x200003bc
 80014ec:	200003cc 	.word	0x200003cc
 80014f0:	200003d0 	.word	0x200003d0
 80014f4:	200003a8 	.word	0x200003a8
 80014f8:	200003ac 	.word	0x200003ac
 80014fc:	3f7ae148 	.word	0x3f7ae148
 8001500:	3ca3d700 	.word	0x3ca3d700
 8001504:	200003c0 	.word	0x200003c0
 8001508:	200003c4 	.word	0x200003c4
 800150c:	200003b0 	.word	0x200003b0
 8001510:	200003c8 	.word	0x200003c8

08001514 <StartRunTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRunTask */
void StartRunTask(void const * argument)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 800151c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001520:	4804      	ldr	r0, [pc, #16]	@ (8001534 <StartRunTask+0x20>)
 8001522:	f000 fc8c 	bl	8001e3e <HAL_GPIO_TogglePin>
    osDelay(500);
 8001526:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800152a:	f002 fb8c 	bl	8003c46 <osDelay>
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 800152e:	bf00      	nop
 8001530:	e7f4      	b.n	800151c <StartRunTask+0x8>
 8001532:	bf00      	nop
 8001534:	40020c00 	.word	0x40020c00

08001538 <StartReadDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadDataTask */
void StartReadDataTask(void const * argument)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadDataTask */
  uint32_t last_time = HAL_GetTick();
 8001540:	f000 f9ce 	bl	80018e0 <HAL_GetTick>
 8001544:	6178      	str	r0, [r7, #20]
  uint32_t now = HAL_GetTick();
 8001546:	f000 f9cb 	bl	80018e0 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]
  float dt = (now - last_time) * 0.001f;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80015a0 <StartReadDataTask+0x68>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	edc7 7a03 	vstr	s15, [r7, #12]

  IMU_Init();
 8001566:	f7ff fd3b 	bl	8000fe0 <IMU_Init>
  /* Infinite loop */
  for(;;)
  {
	IMU_readRawData();
 800156a:	f7ff fd61 	bl	8001030 <IMU_readRawData>

	now = HAL_GetTick();
 800156e:	f000 f9b7 	bl	80018e0 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]
    dt = (now - last_time) * 0.001f;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80015a0 <StartReadDataTask+0x68>
 8001586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158a:	edc7 7a03 	vstr	s15, [r7, #12]
    last_time = now;
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	617b      	str	r3, [r7, #20]

    IMU_UpdateAngles(dt);
 8001592:	ed97 0a03 	vldr	s0, [r7, #12]
 8001596:	f7ff fea1 	bl	80012dc <IMU_UpdateAngles>
	IMU_readRawData();
 800159a:	bf00      	nop
 800159c:	e7e5      	b.n	800156a <StartReadDataTask+0x32>
 800159e:	bf00      	nop
 80015a0:	3a83126f 	.word	0x3a83126f

080015a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015b6:	f000 f97f 	bl	80018b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40014800 	.word	0x40014800

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_Error_GPIO_Port, LED_Error_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015d2:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <Error_Handler+0x18>)
 80015d4:	f000 fc1a 	bl	8001e0c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <Error_Handler+0x14>
 80015e0:	40020c00 	.word	0x40020c00

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_MspInit+0x54>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	4a11      	ldr	r2, [pc, #68]	@ (8001638 <HAL_MspInit+0x54>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_MspInit+0x54>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_MspInit+0x54>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <HAL_MspInit+0x54>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <HAL_MspInit+0x54>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	210f      	movs	r1, #15
 8001626:	f06f 0001 	mvn.w	r0, #1
 800162a:	f000 fa41 	bl	8001ab0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <HAL_SPI_MspInit+0x84>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12b      	bne.n	80016b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_SPI_MspInit+0x88>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <HAL_SPI_MspInit+0x88>)
 8001668:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800166c:	6453      	str	r3, [r2, #68]	@ 0x44
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_SPI_MspInit+0x88>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_SPI_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a10      	ldr	r2, [pc, #64]	@ (80016c4 <HAL_SPI_MspInit+0x88>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <HAL_SPI_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001696:	23e0      	movs	r3, #224	@ 0xe0
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016a6:	2305      	movs	r3, #5
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <HAL_SPI_MspInit+0x8c>)
 80016b2:	f000 fa27 	bl	8001b04 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	@ 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40013000 	.word	0x40013000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	@ 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <HAL_InitTick+0xd0>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	4a2d      	ldr	r2, [pc, #180]	@ (800179c <HAL_InitTick+0xd0>)
 80016e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ec:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <HAL_InitTick+0xd0>)
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016f8:	f107 020c 	add.w	r2, r7, #12
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f001 f83a 	bl	800277c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001708:	f001 f824 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 800170c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800170e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001710:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <HAL_InitTick+0xd4>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0c9b      	lsrs	r3, r3, #18
 8001718:	3b01      	subs	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800171c:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <HAL_InitTick+0xd8>)
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <HAL_InitTick+0xdc>)
 8001720:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001722:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <HAL_InitTick+0xd8>)
 8001724:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001728:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800172a:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <HAL_InitTick+0xd8>)
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001730:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <HAL_InitTick+0xd8>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <HAL_InitTick+0xd8>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <HAL_InitTick+0xd8>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001742:	4818      	ldr	r0, [pc, #96]	@ (80017a4 <HAL_InitTick+0xd8>)
 8001744:	f001 fe1e 	bl	8003384 <HAL_TIM_Base_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800174e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11b      	bne.n	800178e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001756:	4813      	ldr	r0, [pc, #76]	@ (80017a4 <HAL_InitTick+0xd8>)
 8001758:	f001 fe6e 	bl	8003438 <HAL_TIM_Base_Start_IT>
 800175c:	4603      	mov	r3, r0
 800175e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001762:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001766:	2b00      	cmp	r3, #0
 8001768:	d111      	bne.n	800178e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800176a:	201a      	movs	r0, #26
 800176c:	f000 f9bc 	bl	8001ae8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b0f      	cmp	r3, #15
 8001774:	d808      	bhi.n	8001788 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001776:	2200      	movs	r2, #0
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	201a      	movs	r0, #26
 800177c:	f000 f998 	bl	8001ab0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001780:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <HAL_InitTick+0xe0>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e002      	b.n	800178e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800178e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001792:	4618      	mov	r0, r3
 8001794:	3730      	adds	r7, #48	@ 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	200003d4 	.word	0x200003d4
 80017a8:	40014800 	.word	0x40014800
 80017ac:	20000008 	.word	0x20000008

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <NMI_Handler+0x4>

080017b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <MemManage_Handler+0x4>

080017c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80017ee:	f001 fe85 	bl	80034fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200003d4 	.word	0x200003d4

080017fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <SystemInit+0x20>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <SystemInit+0x20>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001820:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001858 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001824:	f7ff ffea 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182a:	490d      	ldr	r1, [pc, #52]	@ (8001860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001840:	4c0a      	ldr	r4, [pc, #40]	@ (800186c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184e:	f003 fc7d 	bl	800514c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001852:	f7ff fa75 	bl	8000d40 <main>
  bx  lr    
 8001856:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001860:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001864:	08005654 	.word	0x08005654
  ldr r2, =_sbss
 8001868:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800186c:	200042bc 	.word	0x200042bc

08001870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC_IRQHandler>
	...

08001874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001878:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <HAL_Init+0x40>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_Init+0x40>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800188e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_Init+0x40>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f000 f8fc 	bl	8001a9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a2:	200f      	movs	r0, #15
 80018a4:	f7ff ff12 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a8:	f7ff fe9c 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	2000041c 	.word	0x2000041c

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000041c 	.word	0x2000041c

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000000c 	.word	0x2000000c

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	@ (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	@ (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	@ (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff4c 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac2:	f7ff ff61 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001ac6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	6978      	ldr	r0, [r7, #20]
 8001ace:	f7ff ffb1 	bl	8001a34 <NVIC_EncodePriority>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff80 	bl	80019e0 <__NVIC_SetPriority>
}
 8001ae0:	bf00      	nop
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff54 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	@ 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e159      	b.n	8001dd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f040 8148 	bne.w	8001dce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d005      	beq.n	8001b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d130      	bne.n	8001bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d017      	beq.n	8001bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d123      	bne.n	8001c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	69b9      	ldr	r1, [r7, #24]
 8001c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80a2 	beq.w	8001dce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b57      	ldr	r3, [pc, #348]	@ (8001dec <HAL_GPIO_Init+0x2e8>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	4a56      	ldr	r2, [pc, #344]	@ (8001dec <HAL_GPIO_Init+0x2e8>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9a:	4b54      	ldr	r3, [pc, #336]	@ (8001dec <HAL_GPIO_Init+0x2e8>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca6:	4a52      	ldr	r2, [pc, #328]	@ (8001df0 <HAL_GPIO_Init+0x2ec>)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a49      	ldr	r2, [pc, #292]	@ (8001df4 <HAL_GPIO_Init+0x2f0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d019      	beq.n	8001d06 <HAL_GPIO_Init+0x202>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a48      	ldr	r2, [pc, #288]	@ (8001df8 <HAL_GPIO_Init+0x2f4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x1fe>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a47      	ldr	r2, [pc, #284]	@ (8001dfc <HAL_GPIO_Init+0x2f8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x1fa>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a46      	ldr	r2, [pc, #280]	@ (8001e00 <HAL_GPIO_Init+0x2fc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x1f6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a45      	ldr	r2, [pc, #276]	@ (8001e04 <HAL_GPIO_Init+0x300>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x1f2>
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x204>
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x204>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x204>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x204>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x204>
 8001d06:	2300      	movs	r3, #0
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d18:	4935      	ldr	r1, [pc, #212]	@ (8001df0 <HAL_GPIO_Init+0x2ec>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d26:	4b38      	ldr	r3, [pc, #224]	@ (8001e08 <HAL_GPIO_Init+0x304>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e08 <HAL_GPIO_Init+0x304>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_GPIO_Init+0x304>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d74:	4a24      	ldr	r2, [pc, #144]	@ (8001e08 <HAL_GPIO_Init+0x304>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7a:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <HAL_GPIO_Init+0x304>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e08 <HAL_GPIO_Init+0x304>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <HAL_GPIO_Init+0x304>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e08 <HAL_GPIO_Init+0x304>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	f67f aea2 	bls.w	8001b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3724      	adds	r7, #36	@ 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e28:	e003      	b.n	8001e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e50:	887a      	ldrh	r2, [r7, #2]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4013      	ands	r3, r2
 8001e56:	041a      	lsls	r2, r3, #16
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	400b      	ands	r3, r1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	619a      	str	r2, [r3, #24]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e267      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d075      	beq.n	8001f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e92:	4b88      	ldr	r3, [pc, #544]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b85      	ldr	r3, [pc, #532]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b82      	ldr	r3, [pc, #520]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x108>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e242      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x74>
 8001eda:	4b76      	ldr	r3, [pc, #472]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a75      	ldr	r2, [pc, #468]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b70      	ldr	r3, [pc, #448]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6f      	ldr	r2, [pc, #444]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6d      	ldr	r3, [pc, #436]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6c      	ldr	r2, [pc, #432]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	4b69      	ldr	r3, [pc, #420]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a68      	ldr	r2, [pc, #416]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b66      	ldr	r3, [pc, #408]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a65      	ldr	r2, [pc, #404]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fcd8 	bl	80018e0 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fcd4 	bl	80018e0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	@ 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e207      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b5b      	ldr	r3, [pc, #364]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xc0>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fcc4 	bl	80018e0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fcc0 	bl	80018e0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	@ 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1f3      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b51      	ldr	r3, [pc, #324]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0xe8>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b47      	ldr	r3, [pc, #284]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b44      	ldr	r3, [pc, #272]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b41      	ldr	r3, [pc, #260]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1c7      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4937      	ldr	r1, [pc, #220]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <HAL_RCC_OscConfig+0x244>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff fc79 	bl	80018e0 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fc75 	bl	80018e0 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1a8      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b2b      	ldr	r3, [pc, #172]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4925      	ldr	r1, [pc, #148]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <HAL_RCC_OscConfig+0x244>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff fc58 	bl	80018e0 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002034:	f7ff fc54 	bl	80018e0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e187      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d036      	beq.n	80020cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_RCC_OscConfig+0x248>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff fc38 	bl	80018e0 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff fc34 	bl	80018e0 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e167      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x200>
 8002092:	e01b      	b.n	80020cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <HAL_RCC_OscConfig+0x248>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7ff fc21 	bl	80018e0 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	e00e      	b.n	80020c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a2:	f7ff fc1d 	bl	80018e0 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d907      	bls.n	80020c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e150      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	42470000 	.word	0x42470000
 80020bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	4b88      	ldr	r3, [pc, #544]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ea      	bne.n	80020a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8097 	beq.w	8002208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b81      	ldr	r3, [pc, #516]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10f      	bne.n	800210a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b7d      	ldr	r3, [pc, #500]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	4a7c      	ldr	r2, [pc, #496]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fa:	4b7a      	ldr	r3, [pc, #488]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b77      	ldr	r3, [pc, #476]	@ (80022e8 <HAL_RCC_OscConfig+0x474>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b74      	ldr	r3, [pc, #464]	@ (80022e8 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a73      	ldr	r2, [pc, #460]	@ (80022e8 <HAL_RCC_OscConfig+0x474>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7ff fbdd 	bl	80018e0 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7ff fbd9 	bl	80018e0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e10c      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b6a      	ldr	r3, [pc, #424]	@ (80022e8 <HAL_RCC_OscConfig+0x474>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x2ea>
 8002150:	4b64      	ldr	r3, [pc, #400]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002154:	4a63      	ldr	r2, [pc, #396]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	@ 0x70
 800215c:	e01c      	b.n	8002198 <HAL_RCC_OscConfig+0x324>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x30c>
 8002166:	4b5f      	ldr	r3, [pc, #380]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216a:	4a5e      	ldr	r2, [pc, #376]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6713      	str	r3, [r2, #112]	@ 0x70
 8002172:	4b5c      	ldr	r3, [pc, #368]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	4a5b      	ldr	r2, [pc, #364]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6713      	str	r3, [r2, #112]	@ 0x70
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0x324>
 8002180:	4b58      	ldr	r3, [pc, #352]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002184:	4a57      	ldr	r2, [pc, #348]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	@ 0x70
 800218c:	4b55      	ldr	r3, [pc, #340]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002190:	4a54      	ldr	r2, [pc, #336]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0304 	bic.w	r3, r3, #4
 8002196:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7ff fb9e 	bl	80018e0 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7ff fb9a 	bl	80018e0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0cb      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	4b49      	ldr	r3, [pc, #292]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0ee      	beq.n	80021a8 <HAL_RCC_OscConfig+0x334>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7ff fb88 	bl	80018e0 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7ff fb84 	bl	80018e0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0b5      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	4b3e      	ldr	r3, [pc, #248]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ee      	bne.n	80021d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b39      	ldr	r3, [pc, #228]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	4a38      	ldr	r2, [pc, #224]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002206:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a1 	beq.w	8002354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002212:	4b34      	ldr	r3, [pc, #208]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d05c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d141      	bne.n	80022aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <HAL_RCC_OscConfig+0x478>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fb58 	bl	80018e0 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7ff fb54 	bl	80018e0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e087      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	4b27      	ldr	r3, [pc, #156]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	3b01      	subs	r3, #1
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	491b      	ldr	r1, [pc, #108]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <HAL_RCC_OscConfig+0x478>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fb2d 	bl	80018e0 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff fb29 	bl	80018e0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e05c      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x416>
 80022a8:	e054      	b.n	8002354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <HAL_RCC_OscConfig+0x478>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fb16 	bl	80018e0 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff fb12 	bl	80018e0 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e045      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x444>
 80022d6:	e03d      	b.n	8002354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e038      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40007000 	.word	0x40007000
 80022ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_RCC_OscConfig+0x4ec>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d028      	beq.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d121      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d11a      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002328:	4293      	cmp	r3, r2
 800232a:	d111      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	3b01      	subs	r3, #1
 800233a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0cc      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b68      	ldr	r3, [pc, #416]	@ (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d90c      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b65      	ldr	r3, [pc, #404]	@ (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	@ (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a58      	ldr	r2, [pc, #352]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a52      	ldr	r2, [pc, #328]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d044      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d119      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	2b03      	cmp	r3, #3
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b3f      	ldr	r3, [pc, #252]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3b      	ldr	r3, [pc, #236]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e067      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b37      	ldr	r3, [pc, #220]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4934      	ldr	r1, [pc, #208]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7ff fa44 	bl	80018e0 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7ff fa40 	bl	80018e0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2b      	ldr	r3, [pc, #172]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b25      	ldr	r3, [pc, #148]	@ (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20c      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b22      	ldr	r3, [pc, #136]	@ (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f8de 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00
 8002520:	40023800 	.word	0x40023800
 8002524:	080055f4 	.word	0x080055f4
 8002528:	20000004 	.word	0x20000004
 800252c:	20000008 	.word	0x20000008

08002530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002534:	b094      	sub	sp, #80	@ 0x50
 8002536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002548:	4b79      	ldr	r3, [pc, #484]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d00d      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x40>
 8002554:	2b08      	cmp	r3, #8
 8002556:	f200 80e1 	bhi.w	800271c <HAL_RCC_GetSysClockFreq+0x1ec>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x34>
 800255e:	2b04      	cmp	r3, #4
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x3a>
 8002562:	e0db      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b73      	ldr	r3, [pc, #460]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x204>)
 8002566:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002568:	e0db      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256a:	4b73      	ldr	r3, [pc, #460]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x208>)
 800256c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800256e:	e0d8      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4b6f      	ldr	r3, [pc, #444]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002578:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257a:	4b6d      	ldr	r3, [pc, #436]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b6a      	ldr	r3, [pc, #424]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	2200      	movs	r2, #0
 800258e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002590:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002598:	633b      	str	r3, [r7, #48]	@ 0x30
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	@ 0x34
 800259e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025a2:	4622      	mov	r2, r4
 80025a4:	462b      	mov	r3, r5
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b4:	0150      	lsls	r0, r2, #5
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4621      	mov	r1, r4
 80025bc:	1a51      	subs	r1, r2, r1
 80025be:	6139      	str	r1, [r7, #16]
 80025c0:	4629      	mov	r1, r5
 80025c2:	eb63 0301 	sbc.w	r3, r3, r1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d4:	4659      	mov	r1, fp
 80025d6:	018b      	lsls	r3, r1, #6
 80025d8:	4651      	mov	r1, sl
 80025da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025de:	4651      	mov	r1, sl
 80025e0:	018a      	lsls	r2, r1, #6
 80025e2:	4651      	mov	r1, sl
 80025e4:	ebb2 0801 	subs.w	r8, r2, r1
 80025e8:	4659      	mov	r1, fp
 80025ea:	eb63 0901 	sbc.w	r9, r3, r1
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002602:	4690      	mov	r8, r2
 8002604:	4699      	mov	r9, r3
 8002606:	4623      	mov	r3, r4
 8002608:	eb18 0303 	adds.w	r3, r8, r3
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	462b      	mov	r3, r5
 8002610:	eb49 0303 	adc.w	r3, r9, r3
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002622:	4629      	mov	r1, r5
 8002624:	024b      	lsls	r3, r1, #9
 8002626:	4621      	mov	r1, r4
 8002628:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800262c:	4621      	mov	r1, r4
 800262e:	024a      	lsls	r2, r1, #9
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002636:	2200      	movs	r2, #0
 8002638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800263a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800263c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002640:	f7fe f9ec 	bl	8000a1c <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4613      	mov	r3, r2
 800264a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800264c:	e058      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	4618      	mov	r0, r3
 8002658:	4611      	mov	r1, r2
 800265a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800265e:	623b      	str	r3, [r7, #32]
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
 8002664:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002668:	4642      	mov	r2, r8
 800266a:	464b      	mov	r3, r9
 800266c:	f04f 0000 	mov.w	r0, #0
 8002670:	f04f 0100 	mov.w	r1, #0
 8002674:	0159      	lsls	r1, r3, #5
 8002676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267a:	0150      	lsls	r0, r2, #5
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4641      	mov	r1, r8
 8002682:	ebb2 0a01 	subs.w	sl, r2, r1
 8002686:	4649      	mov	r1, r9
 8002688:	eb63 0b01 	sbc.w	fp, r3, r1
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002698:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800269c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026a0:	ebb2 040a 	subs.w	r4, r2, sl
 80026a4:	eb63 050b 	sbc.w	r5, r3, fp
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	00eb      	lsls	r3, r5, #3
 80026b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b6:	00e2      	lsls	r2, r4, #3
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	4643      	mov	r3, r8
 80026be:	18e3      	adds	r3, r4, r3
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	464b      	mov	r3, r9
 80026c4:	eb45 0303 	adc.w	r3, r5, r3
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026d6:	4629      	mov	r1, r5
 80026d8:	028b      	lsls	r3, r1, #10
 80026da:	4621      	mov	r1, r4
 80026dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e0:	4621      	mov	r1, r4
 80026e2:	028a      	lsls	r2, r1, #10
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ea:	2200      	movs	r2, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	61fa      	str	r2, [r7, #28]
 80026f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f4:	f7fe f992 	bl	8000a1c <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4613      	mov	r3, r2
 80026fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002710:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800271a:	e002      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x204>)
 800271e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002724:	4618      	mov	r0, r3
 8002726:	3750      	adds	r7, #80	@ 0x50
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	00f42400 	.word	0x00f42400
 8002738:	007a1200 	.word	0x007a1200

0800273c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002740:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <HAL_RCC_GetHCLKFreq+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000004 	.word	0x20000004

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002758:	f7ff fff0 	bl	800273c <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0b5b      	lsrs	r3, r3, #13
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	@ (8002778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	08005604 	.word	0x08005604

0800277c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	220f      	movs	r2, #15
 800278a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800278c:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <HAL_RCC_GetClockConfig+0x5c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002798:	4b0f      	ldr	r3, [pc, #60]	@ (80027d8 <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027a4:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027b0:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <HAL_RCC_GetClockConfig+0x5c>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <HAL_RCC_GetClockConfig+0x60>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0207 	and.w	r2, r3, #7
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	601a      	str	r2, [r3, #0]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40023c00 	.word	0x40023c00

080027e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07b      	b.n	80028ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d108      	bne.n	800280c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002802:	d009      	beq.n	8002818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
 800280a:	e005      	b.n	8002818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe ff02 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800284e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289c:	ea42 0103 	orr.w	r1, r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	f003 0104 	and.w	r1, r3, #4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	f003 0210 	and.w	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b088      	sub	sp, #32
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002902:	f7fe ffed 	bl	80018e0 <HAL_GetTick>
 8002906:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d001      	beq.n	800291c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
 800291a:	e12a      	b.n	8002b72 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_SPI_Transmit+0x36>
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e122      	b.n	8002b72 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_SPI_Transmit+0x48>
 8002936:	2302      	movs	r3, #2
 8002938:	e11b      	b.n	8002b72 <HAL_SPI_Transmit+0x280>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2203      	movs	r2, #3
 8002946:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002988:	d10f      	bne.n	80029aa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002998:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b4:	2b40      	cmp	r3, #64	@ 0x40
 80029b6:	d007      	beq.n	80029c8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d0:	d152      	bne.n	8002a78 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Transmit+0xee>
 80029da:	8b7b      	ldrh	r3, [r7, #26]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d145      	bne.n	8002a6c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	881a      	ldrh	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	1c9a      	adds	r2, r3, #2
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a04:	e032      	b.n	8002a6c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d112      	bne.n	8002a3a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	881a      	ldrh	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	1c9a      	adds	r2, r3, #2
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a38:	e018      	b.n	8002a6c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a3a:	f7fe ff51 	bl	80018e0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d803      	bhi.n	8002a52 <HAL_SPI_Transmit+0x160>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d102      	bne.n	8002a58 <HAL_SPI_Transmit+0x166>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e082      	b.n	8002b72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1c7      	bne.n	8002a06 <HAL_SPI_Transmit+0x114>
 8002a76:	e053      	b.n	8002b20 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_SPI_Transmit+0x194>
 8002a80:	8b7b      	ldrh	r3, [r7, #26]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d147      	bne.n	8002b16 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	330c      	adds	r3, #12
 8002a90:	7812      	ldrb	r2, [r2, #0]
 8002a92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aac:	e033      	b.n	8002b16 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d113      	bne.n	8002ae4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	330c      	adds	r3, #12
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ae2:	e018      	b.n	8002b16 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ae4:	f7fe fefc 	bl	80018e0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d803      	bhi.n	8002afc <HAL_SPI_Transmit+0x20a>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afa:	d102      	bne.n	8002b02 <HAL_SPI_Transmit+0x210>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e02d      	b.n	8002b72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1c6      	bne.n	8002aae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fbd9 	bl	80032dc <SPI_EndRxTxTransaction>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b088      	sub	sp, #32
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
 8002b98:	e104      	b.n	8002da4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ba2:	d112      	bne.n	8002bca <HAL_SPI_Receive+0x50>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10e      	bne.n	8002bca <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bb4:	88fa      	ldrh	r2, [r7, #6]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f8f3 	bl	8002dac <HAL_SPI_TransmitReceive>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	e0ec      	b.n	8002da4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bca:	f7fe fe89 	bl	80018e0 <HAL_GetTick>
 8002bce:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_SPI_Receive+0x62>
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0e1      	b.n	8002da4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_SPI_Receive+0x74>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0da      	b.n	8002da4 <HAL_SPI_Receive+0x22a>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c3c:	d10f      	bne.n	8002c5e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c68:	2b40      	cmp	r3, #64	@ 0x40
 8002c6a:	d007      	beq.n	8002c7c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d170      	bne.n	8002d66 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c84:	e035      	b.n	8002cf2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d115      	bne.n	8002cc0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f103 020c 	add.w	r2, r3, #12
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cbe:	e018      	b.n	8002cf2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc0:	f7fe fe0e 	bl	80018e0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d803      	bhi.n	8002cd8 <HAL_SPI_Receive+0x15e>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d102      	bne.n	8002cde <HAL_SPI_Receive+0x164>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e058      	b.n	8002da4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1c4      	bne.n	8002c86 <HAL_SPI_Receive+0x10c>
 8002cfc:	e038      	b.n	8002d70 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d113      	bne.n	8002d34 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d16:	b292      	uxth	r2, r2
 8002d18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1e:	1c9a      	adds	r2, r3, #2
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d32:	e018      	b.n	8002d66 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d34:	f7fe fdd4 	bl	80018e0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d803      	bhi.n	8002d4c <HAL_SPI_Receive+0x1d2>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d102      	bne.n	8002d52 <HAL_SPI_Receive+0x1d8>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e01e      	b.n	8002da4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1c6      	bne.n	8002cfe <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	6839      	ldr	r1, [r7, #0]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fa4b 	bl	8003210 <SPI_EndRxTransaction>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002da2:	2300      	movs	r3, #0
  }
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	@ 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dbe:	f7fe fd8f 	bl	80018e0 <HAL_GetTick>
 8002dc2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dd6:	7ffb      	ldrb	r3, [r7, #31]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d00c      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x4a>
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002de2:	d106      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x46>
 8002dec:	7ffb      	ldrb	r3, [r7, #31]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d001      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	e17f      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x5c>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x5c>
 8002e02:	887b      	ldrh	r3, [r7, #2]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e174      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x6e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e16d      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x34a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2205      	movs	r2, #5
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	887a      	ldrh	r2, [r7, #2]
 8002e5e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e76:	2b40      	cmp	r3, #64	@ 0x40
 8002e78:	d007      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e92:	d17e      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0xf6>
 8002e9c:	8afb      	ldrh	r3, [r7, #22]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d16c      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec6:	e059      	b.n	8002f7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d11b      	bne.n	8002f0e <HAL_SPI_TransmitReceive+0x162>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d016      	beq.n	8002f0e <HAL_SPI_TransmitReceive+0x162>
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d113      	bne.n	8002f0e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	1c9a      	adds	r2, r3, #2
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d119      	bne.n	8002f50 <HAL_SPI_TransmitReceive+0x1a4>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d014      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	b292      	uxth	r2, r2
 8002f32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f50:	f7fe fcc6 	bl	80018e0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d80d      	bhi.n	8002f7c <HAL_SPI_TransmitReceive+0x1d0>
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d009      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0bc      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1a0      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x11c>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d19b      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x11c>
 8002f90:	e082      	b.n	8003098 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0x1f4>
 8002f9a:	8afb      	ldrh	r3, [r7, #22]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d171      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc6:	e05d      	b.n	8003084 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d11c      	bne.n	8003010 <HAL_SPI_TransmitReceive+0x264>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d017      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x264>
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d114      	bne.n	8003010 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	7812      	ldrb	r2, [r2, #0]
 8002ff2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d119      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x2a6>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d014      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800304e:	2301      	movs	r3, #1
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003052:	f7fe fc45 	bl	80018e0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800305e:	429a      	cmp	r2, r3
 8003060:	d803      	bhi.n	800306a <HAL_SPI_TransmitReceive+0x2be>
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d102      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x2c4>
 800306a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e038      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d19c      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x21c>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d197      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f91d 	bl	80032dc <SPI_EndRxTxTransaction>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01d      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80030f4:	2300      	movs	r3, #0
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3728      	adds	r7, #40	@ 0x28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003110:	f7fe fbe6 	bl	80018e0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	4413      	add	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003120:	f7fe fbde 	bl	80018e0 <HAL_GetTick>
 8003124:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003126:	4b39      	ldr	r3, [pc, #228]	@ (800320c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	015b      	lsls	r3, r3, #5
 800312c:	0d1b      	lsrs	r3, r3, #20
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	fb02 f303 	mul.w	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003136:	e054      	b.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d050      	beq.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003140:	f7fe fbce 	bl	80018e0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	429a      	cmp	r2, r3
 800314e:	d902      	bls.n	8003156 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d13d      	bne.n	80031d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003164:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800316e:	d111      	bne.n	8003194 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003178:	d004      	beq.n	8003184 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003182:	d107      	bne.n	8003194 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003192:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800319c:	d10f      	bne.n	80031be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e017      	b.n	8003202 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3b01      	subs	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	bf0c      	ite	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	2300      	movne	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d19b      	bne.n	8003138 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000004 	.word	0x20000004

08003210 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003224:	d111      	bne.n	800324a <SPI_EndRxTransaction+0x3a>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800322e:	d004      	beq.n	800323a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003238:	d107      	bne.n	800324a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003248:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003252:	d12a      	bne.n	80032aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325c:	d012      	beq.n	8003284 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2200      	movs	r2, #0
 8003266:	2180      	movs	r1, #128	@ 0x80
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff ff49 	bl	8003100 <SPI_WaitFlagStateUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02d      	beq.n	80032d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e026      	b.n	80032d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2200      	movs	r2, #0
 800328c:	2101      	movs	r1, #1
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ff36 	bl	8003100 <SPI_WaitFlagStateUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01a      	beq.n	80032d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e013      	b.n	80032d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2101      	movs	r1, #1
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ff23 	bl	8003100 <SPI_WaitFlagStateUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e000      	b.n	80032d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2201      	movs	r2, #1
 80032f0:	2102      	movs	r1, #2
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff ff04 	bl	8003100 <SPI_WaitFlagStateUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e032      	b.n	8003374 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <SPI_EndRxTxTransaction+0xa0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <SPI_EndRxTxTransaction+0xa4>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	0d5b      	lsrs	r3, r3, #21
 800331a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800332c:	d112      	bne.n	8003354 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2200      	movs	r2, #0
 8003336:	2180      	movs	r1, #128	@ 0x80
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fee1 	bl	8003100 <SPI_WaitFlagStateUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d016      	beq.n	8003372 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003348:	f043 0220 	orr.w	r2, r3, #32
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e00f      	b.n	8003374 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3b01      	subs	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336a:	2b80      	cmp	r3, #128	@ 0x80
 800336c:	d0f2      	beq.n	8003354 <SPI_EndRxTxTransaction+0x78>
 800336e:	e000      	b.n	8003372 <SPI_EndRxTxTransaction+0x96>
        break;
 8003370:	bf00      	nop
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000004 	.word	0x20000004
 8003380:	165e9f81 	.word	0x165e9f81

08003384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e041      	b.n	800341a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f839 	bl	8003422 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	4619      	mov	r1, r3
 80033c2:	4610      	mov	r0, r2
 80033c4:	f000 f9b2 	bl	800372c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d001      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e044      	b.n	80034da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1e      	ldr	r2, [pc, #120]	@ (80034e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d018      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800347a:	d013      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1a      	ldr	r2, [pc, #104]	@ (80034ec <HAL_TIM_Base_Start_IT+0xb4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00e      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a17      	ldr	r2, [pc, #92]	@ (80034f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a16      	ldr	r2, [pc, #88]	@ (80034f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d111      	bne.n	80034c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d010      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0201 	orr.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c6:	e007      	b.n	80034d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40000800 	.word	0x40000800
 80034f4:	40000c00 	.word	0x40000c00
 80034f8:	40014000 	.word	0x40014000

080034fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d020      	beq.n	8003560 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0202 	mvn.w	r2, #2
 8003530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f8d2 	bl	80036f0 <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8c4 	bl	80036dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8d5 	bl	8003704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d020      	beq.n	80035ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01b      	beq.n	80035ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0204 	mvn.w	r2, #4
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8ac 	bl	80036f0 <HAL_TIM_IC_CaptureCallback>
 8003598:	e005      	b.n	80035a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f89e 	bl	80036dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f8af 	bl	8003704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d020      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0208 	mvn.w	r2, #8
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2204      	movs	r2, #4
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f886 	bl	80036f0 <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f878 	bl	80036dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f889 	bl	8003704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d020      	beq.n	8003644 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0210 	mvn.w	r2, #16
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2208      	movs	r2, #8
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f860 	bl	80036f0 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f852 	bl	80036dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f863 	bl	8003704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0201 	mvn.w	r2, #1
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd ff9e 	bl	80015a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8e6 	bl	8003858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f834 	bl	8003718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00c      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0220 	mvn.w	r2, #32
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8b8 	bl	8003844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a3a      	ldr	r2, [pc, #232]	@ (8003828 <TIM_Base_SetConfig+0xfc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00f      	beq.n	8003764 <TIM_Base_SetConfig+0x38>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374a:	d00b      	beq.n	8003764 <TIM_Base_SetConfig+0x38>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a37      	ldr	r2, [pc, #220]	@ (800382c <TIM_Base_SetConfig+0x100>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <TIM_Base_SetConfig+0x38>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a36      	ldr	r2, [pc, #216]	@ (8003830 <TIM_Base_SetConfig+0x104>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0x38>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a35      	ldr	r2, [pc, #212]	@ (8003834 <TIM_Base_SetConfig+0x108>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d108      	bne.n	8003776 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2b      	ldr	r2, [pc, #172]	@ (8003828 <TIM_Base_SetConfig+0xfc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d01b      	beq.n	80037b6 <TIM_Base_SetConfig+0x8a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003784:	d017      	beq.n	80037b6 <TIM_Base_SetConfig+0x8a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a28      	ldr	r2, [pc, #160]	@ (800382c <TIM_Base_SetConfig+0x100>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <TIM_Base_SetConfig+0x8a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a27      	ldr	r2, [pc, #156]	@ (8003830 <TIM_Base_SetConfig+0x104>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00f      	beq.n	80037b6 <TIM_Base_SetConfig+0x8a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a26      	ldr	r2, [pc, #152]	@ (8003834 <TIM_Base_SetConfig+0x108>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00b      	beq.n	80037b6 <TIM_Base_SetConfig+0x8a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a25      	ldr	r2, [pc, #148]	@ (8003838 <TIM_Base_SetConfig+0x10c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <TIM_Base_SetConfig+0x8a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a24      	ldr	r2, [pc, #144]	@ (800383c <TIM_Base_SetConfig+0x110>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_Base_SetConfig+0x8a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a23      	ldr	r2, [pc, #140]	@ (8003840 <TIM_Base_SetConfig+0x114>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d108      	bne.n	80037c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003828 <TIM_Base_SetConfig+0xfc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d103      	bne.n	80037fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d105      	bne.n	800381a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	611a      	str	r2, [r3, #16]
  }
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40014000 	.word	0x40014000
 800383c:	40014400 	.word	0x40014400
 8003840:	40014800 	.word	0x40014800

08003844 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <MPU9250_Init>:
GPIO_TypeDef *_CS_GPIO;

// <---- ------------ Main MPu9250 Functions ------------ ---->
// <---- ------------ MPU9250 Initialize ------------ ---->
MPU9250_Result MPU9250_Init(SPI_HandleTypeDef* SPIx, GPIO_TypeDef *CS_GPIOx, uint16_t CS_PinNumber, MPU9250TypeDef* datastruct)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	80fb      	strh	r3, [r7, #6]
	_CS_GPIO = CS_GPIOx;
 800387c:	4a84      	ldr	r2, [pc, #528]	@ (8003a90 <MPU9250_Init+0x224>)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6013      	str	r3, [r2, #0]
	_CS_PinNumber = CS_PinNumber;
 8003882:	4a84      	ldr	r2, [pc, #528]	@ (8003a94 <MPU9250_Init+0x228>)
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	8013      	strh	r3, [r2, #0]

	uint8_t WHO_AM_I = MPU9250_WHO_AM_I;
 8003888:	2375      	movs	r3, #117	@ 0x75
 800388a:	75fb      	strb	r3, [r7, #23]
	uint8_t temp;
	uint8_t transmit_buffer[2]={0};
 800388c:	2300      	movs	r3, #0
 800388e:	823b      	strh	r3, [r7, #16]

	// <---- ------------ Initialize Registers ------------ ---->
	uint8_t CLOCK_SEL_PLL = 0x01;
 8003890:	2301      	movs	r3, #1
 8003892:	75bb      	strb	r3, [r7, #22]
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 8003894:	236b      	movs	r3, #107	@ 0x6b
 8003896:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = CLOCK_SEL_PLL;
 8003898:	7dbb      	ldrb	r3, [r7, #22]
 800389a:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 800389c:	7c3b      	ldrb	r3, [r7, #16]
 800389e:	7c7a      	ldrb	r2, [r7, #17]
 80038a0:	4619      	mov	r1, r3
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f934 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80038a8:	2019      	movs	r0, #25
 80038aa:	f000 f9cc 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t I2C_MST_EN = 0x20;
 80038ae:	2320      	movs	r3, #32
 80038b0:	757b      	strb	r3, [r7, #21]
	transmit_buffer[0] = MPU9250_USER_CTRL;
 80038b2:	236a      	movs	r3, #106	@ 0x6a
 80038b4:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = I2C_MST_EN;
 80038b6:	7d7b      	ldrb	r3, [r7, #21]
 80038b8:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80038ba:	7c3b      	ldrb	r3, [r7, #16]
 80038bc:	7c7a      	ldrb	r2, [r7, #17]
 80038be:	4619      	mov	r1, r3
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f925 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80038c6:	2019      	movs	r0, #25
 80038c8:	f000 f9bd 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t I2C_MST_CLK = 0x0D;
 80038cc:	230d      	movs	r3, #13
 80038ce:	753b      	strb	r3, [r7, #20]
	transmit_buffer[0] = I2C_MST_CTRL;
 80038d0:	2324      	movs	r3, #36	@ 0x24
 80038d2:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = I2C_MST_CLK;
 80038d4:	7d3b      	ldrb	r3, [r7, #20]
 80038d6:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80038d8:	7c3b      	ldrb	r3, [r7, #16]
 80038da:	7c7a      	ldrb	r2, [r7, #17]
 80038dc:	4619      	mov	r1, r3
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f916 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80038e4:	2019      	movs	r0, #25
 80038e6:	f000 f9ae 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t PWR_RESET = 0x80;
 80038ea:	2380      	movs	r3, #128	@ 0x80
 80038ec:	74fb      	strb	r3, [r7, #19]
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 80038ee:	236b      	movs	r3, #107	@ 0x6b
 80038f0:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = PWR_RESET;
 80038f2:	7cfb      	ldrb	r3, [r7, #19]
 80038f4:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80038f6:	7c3b      	ldrb	r3, [r7, #16]
 80038f8:	7c7a      	ldrb	r2, [r7, #17]
 80038fa:	4619      	mov	r1, r3
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f907 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8003902:	2019      	movs	r0, #25
 8003904:	f000 f99f 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif

	// <---- ------------ Configure PowerManagement 1 ------------ ---->
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 8003908:	236b      	movs	r3, #107	@ 0x6b
 800390a:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->PWR_MGMT1;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8003912:	7c3b      	ldrb	r3, [r7, #16]
 8003914:	7c7a      	ldrb	r2, [r7, #17]
 8003916:	4619      	mov	r1, r3
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f8f9 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 800391e:	2019      	movs	r0, #25
 8003920:	f000 f991 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_1, 1);
 8003924:	f107 0112 	add.w	r1, r7, #18
 8003928:	2301      	movs	r3, #1
 800392a:	226b      	movs	r2, #107	@ 0x6b
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f8b3 	bl	8003a98 <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT1)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	7cbb      	ldrb	r3, [r7, #18]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <MPU9250_Init+0xd4>
		return MPU9250_RESULT_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0a3      	b.n	8003a88 <MPU9250_Init+0x21c>

	// <---- ------------ Check WHO_AM_I Register ------------ ---->
	MPU9250_ReadData(SPIx, &temp, WHO_AM_I, 1);
 8003940:	7dfa      	ldrb	r2, [r7, #23]
 8003942:	f107 0112 	add.w	r1, r7, #18
 8003946:	2301      	movs	r3, #1
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f8a5 	bl	8003a98 <MPU9250_ReadData>
	if(temp != MPU9250_I_AM)
 800394e:	7cbb      	ldrb	r3, [r7, #18]
 8003950:	2b71      	cmp	r3, #113	@ 0x71
 8003952:	d001      	beq.n	8003958 <MPU9250_Init+0xec>
 		return MPU9250_RESULT_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e097      	b.n	8003a88 <MPU9250_Init+0x21c>
#if FreeRTOS_En
	osDelay(25);
 8003958:	2019      	movs	r0, #25
 800395a:	f000 f974 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif

	// <---- ------------ Configure PowerManagement 2 ------------ ---->
	transmit_buffer[0] = MPU9250_PWR_MGMT_2;
 800395e:	236c      	movs	r3, #108	@ 0x6c
 8003960:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->PWR_MGMT2;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	785b      	ldrb	r3, [r3, #1]
 8003966:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8003968:	7c3b      	ldrb	r3, [r7, #16]
 800396a:	7c7a      	ldrb	r2, [r7, #17]
 800396c:	4619      	mov	r1, r3
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f8ce 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8003974:	2019      	movs	r0, #25
 8003976:	f000 f966 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_2, 1);
 800397a:	f107 0112 	add.w	r1, r7, #18
 800397e:	2301      	movs	r3, #1
 8003980:	226c      	movs	r2, #108	@ 0x6c
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f888 	bl	8003a98 <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT2)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	785a      	ldrb	r2, [r3, #1]
 800398c:	7cbb      	ldrb	r3, [r7, #18]
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <MPU9250_Init+0x12a>
		return MPU9250_RESULT_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e078      	b.n	8003a88 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_CONFIG;
 8003996:	231a      	movs	r3, #26
 8003998:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->Gyro_DLPF;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	789b      	ldrb	r3, [r3, #2]
 800399e:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80039a0:	7c3b      	ldrb	r3, [r7, #16]
 80039a2:	7c7a      	ldrb	r2, [r7, #17]
 80039a4:	4619      	mov	r1, r3
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f8b2 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80039ac:	2019      	movs	r0, #25
 80039ae:	f000 f94a 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_CONFIG, 1);
 80039b2:	f107 0112 	add.w	r1, r7, #18
 80039b6:	2301      	movs	r3, #1
 80039b8:	221a      	movs	r2, #26
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f86c 	bl	8003a98 <MPU9250_ReadData>
	if(temp != datastruct->Gyro_DLPF)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	789a      	ldrb	r2, [r3, #2]
 80039c4:	7cbb      	ldrb	r3, [r7, #18]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <MPU9250_Init+0x162>
		return MPU9250_RESULT_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e05c      	b.n	8003a88 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Gyro_Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_GYRO_CONFIG;
 80039ce:	231b      	movs	r3, #27
 80039d0:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = (datastruct->Gyro_Range) << 3;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	791b      	ldrb	r3, [r3, #4]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80039dc:	7c3b      	ldrb	r3, [r7, #16]
 80039de:	7c7a      	ldrb	r2, [r7, #17]
 80039e0:	4619      	mov	r1, r3
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f894 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80039e8:	2019      	movs	r0, #25
 80039ea:	f000 f92c 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_GYRO_CONFIG, 1);
 80039ee:	f107 0112 	add.w	r1, r7, #18
 80039f2:	2301      	movs	r3, #1
 80039f4:	221b      	movs	r2, #27
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f84e 	bl	8003a98 <MPU9250_ReadData>
	if(temp != ((datastruct->Gyro_Range) << 3))
 80039fc:	7cbb      	ldrb	r3, [r7, #18]
 80039fe:	461a      	mov	r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <MPU9250_Init+0x1a2>
		return MPU9250_RESULT_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e03c      	b.n	8003a88 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Accel Config Register 2 ------------ ---->
	transmit_buffer[0] = MPU9250_ACCEL_CONFIG_2;
 8003a0e:	231d      	movs	r3, #29
 8003a10:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->Accel_DLPF;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	78db      	ldrb	r3, [r3, #3]
 8003a16:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8003a18:	7c3b      	ldrb	r3, [r7, #16]
 8003a1a:	7c7a      	ldrb	r2, [r7, #17]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f876 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8003a24:	2019      	movs	r0, #25
 8003a26:	f000 f90e 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG_2, 1);
 8003a2a:	f107 0112 	add.w	r1, r7, #18
 8003a2e:	2301      	movs	r3, #1
 8003a30:	221d      	movs	r2, #29
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f830 	bl	8003a98 <MPU9250_ReadData>
	if(temp != datastruct->Accel_DLPF)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	78da      	ldrb	r2, [r3, #3]
 8003a3c:	7cbb      	ldrb	r3, [r7, #18]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d001      	beq.n	8003a46 <MPU9250_Init+0x1da>
		return MPU9250_RESULT_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e020      	b.n	8003a88 <MPU9250_Init+0x21c>

	// <---- ------------ Configure Accel Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_ACCEL_CONFIG;
 8003a46:	231c      	movs	r3, #28
 8003a48:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = (datastruct->Accel_Range) << 3;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	795b      	ldrb	r3, [r3, #5]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8003a54:	7c3b      	ldrb	r3, [r7, #16]
 8003a56:	7c7a      	ldrb	r2, [r7, #17]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f858 	bl	8003b10 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8003a60:	2019      	movs	r0, #25
 8003a62:	f000 f8f0 	bl	8003c46 <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG, 1);
 8003a66:	f107 0112 	add.w	r1, r7, #18
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	221c      	movs	r2, #28
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f812 	bl	8003a98 <MPU9250_ReadData>
	if(temp != ((datastruct->Accel_Range) << 3))
 8003a74:	7cbb      	ldrb	r3, [r7, #18]
 8003a76:	461a      	mov	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	795b      	ldrb	r3, [r3, #5]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d001      	beq.n	8003a86 <MPU9250_Init+0x21a>
		return MPU9250_RESULT_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <MPU9250_Init+0x21c>

	/* Return OK */
	return MPU9250_RESULT_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000424 	.word	0x20000424
 8003a94:	20000420 	.word	0x20000420

08003a98 <MPU9250_ReadData>:

// <---- ------------ MPU9250 Read Data ------------ ---->
MPU9250_Result MPU9250_ReadData(SPI_HandleTypeDef* SPIx, uint8_t* buffer, uint8_t addr, uint8_t num)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	71fb      	strb	r3, [r7, #7]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	75fb      	strb	r3, [r7, #23]
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8003ab8:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <MPU9250_ReadData+0x70>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a13      	ldr	r2, [pc, #76]	@ (8003b0c <MPU9250_ReadData+0x74>)
 8003abe:	8811      	ldrh	r1, [r2, #0]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe f9a2 	bl	8001e0c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003ac8:	2014      	movs	r0, #20
 8003aca:	f7fd ff15 	bl	80018f8 <HAL_Delay>
	HAL_SPI_Transmit(SPIx, &reg, 1, 1000);
 8003ace:	f107 0117 	add.w	r1, r7, #23
 8003ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f7fe ff0a 	bl	80028f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPIx, buffer, num, 1000);
 8003ade:	79bb      	ldrb	r3, [r7, #6]
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff f846 	bl	8002b7a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <MPU9250_ReadData+0x70>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a06      	ldr	r2, [pc, #24]	@ (8003b0c <MPU9250_ReadData+0x74>)
 8003af4:	8811      	ldrh	r1, [r2, #0]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe f987 	bl	8001e0c <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000424 	.word	0x20000424
 8003b0c:	20000420 	.word	0x20000420

08003b10 <MPU9250_WriteData>:

// <---- ------------ MPU9250 Write Data ------------ ---->
MPU9250_Result MPU9250_WriteData(SPI_HandleTypeDef* SPIx, uint8_t addr, uint8_t data)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {addr, data};
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	733b      	strb	r3, [r7, #12]
 8003b24:	78bb      	ldrb	r3, [r7, #2]
 8003b26:	737b      	strb	r3, [r7, #13]
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8003b28:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <MPU9250_WriteData+0x58>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b6c <MPU9250_WriteData+0x5c>)
 8003b2e:	8811      	ldrh	r1, [r2, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe f96a 	bl	8001e0c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003b38:	2014      	movs	r0, #20
 8003b3a:	f7fd fedd 	bl	80018f8 <HAL_Delay>
	HAL_SPI_Transmit(SPIx, buffer, 2, 1000);
 8003b3e:	f107 010c 	add.w	r1, r7, #12
 8003b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b46:	2202      	movs	r2, #2
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fe fed2 	bl	80028f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8003b4e:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <MPU9250_WriteData+0x58>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a06      	ldr	r2, [pc, #24]	@ (8003b6c <MPU9250_WriteData+0x5c>)
 8003b54:	8811      	ldrh	r1, [r2, #0]
 8003b56:	2201      	movs	r2, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe f957 	bl	8001e0c <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000424 	.word	0x20000424
 8003b6c:	20000420 	.word	0x20000420

08003b70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b82:	2b84      	cmp	r3, #132	@ 0x84
 8003b84:	d005      	beq.n	8003b92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3303      	adds	r3, #3
 8003b90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ba4:	f000 fafc 	bl	80041a0 <vTaskStartScheduler>
  
  return osOK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	bd80      	pop	{r7, pc}

08003bae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb0:	b089      	sub	sp, #36	@ 0x24
 8003bb2:	af04      	add	r7, sp, #16
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <osThreadCreate+0x54>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01c      	beq.n	8003c02 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685c      	ldr	r4, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691e      	ldr	r6, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ffc8 	bl	8003b70 <makeFreeRtosPriority>
 8003be0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bea:	9202      	str	r2, [sp, #8]
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	9100      	str	r1, [sp, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	4632      	mov	r2, r6
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f000 f8ed 	bl	8003dd6 <xTaskCreateStatic>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e01c      	b.n	8003c3c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685c      	ldr	r4, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c0e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ffaa 	bl	8003b70 <makeFreeRtosPriority>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	f107 030c 	add.w	r3, r7, #12
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	9200      	str	r2, [sp, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	4632      	mov	r2, r6
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f000 f932 	bl	8003e96 <xTaskCreate>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d001      	beq.n	8003c3c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <osDelay+0x16>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	e000      	b.n	8003c5e <osDelay+0x18>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fa68 	bl	8004134 <vTaskDelay>
  
  return osOK;
 8003c64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f103 0208 	add.w	r2, r3, #8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f04f 32ff 	mov.w	r2, #4294967295
 8003c86:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f103 0208 	add.w	r2, r3, #8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f103 0208 	add.w	r2, r3, #8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	601a      	str	r2, [r3, #0]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d103      	bne.n	8003d30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	e00c      	b.n	8003d4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3308      	adds	r3, #8
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e002      	b.n	8003d3e <vListInsert+0x2e>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d2f6      	bcs.n	8003d38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	601a      	str	r2, [r3, #0]
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6892      	ldr	r2, [r2, #8]
 8003d98:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6852      	ldr	r2, [r2, #4]
 8003da2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d103      	bne.n	8003db6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	1e5a      	subs	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b08e      	sub	sp, #56	@ 0x38
 8003dda:	af04      	add	r7, sp, #16
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	e7fd      	b.n	8003dfe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	61fb      	str	r3, [r7, #28]
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e20:	23a0      	movs	r3, #160	@ 0xa0
 8003e22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e28:	d00b      	beq.n	8003e42 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	61bb      	str	r3, [r7, #24]
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01e      	beq.n	8003e88 <xTaskCreateStatic+0xb2>
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01b      	beq.n	8003e88 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e58:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e62:	2300      	movs	r3, #0
 8003e64:	9303      	str	r3, [sp, #12]
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	9302      	str	r3, [sp, #8]
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f850 	bl	8003f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e82:	f000 f8ed 	bl	8004060 <prvAddNewTaskToReadyList>
 8003e86:	e001      	b.n	8003e8c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e8c:	697b      	ldr	r3, [r7, #20]
	}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3728      	adds	r7, #40	@ 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b08c      	sub	sp, #48	@ 0x30
 8003e9a:	af04      	add	r7, sp, #16
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fefc 	bl	8004ca8 <pvPortMalloc>
 8003eb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00e      	beq.n	8003ed6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003eb8:	20a0      	movs	r0, #160	@ 0xa0
 8003eba:	f000 fef5 	bl	8004ca8 <pvPortMalloc>
 8003ebe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ecc:	e005      	b.n	8003eda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ece:	6978      	ldr	r0, [r7, #20]
 8003ed0:	f000 ffb8 	bl	8004e44 <vPortFree>
 8003ed4:	e001      	b.n	8003eda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d017      	beq.n	8003f10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ee8:	88fa      	ldrh	r2, [r7, #6]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9303      	str	r3, [sp, #12]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	9302      	str	r3, [sp, #8]
 8003ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f80e 	bl	8003f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f04:	69f8      	ldr	r0, [r7, #28]
 8003f06:	f000 f8ab 	bl	8004060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	e002      	b.n	8003f16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
 8003f14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f16:	69bb      	ldr	r3, [r7, #24]
	}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f023 0307 	bic.w	r3, r3, #7
 8003f46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	617b      	str	r3, [r7, #20]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01f      	beq.n	8003fb0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	e012      	b.n	8003f9c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	7819      	ldrb	r1, [r3, #0]
 8003f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	3334      	adds	r3, #52	@ 0x34
 8003f86:	460a      	mov	r2, r1
 8003f88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d006      	beq.n	8003fa4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b0f      	cmp	r3, #15
 8003fa0:	d9e9      	bls.n	8003f76 <prvInitialiseNewTask+0x56>
 8003fa2:	e000      	b.n	8003fa6 <prvInitialiseNewTask+0x86>
			{
				break;
 8003fa4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fae:	e003      	b.n	8003fb8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d901      	bls.n	8003fc2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fbe:	2306      	movs	r3, #6
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fe68 	bl	8003cae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fe63 	bl	8003cae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	f1c3 0207 	rsb	r2, r3, #7
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004000:	2200      	movs	r2, #0
 8004002:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004008:	2200      	movs	r2, #0
 800400a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	334c      	adds	r3, #76	@ 0x4c
 8004012:	224c      	movs	r2, #76	@ 0x4c
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f001 f834 	bl	8005084 <memset>
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	4a0d      	ldr	r2, [pc, #52]	@ (8004054 <prvInitialiseNewTask+0x134>)
 8004020:	651a      	str	r2, [r3, #80]	@ 0x50
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	4a0c      	ldr	r2, [pc, #48]	@ (8004058 <prvInitialiseNewTask+0x138>)
 8004026:	655a      	str	r2, [r3, #84]	@ 0x54
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	4a0c      	ldr	r2, [pc, #48]	@ (800405c <prvInitialiseNewTask+0x13c>)
 800402c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	68f9      	ldr	r1, [r7, #12]
 8004032:	69b8      	ldr	r0, [r7, #24]
 8004034:	f000 fc2a 	bl	800488c <pxPortInitialiseStack>
 8004038:	4602      	mov	r2, r0
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800403e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800404a:	bf00      	nop
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	2000417c 	.word	0x2000417c
 8004058:	200041e4 	.word	0x200041e4
 800405c:	2000424c 	.word	0x2000424c

08004060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004068:	f000 fd3e 	bl	8004ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800406c:	4b2a      	ldr	r3, [pc, #168]	@ (8004118 <prvAddNewTaskToReadyList+0xb8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	4a29      	ldr	r2, [pc, #164]	@ (8004118 <prvAddNewTaskToReadyList+0xb8>)
 8004074:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004076:	4b29      	ldr	r3, [pc, #164]	@ (800411c <prvAddNewTaskToReadyList+0xbc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800407e:	4a27      	ldr	r2, [pc, #156]	@ (800411c <prvAddNewTaskToReadyList+0xbc>)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004084:	4b24      	ldr	r3, [pc, #144]	@ (8004118 <prvAddNewTaskToReadyList+0xb8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d110      	bne.n	80040ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800408c:	f000 fad4 	bl	8004638 <prvInitialiseTaskLists>
 8004090:	e00d      	b.n	80040ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004092:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <prvAddNewTaskToReadyList+0xc0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800409a:	4b20      	ldr	r3, [pc, #128]	@ (800411c <prvAddNewTaskToReadyList+0xbc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d802      	bhi.n	80040ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040a8:	4a1c      	ldr	r2, [pc, #112]	@ (800411c <prvAddNewTaskToReadyList+0xbc>)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <prvAddNewTaskToReadyList+0xc4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004124 <prvAddNewTaskToReadyList+0xc4>)
 80040b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	2201      	movs	r2, #1
 80040be:	409a      	lsls	r2, r3
 80040c0:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <prvAddNewTaskToReadyList+0xc8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	4a18      	ldr	r2, [pc, #96]	@ (8004128 <prvAddNewTaskToReadyList+0xc8>)
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a15      	ldr	r2, [pc, #84]	@ (800412c <prvAddNewTaskToReadyList+0xcc>)
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3304      	adds	r3, #4
 80040de:	4619      	mov	r1, r3
 80040e0:	4610      	mov	r0, r2
 80040e2:	f7ff fdf1 	bl	8003cc8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040e6:	f000 fd31 	bl	8004b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004120 <prvAddNewTaskToReadyList+0xc0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00e      	beq.n	8004110 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040f2:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <prvAddNewTaskToReadyList+0xbc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d207      	bcs.n	8004110 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <prvAddNewTaskToReadyList+0xd0>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000528 	.word	0x20000528
 800411c:	20000428 	.word	0x20000428
 8004120:	20000534 	.word	0x20000534
 8004124:	20000544 	.word	0x20000544
 8004128:	20000530 	.word	0x20000530
 800412c:	2000042c 	.word	0x2000042c
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004146:	4b14      	ldr	r3, [pc, #80]	@ (8004198 <vTaskDelay+0x64>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <vTaskDelay+0x32>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	60bb      	str	r3, [r7, #8]
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	e7fd      	b.n	8004162 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004166:	f000 f885 	bl	8004274 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800416a:	2100      	movs	r1, #0
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fb27 	bl	80047c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004172:	f000 f88d 	bl	8004290 <xTaskResumeAll>
 8004176:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800417e:	4b07      	ldr	r3, [pc, #28]	@ (800419c <vTaskDelay+0x68>)
 8004180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000550 	.word	0x20000550
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	@ 0x28
 80041a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041ae:	463a      	mov	r2, r7
 80041b0:	1d39      	adds	r1, r7, #4
 80041b2:	f107 0308 	add.w	r3, r7, #8
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fc fda8 	bl	8000d0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	9202      	str	r2, [sp, #8]
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	2300      	movs	r3, #0
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2300      	movs	r3, #0
 80041cc:	460a      	mov	r2, r1
 80041ce:	4921      	ldr	r1, [pc, #132]	@ (8004254 <vTaskStartScheduler+0xb4>)
 80041d0:	4821      	ldr	r0, [pc, #132]	@ (8004258 <vTaskStartScheduler+0xb8>)
 80041d2:	f7ff fe00 	bl	8003dd6 <xTaskCreateStatic>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4a20      	ldr	r2, [pc, #128]	@ (800425c <vTaskStartScheduler+0xbc>)
 80041da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041dc:	4b1f      	ldr	r3, [pc, #124]	@ (800425c <vTaskStartScheduler+0xbc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041e4:	2301      	movs	r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e001      	b.n	80041ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d11b      	bne.n	800422c <vTaskStartScheduler+0x8c>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	613b      	str	r3, [r7, #16]
}
 8004206:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004208:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <vTaskStartScheduler+0xc0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	334c      	adds	r3, #76	@ 0x4c
 800420e:	4a15      	ldr	r2, [pc, #84]	@ (8004264 <vTaskStartScheduler+0xc4>)
 8004210:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004212:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <vTaskStartScheduler+0xc8>)
 8004214:	f04f 32ff 	mov.w	r2, #4294967295
 8004218:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800421a:	4b14      	ldr	r3, [pc, #80]	@ (800426c <vTaskStartScheduler+0xcc>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004220:	4b13      	ldr	r3, [pc, #76]	@ (8004270 <vTaskStartScheduler+0xd0>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004226:	f000 fbbb 	bl	80049a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800422a:	e00f      	b.n	800424c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d10b      	bne.n	800424c <vTaskStartScheduler+0xac>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60fb      	str	r3, [r7, #12]
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <vTaskStartScheduler+0xa8>
}
 800424c:	bf00      	nop
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	080055ec 	.word	0x080055ec
 8004258:	08004609 	.word	0x08004609
 800425c:	2000054c 	.word	0x2000054c
 8004260:	20000428 	.word	0x20000428
 8004264:	20000014 	.word	0x20000014
 8004268:	20000548 	.word	0x20000548
 800426c:	20000534 	.word	0x20000534
 8004270:	2000052c 	.word	0x2000052c

08004274 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004278:	4b04      	ldr	r3, [pc, #16]	@ (800428c <vTaskSuspendAll+0x18>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	4a03      	ldr	r2, [pc, #12]	@ (800428c <vTaskSuspendAll+0x18>)
 8004280:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004282:	bf00      	nop
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	20000550 	.word	0x20000550

08004290 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800429e:	4b42      	ldr	r3, [pc, #264]	@ (80043a8 <xTaskResumeAll+0x118>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <xTaskResumeAll+0x2e>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	603b      	str	r3, [r7, #0]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042be:	f000 fc13 	bl	8004ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042c2:	4b39      	ldr	r3, [pc, #228]	@ (80043a8 <xTaskResumeAll+0x118>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a37      	ldr	r2, [pc, #220]	@ (80043a8 <xTaskResumeAll+0x118>)
 80042ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042cc:	4b36      	ldr	r3, [pc, #216]	@ (80043a8 <xTaskResumeAll+0x118>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d161      	bne.n	8004398 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042d4:	4b35      	ldr	r3, [pc, #212]	@ (80043ac <xTaskResumeAll+0x11c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d05d      	beq.n	8004398 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042dc:	e02e      	b.n	800433c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042de:	4b34      	ldr	r3, [pc, #208]	@ (80043b0 <xTaskResumeAll+0x120>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3318      	adds	r3, #24
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fd49 	bl	8003d82 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fd44 	bl	8003d82 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	2201      	movs	r2, #1
 8004300:	409a      	lsls	r2, r3
 8004302:	4b2c      	ldr	r3, [pc, #176]	@ (80043b4 <xTaskResumeAll+0x124>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	4a2a      	ldr	r2, [pc, #168]	@ (80043b4 <xTaskResumeAll+0x124>)
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4a27      	ldr	r2, [pc, #156]	@ (80043b8 <xTaskResumeAll+0x128>)
 800431a:	441a      	add	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f7ff fcd0 	bl	8003cc8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432c:	4b23      	ldr	r3, [pc, #140]	@ (80043bc <xTaskResumeAll+0x12c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004336:	4b22      	ldr	r3, [pc, #136]	@ (80043c0 <xTaskResumeAll+0x130>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800433c:	4b1c      	ldr	r3, [pc, #112]	@ (80043b0 <xTaskResumeAll+0x120>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1cc      	bne.n	80042de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800434a:	f000 fa19 	bl	8004780 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800434e:	4b1d      	ldr	r3, [pc, #116]	@ (80043c4 <xTaskResumeAll+0x134>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d010      	beq.n	800437c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800435a:	f000 f837 	bl	80043cc <xTaskIncrementTick>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004364:	4b16      	ldr	r3, [pc, #88]	@ (80043c0 <xTaskResumeAll+0x130>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3b01      	subs	r3, #1
 800436e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f1      	bne.n	800435a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004376:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <xTaskResumeAll+0x134>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800437c:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <xTaskResumeAll+0x130>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004384:	2301      	movs	r3, #1
 8004386:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <xTaskResumeAll+0x138>)
 800438a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004398:	f000 fbd8 	bl	8004b4c <vPortExitCritical>

	return xAlreadyYielded;
 800439c:	68bb      	ldr	r3, [r7, #8]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000550 	.word	0x20000550
 80043ac:	20000528 	.word	0x20000528
 80043b0:	200004e8 	.word	0x200004e8
 80043b4:	20000530 	.word	0x20000530
 80043b8:	2000042c 	.word	0x2000042c
 80043bc:	20000428 	.word	0x20000428
 80043c0:	2000053c 	.word	0x2000053c
 80043c4:	20000538 	.word	0x20000538
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004514 <xTaskIncrementTick+0x148>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 808f 	bne.w	80044fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004518 <xTaskIncrementTick+0x14c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004518 <xTaskIncrementTick+0x14c>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d121      	bne.n	8004438 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80043f4:	4b49      	ldr	r3, [pc, #292]	@ (800451c <xTaskIncrementTick+0x150>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <xTaskIncrementTick+0x4a>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	603b      	str	r3, [r7, #0]
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	e7fd      	b.n	8004412 <xTaskIncrementTick+0x46>
 8004416:	4b41      	ldr	r3, [pc, #260]	@ (800451c <xTaskIncrementTick+0x150>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	4b40      	ldr	r3, [pc, #256]	@ (8004520 <xTaskIncrementTick+0x154>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3e      	ldr	r2, [pc, #248]	@ (800451c <xTaskIncrementTick+0x150>)
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4a3e      	ldr	r2, [pc, #248]	@ (8004520 <xTaskIncrementTick+0x154>)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b3e      	ldr	r3, [pc, #248]	@ (8004524 <xTaskIncrementTick+0x158>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	4a3c      	ldr	r2, [pc, #240]	@ (8004524 <xTaskIncrementTick+0x158>)
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	f000 f9a4 	bl	8004780 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004438:	4b3b      	ldr	r3, [pc, #236]	@ (8004528 <xTaskIncrementTick+0x15c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	429a      	cmp	r2, r3
 8004440:	d348      	bcc.n	80044d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004442:	4b36      	ldr	r3, [pc, #216]	@ (800451c <xTaskIncrementTick+0x150>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444c:	4b36      	ldr	r3, [pc, #216]	@ (8004528 <xTaskIncrementTick+0x15c>)
 800444e:	f04f 32ff 	mov.w	r2, #4294967295
 8004452:	601a      	str	r2, [r3, #0]
					break;
 8004454:	e03e      	b.n	80044d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004456:	4b31      	ldr	r3, [pc, #196]	@ (800451c <xTaskIncrementTick+0x150>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	d203      	bcs.n	8004476 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800446e:	4a2e      	ldr	r2, [pc, #184]	@ (8004528 <xTaskIncrementTick+0x15c>)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004474:	e02e      	b.n	80044d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	3304      	adds	r3, #4
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fc81 	bl	8003d82 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3318      	adds	r3, #24
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fc78 	bl	8003d82 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	2201      	movs	r2, #1
 8004498:	409a      	lsls	r2, r3
 800449a:	4b24      	ldr	r3, [pc, #144]	@ (800452c <xTaskIncrementTick+0x160>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	4a22      	ldr	r2, [pc, #136]	@ (800452c <xTaskIncrementTick+0x160>)
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004530 <xTaskIncrementTick+0x164>)
 80044b2:	441a      	add	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f7ff fc04 	bl	8003cc8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <xTaskIncrementTick+0x168>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3b9      	bcc.n	8004442 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80044ce:	2301      	movs	r3, #1
 80044d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044d2:	e7b6      	b.n	8004442 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044d4:	4b17      	ldr	r3, [pc, #92]	@ (8004534 <xTaskIncrementTick+0x168>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044da:	4915      	ldr	r1, [pc, #84]	@ (8004530 <xTaskIncrementTick+0x164>)
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d901      	bls.n	80044f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80044ec:	2301      	movs	r3, #1
 80044ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044f0:	4b11      	ldr	r3, [pc, #68]	@ (8004538 <xTaskIncrementTick+0x16c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80044f8:	2301      	movs	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	e004      	b.n	8004508 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044fe:	4b0f      	ldr	r3, [pc, #60]	@ (800453c <xTaskIncrementTick+0x170>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3301      	adds	r3, #1
 8004504:	4a0d      	ldr	r2, [pc, #52]	@ (800453c <xTaskIncrementTick+0x170>)
 8004506:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004508:	697b      	ldr	r3, [r7, #20]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000550 	.word	0x20000550
 8004518:	2000052c 	.word	0x2000052c
 800451c:	200004e0 	.word	0x200004e0
 8004520:	200004e4 	.word	0x200004e4
 8004524:	20000540 	.word	0x20000540
 8004528:	20000548 	.word	0x20000548
 800452c:	20000530 	.word	0x20000530
 8004530:	2000042c 	.word	0x2000042c
 8004534:	20000428 	.word	0x20000428
 8004538:	2000053c 	.word	0x2000053c
 800453c:	20000538 	.word	0x20000538

08004540 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004546:	4b2a      	ldr	r3, [pc, #168]	@ (80045f0 <vTaskSwitchContext+0xb0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800454e:	4b29      	ldr	r3, [pc, #164]	@ (80045f4 <vTaskSwitchContext+0xb4>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004554:	e045      	b.n	80045e2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004556:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <vTaskSwitchContext+0xb4>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800455c:	4b26      	ldr	r3, [pc, #152]	@ (80045f8 <vTaskSwitchContext+0xb8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	f1c3 031f 	rsb	r3, r3, #31
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	4922      	ldr	r1, [pc, #136]	@ (80045fc <vTaskSwitchContext+0xbc>)
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	607b      	str	r3, [r7, #4]
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	e7fd      	b.n	800459a <vTaskSwitchContext+0x5a>
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4a14      	ldr	r2, [pc, #80]	@ (80045fc <vTaskSwitchContext+0xbc>)
 80045aa:	4413      	add	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	3308      	adds	r3, #8
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d104      	bne.n	80045ce <vTaskSwitchContext+0x8e>
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004600 <vTaskSwitchContext+0xc0>)
 80045d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045d8:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <vTaskSwitchContext+0xc0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	334c      	adds	r3, #76	@ 0x4c
 80045de:	4a09      	ldr	r2, [pc, #36]	@ (8004604 <vTaskSwitchContext+0xc4>)
 80045e0:	6013      	str	r3, [r2, #0]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000550 	.word	0x20000550
 80045f4:	2000053c 	.word	0x2000053c
 80045f8:	20000530 	.word	0x20000530
 80045fc:	2000042c 	.word	0x2000042c
 8004600:	20000428 	.word	0x20000428
 8004604:	20000014 	.word	0x20000014

08004608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004610:	f000 f852 	bl	80046b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004614:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <prvIdleTask+0x28>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d9f9      	bls.n	8004610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <prvIdleTask+0x2c>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800462c:	e7f0      	b.n	8004610 <prvIdleTask+0x8>
 800462e:	bf00      	nop
 8004630:	2000042c 	.word	0x2000042c
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800463e:	2300      	movs	r3, #0
 8004640:	607b      	str	r3, [r7, #4]
 8004642:	e00c      	b.n	800465e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4a12      	ldr	r2, [pc, #72]	@ (8004698 <prvInitialiseTaskLists+0x60>)
 8004650:	4413      	add	r3, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fb0b 	bl	8003c6e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3301      	adds	r3, #1
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b06      	cmp	r3, #6
 8004662:	d9ef      	bls.n	8004644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004664:	480d      	ldr	r0, [pc, #52]	@ (800469c <prvInitialiseTaskLists+0x64>)
 8004666:	f7ff fb02 	bl	8003c6e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800466a:	480d      	ldr	r0, [pc, #52]	@ (80046a0 <prvInitialiseTaskLists+0x68>)
 800466c:	f7ff faff 	bl	8003c6e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004670:	480c      	ldr	r0, [pc, #48]	@ (80046a4 <prvInitialiseTaskLists+0x6c>)
 8004672:	f7ff fafc 	bl	8003c6e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004676:	480c      	ldr	r0, [pc, #48]	@ (80046a8 <prvInitialiseTaskLists+0x70>)
 8004678:	f7ff faf9 	bl	8003c6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800467c:	480b      	ldr	r0, [pc, #44]	@ (80046ac <prvInitialiseTaskLists+0x74>)
 800467e:	f7ff faf6 	bl	8003c6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004682:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <prvInitialiseTaskLists+0x78>)
 8004684:	4a05      	ldr	r2, [pc, #20]	@ (800469c <prvInitialiseTaskLists+0x64>)
 8004686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004688:	4b0a      	ldr	r3, [pc, #40]	@ (80046b4 <prvInitialiseTaskLists+0x7c>)
 800468a:	4a05      	ldr	r2, [pc, #20]	@ (80046a0 <prvInitialiseTaskLists+0x68>)
 800468c:	601a      	str	r2, [r3, #0]
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2000042c 	.word	0x2000042c
 800469c:	200004b8 	.word	0x200004b8
 80046a0:	200004cc 	.word	0x200004cc
 80046a4:	200004e8 	.word	0x200004e8
 80046a8:	200004fc 	.word	0x200004fc
 80046ac:	20000514 	.word	0x20000514
 80046b0:	200004e0 	.word	0x200004e0
 80046b4:	200004e4 	.word	0x200004e4

080046b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046be:	e019      	b.n	80046f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046c0:	f000 fa12 	bl	8004ae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c4:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <prvCheckTasksWaitingTermination+0x50>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fb56 	bl	8003d82 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046d6:	4b0d      	ldr	r3, [pc, #52]	@ (800470c <prvCheckTasksWaitingTermination+0x54>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3b01      	subs	r3, #1
 80046dc:	4a0b      	ldr	r2, [pc, #44]	@ (800470c <prvCheckTasksWaitingTermination+0x54>)
 80046de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <prvCheckTasksWaitingTermination+0x58>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004710 <prvCheckTasksWaitingTermination+0x58>)
 80046e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046ea:	f000 fa2f 	bl	8004b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f810 	bl	8004714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <prvCheckTasksWaitingTermination+0x58>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e1      	bne.n	80046c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	200004fc 	.word	0x200004fc
 800470c:	20000528 	.word	0x20000528
 8004710:	20000510 	.word	0x20000510

08004714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	334c      	adds	r3, #76	@ 0x4c
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fcb7 	bl	8005094 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800472c:	2b00      	cmp	r3, #0
 800472e:	d108      	bne.n	8004742 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fb85 	bl	8004e44 <vPortFree>
				vPortFree( pxTCB );
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fb82 	bl	8004e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004740:	e019      	b.n	8004776 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004748:	2b01      	cmp	r3, #1
 800474a:	d103      	bne.n	8004754 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fb79 	bl	8004e44 <vPortFree>
	}
 8004752:	e010      	b.n	8004776 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800475a:	2b02      	cmp	r3, #2
 800475c:	d00b      	beq.n	8004776 <prvDeleteTCB+0x62>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60fb      	str	r3, [r7, #12]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <prvDeleteTCB+0x5e>
	}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <prvResetNextTaskUnblockTime+0x38>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004790:	4b0a      	ldr	r3, [pc, #40]	@ (80047bc <prvResetNextTaskUnblockTime+0x3c>)
 8004792:	f04f 32ff 	mov.w	r2, #4294967295
 8004796:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004798:	e008      	b.n	80047ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479a:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <prvResetNextTaskUnblockTime+0x38>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a04      	ldr	r2, [pc, #16]	@ (80047bc <prvResetNextTaskUnblockTime+0x3c>)
 80047aa:	6013      	str	r3, [r2, #0]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	200004e0 	.word	0x200004e0
 80047bc:	20000548 	.word	0x20000548

080047c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047ca:	4b29      	ldr	r3, [pc, #164]	@ (8004870 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d0:	4b28      	ldr	r3, [pc, #160]	@ (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fad3 	bl	8003d82 <uxListRemove>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047e2:	4b24      	ldr	r3, [pc, #144]	@ (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	2201      	movs	r2, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43da      	mvns	r2, r3
 80047f0:	4b21      	ldr	r3, [pc, #132]	@ (8004878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4013      	ands	r3, r2
 80047f6:	4a20      	ldr	r2, [pc, #128]	@ (8004878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d10a      	bne.n	8004818 <prvAddCurrentTaskToDelayedList+0x58>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004808:	4b1a      	ldr	r3, [pc, #104]	@ (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	481a      	ldr	r0, [pc, #104]	@ (800487c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004812:	f7ff fa59 	bl	8003cc8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004816:	e026      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004820:	4b14      	ldr	r3, [pc, #80]	@ (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d209      	bcs.n	8004844 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004830:	4b13      	ldr	r3, [pc, #76]	@ (8004880 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b0f      	ldr	r3, [pc, #60]	@ (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f7ff fa67 	bl	8003d10 <vListInsert>
}
 8004842:	e010      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b0a      	ldr	r3, [pc, #40]	@ (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7ff fa5d 	bl	8003d10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004856:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	d202      	bcs.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004860:	4a09      	ldr	r2, [pc, #36]	@ (8004888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6013      	str	r3, [r2, #0]
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	2000052c 	.word	0x2000052c
 8004874:	20000428 	.word	0x20000428
 8004878:	20000530 	.word	0x20000530
 800487c:	20000514 	.word	0x20000514
 8004880:	200004e4 	.word	0x200004e4
 8004884:	200004e0 	.word	0x200004e0
 8004888:	20000548 	.word	0x20000548

0800488c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3b04      	subs	r3, #4
 800489c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b04      	subs	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3b04      	subs	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048bc:	4a0c      	ldr	r2, [pc, #48]	@ (80048f0 <pxPortInitialiseStack+0x64>)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3b14      	subs	r3, #20
 80048c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3b04      	subs	r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f06f 0202 	mvn.w	r2, #2
 80048da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b20      	subs	r3, #32
 80048e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048e2:	68fb      	ldr	r3, [r7, #12]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	080048f5 	.word	0x080048f5

080048f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048fe:	4b13      	ldr	r3, [pc, #76]	@ (800494c <prvTaskExitError+0x58>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d00b      	beq.n	8004920 <prvTaskExitError+0x2c>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <prvTaskExitError+0x28>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60bb      	str	r3, [r7, #8]
}
 8004932:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004934:	bf00      	nop
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0fc      	beq.n	8004936 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000010 	.word	0x20000010

08004950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004950:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <pxCurrentTCBConst2>)
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	6808      	ldr	r0, [r1, #0]
 8004956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	f380 8809 	msr	PSP, r0
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8811 	msr	BASEPRI, r0
 800496a:	4770      	bx	lr
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst2>:
 8004970:	20000428 	.word	0x20000428
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004978:	4808      	ldr	r0, [pc, #32]	@ (800499c <prvPortStartFirstTask+0x24>)
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	6800      	ldr	r0, [r0, #0]
 800497e:	f380 8808 	msr	MSP, r0
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f380 8814 	msr	CONTROL, r0
 800498a:	b662      	cpsie	i
 800498c:	b661      	cpsie	f
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	df00      	svc	0
 8004998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800499a:	bf00      	nop
 800499c:	e000ed08 	.word	0xe000ed08

080049a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049a6:	4b47      	ldr	r3, [pc, #284]	@ (8004ac4 <xPortStartScheduler+0x124>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a47      	ldr	r2, [pc, #284]	@ (8004ac8 <xPortStartScheduler+0x128>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10b      	bne.n	80049c8 <xPortStartScheduler+0x28>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	613b      	str	r3, [r7, #16]
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049c8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac4 <xPortStartScheduler+0x124>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a3f      	ldr	r2, [pc, #252]	@ (8004acc <xPortStartScheduler+0x12c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10b      	bne.n	80049ea <xPortStartScheduler+0x4a>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	60fb      	str	r3, [r7, #12]
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	e7fd      	b.n	80049e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049ea:	4b39      	ldr	r3, [pc, #228]	@ (8004ad0 <xPortStartScheduler+0x130>)
 80049ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	22ff      	movs	r2, #255	@ 0xff
 80049fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	4b31      	ldr	r3, [pc, #196]	@ (8004ad4 <xPortStartScheduler+0x134>)
 8004a10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a12:	4b31      	ldr	r3, [pc, #196]	@ (8004ad8 <xPortStartScheduler+0x138>)
 8004a14:	2207      	movs	r2, #7
 8004a16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a18:	e009      	b.n	8004a2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad8 <xPortStartScheduler+0x138>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad8 <xPortStartScheduler+0x138>)
 8004a22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a36:	2b80      	cmp	r3, #128	@ 0x80
 8004a38:	d0ef      	beq.n	8004a1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <xPortStartScheduler+0x138>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f1c3 0307 	rsb	r3, r3, #7
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d00b      	beq.n	8004a5e <xPortStartScheduler+0xbe>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	60bb      	str	r3, [r7, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	e7fd      	b.n	8004a5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad8 <xPortStartScheduler+0x138>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <xPortStartScheduler+0x138>)
 8004a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a68:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <xPortStartScheduler+0x138>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a70:	4a19      	ldr	r2, [pc, #100]	@ (8004ad8 <xPortStartScheduler+0x138>)
 8004a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a7c:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <xPortStartScheduler+0x13c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a16      	ldr	r2, [pc, #88]	@ (8004adc <xPortStartScheduler+0x13c>)
 8004a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a88:	4b14      	ldr	r3, [pc, #80]	@ (8004adc <xPortStartScheduler+0x13c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a13      	ldr	r2, [pc, #76]	@ (8004adc <xPortStartScheduler+0x13c>)
 8004a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a94:	f000 f8da 	bl	8004c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a98:	4b11      	ldr	r3, [pc, #68]	@ (8004ae0 <xPortStartScheduler+0x140>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a9e:	f000 f8f9 	bl	8004c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <xPortStartScheduler+0x144>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ae4 <xPortStartScheduler+0x144>)
 8004aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aae:	f7ff ff63 	bl	8004978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ab2:	f7ff fd45 	bl	8004540 <vTaskSwitchContext>
	prvTaskExitError();
 8004ab6:	f7ff ff1d 	bl	80048f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	e000ed00 	.word	0xe000ed00
 8004ac8:	410fc271 	.word	0x410fc271
 8004acc:	410fc270 	.word	0x410fc270
 8004ad0:	e000e400 	.word	0xe000e400
 8004ad4:	20000554 	.word	0x20000554
 8004ad8:	20000558 	.word	0x20000558
 8004adc:	e000ed20 	.word	0xe000ed20
 8004ae0:	20000010 	.word	0x20000010
 8004ae4:	e000ef34 	.word	0xe000ef34

08004ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	607b      	str	r3, [r7, #4]
}
 8004b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b02:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <vPortEnterCritical+0x5c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	4a0e      	ldr	r2, [pc, #56]	@ (8004b44 <vPortEnterCritical+0x5c>)
 8004b0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b44 <vPortEnterCritical+0x5c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d110      	bne.n	8004b36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b14:	4b0c      	ldr	r3, [pc, #48]	@ (8004b48 <vPortEnterCritical+0x60>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <vPortEnterCritical+0x4e>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	603b      	str	r3, [r7, #0]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <vPortEnterCritical+0x4a>
	}
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000010 	.word	0x20000010
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b52:	4b12      	ldr	r3, [pc, #72]	@ (8004b9c <vPortExitCritical+0x50>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <vPortExitCritical+0x26>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	607b      	str	r3, [r7, #4]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b72:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <vPortExitCritical+0x50>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	4a08      	ldr	r2, [pc, #32]	@ (8004b9c <vPortExitCritical+0x50>)
 8004b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b7c:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <vPortExitCritical+0x50>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <vPortExitCritical+0x44>
 8004b84:	2300      	movs	r3, #0
 8004b86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000010 	.word	0x20000010

08004ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ba0:	f3ef 8009 	mrs	r0, PSP
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4b15      	ldr	r3, [pc, #84]	@ (8004c00 <pxCurrentTCBConst>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	f01e 0f10 	tst.w	lr, #16
 8004bb0:	bf08      	it	eq
 8004bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bba:	6010      	str	r0, [r2, #0]
 8004bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004bc4:	f380 8811 	msr	BASEPRI, r0
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f7ff fcb6 	bl	8004540 <vTaskSwitchContext>
 8004bd4:	f04f 0000 	mov.w	r0, #0
 8004bd8:	f380 8811 	msr	BASEPRI, r0
 8004bdc:	bc09      	pop	{r0, r3}
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	6808      	ldr	r0, [r1, #0]
 8004be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be6:	f01e 0f10 	tst.w	lr, #16
 8004bea:	bf08      	it	eq
 8004bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bf0:	f380 8809 	msr	PSP, r0
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst>:
 8004c00:	20000428 	.word	0x20000428
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	607b      	str	r3, [r7, #4]
}
 8004c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c22:	f7ff fbd3 	bl	80043cc <xTaskIncrementTick>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c2c:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <SysTick_Handler+0x40>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	2300      	movs	r3, #0
 8004c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f383 8811 	msr	BASEPRI, r3
}
 8004c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c50:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <vPortSetupTimerInterrupt+0x34>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c56:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <vPortSetupTimerInterrupt+0x38>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <vPortSetupTimerInterrupt+0x3c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0a      	ldr	r2, [pc, #40]	@ (8004c8c <vPortSetupTimerInterrupt+0x40>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	4a09      	ldr	r2, [pc, #36]	@ (8004c90 <vPortSetupTimerInterrupt+0x44>)
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c6e:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <vPortSetupTimerInterrupt+0x34>)
 8004c70:	2207      	movs	r2, #7
 8004c72:	601a      	str	r2, [r3, #0]
}
 8004c74:	bf00      	nop
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000e010 	.word	0xe000e010
 8004c84:	e000e018 	.word	0xe000e018
 8004c88:	20000004 	.word	0x20000004
 8004c8c:	10624dd3 	.word	0x10624dd3
 8004c90:	e000e014 	.word	0xe000e014

08004c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ca4 <vPortEnableVFP+0x10>
 8004c98:	6801      	ldr	r1, [r0, #0]
 8004c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c9e:	6001      	str	r1, [r0, #0]
 8004ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ca2:	bf00      	nop
 8004ca4:	e000ed88 	.word	0xe000ed88

08004ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	@ 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cb4:	f7ff fade 	bl	8004274 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8004e2c <pvPortMalloc+0x184>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cc0:	f000 f924 	bl	8004f0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e30 <pvPortMalloc+0x188>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 8095 	bne.w	8004dfc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01e      	beq.n	8004d16 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004cd8:	2208      	movs	r2, #8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d015      	beq.n	8004d16 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f023 0307 	bic.w	r3, r3, #7
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <pvPortMalloc+0x6e>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	617b      	str	r3, [r7, #20]
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	e7fd      	b.n	8004d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d06f      	beq.n	8004dfc <pvPortMalloc+0x154>
 8004d1c:	4b45      	ldr	r3, [pc, #276]	@ (8004e34 <pvPortMalloc+0x18c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d86a      	bhi.n	8004dfc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d26:	4b44      	ldr	r3, [pc, #272]	@ (8004e38 <pvPortMalloc+0x190>)
 8004d28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d2a:	4b43      	ldr	r3, [pc, #268]	@ (8004e38 <pvPortMalloc+0x190>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d30:	e004      	b.n	8004d3c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d903      	bls.n	8004d4e <pvPortMalloc+0xa6>
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f1      	bne.n	8004d32 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d4e:	4b37      	ldr	r3, [pc, #220]	@ (8004e2c <pvPortMalloc+0x184>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d051      	beq.n	8004dfc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	4413      	add	r3, r2
 8004d60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	1ad2      	subs	r2, r2, r3
 8004d72:	2308      	movs	r3, #8
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d920      	bls.n	8004dbc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4413      	add	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00b      	beq.n	8004da4 <pvPortMalloc+0xfc>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	613b      	str	r3, [r7, #16]
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004db6:	69b8      	ldr	r0, [r7, #24]
 8004db8:	f000 f90a 	bl	8004fd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e34 <pvPortMalloc+0x18c>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e34 <pvPortMalloc+0x18c>)
 8004dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dca:	4b1a      	ldr	r3, [pc, #104]	@ (8004e34 <pvPortMalloc+0x18c>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b1b      	ldr	r3, [pc, #108]	@ (8004e3c <pvPortMalloc+0x194>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d203      	bcs.n	8004dde <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dd6:	4b17      	ldr	r3, [pc, #92]	@ (8004e34 <pvPortMalloc+0x18c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a18      	ldr	r2, [pc, #96]	@ (8004e3c <pvPortMalloc+0x194>)
 8004ddc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	4b13      	ldr	r3, [pc, #76]	@ (8004e30 <pvPortMalloc+0x188>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004df2:	4b13      	ldr	r3, [pc, #76]	@ (8004e40 <pvPortMalloc+0x198>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	4a11      	ldr	r2, [pc, #68]	@ (8004e40 <pvPortMalloc+0x198>)
 8004dfa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004dfc:	f7ff fa48 	bl	8004290 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <pvPortMalloc+0x17a>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	60fb      	str	r3, [r7, #12]
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	e7fd      	b.n	8004e1e <pvPortMalloc+0x176>
	return pvReturn;
 8004e22:	69fb      	ldr	r3, [r7, #28]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3728      	adds	r7, #40	@ 0x28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20004164 	.word	0x20004164
 8004e30:	20004178 	.word	0x20004178
 8004e34:	20004168 	.word	0x20004168
 8004e38:	2000415c 	.word	0x2000415c
 8004e3c:	2000416c 	.word	0x2000416c
 8004e40:	20004170 	.word	0x20004170

08004e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d04f      	beq.n	8004ef6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e56:	2308      	movs	r3, #8
 8004e58:	425b      	negs	r3, r3
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	4b25      	ldr	r3, [pc, #148]	@ (8004f00 <vPortFree+0xbc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <vPortFree+0x46>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	60fb      	str	r3, [r7, #12]
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	e7fd      	b.n	8004e86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <vPortFree+0x66>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60bb      	str	r3, [r7, #8]
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	e7fd      	b.n	8004ea6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <vPortFree+0xbc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01e      	beq.n	8004ef6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11a      	bne.n	8004ef6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f00 <vPortFree+0xbc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	401a      	ands	r2, r3
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ed0:	f7ff f9d0 	bl	8004274 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f04 <vPortFree+0xc0>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4413      	add	r3, r2
 8004ede:	4a09      	ldr	r2, [pc, #36]	@ (8004f04 <vPortFree+0xc0>)
 8004ee0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ee2:	6938      	ldr	r0, [r7, #16]
 8004ee4:	f000 f874 	bl	8004fd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ee8:	4b07      	ldr	r3, [pc, #28]	@ (8004f08 <vPortFree+0xc4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	4a06      	ldr	r2, [pc, #24]	@ (8004f08 <vPortFree+0xc4>)
 8004ef0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ef2:	f7ff f9cd 	bl	8004290 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20004178 	.word	0x20004178
 8004f04:	20004168 	.word	0x20004168
 8004f08:	20004174 	.word	0x20004174

08004f0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f12:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f18:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <prvHeapInit+0xac>)
 8004f1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3307      	adds	r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0307 	bic.w	r3, r3, #7
 8004f32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb8 <prvHeapInit+0xac>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f44:	4a1d      	ldr	r2, [pc, #116]	@ (8004fbc <prvHeapInit+0xb0>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fbc <prvHeapInit+0xb0>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	4413      	add	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f58:	2208      	movs	r2, #8
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a15      	ldr	r2, [pc, #84]	@ (8004fc0 <prvHeapInit+0xb4>)
 8004f6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f6e:	4b14      	ldr	r3, [pc, #80]	@ (8004fc0 <prvHeapInit+0xb4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f76:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <prvHeapInit+0xb4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	1ad2      	subs	r2, r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc0 <prvHeapInit+0xb4>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc4 <prvHeapInit+0xb8>)
 8004f9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4a09      	ldr	r2, [pc, #36]	@ (8004fc8 <prvHeapInit+0xbc>)
 8004fa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fa4:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <prvHeapInit+0xc0>)
 8004fa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004faa:	601a      	str	r2, [r3, #0]
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	2000055c 	.word	0x2000055c
 8004fbc:	2000415c 	.word	0x2000415c
 8004fc0:	20004164 	.word	0x20004164
 8004fc4:	2000416c 	.word	0x2000416c
 8004fc8:	20004168 	.word	0x20004168
 8004fcc:	20004178 	.word	0x20004178

08004fd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fd8:	4b28      	ldr	r3, [pc, #160]	@ (800507c <prvInsertBlockIntoFreeList+0xac>)
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e002      	b.n	8004fe4 <prvInsertBlockIntoFreeList+0x14>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d8f7      	bhi.n	8004fde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d108      	bne.n	8005012 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	441a      	add	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	441a      	add	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d118      	bne.n	8005058 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b15      	ldr	r3, [pc, #84]	@ (8005080 <prvInsertBlockIntoFreeList+0xb0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d00d      	beq.n	800504e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e008      	b.n	8005060 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800504e:	4b0c      	ldr	r3, [pc, #48]	@ (8005080 <prvInsertBlockIntoFreeList+0xb0>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e003      	b.n	8005060 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d002      	beq.n	800506e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	2000415c 	.word	0x2000415c
 8005080:	20004164 	.word	0x20004164

08005084 <memset>:
 8005084:	4402      	add	r2, r0
 8005086:	4603      	mov	r3, r0
 8005088:	4293      	cmp	r3, r2
 800508a:	d100      	bne.n	800508e <memset+0xa>
 800508c:	4770      	bx	lr
 800508e:	f803 1b01 	strb.w	r1, [r3], #1
 8005092:	e7f9      	b.n	8005088 <memset+0x4>

08005094 <_reclaim_reent>:
 8005094:	4b29      	ldr	r3, [pc, #164]	@ (800513c <_reclaim_reent+0xa8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4283      	cmp	r3, r0
 800509a:	b570      	push	{r4, r5, r6, lr}
 800509c:	4604      	mov	r4, r0
 800509e:	d04b      	beq.n	8005138 <_reclaim_reent+0xa4>
 80050a0:	69c3      	ldr	r3, [r0, #28]
 80050a2:	b1ab      	cbz	r3, 80050d0 <_reclaim_reent+0x3c>
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	b16b      	cbz	r3, 80050c4 <_reclaim_reent+0x30>
 80050a8:	2500      	movs	r5, #0
 80050aa:	69e3      	ldr	r3, [r4, #28]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	5959      	ldr	r1, [r3, r5]
 80050b0:	2900      	cmp	r1, #0
 80050b2:	d13b      	bne.n	800512c <_reclaim_reent+0x98>
 80050b4:	3504      	adds	r5, #4
 80050b6:	2d80      	cmp	r5, #128	@ 0x80
 80050b8:	d1f7      	bne.n	80050aa <_reclaim_reent+0x16>
 80050ba:	69e3      	ldr	r3, [r4, #28]
 80050bc:	4620      	mov	r0, r4
 80050be:	68d9      	ldr	r1, [r3, #12]
 80050c0:	f000 f86a 	bl	8005198 <_free_r>
 80050c4:	69e3      	ldr	r3, [r4, #28]
 80050c6:	6819      	ldr	r1, [r3, #0]
 80050c8:	b111      	cbz	r1, 80050d0 <_reclaim_reent+0x3c>
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 f864 	bl	8005198 <_free_r>
 80050d0:	6961      	ldr	r1, [r4, #20]
 80050d2:	b111      	cbz	r1, 80050da <_reclaim_reent+0x46>
 80050d4:	4620      	mov	r0, r4
 80050d6:	f000 f85f 	bl	8005198 <_free_r>
 80050da:	69e1      	ldr	r1, [r4, #28]
 80050dc:	b111      	cbz	r1, 80050e4 <_reclaim_reent+0x50>
 80050de:	4620      	mov	r0, r4
 80050e0:	f000 f85a 	bl	8005198 <_free_r>
 80050e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80050e6:	b111      	cbz	r1, 80050ee <_reclaim_reent+0x5a>
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 f855 	bl	8005198 <_free_r>
 80050ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050f0:	b111      	cbz	r1, 80050f8 <_reclaim_reent+0x64>
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 f850 	bl	8005198 <_free_r>
 80050f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80050fa:	b111      	cbz	r1, 8005102 <_reclaim_reent+0x6e>
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 f84b 	bl	8005198 <_free_r>
 8005102:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005104:	b111      	cbz	r1, 800510c <_reclaim_reent+0x78>
 8005106:	4620      	mov	r0, r4
 8005108:	f000 f846 	bl	8005198 <_free_r>
 800510c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800510e:	b111      	cbz	r1, 8005116 <_reclaim_reent+0x82>
 8005110:	4620      	mov	r0, r4
 8005112:	f000 f841 	bl	8005198 <_free_r>
 8005116:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005118:	b111      	cbz	r1, 8005120 <_reclaim_reent+0x8c>
 800511a:	4620      	mov	r0, r4
 800511c:	f000 f83c 	bl	8005198 <_free_r>
 8005120:	6a23      	ldr	r3, [r4, #32]
 8005122:	b14b      	cbz	r3, 8005138 <_reclaim_reent+0xa4>
 8005124:	4620      	mov	r0, r4
 8005126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800512a:	4718      	bx	r3
 800512c:	680e      	ldr	r6, [r1, #0]
 800512e:	4620      	mov	r0, r4
 8005130:	f000 f832 	bl	8005198 <_free_r>
 8005134:	4631      	mov	r1, r6
 8005136:	e7bb      	b.n	80050b0 <_reclaim_reent+0x1c>
 8005138:	bd70      	pop	{r4, r5, r6, pc}
 800513a:	bf00      	nop
 800513c:	20000014 	.word	0x20000014

08005140 <__errno>:
 8005140:	4b01      	ldr	r3, [pc, #4]	@ (8005148 <__errno+0x8>)
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20000014 	.word	0x20000014

0800514c <__libc_init_array>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4d0d      	ldr	r5, [pc, #52]	@ (8005184 <__libc_init_array+0x38>)
 8005150:	4c0d      	ldr	r4, [pc, #52]	@ (8005188 <__libc_init_array+0x3c>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	2600      	movs	r6, #0
 8005158:	42a6      	cmp	r6, r4
 800515a:	d109      	bne.n	8005170 <__libc_init_array+0x24>
 800515c:	4d0b      	ldr	r5, [pc, #44]	@ (800518c <__libc_init_array+0x40>)
 800515e:	4c0c      	ldr	r4, [pc, #48]	@ (8005190 <__libc_init_array+0x44>)
 8005160:	f000 fa10 	bl	8005584 <_init>
 8005164:	1b64      	subs	r4, r4, r5
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	2600      	movs	r6, #0
 800516a:	42a6      	cmp	r6, r4
 800516c:	d105      	bne.n	800517a <__libc_init_array+0x2e>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	f855 3b04 	ldr.w	r3, [r5], #4
 8005174:	4798      	blx	r3
 8005176:	3601      	adds	r6, #1
 8005178:	e7ee      	b.n	8005158 <__libc_init_array+0xc>
 800517a:	f855 3b04 	ldr.w	r3, [r5], #4
 800517e:	4798      	blx	r3
 8005180:	3601      	adds	r6, #1
 8005182:	e7f2      	b.n	800516a <__libc_init_array+0x1e>
 8005184:	0800564c 	.word	0x0800564c
 8005188:	0800564c 	.word	0x0800564c
 800518c:	0800564c 	.word	0x0800564c
 8005190:	08005650 	.word	0x08005650

08005194 <__retarget_lock_acquire_recursive>:
 8005194:	4770      	bx	lr

08005196 <__retarget_lock_release_recursive>:
 8005196:	4770      	bx	lr

08005198 <_free_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4605      	mov	r5, r0
 800519c:	2900      	cmp	r1, #0
 800519e:	d041      	beq.n	8005224 <_free_r+0x8c>
 80051a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051a4:	1f0c      	subs	r4, r1, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bfb8      	it	lt
 80051aa:	18e4      	addlt	r4, r4, r3
 80051ac:	f000 f83e 	bl	800522c <__malloc_lock>
 80051b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005228 <_free_r+0x90>)
 80051b2:	6813      	ldr	r3, [r2, #0]
 80051b4:	b933      	cbnz	r3, 80051c4 <_free_r+0x2c>
 80051b6:	6063      	str	r3, [r4, #4]
 80051b8:	6014      	str	r4, [r2, #0]
 80051ba:	4628      	mov	r0, r5
 80051bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c0:	f000 b83a 	b.w	8005238 <__malloc_unlock>
 80051c4:	42a3      	cmp	r3, r4
 80051c6:	d908      	bls.n	80051da <_free_r+0x42>
 80051c8:	6820      	ldr	r0, [r4, #0]
 80051ca:	1821      	adds	r1, r4, r0
 80051cc:	428b      	cmp	r3, r1
 80051ce:	bf01      	itttt	eq
 80051d0:	6819      	ldreq	r1, [r3, #0]
 80051d2:	685b      	ldreq	r3, [r3, #4]
 80051d4:	1809      	addeq	r1, r1, r0
 80051d6:	6021      	streq	r1, [r4, #0]
 80051d8:	e7ed      	b.n	80051b6 <_free_r+0x1e>
 80051da:	461a      	mov	r2, r3
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	b10b      	cbz	r3, 80051e4 <_free_r+0x4c>
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d9fa      	bls.n	80051da <_free_r+0x42>
 80051e4:	6811      	ldr	r1, [r2, #0]
 80051e6:	1850      	adds	r0, r2, r1
 80051e8:	42a0      	cmp	r0, r4
 80051ea:	d10b      	bne.n	8005204 <_free_r+0x6c>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	4401      	add	r1, r0
 80051f0:	1850      	adds	r0, r2, r1
 80051f2:	4283      	cmp	r3, r0
 80051f4:	6011      	str	r1, [r2, #0]
 80051f6:	d1e0      	bne.n	80051ba <_free_r+0x22>
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	6053      	str	r3, [r2, #4]
 80051fe:	4408      	add	r0, r1
 8005200:	6010      	str	r0, [r2, #0]
 8005202:	e7da      	b.n	80051ba <_free_r+0x22>
 8005204:	d902      	bls.n	800520c <_free_r+0x74>
 8005206:	230c      	movs	r3, #12
 8005208:	602b      	str	r3, [r5, #0]
 800520a:	e7d6      	b.n	80051ba <_free_r+0x22>
 800520c:	6820      	ldr	r0, [r4, #0]
 800520e:	1821      	adds	r1, r4, r0
 8005210:	428b      	cmp	r3, r1
 8005212:	bf04      	itt	eq
 8005214:	6819      	ldreq	r1, [r3, #0]
 8005216:	685b      	ldreq	r3, [r3, #4]
 8005218:	6063      	str	r3, [r4, #4]
 800521a:	bf04      	itt	eq
 800521c:	1809      	addeq	r1, r1, r0
 800521e:	6021      	streq	r1, [r4, #0]
 8005220:	6054      	str	r4, [r2, #4]
 8005222:	e7ca      	b.n	80051ba <_free_r+0x22>
 8005224:	bd38      	pop	{r3, r4, r5, pc}
 8005226:	bf00      	nop
 8005228:	200042b8 	.word	0x200042b8

0800522c <__malloc_lock>:
 800522c:	4801      	ldr	r0, [pc, #4]	@ (8005234 <__malloc_lock+0x8>)
 800522e:	f7ff bfb1 	b.w	8005194 <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	200042b4 	.word	0x200042b4

08005238 <__malloc_unlock>:
 8005238:	4801      	ldr	r0, [pc, #4]	@ (8005240 <__malloc_unlock+0x8>)
 800523a:	f7ff bfac 	b.w	8005196 <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	200042b4 	.word	0x200042b4

08005244 <atan2f>:
 8005244:	f000 b822 	b.w	800528c <__ieee754_atan2f>

08005248 <sqrtf>:
 8005248:	b508      	push	{r3, lr}
 800524a:	ed2d 8b02 	vpush	{d8}
 800524e:	eeb0 8a40 	vmov.f32	s16, s0
 8005252:	f000 f817 	bl	8005284 <__ieee754_sqrtf>
 8005256:	eeb4 8a48 	vcmp.f32	s16, s16
 800525a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525e:	d60c      	bvs.n	800527a <sqrtf+0x32>
 8005260:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8005280 <sqrtf+0x38>
 8005264:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526c:	d505      	bpl.n	800527a <sqrtf+0x32>
 800526e:	f7ff ff67 	bl	8005140 <__errno>
 8005272:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005276:	2321      	movs	r3, #33	@ 0x21
 8005278:	6003      	str	r3, [r0, #0]
 800527a:	ecbd 8b02 	vpop	{d8}
 800527e:	bd08      	pop	{r3, pc}
 8005280:	00000000 	.word	0x00000000

08005284 <__ieee754_sqrtf>:
 8005284:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005288:	4770      	bx	lr
	...

0800528c <__ieee754_atan2f>:
 800528c:	ee10 2a90 	vmov	r2, s1
 8005290:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8005294:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005298:	b510      	push	{r4, lr}
 800529a:	eef0 7a40 	vmov.f32	s15, s0
 800529e:	d806      	bhi.n	80052ae <__ieee754_atan2f+0x22>
 80052a0:	ee10 0a10 	vmov	r0, s0
 80052a4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80052a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80052ac:	d904      	bls.n	80052b8 <__ieee754_atan2f+0x2c>
 80052ae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80052b2:	eeb0 0a67 	vmov.f32	s0, s15
 80052b6:	bd10      	pop	{r4, pc}
 80052b8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80052bc:	d103      	bne.n	80052c6 <__ieee754_atan2f+0x3a>
 80052be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c2:	f000 b883 	b.w	80053cc <atanf>
 80052c6:	1794      	asrs	r4, r2, #30
 80052c8:	f004 0402 	and.w	r4, r4, #2
 80052cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80052d0:	b943      	cbnz	r3, 80052e4 <__ieee754_atan2f+0x58>
 80052d2:	2c02      	cmp	r4, #2
 80052d4:	d05e      	beq.n	8005394 <__ieee754_atan2f+0x108>
 80052d6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80053a8 <__ieee754_atan2f+0x11c>
 80052da:	2c03      	cmp	r4, #3
 80052dc:	bf08      	it	eq
 80052de:	eef0 7a47 	vmoveq.f32	s15, s14
 80052e2:	e7e6      	b.n	80052b2 <__ieee754_atan2f+0x26>
 80052e4:	b941      	cbnz	r1, 80052f8 <__ieee754_atan2f+0x6c>
 80052e6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80053ac <__ieee754_atan2f+0x120>
 80052ea:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80053b0 <__ieee754_atan2f+0x124>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	bfb8      	it	lt
 80052f2:	eef0 7a47 	vmovlt.f32	s15, s14
 80052f6:	e7dc      	b.n	80052b2 <__ieee754_atan2f+0x26>
 80052f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80052fc:	d110      	bne.n	8005320 <__ieee754_atan2f+0x94>
 80052fe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005302:	f104 34ff 	add.w	r4, r4, #4294967295
 8005306:	d107      	bne.n	8005318 <__ieee754_atan2f+0x8c>
 8005308:	2c02      	cmp	r4, #2
 800530a:	d846      	bhi.n	800539a <__ieee754_atan2f+0x10e>
 800530c:	4b29      	ldr	r3, [pc, #164]	@ (80053b4 <__ieee754_atan2f+0x128>)
 800530e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005312:	edd3 7a00 	vldr	s15, [r3]
 8005316:	e7cc      	b.n	80052b2 <__ieee754_atan2f+0x26>
 8005318:	2c02      	cmp	r4, #2
 800531a:	d841      	bhi.n	80053a0 <__ieee754_atan2f+0x114>
 800531c:	4b26      	ldr	r3, [pc, #152]	@ (80053b8 <__ieee754_atan2f+0x12c>)
 800531e:	e7f6      	b.n	800530e <__ieee754_atan2f+0x82>
 8005320:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005324:	d0df      	beq.n	80052e6 <__ieee754_atan2f+0x5a>
 8005326:	1a5b      	subs	r3, r3, r1
 8005328:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800532c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8005330:	da1a      	bge.n	8005368 <__ieee754_atan2f+0xdc>
 8005332:	2a00      	cmp	r2, #0
 8005334:	da01      	bge.n	800533a <__ieee754_atan2f+0xae>
 8005336:	313c      	adds	r1, #60	@ 0x3c
 8005338:	db19      	blt.n	800536e <__ieee754_atan2f+0xe2>
 800533a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800533e:	f000 f919 	bl	8005574 <fabsf>
 8005342:	f000 f843 	bl	80053cc <atanf>
 8005346:	eef0 7a40 	vmov.f32	s15, s0
 800534a:	2c01      	cmp	r4, #1
 800534c:	d012      	beq.n	8005374 <__ieee754_atan2f+0xe8>
 800534e:	2c02      	cmp	r4, #2
 8005350:	d017      	beq.n	8005382 <__ieee754_atan2f+0xf6>
 8005352:	2c00      	cmp	r4, #0
 8005354:	d0ad      	beq.n	80052b2 <__ieee754_atan2f+0x26>
 8005356:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80053bc <__ieee754_atan2f+0x130>
 800535a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800535e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80053c0 <__ieee754_atan2f+0x134>
 8005362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005366:	e7a4      	b.n	80052b2 <__ieee754_atan2f+0x26>
 8005368:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80053ac <__ieee754_atan2f+0x120>
 800536c:	e7ed      	b.n	800534a <__ieee754_atan2f+0xbe>
 800536e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80053c4 <__ieee754_atan2f+0x138>
 8005372:	e7ea      	b.n	800534a <__ieee754_atan2f+0xbe>
 8005374:	ee17 3a90 	vmov	r3, s15
 8005378:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	e797      	b.n	80052b2 <__ieee754_atan2f+0x26>
 8005382:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80053bc <__ieee754_atan2f+0x130>
 8005386:	ee77 7a87 	vadd.f32	s15, s15, s14
 800538a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80053c0 <__ieee754_atan2f+0x134>
 800538e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005392:	e78e      	b.n	80052b2 <__ieee754_atan2f+0x26>
 8005394:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80053c0 <__ieee754_atan2f+0x134>
 8005398:	e78b      	b.n	80052b2 <__ieee754_atan2f+0x26>
 800539a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80053c8 <__ieee754_atan2f+0x13c>
 800539e:	e788      	b.n	80052b2 <__ieee754_atan2f+0x26>
 80053a0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80053c4 <__ieee754_atan2f+0x138>
 80053a4:	e785      	b.n	80052b2 <__ieee754_atan2f+0x26>
 80053a6:	bf00      	nop
 80053a8:	c0490fdb 	.word	0xc0490fdb
 80053ac:	3fc90fdb 	.word	0x3fc90fdb
 80053b0:	bfc90fdb 	.word	0xbfc90fdb
 80053b4:	08005618 	.word	0x08005618
 80053b8:	0800560c 	.word	0x0800560c
 80053bc:	33bbbd2e 	.word	0x33bbbd2e
 80053c0:	40490fdb 	.word	0x40490fdb
 80053c4:	00000000 	.word	0x00000000
 80053c8:	3f490fdb 	.word	0x3f490fdb

080053cc <atanf>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	ee10 5a10 	vmov	r5, s0
 80053d2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80053d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80053da:	eef0 7a40 	vmov.f32	s15, s0
 80053de:	d310      	bcc.n	8005402 <atanf+0x36>
 80053e0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80053e4:	d904      	bls.n	80053f0 <atanf+0x24>
 80053e6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80053ea:	eeb0 0a67 	vmov.f32	s0, s15
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8005528 <atanf+0x15c>
 80053f4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800552c <atanf+0x160>
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	bfc8      	it	gt
 80053fc:	eef0 7a47 	vmovgt.f32	s15, s14
 8005400:	e7f3      	b.n	80053ea <atanf+0x1e>
 8005402:	4b4b      	ldr	r3, [pc, #300]	@ (8005530 <atanf+0x164>)
 8005404:	429c      	cmp	r4, r3
 8005406:	d810      	bhi.n	800542a <atanf+0x5e>
 8005408:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800540c:	d20a      	bcs.n	8005424 <atanf+0x58>
 800540e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8005534 <atanf+0x168>
 8005412:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800541e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005422:	dce2      	bgt.n	80053ea <atanf+0x1e>
 8005424:	f04f 33ff 	mov.w	r3, #4294967295
 8005428:	e013      	b.n	8005452 <atanf+0x86>
 800542a:	f000 f8a3 	bl	8005574 <fabsf>
 800542e:	4b42      	ldr	r3, [pc, #264]	@ (8005538 <atanf+0x16c>)
 8005430:	429c      	cmp	r4, r3
 8005432:	d84f      	bhi.n	80054d4 <atanf+0x108>
 8005434:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8005438:	429c      	cmp	r4, r3
 800543a:	d841      	bhi.n	80054c0 <atanf+0xf4>
 800543c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005440:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005444:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005448:	2300      	movs	r3, #0
 800544a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800544e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005458:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800553c <atanf+0x170>
 800545c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8005540 <atanf+0x174>
 8005460:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8005544 <atanf+0x178>
 8005464:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005468:	eee6 5a87 	vfma.f32	s11, s13, s14
 800546c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005548 <atanf+0x17c>
 8005470:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005474:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800554c <atanf+0x180>
 8005478:	eee7 5a26 	vfma.f32	s11, s14, s13
 800547c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005550 <atanf+0x184>
 8005480:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005484:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8005554 <atanf+0x188>
 8005488:	eee7 5a26 	vfma.f32	s11, s14, s13
 800548c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8005558 <atanf+0x18c>
 8005490:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005494:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800555c <atanf+0x190>
 8005498:	eea5 7a26 	vfma.f32	s14, s10, s13
 800549c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8005560 <atanf+0x194>
 80054a0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80054a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005564 <atanf+0x198>
 80054a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80054ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054b0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80054b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054b8:	d121      	bne.n	80054fe <atanf+0x132>
 80054ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054be:	e794      	b.n	80053ea <atanf+0x1e>
 80054c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80054c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80054c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80054cc:	2301      	movs	r3, #1
 80054ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80054d2:	e7be      	b.n	8005452 <atanf+0x86>
 80054d4:	4b24      	ldr	r3, [pc, #144]	@ (8005568 <atanf+0x19c>)
 80054d6:	429c      	cmp	r4, r3
 80054d8:	d80b      	bhi.n	80054f2 <atanf+0x126>
 80054da:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80054de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054e2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80054e6:	2302      	movs	r3, #2
 80054e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80054ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f0:	e7af      	b.n	8005452 <atanf+0x86>
 80054f2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80054f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80054fa:	2303      	movs	r3, #3
 80054fc:	e7a9      	b.n	8005452 <atanf+0x86>
 80054fe:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <atanf+0x1a0>)
 8005500:	491b      	ldr	r1, [pc, #108]	@ (8005570 <atanf+0x1a4>)
 8005502:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005506:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800550a:	edd3 6a00 	vldr	s13, [r3]
 800550e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005512:	2d00      	cmp	r5, #0
 8005514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005518:	edd2 7a00 	vldr	s15, [r2]
 800551c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005520:	bfb8      	it	lt
 8005522:	eef1 7a67 	vneglt.f32	s15, s15
 8005526:	e760      	b.n	80053ea <atanf+0x1e>
 8005528:	bfc90fdb 	.word	0xbfc90fdb
 800552c:	3fc90fdb 	.word	0x3fc90fdb
 8005530:	3edfffff 	.word	0x3edfffff
 8005534:	7149f2ca 	.word	0x7149f2ca
 8005538:	3f97ffff 	.word	0x3f97ffff
 800553c:	3c8569d7 	.word	0x3c8569d7
 8005540:	3d4bda59 	.word	0x3d4bda59
 8005544:	bd6ef16b 	.word	0xbd6ef16b
 8005548:	3d886b35 	.word	0x3d886b35
 800554c:	3dba2e6e 	.word	0x3dba2e6e
 8005550:	3e124925 	.word	0x3e124925
 8005554:	3eaaaaab 	.word	0x3eaaaaab
 8005558:	bd15a221 	.word	0xbd15a221
 800555c:	bd9d8795 	.word	0xbd9d8795
 8005560:	bde38e38 	.word	0xbde38e38
 8005564:	be4ccccd 	.word	0xbe4ccccd
 8005568:	401bffff 	.word	0x401bffff
 800556c:	08005634 	.word	0x08005634
 8005570:	08005624 	.word	0x08005624

08005574 <fabsf>:
 8005574:	ee10 3a10 	vmov	r3, s0
 8005578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800557c:	ee00 3a10 	vmov	s0, r3
 8005580:	4770      	bx	lr
	...

08005584 <_init>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr

08005590 <_fini>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr
