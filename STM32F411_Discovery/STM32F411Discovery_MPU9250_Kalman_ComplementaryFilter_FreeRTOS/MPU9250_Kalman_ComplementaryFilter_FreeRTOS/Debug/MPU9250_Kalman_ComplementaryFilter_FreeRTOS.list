
MPU9250_Kalman_ComplementaryFilter_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000824c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  080083f0  080083f0  000093f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d80  08008d80  0000a1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d80  08008d80  00009d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d88  08008d88  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d88  08008d88  00009d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d8c  08008d8c  00009d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008d90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a64  200001d8  08008f68  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002c3c  08008f68  0000ac3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c46d  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000418f  00000000  00000000  00026675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0002a808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001710  00000000  00000000  0002b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adec  00000000  00000000  0002d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe88  00000000  00000000  00047e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099998  00000000  00000000  00067d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001016a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  001016e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000c691  00000000  00000000  00105c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d9  00000000  00000000  00112329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083d4 	.word	0x080083d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080083d4 	.word	0x080083d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <vApplicationGetIdleTaskMemory+0x14>)
{
 8000f86:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f88:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f8a:	4c04      	ldr	r4, [pc, #16]	@ (8000f9c <vApplicationGetIdleTaskMemory+0x18>)
 8000f8c:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f8e:	2380      	movs	r3, #128	@ 0x80
  /* place for user code */
}
 8000f90:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	4770      	bx	lr
 8000f98:	200003f4 	.word	0x200003f4
 8000f9c:	200001f4 	.word	0x200001f4

08000fa0 <StartKalmanFilterTask>:
		osDelay(1);
	}
}

void StartKalmanFilterTask(void const * argument)
{
 8000fa0:	b508      	push	{r3, lr}
	for(;;)
	{
		osDelay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f002 fb50 	bl	8003648 <osDelay>
	for(;;)
 8000fa8:	e7fb      	b.n	8000fa2 <StartKalmanFilterTask+0x2>
 8000faa:	bf00      	nop

08000fac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_OK_GPIO_Port, LED_OK_Pin);
 8000fae:	4c05      	ldr	r4, [pc, #20]	@ (8000fc4 <StartDefaultTask+0x18>)
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fb6:	f000 fd79 	bl	8001aac <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000fba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fbe:	f002 fb43 	bl	8003648 <osDelay>
  for(;;)
 8000fc2:	e7f5      	b.n	8000fb0 <StartDefaultTask+0x4>
 8000fc4:	40020c00 	.word	0x40020c00

08000fc8 <StartComplementaryFilterTask>:
void StartComplementaryFilterTask(void const * argument)
 8000fc8:	b508      	push	{r3, lr}
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f002 fb3c 	bl	8003648 <osDelay>
 8000fd0:	e7fb      	b.n	8000fca <StartComplementaryFilterTask+0x2>
 8000fd2:	bf00      	nop

08000fd4 <_write>:
	for(i = 0; i < len; i++)
 8000fd4:	1e10      	subs	r0, r2, #0
 8000fd6:	dd2b      	ble.n	8001030 <_write+0x5c>
 8000fd8:	eb01 0c00 	add.w	ip, r1, r0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fe0:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
 8000fe4:	07d2      	lsls	r2, r2, #31
		ITM_SendChar(*ptr++);
 8000fe6:	f101 0101 	add.w	r1, r1, #1
 8000fea:	d51e      	bpl.n	800102a <_write+0x56>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fec:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff0:	07d2      	lsls	r2, r2, #31
 8000ff2:	d51a      	bpl.n	800102a <_write+0x56>
{
 8000ff4:	b500      	push	{lr}
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ff6:	681a      	ldr	r2, [r3, #0]
		ITM_SendChar(*ptr++);
 8000ff8:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 8000ffc:	b91a      	cbnz	r2, 8001006 <_write+0x32>
    {
      __NOP();
 8000ffe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2a00      	cmp	r2, #0
 8001004:	d0fb      	beq.n	8000ffe <_write+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001006:	f883 e000 	strb.w	lr, [r3]
	for(i = 0; i < len; i++)
 800100a:	458c      	cmp	ip, r1
 800100c:	d00b      	beq.n	8001026 <_write+0x52>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800100e:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
 8001012:	07d2      	lsls	r2, r2, #31
		ITM_SendChar(*ptr++);
 8001014:	f101 0101 	add.w	r1, r1, #1
 8001018:	d5f7      	bpl.n	800100a <_write+0x36>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800101a:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101e:	07d2      	lsls	r2, r2, #31
 8001020:	d4e9      	bmi.n	8000ff6 <_write+0x22>
	for(i = 0; i < len; i++)
 8001022:	458c      	cmp	ip, r1
 8001024:	d1f3      	bne.n	800100e <_write+0x3a>
}
 8001026:	f85d fb04 	ldr.w	pc, [sp], #4
	for(i = 0; i < len; i++)
 800102a:	458c      	cmp	ip, r1
 800102c:	d1d8      	bne.n	8000fe0 <_write+0xc>
 800102e:	4770      	bx	lr
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <IMU_readRawData>:
{
 8001034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_ACCEL_XOUT_H, 6);
 8001038:	4c43      	ldr	r4, [pc, #268]	@ (8001148 <IMU_readRawData+0x114>)
 800103a:	4844      	ldr	r0, [pc, #272]	@ (800114c <IMU_readRawData+0x118>)
 800103c:	4621      	mov	r1, r4
 800103e:	2306      	movs	r3, #6
 8001040:	223b      	movs	r2, #59	@ 0x3b
 8001042:	f001 fd5f 	bl	8002b04 <MPU9250_ReadData>
	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_GYRO_XOUT_H, 6);
 8001046:	2306      	movs	r3, #6
 8001048:	4621      	mov	r1, r4
 800104a:	4840      	ldr	r0, [pc, #256]	@ (800114c <IMU_readRawData+0x118>)
 800104c:	2243      	movs	r2, #67	@ 0x43
 800104e:	f001 fd59 	bl	8002b04 <MPU9250_ReadData>
	data.Raw_Gyro[1] = (int16_t)(IMU_rawData[2] << 8 | IMU_rawData[3]);
 8001052:	8820      	ldrh	r0, [r4, #0]
 8001054:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8001058:	88a5      	ldrh	r5, [r4, #4]
 800105a:	ba40      	rev16	r0, r0
	data.Raw_Gyro[0] = (data.Raw_Gyro[0] <= ZERO_MAX && data.Raw_Gyro[0] >= ZERO_MIN)? 0: data.Raw_Gyro[0];
 800105c:	f100 0314 	add.w	r3, r0, #20
 8001060:	b29b      	uxth	r3, r3
 8001062:	fa9b fb9b 	rev16.w	fp, fp
 8001066:	ba6d      	rev16	r5, r5
 8001068:	2b28      	cmp	r3, #40	@ 0x28
 800106a:	fa1f f68b 	uxth.w	r6, fp
	data.Raw_Gyro[2] = (int16_t)(IMU_rawData[4] << 8 | IMU_rawData[5]);
 800106e:	b2ac      	uxth	r4, r5
	data.Raw_Gyro[0] = (data.Raw_Gyro[0] <= ZERO_MAX && data.Raw_Gyro[0] >= ZERO_MIN)? 0: data.Raw_Gyro[0];
 8001070:	d95b      	bls.n	800112a <IMU_readRawData+0xf6>
	GX = (float)(data.Raw_Gyro[0] * (2000 / 32768.0));
 8001072:	b200      	sxth	r0, r0
 8001074:	f7ff fa5e 	bl	8000534 <__aeabi_i2d>
 8001078:	4b35      	ldr	r3, [pc, #212]	@ (8001150 <IMU_readRawData+0x11c>)
 800107a:	2200      	movs	r2, #0
 800107c:	4680      	mov	r8, r0
 800107e:	4689      	mov	r9, r1
 8001080:	f7ff fac2 	bl	8000608 <__aeabi_dmul>
 8001084:	f7ff fd98 	bl	8000bb8 <__aeabi_d2f>
	AX = (float)(data.Raw_Gyro[0] * (16.0 / 32768.0));
 8001088:	2200      	movs	r2, #0
 800108a:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
	GX = (float)(data.Raw_Gyro[0] * (2000 / 32768.0));
 800108e:	4682      	mov	sl, r0
	AX = (float)(data.Raw_Gyro[0] * (16.0 / 32768.0));
 8001090:	4649      	mov	r1, r9
 8001092:	4640      	mov	r0, r8
 8001094:	f7ff fab8 	bl	8000608 <__aeabi_dmul>
 8001098:	f7ff fd8e 	bl	8000bb8 <__aeabi_d2f>
	data.Raw_Gyro[1] = (data.Raw_Gyro[1] <= ZERO_MAX && data.Raw_Gyro[1] >= ZERO_MIN)? 0: data.Raw_Gyro[1];
 800109c:	3614      	adds	r6, #20
 800109e:	b2b6      	uxth	r6, r6
 80010a0:	2e28      	cmp	r6, #40	@ 0x28
	AX = (float)(data.Raw_Gyro[0] * (16.0 / 32768.0));
 80010a2:	4607      	mov	r7, r0
	data.Raw_Gyro[1] = (data.Raw_Gyro[1] <= ZERO_MAX && data.Raw_Gyro[1] >= ZERO_MIN)? 0: data.Raw_Gyro[1];
 80010a4:	d947      	bls.n	8001136 <IMU_readRawData+0x102>
	GY = (float)(data.Raw_Gyro[1] * (2000 / 32768.0));
 80010a6:	fa0f f08b 	sxth.w	r0, fp
 80010aa:	f7ff fa43 	bl	8000534 <__aeabi_i2d>
 80010ae:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <IMU_readRawData+0x11c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	4680      	mov	r8, r0
 80010b4:	4689      	mov	r9, r1
 80010b6:	f7ff faa7 	bl	8000608 <__aeabi_dmul>
 80010ba:	f7ff fd7d 	bl	8000bb8 <__aeabi_d2f>
 80010be:	4603      	mov	r3, r0
	AY = (float)(data.Raw_Gyro[1] * (16.0 / 32768.0));
 80010c0:	2200      	movs	r2, #0
 80010c2:	4640      	mov	r0, r8
 80010c4:	4649      	mov	r1, r9
	GY = (float)(data.Raw_Gyro[1] * (2000 / 32768.0));
 80010c6:	4698      	mov	r8, r3
	AY = (float)(data.Raw_Gyro[1] * (16.0 / 32768.0));
 80010c8:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80010cc:	f7ff fa9c 	bl	8000608 <__aeabi_dmul>
 80010d0:	f7ff fd72 	bl	8000bb8 <__aeabi_d2f>
	data.Raw_Gyro[2] = (data.Raw_Gyro[2] <= ZERO_MAX && data.Raw_Gyro[2] >= ZERO_MIN)? 0: data.Raw_Gyro[2];
 80010d4:	3414      	adds	r4, #20
 80010d6:	b2a4      	uxth	r4, r4
 80010d8:	2c28      	cmp	r4, #40	@ 0x28
	AY = (float)(data.Raw_Gyro[1] * (16.0 / 32768.0));
 80010da:	4606      	mov	r6, r0
	data.Raw_Gyro[2] = (data.Raw_Gyro[2] <= ZERO_MAX && data.Raw_Gyro[2] >= ZERO_MIN)? 0: data.Raw_Gyro[2];
 80010dc:	d931      	bls.n	8001142 <IMU_readRawData+0x10e>
	GZ = (float)(data.Raw_Gyro[2] * (2000 / 32768.0));
 80010de:	b228      	sxth	r0, r5
 80010e0:	f7ff fa28 	bl	8000534 <__aeabi_i2d>
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <IMU_readRawData+0x11c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	4604      	mov	r4, r0
 80010ea:	460d      	mov	r5, r1
 80010ec:	f7ff fa8c 	bl	8000608 <__aeabi_dmul>
 80010f0:	f7ff fd62 	bl	8000bb8 <__aeabi_d2f>
 80010f4:	4603      	mov	r3, r0
	AZ = (float)(data.Raw_Gyro[2] * (16.0 / 32768.0));
 80010f6:	2200      	movs	r2, #0
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
	GZ = (float)(data.Raw_Gyro[2] * (2000 / 32768.0));
 80010fc:	461c      	mov	r4, r3
	AZ = (float)(data.Raw_Gyro[2] * (16.0 / 32768.0));
 80010fe:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8001102:	f7ff fa81 	bl	8000608 <__aeabi_dmul>
 8001106:	f7ff fd57 	bl	8000bb8 <__aeabi_d2f>
	GX = (float)(data.Raw_Gyro[0] * (2000 / 32768.0));
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <IMU_readRawData+0x120>)
	AY = (float)(data.Raw_Gyro[1] * (16.0 / 32768.0));
 800110c:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <IMU_readRawData+0x124>)
	GX = (float)(data.Raw_Gyro[0] * (2000 / 32768.0));
 800110e:	f8c3 a000 	str.w	sl, [r3]
	GY = (float)(data.Raw_Gyro[1] * (2000 / 32768.0));
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <IMU_readRawData+0x128>)
	AY = (float)(data.Raw_Gyro[1] * (16.0 / 32768.0));
 8001114:	6016      	str	r6, [r2, #0]
	GY = (float)(data.Raw_Gyro[1] * (2000 / 32768.0));
 8001116:	f8c3 8000 	str.w	r8, [r3]
	GZ = (float)(data.Raw_Gyro[2] * (2000 / 32768.0));
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <IMU_readRawData+0x12c>)
 800111c:	601c      	str	r4, [r3, #0]
	AX = (float)(data.Raw_Gyro[0] * (16.0 / 32768.0));
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <IMU_readRawData+0x130>)
 8001120:	601f      	str	r7, [r3, #0]
	AZ = (float)(data.Raw_Gyro[2] * (16.0 / 32768.0));
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <IMU_readRawData+0x134>)
 8001124:	6018      	str	r0, [r3, #0]
}
 8001126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	data.Raw_Gyro[1] = (data.Raw_Gyro[1] <= ZERO_MAX && data.Raw_Gyro[1] >= ZERO_MIN)? 0: data.Raw_Gyro[1];
 800112a:	3614      	adds	r6, #20
 800112c:	b2b6      	uxth	r6, r6
 800112e:	2700      	movs	r7, #0
 8001130:	2e28      	cmp	r6, #40	@ 0x28
 8001132:	46ba      	mov	sl, r7
 8001134:	d8b7      	bhi.n	80010a6 <IMU_readRawData+0x72>
	data.Raw_Gyro[2] = (data.Raw_Gyro[2] <= ZERO_MAX && data.Raw_Gyro[2] >= ZERO_MIN)? 0: data.Raw_Gyro[2];
 8001136:	3414      	adds	r4, #20
 8001138:	b2a4      	uxth	r4, r4
 800113a:	2600      	movs	r6, #0
 800113c:	2c28      	cmp	r4, #40	@ 0x28
 800113e:	46b0      	mov	r8, r6
 8001140:	d8cd      	bhi.n	80010de <IMU_readRawData+0xaa>
 8001142:	2000      	movs	r0, #0
 8001144:	4604      	mov	r4, r0
 8001146:	e7e0      	b.n	800110a <IMU_readRawData+0xd6>
 8001148:	200004b4 	.word	0x200004b4
 800114c:	200005c8 	.word	0x200005c8
 8001150:	3faf4000 	.word	0x3faf4000
 8001154:	200004b0 	.word	0x200004b0
 8001158:	200004a0 	.word	0x200004a0
 800115c:	200004ac 	.word	0x200004ac
 8001160:	200004a8 	.word	0x200004a8
 8001164:	200004a4 	.word	0x200004a4
 8001168:	2000049c 	.word	0x2000049c

0800116c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800116e:	6802      	ldr	r2, [r0, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d000      	beq.n	8001176 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001174:	4770      	bx	lr
    HAL_IncTick();
 8001176:	f000 bb25 	b.w	80017c4 <HAL_IncTick>
 800117a:	bf00      	nop
 800117c:	40014400 	.word	0x40014400

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001182:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_Error_GPIO_Port, LED_Error_Pin, GPIO_PIN_SET);
 8001184:	4c03      	ldr	r4, [pc, #12]	@ (8001194 <Error_Handler+0x14>)
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118c:	4620      	mov	r0, r4
 800118e:	f000 fc89 	bl	8001aa4 <HAL_GPIO_WritePin>
  while (1)
 8001192:	e7f8      	b.n	8001186 <Error_Handler+0x6>
 8001194:	40020c00 	.word	0x40020c00

08001198 <SystemClock_Config>:
{
 8001198:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	2300      	movs	r3, #0
{
 800119c:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80011a2:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80011aa:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	491f      	ldr	r1, [pc, #124]	@ (800122c <SystemClock_Config+0x94>)
 80011b0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001230 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80011bc:	6408      	str	r0, [r1, #64]	@ 0x40
 80011be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80011c0:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 80011c4:	9101      	str	r1, [sp, #4]
 80011c6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	6813      	ldr	r3, [r2, #0]
 80011cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2001      	movs	r0, #1
 80011d6:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011de:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e2:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ea:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ee:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2104      	movs	r1, #4
 80011f2:	2002      	movs	r0, #2
 80011f4:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f8:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011fa:	2364      	movs	r3, #100	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011fe:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001200:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	f000 fc5d 	bl	8001ac0 <HAL_RCC_OscConfig>
 8001206:	b978      	cbnz	r0, 8001228 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	210f      	movs	r1, #15
 800120a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001210:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001214:	a803      	add	r0, sp, #12
 8001216:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001218:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800121e:	f000 fe65 	bl	8001eec <HAL_RCC_ClockConfig>
 8001222:	b908      	cbnz	r0, 8001228 <SystemClock_Config+0x90>
}
 8001224:	b014      	add	sp, #80	@ 0x50
 8001226:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001228:	f7ff ffaa 	bl	8001180 <Error_Handler>
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <main>:
{
 8001234:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	2400      	movs	r4, #0
{
 8001238:	b0a5      	sub	sp, #148	@ 0x94
  HAL_Init();
 800123a:	f000 faa9 	bl	8001790 <HAL_Init>
  SystemClock_Config();
 800123e:	f7ff ffab 	bl	8001198 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
 8001246:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	4b5c      	ldr	r3, [pc, #368]	@ (80013bc <main+0x188>)
 800124c:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	9421      	str	r4, [sp, #132]	@ 0x84
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001252:	485b      	ldr	r0, [pc, #364]	@ (80013c0 <main+0x18c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001254:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001258:	631a      	str	r2, [r3, #48]	@ 0x30
 800125a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800125c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8001260:	9100      	str	r1, [sp, #0]
 8001262:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	9401      	str	r4, [sp, #4]
 8001266:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001268:	f041 0101 	orr.w	r1, r1, #1
 800126c:	6319      	str	r1, [r3, #48]	@ 0x30
 800126e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001270:	f001 0101 	and.w	r1, r1, #1
 8001274:	9101      	str	r1, [sp, #4]
 8001276:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001278:	9402      	str	r4, [sp, #8]
 800127a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800127c:	f041 0108 	orr.w	r1, r1, #8
 8001280:	6319      	str	r1, [r3, #48]	@ 0x30
 8001282:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001284:	f001 0108 	and.w	r1, r1, #8
 8001288:	9102      	str	r1, [sp, #8]
 800128a:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	9403      	str	r4, [sp, #12]
 800128e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001290:	f041 0102 	orr.w	r1, r1, #2
 8001294:	6319      	str	r1, [r3, #48]	@ 0x30
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800129c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80012a0:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80012a4:	f000 fbfe 	bl	8001aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED_Error_Pin|LED_OK_Pin, GPIO_PIN_RESET);
 80012a8:	4622      	mov	r2, r4
 80012aa:	4846      	ldr	r0, [pc, #280]	@ (80013c4 <main+0x190>)
 80012ac:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80012b0:	f000 fbf8 	bl	8001aa4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80012b4:	2510      	movs	r5, #16
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80012b6:	4842      	ldr	r0, [pc, #264]	@ (80013c0 <main+0x18c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2601      	movs	r6, #1
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80012ba:	a91d      	add	r1, sp, #116	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	e9cd 561d 	strd	r5, r6, [sp, #116]	@ 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f000 fafe 	bl	80018c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Error_Pin|LED_OK_Pin;
 80012c8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012cc:	483d      	ldr	r0, [pc, #244]	@ (80013c4 <main+0x190>)
  GPIO_InitStruct.Pin = LED_Error_Pin|LED_OK_Pin;
 80012ce:	931d      	str	r3, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d0:	a91d      	add	r1, sp, #116	@ 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	e9cd 641e 	strd	r6, r4, [sp, #120]	@ 0x78
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	9420      	str	r4, [sp, #128]	@ 0x80
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d8:	f000 faf4 	bl	80018c4 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 80012dc:	483a      	ldr	r0, [pc, #232]	@ (80013c8 <main+0x194>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012de:	4a3b      	ldr	r2, [pc, #236]	@ (80013cc <main+0x198>)
 80012e0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80012e4:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ec:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80012ee:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f4:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f8:	e9c0 5407 	strd	r5, r4, [r0, #28]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012fc:	e9c0 4409 	strd	r4, r4, [r0, #36]	@ 0x24
  hspi1.Init.CRCPolynomial = 10;
 8001300:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001302:	f000 ffad 	bl	8002260 <HAL_SPI_Init>
 8001306:	2800      	cmp	r0, #0
 8001308:	d156      	bne.n	80013b8 <main+0x184>
  osMessageQDef(Queue_1, 1, sizeof(IMUdata_t));
 800130a:	4c31      	ldr	r4, [pc, #196]	@ (80013d0 <main+0x19c>)
 800130c:	4605      	mov	r5, r0
 800130e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001312:	f10d 0c10 	add.w	ip, sp, #16
 8001316:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  Queue_1Handle = osMessageCreate(osMessageQ(Queue_1), NULL);
 800131a:	4629      	mov	r1, r5
 800131c:	4660      	mov	r0, ip
 800131e:	f002 f99b 	bl	8003658 <osMessageCreate>
 8001322:	4b2c      	ldr	r3, [pc, #176]	@ (80013d4 <main+0x1a0>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001324:	f104 0e10 	add.w	lr, r4, #16
  Queue_1Handle = osMessageCreate(osMessageQ(Queue_1), NULL);
 8001328:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800132a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800132e:	f10d 0c20 	add.w	ip, sp, #32
 8001332:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001336:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800133a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800133e:	4629      	mov	r1, r5
 8001340:	a808      	add	r0, sp, #32
 8001342:	f002 f951 	bl	80035e8 <osThreadCreate>
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <main+0x1a4>)
  osThreadDef(readRawDataTask, StartReadRawDataTask, osPriorityAboveNormal, 0, 1024);
 8001348:	f104 0e2c 	add.w	lr, r4, #44	@ 0x2c
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800134c:	6018      	str	r0, [r3, #0]
  osThreadDef(readRawDataTask, StartReadRawDataTask, osPriorityAboveNormal, 0, 1024);
 800134e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001352:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8001356:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800135a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800135e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  readRawDataTaskHandle = osThreadCreate(osThread(readRawDataTask), NULL);
 8001362:	4629      	mov	r1, r5
 8001364:	a80f      	add	r0, sp, #60	@ 0x3c
 8001366:	f002 f93f 	bl	80035e8 <osThreadCreate>
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <main+0x1a8>)
  osThreadDef(kalmanFilterTask, StartKalmanFilterTask, osPriorityNormal, 0, 1024);
 800136c:	f104 0e48 	add.w	lr, r4, #72	@ 0x48
  readRawDataTaskHandle = osThreadCreate(osThread(readRawDataTask), NULL);
 8001370:	6018      	str	r0, [r3, #0]
  osThreadDef(kalmanFilterTask, StartKalmanFilterTask, osPriorityNormal, 0, 1024);
 8001372:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001376:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 800137a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800137e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001382:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  kalmanFilterTaskHandle = osThreadCreate(osThread(kalmanFilterTask), NULL);
 8001386:	4629      	mov	r1, r5
 8001388:	a816      	add	r0, sp, #88	@ 0x58
 800138a:	f002 f92d 	bl	80035e8 <osThreadCreate>
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <main+0x1ac>)
  osThreadDef(complementaryFilterTask, StartComplementaryFilterTask, osPriorityNormal, 0, 1024);
 8001390:	3464      	adds	r4, #100	@ 0x64
  kalmanFilterTaskHandle = osThreadCreate(osThread(kalmanFilterTask), NULL);
 8001392:	6018      	str	r0, [r3, #0]
  osThreadDef(complementaryFilterTask, StartComplementaryFilterTask, osPriorityNormal, 0, 1024);
 8001394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001396:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
 800139a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800139e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013a2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  complementaryFilterTaskHandle = osThreadCreate(osThread(complementaryFilterTask), NULL);
 80013a6:	4629      	mov	r1, r5
 80013a8:	a81d      	add	r0, sp, #116	@ 0x74
 80013aa:	f002 f91d 	bl	80035e8 <osThreadCreate>
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <main+0x1b0>)
 80013b0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80013b2:	f002 f913 	bl	80035dc <osKernelStart>
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <main+0x182>
    Error_Handler();
 80013b8:	f7ff fee2 	bl	8001180 <Error_Handler>
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	200005c8 	.word	0x200005c8
 80013cc:	40013000 	.word	0x40013000
 80013d0:	080083f0 	.word	0x080083f0
 80013d4:	200005b0 	.word	0x200005b0
 80013d8:	200005c0 	.word	0x200005c0
 80013dc:	200005bc 	.word	0x200005bc
 80013e0:	200005b8 	.word	0x200005b8
 80013e4:	200005b4 	.word	0x200005b4

080013e8 <IMU_Init>:
	MPU9250.PWR_MGMT1	= CLKSEL_1;						// CLOCK_SEL_PLL
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <IMU_Init+0x20>)
	if(MPU9250_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &MPU9250) != MPU9250_RESULT_OK)
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <IMU_Init+0x24>)
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <IMU_Init+0x28>)
	MPU9250.Gyro_Range  = MPU9250_Gyroscope_2000;
 80013ee:	f240 3203 	movw	r2, #771	@ 0x303
{
 80013f2:	b510      	push	{r4, lr}
	MPU9250.PWR_MGMT1	= CLKSEL_1;						// CLOCK_SEL_PLL
 80013f4:	2401      	movs	r4, #1
	MPU9250.Gyro_Range  = MPU9250_Gyroscope_2000;
 80013f6:	809a      	strh	r2, [r3, #4]
	if(MPU9250_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &MPU9250) != MPU9250_RESULT_OK)
 80013f8:	2210      	movs	r2, #16
	MPU9250.PWR_MGMT1	= CLKSEL_1;						// CLOCK_SEL_PLL
 80013fa:	601c      	str	r4, [r3, #0]
	if(MPU9250_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &MPU9250) != MPU9250_RESULT_OK)
 80013fc:	f001 fbda 	bl	8002bb4 <MPU9250_Init>
 8001400:	b900      	cbnz	r0, 8001404 <IMU_Init+0x1c>
}
 8001402:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001404:	f7ff febc 	bl	8001180 <Error_Handler>
 8001408:	200005a8 	.word	0x200005a8
 800140c:	40020000 	.word	0x40020000
 8001410:	200005c8 	.word	0x200005c8

08001414 <StartReadRawDataTask>:
{
 8001414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001418:	ed2d 8b02 	vpush	{d8}
	IMU_Init();
 800141c:	f7ff ffe4 	bl	80013e8 <IMU_Init>
	kalman_init(&kf);
 8001420:	4830      	ldr	r0, [pc, #192]	@ (80014e4 <StartReadRawDataTask+0xd0>)
 8001422:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 800150c <StartReadRawDataTask+0xf8>
 8001426:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8001510 <StartReadRawDataTask+0xfc>
 800142a:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 80014f0 <StartReadRawDataTask+0xdc>
 800142e:	4f2e      	ldr	r7, [pc, #184]	@ (80014e8 <StartReadRawDataTask+0xd4>)
 8001430:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 8001514 <StartReadRawDataTask+0x100>
		kalman_update(&kf, GX, GY, GZ, AX, AY, AZ, dt);
 8001434:	ed9f 8a2d 	vldr	s16, [pc, #180]	@ 80014ec <StartReadRawDataTask+0xd8>
		kalman_calibrate(&kf, phi, theta, N);
 8001438:	4c2a      	ldr	r4, [pc, #168]	@ (80014e4 <StartReadRawDataTask+0xd0>)
	kalman_init(&kf);
 800143a:	f001 fca3 	bl	8002d84 <kalman_init>
		IMU_readRawData();
 800143e:	f7ff fdf9 	bl	8001034 <IMU_readRawData>
		Get_AccelAngles(AZ, AY, AZ, &phi, &theta);
 8001442:	ed99 1a00 	vldr	s2, [r9]
 8001446:	edd7 0a00 	vldr	s1, [r7]
 800144a:	4829      	ldr	r0, [pc, #164]	@ (80014f0 <StartReadRawDataTask+0xdc>)
 800144c:	eeb0 0a41 	vmov.f32	s0, s2
 8001450:	4641      	mov	r1, r8
 8001452:	f001 fcff 	bl	8002e54 <Get_AccelAngles>
		kalman_calibrate(&kf, phi, theta, N);
 8001456:	2164      	movs	r1, #100	@ 0x64
 8001458:	edd8 0a00 	vldr	s1, [r8]
 800145c:	ed9b 0a00 	vldr	s0, [fp]
 8001460:	4620      	mov	r0, r4
 8001462:	f001 fcad 	bl	8002dc0 <kalman_calibrate>
		kalman_update(&kf, GX, GY, GZ, AX, AY, AZ, dt);
 8001466:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <StartReadRawDataTask+0xe0>)
 8001468:	edd9 2a00 	vldr	s5, [r9]
 800146c:	ed93 1a00 	vldr	s2, [r3]
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <StartReadRawDataTask+0xe4>)
 8001472:	ed97 2a00 	vldr	s4, [r7]
 8001476:	edd3 0a00 	vldr	s1, [r3]
 800147a:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <StartReadRawDataTask+0xe8>)
 800147c:	edda 1a00 	vldr	s3, [sl]
 8001480:	ed93 0a00 	vldr	s0, [r3]
 8001484:	eeb0 3a48 	vmov.f32	s6, s16
 8001488:	4620      	mov	r0, r4
 800148a:	f001 fd39 	bl	8002f00 <kalman_update>
		float roll  = kalman_get_roll(&kf);
 800148e:	4620      	mov	r0, r4
 8001490:	f002 f846 	bl	8003520 <kalman_get_roll>
		float pitch = kalman_get_pitch(&kf);
 8001494:	4620      	mov	r0, r4
		float roll  = kalman_get_roll(&kf);
 8001496:	ee10 5a10 	vmov	r5, s0
		float pitch = kalman_get_pitch(&kf);
 800149a:	f002 f861 	bl	8003560 <kalman_get_pitch>
		float yaw   = kalman_get_yaw(&kf);
 800149e:	4620      	mov	r0, r4
		float pitch = kalman_get_pitch(&kf);
 80014a0:	ee10 6a10 	vmov	r6, s0
		float yaw   = kalman_get_yaw(&kf);
 80014a4:	f002 f87c 	bl	80035a0 <kalman_get_yaw>
		printf("roll: %.2f \n", roll);
 80014a8:	4628      	mov	r0, r5
		float yaw   = kalman_get_yaw(&kf);
 80014aa:	ee10 5a10 	vmov	r5, s0
		printf("roll: %.2f \n", roll);
 80014ae:	f7ff f853 	bl	8000558 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4812      	ldr	r0, [pc, #72]	@ (8001500 <StartReadRawDataTask+0xec>)
 80014b8:	f003 fdc4 	bl	8005044 <iprintf>
		printf("pitch: %.2f \n", pitch);
 80014bc:	4630      	mov	r0, r6
 80014be:	f7ff f84b 	bl	8000558 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	480f      	ldr	r0, [pc, #60]	@ (8001504 <StartReadRawDataTask+0xf0>)
 80014c8:	f003 fdbc 	bl	8005044 <iprintf>
		printf("yaw: %.2f \n", yaw);
 80014cc:	4628      	mov	r0, r5
 80014ce:	f7ff f843 	bl	8000558 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	480c      	ldr	r0, [pc, #48]	@ (8001508 <StartReadRawDataTask+0xf4>)
 80014d8:	f003 fdb4 	bl	8005044 <iprintf>
		osDelay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f002 f8b3 	bl	8003648 <osDelay>
	for(;;)
 80014e2:	e7ac      	b.n	800143e <StartReadRawDataTask+0x2a>
 80014e4:	200004c4 	.word	0x200004c4
 80014e8:	200004a0 	.word	0x200004a0
 80014ec:	00000000 	.word	0x00000000
 80014f0:	20000498 	.word	0x20000498
 80014f4:	200004a8 	.word	0x200004a8
 80014f8:	200004ac 	.word	0x200004ac
 80014fc:	200004b0 	.word	0x200004b0
 8001500:	08008470 	.word	0x08008470
 8001504:	08008480 	.word	0x08008480
 8001508:	08008490 	.word	0x08008490
 800150c:	2000049c 	.word	0x2000049c
 8001510:	20000494 	.word	0x20000494
 8001514:	200004a4 	.word	0x200004a4

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_MspInit+0x3c>)
 800151c:	2200      	movs	r2, #0
 800151e:	9200      	str	r2, [sp, #0]
 8001520:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001522:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001526:	6459      	str	r1, [r3, #68]	@ 0x44
 8001528:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152a:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 800152e:	9000      	str	r0, [sp, #0]
 8001530:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	9201      	str	r2, [sp, #4]
 8001534:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001536:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 800153a:	6418      	str	r0, [r3, #64]	@ 0x40
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001546:	210f      	movs	r1, #15
 8001548:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800154e:	f000 b96f 	b.w	8001830 <HAL_NVIC_SetPriority>
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001558:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 800155a:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <HAL_SPI_MspInit+0x70>)
 800155c:	6801      	ldr	r1, [r0, #0]
{
 800155e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8001562:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001568:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800156c:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 800156e:	d001      	beq.n	8001574 <HAL_SPI_MspInit+0x1c>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001570:	b008      	add	sp, #32
 8001572:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001574:	f502 3284 	add.w	r2, r2, #67584	@ 0x10800
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 800157c:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8001580:	6450      	str	r0, [r2, #68]	@ 0x44
 8001582:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8001584:	f400 5080 	and.w	r0, r0, #4096	@ 0x1000
 8001588:	9000      	str	r0, [sp, #0]
 800158a:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	480e      	ldr	r0, [pc, #56]	@ (80015cc <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6313      	str	r3, [r2, #48]	@ 0x30
 8001598:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800159a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80015c0 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2203      	movs	r2, #3
 80015a6:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015aa:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f000 f986 	bl	80018c4 <HAL_GPIO_Init>
}
 80015b8:	b008      	add	sp, #32
 80015ba:	bd10      	pop	{r4, pc}
 80015bc:	f3af 8000 	nop.w
 80015c0:	000000e0 	.word	0x000000e0
 80015c4:	00000002 	.word	0x00000002
 80015c8:	40013000 	.word	0x40013000
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	b088      	sub	sp, #32
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80015d4:	2500      	movs	r5, #0
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <HAL_InitTick+0x84>)
 80015d8:	9502      	str	r5, [sp, #8]
 80015da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80015dc:	4c1e      	ldr	r4, [pc, #120]	@ (8001658 <HAL_InitTick+0x88>)
  __HAL_RCC_TIM10_CLK_ENABLE();
 80015de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80015e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ea:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM10_CLK_ENABLE();
 80015ec:	9302      	str	r3, [sp, #8]
{
 80015ee:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM10_CLK_ENABLE();
 80015f2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f4:	f000 fd28 	bl	8002048 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015f8:	f000 fd16 	bl	8002028 <HAL_RCC_GetPCLK2Freq>
  htim10.Instance = TIM10;
 80015fc:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_InitTick+0x8c>)
 80015fe:	6022      	str	r2, [r4, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001600:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001604:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001606:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <HAL_InitTick+0x90>)
  htim10.Init.Prescaler = uwPrescalerValue;
  htim10.Init.ClockDivision = 0;
 8001608:	6125      	str	r5, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800160a:	fba2 2300 	umull	r2, r3, r2, r0
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	3b01      	subs	r3, #1
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim10);
 8001612:	4620      	mov	r0, r4
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	61a5      	str	r5, [r4, #24]
  status = HAL_TIM_Base_Init(&htim10);
 800161a:	f001 fa41 	bl	8002aa0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800161e:	4605      	mov	r5, r0
 8001620:	b110      	cbz	r0, 8001628 <HAL_InitTick+0x58>
    }
  }

 /* Return function status */
  return status;
}
 8001622:	4628      	mov	r0, r5
 8001624:	b008      	add	sp, #32
 8001626:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001628:	4620      	mov	r0, r4
 800162a:	f001 f911 	bl	8002850 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800162e:	4605      	mov	r5, r0
 8001630:	2800      	cmp	r0, #0
 8001632:	d1f6      	bne.n	8001622 <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001634:	2019      	movs	r0, #25
 8001636:	f000 f937 	bl	80018a8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	2e0f      	cmp	r6, #15
 800163c:	d901      	bls.n	8001642 <HAL_InitTick+0x72>
        status = HAL_ERROR;
 800163e:	2501      	movs	r5, #1
 8001640:	e7ef      	b.n	8001622 <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001642:	462a      	mov	r2, r5
 8001644:	4631      	mov	r1, r6
 8001646:	2019      	movs	r0, #25
 8001648:	f000 f8f2 	bl	8001830 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_InitTick+0x94>)
 800164e:	601e      	str	r6, [r3, #0]
 8001650:	e7e7      	b.n	8001622 <HAL_InitTick+0x52>
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	20000620 	.word	0x20000620
 800165c:	40014400 	.word	0x40014400
 8001660:	431bde83 	.word	0x431bde83
 8001664:	20000008 	.word	0x20000008

08001668 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler>
 800166a:	bf00      	nop

0800166c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <HardFault_Handler>
 800166e:	bf00      	nop

08001670 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler>
 8001672:	bf00      	nop

08001674 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <BusFault_Handler>
 8001676:	bf00      	nop

08001678 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler>
 800167a:	bf00      	nop

0800167c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop

08001680 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001680:	4801      	ldr	r0, [pc, #4]	@ (8001688 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8001682:	f001 b91f 	b.w	80028c4 <HAL_TIM_IRQHandler>
 8001686:	bf00      	nop
 8001688:	20000620 	.word	0x20000620

0800168c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800168c:	2001      	movs	r0, #1
 800168e:	4770      	bx	lr

08001690 <_kill>:

int _kill(int pid, int sig)
{
 8001690:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001692:	f003 fddd 	bl	8005250 <__errno>
 8001696:	2316      	movs	r3, #22
 8001698:	6003      	str	r3, [r0, #0]
  return -1;
}
 800169a:	f04f 30ff 	mov.w	r0, #4294967295
 800169e:	bd08      	pop	{r3, pc}

080016a0 <_exit>:

void _exit (int status)
{
 80016a0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80016a2:	f003 fdd5 	bl	8005250 <__errno>
 80016a6:	2316      	movs	r3, #22
 80016a8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80016aa:	e7fe      	b.n	80016aa <_exit+0xa>

080016ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ac:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	1e16      	subs	r6, r2, #0
 80016b0:	dd07      	ble.n	80016c2 <_read+0x16>
 80016b2:	460c      	mov	r4, r1
 80016b4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80016b6:	f3af 8000 	nop.w
 80016ba:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	42a5      	cmp	r5, r4
 80016c0:	d1f9      	bne.n	80016b6 <_read+0xa>
  }

  return len;
}
 80016c2:	4630      	mov	r0, r6
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
 80016c6:	bf00      	nop

080016c8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80016d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d4:	604b      	str	r3, [r1, #4]
  return 0;
}
 80016d6:	2000      	movs	r0, #0
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop

080016dc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80016dc:	2001      	movs	r0, #1
 80016de:	4770      	bx	lr

080016e0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80016e0:	2000      	movs	r0, #0
 80016e2:	4770      	bx	lr

080016e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e6:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80016e8:	680b      	ldr	r3, [r1, #0]
{
 80016ea:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4c0c      	ldr	r4, [pc, #48]	@ (8001720 <_sbrk+0x3c>)
 80016ee:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80016f0:	b12b      	cbz	r3, 80016fe <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4418      	add	r0, r3
 80016f4:	4290      	cmp	r0, r2
 80016f6:	d807      	bhi.n	8001708 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80016f8:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <_sbrk+0x40>)
 8001700:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4418      	add	r0, r3
 8001704:	4290      	cmp	r0, r2
 8001706:	d9f7      	bls.n	80016f8 <_sbrk+0x14>
    errno = ENOMEM;
 8001708:	f003 fda2 	bl	8005250 <__errno>
 800170c:	230c      	movs	r3, #12
 800170e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd10      	pop	{r4, pc}
 8001718:	20000668 	.word	0x20000668
 800171c:	20020000 	.word	0x20020000
 8001720:	00000400 	.word	0x00000400
 8001724:	20002c40 	.word	0x20002c40

08001728 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4a03      	ldr	r2, [pc, #12]	@ (8001738 <SystemInit+0x10>)
 800172a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800172e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001732:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001774 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001740:	f7ff fff2 	bl	8001728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	@ (8001778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	@ (800177c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	@ (8001788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f003 fd77 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176e:	f7ff fd61 	bl	8001234 <main>
  bx  lr    
 8001772:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001780:	08008d90 	.word	0x08008d90
  ldr r2, =_sbss
 8001784:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001788:	20002c3c 	.word	0x20002c3c

0800178c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_Init+0x30>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f82d 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f7ff ff0c 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff feae 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80017bc:	2000      	movs	r0, #0
 80017be:	bd08      	pop	{r3, pc}
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80017c4:	4a03      	ldr	r2, [pc, #12]	@ (80017d4 <HAL_IncTick+0x10>)
 80017c6:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <HAL_IncTick+0x14>)
 80017c8:	6811      	ldr	r1, [r2, #0]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	440b      	add	r3, r1
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2000066c 	.word	0x2000066c
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017dc:	4b01      	ldr	r3, [pc, #4]	@ (80017e4 <HAL_GetTick+0x8>)
 80017de:	6818      	ldr	r0, [r3, #0]
}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000066c 	.word	0x2000066c

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b538      	push	{r3, r4, r5, lr}
 80017ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff fff6 	bl	80017dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80017f2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80017f4:	d002      	beq.n	80017fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f6:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <HAL_Delay+0x20>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fc:	f7ff ffee 	bl	80017dc <HAL_GetTick>
 8001800:	1b40      	subs	r0, r0, r5
 8001802:	42a0      	cmp	r0, r4
 8001804:	d3fa      	bcc.n	80017fc <HAL_Delay+0x14>
  {
  }
}
 8001806:	bd38      	pop	{r3, r4, r5, pc}
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4907      	ldr	r1, [pc, #28]	@ (800182c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800180e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001816:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001826:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_NVIC_SetPriority+0x70>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001838:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183a:	f1c3 0e07 	rsb	lr, r3, #7
 800183e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001846:	bf28      	it	cs
 8001848:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184c:	f1bc 0f06 	cmp.w	ip, #6
 8001850:	d91c      	bls.n	800188c <HAL_NVIC_SetPriority+0x5c>
 8001852:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	fa03 f30c 	lsl.w	r3, r3, ip
 800185e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	fa03 f30e 	lsl.w	r3, r3, lr
 800186a:	ea21 0303 	bic.w	r3, r1, r3
 800186e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001872:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001876:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800187a:	db0a      	blt.n	8001892 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001880:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001884:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001888:	f85d fb04 	ldr.w	pc, [sp], #4
 800188c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	4694      	mov	ip, r2
 8001890:	e7e7      	b.n	8001862 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <HAL_NVIC_SetPriority+0x74>)
 8001894:	f000 000f 	and.w	r0, r0, #15
 8001898:	4402      	add	r2, r0
 800189a:	7613      	strb	r3, [r2, #24]
 800189c:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a0:	e000ed00 	.word	0xe000ed00
 80018a4:	e000ecfc 	.word	0xe000ecfc

080018a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018a8:	2800      	cmp	r0, #0
 80018aa:	db07      	blt.n	80018bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_NVIC_EnableIRQ+0x18>)
 80018ae:	0941      	lsrs	r1, r0, #5
 80018b0:	2301      	movs	r3, #1
 80018b2:	f000 001f 	and.w	r0, r0, #31
 80018b6:	4083      	lsls	r3, r0
 80018b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c8:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018cc:	f8df a1c8 	ldr.w	sl, [pc, #456]	@ 8001a98 <HAL_GPIO_Init+0x1d4>
{
 80018d0:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 80018d2:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d6:	4689      	mov	r9, r1
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	3301      	adds	r3, #1
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d07d      	beq.n	80019dc <HAL_GPIO_Init+0x118>
    ioposition = 0x01U << position;
 80018e0:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e4:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 80018e8:	43a2      	bics	r2, r4
 80018ea:	d1f6      	bne.n	80018da <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80018f0:	f001 0c03 	and.w	ip, r1, #3
 80018f4:	005a      	lsls	r2, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f6:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f8:	f10c 36ff 	add.w	r6, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018fc:	4095      	lsls	r5, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001900:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001904:	d96d      	bls.n	80019e2 <HAL_GPIO_Init+0x11e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001906:	f1bc 0f03 	cmp.w	ip, #3
 800190a:	f040 80b4 	bne.w	8001a76 <HAL_GPIO_Init+0x1b2>
      temp = GPIOx->MODER;
 800190e:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001910:	fa0c f202 	lsl.w	r2, ip, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001914:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001916:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001918:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800191c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800191e:	d0dc      	beq.n	80018da <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001920:	2200      	movs	r2, #0
 8001922:	9203      	str	r2, [sp, #12]
 8001924:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001928:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800192c:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001930:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001934:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001938:	9203      	str	r2, [sp, #12]
 800193a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800193c:	f023 0203 	bic.w	r2, r3, #3
 8001940:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001944:	f003 0603 	and.w	r6, r3, #3
 8001948:	270f      	movs	r7, #15
 800194a:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 800194e:	00b6      	lsls	r6, r6, #2
 8001950:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001954:	4f4d      	ldr	r7, [pc, #308]	@ (8001a8c <HAL_GPIO_Init+0x1c8>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001958:	42b8      	cmp	r0, r7
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800195a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195e:	d015      	beq.n	800198c <HAL_GPIO_Init+0xc8>
 8001960:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001964:	42b8      	cmp	r0, r7
 8001966:	d074      	beq.n	8001a52 <HAL_GPIO_Init+0x18e>
 8001968:	4f49      	ldr	r7, [pc, #292]	@ (8001a90 <HAL_GPIO_Init+0x1cc>)
 800196a:	42b8      	cmp	r0, r7
 800196c:	d077      	beq.n	8001a5e <HAL_GPIO_Init+0x19a>
 800196e:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8001a9c <HAL_GPIO_Init+0x1d8>
 8001972:	4560      	cmp	r0, ip
 8001974:	d079      	beq.n	8001a6a <HAL_GPIO_Init+0x1a6>
 8001976:	f8df c128 	ldr.w	ip, [pc, #296]	@ 8001aa0 <HAL_GPIO_Init+0x1dc>
 800197a:	4560      	cmp	r0, ip
 800197c:	bf0c      	ite	eq
 800197e:	f04f 0c04 	moveq.w	ip, #4
 8001982:	f04f 0c07 	movne.w	ip, #7
 8001986:	fa0c f606 	lsl.w	r6, ip, r6
 800198a:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800198c:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198e:	4a41      	ldr	r2, [pc, #260]	@ (8001a94 <HAL_GPIO_Init+0x1d0>)
 8001990:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001992:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8001994:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001998:	4e3e      	ldr	r6, [pc, #248]	@ (8001a94 <HAL_GPIO_Init+0x1d0>)
        temp &= ~((uint32_t)iocurrent);
 800199a:	bf54      	ite	pl
 800199c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800199e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80019a2:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80019a4:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80019a6:	4e3b      	ldr	r6, [pc, #236]	@ (8001a94 <HAL_GPIO_Init+0x1d0>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a8:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80019aa:	bf54      	ite	pl
 80019ac:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80019ae:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 80019b2:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 80019b4:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b6:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80019b8:	4e36      	ldr	r6, [pc, #216]	@ (8001a94 <HAL_GPIO_Init+0x1d0>)
        temp &= ~((uint32_t)iocurrent);
 80019ba:	bf54      	ite	pl
 80019bc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80019be:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 80019c2:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c4:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c6:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c8:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80019cc:	4931      	ldr	r1, [pc, #196]	@ (8001a94 <HAL_GPIO_Init+0x1d0>)
        temp &= ~((uint32_t)iocurrent);
 80019ce:	bf54      	ite	pl
 80019d0:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80019d2:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 80019d8:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019da:	d181      	bne.n	80018e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019dc:	b005      	add	sp, #20
 80019de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80019e2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e4:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e8:	f8d9 600c 	ldr.w	r6, [r9, #12]
 80019ec:	4096      	lsls	r6, r2
 80019ee:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 80019f2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80019f4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f6:	ea26 0e08 	bic.w	lr, r6, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fa:	f3c1 1600 	ubfx	r6, r1, #4, #1
 80019fe:	409e      	lsls	r6, r3
 8001a00:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 8001a04:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001a06:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a08:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8001a10:	4096      	lsls	r6, r2
 8001a12:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a16:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 8001a1a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1c:	f47f af77 	bne.w	800190e <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 8001a20:	08de      	lsrs	r6, r3, #3
 8001a22:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8001a26:	9601      	str	r6, [sp, #4]
 8001a28:	6a37      	ldr	r7, [r6, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a2a:	f8d9 6010 	ldr.w	r6, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8001a2e:	9700      	str	r7, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a30:	f003 0e07 	and.w	lr, r3, #7
 8001a34:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a38:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a3a:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001a42:	9f00      	ldr	r7, [sp, #0]
 8001a44:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001a48:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a4a:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001a4e:	623e      	str	r6, [r7, #32]
 8001a50:	e75d      	b.n	800190e <HAL_GPIO_Init+0x4a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	f04f 0c01 	mov.w	ip, #1
 8001a56:	fa0c f606 	lsl.w	r6, ip, r6
 8001a5a:	4335      	orrs	r5, r6
 8001a5c:	e796      	b.n	800198c <HAL_GPIO_Init+0xc8>
 8001a5e:	f04f 0c02 	mov.w	ip, #2
 8001a62:	fa0c f606 	lsl.w	r6, ip, r6
 8001a66:	4335      	orrs	r5, r6
 8001a68:	e790      	b.n	800198c <HAL_GPIO_Init+0xc8>
 8001a6a:	f04f 0c03 	mov.w	ip, #3
 8001a6e:	fa0c f606 	lsl.w	r6, ip, r6
 8001a72:	4335      	orrs	r5, r6
 8001a74:	e78a      	b.n	800198c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->PUPDR;
 8001a76:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a78:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7c:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8001a80:	4096      	lsls	r6, r2
 8001a82:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8001a86:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a88:	e741      	b.n	800190e <HAL_GPIO_Init+0x4a>
 8001a8a:	bf00      	nop
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40013c00 	.word	0x40013c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	b902      	cbnz	r2, 8001aa8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa6:	0409      	lsls	r1, r1, #16
 8001aa8:	6181      	str	r1, [r0, #24]
  }
}
 8001aaa:	4770      	bx	lr

08001aac <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aac:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aae:	ea01 0203 	and.w	r2, r1, r3
 8001ab2:	ea21 0103 	bic.w	r1, r1, r3
 8001ab6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001aba:	6181      	str	r1, [r0, #24]
}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	f000 81d8 	beq.w	8001e76 <HAL_RCC_OscConfig+0x3b6>
{
 8001ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	6803      	ldr	r3, [r0, #0]
 8001acc:	07dd      	lsls	r5, r3, #31
{
 8001ace:	b082      	sub	sp, #8
 8001ad0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	d52f      	bpl.n	8001b34 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ad4:	499d      	ldr	r1, [pc, #628]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001ad6:	688a      	ldr	r2, [r1, #8]
 8001ad8:	f002 020c 	and.w	r2, r2, #12
 8001adc:	2a04      	cmp	r2, #4
 8001ade:	f000 80ec 	beq.w	8001cba <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae2:	688a      	ldr	r2, [r1, #8]
 8001ae4:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ae8:	2a08      	cmp	r2, #8
 8001aea:	f000 80e2 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	6863      	ldr	r3, [r4, #4]
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af4:	f000 80eb 	beq.w	8001cce <HAL_RCC_OscConfig+0x20e>
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001afc:	f000 8173 	beq.w	8001de6 <HAL_RCC_OscConfig+0x326>
 8001b00:	4d92      	ldr	r5, [pc, #584]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001b02:	682a      	ldr	r2, [r5, #0]
 8001b04:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b08:	602a      	str	r2, [r5, #0]
 8001b0a:	682a      	ldr	r2, [r5, #0]
 8001b0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b10:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80e0 	bne.w	8001cd8 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fe60 	bl	80017dc <HAL_GetTick>
 8001b1c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e005      	b.n	8001b2c <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fe5c 	bl	80017dc <HAL_GetTick>
 8001b24:	1b80      	subs	r0, r0, r6
 8001b26:	2864      	cmp	r0, #100	@ 0x64
 8001b28:	f200 8100 	bhi.w	8001d2c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	039f      	lsls	r7, r3, #14
 8001b30:	d4f6      	bmi.n	8001b20 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	079d      	lsls	r5, r3, #30
 8001b36:	d528      	bpl.n	8001b8a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b38:	4a84      	ldr	r2, [pc, #528]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001b3a:	6891      	ldr	r1, [r2, #8]
 8001b3c:	f011 0f0c 	tst.w	r1, #12
 8001b40:	f000 809b 	beq.w	8001c7a <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b44:	6891      	ldr	r1, [r2, #8]
 8001b46:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b4a:	2908      	cmp	r1, #8
 8001b4c:	f000 8091 	beq.w	8001c72 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b50:	68e3      	ldr	r3, [r4, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 810c 	beq.w	8001d70 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	4b7d      	ldr	r3, [pc, #500]	@ (8001d50 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	4e7c      	ldr	r6, [pc, #496]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b60:	f7ff fe3c 	bl	80017dc <HAL_GetTick>
 8001b64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	e005      	b.n	8001b74 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff fe38 	bl	80017dc <HAL_GetTick>
 8001b6c:	1b40      	subs	r0, r0, r5
 8001b6e:	2802      	cmp	r0, #2
 8001b70:	f200 80dc 	bhi.w	8001d2c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	6833      	ldr	r3, [r6, #0]
 8001b76:	079f      	lsls	r7, r3, #30
 8001b78:	d5f6      	bpl.n	8001b68 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	6833      	ldr	r3, [r6, #0]
 8001b7c:	6922      	ldr	r2, [r4, #16]
 8001b7e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001b82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b86:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	071a      	lsls	r2, r3, #28
 8001b8c:	d45c      	bmi.n	8001c48 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8e:	075d      	lsls	r5, r3, #29
 8001b90:	d53a      	bpl.n	8001c08 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b92:	4a6e      	ldr	r2, [pc, #440]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001b94:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001b96:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	f040 8088 	bne.w	8001cae <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bb2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4e67      	ldr	r6, [pc, #412]	@ (8001d54 <HAL_RCC_OscConfig+0x294>)
 8001bb6:	6833      	ldr	r3, [r6, #0]
 8001bb8:	05d8      	lsls	r0, r3, #23
 8001bba:	f140 80a7 	bpl.w	8001d0c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbe:	68a3      	ldr	r3, [r4, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	f000 80b7 	beq.w	8001d34 <HAL_RCC_OscConfig+0x274>
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	f000 811d 	beq.w	8001e06 <HAL_RCC_OscConfig+0x346>
 8001bcc:	4e5f      	ldr	r6, [pc, #380]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001bce:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	6732      	str	r2, [r6, #112]	@ 0x70
 8001bd6:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001bd8:	f022 0204 	bic.w	r2, r2, #4
 8001bdc:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 80ad 	bne.w	8001d3e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7ff fdfa 	bl	80017dc <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001bec:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bee:	e005      	b.n	8001bfc <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fdf4 	bl	80017dc <HAL_GetTick>
 8001bf4:	1bc0      	subs	r0, r0, r7
 8001bf6:	4540      	cmp	r0, r8
 8001bf8:	f200 8098 	bhi.w	8001d2c <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001bfe:	079b      	lsls	r3, r3, #30
 8001c00:	d4f6      	bmi.n	8001bf0 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c02:	2d00      	cmp	r5, #0
 8001c04:	f040 80f9 	bne.w	8001dfa <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c08:	69a3      	ldr	r3, [r4, #24]
 8001c0a:	b1cb      	cbz	r3, 8001c40 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c0c:	4d4f      	ldr	r5, [pc, #316]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001c0e:	68aa      	ldr	r2, [r5, #8]
 8001c10:	f002 020c 	and.w	r2, r2, #12
 8001c14:	2a08      	cmp	r2, #8
 8001c16:	f000 80bc 	beq.w	8001d92 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1a:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d50 <HAL_RCC_OscConfig+0x290>)
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c24:	f000 80f9 	beq.w	8001e1a <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fdd8 	bl	80017dc <HAL_GetTick>
 8001c2c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	e004      	b.n	8001c3a <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff fdd4 	bl	80017dc <HAL_GetTick>
 8001c34:	1b00      	subs	r0, r0, r4
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d878      	bhi.n	8001d2c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	682b      	ldr	r3, [r5, #0]
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	d4f7      	bmi.n	8001c30 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001c40:	2000      	movs	r0, #0
}
 8001c42:	b002      	add	sp, #8
 8001c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c48:	6963      	ldr	r3, [r4, #20]
 8001c4a:	b1fb      	cbz	r3, 8001c8c <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8001c4c:	4b40      	ldr	r3, [pc, #256]	@ (8001d50 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4e3f      	ldr	r6, [pc, #252]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8001c50:	2201      	movs	r2, #1
 8001c52:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001c56:	f7ff fdc1 	bl	80017dc <HAL_GetTick>
 8001c5a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5c:	e004      	b.n	8001c68 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fdbd 	bl	80017dc <HAL_GetTick>
 8001c62:	1b40      	subs	r0, r0, r5
 8001c64:	2802      	cmp	r0, #2
 8001c66:	d861      	bhi.n	8001d2c <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c68:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001c6a:	079b      	lsls	r3, r3, #30
 8001c6c:	d5f7      	bpl.n	8001c5e <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	e78d      	b.n	8001b8e <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	6852      	ldr	r2, [r2, #4]
 8001c74:	0251      	lsls	r1, r2, #9
 8001c76:	f53f af6b 	bmi.w	8001b50 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	4a34      	ldr	r2, [pc, #208]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	0792      	lsls	r2, r2, #30
 8001c80:	d538      	bpl.n	8001cf4 <HAL_RCC_OscConfig+0x234>
 8001c82:	68e2      	ldr	r2, [r4, #12]
 8001c84:	2a01      	cmp	r2, #1
 8001c86:	d035      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8001c88:	2001      	movs	r0, #1
 8001c8a:	e7da      	b.n	8001c42 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8001c8c:	4a30      	ldr	r2, [pc, #192]	@ (8001d50 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8e:	4e2f      	ldr	r6, [pc, #188]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8001c90:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001c94:	f7ff fda2 	bl	80017dc <HAL_GetTick>
 8001c98:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9a:	e004      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fd9e 	bl	80017dc <HAL_GetTick>
 8001ca0:	1b40      	subs	r0, r0, r5
 8001ca2:	2802      	cmp	r0, #2
 8001ca4:	d842      	bhi.n	8001d2c <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca6:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001ca8:	079f      	lsls	r7, r3, #30
 8001caa:	d4f7      	bmi.n	8001c9c <HAL_RCC_OscConfig+0x1dc>
 8001cac:	e7df      	b.n	8001c6e <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8001cae:	2500      	movs	r5, #0
 8001cb0:	e780      	b.n	8001bb4 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	684a      	ldr	r2, [r1, #4]
 8001cb4:	0251      	lsls	r1, r2, #9
 8001cb6:	f57f af1a 	bpl.w	8001aee <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cba:	4a24      	ldr	r2, [pc, #144]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	0392      	lsls	r2, r2, #14
 8001cc0:	f57f af38 	bpl.w	8001b34 <HAL_RCC_OscConfig+0x74>
 8001cc4:	6862      	ldr	r2, [r4, #4]
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	f47f af34 	bne.w	8001b34 <HAL_RCC_OscConfig+0x74>
 8001ccc:	e7dc      	b.n	8001c88 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cce:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001cd0:	6813      	ldr	r3, [r2, #0]
 8001cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fd80 	bl	80017dc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cdc:	4e1b      	ldr	r6, [pc, #108]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001cde:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce0:	e004      	b.n	8001cec <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce2:	f7ff fd7b 	bl	80017dc <HAL_GetTick>
 8001ce6:	1b40      	subs	r0, r0, r5
 8001ce8:	2864      	cmp	r0, #100	@ 0x64
 8001cea:	d81f      	bhi.n	8001d2c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cec:	6833      	ldr	r3, [r6, #0]
 8001cee:	039b      	lsls	r3, r3, #14
 8001cf0:	d5f7      	bpl.n	8001ce2 <HAL_RCC_OscConfig+0x222>
 8001cf2:	e71e      	b.n	8001b32 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4915      	ldr	r1, [pc, #84]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001cf6:	6920      	ldr	r0, [r4, #16]
 8001cf8:	680a      	ldr	r2, [r1, #0]
 8001cfa:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001cfe:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001d02:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d04:	071a      	lsls	r2, r3, #28
 8001d06:	f57f af42 	bpl.w	8001b8e <HAL_RCC_OscConfig+0xce>
 8001d0a:	e79d      	b.n	8001c48 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0c:	6833      	ldr	r3, [r6, #0]
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d12:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d14:	f7ff fd62 	bl	80017dc <HAL_GetTick>
 8001d18:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	6833      	ldr	r3, [r6, #0]
 8001d1c:	05d9      	lsls	r1, r3, #23
 8001d1e:	f53f af4e 	bmi.w	8001bbe <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7ff fd5b 	bl	80017dc <HAL_GetTick>
 8001d26:	1bc0      	subs	r0, r0, r7
 8001d28:	2802      	cmp	r0, #2
 8001d2a:	d9f6      	bls.n	8001d1a <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8001d2c:	2003      	movs	r0, #3
}
 8001d2e:	b002      	add	sp, #8
 8001d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d34:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
 8001d36:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fd4d 	bl	80017dc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d42:	4f02      	ldr	r7, [pc, #8]	@ (8001d4c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001d44:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x2a2>
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	42470000 	.word	0x42470000
 8001d54:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7ff fd40 	bl	80017dc <HAL_GetTick>
 8001d5c:	1b80      	subs	r0, r0, r6
 8001d5e:	4540      	cmp	r0, r8
 8001d60:	d8e4      	bhi.n	8001d2c <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d64:	079a      	lsls	r2, r3, #30
 8001d66:	d5f7      	bpl.n	8001d58 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	f43f af4d 	beq.w	8001c08 <HAL_RCC_OscConfig+0x148>
 8001d6e:	e044      	b.n	8001dfa <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8001d70:	4a42      	ldr	r2, [pc, #264]	@ (8001e7c <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	4e43      	ldr	r6, [pc, #268]	@ (8001e80 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8001d74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d76:	f7ff fd31 	bl	80017dc <HAL_GetTick>
 8001d7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7c:	e004      	b.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fd2d 	bl	80017dc <HAL_GetTick>
 8001d82:	1b40      	subs	r0, r0, r5
 8001d84:	2802      	cmp	r0, #2
 8001d86:	d8d1      	bhi.n	8001d2c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d88:	6833      	ldr	r3, [r6, #0]
 8001d8a:	0799      	lsls	r1, r3, #30
 8001d8c:	d4f7      	bmi.n	8001d7e <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	e6fb      	b.n	8001b8a <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	f43f af78 	beq.w	8001c88 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8001d98:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d9a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da0:	4291      	cmp	r1, r2
 8001da2:	f47f af71 	bne.w	8001c88 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da8:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dac:	4291      	cmp	r1, r2
 8001dae:	f47f af6b 	bne.w	8001c88 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001db4:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001db8:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dba:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001dbe:	f47f af63 	bne.w	8001c88 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001dc4:	0852      	lsrs	r2, r2, #1
 8001dc6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001dca:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dcc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001dd0:	f47f af5a 	bne.w	8001c88 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dd4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001dd6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dda:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001dde:	bf14      	ite	ne
 8001de0:	2001      	movne	r0, #1
 8001de2:	2000      	moveq	r0, #0
 8001de4:	e72d      	b.n	8001c42 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <HAL_RCC_OscConfig+0x3c0>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001df6:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001df8:	e76e      	b.n	8001cd8 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_RCC_OscConfig+0x3c0>)
 8001dfc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001dfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e04:	e700      	b.n	8001c08 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e06:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <HAL_RCC_OscConfig+0x3c0>)
 8001e08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e0a:	f042 0204 	orr.w	r2, r2, #4
 8001e0e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e18:	e791      	b.n	8001d3e <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fcdf 	bl	80017dc <HAL_GetTick>
 8001e1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e20:	e005      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff fcdb 	bl	80017dc <HAL_GetTick>
 8001e26:	1b80      	subs	r0, r0, r6
 8001e28:	2802      	cmp	r0, #2
 8001e2a:	f63f af7f 	bhi.w	8001d2c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	0199      	lsls	r1, r3, #6
 8001e32:	d4f6      	bmi.n	8001e22 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e34:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001e38:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e40:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8001e44:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001e46:	490d      	ldr	r1, [pc, #52]	@ (8001e7c <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e48:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001e4c:	3a01      	subs	r2, #1
 8001e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001e52:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e54:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e56:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001e58:	f7ff fcc0 	bl	80017dc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5c:	4d08      	ldr	r5, [pc, #32]	@ (8001e80 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8001e5e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e60:	e005      	b.n	8001e6e <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff fcbb 	bl	80017dc <HAL_GetTick>
 8001e66:	1b00      	subs	r0, r0, r4
 8001e68:	2802      	cmp	r0, #2
 8001e6a:	f63f af5f 	bhi.w	8001d2c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	019a      	lsls	r2, r3, #6
 8001e72:	d5f6      	bpl.n	8001e62 <HAL_RCC_OscConfig+0x3a2>
 8001e74:	e6e4      	b.n	8001c40 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	42470000 	.word	0x42470000
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e84:	4916      	ldr	r1, [pc, #88]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001e86:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e88:	688b      	ldr	r3, [r1, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d01b      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x46>
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e96:	4813      	ldr	r0, [pc, #76]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e98:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e9c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea8:	d111      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eaa:	480e      	ldr	r0, [pc, #56]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001eac:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001eb0:	fba1 0100 	umull	r0, r1, r1, r0
 8001eb4:	f7fe fed0 	bl	8000c58 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001ec4:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001ec8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eca:	4807      	ldr	r0, [pc, #28]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001ecc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ece:	4806      	ldr	r0, [pc, #24]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001ed0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	fba1 0100 	umull	r0, r1, r1, r0
 8001eda:	f7fe febd 	bl	8000c58 <__aeabi_uldivmod>
 8001ede:	e7eb      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	007a1200 	.word	0x007a1200

08001eec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001eec:	2800      	cmp	r0, #0
 8001eee:	f000 8087 	beq.w	8002000 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef2:	4a48      	ldr	r2, [pc, #288]	@ (8002014 <HAL_RCC_ClockConfig+0x128>)
 8001ef4:	6813      	ldr	r3, [r2, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	428b      	cmp	r3, r1
{
 8001efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f00:	460d      	mov	r5, r1
 8001f02:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	d209      	bcs.n	8001f1a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	b2cb      	uxtb	r3, r1
 8001f08:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	6813      	ldr	r3, [r2, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	428b      	cmp	r3, r1
 8001f12:	d002      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
}
 8001f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	0798      	lsls	r0, r3, #30
 8001f1e:	d514      	bpl.n	8001f4a <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	0759      	lsls	r1, r3, #29
 8001f22:	d504      	bpl.n	8001f2e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	493c      	ldr	r1, [pc, #240]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f26:	688a      	ldr	r2, [r1, #8]
 8001f28:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8001f2c:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	071a      	lsls	r2, r3, #28
 8001f30:	d504      	bpl.n	8001f3c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f32:	4939      	ldr	r1, [pc, #228]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f34:	688a      	ldr	r2, [r1, #8]
 8001f36:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8001f3a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4936      	ldr	r1, [pc, #216]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f3e:	68a0      	ldr	r0, [r4, #8]
 8001f40:	688a      	ldr	r2, [r1, #8]
 8001f42:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001f46:	4302      	orrs	r2, r0
 8001f48:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	07df      	lsls	r7, r3, #31
 8001f4c:	d521      	bpl.n	8001f92 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	6862      	ldr	r2, [r4, #4]
 8001f50:	2a01      	cmp	r2, #1
 8001f52:	d057      	beq.n	8002004 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f54:	1e93      	subs	r3, r2, #2
 8001f56:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5c:	d94d      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	0799      	lsls	r1, r3, #30
 8001f60:	d5d8      	bpl.n	8001f14 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4e2d      	ldr	r6, [pc, #180]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f64:	68b3      	ldr	r3, [r6, #8]
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f6e:	f7ff fc35 	bl	80017dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001f76:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f78:	e004      	b.n	8001f84 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7a:	f7ff fc2f 	bl	80017dc <HAL_GetTick>
 8001f7e:	1bc0      	subs	r0, r0, r7
 8001f80:	4540      	cmp	r0, r8
 8001f82:	d844      	bhi.n	800200e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f84:	68b3      	ldr	r3, [r6, #8]
 8001f86:	6862      	ldr	r2, [r4, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f90:	d1f3      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f92:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <HAL_RCC_ClockConfig+0x128>)
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	42ab      	cmp	r3, r5
 8001f9c:	d906      	bls.n	8001fac <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	b2eb      	uxtb	r3, r5
 8001fa0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	42ab      	cmp	r3, r5
 8001faa:	d1b3      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	075a      	lsls	r2, r3, #29
 8001fb0:	d506      	bpl.n	8001fc0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb2:	4919      	ldr	r1, [pc, #100]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001fb4:	68e0      	ldr	r0, [r4, #12]
 8001fb6:	688a      	ldr	r2, [r1, #8]
 8001fb8:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8001fbc:	4302      	orrs	r2, r0
 8001fbe:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	071b      	lsls	r3, r3, #28
 8001fc2:	d507      	bpl.n	8001fd4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc4:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001fc6:	6921      	ldr	r1, [r4, #16]
 8001fc8:	6893      	ldr	r3, [r2, #8]
 8001fca:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001fce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fd2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd4:	f7ff ff56 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001fda:	4c10      	ldr	r4, [pc, #64]	@ (800201c <HAL_RCC_ClockConfig+0x130>)
 8001fdc:	6892      	ldr	r2, [r2, #8]
 8001fde:	4910      	ldr	r1, [pc, #64]	@ (8002020 <HAL_RCC_ClockConfig+0x134>)
 8001fe0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8001fe8:	480e      	ldr	r0, [pc, #56]	@ (8002024 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fea:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8001fec:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fee:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001ff0:	f7ff faee 	bl	80015d0 <HAL_InitTick>
  return HAL_OK;
 8001ff4:	2000      	movs	r0, #0
}
 8001ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	0198      	lsls	r0, r3, #6
 8001ffc:	d4b1      	bmi.n	8001f62 <HAL_RCC_ClockConfig+0x76>
 8001ffe:	e789      	b.n	8001f14 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
}
 8002002:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	039e      	lsls	r6, r3, #14
 800200a:	d4aa      	bmi.n	8001f62 <HAL_RCC_ClockConfig+0x76>
 800200c:	e782      	b.n	8001f14 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800200e:	2003      	movs	r0, #3
 8002010:	e781      	b.n	8001f16 <HAL_RCC_ClockConfig+0x2a>
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00
 8002018:	40023800 	.word	0x40023800
 800201c:	080085a4 	.word	0x080085a4
 8002020:	20000000 	.word	0x20000000
 8002024:	20000008 	.word	0x20000008

08002028 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800202a:	4905      	ldr	r1, [pc, #20]	@ (8002040 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002030:	6808      	ldr	r0, [r1, #0]
 8002032:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002036:	5cd3      	ldrb	r3, [r2, r3]
}
 8002038:	40d8      	lsrs	r0, r3
 800203a:	4770      	bx	lr
 800203c:	40023800 	.word	0x40023800
 8002040:	20000000 	.word	0x20000000
 8002044:	0800859c 	.word	0x0800859c

08002048 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002048:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800204a:	220f      	movs	r2, #15
{
 800204c:	b410      	push	{r4}
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800204e:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002050:	689a      	ldr	r2, [r3, #8]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002052:	4c0d      	ldr	r4, [pc, #52]	@ (8002088 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002054:	f002 0203 	and.w	r2, r2, #3
 8002058:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002060:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002068:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	08db      	lsrs	r3, r3, #3
 800206e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002072:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002074:	6823      	ldr	r3, [r4, #0]
}
 8002076:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	600b      	str	r3, [r1, #0]
}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40023c00 	.word	0x40023c00

0800208c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800208c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002090:	b083      	sub	sp, #12
 8002092:	461f      	mov	r7, r3
 8002094:	4614      	mov	r4, r2
 8002096:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8002098:	460d      	mov	r5, r1
 800209a:	4680      	mov	r8, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800209c:	f7ff fb9e 	bl	80017dc <HAL_GetTick>
 80020a0:	443e      	add	r6, r7
 80020a2:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 80020a4:	f7ff fb9a 	bl	80017dc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020a8:	4b2c      	ldr	r3, [pc, #176]	@ (800215c <SPI_WaitFlagStateUntilTimeout+0xd0>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f3c2 32cb 	ubfx	r2, r2, #15, #12
 80020b0:	fb06 f202 	mul.w	r2, r6, r2
  tmp_tickstart = HAL_GetTick();
 80020b4:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020b6:	9201      	str	r2, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020b8:	f8d8 2000 	ldr.w	r2, [r8]
 80020bc:	6893      	ldr	r3, [r2, #8]
 80020be:	ea35 0303 	bics.w	r3, r5, r3
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	42a3      	cmp	r3, r4
 80020ca:	d009      	beq.n	80020e0 <SPI_WaitFlagStateUntilTimeout+0x54>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020cc:	1c7b      	adds	r3, r7, #1
 80020ce:	d10b      	bne.n	80020e8 <SPI_WaitFlagStateUntilTimeout+0x5c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020d0:	6893      	ldr	r3, [r2, #8]
 80020d2:	ea35 0303 	bics.w	r3, r5, r3
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	429c      	cmp	r4, r3
 80020de:	d1f7      	bne.n	80020d0 <SPI_WaitFlagStateUntilTimeout+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 80020e0:	2000      	movs	r0, #0
}
 80020e2:	b003      	add	sp, #12
 80020e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020e8:	f7ff fb78 	bl	80017dc <HAL_GetTick>
 80020ec:	eba0 0009 	sub.w	r0, r0, r9
 80020f0:	42b0      	cmp	r0, r6
 80020f2:	d208      	bcs.n	8002106 <SPI_WaitFlagStateUntilTimeout+0x7a>
      if (count == 0U)
 80020f4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80020f6:	2b00      	cmp	r3, #0
      count--;
 80020f8:	9b01      	ldr	r3, [sp, #4]
 80020fa:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80020fe:	bf08      	it	eq
 8002100:	2600      	moveq	r6, #0
      count--;
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	e7d8      	b.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002106:	e9d8 3100 	ldrd	r3, r1, [r8]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800210a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800210c:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002110:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002114:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002116:	d014      	beq.n	8002142 <SPI_WaitFlagStateUntilTimeout+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002118:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 800211c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002120:	d107      	bne.n	8002132 <SPI_WaitFlagStateUntilTimeout+0xa6>
          SPI_RESET_CRC(hspi);
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002130:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002132:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8002134:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8002136:	f888 2051 	strb.w	r2, [r8, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800213a:	f888 3050 	strb.w	r3, [r8, #80]	@ 0x50
        return HAL_TIMEOUT;
 800213e:	2003      	movs	r0, #3
 8002140:	e7cf      	b.n	80020e2 <SPI_WaitFlagStateUntilTimeout+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002142:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8002146:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800214a:	d002      	beq.n	8002152 <SPI_WaitFlagStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800214c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002150:	d1e2      	bne.n	8002118 <SPI_WaitFlagStateUntilTimeout+0x8c>
          __HAL_SPI_DISABLE(hspi);
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e7dd      	b.n	8002118 <SPI_WaitFlagStateUntilTimeout+0x8c>
 800215c:	20000000 	.word	0x20000000

08002160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	460f      	mov	r7, r1
 8002168:	4690      	mov	r8, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800216a:	9200      	str	r2, [sp, #0]
 800216c:	460b      	mov	r3, r1
 800216e:	2201      	movs	r2, #1
 8002170:	2102      	movs	r1, #2
{
 8002172:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002174:	f7ff ff8a 	bl	800208c <SPI_WaitFlagStateUntilTimeout>
 8002178:	bb40      	cbnz	r0, 80021cc <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800217a:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <SPI_EndRxTxTransaction+0x80>)
 800217c:	681d      	ldr	r5, [r3, #0]
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <SPI_EndRxTxTransaction+0x84>)
 8002180:	fba3 3505 	umull	r3, r5, r3, r5
 8002184:	0d6d      	lsrs	r5, r5, #21
 8002186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800218a:	fb03 f505 	mul.w	r5, r3, r5
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800218e:	6863      	ldr	r3, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002190:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002192:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002196:	4606      	mov	r6, r0
 8002198:	d107      	bne.n	80021aa <SPI_EndRxTxTransaction+0x4a>
 800219a:	e00d      	b.n	80021b8 <SPI_EndRxTxTransaction+0x58>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800219c:	9b03      	ldr	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800219e:	6821      	ldr	r1, [r4, #0]
      count--;
 80021a0:	3b01      	subs	r3, #1
 80021a2:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80021a4:	688b      	ldr	r3, [r1, #8]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	d502      	bpl.n	80021b0 <SPI_EndRxTxTransaction+0x50>
      if (count == 0U)
 80021aa:	9b03      	ldr	r3, [sp, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f5      	bne.n	800219c <SPI_EndRxTxTransaction+0x3c>
  }

  return HAL_OK;
}
 80021b0:	4630      	mov	r0, r6
 80021b2:	b004      	add	sp, #16
 80021b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021b8:	4602      	mov	r2, r0
 80021ba:	f8cd 8000 	str.w	r8, [sp]
 80021be:	463b      	mov	r3, r7
 80021c0:	2180      	movs	r1, #128	@ 0x80
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff ff62 	bl	800208c <SPI_WaitFlagStateUntilTimeout>
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d0f1      	beq.n	80021b0 <SPI_EndRxTxTransaction+0x50>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021ce:	2603      	movs	r6, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021d0:	f043 0320 	orr.w	r3, r3, #32
}
 80021d4:	4630      	mov	r0, r6
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021d6:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80021d8:	b004      	add	sp, #16
 80021da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021de:	bf00      	nop
 80021e0:	20000000 	.word	0x20000000
 80021e4:	165e9f81 	.word	0x165e9f81

080021e8 <SPI_EndRxTransaction>:
{
 80021e8:	b530      	push	{r4, r5, lr}
 80021ea:	460b      	mov	r3, r1
 80021ec:	4611      	mov	r1, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ee:	6842      	ldr	r2, [r0, #4]
 80021f0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 80021f4:	b083      	sub	sp, #12
 80021f6:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f8:	d008      	beq.n	800220c <SPI_EndRxTransaction+0x24>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80021fa:	9100      	str	r1, [sp, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2101      	movs	r1, #1
 8002200:	f7ff ff44 	bl	800208c <SPI_WaitFlagStateUntilTimeout>
 8002204:	b988      	cbnz	r0, 800222a <SPI_EndRxTransaction+0x42>
  return HAL_OK;
 8002206:	2000      	movs	r0, #0
}
 8002208:	b003      	add	sp, #12
 800220a:	bd30      	pop	{r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800220c:	6882      	ldr	r2, [r0, #8]
 800220e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002212:	d01e      	beq.n	8002252 <SPI_EndRxTransaction+0x6a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002214:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002218:	d00e      	beq.n	8002238 <SPI_EndRxTransaction+0x50>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800221a:	9100      	str	r1, [sp, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	2180      	movs	r1, #128	@ 0x80
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff ff33 	bl	800208c <SPI_WaitFlagStateUntilTimeout>
 8002226:	2800      	cmp	r0, #0
 8002228:	d0ed      	beq.n	8002206 <SPI_EndRxTransaction+0x1e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800222a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 800222c:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800222e:	f043 0320 	orr.w	r3, r3, #32
 8002232:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8002234:	b003      	add	sp, #12
 8002236:	bd30      	pop	{r4, r5, pc}
    __HAL_SPI_DISABLE(hspi);
 8002238:	6805      	ldr	r5, [r0, #0]
 800223a:	682a      	ldr	r2, [r5, #0]
 800223c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002240:	602a      	str	r2, [r5, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002242:	9100      	str	r1, [sp, #0]
 8002244:	2200      	movs	r2, #0
 8002246:	2101      	movs	r1, #1
 8002248:	f7ff ff20 	bl	800208c <SPI_WaitFlagStateUntilTimeout>
 800224c:	2800      	cmp	r0, #0
 800224e:	d0da      	beq.n	8002206 <SPI_EndRxTransaction+0x1e>
 8002250:	e7eb      	b.n	800222a <SPI_EndRxTransaction+0x42>
    __HAL_SPI_DISABLE(hspi);
 8002252:	6800      	ldr	r0, [r0, #0]
 8002254:	6802      	ldr	r2, [r0, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800225a:	6002      	str	r2, [r0, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800225c:	e7dd      	b.n	800221a <SPI_EndRxTransaction+0x32>
 800225e:	bf00      	nop

08002260 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002260:	2800      	cmp	r0, #0
 8002262:	d05c      	beq.n	800231e <HAL_SPI_Init+0xbe>
{
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002268:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800226a:	2800      	cmp	r0, #0
 800226c:	d047      	beq.n	80022fe <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002274:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002278:	2200      	movs	r2, #0
 800227a:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800227c:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8002280:	2b00      	cmp	r3, #0
 8002282:	d042      	beq.n	800230a <HAL_SPI_Init+0xaa>
 8002284:	4694      	mov	ip, r2
  __HAL_SPI_DISABLE(hspi);
 8002286:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002288:	68a5      	ldr	r5, [r4, #8]
 800228a:	69a2      	ldr	r2, [r4, #24]
 800228c:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8002294:	680b      	ldr	r3, [r1, #0]
 8002296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800229a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	f405 4504 	and.w	r5, r5, #33792	@ 0x8400
 80022a2:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80022a6:	432b      	orrs	r3, r5
 80022a8:	68e5      	ldr	r5, [r4, #12]
 80022aa:	f405 6500 	and.w	r5, r5, #2048	@ 0x800
 80022ae:	432b      	orrs	r3, r5
 80022b0:	6925      	ldr	r5, [r4, #16]
 80022b2:	f005 0502 	and.w	r5, r5, #2
 80022b6:	432b      	orrs	r3, r5
 80022b8:	6965      	ldr	r5, [r4, #20]
 80022ba:	f005 0501 	and.w	r5, r5, #1
 80022be:	432b      	orrs	r3, r5
 80022c0:	69e5      	ldr	r5, [r4, #28]
 80022c2:	f006 0e80 	and.w	lr, r6, #128	@ 0x80
 80022c6:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 80022ca:	f005 0538 	and.w	r5, r5, #56	@ 0x38
 80022ce:	4333      	orrs	r3, r6
 80022d0:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022d2:	0c12      	lsrs	r2, r2, #16
 80022d4:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022d8:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022dc:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022e0:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022e4:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022e6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022e8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ea:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ec:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80022f2:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022f4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f6:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022f8:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
}
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002304:	d0b6      	beq.n	8002274 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002306:	61e0      	str	r0, [r4, #28]
 8002308:	e7b4      	b.n	8002274 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 800230a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800230c:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002310:	f7ff f922 	bl	8001558 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002314:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002318:	f403 5c00 	and.w	ip, r3, #8192	@ 0x2000
 800231c:	e7b3      	b.n	8002286 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 800231e:	2001      	movs	r0, #1
}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop

08002324 <HAL_SPI_Transmit>:
{
 8002324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002328:	4604      	mov	r4, r0
 800232a:	b082      	sub	sp, #8
 800232c:	461d      	mov	r5, r3
 800232e:	460f      	mov	r7, r1
 8002330:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8002332:	f7ff fa53 	bl	80017dc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002336:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800233a:	2b01      	cmp	r3, #1
 800233c:	d166      	bne.n	800240c <HAL_SPI_Transmit+0xe8>
  if ((pData == NULL) || (Size == 0U))
 800233e:	4606      	mov	r6, r0
 8002340:	b2d8      	uxtb	r0, r3
 8002342:	2f00      	cmp	r7, #0
 8002344:	d05f      	beq.n	8002406 <HAL_SPI_Transmit+0xe2>
 8002346:	f1b8 0f00 	cmp.w	r8, #0
 800234a:	d05c      	beq.n	8002406 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 800234c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002350:	2b01      	cmp	r3, #1
 8002352:	d05b      	beq.n	800240c <HAL_SPI_Transmit+0xe8>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002354:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hspi);
 8002356:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800235a:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800235c:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800235e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002362:	f884 1051 	strb.w	r1, [r4, #81]	@ 0x51
  hspi->RxISR       = NULL;
 8002366:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800236a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800236c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800236e:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002370:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002374:	6327      	str	r7, [r4, #48]	@ 0x30
  hspi->RxXferCount = 0U;
 8002376:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002378:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
    __HAL_SPI_DISABLE(hspi);
 800237c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800237e:	d107      	bne.n	8002390 <HAL_SPI_Transmit+0x6c>
    __HAL_SPI_DISABLE(hspi);
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002386:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800238e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	0652      	lsls	r2, r2, #25
 8002394:	d53e      	bpl.n	8002414 <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002396:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002398:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800239a:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800239e:	d042      	beq.n	8002426 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023a0:	2900      	cmp	r1, #0
 80023a2:	d161      	bne.n	8002468 <HAL_SPI_Transmit+0x144>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023a4:	783a      	ldrb	r2, [r7, #0]
 80023a6:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80023a8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80023ac:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ae:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80023b0:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023b2:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80023b4:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80023b6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	b993      	cbnz	r3, 80023e2 <HAL_SPI_Transmit+0xbe>
 80023bc:	e058      	b.n	8002470 <HAL_SPI_Transmit+0x14c>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023be:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80023c4:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80023ca:	f10c 3cff 	add.w	ip, ip, #4294967295
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ce:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 80023d0:	fa1f fc8c 	uxth.w	ip, ip
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023d4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80023d6:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80023da:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80023dc:	b289      	uxth	r1, r1
 80023de:	2900      	cmp	r1, #0
 80023e0:	d046      	beq.n	8002470 <HAL_SPI_Transmit+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	0792      	lsls	r2, r2, #30
 80023e8:	d4e9      	bmi.n	80023be <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ea:	f7ff f9f7 	bl	80017dc <HAL_GetTick>
 80023ee:	1b80      	subs	r0, r0, r6
 80023f0:	42a8      	cmp	r0, r5
 80023f2:	d3f2      	bcc.n	80023da <HAL_SPI_Transmit+0xb6>
 80023f4:	1c6b      	adds	r3, r5, #1
 80023f6:	d0f0      	beq.n	80023da <HAL_SPI_Transmit+0xb6>
          hspi->State = HAL_SPI_STATE_READY;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023fe:	2300      	movs	r3, #0
 8002400:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002404:	2003      	movs	r0, #3
}
 8002406:	b002      	add	sp, #8
 8002408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800240c:	2002      	movs	r0, #2
}
 800240e:	b002      	add	sp, #8
 8002410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8002414:	681a      	ldr	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002416:	6861      	ldr	r1, [r4, #4]
    __HAL_SPI_ENABLE(hspi);
 8002418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800241c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800241e:	68e2      	ldr	r2, [r4, #12]
 8002420:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8002424:	d1bc      	bne.n	80023a0 <HAL_SPI_Transmit+0x7c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002426:	2900      	cmp	r1, #0
 8002428:	d040      	beq.n	80024ac <HAL_SPI_Transmit+0x188>
 800242a:	f1b8 0f01 	cmp.w	r8, #1
 800242e:	d03d      	beq.n	80024ac <HAL_SPI_Transmit+0x188>
    while (hspi->TxXferCount > 0U)
 8002430:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002432:	b292      	uxth	r2, r2
 8002434:	b96a      	cbnz	r2, 8002452 <HAL_SPI_Transmit+0x12e>
 8002436:	e01b      	b.n	8002470 <HAL_SPI_Transmit+0x14c>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002438:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800243a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800243e:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8002440:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002442:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002444:	3b01      	subs	r3, #1
 8002446:	b29b      	uxth	r3, r3
 8002448:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800244a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	b17b      	cbz	r3, 8002470 <HAL_SPI_Transmit+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	0790      	lsls	r0, r2, #30
 8002456:	d4ef      	bmi.n	8002438 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002458:	f7ff f9c0 	bl	80017dc <HAL_GetTick>
 800245c:	1b80      	subs	r0, r0, r6
 800245e:	42a8      	cmp	r0, r5
 8002460:	d3f3      	bcc.n	800244a <HAL_SPI_Transmit+0x126>
 8002462:	1c69      	adds	r1, r5, #1
 8002464:	d0f1      	beq.n	800244a <HAL_SPI_Transmit+0x126>
 8002466:	e7c7      	b.n	80023f8 <HAL_SPI_Transmit+0xd4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002468:	f1b8 0f01 	cmp.w	r8, #1
 800246c:	d1a3      	bne.n	80023b6 <HAL_SPI_Transmit+0x92>
 800246e:	e799      	b.n	80023a4 <HAL_SPI_Transmit+0x80>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002470:	4632      	mov	r2, r6
 8002472:	4629      	mov	r1, r5
 8002474:	4620      	mov	r0, r4
 8002476:	f7ff fe73 	bl	8002160 <SPI_EndRxTxTransaction>
 800247a:	b108      	cbz	r0, 8002480 <HAL_SPI_Transmit+0x15c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800247c:	2320      	movs	r3, #32
 800247e:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002480:	68a3      	ldr	r3, [r4, #8]
 8002482:	b933      	cbnz	r3, 8002492 <HAL_SPI_Transmit+0x16e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002484:	6822      	ldr	r2, [r4, #0]
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	68d3      	ldr	r3, [r2, #12]
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	6893      	ldr	r3, [r2, #8]
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002492:	2301      	movs	r3, #1
 8002494:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002498:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 800249a:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800249c:	1ac0      	subs	r0, r0, r3
 800249e:	bf18      	it	ne
 80024a0:	2001      	movne	r0, #1
  __HAL_UNLOCK(hspi);
 80024a2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80024a6:	b002      	add	sp, #8
 80024a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024ac:	f837 2b02 	ldrh.w	r2, [r7], #2
 80024b0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80024b2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b4:	6327      	str	r7, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80024b6:	3a01      	subs	r2, #1
 80024b8:	b292      	uxth	r2, r2
 80024ba:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80024bc:	e7b8      	b.n	8002430 <HAL_SPI_Transmit+0x10c>
 80024be:	bf00      	nop

080024c0 <HAL_SPI_TransmitReceive>:
{
 80024c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024c4:	4604      	mov	r4, r0
 80024c6:	b083      	sub	sp, #12
 80024c8:	4691      	mov	r9, r2
 80024ca:	461f      	mov	r7, r3
 80024cc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80024ce:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 80024d0:	f7ff f984 	bl	80017dc <HAL_GetTick>
  tmp_state           = hspi->State;
 80024d4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 80024d8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024da:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80024dc:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024de:	d008      	beq.n	80024f2 <HAL_SPI_TransmitReceive+0x32>
 80024e0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80024e4:	d17c      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x120>
 80024e6:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024e8:	68a3      	ldr	r3, [r4, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d178      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x120>
 80024ee:	2904      	cmp	r1, #4
 80024f0:	d176      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x120>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024f2:	f1b8 0f00 	cmp.w	r8, #0
 80024f6:	f000 80df 	beq.w	80026b8 <HAL_SPI_TransmitReceive+0x1f8>
 80024fa:	f1b9 0f00 	cmp.w	r9, #0
 80024fe:	f000 80db 	beq.w	80026b8 <HAL_SPI_TransmitReceive+0x1f8>
 8002502:	2f00      	cmp	r7, #0
 8002504:	f000 80d8 	beq.w	80026b8 <HAL_SPI_TransmitReceive+0x1f8>
  __HAL_LOCK(hspi);
 8002508:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800250c:	2b01      	cmp	r3, #1
 800250e:	d067      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x120>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002510:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002514:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002518:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800251a:	bf1c      	itt	ne
 800251c:	2305      	movne	r3, #5
 800251e:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002522:	2300      	movs	r3, #0
 8002524:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_LOCK(hspi);
 8002526:	2101      	movs	r1, #1
  hspi->RxISR       = NULL;
 8002528:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800252c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800252e:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  __HAL_LOCK(hspi);
 8002530:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
  hspi->TxXferCount = Size;
 8002534:	86e7      	strh	r7, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002536:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8002538:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800253a:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800253c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002540:	86a7      	strh	r7, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002542:	d403      	bmi.n	800254c <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800254a:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800254c:	68e1      	ldr	r1, [r4, #12]
 800254e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8002552:	d049      	beq.n	80025e8 <HAL_SPI_TransmitReceive+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002554:	2a00      	cmp	r2, #0
 8002556:	f000 8085 	beq.w	8002664 <HAL_SPI_TransmitReceive+0x1a4>
 800255a:	2f01      	cmp	r7, #1
 800255c:	f000 8082 	beq.w	8002664 <HAL_SPI_TransmitReceive+0x1a4>
        txallowed = 1U;
 8002560:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002562:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	b923      	cbnz	r3, 8002572 <HAL_SPI_TransmitReceive+0xb2>
 8002568:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8084 	beq.w	800267a <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	6893      	ldr	r3, [r2, #8]
 8002576:	0799      	lsls	r1, r3, #30
 8002578:	d50f      	bpl.n	800259a <HAL_SPI_TransmitReceive+0xda>
 800257a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800257c:	b29b      	uxth	r3, r3
 800257e:	b163      	cbz	r3, 800259a <HAL_SPI_TransmitReceive+0xda>
 8002580:	b15f      	cbz	r7, 800259a <HAL_SPI_TransmitReceive+0xda>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002582:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8002588:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 800258a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800258c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800258e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8002590:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8002592:	6322      	str	r2, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002594:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8002596:	86e3      	strh	r3, [r4, #54]	@ 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002598:	2700      	movs	r7, #0
 800259a:	6893      	ldr	r3, [r2, #8]
 800259c:	f013 0301 	ands.w	r3, r3, #1
 80025a0:	d00d      	beq.n	80025be <HAL_SPI_TransmitReceive+0xfe>
 80025a2:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80025a4:	b289      	uxth	r1, r1
 80025a6:	b151      	cbz	r1, 80025be <HAL_SPI_TransmitReceive+0xfe>
        txallowed = 1U;
 80025a8:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025aa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025b2:	3301      	adds	r3, #1
 80025b4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80025b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025be:	f7ff f90d 	bl	80017dc <HAL_GetTick>
 80025c2:	1b40      	subs	r0, r0, r5
 80025c4:	42b0      	cmp	r0, r6
 80025c6:	d3cc      	bcc.n	8002562 <HAL_SPI_TransmitReceive+0xa2>
 80025c8:	1c73      	adds	r3, r6, #1
 80025ca:	d0ca      	beq.n	8002562 <HAL_SPI_TransmitReceive+0xa2>
        hspi->State = HAL_SPI_STATE_READY;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        return HAL_TIMEOUT;
 80025d2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80025d4:	2300      	movs	r3, #0
 80025d6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80025da:	b003      	add	sp, #12
 80025dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80025e0:	2002      	movs	r0, #2
}
 80025e2:	b003      	add	sp, #12
 80025e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e8:	2a00      	cmp	r2, #0
 80025ea:	d167      	bne.n	80026bc <HAL_SPI_TransmitReceive+0x1fc>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025ec:	4642      	mov	r2, r8
 80025ee:	f832 1b02 	ldrh.w	r1, [r2], #2
 80025f2:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 80025f4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f6:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80025fe:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002600:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002602:	b29b      	uxth	r3, r3
 8002604:	b91b      	cbnz	r3, 800260e <HAL_SPI_TransmitReceive+0x14e>
 8002606:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d035      	beq.n	800267a <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	6893      	ldr	r3, [r2, #8]
 8002612:	079b      	lsls	r3, r3, #30
 8002614:	d50d      	bpl.n	8002632 <HAL_SPI_TransmitReceive+0x172>
 8002616:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002618:	b29b      	uxth	r3, r3
 800261a:	b153      	cbz	r3, 8002632 <HAL_SPI_TransmitReceive+0x172>
 800261c:	b147      	cbz	r7, 8002630 <HAL_SPI_TransmitReceive+0x170>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800261e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002620:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002624:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002626:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002628:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800262a:	3b01      	subs	r3, #1
 800262c:	b29b      	uxth	r3, r3
 800262e:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8002630:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002632:	6893      	ldr	r3, [r2, #8]
 8002634:	f013 0301 	ands.w	r3, r3, #1
 8002638:	d00c      	beq.n	8002654 <HAL_SPI_TransmitReceive+0x194>
 800263a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800263c:	b289      	uxth	r1, r1
 800263e:	b149      	cbz	r1, 8002654 <HAL_SPI_TransmitReceive+0x194>
        txallowed = 1U;
 8002640:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002642:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800264a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800264c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800264e:	3b01      	subs	r3, #1
 8002650:	b29b      	uxth	r3, r3
 8002652:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002654:	f7ff f8c2 	bl	80017dc <HAL_GetTick>
 8002658:	1b40      	subs	r0, r0, r5
 800265a:	42b0      	cmp	r0, r6
 800265c:	d3d0      	bcc.n	8002600 <HAL_SPI_TransmitReceive+0x140>
 800265e:	1c70      	adds	r0, r6, #1
 8002660:	d0ce      	beq.n	8002600 <HAL_SPI_TransmitReceive+0x140>
 8002662:	e7b3      	b.n	80025cc <HAL_SPI_TransmitReceive+0x10c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002664:	f898 2000 	ldrb.w	r2, [r8]
 8002668:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800266a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800266c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800266e:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002670:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8002672:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002674:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002676:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8002678:	e772      	b.n	8002560 <HAL_SPI_TransmitReceive+0xa0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800267a:	462a      	mov	r2, r5
 800267c:	4631      	mov	r1, r6
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff fd6e 	bl	8002160 <SPI_EndRxTxTransaction>
 8002684:	b998      	cbnz	r0, 80026ae <HAL_SPI_TransmitReceive+0x1ee>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002686:	68a3      	ldr	r3, [r4, #8]
 8002688:	b933      	cbnz	r3, 8002698 <HAL_SPI_TransmitReceive+0x1d8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800268a:	6822      	ldr	r2, [r4, #0]
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	68d3      	ldr	r3, [r2, #12]
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	6893      	ldr	r3, [r2, #8]
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002698:	2301      	movs	r3, #1
 800269a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800269e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 80026a0:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026a2:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 80026a4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026a8:	bf18      	it	ne
 80026aa:	2001      	movne	r0, #1
 80026ac:	e799      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x122>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026ae:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 80026b0:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026b2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80026b4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80026b8:	2001      	movs	r0, #1
 80026ba:	e792      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x122>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026bc:	2f01      	cmp	r7, #1
 80026be:	d19e      	bne.n	80025fe <HAL_SPI_TransmitReceive+0x13e>
 80026c0:	e794      	b.n	80025ec <HAL_SPI_TransmitReceive+0x12c>
 80026c2:	bf00      	nop

080026c4 <HAL_SPI_Receive>:
{
 80026c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026c8:	461d      	mov	r5, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 80026ca:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 80026ce:	2b01      	cmp	r3, #1
{
 80026d0:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 80026d2:	d166      	bne.n	80027a2 <HAL_SPI_Receive+0xde>
 80026d4:	fa5f f883 	uxtb.w	r8, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026d8:	6843      	ldr	r3, [r0, #4]
 80026da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026de:	4604      	mov	r4, r0
 80026e0:	4617      	mov	r7, r2
 80026e2:	4689      	mov	r9, r1
 80026e4:	d103      	bne.n	80026ee <HAL_SPI_Receive+0x2a>
 80026e6:	6883      	ldr	r3, [r0, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a4 	beq.w	8002836 <HAL_SPI_Receive+0x172>
  tickstart = HAL_GetTick();
 80026ee:	f7ff f875 	bl	80017dc <HAL_GetTick>
 80026f2:	4606      	mov	r6, r0
  if ((pData == NULL) || (Size == 0U))
 80026f4:	f1b9 0f00 	cmp.w	r9, #0
 80026f8:	d04f      	beq.n	800279a <HAL_SPI_Receive+0xd6>
 80026fa:	2f00      	cmp	r7, #0
 80026fc:	d04d      	beq.n	800279a <HAL_SPI_Receive+0xd6>
  __HAL_LOCK(hspi);
 80026fe:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002702:	2b01      	cmp	r3, #1
 8002704:	d04d      	beq.n	80027a2 <HAL_SPI_Receive+0xde>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002706:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8002708:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800270a:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  __HAL_LOCK(hspi);
 800270e:	2001      	movs	r0, #1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002710:	2300      	movs	r3, #0
  __HAL_LOCK(hspi);
 8002712:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002716:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800271a:	f04f 0004 	mov.w	r0, #4
 800271e:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
  hspi->RxISR       = NULL;
 8002722:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002726:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxXferSize  = Size;
 8002728:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800272a:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800272c:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800272e:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002730:	86e3      	strh	r3, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002732:	d077      	beq.n	8002824 <HAL_SPI_Receive+0x160>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002734:	680b      	ldr	r3, [r1, #0]
 8002736:	065f      	lsls	r7, r3, #25
 8002738:	d403      	bmi.n	8002742 <HAL_SPI_Receive+0x7e>
    __HAL_SPI_ENABLE(hspi);
 800273a:	680b      	ldr	r3, [r1, #0]
 800273c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002740:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002742:	68e3      	ldr	r3, [r4, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d132      	bne.n	80027ae <HAL_SPI_Receive+0xea>
    while (hspi->RxXferCount > 0U)
 8002748:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800274a:	b29b      	uxth	r3, r3
 800274c:	b99b      	cbnz	r3, 8002776 <HAL_SPI_Receive+0xb2>
 800274e:	e051      	b.n	80027f4 <HAL_SPI_Receive+0x130>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002750:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002752:	7b0a      	ldrb	r2, [r1, #12]
 8002754:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002756:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800275a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800275c:	f10c 3cff 	add.w	ip, ip, #4294967295
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002760:	3301      	adds	r3, #1
        hspi->RxXferCount--;
 8002762:	fa1f fc8c 	uxth.w	ip, ip
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002766:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002768:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800276c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d03f      	beq.n	80027f4 <HAL_SPI_Receive+0x130>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002774:	6821      	ldr	r1, [r4, #0]
 8002776:	688b      	ldr	r3, [r1, #8]
 8002778:	07d8      	lsls	r0, r3, #31
 800277a:	d4e9      	bmi.n	8002750 <HAL_SPI_Receive+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800277c:	f7ff f82e 	bl	80017dc <HAL_GetTick>
 8002780:	1b80      	subs	r0, r0, r6
 8002782:	42a8      	cmp	r0, r5
 8002784:	d3f2      	bcc.n	800276c <HAL_SPI_Receive+0xa8>
 8002786:	1c69      	adds	r1, r5, #1
 8002788:	d0f0      	beq.n	800276c <HAL_SPI_Receive+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 800278a:	2301      	movs	r3, #1
 800278c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002790:	2300      	movs	r3, #0
 8002792:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002796:	f04f 0803 	mov.w	r8, #3
}
 800279a:	4640      	mov	r0, r8
 800279c:	b003      	add	sp, #12
 800279e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80027a2:	f04f 0802 	mov.w	r8, #2
}
 80027a6:	4640      	mov	r0, r8
 80027a8:	b003      	add	sp, #12
 80027aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (hspi->RxXferCount > 0U)
 80027ae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	b98b      	cbnz	r3, 80027d8 <HAL_SPI_Receive+0x114>
 80027b4:	e01e      	b.n	80027f4 <HAL_SPI_Receive+0x130>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027b6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80027b8:	68ca      	ldr	r2, [r1, #12]
 80027ba:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 80027be:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027c2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80027c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80027c8:	fa1f fc8c 	uxth.w	ip, ip
 80027cc:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80027d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b173      	cbz	r3, 80027f4 <HAL_SPI_Receive+0x130>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027d6:	6821      	ldr	r1, [r4, #0]
 80027d8:	688b      	ldr	r3, [r1, #8]
 80027da:	07da      	lsls	r2, r3, #31
 80027dc:	d4eb      	bmi.n	80027b6 <HAL_SPI_Receive+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027de:	f7fe fffd 	bl	80017dc <HAL_GetTick>
 80027e2:	1b80      	subs	r0, r0, r6
 80027e4:	42a8      	cmp	r0, r5
 80027e6:	d3f3      	bcc.n	80027d0 <HAL_SPI_Receive+0x10c>
 80027e8:	1c6b      	adds	r3, r5, #1
 80027ea:	d1ce      	bne.n	800278a <HAL_SPI_Receive+0xc6>
    while (hspi->RxXferCount > 0U)
 80027ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_SPI_Receive+0x112>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f4:	4632      	mov	r2, r6
 80027f6:	4629      	mov	r1, r5
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff fcf5 	bl	80021e8 <SPI_EndRxTransaction>
 80027fe:	b108      	cbz	r0, 8002804 <HAL_SPI_Receive+0x140>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002800:	2320      	movs	r3, #32
 8002802:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002804:	2301      	movs	r3, #1
 8002806:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800280a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 800280c:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800280e:	ebb0 0803 	subs.w	r8, r0, r3
 8002812:	bf18      	it	ne
 8002814:	f04f 0801 	movne.w	r8, #1
}
 8002818:	4640      	mov	r0, r8
  __HAL_UNLOCK(hspi);
 800281a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800281e:	b003      	add	sp, #12
 8002820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_SPI_DISABLE(hspi);
 8002824:	680b      	ldr	r3, [r1, #0]
 8002826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800282a:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 800282c:	680b      	ldr	r3, [r1, #0]
 800282e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e77e      	b.n	8002734 <HAL_SPI_Receive+0x70>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002836:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002838:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800283a:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800283c:	f880 5051 	strb.w	r5, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002840:	460a      	mov	r2, r1
 8002842:	f7ff fe3d 	bl	80024c0 <HAL_SPI_TransmitReceive>
 8002846:	4680      	mov	r8, r0
 8002848:	e7a7      	b.n	800279a <HAL_SPI_Receive+0xd6>
 800284a:	bf00      	nop

0800284c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop

08002850 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002854:	2b01      	cmp	r3, #1
 8002856:	d127      	bne.n	80028a8 <HAL_TIM_Base_Start_IT+0x58>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002858:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285a:	4914      	ldr	r1, [pc, #80]	@ (80028ac <HAL_TIM_Base_Start_IT+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	2202      	movs	r2, #2
 800285e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002862:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002864:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286c:	d011      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x42>
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002872:	d00e      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x42>
 8002874:	4a0e      	ldr	r2, [pc, #56]	@ (80028b0 <HAL_TIM_Base_Start_IT+0x60>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00b      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x42>
 800287a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x42>
 8002882:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x42>
 800288a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800288e:	4293      	cmp	r3, r2
 8002890:	d104      	bne.n	800289c <HAL_TIM_Base_Start_IT+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002898:	2a06      	cmp	r2, #6
 800289a:	d003      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80028a4:	2000      	movs	r0, #0
 80028a6:	4770      	bx	lr
    return HAL_ERROR;
 80028a8:	2001      	movs	r0, #1
}
 80028aa:	4770      	bx	lr
 80028ac:	40010000 	.word	0x40010000
 80028b0:	40000400 	.word	0x40000400

080028b4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop

080028b8 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop

080028bc <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop

080028c4 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80028c4:	6803      	ldr	r3, [r0, #0]
{
 80028c6:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80028c8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028ca:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028cc:	07a9      	lsls	r1, r5, #30
{
 80028ce:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028d0:	d501      	bpl.n	80028d6 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028d2:	07b2      	lsls	r2, r6, #30
 80028d4:	d451      	bmi.n	800297a <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028d6:	0769      	lsls	r1, r5, #29
 80028d8:	d501      	bpl.n	80028de <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028da:	0772      	lsls	r2, r6, #29
 80028dc:	d43a      	bmi.n	8002954 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028de:	072b      	lsls	r3, r5, #28
 80028e0:	d501      	bpl.n	80028e6 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028e2:	0730      	lsls	r0, r6, #28
 80028e4:	d424      	bmi.n	8002930 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028e6:	06ea      	lsls	r2, r5, #27
 80028e8:	d501      	bpl.n	80028ee <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028ea:	06f3      	lsls	r3, r6, #27
 80028ec:	d410      	bmi.n	8002910 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028ee:	07e8      	lsls	r0, r5, #31
 80028f0:	d501      	bpl.n	80028f6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028f2:	07f1      	lsls	r1, r6, #31
 80028f4:	d457      	bmi.n	80029a6 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028f6:	062a      	lsls	r2, r5, #24
 80028f8:	d501      	bpl.n	80028fe <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028fa:	0633      	lsls	r3, r6, #24
 80028fc:	d45b      	bmi.n	80029b6 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028fe:	0668      	lsls	r0, r5, #25
 8002900:	d501      	bpl.n	8002906 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002902:	0671      	lsls	r1, r6, #25
 8002904:	d45f      	bmi.n	80029c6 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002906:	06aa      	lsls	r2, r5, #26
 8002908:	d501      	bpl.n	800290e <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800290a:	06b3      	lsls	r3, r6, #26
 800290c:	d442      	bmi.n	8002994 <HAL_TIM_IRQHandler+0xd0>
}
 800290e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	f06f 0210 	mvn.w	r2, #16
 8002916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002918:	2208      	movs	r2, #8
 800291a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002924:	d063      	beq.n	80029ee <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	f7ff ffc7 	bl	80028b8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	2300      	movs	r3, #0
 800292c:	7723      	strb	r3, [r4, #28]
 800292e:	e7de      	b.n	80028ee <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	f06f 0208 	mvn.w	r2, #8
 8002936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002938:	2204      	movs	r2, #4
 800293a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002940:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002942:	d151      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002944:	f7ff ffb6 	bl	80028b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff ffb7 	bl	80028bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	2300      	movs	r3, #0
 8002950:	7723      	strb	r3, [r4, #28]
 8002952:	e7c8      	b.n	80028e6 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	f06f 0204 	mvn.w	r2, #4
 800295a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295c:	2202      	movs	r2, #2
 800295e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002966:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	d13b      	bne.n	80029e2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	f7ff ffa3 	bl	80028b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff ffa4 	bl	80028bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002974:	2300      	movs	r3, #0
 8002976:	7723      	strb	r3, [r4, #28]
 8002978:	e7b1      	b.n	80028de <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800297a:	f06f 0202 	mvn.w	r2, #2
 800297e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002980:	2201      	movs	r2, #1
 8002982:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	079b      	lsls	r3, r3, #30
 8002988:	d025      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800298a:	f7ff ff95 	bl	80028b8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	2300      	movs	r3, #0
 8002990:	7723      	strb	r3, [r4, #28]
 8002992:	e7a0      	b.n	80028d6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800299a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800299c:	611a      	str	r2, [r3, #16]
}
 800299e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80029a2:	f000 b8ab 	b.w	8002afc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	f06f 0201 	mvn.w	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7fe fbdc 	bl	800116c <HAL_TIM_PeriodElapsedCallback>
 80029b4:	e79f      	b.n	80028f6 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80029be:	4620      	mov	r0, r4
 80029c0:	f000 f89e 	bl	8002b00 <HAL_TIMEx_BreakCallback>
 80029c4:	e79b      	b.n	80028fe <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80029ce:	4620      	mov	r0, r4
 80029d0:	f7ff ff76 	bl	80028c0 <HAL_TIM_TriggerCallback>
 80029d4:	e797      	b.n	8002906 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	f7ff ff6d 	bl	80028b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff ff6e 	bl	80028bc <HAL_TIM_PWM_PulseFinishedCallback>
 80029e0:	e7d5      	b.n	800298e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	f7ff ff69 	bl	80028b8 <HAL_TIM_IC_CaptureCallback>
 80029e6:	e7c5      	b.n	8002974 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 80029e8:	f7ff ff66 	bl	80028b8 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e7af      	b.n	800294e <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	f7ff ff61 	bl	80028b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7ff ff62 	bl	80028bc <HAL_TIM_PWM_PulseFinishedCallback>
 80029f8:	e797      	b.n	800292a <HAL_TIM_IRQHandler+0x66>
 80029fa:	bf00      	nop

080029fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029fc:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029fe:	4e26      	ldr	r6, [pc, #152]	@ (8002a98 <TIM_Base_SetConfig+0x9c>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a00:	680a      	ldr	r2, [r1, #0]
  tmpcr1 = TIMx->CR1;
 8002a02:	6803      	ldr	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a04:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a06:	694d      	ldr	r5, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a08:	42b0      	cmp	r0, r6
 8002a0a:	d033      	beq.n	8002a74 <TIM_Base_SetConfig+0x78>
 8002a0c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002a10:	d017      	beq.n	8002a42 <TIM_Base_SetConfig+0x46>
 8002a12:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8002a16:	42b0      	cmp	r0, r6
 8002a18:	d013      	beq.n	8002a42 <TIM_Base_SetConfig+0x46>
 8002a1a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002a1e:	42b0      	cmp	r0, r6
 8002a20:	d00f      	beq.n	8002a42 <TIM_Base_SetConfig+0x46>
 8002a22:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002a26:	42b0      	cmp	r0, r6
 8002a28:	d00b      	beq.n	8002a42 <TIM_Base_SetConfig+0x46>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2a:	4e1c      	ldr	r6, [pc, #112]	@ (8002a9c <TIM_Base_SetConfig+0xa0>)
 8002a2c:	42b0      	cmp	r0, r6
 8002a2e:	d00c      	beq.n	8002a4a <TIM_Base_SetConfig+0x4e>
 8002a30:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002a34:	42b0      	cmp	r0, r6
 8002a36:	d008      	beq.n	8002a4a <TIM_Base_SetConfig+0x4e>
 8002a38:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002a3c:	42b0      	cmp	r0, r6
 8002a3e:	d108      	bne.n	8002a52 <TIM_Base_SetConfig+0x56>
 8002a40:	e003      	b.n	8002a4a <TIM_Base_SetConfig+0x4e>
    tmpcr1 |= Structure->CounterMode;
 8002a42:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a48:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a4a:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a50:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a56:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002a58:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5a:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a5c:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a62:	6903      	ldr	r3, [r0, #16]
 8002a64:	07db      	lsls	r3, r3, #31
 8002a66:	d503      	bpl.n	8002a70 <TIM_Base_SetConfig+0x74>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a68:	6903      	ldr	r3, [r0, #16]
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6103      	str	r3, [r0, #16]
  }
}
 8002a70:	bc70      	pop	{r4, r5, r6}
 8002a72:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002a74:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a7a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7c:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a82:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a88:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002a8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a8c:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a8e:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002a90:	690b      	ldr	r3, [r1, #16]
 8002a92:	6303      	str	r3, [r0, #48]	@ 0x30
 8002a94:	e7e3      	b.n	8002a5e <TIM_Base_SetConfig+0x62>
 8002a96:	bf00      	nop
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40014000 	.word	0x40014000

08002aa0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002aa0:	b350      	cbz	r0, 8002af8 <HAL_TIM_Base_Init+0x58>
{
 8002aa2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002aae:	b1f3      	cbz	r3, 8002aee <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab8:	f851 0b04 	ldr.w	r0, [r1], #4
 8002abc:	f7ff ff9e 	bl	80029fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002aca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002ace:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002ad2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ade:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002ae2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002ae6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002aea:	2000      	movs	r0, #0
}
 8002aec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002aee:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002af2:	f7ff feab 	bl	800284c <HAL_TIM_Base_MspInit>
 8002af6:	e7db      	b.n	8002ab0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002af8:	2001      	movs	r0, #1
}
 8002afa:	4770      	bx	lr

08002afc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop

08002b00 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <MPU9250_ReadData>:
	return MPU9250_RESULT_OK;
}

// <---- ------------ MPU9250 Read Data ------------ ---->
MPU9250_Result MPU9250_ReadData(SPI_HandleTypeDef* SPIx, uint8_t* buffer, uint8_t addr, uint8_t num)
{
 8002b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg = addr | 0x80;
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8002b08:	4f16      	ldr	r7, [pc, #88]	@ (8002b64 <MPU9250_ReadData+0x60>)
 8002b0a:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8002b68 <MPU9250_ReadData+0x64>
{
 8002b0e:	b082      	sub	sp, #8
	uint8_t reg = addr | 0x80;
 8002b10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
{
 8002b14:	4604      	mov	r4, r0
 8002b16:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8002b18:	f8d8 0000 	ldr.w	r0, [r8]
 8002b1c:	8839      	ldrh	r1, [r7, #0]
	uint8_t reg = addr | 0x80;
 8002b1e:	f88d 2007 	strb.w	r2, [sp, #7]
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8002b22:	2200      	movs	r2, #0
{
 8002b24:	461e      	mov	r6, r3
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8002b26:	f7fe ffbd 	bl	8001aa4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002b2a:	2014      	movs	r0, #20
 8002b2c:	f7fe fe5c 	bl	80017e8 <HAL_Delay>
	HAL_SPI_Transmit(SPIx, &reg, 1, 1000);
 8002b30:	f10d 0107 	add.w	r1, sp, #7
 8002b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff fbf2 	bl	8002324 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPIx, buffer, num, 1000);
 8002b40:	4632      	mov	r2, r6
 8002b42:	4629      	mov	r1, r5
 8002b44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7ff fdbb 	bl	80026c4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8002b4e:	f8d8 0000 	ldr.w	r0, [r8]
 8002b52:	8839      	ldrh	r1, [r7, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f7fe ffa5 	bl	8001aa4 <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
}
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	b002      	add	sp, #8
 8002b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b62:	bf00      	nop
 8002b64:	20000674 	.word	0x20000674
 8002b68:	20000670 	.word	0x20000670

08002b6c <MPU9250_WriteData>:

// <---- ------------ MPU9250 Write Data ------------ ---->
MPU9250_Result MPU9250_WriteData(SPI_HandleTypeDef* SPIx, uint8_t addr, uint8_t data)
{
 8002b6c:	b570      	push	{r4, r5, r6, lr}
	uint8_t buffer[2] = {addr, data};
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8002b6e:	4e0f      	ldr	r6, [pc, #60]	@ (8002bac <MPU9250_WriteData+0x40>)
 8002b70:	4d0f      	ldr	r5, [pc, #60]	@ (8002bb0 <MPU9250_WriteData+0x44>)
{
 8002b72:	b082      	sub	sp, #8
 8002b74:	4604      	mov	r4, r0
	uint8_t buffer[2] = {addr, data};
 8002b76:	f88d 1004 	strb.w	r1, [sp, #4]
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8002b7a:	6828      	ldr	r0, [r5, #0]
 8002b7c:	8831      	ldrh	r1, [r6, #0]
	uint8_t buffer[2] = {addr, data};
 8002b7e:	f88d 2005 	strb.w	r2, [sp, #5]
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8002b82:	2200      	movs	r2, #0
 8002b84:	f7fe ff8e 	bl	8001aa4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002b88:	2014      	movs	r0, #20
 8002b8a:	f7fe fe2d 	bl	80017e8 <HAL_Delay>
	HAL_SPI_Transmit(SPIx, buffer, 2, 1000);
 8002b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b92:	a901      	add	r1, sp, #4
 8002b94:	2202      	movs	r2, #2
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff fbc4 	bl	8002324 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8002b9c:	6828      	ldr	r0, [r5, #0]
 8002b9e:	8831      	ldrh	r1, [r6, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f7fe ff7f 	bl	8001aa4 <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
}
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	20000674 	.word	0x20000674
 8002bb0:	20000670 	.word	0x20000670

08002bb4 <MPU9250_Init>:
{
 8002bb4:	b530      	push	{r4, r5, lr}
 8002bb6:	461d      	mov	r5, r3
	_CS_GPIO = CS_GPIOx;
 8002bb8:	4b69      	ldr	r3, [pc, #420]	@ (8002d60 <MPU9250_Init+0x1ac>)
{
 8002bba:	b083      	sub	sp, #12
	_CS_GPIO = CS_GPIOx;
 8002bbc:	6019      	str	r1, [r3, #0]
	_CS_PinNumber = CS_PinNumber;
 8002bbe:	4b69      	ldr	r3, [pc, #420]	@ (8002d64 <MPU9250_Init+0x1b0>)
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002bc0:	216b      	movs	r1, #107	@ 0x6b
	_CS_PinNumber = CS_PinNumber;
 8002bc2:	801a      	strh	r2, [r3, #0]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002bc4:	2201      	movs	r2, #1
{
 8002bc6:	4604      	mov	r4, r0
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002bc8:	f7ff ffd0 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002bcc:	2019      	movs	r0, #25
 8002bce:	f000 fd3b 	bl	8003648 <osDelay>
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	216a      	movs	r1, #106	@ 0x6a
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f7ff ffc8 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002bdc:	2019      	movs	r0, #25
 8002bde:	f000 fd33 	bl	8003648 <osDelay>
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002be2:	220d      	movs	r2, #13
 8002be4:	2124      	movs	r1, #36	@ 0x24
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7ff ffc0 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002bec:	2019      	movs	r0, #25
 8002bee:	f000 fd2b 	bl	8003648 <osDelay>
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002bf2:	2280      	movs	r2, #128	@ 0x80
 8002bf4:	216b      	movs	r1, #107	@ 0x6b
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7ff ffb8 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002bfc:	2019      	movs	r0, #25
 8002bfe:	f000 fd23 	bl	8003648 <osDelay>
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002c02:	782a      	ldrb	r2, [r5, #0]
 8002c04:	216b      	movs	r1, #107	@ 0x6b
 8002c06:	4620      	mov	r0, r4
 8002c08:	f7ff ffb0 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002c0c:	2019      	movs	r0, #25
 8002c0e:	f000 fd1b 	bl	8003648 <osDelay>
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_1, 1);
 8002c12:	2301      	movs	r3, #1
 8002c14:	226b      	movs	r2, #107	@ 0x6b
 8002c16:	f10d 0107 	add.w	r1, sp, #7
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f7ff ff72 	bl	8002b04 <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT1)
 8002c20:	782a      	ldrb	r2, [r5, #0]
 8002c22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d005      	beq.n	8002c36 <MPU9250_Init+0x82>
		printf("Error: PWR_MGMT1");
 8002c2a:	484f      	ldr	r0, [pc, #316]	@ (8002d68 <MPU9250_Init+0x1b4>)
 8002c2c:	f002 fa0a 	bl	8005044 <iprintf>
		return MPU9250_RESULT_ERROR;
 8002c30:	2001      	movs	r0, #1
}
 8002c32:	b003      	add	sp, #12
 8002c34:	bd30      	pop	{r4, r5, pc}
	MPU9250_ReadData(SPIx, &temp, WHO_AM_I, 1);
 8002c36:	2301      	movs	r3, #1
 8002c38:	2275      	movs	r2, #117	@ 0x75
 8002c3a:	f10d 0107 	add.w	r1, sp, #7
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff ff60 	bl	8002b04 <MPU9250_ReadData>
	if(temp != MPU9250_I_AM)
 8002c44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c48:	2b71      	cmp	r3, #113	@ 0x71
 8002c4a:	d003      	beq.n	8002c54 <MPU9250_Init+0xa0>
		printf("Error: MPU9250_I_AM");
 8002c4c:	4847      	ldr	r0, [pc, #284]	@ (8002d6c <MPU9250_Init+0x1b8>)
 8002c4e:	f002 f9f9 	bl	8005044 <iprintf>
 		return MPU9250_RESULT_ERROR;
 8002c52:	e7ed      	b.n	8002c30 <MPU9250_Init+0x7c>
	osDelay(25);
 8002c54:	2019      	movs	r0, #25
 8002c56:	f000 fcf7 	bl	8003648 <osDelay>
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002c5a:	786a      	ldrb	r2, [r5, #1]
 8002c5c:	216c      	movs	r1, #108	@ 0x6c
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff ff84 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002c64:	2019      	movs	r0, #25
 8002c66:	f000 fcef 	bl	8003648 <osDelay>
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_2, 1);
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	226c      	movs	r2, #108	@ 0x6c
 8002c6e:	f10d 0107 	add.w	r1, sp, #7
 8002c72:	4620      	mov	r0, r4
 8002c74:	f7ff ff46 	bl	8002b04 <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT2)
 8002c78:	786a      	ldrb	r2, [r5, #1]
 8002c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d117      	bne.n	8002cb2 <MPU9250_Init+0xfe>
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002c82:	78aa      	ldrb	r2, [r5, #2]
 8002c84:	211a      	movs	r1, #26
 8002c86:	4620      	mov	r0, r4
 8002c88:	f7ff ff70 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002c8c:	2019      	movs	r0, #25
 8002c8e:	f000 fcdb 	bl	8003648 <osDelay>
	MPU9250_ReadData(SPIx, &temp, MPU9250_CONFIG, 1);
 8002c92:	2301      	movs	r3, #1
 8002c94:	221a      	movs	r2, #26
 8002c96:	f10d 0107 	add.w	r1, sp, #7
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7ff ff32 	bl	8002b04 <MPU9250_ReadData>
	if(temp != datastruct->Gyro_DLPF)
 8002ca0:	78aa      	ldrb	r2, [r5, #2]
 8002ca2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d007      	beq.n	8002cba <MPU9250_Init+0x106>
		printf("Error: Gyro_DLPF");
 8002caa:	4831      	ldr	r0, [pc, #196]	@ (8002d70 <MPU9250_Init+0x1bc>)
 8002cac:	f002 f9ca 	bl	8005044 <iprintf>
		return MPU9250_RESULT_ERROR;
 8002cb0:	e7be      	b.n	8002c30 <MPU9250_Init+0x7c>
		printf("Error: PWR_MGMT2");
 8002cb2:	4830      	ldr	r0, [pc, #192]	@ (8002d74 <MPU9250_Init+0x1c0>)
 8002cb4:	f002 f9c6 	bl	8005044 <iprintf>
		return MPU9250_RESULT_ERROR;
 8002cb8:	e7ba      	b.n	8002c30 <MPU9250_Init+0x7c>
	transmit_buffer[1] = (datastruct->Gyro_Range) << 3;
 8002cba:	792a      	ldrb	r2, [r5, #4]
 8002cbc:	00d2      	lsls	r2, r2, #3
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002cbe:	211b      	movs	r1, #27
 8002cc0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f7ff ff51 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002cca:	2019      	movs	r0, #25
 8002ccc:	f000 fcbc 	bl	8003648 <osDelay>
	MPU9250_ReadData(SPIx, &temp, MPU9250_GYRO_CONFIG, 1);
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	221b      	movs	r2, #27
 8002cd4:	f10d 0107 	add.w	r1, sp, #7
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff ff13 	bl	8002b04 <MPU9250_ReadData>
	if(temp != ((datastruct->Gyro_Range) << 3))
 8002cde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ce2:	792a      	ldrb	r2, [r5, #4]
 8002ce4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002ce8:	d117      	bne.n	8002d1a <MPU9250_Init+0x166>
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002cea:	78ea      	ldrb	r2, [r5, #3]
 8002cec:	211d      	movs	r1, #29
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7ff ff3c 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002cf4:	2019      	movs	r0, #25
 8002cf6:	f000 fca7 	bl	8003648 <osDelay>
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG_2, 1);
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	221d      	movs	r2, #29
 8002cfe:	f10d 0107 	add.w	r1, sp, #7
 8002d02:	4620      	mov	r0, r4
 8002d04:	f7ff fefe 	bl	8002b04 <MPU9250_ReadData>
	if(temp != datastruct->Accel_DLPF)
 8002d08:	78ea      	ldrb	r2, [r5, #3]
 8002d0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d007      	beq.n	8002d22 <MPU9250_Init+0x16e>
		printf("Error: Accel_DLPF");
 8002d12:	4819      	ldr	r0, [pc, #100]	@ (8002d78 <MPU9250_Init+0x1c4>)
 8002d14:	f002 f996 	bl	8005044 <iprintf>
		return MPU9250_RESULT_ERROR;
 8002d18:	e78a      	b.n	8002c30 <MPU9250_Init+0x7c>
		printf("Error: Gyro_Range");
 8002d1a:	4818      	ldr	r0, [pc, #96]	@ (8002d7c <MPU9250_Init+0x1c8>)
 8002d1c:	f002 f992 	bl	8005044 <iprintf>
		return MPU9250_RESULT_ERROR;
 8002d20:	e786      	b.n	8002c30 <MPU9250_Init+0x7c>
	transmit_buffer[1] = (datastruct->Accel_Range) << 3;
 8002d22:	796a      	ldrb	r2, [r5, #5]
 8002d24:	00d2      	lsls	r2, r2, #3
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8002d26:	211c      	movs	r1, #28
 8002d28:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff ff1d 	bl	8002b6c <MPU9250_WriteData>
	osDelay(25);
 8002d32:	2019      	movs	r0, #25
 8002d34:	f000 fc88 	bl	8003648 <osDelay>
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG, 1);
 8002d38:	2301      	movs	r3, #1
 8002d3a:	221c      	movs	r2, #28
 8002d3c:	f10d 0107 	add.w	r1, sp, #7
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff fedf 	bl	8002b04 <MPU9250_ReadData>
	if(temp != ((datastruct->Accel_Range) << 3))
 8002d46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d4a:	796a      	ldrb	r2, [r5, #5]
 8002d4c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002d50:	d101      	bne.n	8002d56 <MPU9250_Init+0x1a2>
	return MPU9250_RESULT_OK;
 8002d52:	2000      	movs	r0, #0
 8002d54:	e76d      	b.n	8002c32 <MPU9250_Init+0x7e>
		printf("Error: Accel_Range");
 8002d56:	480a      	ldr	r0, [pc, #40]	@ (8002d80 <MPU9250_Init+0x1cc>)
 8002d58:	f002 f974 	bl	8005044 <iprintf>
		return MPU9250_RESULT_ERROR;
 8002d5c:	e768      	b.n	8002c30 <MPU9250_Init+0x7c>
 8002d5e:	bf00      	nop
 8002d60:	20000670 	.word	0x20000670
 8002d64:	20000674 	.word	0x20000674
 8002d68:	080084e4 	.word	0x080084e4
 8002d6c:	080084f8 	.word	0x080084f8
 8002d70:	08008520 	.word	0x08008520
 8002d74:	0800850c 	.word	0x0800850c
 8002d78:	08008548 	.word	0x08008548
 8002d7c:	08008534 	.word	0x08008534
 8002d80:	0800855c 	.word	0x0800855c

08002d84 <kalman_init>:
#include "cmsis_os.h"
#endif


void kalman_init(KalmanFilter *kf)
{
 8002d84:	b510      	push	{r4, lr}
    memset(kf, 0, sizeof(KalmanFilter));
 8002d86:	22e0      	movs	r2, #224	@ 0xe0
{
 8002d88:	4604      	mov	r4, r0
    memset(kf, 0, sizeof(KalmanFilter));
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	3004      	adds	r0, #4
 8002d8e:	f002 f9ae 	bl	80050ee <memset>

    kf->C[0][0] = 1.0f;
 8002d92:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d96:	6023      	str	r3, [r4, #0]
    kf->C[0][1] = 0.0f;
    kf->C[0][2] = 0.0f;
    kf->C[0][3] = 0.0f;
    kf->C[1][0] = 0.0f;
    kf->C[1][1] = 0.0f;
    kf->C[1][2] = 1.0f;
 8002d98:	61a3      	str	r3, [r4, #24]
    kf->C[1][3] = 0.0f;

    for(uint8_t i = 0; i < 4; i++)
    {
        kf->P[i][i] = 1.0f;
 8002d9a:	6223      	str	r3, [r4, #32]
        kf->Q[i][i] = 1.0f;
 8002d9c:	6623      	str	r3, [r4, #96]	@ 0x60
        kf->P[i][i] = 1.0f;
 8002d9e:	6363      	str	r3, [r4, #52]	@ 0x34
        kf->Q[i][i] = 1.0f;
 8002da0:	6763      	str	r3, [r4, #116]	@ 0x74
        kf->P[i][i] = 1.0f;
 8002da2:	64a3      	str	r3, [r4, #72]	@ 0x48
        kf->Q[i][i] = 1.0f;
 8002da4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        kf->P[i][i] = 1.0f;
 8002da8:	65e3      	str	r3, [r4, #92]	@ 0x5c
        kf->Q[i][i] = 1.0f;
 8002daa:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
    }

    for(uint8_t i = 0; i < 2; i++)
    	kf->R[i][i] = 1.0f;
 8002dae:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
 8002db2:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
    kf->phi_offset = 0.0f;
    kf->theta_offset = 0.0f;
    kf->calibrated = 0;
    kf->yaw_hat = 0.0f;

    kf->last_tick = HAL_GetTick();
 8002db6:	f7fe fd11 	bl	80017dc <HAL_GetTick>
 8002dba:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
}
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <kalman_calibrate>:

// Calibration: average offsets
void kalman_calibrate(KalmanFilter *kf, float phi_acc_samples, float theta_acc_samples, int N)
{
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	ed2d 8b04 	vpush	{d8-d9}
    float phi_sum = 0, theta_sum = 0;

    for(uint8_t i = 0; i < N; i++)
 8002dc6:	1e0d      	subs	r5, r1, #0
{
 8002dc8:	b082      	sub	sp, #8
 8002dca:	4606      	mov	r6, r0
    for(uint8_t i = 0; i < N; i++)
 8002dcc:	dd39      	ble.n	8002e42 <kalman_calibrate+0x82>
    float phi_sum = 0, theta_sum = 0;
 8002dce:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8002e4c <kalman_calibrate+0x8c>
 8002dd2:	eeb0 9a40 	vmov.f32	s18, s0
 8002dd6:	eef0 9a60 	vmov.f32	s19, s1
    for(uint8_t i = 0; i < N; i++)
 8002dda:	2400      	movs	r4, #0
    float phi_sum = 0, theta_sum = 0;
 8002ddc:	eef0 8a48 	vmov.f32	s17, s16
    for(uint8_t i = 0; i < N; i++)
 8002de0:	3401      	adds	r4, #1
    {
        phi_sum   += phi_acc_samples;
        theta_sum += theta_acc_samples;
#if FreeRTOS_En
	osDelay(10);
 8002de2:	200a      	movs	r0, #10
    for(uint8_t i = 0; i < N; i++)
 8002de4:	b2e4      	uxtb	r4, r4
	osDelay(10);
 8002de6:	f000 fc2f 	bl	8003648 <osDelay>
    for(uint8_t i = 0; i < N; i++)
 8002dea:	42ac      	cmp	r4, r5
        phi_sum   += phi_acc_samples;
 8002dec:	ee78 8a89 	vadd.f32	s17, s17, s18
        theta_sum += theta_acc_samples;
 8002df0:	ee38 8a29 	vadd.f32	s16, s16, s19
    for(uint8_t i = 0; i < N; i++)
 8002df4:	dbf4      	blt.n	8002de0 <kalman_calibrate+0x20>
#else
	HAL_Delay(10);
#endif
    }

    kf->phi_offset   = phi_sum / (float)N;
 8002df6:	ee07 5a90 	vmov	s15, r5
 8002dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    kf->theta_offset = theta_sum / (float)N;
    kf->calibrated = 1;
 8002dfe:	2301      	movs	r3, #1
    kf->phi_offset   = phi_sum / (float)N;
 8002e00:	ee88 7aa7 	vdiv.f32	s14, s17, s15
    kf->calibrated = 1;
 8002e04:	f886 30d4 	strb.w	r3, [r6, #212]	@ 0xd4
    kf->theta_offset = theta_sum / (float)N;
 8002e08:	eec8 8a27 	vdiv.f32	s17, s16, s15
#if Debug
    printf("Accelerometer offsets: %.2f, %.2f \n", kf->phi_offset, kf->theta_offset);
 8002e0c:	ee17 0a10 	vmov	r0, s14
    kf->phi_offset   = phi_sum / (float)N;
 8002e10:	ed86 7a32 	vstr	s14, [r6, #200]	@ 0xc8
    kf->theta_offset = theta_sum / (float)N;
 8002e14:	edc6 8a33 	vstr	s17, [r6, #204]	@ 0xcc
    printf("Accelerometer offsets: %.2f, %.2f \n", kf->phi_offset, kf->theta_offset);
 8002e18:	f7fd fb9e 	bl	8000558 <__aeabi_f2d>
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	ee18 0a90 	vmov	r0, s17
 8002e22:	460d      	mov	r5, r1
 8002e24:	f7fd fb98 	bl	8000558 <__aeabi_f2d>
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	e9cd 2300 	strd	r2, r3, [sp]
 8002e30:	4807      	ldr	r0, [pc, #28]	@ (8002e50 <kalman_calibrate+0x90>)
 8002e32:	4622      	mov	r2, r4
 8002e34:	462b      	mov	r3, r5
 8002e36:	f002 f905 	bl	8005044 <iprintf>
#endif
}
 8002e3a:	b002      	add	sp, #8
 8002e3c:	ecbd 8b04 	vpop	{d8-d9}
 8002e40:	bd70      	pop	{r4, r5, r6, pc}
    float phi_sum = 0, theta_sum = 0;
 8002e42:	ed9f 8a02 	vldr	s16, [pc, #8]	@ 8002e4c <kalman_calibrate+0x8c>
 8002e46:	eef0 8a48 	vmov.f32	s17, s16
 8002e4a:	e7d4      	b.n	8002df6 <kalman_calibrate+0x36>
 8002e4c:	00000000 	.word	0x00000000
 8002e50:	08008570 	.word	0x08008570

08002e54 <Get_AccelAngles>:
    if(kf->yaw_hat < -M_PI)
    	kf->yaw_hat += 2 * M_PI;
}

void Get_AccelAngles(float ax, float ay, float az, float* phi, float* theta)
{
 8002e54:	b538      	push	{r3, r4, r5, lr}
 8002e56:	ed2d 8b06 	vpush	{d8-d10}
 8002e5a:	eeb0 8a41 	vmov.f32	s16, s2
    *phi = atan2(ay, sqrt(ax * ax + az * az));
 8002e5e:	ee28 8a08 	vmul.f32	s16, s16, s16
{
 8002e62:	4605      	mov	r5, r0
    *phi = atan2(ay, sqrt(ax * ax + az * az));
 8002e64:	ee10 0a90 	vmov	r0, s1
{
 8002e68:	eeb0 9a40 	vmov.f32	s18, s0
 8002e6c:	eef0 8a60 	vmov.f32	s17, s1
 8002e70:	460c      	mov	r4, r1
    *phi = atan2(ay, sqrt(ax * ax + az * az));
 8002e72:	f7fd fb71 	bl	8000558 <__aeabi_f2d>
 8002e76:	eef0 7a48 	vmov.f32	s15, s16
 8002e7a:	eee9 7a09 	vfma.f32	s15, s18, s18
 8002e7e:	ec41 0b1a 	vmov	d10, r0, r1
 8002e82:	ee17 0a90 	vmov	r0, s15
 8002e86:	f7fd fb67 	bl	8000558 <__aeabi_f2d>
 8002e8a:	ec41 0b10 	vmov	d0, r0, r1
 8002e8e:	f004 f8b5 	bl	8006ffc <sqrt>
 8002e92:	eeb0 1a40 	vmov.f32	s2, s0
 8002e96:	eef0 1a60 	vmov.f32	s3, s1
 8002e9a:	eeb0 0a4a 	vmov.f32	s0, s20
 8002e9e:	eef0 0a6a 	vmov.f32	s1, s21
 8002ea2:	f004 f8a9 	bl	8006ff8 <atan2>
 8002ea6:	ec51 0b10 	vmov	r0, r1, d0
 8002eaa:	f7fd fe85 	bl	8000bb8 <__aeabi_d2f>
    *theta = atan2(-ax, sqrt(ay * ay + az * az));
 8002eae:	eef1 7a49 	vneg.f32	s15, s18
    *phi = atan2(ay, sqrt(ax * ax + az * az));
 8002eb2:	4603      	mov	r3, r0
    *theta = atan2(-ax, sqrt(ay * ay + az * az));
 8002eb4:	eea8 8aa8 	vfma.f32	s16, s17, s17
    *phi = atan2(ay, sqrt(ax * ax + az * az));
 8002eb8:	602b      	str	r3, [r5, #0]
    *theta = atan2(-ax, sqrt(ay * ay + az * az));
 8002eba:	ee17 0a90 	vmov	r0, s15
 8002ebe:	f7fd fb4b 	bl	8000558 <__aeabi_f2d>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	ee18 0a10 	vmov	r0, s16
 8002eca:	ec43 2b18 	vmov	d8, r2, r3
 8002ece:	f7fd fb43 	bl	8000558 <__aeabi_f2d>
 8002ed2:	ec41 0b10 	vmov	d0, r0, r1
 8002ed6:	f004 f891 	bl	8006ffc <sqrt>
 8002eda:	eeb0 1a40 	vmov.f32	s2, s0
 8002ede:	eef0 1a60 	vmov.f32	s3, s1
 8002ee2:	eeb0 0a48 	vmov.f32	s0, s16
 8002ee6:	eef0 0a68 	vmov.f32	s1, s17
 8002eea:	f004 f885 	bl	8006ff8 <atan2>
 8002eee:	ec51 0b10 	vmov	r0, r1, d0
 8002ef2:	f7fd fe61 	bl	8000bb8 <__aeabi_d2f>
}
 8002ef6:	ecbd 8b06 	vpop	{d8-d10}
    *theta = atan2(-ax, sqrt(ay * ay + az * az));
 8002efa:	6020      	str	r0, [r4, #0]
}
 8002efc:	bd38      	pop	{r3, r4, r5, pc}
 8002efe:	bf00      	nop

08002f00 <kalman_update>:
	if(!kf->calibrated)
 8002f00:	f890 30d4 	ldrb.w	r3, [r0, #212]	@ 0xd4
 8002f04:	b903      	cbnz	r3, 8002f08 <kalman_update+0x8>
 8002f06:	4770      	bx	lr
{
 8002f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0c:	ed2d 8b0c 	vpush	{d8-d13}
 8002f10:	4604      	mov	r4, r0
 8002f12:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8002f16:	eeb0 8a43 	vmov.f32	s16, s6
 8002f1a:	eef0 8a61 	vmov.f32	s17, s3
 8002f1e:	eeb0 9a42 	vmov.f32	s18, s4
 8002f22:	eef0 9a62 	vmov.f32	s19, s5
 8002f26:	eef0 aa60 	vmov.f32	s21, s1
 8002f2a:	eef0 ca41 	vmov.f32	s25, s2
 8002f2e:	eeb0 aa40 	vmov.f32	s20, s0
	kf->current_tick = HAL_GetTick();
 8002f32:	f7fe fc53 	bl	80017dc <HAL_GetTick>
	kf->dt = (kf->current_tick - kf->last_tick) / 1000.0f;
 8002f36:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8002f3a:	eddf 6acf 	vldr	s13, [pc, #828]	@ 8003278 <kalman_update+0x378>
 8002f3e:	1ac3      	subs	r3, r0, r3
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
    Get_AccelAngles(AX, AY, AZ, &phi_acc, &theta_acc);
 8002f48:	eeb0 1a69 	vmov.f32	s2, s19
	kf->dt = (kf->current_tick - kf->last_tick) / 1000.0f;
 8002f4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    Get_AccelAngles(AX, AY, AZ, &phi_acc, &theta_acc);
 8002f50:	a903      	add	r1, sp, #12
	kf->last_tick = kf->current_tick;
 8002f52:	e9c4 0036 	strd	r0, r0, [r4, #216]	@ 0xd8
    Get_AccelAngles(AX, AY, AZ, &phi_acc, &theta_acc);
 8002f56:	a802      	add	r0, sp, #8
    float A[4][4] =
 8002f58:	ae34      	add	r6, sp, #208	@ 0xd0
 8002f5a:	af04      	add	r7, sp, #16
 8002f5c:	f104 05b0 	add.w	r5, r4, #176	@ 0xb0
 8002f60:	f104 08c0 	add.w	r8, r4, #192	@ 0xc0
    Get_AccelAngles(AX, AY, AZ, &phi_acc, &theta_acc);
 8002f64:	eef0 0a49 	vmov.f32	s1, s18
 8002f68:	eeb0 0a68 	vmov.f32	s0, s17
	kf->dt = (kf->current_tick - kf->last_tick) / 1000.0f;
 8002f6c:	ed84 7a38 	vstr	s14, [r4, #224]	@ 0xe0
    Get_AccelAngles(AX, AY, AZ, &phi_acc, &theta_acc);
 8002f70:	f7ff ff70 	bl	8002e54 <Get_AccelAngles>
    phi_acc -= kf->phi_offset;
 8002f74:	ed94 7a32 	vldr	s14, [r4, #200]	@ 0xc8
    theta_acc -= kf->theta_offset;
 8002f78:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
    phi_acc -= kf->phi_offset;
 8002f7c:	eddd 9a02 	vldr	s19, [sp, #8]
    theta_acc -= kf->theta_offset;
 8002f80:	ed9d 9a03 	vldr	s18, [sp, #12]
    float phi_dot   = GX + sinf(kf->phi_hat) * tanf(kf->theta_hat) * GY + cosf(kf->phi_hat) * tanf(kf->theta_hat) * GZ;
 8002f84:	ed94 ba30 	vldr	s22, [r4, #192]	@ 0xc0
    phi_acc -= kf->phi_offset;
 8002f88:	ee79 9ac7 	vsub.f32	s19, s19, s14
    theta_acc -= kf->theta_offset;
 8002f8c:	ee39 9a67 	vsub.f32	s18, s18, s15
    float phi_dot   = GX + sinf(kf->phi_hat) * tanf(kf->theta_hat) * GY + cosf(kf->phi_hat) * tanf(kf->theta_hat) * GZ;
 8002f90:	eeb0 0a4b 	vmov.f32	s0, s22
    phi_acc -= kf->phi_offset;
 8002f94:	edcd 9a02 	vstr	s19, [sp, #8]
    theta_acc -= kf->theta_offset;
 8002f98:	ed8d 9a03 	vstr	s18, [sp, #12]
    float phi_dot   = GX + sinf(kf->phi_hat) * tanf(kf->theta_hat) * GY + cosf(kf->phi_hat) * tanf(kf->theta_hat) * GZ;
 8002f9c:	f004 f89e 	bl	80070dc <sinf>
 8002fa0:	ed94 da31 	vldr	s26, [r4, #196]	@ 0xc4
 8002fa4:	eef0 ba40 	vmov.f32	s23, s0
 8002fa8:	eeb0 0a4d 	vmov.f32	s0, s26
 8002fac:	f004 f8dc 	bl	8007168 <tanf>
 8002fb0:	eef0 8a40 	vmov.f32	s17, s0
 8002fb4:	ee6b 7aa8 	vmul.f32	s15, s23, s17
 8002fb8:	eeb0 0a4b 	vmov.f32	s0, s22
 8002fbc:	eea7 aaaa 	vfma.f32	s20, s15, s21
 8002fc0:	f004 f848 	bl	8007054 <cosf>
 8002fc4:	ee68 8a80 	vmul.f32	s17, s17, s0
 8002fc8:	eeb0 ca40 	vmov.f32	s24, s0
    float yaw_dot = (sinf(kf->phi_hat) / cosf(kf->theta_hat)) * GY + (cosf(kf->phi_hat) / cosf(kf->theta_hat)) * GZ;
 8002fcc:	eeb0 0a4d 	vmov.f32	s0, s26
 8002fd0:	f004 f840 	bl	8007054 <cosf>
    float phi_dot   = GX + sinf(kf->phi_hat) * tanf(kf->theta_hat) * GY + cosf(kf->phi_hat) * tanf(kf->theta_hat) * GZ;
 8002fd4:	eea8 aaac 	vfma.f32	s20, s17, s25
    float A[4][4] =
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
    float yaw_dot = (sinf(kf->phi_hat) / cosf(kf->theta_hat)) * GY + (cosf(kf->phi_hat) / cosf(kf->theta_hat)) * GZ;
 8002fde:	eecc 8a00 	vdiv.f32	s17, s24, s0
    float A[4][4] =
 8002fe2:	6032      	str	r2, [r6, #0]
 8002fe4:	60b3      	str	r3, [r6, #8]
 8002fe6:	60f3      	str	r3, [r6, #12]
 8002fe8:	6133      	str	r3, [r6, #16]
 8002fea:	6172      	str	r2, [r6, #20]
 8002fec:	61b3      	str	r3, [r6, #24]
 8002fee:	61f3      	str	r3, [r6, #28]
 8002ff0:	6233      	str	r3, [r6, #32]
 8002ff2:	6273      	str	r3, [r6, #36]	@ 0x24
 8002ff4:	62b2      	str	r2, [r6, #40]	@ 0x28
 8002ff6:	6333      	str	r3, [r6, #48]	@ 0x30
 8002ff8:	6373      	str	r3, [r6, #52]	@ 0x34
 8002ffa:	63b3      	str	r3, [r6, #56]	@ 0x38
    float yaw_dot = (sinf(kf->phi_hat) / cosf(kf->theta_hat)) * GY + (cosf(kf->phi_hat) / cosf(kf->theta_hat)) * GZ;
 8002ffc:	ee8b 7a80 	vdiv.f32	s14, s23, s0
    float A[4][4] =
 8003000:	63f2      	str	r2, [r6, #60]	@ 0x3c
    float B[4][2] =
 8003002:	930d      	str	r3, [sp, #52]	@ 0x34
 8003004:	930e      	str	r3, [sp, #56]	@ 0x38
 8003006:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003008:	9310      	str	r3, [sp, #64]	@ 0x40
 800300a:	a90c      	add	r1, sp, #48	@ 0x30
 800300c:	4630      	mov	r0, r6
    float theta_dot = cosf(kf->phi_hat) * GY - sinf(kf->phi_hat) * GZ;
 800300e:	ee2c baeb 	vnmul.f32	s22, s25, s23
    float yaw_dot = (sinf(kf->phi_hat) / cosf(kf->theta_hat)) * GY + (cosf(kf->phi_hat) / cosf(kf->theta_hat)) * GZ;
 8003012:	ee68 8aac 	vmul.f32	s17, s17, s25
    float theta_dot = cosf(kf->phi_hat) * GY - sinf(kf->phi_hat) * GZ;
 8003016:	eeac ba2a 	vfma.f32	s22, s24, s21
    float yaw_dot = (sinf(kf->phi_hat) / cosf(kf->theta_hat)) * GY + (cosf(kf->phi_hat) / cosf(kf->theta_hat)) * GZ;
 800301a:	eee7 8a2a 	vfma.f32	s17, s14, s21
        {1, -dt, 0,  0},
 800301e:	eef1 7a48 	vneg.f32	s15, s16
    float A[4][4] =
 8003022:	edc6 7a01 	vstr	s15, [r6, #4]
 8003026:	edc6 7a0b 	vstr	s15, [r6, #44]	@ 0x2c
    float B[4][2] =
 800302a:	ed8d 8a0c 	vstr	s16, [sp, #48]	@ 0x30
 800302e:	ed8d 8a11 	vstr	s16, [sp, #68]	@ 0x44
 8003032:	9312      	str	r3, [sp, #72]	@ 0x48
 8003034:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003036:	eddf 7a91 	vldr	s15, [pc, #580]	@ 800327c <kalman_update+0x37c>
 800303a:	46a9      	mov	r9, r5
 800303c:	462b      	mov	r3, r5
 800303e:	4602      	mov	r2, r0
        	new_state[i] += A[i][j] * kf->state_estimate[j];
 8003040:	ecb3 7a01 	vldmia	r3!, {s14}
 8003044:	ecf2 6a01 	vldmia	r2!, {s13}
        for(uint8_t j = 0; j < 4; j++)
 8003048:	4543      	cmp	r3, r8
        	new_state[i] += A[i][j] * kf->state_estimate[j];
 800304a:	eee6 7a87 	vfma.f32	s15, s13, s14
        for(uint8_t j = 0; j < 4; j++)
 800304e:	d1f7      	bne.n	8003040 <kalman_update+0x140>
        	new_state[i] += B[i][j] * gyro_input[j];
 8003050:	edd1 6a00 	vldr	s13, [r1]
 8003054:	ed91 7a01 	vldr	s14, [r1, #4]
 8003058:	eeea 7a26 	vfma.f32	s15, s20, s13
    for(uint8_t i = 0; i < 4; i++)
 800305c:	3108      	adds	r1, #8
 800305e:	ab14      	add	r3, sp, #80	@ 0x50
 8003060:	4299      	cmp	r1, r3
        	new_state[i] += B[i][j] * gyro_input[j];
 8003062:	eeeb 7a07 	vfma.f32	s15, s22, s14
    for(uint8_t i = 0; i < 4; i++)
 8003066:	f100 0010 	add.w	r0, r0, #16
        	new_state[i] += B[i][j] * gyro_input[j];
 800306a:	ece7 7a01 	vstmia	r7!, {s15}
    for(uint8_t i = 0; i < 4; i++)
 800306e:	d1e2      	bne.n	8003036 <kalman_update+0x136>
    memcpy(kf->state_estimate, new_state, sizeof(new_state));
 8003070:	af04      	add	r7, sp, #16
 8003072:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003074:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 8003078:	6069      	str	r1, [r5, #4]
 800307a:	60aa      	str	r2, [r5, #8]
 800307c:	60eb      	str	r3, [r5, #12]
    float AP[4][4] = {0};
 800307e:	2240      	movs	r2, #64	@ 0x40
 8003080:	2100      	movs	r1, #0
 8003082:	a844      	add	r0, sp, #272	@ 0x110
 8003084:	f002 f833 	bl	80050ee <memset>
    for(uint8_t i = 0; i < 4; i++)
 8003088:	af44      	add	r7, sp, #272	@ 0x110
 800308a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800308e:	f106 0a40 	add.w	sl, r6, #64	@ 0x40
    float AP[4][4] = {0};
 8003092:	463b      	mov	r3, r7
 8003094:	46b4      	mov	ip, r6
 8003096:	9201      	str	r2, [sp, #4]
 8003098:	f104 0550 	add.w	r5, r4, #80	@ 0x50
    float B[4][2] =
 800309c:	4610      	mov	r0, r2
 800309e:	469e      	mov	lr, r3
            for(uint8_t k = 0; k < 4; k++)
 80030a0:	ecfe 7a01 	vldmia	lr!, {s15}
 80030a4:	f1a0 0140 	sub.w	r1, r0, #64	@ 0x40
    float B[4][2] =
 80030a8:	46e3      	mov	fp, ip
                AP[i][j] += A[i][k] * kf->P[k][j];
 80030aa:	ed91 7a08 	vldr	s14, [r1, #32]
 80030ae:	ecfb 6a01 	vldmia	fp!, {s13}
            for(uint8_t k = 0; k < 4; k++)
 80030b2:	3110      	adds	r1, #16
 80030b4:	4281      	cmp	r1, r0
                AP[i][j] += A[i][k] * kf->P[k][j];
 80030b6:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(uint8_t k = 0; k < 4; k++)
 80030ba:	d1f6      	bne.n	80030aa <kalman_update+0x1aa>
        for(uint8_t j = 0; j < 4; j++)
 80030bc:	1d08      	adds	r0, r1, #4
 80030be:	42a8      	cmp	r0, r5
 80030c0:	ed4e 7a01 	vstr	s15, [lr, #-4]
 80030c4:	d1ec      	bne.n	80030a0 <kalman_update+0x1a0>
    for(uint8_t i = 0; i < 4; i++)
 80030c6:	f10c 0c10 	add.w	ip, ip, #16
 80030ca:	45d4      	cmp	ip, sl
 80030cc:	f103 0310 	add.w	r3, r3, #16
 80030d0:	d1e4      	bne.n	800309c <kalman_update+0x19c>
    float APA_T[4][4] = {0};
 80030d2:	2100      	movs	r1, #0
 80030d4:	2240      	movs	r2, #64	@ 0x40
 80030d6:	a854      	add	r0, sp, #336	@ 0x150
 80030d8:	f002 f809 	bl	80050ee <memset>
    for(uint8_t i = 0; i < 4; i++)
 80030dc:	ab54      	add	r3, sp, #336	@ 0x150
 80030de:	a948      	add	r1, sp, #288	@ 0x120
 80030e0:	469b      	mov	fp, r3
    float APA_T[4][4] = {0};
 80030e2:	469e      	mov	lr, r3
 80030e4:	f8cd 9000 	str.w	r9, [sp]
    float AP[4][4] = {0};
 80030e8:	46b4      	mov	ip, r6
 80030ea:	46f1      	mov	r9, lr
            for(uint8_t k = 0; k < 4; k++)
 80030ec:	ecf9 7a01 	vldmia	r9!, {s15}
    float AP[4][4] = {0};
 80030f0:	4660      	mov	r0, ip
 80030f2:	463a      	mov	r2, r7
                APA_T[i][j] += AP[i][k] * A[j][k]; // A * P * A^T
 80030f4:	ecf2 6a01 	vldmia	r2!, {s13}
 80030f8:	ecb0 7a01 	vldmia	r0!, {s14}
            for(uint8_t k = 0; k < 4; k++)
 80030fc:	428a      	cmp	r2, r1
                APA_T[i][j] += AP[i][k] * A[j][k]; // A * P * A^T
 80030fe:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(uint8_t k = 0; k < 4; k++)
 8003102:	d1f7      	bne.n	80030f4 <kalman_update+0x1f4>
        for(uint8_t j = 0; j < 4; j++)
 8003104:	f10c 0c10 	add.w	ip, ip, #16
 8003108:	45d4      	cmp	ip, sl
 800310a:	ed49 7a01 	vstr	s15, [r9, #-4]
 800310e:	d1ed      	bne.n	80030ec <kalman_update+0x1ec>
    for(uint8_t i = 0; i < 4; i++)
 8003110:	3710      	adds	r7, #16
 8003112:	455f      	cmp	r7, fp
 8003114:	f102 0110 	add.w	r1, r2, #16
 8003118:	f10e 0e10 	add.w	lr, lr, #16
 800311c:	d1e4      	bne.n	80030e8 <kalman_update+0x1e8>
 800311e:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
 8003122:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 8003126:	f8dd 9000 	ldr.w	r9, [sp]
 800312a:	9700      	str	r7, [sp, #0]
 800312c:	4650      	mov	r0, sl
        for(uint8_t j = 0; j < 4; j++)
 800312e:	f1a0 0210 	sub.w	r2, r0, #16
    float APA_T[4][4] = {0};
 8003132:	4619      	mov	r1, r3
            kf->P[i][j] = APA_T[i][j] + kf->Q[i][j];
 8003134:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8003138:	ecb1 7a01 	vldmia	r1!, {s14}
 800313c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003140:	ece2 7a01 	vstmia	r2!, {s15}
        for(uint8_t j = 0; j < 4; j++)
 8003144:	4282      	cmp	r2, r0
 8003146:	d1f5      	bne.n	8003134 <kalman_update+0x234>
    for(uint8_t i = 0; i < 4; i++)
 8003148:	f102 0010 	add.w	r0, r2, #16
 800314c:	42b8      	cmp	r0, r7
 800314e:	f103 0310 	add.w	r3, r3, #16
 8003152:	d1ec      	bne.n	800312e <kalman_update+0x22e>
    float Cx[2] = {0, 0};
 8003154:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800327c <kalman_update+0x37c>
 8003158:	f104 0710 	add.w	r7, r4, #16
    for(uint8_t i = 0; i < 4; i++)
 800315c:	4623      	mov	r3, r4
            Cx[i] += kf->C[i][j] * kf->state_estimate[j];
 800315e:	ecf3 6a01 	vldmia	r3!, {s13}
 8003162:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
        for(uint8_t j = 0; j < 4; j++)
 8003166:	42bb      	cmp	r3, r7
            Cx[i] += kf->C[i][j] * kf->state_estimate[j];
 8003168:	eea6 7aa7 	vfma.f32	s14, s13, s15
        for(uint8_t j = 0; j < 4; j++)
 800316c:	d1f7      	bne.n	800315e <kalman_update+0x25e>
    float Cx[2] = {0, 0};
 800316e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800327c <kalman_update+0x37c>
 8003172:	f104 0b20 	add.w	fp, r4, #32
        for(uint8_t j = 0; j < 4; j++)
 8003176:	463b      	mov	r3, r7
            Cx[i] += kf->C[i][j] * kf->state_estimate[j];
 8003178:	ecb3 6a01 	vldmia	r3!, {s12}
 800317c:	edd3 6a27 	vldr	s13, [r3, #156]	@ 0x9c
        for(uint8_t j = 0; j < 4; j++)
 8003180:	455b      	cmp	r3, fp
            Cx[i] += kf->C[i][j] * kf->state_estimate[j];
 8003182:	eee6 7a26 	vfma.f32	s15, s12, s13
        for(uint8_t j = 0; j < 4; j++)
 8003186:	d1f7      	bne.n	8003178 <kalman_update+0x278>
    float CP[2][4] = {0};
 8003188:	2220      	movs	r2, #32
 800318a:	2100      	movs	r1, #0
 800318c:	a814      	add	r0, sp, #80	@ 0x50
        y_tilde[i] = measurement[i] - Cx[i];
 800318e:	ee79 9ac7 	vsub.f32	s19, s19, s14
 8003192:	ee39 9a67 	vsub.f32	s18, s18, s15
    float CP[2][4] = {0};
 8003196:	f001 ffaa 	bl	80050ee <memset>
        for(uint8_t j = 0; j < 4; j++)
 800319a:	aa14      	add	r2, sp, #80	@ 0x50
    float CP[2][4] = {0};
 800319c:	4621      	mov	r1, r4
 800319e:	4610      	mov	r0, r2
            for(uint8_t k = 0; k < 4; k++)
 80031a0:	ecf0 7a01 	vldmia	r0!, {s15}
    float CP[2][4] = {0};
 80031a4:	468c      	mov	ip, r1
 80031a6:	4623      	mov	r3, r4
                CP[i][j] += kf->C[i][k] * kf->P[k][j];
 80031a8:	ecb3 7a01 	vldmia	r3!, {s14}
 80031ac:	eddc 6a08 	vldr	s13, [ip, #32]
            for(uint8_t k = 0; k < 4; k++)
 80031b0:	42bb      	cmp	r3, r7
                CP[i][j] += kf->C[i][k] * kf->P[k][j];
 80031b2:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(uint8_t k = 0; k < 4; k++)
 80031b6:	f10c 0c10 	add.w	ip, ip, #16
 80031ba:	d1f5      	bne.n	80031a8 <kalman_update+0x2a8>
        for(uint8_t j = 0; j < 4; j++)
 80031bc:	3104      	adds	r1, #4
 80031be:	42b9      	cmp	r1, r7
 80031c0:	ed40 7a01 	vstr	s15, [r0, #-4]
 80031c4:	d1ec      	bne.n	80031a0 <kalman_update+0x2a0>
 80031c6:	a818      	add	r0, sp, #96	@ 0x60
 80031c8:	4621      	mov	r1, r4
            for(uint8_t k = 0; k < 4; k++)
 80031ca:	ecf0 7a01 	vldmia	r0!, {s15}
    float CP[2][4] = {0};
 80031ce:	468c      	mov	ip, r1
 80031d0:	463b      	mov	r3, r7
                CP[i][j] += kf->C[i][k] * kf->P[k][j];
 80031d2:	ecf3 6a01 	vldmia	r3!, {s13}
 80031d6:	ed9c 7a08 	vldr	s14, [ip, #32]
            for(uint8_t k = 0; k < 4; k++)
 80031da:	459b      	cmp	fp, r3
                CP[i][j] += kf->C[i][k] * kf->P[k][j];
 80031dc:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(uint8_t k = 0; k < 4; k++)
 80031e0:	f10c 0c10 	add.w	ip, ip, #16
 80031e4:	d1f5      	bne.n	80031d2 <kalman_update+0x2d2>
        for(uint8_t j = 0; j < 4; j++)
 80031e6:	3104      	adds	r1, #4
 80031e8:	42b9      	cmp	r1, r7
 80031ea:	ed40 7a01 	vstr	s15, [r0, #-4]
 80031ee:	d1ec      	bne.n	80031ca <kalman_update+0x2ca>
    float CPC_T[2][2] = {0};
 80031f0:	2300      	movs	r3, #0
 80031f2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80031f6:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    for(uint8_t i = 0; i < 2; i++)
 80031fa:	a808      	add	r0, sp, #32
            for(uint8_t k = 0; k < 4; k++)
 80031fc:	ed90 7a00 	vldr	s14, [r0]
        for(uint8_t j = 0; j < 4; j++)
 8003200:	4623      	mov	r3, r4
 8003202:	4611      	mov	r1, r2
                CPC_T[i][j] += CP[i][k] * kf->C[j][k];
 8003204:	ecf3 7a01 	vldmia	r3!, {s15}
 8003208:	ecf1 6a01 	vldmia	r1!, {s13}
            for(uint8_t k = 0; k < 4; k++)
 800320c:	42bb      	cmp	r3, r7
                CPC_T[i][j] += CP[i][k] * kf->C[j][k];
 800320e:	eea6 7aa7 	vfma.f32	s14, s13, s15
            for(uint8_t k = 0; k < 4; k++)
 8003212:	d1f7      	bne.n	8003204 <kalman_update+0x304>
 8003214:	edd0 7a01 	vldr	s15, [r0, #4]
 8003218:	ed80 7a00 	vstr	s14, [r0]
 800321c:	463b      	mov	r3, r7
 800321e:	4611      	mov	r1, r2
                CPC_T[i][j] += CP[i][k] * kf->C[j][k];
 8003220:	ecb3 7a01 	vldmia	r3!, {s14}
 8003224:	ecf1 6a01 	vldmia	r1!, {s13}
            for(uint8_t k = 0; k < 4; k++)
 8003228:	459b      	cmp	fp, r3
                CPC_T[i][j] += CP[i][k] * kf->C[j][k];
 800322a:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(uint8_t k = 0; k < 4; k++)
 800322e:	d1f7      	bne.n	8003220 <kalman_update+0x320>
 8003230:	edc0 7a01 	vstr	s15, [r0, #4]
    for(uint8_t i = 0; i < 2; i++)
 8003234:	ab0c      	add	r3, sp, #48	@ 0x30
 8003236:	3008      	adds	r0, #8
 8003238:	4283      	cmp	r3, r0
 800323a:	f102 0210 	add.w	r2, r2, #16
 800323e:	d1dd      	bne.n	80031fc <kalman_update+0x2fc>
            S[i][j] = kf->R[i][j] + CPC_T[i][j];
 8003240:	ed94 ca28 	vldr	s24, [r4, #160]	@ 0xa0
 8003244:	ed9d 6a08 	vldr	s12, [sp, #32]
 8003248:	edd4 aa29 	vldr	s21, [r4, #164]	@ 0xa4
 800324c:	eddd 6a09 	vldr	s13, [sp, #36]	@ 0x24
 8003250:	ed94 aa2a 	vldr	s20, [r4, #168]	@ 0xa8
 8003254:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8003258:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 800325c:	ed94 ba2b 	vldr	s22, [r4, #172]	@ 0xac
 8003260:	ee3c ca06 	vadd.f32	s24, s24, s12
 8003264:	ee7a aaa6 	vadd.f32	s21, s21, s13
 8003268:	ee3a aa07 	vadd.f32	s20, s20, s14
 800326c:	ee3b ba27 	vadd.f32	s22, s22, s15
 8003270:	aa1c      	add	r2, sp, #112	@ 0x70
 8003272:	4623      	mov	r3, r4
 8003274:	e004      	b.n	8003280 <kalman_update+0x380>
 8003276:	bf00      	nop
 8003278:	447a0000 	.word	0x447a0000
 800327c:	00000000 	.word	0x00000000
            C_T[i][j] = kf->C[j][i];
 8003280:	f853 1b04 	ldr.w	r1, [r3], #4
 8003284:	6011      	str	r1, [r2, #0]
    for(uint8_t i = 0; i < 4; i++)
 8003286:	42bb      	cmp	r3, r7
            C_T[i][j] = kf->C[j][i];
 8003288:	68d9      	ldr	r1, [r3, #12]
 800328a:	6051      	str	r1, [r2, #4]
    for(uint8_t i = 0; i < 4; i++)
 800328c:	f102 0208 	add.w	r2, r2, #8
 8003290:	d1f6      	bne.n	8003280 <kalman_update+0x380>
    float PC_T[4][2] = {0};
 8003292:	2220      	movs	r2, #32
 8003294:	2100      	movs	r1, #0
 8003296:	a824      	add	r0, sp, #144	@ 0x90
 8003298:	f001 ff29 	bl	80050ee <memset>
    for(uint8_t i = 0; i < 4; i++)
 800329c:	ab24      	add	r3, sp, #144	@ 0x90
 800329e:	9800      	ldr	r0, [sp, #0]
    float PC_T[4][2] = {0};
 80032a0:	469c      	mov	ip, r3
            for(uint8_t k = 0; k < 4; k++)
 80032a2:	f1aa 0210 	sub.w	r2, sl, #16
 80032a6:	ed9c 7a00 	vldr	s14, [ip]
    float PC_T[4][2] = {0};
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	f10d 0e70 	add.w	lr, sp, #112	@ 0x70
 80032b0:	4611      	mov	r1, r2
                PC_T[i][j] += kf->P[i][k] * C_T[k][j];
 80032b2:	ecf1 6a01 	vldmia	r1!, {s13}
 80032b6:	4673      	mov	r3, lr
 80032b8:	edd3 7a00 	vldr	s15, [r3]
            for(uint8_t k = 0; k < 4; k++)
 80032bc:	4551      	cmp	r1, sl
                PC_T[i][j] += kf->P[i][k] * C_T[k][j];
 80032be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80032c2:	f10e 0e08 	add.w	lr, lr, #8
            for(uint8_t k = 0; k < 4; k++)
 80032c6:	d1f4      	bne.n	80032b2 <kalman_update+0x3b2>
 80032c8:	9b00      	ldr	r3, [sp, #0]
 80032ca:	eddc 7a01 	vldr	s15, [ip, #4]
 80032ce:	ed8c 7a00 	vstr	s14, [ip]
 80032d2:	a91c      	add	r1, sp, #112	@ 0x70
                PC_T[i][j] += kf->P[i][k] * C_T[k][j];
 80032d4:	ecf2 6a01 	vldmia	r2!, {s13}
 80032d8:	ed91 7a01 	vldr	s14, [r1, #4]
            for(uint8_t k = 0; k < 4; k++)
 80032dc:	4552      	cmp	r2, sl
                PC_T[i][j] += kf->P[i][k] * C_T[k][j];
 80032de:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(uint8_t k = 0; k < 4; k++)
 80032e2:	f101 0108 	add.w	r1, r1, #8
 80032e6:	d1f5      	bne.n	80032d4 <kalman_update+0x3d4>
    for(uint8_t i = 0; i < 4; i++)
 80032e8:	f102 0a10 	add.w	sl, r2, #16
 80032ec:	4582      	cmp	sl, r0
 80032ee:	edcc 7a01 	vstr	s15, [ip, #4]
 80032f2:	f10c 0c08 	add.w	ip, ip, #8
 80032f6:	d1d4      	bne.n	80032a2 <kalman_update+0x3a2>
    float det = S[0][0]*S[1][1] - S[0][1]*S[1][0];
 80032f8:	ee6a 7a6a 	vnmul.f32	s15, s20, s21
    float K[4][2] = {0};
 80032fc:	2220      	movs	r2, #32
    float det = S[0][0]*S[1][1] - S[0][1]*S[1][0];
 80032fe:	eeec 7a0b 	vfma.f32	s15, s24, s22
    float K[4][2] = {0};
 8003302:	2100      	movs	r1, #0
 8003304:	a82c      	add	r0, sp, #176	@ 0xb0
    float invS[2][2] = {{S[1][1]/det, -S[0][1]/det}, {-S[1][0]/det, S[0][0]/det}};
 8003306:	eef1 aa6a 	vneg.f32	s21, s21
 800330a:	eeb1 aa4a 	vneg.f32	s20, s20
 800330e:	eecb ba27 	vdiv.f32	s23, s22, s15
    float det = S[0][0]*S[1][1] - S[0][1]*S[1][0];
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	f10d 0ab0 	add.w	sl, sp, #176	@ 0xb0
    float invS[2][2] = {{S[1][1]/det, -S[0][1]/det}, {-S[1][0]/det, S[0][0]/det}};
 8003318:	ee8a baa7 	vdiv.f32	s22, s21, s15
 800331c:	eeca aa27 	vdiv.f32	s21, s20, s15
 8003320:	ee8c aa27 	vdiv.f32	s20, s24, s15
    float K[4][2] = {0};
 8003324:	f001 fee3 	bl	80050ee <memset>
 8003328:	9b00      	ldr	r3, [sp, #0]
 800332a:	4652      	mov	r2, sl
    for(uint8_t i = 0; i < 4; i++)
 800332c:	3208      	adds	r2, #8
 800332e:	3308      	adds	r3, #8
                K[i][j] += PC_T[i][k] * invS[k][j];
 8003330:	ed53 6a02 	vldr	s13, [r3, #-8]
 8003334:	ed12 7a02 	vldr	s14, [r2, #-8]
 8003338:	ed52 7a01 	vldr	s15, [r2, #-4]
 800333c:	eeab 7aa6 	vfma.f32	s14, s23, s13
 8003340:	eeeb 7a26 	vfma.f32	s15, s22, s13
 8003344:	ed53 6a01 	vldr	s13, [r3, #-4]
 8003348:	eeaa 7aa6 	vfma.f32	s14, s21, s13
 800334c:	eeea 7a26 	vfma.f32	s15, s20, s13
 8003350:	ed02 7a02 	vstr	s14, [r2, #-8]
 8003354:	ed42 7a01 	vstr	s15, [r2, #-4]
    for(uint8_t i = 0; i < 4; i++)
 8003358:	4296      	cmp	r6, r2
 800335a:	d1e7      	bne.n	800332c <kalman_update+0x42c>
 800335c:	ab2c      	add	r3, sp, #176	@ 0xb0
            kf->state_estimate[i] += K[i][j] * y_tilde[j];
 800335e:	edd9 7a00 	vldr	s15, [r9]
 8003362:	edd3 6a00 	vldr	s13, [r3]
 8003366:	ed93 7a01 	vldr	s14, [r3, #4]
 800336a:	eee6 7aa9 	vfma.f32	s15, s13, s19
    for(uint8_t i = 0; i < 4; i++)
 800336e:	3308      	adds	r3, #8
            kf->state_estimate[i] += K[i][j] * y_tilde[j];
 8003370:	eee7 7a09 	vfma.f32	s15, s14, s18
 8003374:	ece9 7a01 	vstmia	r9!, {s15}
    for(uint8_t i = 0; i < 4; i++)
 8003378:	45c1      	cmp	r9, r8
 800337a:	d1f0      	bne.n	800335e <kalman_update+0x45e>
    float KC[4][4] = {0};
 800337c:	2100      	movs	r1, #0
 800337e:	2240      	movs	r2, #64	@ 0x40
 8003380:	a864      	add	r0, sp, #400	@ 0x190
 8003382:	f001 feb4 	bl	80050ee <memset>
    for(uint8_t i = 0; i < 4; i++)
 8003386:	a864      	add	r0, sp, #400	@ 0x190
    float KC[4][4] = {0};
 8003388:	4601      	mov	r1, r0
                KC[i][j] += K[i][k] * kf->C[k][j];
 800338a:	ed9a 6a00 	vldr	s12, [sl]
 800338e:	edda 6a01 	vldr	s13, [sl, #4]
 8003392:	4623      	mov	r3, r4
 8003394:	460a      	mov	r2, r1
 8003396:	ecb3 7a01 	vldmia	r3!, {s14}
 800339a:	edd2 7a00 	vldr	s15, [r2]
 800339e:	eee6 7a07 	vfma.f32	s15, s12, s14
        for(uint8_t j = 0; j < 4; j++)
 80033a2:	42bb      	cmp	r3, r7
                KC[i][j] += K[i][k] * kf->C[k][j];
 80033a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80033a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80033ac:	ece2 7a01 	vstmia	r2!, {s15}
        for(uint8_t j = 0; j < 4; j++)
 80033b0:	d1f1      	bne.n	8003396 <kalman_update+0x496>
    for(uint8_t i = 0; i < 4; i++)
 80033b2:	f10a 0a08 	add.w	sl, sl, #8
 80033b6:	4556      	cmp	r6, sl
 80033b8:	f101 0110 	add.w	r1, r1, #16
 80033bc:	d1e5      	bne.n	800338a <kalman_update+0x48a>
 80033be:	ae74      	add	r6, sp, #464	@ 0x1d0
            I_KC[i][j] = (i==j ? 1.0f : 0.0f) - KC[i][j];
 80033c0:	ed1f 6a52 	vldr	s12, [pc, #-328]	@ 800327c <kalman_update+0x37c>
 80033c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
    for(uint8_t i = 0; i < 4; i++)
 80033c8:	46b0      	mov	r8, r6
 80033ca:	f04f 0e00 	mov.w	lr, #0
 80033ce:	4641      	mov	r1, r8
 80033d0:	4602      	mov	r2, r0
 80033d2:	2300      	movs	r3, #0
 80033d4:	fa5f fc8e 	uxtb.w	ip, lr
            I_KC[i][j] = (i==j ? 1.0f : 0.0f) - KC[i][j];
 80033d8:	b2df      	uxtb	r7, r3
 80033da:	45bc      	cmp	ip, r7
 80033dc:	ecb2 7a01 	vldmia	r2!, {s14}
 80033e0:	bf0c      	ite	eq
 80033e2:	eef0 7a66 	vmoveq.f32	s15, s13
 80033e6:	eef0 7a46 	vmovne.f32	s15, s12
 80033ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
        for(uint8_t j = 0; j < 4; j++)
 80033ee:	3301      	adds	r3, #1
 80033f0:	2b04      	cmp	r3, #4
            I_KC[i][j] = (i==j ? 1.0f : 0.0f) - KC[i][j];
 80033f2:	ece1 7a01 	vstmia	r1!, {s15}
        for(uint8_t j = 0; j < 4; j++)
 80033f6:	d1ef      	bne.n	80033d8 <kalman_update+0x4d8>
    for(uint8_t i = 0; i < 4; i++)
 80033f8:	f10e 0e01 	add.w	lr, lr, #1
 80033fc:	f1be 0f04 	cmp.w	lr, #4
 8003400:	f100 0010 	add.w	r0, r0, #16
 8003404:	f108 0810 	add.w	r8, r8, #16
 8003408:	d1e1      	bne.n	80033ce <kalman_update+0x4ce>
    float newP[4][4] = {0};
 800340a:	2240      	movs	r2, #64	@ 0x40
 800340c:	2100      	movs	r1, #0
 800340e:	a884      	add	r0, sp, #528	@ 0x210
 8003410:	f001 fe6d 	bl	80050ee <memset>
    for(uint8_t i = 0; i < 4; i++)
 8003414:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003418:	af84      	add	r7, sp, #528	@ 0x210
 800341a:	f106 0c40 	add.w	ip, r6, #64	@ 0x40
            I_KC[i][j] = (i==j ? 1.0f : 0.0f) - KC[i][j];
 800341e:	4671      	mov	r1, lr
 8003420:	4638      	mov	r0, r7
            for(uint8_t k = 0; k < 4; k++)
 8003422:	ecf0 7a01 	vldmia	r0!, {s15}
 8003426:	f1a1 0340 	sub.w	r3, r1, #64	@ 0x40
            I_KC[i][j] = (i==j ? 1.0f : 0.0f) - KC[i][j];
 800342a:	4632      	mov	r2, r6
                newP[i][j] += I_KC[i][k] * kf->P[k][j];
 800342c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003430:	ecf2 6a01 	vldmia	r2!, {s13}
            for(uint8_t k = 0; k < 4; k++)
 8003434:	3310      	adds	r3, #16
 8003436:	428b      	cmp	r3, r1
                newP[i][j] += I_KC[i][k] * kf->P[k][j];
 8003438:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(uint8_t k = 0; k < 4; k++)
 800343c:	d1f6      	bne.n	800342c <kalman_update+0x52c>
        for(uint8_t j = 0; j < 4; j++)
 800343e:	1d19      	adds	r1, r3, #4
 8003440:	42a9      	cmp	r1, r5
 8003442:	ed40 7a01 	vstr	s15, [r0, #-4]
 8003446:	d1ec      	bne.n	8003422 <kalman_update+0x522>
    for(uint8_t i = 0; i < 4; i++)
 8003448:	3610      	adds	r6, #16
 800344a:	45b4      	cmp	ip, r6
 800344c:	f107 0710 	add.w	r7, r7, #16
 8003450:	d1e5      	bne.n	800341e <kalman_update+0x51e>
    memcpy(kf->P, newP, sizeof(newP));
 8003452:	ae84      	add	r6, sp, #528	@ 0x210
 8003454:	af94      	add	r7, sp, #592	@ 0x250
 8003456:	4635      	mov	r5, r6
 8003458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800345a:	42bd      	cmp	r5, r7
 800345c:	f8cb 0000 	str.w	r0, [fp]
 8003460:	f8cb 1004 	str.w	r1, [fp, #4]
 8003464:	f8cb 2008 	str.w	r2, [fp, #8]
 8003468:	f8cb 300c 	str.w	r3, [fp, #12]
 800346c:	f106 0610 	add.w	r6, r6, #16
 8003470:	f10b 0b10 	add.w	fp, fp, #16
 8003474:	d1ef      	bne.n	8003456 <kalman_update+0x556>
    kf->yaw_hat += yaw_dot * dt;
 8003476:	ed94 9a34 	vldr	s18, [r4, #208]	@ 0xd0
    kf->phi_hat   = kf->state_estimate[0];
 800347a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
    kf->theta_hat = kf->state_estimate[2];
 800347e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
    kf->phi_hat   = kf->state_estimate[0];
 8003482:	f8c4 20c0 	str.w	r2, [r4, #192]	@ 0xc0
    kf->yaw_hat += yaw_dot * dt;
 8003486:	eea8 9a88 	vfma.f32	s18, s17, s16
    kf->theta_hat = kf->state_estimate[2];
 800348a:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if(kf->yaw_hat > M_PI)
 800348e:	ee19 0a10 	vmov	r0, s18
 8003492:	f7fd f861 	bl	8000558 <__aeabi_f2d>
 8003496:	a31c      	add	r3, pc, #112	@ (adr r3, 8003508 <kalman_update+0x608>)
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	4606      	mov	r6, r0
 800349e:	460f      	mov	r7, r1
 80034a0:	f7fd fb42 	bl	8000b28 <__aeabi_dcmpgt>
 80034a4:	b170      	cbz	r0, 80034c4 <kalman_update+0x5c4>
    	kf->yaw_hat -= 2 * M_PI;
 80034a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8003510 <kalman_update+0x610>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	4630      	mov	r0, r6
 80034ae:	4639      	mov	r1, r7
 80034b0:	f7fc fef2 	bl	8000298 <__aeabi_dsub>
 80034b4:	f7fd fb80 	bl	8000bb8 <__aeabi_d2f>
 80034b8:	ee09 0a10 	vmov	s18, r0
    if(kf->yaw_hat < -M_PI)
 80034bc:	f7fd f84c 	bl	8000558 <__aeabi_f2d>
 80034c0:	4606      	mov	r6, r0
 80034c2:	460f      	mov	r7, r1
 80034c4:	a314      	add	r3, pc, #80	@ (adr r3, 8003518 <kalman_update+0x618>)
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	4630      	mov	r0, r6
 80034cc:	4639      	mov	r1, r7
 80034ce:	f7fd fb0d 	bl	8000aec <__aeabi_dcmplt>
 80034d2:	b938      	cbnz	r0, 80034e4 <kalman_update+0x5e4>
    kf->yaw_hat += yaw_dot * dt;
 80034d4:	ed84 9a34 	vstr	s18, [r4, #208]	@ 0xd0
}
 80034d8:	f50d 7d15 	add.w	sp, sp, #596	@ 0x254
 80034dc:	ecbd 8b0c 	vpop	{d8-d13}
 80034e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	kf->yaw_hat += 2 * M_PI;
 80034e4:	a30a      	add	r3, pc, #40	@ (adr r3, 8003510 <kalman_update+0x610>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	4630      	mov	r0, r6
 80034ec:	4639      	mov	r1, r7
 80034ee:	f7fc fed5 	bl	800029c <__adddf3>
 80034f2:	f7fd fb61 	bl	8000bb8 <__aeabi_d2f>
 80034f6:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
}
 80034fa:	f50d 7d15 	add.w	sp, sp, #596	@ 0x254
 80034fe:	ecbd 8b0c 	vpop	{d8-d13}
 8003502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003506:	bf00      	nop
 8003508:	54442d18 	.word	0x54442d18
 800350c:	400921fb 	.word	0x400921fb
 8003510:	54442d18 	.word	0x54442d18
 8003514:	401921fb 	.word	0x401921fb
 8003518:	54442d18 	.word	0x54442d18
 800351c:	c00921fb 	.word	0xc00921fb

08003520 <kalman_get_roll>:

float kalman_get_roll(KalmanFilter *kf)
{
    return kf->phi_hat * 180.0f / M_PI;
 8003520:	ed90 7a30 	vldr	s14, [r0, #192]	@ 0xc0
 8003524:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003558 <kalman_get_roll+0x38>
 8003528:	ee67 7a27 	vmul.f32	s15, s14, s15
{
 800352c:	b508      	push	{r3, lr}
    return kf->phi_hat * 180.0f / M_PI;
 800352e:	ee17 0a90 	vmov	r0, s15
 8003532:	f7fd f811 	bl	8000558 <__aeabi_f2d>
 8003536:	a306      	add	r3, pc, #24	@ (adr r3, 8003550 <kalman_get_roll+0x30>)
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f7fd f98e 	bl	800085c <__aeabi_ddiv>
 8003540:	f7fd fb3a 	bl	8000bb8 <__aeabi_d2f>
}
 8003544:	ee00 0a10 	vmov	s0, r0
 8003548:	bd08      	pop	{r3, pc}
 800354a:	bf00      	nop
 800354c:	f3af 8000 	nop.w
 8003550:	54442d18 	.word	0x54442d18
 8003554:	400921fb 	.word	0x400921fb
 8003558:	43340000 	.word	0x43340000
 800355c:	00000000 	.word	0x00000000

08003560 <kalman_get_pitch>:

float kalman_get_pitch(KalmanFilter *kf)
{
    return kf->theta_hat * 180.0f / M_PI;
 8003560:	ed90 7a31 	vldr	s14, [r0, #196]	@ 0xc4
 8003564:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003598 <kalman_get_pitch+0x38>
 8003568:	ee67 7a27 	vmul.f32	s15, s14, s15
{
 800356c:	b508      	push	{r3, lr}
    return kf->theta_hat * 180.0f / M_PI;
 800356e:	ee17 0a90 	vmov	r0, s15
 8003572:	f7fc fff1 	bl	8000558 <__aeabi_f2d>
 8003576:	a306      	add	r3, pc, #24	@ (adr r3, 8003590 <kalman_get_pitch+0x30>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f7fd f96e 	bl	800085c <__aeabi_ddiv>
 8003580:	f7fd fb1a 	bl	8000bb8 <__aeabi_d2f>
}
 8003584:	ee00 0a10 	vmov	s0, r0
 8003588:	bd08      	pop	{r3, pc}
 800358a:	bf00      	nop
 800358c:	f3af 8000 	nop.w
 8003590:	54442d18 	.word	0x54442d18
 8003594:	400921fb 	.word	0x400921fb
 8003598:	43340000 	.word	0x43340000
 800359c:	00000000 	.word	0x00000000

080035a0 <kalman_get_yaw>:

float kalman_get_yaw(KalmanFilter *kf)
{
    return kf->yaw_hat * 180.0f / M_PI;
 80035a0:	ed90 7a34 	vldr	s14, [r0, #208]	@ 0xd0
 80035a4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80035d8 <kalman_get_yaw+0x38>
 80035a8:	ee67 7a27 	vmul.f32	s15, s14, s15
{
 80035ac:	b508      	push	{r3, lr}
    return kf->yaw_hat * 180.0f / M_PI;
 80035ae:	ee17 0a90 	vmov	r0, s15
 80035b2:	f7fc ffd1 	bl	8000558 <__aeabi_f2d>
 80035b6:	a306      	add	r3, pc, #24	@ (adr r3, 80035d0 <kalman_get_yaw+0x30>)
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f7fd f94e 	bl	800085c <__aeabi_ddiv>
 80035c0:	f7fd fafa 	bl	8000bb8 <__aeabi_d2f>
}
 80035c4:	ee00 0a10 	vmov	s0, r0
 80035c8:	bd08      	pop	{r3, pc}
 80035ca:	bf00      	nop
 80035cc:	f3af 8000 	nop.w
 80035d0:	54442d18 	.word	0x54442d18
 80035d4:	400921fb 	.word	0x400921fb
 80035d8:	43340000 	.word	0x43340000

080035dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035dc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80035de:	f000 fb47 	bl	8003c70 <vTaskStartScheduler>
  
  return osOK;
}
 80035e2:	2000      	movs	r0, #0
 80035e4:	bd08      	pop	{r3, pc}
 80035e6:	bf00      	nop

080035e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	4684      	mov	ip, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035ec:	6945      	ldr	r5, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035ee:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035f2:	6840      	ldr	r0, [r0, #4]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035f4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
{
 80035f8:	460b      	mov	r3, r1
 80035fa:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035fc:	f8dc 1000 	ldr.w	r1, [ip]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003600:	b17d      	cbz	r5, 8003622 <osThreadCreate+0x3a>
 8003602:	f8dc 6018 	ldr.w	r6, [ip, #24]
 8003606:	b166      	cbz	r6, 8003622 <osThreadCreate+0x3a>
  if (priority != osPriorityError) {
 8003608:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800360c:	bf14      	ite	ne
 800360e:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003612:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003614:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8003618:	9400      	str	r4, [sp, #0]
 800361a:	f000 fabf 	bl	8003b9c <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 800361e:	b006      	add	sp, #24
 8003620:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8003622:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8003626:	bf14      	ite	ne
 8003628:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800362c:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800362e:	9400      	str	r4, [sp, #0]
 8003630:	ac05      	add	r4, sp, #20
 8003632:	b292      	uxth	r2, r2
 8003634:	9401      	str	r4, [sp, #4]
 8003636:	f000 faeb 	bl	8003c10 <xTaskCreate>
 800363a:	2801      	cmp	r0, #1
  return handle;
 800363c:	bf0c      	ite	eq
 800363e:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8003640:	2000      	movne	r0, #0
}
 8003642:	b006      	add	sp, #24
 8003644:	bd70      	pop	{r4, r5, r6, pc}
 8003646:	bf00      	nop

08003648 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003648:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800364a:	2801      	cmp	r0, #1
 800364c:	bf38      	it	cc
 800364e:	2001      	movcc	r0, #1
 8003650:	f000 fcaa 	bl	8003fa8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003654:	2000      	movs	r0, #0
 8003656:	bd08      	pop	{r3, pc}

08003658 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003658:	4603      	mov	r3, r0
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800365a:	6882      	ldr	r2, [r0, #8]
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	6800      	ldr	r0, [r0, #0]
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003660:	b14a      	cbz	r2, 8003676 <osMessageCreate+0x1e>
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	b13b      	cbz	r3, 8003676 <osMessageCreate+0x1e>
{
 8003666:	b510      	push	{r4, lr}
 8003668:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800366a:	2400      	movs	r4, #0
 800366c:	9400      	str	r4, [sp, #0]
 800366e:	f000 f895 	bl	800379c <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003672:	b002      	add	sp, #8
 8003674:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003676:	2200      	movs	r2, #0
 8003678:	f000 b8e2 	b.w	8003840 <xQueueGenericCreate>

0800367c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800367c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003680:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003684:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003686:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800368e:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop

08003694 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop

0800369c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800369c:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800369e:	6803      	ldr	r3, [r0, #0]
{
 80036a0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036a2:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 80036a4:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036a6:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036aa:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036ac:	6091      	str	r1, [r2, #8]
}
 80036ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80036b2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80036b4:	6003      	str	r3, [r0, #0]
}
 80036b6:	4770      	bx	lr

080036b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036b8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036ba:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036bc:	1c6b      	adds	r3, r5, #1
 80036be:	d010      	beq.n	80036e2 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036c0:	f100 0308 	add.w	r3, r0, #8
 80036c4:	461c      	mov	r4, r3
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	42aa      	cmp	r2, r5
 80036cc:	d9fa      	bls.n	80036c4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80036ce:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80036d0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80036d2:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036d4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036d6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80036d8:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80036da:	6108      	str	r0, [r1, #16]
}
 80036dc:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80036de:	6002      	str	r2, [r0, #0]
}
 80036e0:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80036e2:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	e7f2      	b.n	80036ce <vListInsert+0x16>

080036e8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036e8:	6903      	ldr	r3, [r0, #16]
{
 80036ea:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036ec:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036f0:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036f2:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80036f4:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036f6:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036f8:	bf08      	it	eq
 80036fa:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80036fc:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80036fe:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8003702:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8003704:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8003706:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003708:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800370a:	6818      	ldr	r0, [r3, #0]
}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop

08003710 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003710:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
 8003712:	b1e0      	cbz	r0, 800374e <xQueueGenericReset+0x3e>
 8003714:	4604      	mov	r4, r0
 8003716:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 8003718:	f000 fd5c 	bl	80041d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800371c:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 8003720:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003722:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003724:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003728:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800372a:	440a      	add	r2, r1
 800372c:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800372e:	2200      	movs	r2, #0
 8003730:	63a2      	str	r2, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003732:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8003734:	22ff      	movs	r2, #255	@ 0xff
 8003736:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800373a:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 800373c:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003740:	b975      	cbnz	r5, 8003760 <xQueueGenericReset+0x50>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	b9c3      	cbnz	r3, 8003778 <xQueueGenericReset+0x68>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8003746:	f000 fd67 	bl	8004218 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800374a:	2001      	movs	r0, #1
 800374c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800375e:	e7fe      	b.n	800375e <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003760:	f104 0010 	add.w	r0, r4, #16
 8003764:	f7ff ff8a 	bl	800367c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003768:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800376c:	f7ff ff86 	bl	800367c <vListInitialise>
	taskEXIT_CRITICAL();
 8003770:	f000 fd52 	bl	8004218 <vPortExitCritical>
}
 8003774:	2001      	movs	r0, #1
 8003776:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003778:	f104 0010 	add.w	r0, r4, #16
 800377c:	f000 fc82 	bl	8004084 <xTaskRemoveFromEventList>
 8003780:	2800      	cmp	r0, #0
 8003782:	d0e0      	beq.n	8003746 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003784:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800378c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	e7d5      	b.n	8003746 <xQueueGenericReset+0x36>
 800379a:	bf00      	nop

0800379c <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800379c:	b940      	cbnz	r0, 80037b0 <xQueueGenericCreateStatic+0x14>
 800379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	e7fe      	b.n	80037ae <xQueueGenericCreateStatic+0x12>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037b0:	b18b      	cbz	r3, 80037d6 <xQueueGenericCreateStatic+0x3a>
	{
 80037b2:	b510      	push	{r4, lr}
 80037b4:	b084      	sub	sp, #16

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037b6:	b38a      	cbz	r2, 800381c <xQueueGenericCreateStatic+0x80>
 80037b8:	b1b1      	cbz	r1, 80037e8 <xQueueGenericCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037ba:	2448      	movs	r4, #72	@ 0x48
 80037bc:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037be:	9c03      	ldr	r4, [sp, #12]
 80037c0:	2c48      	cmp	r4, #72	@ 0x48
 80037c2:	d01a      	beq.n	80037fa <xQueueGenericCreateStatic+0x5e>
 80037c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	e7fe      	b.n	80037d4 <xQueueGenericCreateStatic+0x38>
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80037e6:	e7fe      	b.n	80037e6 <xQueueGenericCreateStatic+0x4a>
 80037e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericCreateStatic+0x5c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037fa:	9c03      	ldr	r4, [sp, #12]
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037fc:	601a      	str	r2, [r3, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037fe:	f04f 0c01 	mov.w	ip, #1
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 8003802:	e9c3 010f 	strd	r0, r1, [r3, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003806:	f883 c046 	strb.w	ip, [r3, #70]	@ 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800380a:	4661      	mov	r1, ip
 800380c:	4618      	mov	r0, r3
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	f7ff ff7e 	bl	8003710 <xQueueGenericReset>
	}
 8003814:	9b01      	ldr	r3, [sp, #4]
 8003816:	4618      	mov	r0, r3
 8003818:	b004      	add	sp, #16
 800381a:	bd10      	pop	{r4, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800381c:	b939      	cbnz	r1, 800382e <xQueueGenericCreateStatic+0x92>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800381e:	2248      	movs	r2, #72	@ 0x48
 8003820:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003822:	9a03      	ldr	r2, [sp, #12]
 8003824:	2a48      	cmp	r2, #72	@ 0x48
 8003826:	d1cd      	bne.n	80037c4 <xQueueGenericCreateStatic+0x28>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003828:	9a03      	ldr	r2, [sp, #12]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800382a:	461a      	mov	r2, r3
 800382c:	e7e6      	b.n	80037fc <xQueueGenericCreateStatic+0x60>
 800382e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800383e:	e7fe      	b.n	800383e <xQueueGenericCreateStatic+0xa2>

08003840 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003840:	b940      	cbnz	r0, 8003854 <xQueueGenericCreate+0x14>
 8003842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	e7fe      	b.n	8003852 <xQueueGenericCreate+0x12>
	{
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003858:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800385c:	3048      	adds	r0, #72	@ 0x48
 800385e:	460d      	mov	r5, r1
 8003860:	f000 fe04 	bl	800446c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003864:	4606      	mov	r6, r0
 8003866:	b160      	cbz	r0, 8003882 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003868:	2300      	movs	r3, #0
 800386a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800386e:	b155      	cbz	r5, 8003886 <xQueueGenericCreate+0x46>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003870:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8003874:	e9c6 450f 	strd	r4, r5, [r6, #60]	@ 0x3c
 8003878:	6033      	str	r3, [r6, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800387a:	2101      	movs	r1, #1
 800387c:	4630      	mov	r0, r6
 800387e:	f7ff ff47 	bl	8003710 <xQueueGenericReset>
	}
 8003882:	4630      	mov	r0, r6
 8003884:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003886:	4603      	mov	r3, r0
 8003888:	e7f4      	b.n	8003874 <xQueueGenericCreate+0x34>
 800388a:	bf00      	nop

0800388c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003890:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003892:	f000 fc9f 	bl	80041d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003896:	4a33      	ldr	r2, [pc, #204]	@ (8003964 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 8003898:	4d33      	ldr	r5, [pc, #204]	@ (8003968 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d031      	beq.n	800390a <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038a6:	4e31      	ldr	r6, [pc, #196]	@ (800396c <prvAddNewTaskToReadyList+0xe0>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038a8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80038aa:	6832      	ldr	r2, [r6, #0]
 80038ac:	b332      	cbz	r2, 80038fc <prvAddNewTaskToReadyList+0x70>
 80038ae:	4f30      	ldr	r7, [pc, #192]	@ (8003970 <prvAddNewTaskToReadyList+0xe4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038b0:	4830      	ldr	r0, [pc, #192]	@ (8003974 <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038b2:	4931      	ldr	r1, [pc, #196]	@ (8003978 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 80038b4:	6802      	ldr	r2, [r0, #0]
 80038b6:	3201      	adds	r2, #1
 80038b8:	6002      	str	r2, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80038ba:	6808      	ldr	r0, [r1, #0]
 80038bc:	2201      	movs	r2, #1
 80038be:	409a      	lsls	r2, r3
 80038c0:	4302      	orrs	r2, r0
 80038c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038c6:	600a      	str	r2, [r1, #0]
 80038c8:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 80038cc:	1d21      	adds	r1, r4, #4
 80038ce:	f7ff fee5 	bl	800369c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038d2:	f000 fca1 	bl	8004218 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038d6:	6833      	ldr	r3, [r6, #0]
 80038d8:	b173      	cbz	r3, 80038f8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038da:	682a      	ldr	r2, [r5, #0]
 80038dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80038de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d209      	bcs.n	80038f8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80038e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038fc:	682a      	ldr	r2, [r5, #0]
 80038fe:	4f1c      	ldr	r7, [pc, #112]	@ (8003970 <prvAddNewTaskToReadyList+0xe4>)
 8003900:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003902:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003904:	bf98      	it	ls
 8003906:	602c      	strls	r4, [r5, #0]
 8003908:	e7d2      	b.n	80038b0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800390a:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800390c:	6813      	ldr	r3, [r2, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d003      	beq.n	800391a <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003912:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003914:	4f16      	ldr	r7, [pc, #88]	@ (8003970 <prvAddNewTaskToReadyList+0xe4>)
 8003916:	4e15      	ldr	r6, [pc, #84]	@ (800396c <prvAddNewTaskToReadyList+0xe0>)
 8003918:	e7ca      	b.n	80038b0 <prvAddNewTaskToReadyList+0x24>
 800391a:	4f15      	ldr	r7, [pc, #84]	@ (8003970 <prvAddNewTaskToReadyList+0xe4>)
 800391c:	463e      	mov	r6, r7
 800391e:	f107 088c 	add.w	r8, r7, #140	@ 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003922:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003924:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003926:	f7ff fea9 	bl	800367c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800392a:	4546      	cmp	r6, r8
 800392c:	d1f9      	bne.n	8003922 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800392e:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8003994 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8003932:	4e12      	ldr	r6, [pc, #72]	@ (800397c <prvAddNewTaskToReadyList+0xf0>)
	vListInitialise( &xDelayedTaskList1 );
 8003934:	4640      	mov	r0, r8
 8003936:	f7ff fea1 	bl	800367c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800393a:	4630      	mov	r0, r6
 800393c:	f7ff fe9e 	bl	800367c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003940:	480f      	ldr	r0, [pc, #60]	@ (8003980 <prvAddNewTaskToReadyList+0xf4>)
 8003942:	f7ff fe9b 	bl	800367c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003946:	480f      	ldr	r0, [pc, #60]	@ (8003984 <prvAddNewTaskToReadyList+0xf8>)
 8003948:	f7ff fe98 	bl	800367c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800394c:	480e      	ldr	r0, [pc, #56]	@ (8003988 <prvAddNewTaskToReadyList+0xfc>)
 800394e:	f7ff fe95 	bl	800367c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003952:	4b0e      	ldr	r3, [pc, #56]	@ (800398c <prvAddNewTaskToReadyList+0x100>)
 8003954:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003958:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <prvAddNewTaskToReadyList+0x104>)
 800395a:	601e      	str	r6, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800395c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800395e:	4e03      	ldr	r6, [pc, #12]	@ (800396c <prvAddNewTaskToReadyList+0xe0>)
}
 8003960:	e7a6      	b.n	80038b0 <prvAddNewTaskToReadyList+0x24>
 8003962:	bf00      	nop
 8003964:	2000069c 	.word	0x2000069c
 8003968:	2000079c 	.word	0x2000079c
 800396c:	20000690 	.word	0x20000690
 8003970:	20000710 	.word	0x20000710
 8003974:	20000680 	.word	0x20000680
 8003978:	20000694 	.word	0x20000694
 800397c:	200006e8 	.word	0x200006e8
 8003980:	200006cc 	.word	0x200006cc
 8003984:	200006b8 	.word	0x200006b8
 8003988:	200006a0 	.word	0x200006a0
 800398c:	200006e4 	.word	0x200006e4
 8003990:	200006e0 	.word	0x200006e0
 8003994:	200006fc 	.word	0x200006fc

08003998 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800399a:	4b21      	ldr	r3, [pc, #132]	@ (8003a20 <prvAddCurrentTaskToDelayedList+0x88>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800399c:	4d21      	ldr	r5, [pc, #132]	@ (8003a24 <prvAddCurrentTaskToDelayedList+0x8c>)
const TickType_t xConstTickCount = xTickCount;
 800399e:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a0:	682b      	ldr	r3, [r5, #0]
{
 80039a2:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a4:	1d18      	adds	r0, r3, #4
{
 80039a6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a8:	f7ff fe9e 	bl	80036e8 <uxListRemove>
 80039ac:	b940      	cbnz	r0, 80039c0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039ae:	682b      	ldr	r3, [r5, #0]
 80039b0:	491d      	ldr	r1, [pc, #116]	@ (8003a28 <prvAddCurrentTaskToDelayedList+0x90>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	2201      	movs	r2, #1
 80039b6:	409a      	lsls	r2, r3
 80039b8:	680b      	ldr	r3, [r1, #0]
 80039ba:	ea23 0302 	bic.w	r3, r3, r2
 80039be:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039c0:	1c63      	adds	r3, r4, #1
 80039c2:	d00f      	beq.n	80039e4 <prvAddCurrentTaskToDelayedList+0x4c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	1934      	adds	r4, r6, r4
 80039c8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80039ca:	d210      	bcs.n	80039ee <prvAddCurrentTaskToDelayedList+0x56>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039cc:	4b17      	ldr	r3, [pc, #92]	@ (8003a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	6829      	ldr	r1, [r5, #0]
 80039d2:	3104      	adds	r1, #4
 80039d4:	f7ff fe70 	bl	80036b8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80039d8:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <prvAddCurrentTaskToDelayedList+0x98>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	42a2      	cmp	r2, r4
 80039de:	d900      	bls.n	80039e2 <prvAddCurrentTaskToDelayedList+0x4a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80039e0:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039e4:	b9a7      	cbnz	r7, 8003a10 <prvAddCurrentTaskToDelayedList+0x78>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039e6:	682b      	ldr	r3, [r5, #0]
 80039e8:	1e72      	subs	r2, r6, #1
 80039ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039ec:	b13e      	cbz	r6, 80039fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ee:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <prvAddCurrentTaskToDelayedList+0x9c>)
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	6829      	ldr	r1, [r5, #0]
}
 80039f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039f8:	3104      	adds	r1, #4
 80039fa:	f7ff be5d 	b.w	80036b8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fe:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	6829      	ldr	r1, [r5, #0]
 8003a04:	3104      	adds	r1, #4
 8003a06:	f7ff fe57 	bl	80036b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
}
 8003a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a10:	6829      	ldr	r1, [r5, #0]
 8003a12:	4809      	ldr	r0, [pc, #36]	@ (8003a38 <prvAddCurrentTaskToDelayedList+0xa0>)
}
 8003a14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a18:	3104      	adds	r1, #4
 8003a1a:	f7ff be3f 	b.w	800369c <vListInsertEnd>
 8003a1e:	bf00      	nop
 8003a20:	20000698 	.word	0x20000698
 8003a24:	2000079c 	.word	0x2000079c
 8003a28:	20000694 	.word	0x20000694
 8003a2c:	200006e4 	.word	0x200006e4
 8003a30:	2000067c 	.word	0x2000067c
 8003a34:	200006e0 	.word	0x200006e0
 8003a38:	200006a0 	.word	0x200006a0

08003a3c <prvDeleteTCB>:
	{
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003a40:	304c      	adds	r0, #76	@ 0x4c
 8003a42:	f001 fb71 	bl	8005128 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a46:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 8003a4a:	b163      	cbz	r3, 8003a66 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d013      	beq.n	8003a78 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d010      	beq.n	8003a76 <prvDeleteTCB+0x3a>
 8003a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	e7fe      	b.n	8003a64 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8003a66:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003a68:	f000 fd94 	bl	8004594 <vPortFree>
				vPortFree( pxTCB );
 8003a6c:	4620      	mov	r0, r4
	}
 8003a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003a72:	f000 bd8f 	b.w	8004594 <vPortFree>
	}
 8003a76:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8003a78:	4620      	mov	r0, r4
	}
 8003a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003a7e:	f000 bd89 	b.w	8004594 <vPortFree>
 8003a82:	bf00      	nop

08003a84 <prvIdleTask>:
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	4c15      	ldr	r4, [pc, #84]	@ (8003adc <prvIdleTask+0x58>)
 8003a88:	4e15      	ldr	r6, [pc, #84]	@ (8003ae0 <prvIdleTask+0x5c>)
 8003a8a:	4d16      	ldr	r5, [pc, #88]	@ (8003ae4 <prvIdleTask+0x60>)
 8003a8c:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003ae8 <prvIdleTask+0x64>
				taskYIELD();
 8003a90:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8003a94:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 8003a98:	e011      	b.n	8003abe <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8003a9a:	f000 fb9b 	bl	80041d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a9e:	68f3      	ldr	r3, [r6, #12]
 8003aa0:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa2:	1d38      	adds	r0, r7, #4
 8003aa4:	f7ff fe20 	bl	80036e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003ab4:	f000 fbb0 	bl	8004218 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003ab8:	4638      	mov	r0, r7
 8003aba:	f7ff ffbf 	bl	8003a3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ea      	bne.n	8003a9a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ac4:	f8da 3000 	ldr.w	r3, [sl]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d9f8      	bls.n	8003abe <prvIdleTask+0x3a>
				taskYIELD();
 8003acc:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	e7f1      	b.n	8003abe <prvIdleTask+0x3a>
 8003ada:	bf00      	nop
 8003adc:	200006b4 	.word	0x200006b4
 8003ae0:	200006b8 	.word	0x200006b8
 8003ae4:	2000069c 	.word	0x2000069c
 8003ae8:	20000710 	.word	0x20000710

08003aec <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003af4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003af8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8003afa:	3a01      	subs	r2, #1
 8003afc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003b00:	4606      	mov	r6, r0
 8003b02:	461f      	mov	r7, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b04:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	d042      	beq.n	8003b92 <prvInitialiseNewTask.constprop.0+0xa6>
 8003b0c:	f101 3cff 	add.w	ip, r1, #4294967295
 8003b10:	f104 0333 	add.w	r3, r4, #51	@ 0x33
 8003b14:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b16:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8003b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8003b1e:	b10a      	cbz	r2, 8003b24 <prvInitialiseNewTask.constprop.0+0x38>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b20:	458c      	cmp	ip, r1
 8003b22:	d1f8      	bne.n	8003b16 <prvInitialiseNewTask.constprop.0+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b24:	2300      	movs	r3, #0
 8003b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b2a:	9b08      	ldr	r3, [sp, #32]
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	bf28      	it	cs
 8003b30:	2306      	movcs	r3, #6
		pxNewTCB->uxMutexesHeld = 0;
 8003b32:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8003b36:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003b38:	6463      	str	r3, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b3a:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8003b3c:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b40:	4699      	mov	r9, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b42:	f7ff fda7 	bl	8003694 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b46:	f104 0018 	add.w	r0, r4, #24
 8003b4a:	f7ff fda3 	bl	8003694 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4e:	f1c9 0307 	rsb	r3, r9, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b52:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b54:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8003b56:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b5a:	4651      	mov	r1, sl
 8003b5c:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b5e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b60:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b62:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b66:	f001 fac2 	bl	80050ee <memset>
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <prvInitialiseNewTask.constprop.0+0xac>)
 8003b6c:	6523      	str	r3, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b6e:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b70:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 8003b74:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b76:	463a      	mov	r2, r7
 8003b78:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b7a:	6565      	str	r5, [r4, #84]	@ 0x54
 8003b7c:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b7e:	f000 fb03 	bl	8004188 <pxPortInitialiseStack>
 8003b82:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8003b84:	f1b8 0f00 	cmp.w	r8, #0
 8003b88:	d001      	beq.n	8003b8e <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b8a:	f8c8 4000 	str.w	r4, [r8]
}
 8003b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b92:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8003b96:	e7c8      	b.n	8003b2a <prvInitialiseNewTask.constprop.0+0x3e>
 8003b98:	20002af0 	.word	0x20002af0

08003b9c <xTaskCreateStatic>:
	{
 8003b9c:	b530      	push	{r4, r5, lr}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8003ba2:	b1c4      	cbz	r4, 8003bd6 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8003ba4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003ba6:	b16d      	cbz	r5, 8003bc4 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ba8:	25a0      	movs	r5, #160	@ 0xa0
 8003baa:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bac:	9d05      	ldr	r5, [sp, #20]
 8003bae:	2da0      	cmp	r5, #160	@ 0xa0
 8003bb0:	d01a      	beq.n	8003be8 <xTaskCreateStatic+0x4c>
 8003bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	e7fe      	b.n	8003bc2 <xTaskCreateStatic+0x26>
 8003bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8003bd4:	e7fe      	b.n	8003bd4 <xTaskCreateStatic+0x38>
 8003bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8003be6:	e7fe      	b.n	8003be6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003be8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003bea:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bec:	2402      	movs	r4, #2
 8003bee:	f885 409d 	strb.w	r4, [r5, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bf2:	ac04      	add	r4, sp, #16
 8003bf4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003bf8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003bfa:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bfc:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bfe:	f7ff ff75 	bl	8003aec <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c02:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003c04:	f7ff fe42 	bl	800388c <prvAddNewTaskToReadyList>
	}
 8003c08:	9804      	ldr	r0, [sp, #16]
 8003c0a:	b007      	add	sp, #28
 8003c0c:	bd30      	pop	{r4, r5, pc}
 8003c0e:	bf00      	nop

08003c10 <xTaskCreate>:
	{
 8003c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c14:	4607      	mov	r7, r0
 8003c16:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c18:	0090      	lsls	r0, r2, #2
	{
 8003c1a:	4615      	mov	r5, r2
 8003c1c:	4688      	mov	r8, r1
 8003c1e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c20:	f000 fc24 	bl	800446c <pvPortMalloc>
			if( pxStack != NULL )
 8003c24:	b1f0      	cbz	r0, 8003c64 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c26:	4604      	mov	r4, r0
 8003c28:	20a0      	movs	r0, #160	@ 0xa0
 8003c2a:	f000 fc1f 	bl	800446c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003c2e:	4606      	mov	r6, r0
 8003c30:	b1a8      	cbz	r0, 8003c5e <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8003c32:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c34:	2400      	movs	r4, #0
 8003c36:	f886 409d 	strb.w	r4, [r6, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c3a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8003c3c:	9401      	str	r4, [sp, #4]
 8003c3e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8003c40:	9602      	str	r6, [sp, #8]
 8003c42:	464b      	mov	r3, r9
 8003c44:	462a      	mov	r2, r5
 8003c46:	4641      	mov	r1, r8
 8003c48:	4638      	mov	r0, r7
 8003c4a:	9400      	str	r4, [sp, #0]
 8003c4c:	f7ff ff4e 	bl	8003aec <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7ff fe1b 	bl	800388c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c56:	2001      	movs	r0, #1
	}
 8003c58:	b005      	add	sp, #20
 8003c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f000 fc98 	bl	8004594 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8003c68:	b005      	add	sp, #20
 8003c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c6e:	bf00      	nop

08003c70 <vTaskStartScheduler>:
{
 8003c70:	b510      	push	{r4, lr}
 8003c72:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c74:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c76:	aa07      	add	r2, sp, #28
 8003c78:	a906      	add	r1, sp, #24
 8003c7a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c7c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c80:	f7fd f980 	bl	8000f84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c84:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8003c88:	4913      	ldr	r1, [pc, #76]	@ (8003cd8 <vTaskStartScheduler+0x68>)
 8003c8a:	4814      	ldr	r0, [pc, #80]	@ (8003cdc <vTaskStartScheduler+0x6c>)
 8003c8c:	9400      	str	r4, [sp, #0]
 8003c8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c92:	9a07      	ldr	r2, [sp, #28]
 8003c94:	4623      	mov	r3, r4
 8003c96:	f7ff ff81 	bl	8003b9c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003c9a:	b1d0      	cbz	r0, 8003cd2 <vTaskStartScheduler+0x62>
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce0 <vTaskStartScheduler+0x70>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <vTaskStartScheduler+0x74>)
 8003cb0:	490d      	ldr	r1, [pc, #52]	@ (8003ce8 <vTaskStartScheduler+0x78>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	6010      	str	r0, [r2, #0]
		xSchedulerRunning = pdTRUE;
 8003cba:	4a0c      	ldr	r2, [pc, #48]	@ (8003cec <vTaskStartScheduler+0x7c>)
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf0 <vTaskStartScheduler+0x80>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cc2:	334c      	adds	r3, #76	@ 0x4c
 8003cc4:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cc6:	6014      	str	r4, [r2, #0]
}
 8003cc8:	b008      	add	sp, #32
 8003cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003cce:	f000 bb13 	b.w	80042f8 <xPortStartScheduler>
}
 8003cd2:	b008      	add	sp, #32
 8003cd4:	bd10      	pop	{r4, pc}
 8003cd6:	bf00      	nop
 8003cd8:	08008594 	.word	0x08008594
 8003cdc:	08003a85 	.word	0x08003a85
 8003ce0:	2000067c 	.word	0x2000067c
 8003ce4:	2000079c 	.word	0x2000079c
 8003ce8:	2000001c 	.word	0x2000001c
 8003cec:	20000690 	.word	0x20000690
 8003cf0:	20000698 	.word	0x20000698

08003cf4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003cf4:	4a02      	ldr	r2, [pc, #8]	@ (8003d00 <vTaskSuspendAll+0xc>)
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000678 	.word	0x20000678

08003d04 <xTaskIncrementTick>:
{
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d08:	4b4e      	ldr	r3, [pc, #312]	@ (8003e44 <xTaskIncrementTick+0x140>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
{
 8003d0c:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d148      	bne.n	8003da4 <xTaskIncrementTick+0xa0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d12:	4b4d      	ldr	r3, [pc, #308]	@ (8003e48 <xTaskIncrementTick+0x144>)
 8003d14:	681d      	ldr	r5, [r3, #0]
 8003d16:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003d18:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d1a:	2d00      	cmp	r5, #0
 8003d1c:	d04b      	beq.n	8003db6 <xTaskIncrementTick+0xb2>
 8003d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e4c <xTaskIncrementTick+0x148>)
 8003d20:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d22:	9b01      	ldr	r3, [sp, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429d      	cmp	r5, r3
 8003d28:	d352      	bcc.n	8003dd0 <xTaskIncrementTick+0xcc>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d2a:	4e49      	ldr	r6, [pc, #292]	@ (8003e50 <xTaskIncrementTick+0x14c>)
 8003d2c:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8003e68 <xTaskIncrementTick+0x164>
 8003d30:	6833      	ldr	r3, [r6, #0]
 8003d32:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8003e6c <xTaskIncrementTick+0x168>
 8003d36:	681c      	ldr	r4, [r3, #0]
 8003d38:	2c00      	cmp	r4, #0
 8003d3a:	d075      	beq.n	8003e28 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList( pxTCB );
 8003d3c:	4f45      	ldr	r7, [pc, #276]	@ (8003e54 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 8003d3e:	2400      	movs	r4, #0
 8003d40:	e022      	b.n	8003d88 <xTaskIncrementTick+0x84>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d42:	f7ff fcd1 	bl	80036e8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d46:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d4a:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d4e:	b10a      	cbz	r2, 8003d54 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d50:	f7ff fcca 	bl	80036e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d54:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4082      	lsls	r2, r0
 8003d5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003d62:	431a      	orrs	r2, r3
 8003d64:	4651      	mov	r1, sl
 8003d66:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8003d6a:	603a      	str	r2, [r7, #0]
 8003d6c:	f7ff fc96 	bl	800369c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d70:	f8d9 3000 	ldr.w	r3, [r9]
 8003d74:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	bf28      	it	cs
 8003d7e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d80:	6833      	ldr	r3, [r6, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d04f      	beq.n	8003e28 <xTaskIncrementTick+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d88:	6833      	ldr	r3, [r6, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d90:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d94:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 8003d98:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d9a:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8003d9c:	d2d1      	bcs.n	8003d42 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 8003d9e:	9b01      	ldr	r3, [sp, #4]
 8003da0:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003da2:	e01a      	b.n	8003dda <xTaskIncrementTick+0xd6>
		++xPendedTicks;
 8003da4:	4a2c      	ldr	r2, [pc, #176]	@ (8003e58 <xTaskIncrementTick+0x154>)
 8003da6:	6813      	ldr	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003da8:	2400      	movs	r4, #0
		++xPendedTicks;
 8003daa:	3301      	adds	r3, #1
}
 8003dac:	4620      	mov	r0, r4
		++xPendedTicks;
 8003dae:	6013      	str	r3, [r2, #0]
}
 8003db0:	b003      	add	sp, #12
 8003db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8003db6:	4b26      	ldr	r3, [pc, #152]	@ (8003e50 <xTaskIncrementTick+0x14c>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	b30a      	cbz	r2, 8003e02 <xTaskIncrementTick+0xfe>
 8003dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	e7fe      	b.n	8003dce <xTaskIncrementTick+0xca>
 8003dd0:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8003e68 <xTaskIncrementTick+0x164>
 8003dd4:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8003e6c <xTaskIncrementTick+0x168>
BaseType_t xSwitchRequired = pdFALSE;
 8003dd8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dda:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 8003dde:	491f      	ldr	r1, [pc, #124]	@ (8003e5c <xTaskIncrementTick+0x158>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 8003dec:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8003dee:	2a02      	cmp	r2, #2
 8003df0:	bf28      	it	cs
 8003df2:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf18      	it	ne
 8003df8:	2401      	movne	r4, #1
}
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	b003      	add	sp, #12
 8003dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8003e02:	4a17      	ldr	r2, [pc, #92]	@ (8003e60 <xTaskIncrementTick+0x15c>)
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	6811      	ldr	r1, [r2, #0]
 8003e08:	6019      	str	r1, [r3, #0]
 8003e0a:	4916      	ldr	r1, [pc, #88]	@ (8003e64 <xTaskIncrementTick+0x160>)
 8003e0c:	6010      	str	r0, [r2, #0]
 8003e0e:	680a      	ldr	r2, [r1, #0]
 8003e10:	3201      	adds	r2, #1
 8003e12:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	b95a      	cbnz	r2, 8003e32 <xTaskIncrementTick+0x12e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e4c <xTaskIncrementTick+0x148>)
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e77c      	b.n	8003d22 <xTaskIncrementTick+0x1e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e28:	9a01      	ldr	r2, [sp, #4]
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	6013      	str	r3, [r2, #0]
					break;
 8003e30:	e7d3      	b.n	8003dda <xTaskIncrementTick+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e32:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e34:	4a05      	ldr	r2, [pc, #20]	@ (8003e4c <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e36:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e38:	9201      	str	r2, [sp, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	e76f      	b.n	8003d22 <xTaskIncrementTick+0x1e>
 8003e42:	bf00      	nop
 8003e44:	20000678 	.word	0x20000678
 8003e48:	20000698 	.word	0x20000698
 8003e4c:	2000067c 	.word	0x2000067c
 8003e50:	200006e4 	.word	0x200006e4
 8003e54:	20000694 	.word	0x20000694
 8003e58:	2000068c 	.word	0x2000068c
 8003e5c:	20000688 	.word	0x20000688
 8003e60:	200006e0 	.word	0x200006e0
 8003e64:	20000684 	.word	0x20000684
 8003e68:	20000710 	.word	0x20000710
 8003e6c:	2000079c 	.word	0x2000079c

08003e70 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8003e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 8003e74:	f000 f9ae 	bl	80041d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003e78:	4b39      	ldr	r3, [pc, #228]	@ (8003f60 <xTaskResumeAll.part.0+0xf0>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d15b      	bne.n	8003f3e <xTaskResumeAll.part.0+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e86:	4b37      	ldr	r3, [pc, #220]	@ (8003f64 <xTaskResumeAll.part.0+0xf4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d057      	beq.n	8003f3e <xTaskResumeAll.part.0+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e8e:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8003f7c <xTaskResumeAll.part.0+0x10c>
 8003e92:	f8da 3000 	ldr.w	r3, [sl]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d05e      	beq.n	8003f58 <xTaskResumeAll.part.0+0xe8>
 8003e9a:	4d33      	ldr	r5, [pc, #204]	@ (8003f68 <xTaskResumeAll.part.0+0xf8>)
 8003e9c:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8003f80 <xTaskResumeAll.part.0+0x110>
 8003ea0:	4f32      	ldr	r7, [pc, #200]	@ (8003f6c <xTaskResumeAll.part.0+0xfc>)
 8003ea2:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8003f84 <xTaskResumeAll.part.0+0x114>
					prvAddTaskToReadyList( pxTCB );
 8003ea6:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8003eac:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eae:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eb2:	f104 0018 	add.w	r0, r4, #24
 8003eb6:	f7ff fc17 	bl	80036e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eba:	4658      	mov	r0, fp
 8003ebc:	f7ff fc14 	bl	80036e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ec0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003ec2:	682a      	ldr	r2, [r5, #0]
 8003ec4:	fa06 f300 	lsl.w	r3, r6, r0
 8003ec8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	4659      	mov	r1, fp
 8003ed0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	f7ff fbe1 	bl	800369c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003ee2:	bf28      	it	cs
 8003ee4:	f8c9 6000 	strcs.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee8:	f8da 3000 	ldr.w	r3, [sl]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1db      	bne.n	8003ea8 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <xTaskResumeAll.part.0+0x100>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	bb42      	cbnz	r2, 8003f4a <xTaskResumeAll.part.0+0xda>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <xTaskResumeAll.part.0+0x104>)
 8003efa:	f04f 32ff 	mov.w	r2, #4294967295
 8003efe:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f00:	4e1d      	ldr	r6, [pc, #116]	@ (8003f78 <xTaskResumeAll.part.0+0x108>)
 8003f02:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8003f04:	b144      	cbz	r4, 8003f18 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8003f06:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003f08:	f7ff fefc 	bl	8003d04 <xTaskIncrementTick>
 8003f0c:	b108      	cbz	r0, 8003f12 <xTaskResumeAll.part.0+0xa2>
								xYieldPending = pdTRUE;
 8003f0e:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f12:	3c01      	subs	r4, #1
 8003f14:	d1f8      	bne.n	8003f08 <xTaskResumeAll.part.0+0x98>
						xPendedTicks = 0;
 8003f16:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8003f18:	f8d9 3000 	ldr.w	r3, [r9]
 8003f1c:	b17b      	cbz	r3, 8003f3e <xTaskResumeAll.part.0+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8003f1e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f26:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003f32:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003f34:	f000 f970 	bl	8004218 <vPortExitCritical>
}
 8003f38:	4620      	mov	r0, r4
 8003f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8003f3e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003f40:	f000 f96a 	bl	8004218 <vPortExitCritical>
}
 8003f44:	4620      	mov	r0, r4
 8003f46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f4a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f4c:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <xTaskResumeAll.part.0+0x104>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f4e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f50:	68d2      	ldr	r2, [r2, #12]
 8003f52:	6852      	ldr	r2, [r2, #4]
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	e7d3      	b.n	8003f00 <xTaskResumeAll.part.0+0x90>
 8003f58:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 8003f84 <xTaskResumeAll.part.0+0x114>
 8003f5c:	e7d0      	b.n	8003f00 <xTaskResumeAll.part.0+0x90>
 8003f5e:	bf00      	nop
 8003f60:	20000678 	.word	0x20000678
 8003f64:	2000069c 	.word	0x2000069c
 8003f68:	20000694 	.word	0x20000694
 8003f6c:	2000079c 	.word	0x2000079c
 8003f70:	200006e4 	.word	0x200006e4
 8003f74:	2000067c 	.word	0x2000067c
 8003f78:	2000068c 	.word	0x2000068c
 8003f7c:	200006cc 	.word	0x200006cc
 8003f80:	20000710 	.word	0x20000710
 8003f84:	20000688 	.word	0x20000688

08003f88 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <xTaskResumeAll+0x1c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	b943      	cbnz	r3, 8003fa0 <xTaskResumeAll+0x18>
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	e7fe      	b.n	8003f9e <xTaskResumeAll+0x16>
 8003fa0:	f7ff bf66 	b.w	8003e70 <xTaskResumeAll.part.0>
 8003fa4:	20000678 	.word	0x20000678

08003fa8 <vTaskDelay>:
	{
 8003fa8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003faa:	b950      	cbnz	r0, 8003fc2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8003fac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	f3bf 8f6f 	isb	sy
	}
 8003fc0:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003fc2:	4c10      	ldr	r4, [pc, #64]	@ (8004004 <vTaskDelay+0x5c>)
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	b141      	cbz	r1, 8003fda <vTaskDelay+0x32>
 8003fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	e7fe      	b.n	8003fd8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fe0:	f7ff fcda 	bl	8003998 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	b943      	cbnz	r3, 8003ffa <vTaskDelay+0x52>
 8003fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	e7fe      	b.n	8003ff8 <vTaskDelay+0x50>
 8003ffa:	f7ff ff39 	bl	8003e70 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d0d4      	beq.n	8003fac <vTaskDelay+0x4>
	}
 8004002:	bd10      	pop	{r4, pc}
 8004004:	20000678 	.word	0x20000678

08004008 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004008:	4b18      	ldr	r3, [pc, #96]	@ (800406c <vTaskSwitchContext+0x64>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	b11b      	cbz	r3, 8004016 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800400e:	4b18      	ldr	r3, [pc, #96]	@ (8004070 <vTaskSwitchContext+0x68>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8004016:	4916      	ldr	r1, [pc, #88]	@ (8004070 <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004018:	4a16      	ldr	r2, [pc, #88]	@ (8004074 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 800401a:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800401c:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f1c3 031f 	rsb	r3, r3, #31
 8004028:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800402c:	4912      	ldr	r1, [pc, #72]	@ (8004078 <vTaskSwitchContext+0x70>)
 800402e:	009a      	lsls	r2, r3, #2
 8004030:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004034:	5888      	ldr	r0, [r1, r2]
 8004036:	b940      	cbnz	r0, 800404a <vTaskSwitchContext+0x42>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	e7fe      	b.n	8004048 <vTaskSwitchContext+0x40>
 800404a:	6858      	ldr	r0, [r3, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	6840      	ldr	r0, [r0, #4]
 8004050:	6058      	str	r0, [r3, #4]
 8004052:	440a      	add	r2, r1
 8004054:	4290      	cmp	r0, r2
 8004056:	bf04      	itt	eq
 8004058:	6840      	ldreq	r0, [r0, #4]
 800405a:	6058      	streq	r0, [r3, #4]
 800405c:	4b07      	ldr	r3, [pc, #28]	@ (800407c <vTaskSwitchContext+0x74>)
 800405e:	68c2      	ldr	r2, [r0, #12]
 8004060:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a06      	ldr	r2, [pc, #24]	@ (8004080 <vTaskSwitchContext+0x78>)
 8004066:	334c      	adds	r3, #76	@ 0x4c
 8004068:	6013      	str	r3, [r2, #0]
}
 800406a:	4770      	bx	lr
 800406c:	20000678 	.word	0x20000678
 8004070:	20000688 	.word	0x20000688
 8004074:	20000694 	.word	0x20000694
 8004078:	20000710 	.word	0x20000710
 800407c:	2000079c 	.word	0x2000079c
 8004080:	2000001c 	.word	0x2000001c

08004084 <xTaskRemoveFromEventList>:
{
 8004084:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004086:	68c3      	ldr	r3, [r0, #12]
 8004088:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800408a:	b354      	cbz	r4, 80040e2 <xTaskRemoveFromEventList+0x5e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800408c:	f104 0518 	add.w	r5, r4, #24
 8004090:	4628      	mov	r0, r5
 8004092:	f7ff fb29 	bl	80036e8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004096:	4b17      	ldr	r3, [pc, #92]	@ (80040f4 <xTaskRemoveFromEventList+0x70>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	b173      	cbz	r3, 80040ba <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800409c:	4816      	ldr	r0, [pc, #88]	@ (80040f8 <xTaskRemoveFromEventList+0x74>)
 800409e:	4629      	mov	r1, r5
 80040a0:	f7ff fafc 	bl	800369c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040a4:	4b15      	ldr	r3, [pc, #84]	@ (80040fc <xTaskRemoveFromEventList+0x78>)
 80040a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80040ae:	bf83      	ittte	hi
 80040b0:	4b13      	ldrhi	r3, [pc, #76]	@ (8004100 <xTaskRemoveFromEventList+0x7c>)
 80040b2:	2001      	movhi	r0, #1
 80040b4:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80040b6:	2000      	movls	r0, #0
}
 80040b8:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040ba:	1d25      	adds	r5, r4, #4
 80040bc:	4628      	mov	r0, r5
 80040be:	f7ff fb13 	bl	80036e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040c2:	4a10      	ldr	r2, [pc, #64]	@ (8004104 <xTaskRemoveFromEventList+0x80>)
 80040c4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80040c6:	4629      	mov	r1, r5
 80040c8:	2301      	movs	r3, #1
 80040ca:	6815      	ldr	r5, [r2, #0]
 80040cc:	4083      	lsls	r3, r0
 80040ce:	432b      	orrs	r3, r5
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <xTaskRemoveFromEventList+0x84>)
 80040d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80040dc:	f7ff fade 	bl	800369c <vListInsertEnd>
 80040e0:	e7e0      	b.n	80040a4 <xTaskRemoveFromEventList+0x20>
 80040e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80040f2:	e7fe      	b.n	80040f2 <xTaskRemoveFromEventList+0x6e>
 80040f4:	20000678 	.word	0x20000678
 80040f8:	200006cc 	.word	0x200006cc
 80040fc:	2000079c 	.word	0x2000079c
 8004100:	20000688 	.word	0x20000688
 8004104:	20000694 	.word	0x20000694
 8004108:	20000710 	.word	0x20000710

0800410c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800410c:	4808      	ldr	r0, [pc, #32]	@ (8004130 <prvPortStartFirstTask+0x24>)
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	6800      	ldr	r0, [r0, #0]
 8004112:	f380 8808 	msr	MSP, r0
 8004116:	f04f 0000 	mov.w	r0, #0
 800411a:	f380 8814 	msr	CONTROL, r0
 800411e:	b662      	cpsie	i
 8004120:	b661      	cpsie	f
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	df00      	svc	0
 800412c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800412e:	0000      	.short	0x0000
 8004130:	e000ed08 	.word	0xe000ed08

08004134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004144 <vPortEnableVFP+0x10>
 8004138:	6801      	ldr	r1, [r0, #0]
 800413a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800413e:	6001      	str	r1, [r0, #0]
 8004140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004142:	0000      	.short	0x0000
 8004144:	e000ed88 	.word	0xe000ed88

08004148 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8004148:	4b0e      	ldr	r3, [pc, #56]	@ (8004184 <prvTaskExitError+0x3c>)
 800414a:	681b      	ldr	r3, [r3, #0]
{
 800414c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800414e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8004150:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8004152:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8004154:	d008      	beq.n	8004168 <prvTaskExitError+0x20>
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	e7fe      	b.n	8004166 <prvTaskExitError+0x1e>
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004178:	9b01      	ldr	r3, [sp, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0fc      	beq.n	8004178 <prvTaskExitError+0x30>
}
 800417e:	b002      	add	sp, #8
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	2000000c 	.word	0x2000000c

08004188 <pxPortInitialiseStack>:
{
 8004188:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800418a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800418e:	4c07      	ldr	r4, [pc, #28]	@ (80041ac <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004190:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004194:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004198:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800419c:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041a0:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 80041a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041a8:	3844      	subs	r0, #68	@ 0x44
 80041aa:	4770      	bx	lr
 80041ac:	08004149 	.word	0x08004149

080041b0 <SVC_Handler>:
	__asm volatile (
 80041b0:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <pxCurrentTCBConst2>)
 80041b2:	6819      	ldr	r1, [r3, #0]
 80041b4:	6808      	ldr	r0, [r1, #0]
 80041b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	f380 8809 	msr	PSP, r0
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f380 8811 	msr	BASEPRI, r0
 80041ca:	4770      	bx	lr
 80041cc:	f3af 8000 	nop.w

080041d0 <pxCurrentTCBConst2>:
 80041d0:	2000079c 	.word	0x2000079c

080041d4 <vPortEnterCritical>:
 80041d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80041e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004214 <vPortEnterCritical+0x40>)
 80041e6:	6813      	ldr	r3, [r2, #0]
 80041e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80041ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80041ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80041ee:	d000      	beq.n	80041f2 <vPortEnterCritical+0x1e>
}
 80041f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80041f6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f7      	beq.n	80041f0 <vPortEnterCritical+0x1c>
 8004200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	e7fe      	b.n	8004210 <vPortEnterCritical+0x3c>
 8004212:	bf00      	nop
 8004214:	2000000c 	.word	0x2000000c

08004218 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004218:	4a08      	ldr	r2, [pc, #32]	@ (800423c <vPortExitCritical+0x24>)
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	b943      	cbnz	r3, 8004230 <vPortExitCritical+0x18>
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	e7fe      	b.n	800422e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004230:	3b01      	subs	r3, #1
 8004232:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004234:	b90b      	cbnz	r3, 800423a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004236:	f383 8811 	msr	BASEPRI, r3
}
 800423a:	4770      	bx	lr
 800423c:	2000000c 	.word	0x2000000c

08004240 <PendSV_Handler>:
	__asm volatile
 8004240:	f3ef 8009 	mrs	r0, PSP
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <pxCurrentTCBConst>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	f01e 0f10 	tst.w	lr, #16
 8004250:	bf08      	it	eq
 8004252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425a:	6010      	str	r0, [r2, #0]
 800425c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004264:	f380 8811 	msr	BASEPRI, r0
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f7ff feca 	bl	8004008 <vTaskSwitchContext>
 8004274:	f04f 0000 	mov.w	r0, #0
 8004278:	f380 8811 	msr	BASEPRI, r0
 800427c:	bc09      	pop	{r0, r3}
 800427e:	6819      	ldr	r1, [r3, #0]
 8004280:	6808      	ldr	r0, [r1, #0]
 8004282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004286:	f01e 0f10 	tst.w	lr, #16
 800428a:	bf08      	it	eq
 800428c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004290:	f380 8809 	msr	PSP, r0
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	f3af 8000 	nop.w

080042a0 <pxCurrentTCBConst>:
 80042a0:	2000079c 	.word	0x2000079c

080042a4 <SysTick_Handler>:
{
 80042a4:	b508      	push	{r3, lr}
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80042b6:	f7ff fd25 	bl	8003d04 <xTaskIncrementTick>
 80042ba:	b128      	cbz	r0, 80042c8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80042c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80042c8:	2300      	movs	r3, #0
 80042ca:	f383 8811 	msr	BASEPRI, r3
}
 80042ce:	bd08      	pop	{r3, pc}

080042d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042d0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80042d4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042d6:	4906      	ldr	r1, [pc, #24]	@ (80042f0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042d8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042da:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042dc:	680b      	ldr	r3, [r1, #0]
 80042de:	4905      	ldr	r1, [pc, #20]	@ (80042f4 <vPortSetupTimerInterrupt+0x24>)
 80042e0:	fba1 1303 	umull	r1, r3, r1, r3
 80042e4:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042e6:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042e8:	3b01      	subs	r3, #1
 80042ea:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042ec:	6110      	str	r0, [r2, #16]
}
 80042ee:	4770      	bx	lr
 80042f0:	20000000 	.word	0x20000000
 80042f4:	10624dd3 	.word	0x10624dd3

080042f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80042fc:	4a3d      	ldr	r2, [pc, #244]	@ (80043f4 <xPortStartScheduler+0xfc>)
 80042fe:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8004302:	4291      	cmp	r1, r2
 8004304:	d041      	beq.n	800438a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004306:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800430a:	4b3b      	ldr	r3, [pc, #236]	@ (80043f8 <xPortStartScheduler+0x100>)
 800430c:	429a      	cmp	r2, r3
 800430e:	d033      	beq.n	8004378 <xPortStartScheduler+0x80>
{
 8004310:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004312:	4b3a      	ldr	r3, [pc, #232]	@ (80043fc <xPortStartScheduler+0x104>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004314:	4c3a      	ldr	r4, [pc, #232]	@ (8004400 <xPortStartScheduler+0x108>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004316:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004318:	483a      	ldr	r0, [pc, #232]	@ (8004404 <xPortStartScheduler+0x10c>)
{
 800431a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800431c:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004322:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800432c:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004330:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004334:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004338:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433a:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800433c:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800433e:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004340:	bf48      	it	mi
 8004342:	2206      	movmi	r2, #6
 8004344:	d50f      	bpl.n	8004366 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004346:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004352:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004356:	061b      	lsls	r3, r3, #24
 8004358:	4611      	mov	r1, r2
 800435a:	f102 32ff 	add.w	r2, r2, #4294967295
 800435e:	d4f2      	bmi.n	8004346 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004360:	2903      	cmp	r1, #3
 8004362:	d01b      	beq.n	800439c <xPortStartScheduler+0xa4>
 8004364:	6001      	str	r1, [r0, #0]
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	e7fe      	b.n	8004376 <xPortStartScheduler+0x7e>
 8004378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004388:	e7fe      	b.n	8004388 <xPortStartScheduler+0x90>
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800439a:	e7fe      	b.n	800439a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800439c:	9b01      	ldr	r3, [sp, #4]
 800439e:	4a17      	ldr	r2, [pc, #92]	@ (80043fc <xPortStartScheduler+0x104>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043a0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043a4:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043a8:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043aa:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043ac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043ae:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80043b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043b6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043ba:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80043be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043c2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80043c6:	f7ff ff83 	bl	80042d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80043ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004408 <xPortStartScheduler+0x110>)
 80043cc:	2500      	movs	r5, #0
 80043ce:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80043d0:	f7ff feb0 	bl	8004134 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043d4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80043d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80043dc:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80043e0:	f7ff fe94 	bl	800410c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80043e4:	f7ff fe10 	bl	8004008 <vTaskSwitchContext>
	prvTaskExitError();
 80043e8:	f7ff feae 	bl	8004148 <prvTaskExitError>
}
 80043ec:	4628      	mov	r0, r5
 80043ee:	b003      	add	sp, #12
 80043f0:	bd30      	pop	{r4, r5, pc}
 80043f2:	bf00      	nop
 80043f4:	410fc271 	.word	0x410fc271
 80043f8:	410fc270 	.word	0x410fc270
 80043fc:	e000e400 	.word	0xe000e400
 8004400:	200007a4 	.word	0x200007a4
 8004404:	200007a0 	.word	0x200007a0
 8004408:	2000000c 	.word	0x2000000c

0800440c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800440c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800440e:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <prvInsertBlockIntoFreeList+0x58>)
 8004410:	461a      	mov	r2, r3
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4283      	cmp	r3, r0
 8004416:	d3fb      	bcc.n	8004410 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004418:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800441a:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800441c:	eb02 0c04 	add.w	ip, r2, r4
 8004420:	4560      	cmp	r0, ip
 8004422:	d013      	beq.n	800444c <prvInsertBlockIntoFreeList+0x40>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004424:	1844      	adds	r4, r0, r1
 8004426:	42a3      	cmp	r3, r4
 8004428:	d006      	beq.n	8004438 <prvInsertBlockIntoFreeList+0x2c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800442a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800442c:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800442e:	bf18      	it	ne
 8004430:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004436:	4770      	bx	lr
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004438:	4c0b      	ldr	r4, [pc, #44]	@ (8004468 <prvInsertBlockIntoFreeList+0x5c>)
 800443a:	6824      	ldr	r4, [r4, #0]
 800443c:	42a3      	cmp	r3, r4
 800443e:	d0f4      	beq.n	800442a <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004440:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004444:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004446:	6003      	str	r3, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004448:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800444a:	e7ef      	b.n	800442c <prvInsertBlockIntoFreeList+0x20>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800444c:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800444e:	1850      	adds	r0, r2, r1
 8004450:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004452:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004454:	d1ed      	bne.n	8004432 <prvInsertBlockIntoFreeList+0x26>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004456:	4804      	ldr	r0, [pc, #16]	@ (8004468 <prvInsertBlockIntoFreeList+0x5c>)
 8004458:	6800      	ldr	r0, [r0, #0]
 800445a:	4283      	cmp	r3, r0
 800445c:	d0e9      	beq.n	8004432 <prvInsertBlockIntoFreeList+0x26>
		pxBlockToInsert = pxIterator;
 800445e:	4610      	mov	r0, r2
 8004460:	e7ee      	b.n	8004440 <prvInsertBlockIntoFreeList+0x34>
 8004462:	bf00      	nop
 8004464:	200007c0 	.word	0x200007c0
 8004468:	200007bc 	.word	0x200007bc

0800446c <pvPortMalloc>:
{
 800446c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 8004470:	4e40      	ldr	r6, [pc, #256]	@ (8004574 <pvPortMalloc+0x108>)
{
 8004472:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004474:	f7ff fc3e 	bl	8003cf4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004478:	6833      	ldr	r3, [r6, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d05c      	beq.n	8004538 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800447e:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <pvPortMalloc+0x10c>)
 8004480:	681d      	ldr	r5, [r3, #0]
 8004482:	422c      	tst	r4, r5
 8004484:	d12e      	bne.n	80044e4 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 8004486:	b36c      	cbz	r4, 80044e4 <pvPortMalloc+0x78>
				xWantedSize += xHeapStructSize;
 8004488:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800448c:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800448e:	bf1c      	itt	ne
 8004490:	f021 0107 	bicne.w	r1, r1, #7
 8004494:	3108      	addne	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004496:	b329      	cbz	r1, 80044e4 <pvPortMalloc+0x78>
 8004498:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 8004590 <pvPortMalloc+0x124>
 800449c:	f8d8 7000 	ldr.w	r7, [r8]
 80044a0:	428f      	cmp	r7, r1
 80044a2:	d31f      	bcc.n	80044e4 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 80044a4:	4835      	ldr	r0, [pc, #212]	@ (800457c <pvPortMalloc+0x110>)
 80044a6:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044a8:	e003      	b.n	80044b2 <pvPortMalloc+0x46>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	b123      	cbz	r3, 80044b8 <pvPortMalloc+0x4c>
					pxPreviousBlock = pxBlock;
 80044ae:	4620      	mov	r0, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80044b0:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044b2:	6862      	ldr	r2, [r4, #4]
 80044b4:	428a      	cmp	r2, r1
 80044b6:	d3f8      	bcc.n	80044aa <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	42a3      	cmp	r3, r4
 80044bc:	d012      	beq.n	80044e4 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044be:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044c0:	6826      	ldr	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044c2:	f8d0 9000 	ldr.w	r9, [r0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044c6:	6006      	str	r6, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d916      	bls.n	80044fa <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044cc:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044ce:	0742      	lsls	r2, r0, #29
 80044d0:	d00e      	beq.n	80044f0 <pvPortMalloc+0x84>
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	e7fe      	b.n	80044e2 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 80044e4:	f7ff fd50 	bl	8003f88 <xTaskResumeAll>
void *pvReturn = NULL;
 80044e8:	2600      	movs	r6, #0
}
 80044ea:	4630      	mov	r0, r6
 80044ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044f0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044f2:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044f4:	f7ff ff8a 	bl	800440c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044f8:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044fa:	4b21      	ldr	r3, [pc, #132]	@ (8004580 <pvPortMalloc+0x114>)
 80044fc:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044fe:	1abf      	subs	r7, r7, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004500:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8004502:	4920      	ldr	r1, [pc, #128]	@ (8004584 <pvPortMalloc+0x118>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004504:	bf38      	it	cc
 8004506:	601f      	strcc	r7, [r3, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004508:	432a      	orrs	r2, r5
					pxBlock->pxNextFreeBlock = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 8004510:	680b      	ldr	r3, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004512:	f8c8 7000 	str.w	r7, [r8]
					xNumberOfSuccessfulAllocations++;
 8004516:	3301      	adds	r3, #1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004518:	f109 0608 	add.w	r6, r9, #8
					xNumberOfSuccessfulAllocations++;
 800451c:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800451e:	f7ff fd33 	bl	8003f88 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004522:	0773      	lsls	r3, r6, #29
 8004524:	d0e1      	beq.n	80044ea <pvPortMalloc+0x7e>
 8004526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	e7fe      	b.n	8004536 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 8004538:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <pvPortMalloc+0x11c>)
	uxAddress -= xHeapStructSize;
 800453a:	4a14      	ldr	r2, [pc, #80]	@ (800458c <pvPortMalloc+0x120>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800453c:	4910      	ldr	r1, [pc, #64]	@ (8004580 <pvPortMalloc+0x114>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800453e:	4f0e      	ldr	r7, [pc, #56]	@ (8004578 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004540:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004542:	bf18      	it	ne
 8004544:	3307      	addne	r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004546:	4d0d      	ldr	r5, [pc, #52]	@ (800457c <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004548:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800454c:	bf18      	it	ne
 800454e:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004552:	602b      	str	r3, [r5, #0]
 8004554:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004556:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004558:	600b      	str	r3, [r1, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800455a:	490d      	ldr	r1, [pc, #52]	@ (8004590 <pvPortMalloc+0x124>)
	pxEnd = ( void * ) uxAddress;
 800455c:	6032      	str	r2, [r6, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800455e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004560:	2100      	movs	r1, #0
 8004562:	6069      	str	r1, [r5, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004564:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 8004568:	e9c2 1100 	strd	r1, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800456c:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800456e:	e9c0 2300 	strd	r2, r3, [r0]
}
 8004572:	e786      	b.n	8004482 <pvPortMalloc+0x16>
 8004574:	200007bc 	.word	0x200007bc
 8004578:	200007a8 	.word	0x200007a8
 800457c:	200007c0 	.word	0x200007c0
 8004580:	200007b4 	.word	0x200007b4
 8004584:	200007b0 	.word	0x200007b0
 8004588:	200007c8 	.word	0x200007c8
 800458c:	20002ae8 	.word	0x20002ae8
 8004590:	200007b8 	.word	0x200007b8

08004594 <vPortFree>:
	if( pv != NULL )
 8004594:	b1d0      	cbz	r0, 80045cc <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004596:	4a1c      	ldr	r2, [pc, #112]	@ (8004608 <vPortFree+0x74>)
 8004598:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	4213      	tst	r3, r2
 80045a0:	d00b      	beq.n	80045ba <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045a2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80045a6:	b191      	cbz	r1, 80045ce <vPortFree+0x3a>
 80045a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	e7fe      	b.n	80045b8 <vPortFree+0x24>
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045ca:	e7fe      	b.n	80045ca <vPortFree+0x36>
 80045cc:	4770      	bx	lr
{
 80045ce:	b500      	push	{lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045d0:	ea23 0302 	bic.w	r3, r3, r2
{
 80045d4:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045d6:	f840 3c04 	str.w	r3, [r0, #-4]
 80045da:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80045dc:	f7ff fb8a 	bl	8003cf4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045e0:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <vPortFree+0x78>)
 80045e2:	9801      	ldr	r0, [sp, #4]
 80045e4:	6811      	ldr	r1, [r2, #0]
 80045e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045ea:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045ec:	440b      	add	r3, r1
 80045ee:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045f0:	f7ff ff0c 	bl	800440c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80045f4:	4a06      	ldr	r2, [pc, #24]	@ (8004610 <vPortFree+0x7c>)
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	6013      	str	r3, [r2, #0]
}
 80045fc:	b003      	add	sp, #12
 80045fe:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8004602:	f7ff bcc1 	b.w	8003f88 <xTaskResumeAll>
 8004606:	bf00      	nop
 8004608:	200007a8 	.word	0x200007a8
 800460c:	200007b8 	.word	0x200007b8
 8004610:	200007ac 	.word	0x200007ac

08004614 <__cvt>:
 8004614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	ec57 6b10 	vmov	r6, r7, d0
 800461c:	2f00      	cmp	r7, #0
 800461e:	460c      	mov	r4, r1
 8004620:	4619      	mov	r1, r3
 8004622:	463b      	mov	r3, r7
 8004624:	bfbb      	ittet	lt
 8004626:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800462a:	461f      	movlt	r7, r3
 800462c:	2300      	movge	r3, #0
 800462e:	232d      	movlt	r3, #45	@ 0x2d
 8004630:	700b      	strb	r3, [r1, #0]
 8004632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004634:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004638:	4691      	mov	r9, r2
 800463a:	f023 0820 	bic.w	r8, r3, #32
 800463e:	bfbc      	itt	lt
 8004640:	4632      	movlt	r2, r6
 8004642:	4616      	movlt	r6, r2
 8004644:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004648:	d005      	beq.n	8004656 <__cvt+0x42>
 800464a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800464e:	d100      	bne.n	8004652 <__cvt+0x3e>
 8004650:	3401      	adds	r4, #1
 8004652:	2102      	movs	r1, #2
 8004654:	e000      	b.n	8004658 <__cvt+0x44>
 8004656:	2103      	movs	r1, #3
 8004658:	ab03      	add	r3, sp, #12
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	ab02      	add	r3, sp, #8
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	ec47 6b10 	vmov	d0, r6, r7
 8004664:	4653      	mov	r3, sl
 8004666:	4622      	mov	r2, r4
 8004668:	f000 feb6 	bl	80053d8 <_dtoa_r>
 800466c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004670:	4605      	mov	r5, r0
 8004672:	d119      	bne.n	80046a8 <__cvt+0x94>
 8004674:	f019 0f01 	tst.w	r9, #1
 8004678:	d00e      	beq.n	8004698 <__cvt+0x84>
 800467a:	eb00 0904 	add.w	r9, r0, r4
 800467e:	2200      	movs	r2, #0
 8004680:	2300      	movs	r3, #0
 8004682:	4630      	mov	r0, r6
 8004684:	4639      	mov	r1, r7
 8004686:	f7fc fa27 	bl	8000ad8 <__aeabi_dcmpeq>
 800468a:	b108      	cbz	r0, 8004690 <__cvt+0x7c>
 800468c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004690:	2230      	movs	r2, #48	@ 0x30
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	454b      	cmp	r3, r9
 8004696:	d31e      	bcc.n	80046d6 <__cvt+0xc2>
 8004698:	9b03      	ldr	r3, [sp, #12]
 800469a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800469c:	1b5b      	subs	r3, r3, r5
 800469e:	4628      	mov	r0, r5
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	b004      	add	sp, #16
 80046a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046ac:	eb00 0904 	add.w	r9, r0, r4
 80046b0:	d1e5      	bne.n	800467e <__cvt+0x6a>
 80046b2:	7803      	ldrb	r3, [r0, #0]
 80046b4:	2b30      	cmp	r3, #48	@ 0x30
 80046b6:	d10a      	bne.n	80046ce <__cvt+0xba>
 80046b8:	2200      	movs	r2, #0
 80046ba:	2300      	movs	r3, #0
 80046bc:	4630      	mov	r0, r6
 80046be:	4639      	mov	r1, r7
 80046c0:	f7fc fa0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80046c4:	b918      	cbnz	r0, 80046ce <__cvt+0xba>
 80046c6:	f1c4 0401 	rsb	r4, r4, #1
 80046ca:	f8ca 4000 	str.w	r4, [sl]
 80046ce:	f8da 3000 	ldr.w	r3, [sl]
 80046d2:	4499      	add	r9, r3
 80046d4:	e7d3      	b.n	800467e <__cvt+0x6a>
 80046d6:	1c59      	adds	r1, r3, #1
 80046d8:	9103      	str	r1, [sp, #12]
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e7d9      	b.n	8004692 <__cvt+0x7e>

080046de <__exponent>:
 80046de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046e0:	2900      	cmp	r1, #0
 80046e2:	bfba      	itte	lt
 80046e4:	4249      	neglt	r1, r1
 80046e6:	232d      	movlt	r3, #45	@ 0x2d
 80046e8:	232b      	movge	r3, #43	@ 0x2b
 80046ea:	2909      	cmp	r1, #9
 80046ec:	7002      	strb	r2, [r0, #0]
 80046ee:	7043      	strb	r3, [r0, #1]
 80046f0:	dd29      	ble.n	8004746 <__exponent+0x68>
 80046f2:	f10d 0307 	add.w	r3, sp, #7
 80046f6:	461d      	mov	r5, r3
 80046f8:	270a      	movs	r7, #10
 80046fa:	461a      	mov	r2, r3
 80046fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8004700:	fb07 1416 	mls	r4, r7, r6, r1
 8004704:	3430      	adds	r4, #48	@ 0x30
 8004706:	f802 4c01 	strb.w	r4, [r2, #-1]
 800470a:	460c      	mov	r4, r1
 800470c:	2c63      	cmp	r4, #99	@ 0x63
 800470e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004712:	4631      	mov	r1, r6
 8004714:	dcf1      	bgt.n	80046fa <__exponent+0x1c>
 8004716:	3130      	adds	r1, #48	@ 0x30
 8004718:	1e94      	subs	r4, r2, #2
 800471a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800471e:	1c41      	adds	r1, r0, #1
 8004720:	4623      	mov	r3, r4
 8004722:	42ab      	cmp	r3, r5
 8004724:	d30a      	bcc.n	800473c <__exponent+0x5e>
 8004726:	f10d 0309 	add.w	r3, sp, #9
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	42ac      	cmp	r4, r5
 800472e:	bf88      	it	hi
 8004730:	2300      	movhi	r3, #0
 8004732:	3302      	adds	r3, #2
 8004734:	4403      	add	r3, r0
 8004736:	1a18      	subs	r0, r3, r0
 8004738:	b003      	add	sp, #12
 800473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800473c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004740:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004744:	e7ed      	b.n	8004722 <__exponent+0x44>
 8004746:	2330      	movs	r3, #48	@ 0x30
 8004748:	3130      	adds	r1, #48	@ 0x30
 800474a:	7083      	strb	r3, [r0, #2]
 800474c:	70c1      	strb	r1, [r0, #3]
 800474e:	1d03      	adds	r3, r0, #4
 8004750:	e7f1      	b.n	8004736 <__exponent+0x58>
	...

08004754 <_printf_float>:
 8004754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004758:	b08d      	sub	sp, #52	@ 0x34
 800475a:	460c      	mov	r4, r1
 800475c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004760:	4616      	mov	r6, r2
 8004762:	461f      	mov	r7, r3
 8004764:	4605      	mov	r5, r0
 8004766:	f000 fccb 	bl	8005100 <_localeconv_r>
 800476a:	6803      	ldr	r3, [r0, #0]
 800476c:	9304      	str	r3, [sp, #16]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fb fd86 	bl	8000280 <strlen>
 8004774:	2300      	movs	r3, #0
 8004776:	930a      	str	r3, [sp, #40]	@ 0x28
 8004778:	f8d8 3000 	ldr.w	r3, [r8]
 800477c:	9005      	str	r0, [sp, #20]
 800477e:	3307      	adds	r3, #7
 8004780:	f023 0307 	bic.w	r3, r3, #7
 8004784:	f103 0208 	add.w	r2, r3, #8
 8004788:	f894 a018 	ldrb.w	sl, [r4, #24]
 800478c:	f8d4 b000 	ldr.w	fp, [r4]
 8004790:	f8c8 2000 	str.w	r2, [r8]
 8004794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004798:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800479c:	9307      	str	r3, [sp, #28]
 800479e:	f8cd 8018 	str.w	r8, [sp, #24]
 80047a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80047a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047aa:	4b9c      	ldr	r3, [pc, #624]	@ (8004a1c <_printf_float+0x2c8>)
 80047ac:	f04f 32ff 	mov.w	r2, #4294967295
 80047b0:	f7fc f9c4 	bl	8000b3c <__aeabi_dcmpun>
 80047b4:	bb70      	cbnz	r0, 8004814 <_printf_float+0xc0>
 80047b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ba:	4b98      	ldr	r3, [pc, #608]	@ (8004a1c <_printf_float+0x2c8>)
 80047bc:	f04f 32ff 	mov.w	r2, #4294967295
 80047c0:	f7fc f99e 	bl	8000b00 <__aeabi_dcmple>
 80047c4:	bb30      	cbnz	r0, 8004814 <_printf_float+0xc0>
 80047c6:	2200      	movs	r2, #0
 80047c8:	2300      	movs	r3, #0
 80047ca:	4640      	mov	r0, r8
 80047cc:	4649      	mov	r1, r9
 80047ce:	f7fc f98d 	bl	8000aec <__aeabi_dcmplt>
 80047d2:	b110      	cbz	r0, 80047da <_printf_float+0x86>
 80047d4:	232d      	movs	r3, #45	@ 0x2d
 80047d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047da:	4a91      	ldr	r2, [pc, #580]	@ (8004a20 <_printf_float+0x2cc>)
 80047dc:	4b91      	ldr	r3, [pc, #580]	@ (8004a24 <_printf_float+0x2d0>)
 80047de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80047e2:	bf8c      	ite	hi
 80047e4:	4690      	movhi	r8, r2
 80047e6:	4698      	movls	r8, r3
 80047e8:	2303      	movs	r3, #3
 80047ea:	6123      	str	r3, [r4, #16]
 80047ec:	f02b 0304 	bic.w	r3, fp, #4
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	f04f 0900 	mov.w	r9, #0
 80047f6:	9700      	str	r7, [sp, #0]
 80047f8:	4633      	mov	r3, r6
 80047fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80047fc:	4621      	mov	r1, r4
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 f9d2 	bl	8004ba8 <_printf_common>
 8004804:	3001      	adds	r0, #1
 8004806:	f040 808d 	bne.w	8004924 <_printf_float+0x1d0>
 800480a:	f04f 30ff 	mov.w	r0, #4294967295
 800480e:	b00d      	add	sp, #52	@ 0x34
 8004810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004814:	4642      	mov	r2, r8
 8004816:	464b      	mov	r3, r9
 8004818:	4640      	mov	r0, r8
 800481a:	4649      	mov	r1, r9
 800481c:	f7fc f98e 	bl	8000b3c <__aeabi_dcmpun>
 8004820:	b140      	cbz	r0, 8004834 <_printf_float+0xe0>
 8004822:	464b      	mov	r3, r9
 8004824:	2b00      	cmp	r3, #0
 8004826:	bfbc      	itt	lt
 8004828:	232d      	movlt	r3, #45	@ 0x2d
 800482a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800482e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a28 <_printf_float+0x2d4>)
 8004830:	4b7e      	ldr	r3, [pc, #504]	@ (8004a2c <_printf_float+0x2d8>)
 8004832:	e7d4      	b.n	80047de <_printf_float+0x8a>
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800483a:	9206      	str	r2, [sp, #24]
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	d13b      	bne.n	80048b8 <_printf_float+0x164>
 8004840:	2306      	movs	r3, #6
 8004842:	6063      	str	r3, [r4, #4]
 8004844:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004848:	2300      	movs	r3, #0
 800484a:	6022      	str	r2, [r4, #0]
 800484c:	9303      	str	r3, [sp, #12]
 800484e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004850:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004854:	ab09      	add	r3, sp, #36	@ 0x24
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	6861      	ldr	r1, [r4, #4]
 800485a:	ec49 8b10 	vmov	d0, r8, r9
 800485e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004862:	4628      	mov	r0, r5
 8004864:	f7ff fed6 	bl	8004614 <__cvt>
 8004868:	9b06      	ldr	r3, [sp, #24]
 800486a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800486c:	2b47      	cmp	r3, #71	@ 0x47
 800486e:	4680      	mov	r8, r0
 8004870:	d129      	bne.n	80048c6 <_printf_float+0x172>
 8004872:	1cc8      	adds	r0, r1, #3
 8004874:	db02      	blt.n	800487c <_printf_float+0x128>
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	4299      	cmp	r1, r3
 800487a:	dd41      	ble.n	8004900 <_printf_float+0x1ac>
 800487c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004880:	fa5f fa8a 	uxtb.w	sl, sl
 8004884:	3901      	subs	r1, #1
 8004886:	4652      	mov	r2, sl
 8004888:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800488c:	9109      	str	r1, [sp, #36]	@ 0x24
 800488e:	f7ff ff26 	bl	80046de <__exponent>
 8004892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004894:	1813      	adds	r3, r2, r0
 8004896:	2a01      	cmp	r2, #1
 8004898:	4681      	mov	r9, r0
 800489a:	6123      	str	r3, [r4, #16]
 800489c:	dc02      	bgt.n	80048a4 <_printf_float+0x150>
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	07d2      	lsls	r2, r2, #31
 80048a2:	d501      	bpl.n	80048a8 <_printf_float+0x154>
 80048a4:	3301      	adds	r3, #1
 80048a6:	6123      	str	r3, [r4, #16]
 80048a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0a2      	beq.n	80047f6 <_printf_float+0xa2>
 80048b0:	232d      	movs	r3, #45	@ 0x2d
 80048b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048b6:	e79e      	b.n	80047f6 <_printf_float+0xa2>
 80048b8:	9a06      	ldr	r2, [sp, #24]
 80048ba:	2a47      	cmp	r2, #71	@ 0x47
 80048bc:	d1c2      	bne.n	8004844 <_printf_float+0xf0>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1c0      	bne.n	8004844 <_printf_float+0xf0>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e7bd      	b.n	8004842 <_printf_float+0xee>
 80048c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048ca:	d9db      	bls.n	8004884 <_printf_float+0x130>
 80048cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80048d0:	d118      	bne.n	8004904 <_printf_float+0x1b0>
 80048d2:	2900      	cmp	r1, #0
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	dd0b      	ble.n	80048f0 <_printf_float+0x19c>
 80048d8:	6121      	str	r1, [r4, #16]
 80048da:	b913      	cbnz	r3, 80048e2 <_printf_float+0x18e>
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	07d0      	lsls	r0, r2, #31
 80048e0:	d502      	bpl.n	80048e8 <_printf_float+0x194>
 80048e2:	3301      	adds	r3, #1
 80048e4:	440b      	add	r3, r1
 80048e6:	6123      	str	r3, [r4, #16]
 80048e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80048ea:	f04f 0900 	mov.w	r9, #0
 80048ee:	e7db      	b.n	80048a8 <_printf_float+0x154>
 80048f0:	b913      	cbnz	r3, 80048f8 <_printf_float+0x1a4>
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	07d2      	lsls	r2, r2, #31
 80048f6:	d501      	bpl.n	80048fc <_printf_float+0x1a8>
 80048f8:	3302      	adds	r3, #2
 80048fa:	e7f4      	b.n	80048e6 <_printf_float+0x192>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e7f2      	b.n	80048e6 <_printf_float+0x192>
 8004900:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004906:	4299      	cmp	r1, r3
 8004908:	db05      	blt.n	8004916 <_printf_float+0x1c2>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	6121      	str	r1, [r4, #16]
 800490e:	07d8      	lsls	r0, r3, #31
 8004910:	d5ea      	bpl.n	80048e8 <_printf_float+0x194>
 8004912:	1c4b      	adds	r3, r1, #1
 8004914:	e7e7      	b.n	80048e6 <_printf_float+0x192>
 8004916:	2900      	cmp	r1, #0
 8004918:	bfd4      	ite	le
 800491a:	f1c1 0202 	rsble	r2, r1, #2
 800491e:	2201      	movgt	r2, #1
 8004920:	4413      	add	r3, r2
 8004922:	e7e0      	b.n	80048e6 <_printf_float+0x192>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	055a      	lsls	r2, r3, #21
 8004928:	d407      	bmi.n	800493a <_printf_float+0x1e6>
 800492a:	6923      	ldr	r3, [r4, #16]
 800492c:	4642      	mov	r2, r8
 800492e:	4631      	mov	r1, r6
 8004930:	4628      	mov	r0, r5
 8004932:	47b8      	blx	r7
 8004934:	3001      	adds	r0, #1
 8004936:	d12b      	bne.n	8004990 <_printf_float+0x23c>
 8004938:	e767      	b.n	800480a <_printf_float+0xb6>
 800493a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800493e:	f240 80dd 	bls.w	8004afc <_printf_float+0x3a8>
 8004942:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004946:	2200      	movs	r2, #0
 8004948:	2300      	movs	r3, #0
 800494a:	f7fc f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800494e:	2800      	cmp	r0, #0
 8004950:	d033      	beq.n	80049ba <_printf_float+0x266>
 8004952:	4a37      	ldr	r2, [pc, #220]	@ (8004a30 <_printf_float+0x2dc>)
 8004954:	2301      	movs	r3, #1
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	f43f af54 	beq.w	800480a <_printf_float+0xb6>
 8004962:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004966:	4543      	cmp	r3, r8
 8004968:	db02      	blt.n	8004970 <_printf_float+0x21c>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	07d8      	lsls	r0, r3, #31
 800496e:	d50f      	bpl.n	8004990 <_printf_float+0x23c>
 8004970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	f43f af45 	beq.w	800480a <_printf_float+0xb6>
 8004980:	f04f 0900 	mov.w	r9, #0
 8004984:	f108 38ff 	add.w	r8, r8, #4294967295
 8004988:	f104 0a1a 	add.w	sl, r4, #26
 800498c:	45c8      	cmp	r8, r9
 800498e:	dc09      	bgt.n	80049a4 <_printf_float+0x250>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	079b      	lsls	r3, r3, #30
 8004994:	f100 8103 	bmi.w	8004b9e <_printf_float+0x44a>
 8004998:	68e0      	ldr	r0, [r4, #12]
 800499a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800499c:	4298      	cmp	r0, r3
 800499e:	bfb8      	it	lt
 80049a0:	4618      	movlt	r0, r3
 80049a2:	e734      	b.n	800480e <_printf_float+0xba>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4652      	mov	r2, sl
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b8      	blx	r7
 80049ae:	3001      	adds	r0, #1
 80049b0:	f43f af2b 	beq.w	800480a <_printf_float+0xb6>
 80049b4:	f109 0901 	add.w	r9, r9, #1
 80049b8:	e7e8      	b.n	800498c <_printf_float+0x238>
 80049ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dc39      	bgt.n	8004a34 <_printf_float+0x2e0>
 80049c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a30 <_printf_float+0x2dc>)
 80049c2:	2301      	movs	r3, #1
 80049c4:	4631      	mov	r1, r6
 80049c6:	4628      	mov	r0, r5
 80049c8:	47b8      	blx	r7
 80049ca:	3001      	adds	r0, #1
 80049cc:	f43f af1d 	beq.w	800480a <_printf_float+0xb6>
 80049d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80049d4:	ea59 0303 	orrs.w	r3, r9, r3
 80049d8:	d102      	bne.n	80049e0 <_printf_float+0x28c>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	07d9      	lsls	r1, r3, #31
 80049de:	d5d7      	bpl.n	8004990 <_printf_float+0x23c>
 80049e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049e4:	4631      	mov	r1, r6
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b8      	blx	r7
 80049ea:	3001      	adds	r0, #1
 80049ec:	f43f af0d 	beq.w	800480a <_printf_float+0xb6>
 80049f0:	f04f 0a00 	mov.w	sl, #0
 80049f4:	f104 0b1a 	add.w	fp, r4, #26
 80049f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049fa:	425b      	negs	r3, r3
 80049fc:	4553      	cmp	r3, sl
 80049fe:	dc01      	bgt.n	8004a04 <_printf_float+0x2b0>
 8004a00:	464b      	mov	r3, r9
 8004a02:	e793      	b.n	800492c <_printf_float+0x1d8>
 8004a04:	2301      	movs	r3, #1
 8004a06:	465a      	mov	r2, fp
 8004a08:	4631      	mov	r1, r6
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b8      	blx	r7
 8004a0e:	3001      	adds	r0, #1
 8004a10:	f43f aefb 	beq.w	800480a <_printf_float+0xb6>
 8004a14:	f10a 0a01 	add.w	sl, sl, #1
 8004a18:	e7ee      	b.n	80049f8 <_printf_float+0x2a4>
 8004a1a:	bf00      	nop
 8004a1c:	7fefffff 	.word	0x7fefffff
 8004a20:	080085b8 	.word	0x080085b8
 8004a24:	080085b4 	.word	0x080085b4
 8004a28:	080085c0 	.word	0x080085c0
 8004a2c:	080085bc 	.word	0x080085bc
 8004a30:	080085c4 	.word	0x080085c4
 8004a34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a3a:	4553      	cmp	r3, sl
 8004a3c:	bfa8      	it	ge
 8004a3e:	4653      	movge	r3, sl
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	4699      	mov	r9, r3
 8004a44:	dc36      	bgt.n	8004ab4 <_printf_float+0x360>
 8004a46:	f04f 0b00 	mov.w	fp, #0
 8004a4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a4e:	f104 021a 	add.w	r2, r4, #26
 8004a52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a54:	9306      	str	r3, [sp, #24]
 8004a56:	eba3 0309 	sub.w	r3, r3, r9
 8004a5a:	455b      	cmp	r3, fp
 8004a5c:	dc31      	bgt.n	8004ac2 <_printf_float+0x36e>
 8004a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a60:	459a      	cmp	sl, r3
 8004a62:	dc3a      	bgt.n	8004ada <_printf_float+0x386>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	07da      	lsls	r2, r3, #31
 8004a68:	d437      	bmi.n	8004ada <_printf_float+0x386>
 8004a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6c:	ebaa 0903 	sub.w	r9, sl, r3
 8004a70:	9b06      	ldr	r3, [sp, #24]
 8004a72:	ebaa 0303 	sub.w	r3, sl, r3
 8004a76:	4599      	cmp	r9, r3
 8004a78:	bfa8      	it	ge
 8004a7a:	4699      	movge	r9, r3
 8004a7c:	f1b9 0f00 	cmp.w	r9, #0
 8004a80:	dc33      	bgt.n	8004aea <_printf_float+0x396>
 8004a82:	f04f 0800 	mov.w	r8, #0
 8004a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a8a:	f104 0b1a 	add.w	fp, r4, #26
 8004a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a90:	ebaa 0303 	sub.w	r3, sl, r3
 8004a94:	eba3 0309 	sub.w	r3, r3, r9
 8004a98:	4543      	cmp	r3, r8
 8004a9a:	f77f af79 	ble.w	8004990 <_printf_float+0x23c>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	465a      	mov	r2, fp
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	f43f aeae 	beq.w	800480a <_printf_float+0xb6>
 8004aae:	f108 0801 	add.w	r8, r8, #1
 8004ab2:	e7ec      	b.n	8004a8e <_printf_float+0x33a>
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b8      	blx	r7
 8004abc:	3001      	adds	r0, #1
 8004abe:	d1c2      	bne.n	8004a46 <_printf_float+0x2f2>
 8004ac0:	e6a3      	b.n	800480a <_printf_float+0xb6>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	9206      	str	r2, [sp, #24]
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	f43f ae9c 	beq.w	800480a <_printf_float+0xb6>
 8004ad2:	9a06      	ldr	r2, [sp, #24]
 8004ad4:	f10b 0b01 	add.w	fp, fp, #1
 8004ad8:	e7bb      	b.n	8004a52 <_printf_float+0x2fe>
 8004ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b8      	blx	r7
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d1c0      	bne.n	8004a6a <_printf_float+0x316>
 8004ae8:	e68f      	b.n	800480a <_printf_float+0xb6>
 8004aea:	9a06      	ldr	r2, [sp, #24]
 8004aec:	464b      	mov	r3, r9
 8004aee:	4442      	add	r2, r8
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	d1c3      	bne.n	8004a82 <_printf_float+0x32e>
 8004afa:	e686      	b.n	800480a <_printf_float+0xb6>
 8004afc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b00:	f1ba 0f01 	cmp.w	sl, #1
 8004b04:	dc01      	bgt.n	8004b0a <_printf_float+0x3b6>
 8004b06:	07db      	lsls	r3, r3, #31
 8004b08:	d536      	bpl.n	8004b78 <_printf_float+0x424>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4628      	mov	r0, r5
 8004b12:	47b8      	blx	r7
 8004b14:	3001      	adds	r0, #1
 8004b16:	f43f ae78 	beq.w	800480a <_printf_float+0xb6>
 8004b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4628      	mov	r0, r5
 8004b22:	47b8      	blx	r7
 8004b24:	3001      	adds	r0, #1
 8004b26:	f43f ae70 	beq.w	800480a <_printf_float+0xb6>
 8004b2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2300      	movs	r3, #0
 8004b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b36:	f7fb ffcf 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b3a:	b9c0      	cbnz	r0, 8004b6e <_printf_float+0x41a>
 8004b3c:	4653      	mov	r3, sl
 8004b3e:	f108 0201 	add.w	r2, r8, #1
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d10c      	bne.n	8004b66 <_printf_float+0x412>
 8004b4c:	e65d      	b.n	800480a <_printf_float+0xb6>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	465a      	mov	r2, fp
 8004b52:	4631      	mov	r1, r6
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b8      	blx	r7
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f ae56 	beq.w	800480a <_printf_float+0xb6>
 8004b5e:	f108 0801 	add.w	r8, r8, #1
 8004b62:	45d0      	cmp	r8, sl
 8004b64:	dbf3      	blt.n	8004b4e <_printf_float+0x3fa>
 8004b66:	464b      	mov	r3, r9
 8004b68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004b6c:	e6df      	b.n	800492e <_printf_float+0x1da>
 8004b6e:	f04f 0800 	mov.w	r8, #0
 8004b72:	f104 0b1a 	add.w	fp, r4, #26
 8004b76:	e7f4      	b.n	8004b62 <_printf_float+0x40e>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	4642      	mov	r2, r8
 8004b7c:	e7e1      	b.n	8004b42 <_printf_float+0x3ee>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	464a      	mov	r2, r9
 8004b82:	4631      	mov	r1, r6
 8004b84:	4628      	mov	r0, r5
 8004b86:	47b8      	blx	r7
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f43f ae3e 	beq.w	800480a <_printf_float+0xb6>
 8004b8e:	f108 0801 	add.w	r8, r8, #1
 8004b92:	68e3      	ldr	r3, [r4, #12]
 8004b94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b96:	1a5b      	subs	r3, r3, r1
 8004b98:	4543      	cmp	r3, r8
 8004b9a:	dcf0      	bgt.n	8004b7e <_printf_float+0x42a>
 8004b9c:	e6fc      	b.n	8004998 <_printf_float+0x244>
 8004b9e:	f04f 0800 	mov.w	r8, #0
 8004ba2:	f104 0919 	add.w	r9, r4, #25
 8004ba6:	e7f4      	b.n	8004b92 <_printf_float+0x43e>

08004ba8 <_printf_common>:
 8004ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	4616      	mov	r6, r2
 8004bae:	4698      	mov	r8, r3
 8004bb0:	688a      	ldr	r2, [r1, #8]
 8004bb2:	690b      	ldr	r3, [r1, #16]
 8004bb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	bfb8      	it	lt
 8004bbc:	4613      	movlt	r3, r2
 8004bbe:	6033      	str	r3, [r6, #0]
 8004bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bc4:	4607      	mov	r7, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	b10a      	cbz	r2, 8004bce <_printf_common+0x26>
 8004bca:	3301      	adds	r3, #1
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	0699      	lsls	r1, r3, #26
 8004bd2:	bf42      	ittt	mi
 8004bd4:	6833      	ldrmi	r3, [r6, #0]
 8004bd6:	3302      	addmi	r3, #2
 8004bd8:	6033      	strmi	r3, [r6, #0]
 8004bda:	6825      	ldr	r5, [r4, #0]
 8004bdc:	f015 0506 	ands.w	r5, r5, #6
 8004be0:	d106      	bne.n	8004bf0 <_printf_common+0x48>
 8004be2:	f104 0a19 	add.w	sl, r4, #25
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	6832      	ldr	r2, [r6, #0]
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	42ab      	cmp	r3, r5
 8004bee:	dc26      	bgt.n	8004c3e <_printf_common+0x96>
 8004bf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bf4:	6822      	ldr	r2, [r4, #0]
 8004bf6:	3b00      	subs	r3, #0
 8004bf8:	bf18      	it	ne
 8004bfa:	2301      	movne	r3, #1
 8004bfc:	0692      	lsls	r2, r2, #26
 8004bfe:	d42b      	bmi.n	8004c58 <_printf_common+0xb0>
 8004c00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c04:	4641      	mov	r1, r8
 8004c06:	4638      	mov	r0, r7
 8004c08:	47c8      	blx	r9
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d01e      	beq.n	8004c4c <_printf_common+0xa4>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	6922      	ldr	r2, [r4, #16]
 8004c12:	f003 0306 	and.w	r3, r3, #6
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	bf02      	ittt	eq
 8004c1a:	68e5      	ldreq	r5, [r4, #12]
 8004c1c:	6833      	ldreq	r3, [r6, #0]
 8004c1e:	1aed      	subeq	r5, r5, r3
 8004c20:	68a3      	ldr	r3, [r4, #8]
 8004c22:	bf0c      	ite	eq
 8004c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c28:	2500      	movne	r5, #0
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	bfc4      	itt	gt
 8004c2e:	1a9b      	subgt	r3, r3, r2
 8004c30:	18ed      	addgt	r5, r5, r3
 8004c32:	2600      	movs	r6, #0
 8004c34:	341a      	adds	r4, #26
 8004c36:	42b5      	cmp	r5, r6
 8004c38:	d11a      	bne.n	8004c70 <_printf_common+0xc8>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e008      	b.n	8004c50 <_printf_common+0xa8>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4652      	mov	r2, sl
 8004c42:	4641      	mov	r1, r8
 8004c44:	4638      	mov	r0, r7
 8004c46:	47c8      	blx	r9
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d103      	bne.n	8004c54 <_printf_common+0xac>
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c54:	3501      	adds	r5, #1
 8004c56:	e7c6      	b.n	8004be6 <_printf_common+0x3e>
 8004c58:	18e1      	adds	r1, r4, r3
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	2030      	movs	r0, #48	@ 0x30
 8004c5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c62:	4422      	add	r2, r4
 8004c64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	e7c7      	b.n	8004c00 <_printf_common+0x58>
 8004c70:	2301      	movs	r3, #1
 8004c72:	4622      	mov	r2, r4
 8004c74:	4641      	mov	r1, r8
 8004c76:	4638      	mov	r0, r7
 8004c78:	47c8      	blx	r9
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d0e6      	beq.n	8004c4c <_printf_common+0xa4>
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7d9      	b.n	8004c36 <_printf_common+0x8e>
	...

08004c84 <_printf_i>:
 8004c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	7e0f      	ldrb	r7, [r1, #24]
 8004c8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c8c:	2f78      	cmp	r7, #120	@ 0x78
 8004c8e:	4691      	mov	r9, r2
 8004c90:	4680      	mov	r8, r0
 8004c92:	460c      	mov	r4, r1
 8004c94:	469a      	mov	sl, r3
 8004c96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c9a:	d807      	bhi.n	8004cac <_printf_i+0x28>
 8004c9c:	2f62      	cmp	r7, #98	@ 0x62
 8004c9e:	d80a      	bhi.n	8004cb6 <_printf_i+0x32>
 8004ca0:	2f00      	cmp	r7, #0
 8004ca2:	f000 80d1 	beq.w	8004e48 <_printf_i+0x1c4>
 8004ca6:	2f58      	cmp	r7, #88	@ 0x58
 8004ca8:	f000 80b8 	beq.w	8004e1c <_printf_i+0x198>
 8004cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cb4:	e03a      	b.n	8004d2c <_printf_i+0xa8>
 8004cb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cba:	2b15      	cmp	r3, #21
 8004cbc:	d8f6      	bhi.n	8004cac <_printf_i+0x28>
 8004cbe:	a101      	add	r1, pc, #4	@ (adr r1, 8004cc4 <_printf_i+0x40>)
 8004cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cc4:	08004d1d 	.word	0x08004d1d
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004cad 	.word	0x08004cad
 8004cd0:	08004cad 	.word	0x08004cad
 8004cd4:	08004cad 	.word	0x08004cad
 8004cd8:	08004cad 	.word	0x08004cad
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004cad 	.word	0x08004cad
 8004ce4:	08004cad 	.word	0x08004cad
 8004ce8:	08004cad 	.word	0x08004cad
 8004cec:	08004cad 	.word	0x08004cad
 8004cf0:	08004e2f 	.word	0x08004e2f
 8004cf4:	08004d5b 	.word	0x08004d5b
 8004cf8:	08004de9 	.word	0x08004de9
 8004cfc:	08004cad 	.word	0x08004cad
 8004d00:	08004cad 	.word	0x08004cad
 8004d04:	08004e51 	.word	0x08004e51
 8004d08:	08004cad 	.word	0x08004cad
 8004d0c:	08004d5b 	.word	0x08004d5b
 8004d10:	08004cad 	.word	0x08004cad
 8004d14:	08004cad 	.word	0x08004cad
 8004d18:	08004df1 	.word	0x08004df1
 8004d1c:	6833      	ldr	r3, [r6, #0]
 8004d1e:	1d1a      	adds	r2, r3, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6032      	str	r2, [r6, #0]
 8004d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e09c      	b.n	8004e6a <_printf_i+0x1e6>
 8004d30:	6833      	ldr	r3, [r6, #0]
 8004d32:	6820      	ldr	r0, [r4, #0]
 8004d34:	1d19      	adds	r1, r3, #4
 8004d36:	6031      	str	r1, [r6, #0]
 8004d38:	0606      	lsls	r6, r0, #24
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0xbc>
 8004d3c:	681d      	ldr	r5, [r3, #0]
 8004d3e:	e003      	b.n	8004d48 <_printf_i+0xc4>
 8004d40:	0645      	lsls	r5, r0, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0xb8>
 8004d44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	da03      	bge.n	8004d54 <_printf_i+0xd0>
 8004d4c:	232d      	movs	r3, #45	@ 0x2d
 8004d4e:	426d      	negs	r5, r5
 8004d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d54:	4858      	ldr	r0, [pc, #352]	@ (8004eb8 <_printf_i+0x234>)
 8004d56:	230a      	movs	r3, #10
 8004d58:	e011      	b.n	8004d7e <_printf_i+0xfa>
 8004d5a:	6821      	ldr	r1, [r4, #0]
 8004d5c:	6833      	ldr	r3, [r6, #0]
 8004d5e:	0608      	lsls	r0, r1, #24
 8004d60:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d64:	d402      	bmi.n	8004d6c <_printf_i+0xe8>
 8004d66:	0649      	lsls	r1, r1, #25
 8004d68:	bf48      	it	mi
 8004d6a:	b2ad      	uxthmi	r5, r5
 8004d6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d6e:	4852      	ldr	r0, [pc, #328]	@ (8004eb8 <_printf_i+0x234>)
 8004d70:	6033      	str	r3, [r6, #0]
 8004d72:	bf14      	ite	ne
 8004d74:	230a      	movne	r3, #10
 8004d76:	2308      	moveq	r3, #8
 8004d78:	2100      	movs	r1, #0
 8004d7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d7e:	6866      	ldr	r6, [r4, #4]
 8004d80:	60a6      	str	r6, [r4, #8]
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	db05      	blt.n	8004d92 <_printf_i+0x10e>
 8004d86:	6821      	ldr	r1, [r4, #0]
 8004d88:	432e      	orrs	r6, r5
 8004d8a:	f021 0104 	bic.w	r1, r1, #4
 8004d8e:	6021      	str	r1, [r4, #0]
 8004d90:	d04b      	beq.n	8004e2a <_printf_i+0x1a6>
 8004d92:	4616      	mov	r6, r2
 8004d94:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d98:	fb03 5711 	mls	r7, r3, r1, r5
 8004d9c:	5dc7      	ldrb	r7, [r0, r7]
 8004d9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004da2:	462f      	mov	r7, r5
 8004da4:	42bb      	cmp	r3, r7
 8004da6:	460d      	mov	r5, r1
 8004da8:	d9f4      	bls.n	8004d94 <_printf_i+0x110>
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d10b      	bne.n	8004dc6 <_printf_i+0x142>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	07df      	lsls	r7, r3, #31
 8004db2:	d508      	bpl.n	8004dc6 <_printf_i+0x142>
 8004db4:	6923      	ldr	r3, [r4, #16]
 8004db6:	6861      	ldr	r1, [r4, #4]
 8004db8:	4299      	cmp	r1, r3
 8004dba:	bfde      	ittt	le
 8004dbc:	2330      	movle	r3, #48	@ 0x30
 8004dbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dc6:	1b92      	subs	r2, r2, r6
 8004dc8:	6122      	str	r2, [r4, #16]
 8004dca:	f8cd a000 	str.w	sl, [sp]
 8004dce:	464b      	mov	r3, r9
 8004dd0:	aa03      	add	r2, sp, #12
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	f7ff fee7 	bl	8004ba8 <_printf_common>
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d14a      	bne.n	8004e74 <_printf_i+0x1f0>
 8004dde:	f04f 30ff 	mov.w	r0, #4294967295
 8004de2:	b004      	add	sp, #16
 8004de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	f043 0320 	orr.w	r3, r3, #32
 8004dee:	6023      	str	r3, [r4, #0]
 8004df0:	4832      	ldr	r0, [pc, #200]	@ (8004ebc <_printf_i+0x238>)
 8004df2:	2778      	movs	r7, #120	@ 0x78
 8004df4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	6831      	ldr	r1, [r6, #0]
 8004dfc:	061f      	lsls	r7, r3, #24
 8004dfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e02:	d402      	bmi.n	8004e0a <_printf_i+0x186>
 8004e04:	065f      	lsls	r7, r3, #25
 8004e06:	bf48      	it	mi
 8004e08:	b2ad      	uxthmi	r5, r5
 8004e0a:	6031      	str	r1, [r6, #0]
 8004e0c:	07d9      	lsls	r1, r3, #31
 8004e0e:	bf44      	itt	mi
 8004e10:	f043 0320 	orrmi.w	r3, r3, #32
 8004e14:	6023      	strmi	r3, [r4, #0]
 8004e16:	b11d      	cbz	r5, 8004e20 <_printf_i+0x19c>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	e7ad      	b.n	8004d78 <_printf_i+0xf4>
 8004e1c:	4826      	ldr	r0, [pc, #152]	@ (8004eb8 <_printf_i+0x234>)
 8004e1e:	e7e9      	b.n	8004df4 <_printf_i+0x170>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	f023 0320 	bic.w	r3, r3, #32
 8004e26:	6023      	str	r3, [r4, #0]
 8004e28:	e7f6      	b.n	8004e18 <_printf_i+0x194>
 8004e2a:	4616      	mov	r6, r2
 8004e2c:	e7bd      	b.n	8004daa <_printf_i+0x126>
 8004e2e:	6833      	ldr	r3, [r6, #0]
 8004e30:	6825      	ldr	r5, [r4, #0]
 8004e32:	6961      	ldr	r1, [r4, #20]
 8004e34:	1d18      	adds	r0, r3, #4
 8004e36:	6030      	str	r0, [r6, #0]
 8004e38:	062e      	lsls	r6, r5, #24
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	d501      	bpl.n	8004e42 <_printf_i+0x1be>
 8004e3e:	6019      	str	r1, [r3, #0]
 8004e40:	e002      	b.n	8004e48 <_printf_i+0x1c4>
 8004e42:	0668      	lsls	r0, r5, #25
 8004e44:	d5fb      	bpl.n	8004e3e <_printf_i+0x1ba>
 8004e46:	8019      	strh	r1, [r3, #0]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	4616      	mov	r6, r2
 8004e4e:	e7bc      	b.n	8004dca <_printf_i+0x146>
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	6032      	str	r2, [r6, #0]
 8004e56:	681e      	ldr	r6, [r3, #0]
 8004e58:	6862      	ldr	r2, [r4, #4]
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f7fb f9bf 	bl	80001e0 <memchr>
 8004e62:	b108      	cbz	r0, 8004e68 <_printf_i+0x1e4>
 8004e64:	1b80      	subs	r0, r0, r6
 8004e66:	6060      	str	r0, [r4, #4]
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	6123      	str	r3, [r4, #16]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e72:	e7aa      	b.n	8004dca <_printf_i+0x146>
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	4632      	mov	r2, r6
 8004e78:	4649      	mov	r1, r9
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	47d0      	blx	sl
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d0ad      	beq.n	8004dde <_printf_i+0x15a>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	079b      	lsls	r3, r3, #30
 8004e86:	d413      	bmi.n	8004eb0 <_printf_i+0x22c>
 8004e88:	68e0      	ldr	r0, [r4, #12]
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	4298      	cmp	r0, r3
 8004e8e:	bfb8      	it	lt
 8004e90:	4618      	movlt	r0, r3
 8004e92:	e7a6      	b.n	8004de2 <_printf_i+0x15e>
 8004e94:	2301      	movs	r3, #1
 8004e96:	4632      	mov	r2, r6
 8004e98:	4649      	mov	r1, r9
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	47d0      	blx	sl
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d09d      	beq.n	8004dde <_printf_i+0x15a>
 8004ea2:	3501      	adds	r5, #1
 8004ea4:	68e3      	ldr	r3, [r4, #12]
 8004ea6:	9903      	ldr	r1, [sp, #12]
 8004ea8:	1a5b      	subs	r3, r3, r1
 8004eaa:	42ab      	cmp	r3, r5
 8004eac:	dcf2      	bgt.n	8004e94 <_printf_i+0x210>
 8004eae:	e7eb      	b.n	8004e88 <_printf_i+0x204>
 8004eb0:	2500      	movs	r5, #0
 8004eb2:	f104 0619 	add.w	r6, r4, #25
 8004eb6:	e7f5      	b.n	8004ea4 <_printf_i+0x220>
 8004eb8:	080085c6 	.word	0x080085c6
 8004ebc:	080085d7 	.word	0x080085d7

08004ec0 <std>:
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	b510      	push	{r4, lr}
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8004eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ece:	6083      	str	r3, [r0, #8]
 8004ed0:	8181      	strh	r1, [r0, #12]
 8004ed2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ed4:	81c2      	strh	r2, [r0, #14]
 8004ed6:	6183      	str	r3, [r0, #24]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	2208      	movs	r2, #8
 8004edc:	305c      	adds	r0, #92	@ 0x5c
 8004ede:	f000 f906 	bl	80050ee <memset>
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f18 <std+0x58>)
 8004ee4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f1c <std+0x5c>)
 8004ee8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004eea:	4b0d      	ldr	r3, [pc, #52]	@ (8004f20 <std+0x60>)
 8004eec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004eee:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <std+0x64>)
 8004ef0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f28 <std+0x68>)
 8004ef4:	6224      	str	r4, [r4, #32]
 8004ef6:	429c      	cmp	r4, r3
 8004ef8:	d006      	beq.n	8004f08 <std+0x48>
 8004efa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004efe:	4294      	cmp	r4, r2
 8004f00:	d002      	beq.n	8004f08 <std+0x48>
 8004f02:	33d0      	adds	r3, #208	@ 0xd0
 8004f04:	429c      	cmp	r4, r3
 8004f06:	d105      	bne.n	8004f14 <std+0x54>
 8004f08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f10:	f000 b9c8 	b.w	80052a4 <__retarget_lock_init_recursive>
 8004f14:	bd10      	pop	{r4, pc}
 8004f16:	bf00      	nop
 8004f18:	08005069 	.word	0x08005069
 8004f1c:	0800508b 	.word	0x0800508b
 8004f20:	080050c3 	.word	0x080050c3
 8004f24:	080050e7 	.word	0x080050e7
 8004f28:	20002af0 	.word	0x20002af0

08004f2c <stdio_exit_handler>:
 8004f2c:	4a02      	ldr	r2, [pc, #8]	@ (8004f38 <stdio_exit_handler+0xc>)
 8004f2e:	4903      	ldr	r1, [pc, #12]	@ (8004f3c <stdio_exit_handler+0x10>)
 8004f30:	4803      	ldr	r0, [pc, #12]	@ (8004f40 <stdio_exit_handler+0x14>)
 8004f32:	f000 b869 	b.w	8005008 <_fwalk_sglue>
 8004f36:	bf00      	nop
 8004f38:	20000010 	.word	0x20000010
 8004f3c:	08006bf9 	.word	0x08006bf9
 8004f40:	20000020 	.word	0x20000020

08004f44 <cleanup_stdio>:
 8004f44:	6841      	ldr	r1, [r0, #4]
 8004f46:	4b0c      	ldr	r3, [pc, #48]	@ (8004f78 <cleanup_stdio+0x34>)
 8004f48:	4299      	cmp	r1, r3
 8004f4a:	b510      	push	{r4, lr}
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	d001      	beq.n	8004f54 <cleanup_stdio+0x10>
 8004f50:	f001 fe52 	bl	8006bf8 <_fflush_r>
 8004f54:	68a1      	ldr	r1, [r4, #8]
 8004f56:	4b09      	ldr	r3, [pc, #36]	@ (8004f7c <cleanup_stdio+0x38>)
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	d002      	beq.n	8004f62 <cleanup_stdio+0x1e>
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f001 fe4b 	bl	8006bf8 <_fflush_r>
 8004f62:	68e1      	ldr	r1, [r4, #12]
 8004f64:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <cleanup_stdio+0x3c>)
 8004f66:	4299      	cmp	r1, r3
 8004f68:	d004      	beq.n	8004f74 <cleanup_stdio+0x30>
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f70:	f001 be42 	b.w	8006bf8 <_fflush_r>
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	bf00      	nop
 8004f78:	20002af0 	.word	0x20002af0
 8004f7c:	20002b58 	.word	0x20002b58
 8004f80:	20002bc0 	.word	0x20002bc0

08004f84 <global_stdio_init.part.0>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb4 <global_stdio_init.part.0+0x30>)
 8004f88:	4c0b      	ldr	r4, [pc, #44]	@ (8004fb8 <global_stdio_init.part.0+0x34>)
 8004f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004fbc <global_stdio_init.part.0+0x38>)
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	4620      	mov	r0, r4
 8004f90:	2200      	movs	r2, #0
 8004f92:	2104      	movs	r1, #4
 8004f94:	f7ff ff94 	bl	8004ec0 <std>
 8004f98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	2109      	movs	r1, #9
 8004fa0:	f7ff ff8e 	bl	8004ec0 <std>
 8004fa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004fa8:	2202      	movs	r2, #2
 8004faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fae:	2112      	movs	r1, #18
 8004fb0:	f7ff bf86 	b.w	8004ec0 <std>
 8004fb4:	20002c28 	.word	0x20002c28
 8004fb8:	20002af0 	.word	0x20002af0
 8004fbc:	08004f2d 	.word	0x08004f2d

08004fc0 <__sfp_lock_acquire>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	@ (8004fc8 <__sfp_lock_acquire+0x8>)
 8004fc2:	f000 b970 	b.w	80052a6 <__retarget_lock_acquire_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20002c31 	.word	0x20002c31

08004fcc <__sfp_lock_release>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	@ (8004fd4 <__sfp_lock_release+0x8>)
 8004fce:	f000 b96b 	b.w	80052a8 <__retarget_lock_release_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20002c31 	.word	0x20002c31

08004fd8 <__sinit>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	f7ff fff0 	bl	8004fc0 <__sfp_lock_acquire>
 8004fe0:	6a23      	ldr	r3, [r4, #32]
 8004fe2:	b11b      	cbz	r3, 8004fec <__sinit+0x14>
 8004fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe8:	f7ff bff0 	b.w	8004fcc <__sfp_lock_release>
 8004fec:	4b04      	ldr	r3, [pc, #16]	@ (8005000 <__sinit+0x28>)
 8004fee:	6223      	str	r3, [r4, #32]
 8004ff0:	4b04      	ldr	r3, [pc, #16]	@ (8005004 <__sinit+0x2c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f5      	bne.n	8004fe4 <__sinit+0xc>
 8004ff8:	f7ff ffc4 	bl	8004f84 <global_stdio_init.part.0>
 8004ffc:	e7f2      	b.n	8004fe4 <__sinit+0xc>
 8004ffe:	bf00      	nop
 8005000:	08004f45 	.word	0x08004f45
 8005004:	20002c28 	.word	0x20002c28

08005008 <_fwalk_sglue>:
 8005008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800500c:	4607      	mov	r7, r0
 800500e:	4688      	mov	r8, r1
 8005010:	4614      	mov	r4, r2
 8005012:	2600      	movs	r6, #0
 8005014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005018:	f1b9 0901 	subs.w	r9, r9, #1
 800501c:	d505      	bpl.n	800502a <_fwalk_sglue+0x22>
 800501e:	6824      	ldr	r4, [r4, #0]
 8005020:	2c00      	cmp	r4, #0
 8005022:	d1f7      	bne.n	8005014 <_fwalk_sglue+0xc>
 8005024:	4630      	mov	r0, r6
 8005026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800502a:	89ab      	ldrh	r3, [r5, #12]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d907      	bls.n	8005040 <_fwalk_sglue+0x38>
 8005030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005034:	3301      	adds	r3, #1
 8005036:	d003      	beq.n	8005040 <_fwalk_sglue+0x38>
 8005038:	4629      	mov	r1, r5
 800503a:	4638      	mov	r0, r7
 800503c:	47c0      	blx	r8
 800503e:	4306      	orrs	r6, r0
 8005040:	3568      	adds	r5, #104	@ 0x68
 8005042:	e7e9      	b.n	8005018 <_fwalk_sglue+0x10>

08005044 <iprintf>:
 8005044:	b40f      	push	{r0, r1, r2, r3}
 8005046:	b507      	push	{r0, r1, r2, lr}
 8005048:	4906      	ldr	r1, [pc, #24]	@ (8005064 <iprintf+0x20>)
 800504a:	ab04      	add	r3, sp, #16
 800504c:	6808      	ldr	r0, [r1, #0]
 800504e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005052:	6881      	ldr	r1, [r0, #8]
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	f001 fc33 	bl	80068c0 <_vfiprintf_r>
 800505a:	b003      	add	sp, #12
 800505c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005060:	b004      	add	sp, #16
 8005062:	4770      	bx	lr
 8005064:	2000001c 	.word	0x2000001c

08005068 <__sread>:
 8005068:	b510      	push	{r4, lr}
 800506a:	460c      	mov	r4, r1
 800506c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005070:	f000 f8ca 	bl	8005208 <_read_r>
 8005074:	2800      	cmp	r0, #0
 8005076:	bfab      	itete	ge
 8005078:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800507a:	89a3      	ldrhlt	r3, [r4, #12]
 800507c:	181b      	addge	r3, r3, r0
 800507e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005082:	bfac      	ite	ge
 8005084:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005086:	81a3      	strhlt	r3, [r4, #12]
 8005088:	bd10      	pop	{r4, pc}

0800508a <__swrite>:
 800508a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508e:	461f      	mov	r7, r3
 8005090:	898b      	ldrh	r3, [r1, #12]
 8005092:	05db      	lsls	r3, r3, #23
 8005094:	4605      	mov	r5, r0
 8005096:	460c      	mov	r4, r1
 8005098:	4616      	mov	r6, r2
 800509a:	d505      	bpl.n	80050a8 <__swrite+0x1e>
 800509c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a0:	2302      	movs	r3, #2
 80050a2:	2200      	movs	r2, #0
 80050a4:	f000 f89e 	bl	80051e4 <_lseek_r>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	4632      	mov	r2, r6
 80050b6:	463b      	mov	r3, r7
 80050b8:	4628      	mov	r0, r5
 80050ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050be:	f000 b8b5 	b.w	800522c <_write_r>

080050c2 <__sseek>:
 80050c2:	b510      	push	{r4, lr}
 80050c4:	460c      	mov	r4, r1
 80050c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ca:	f000 f88b 	bl	80051e4 <_lseek_r>
 80050ce:	1c43      	adds	r3, r0, #1
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	bf15      	itete	ne
 80050d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050de:	81a3      	strheq	r3, [r4, #12]
 80050e0:	bf18      	it	ne
 80050e2:	81a3      	strhne	r3, [r4, #12]
 80050e4:	bd10      	pop	{r4, pc}

080050e6 <__sclose>:
 80050e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ea:	f000 b80d 	b.w	8005108 <_close_r>

080050ee <memset>:
 80050ee:	4402      	add	r2, r0
 80050f0:	4603      	mov	r3, r0
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d100      	bne.n	80050f8 <memset+0xa>
 80050f6:	4770      	bx	lr
 80050f8:	f803 1b01 	strb.w	r1, [r3], #1
 80050fc:	e7f9      	b.n	80050f2 <memset+0x4>
	...

08005100 <_localeconv_r>:
 8005100:	4800      	ldr	r0, [pc, #0]	@ (8005104 <_localeconv_r+0x4>)
 8005102:	4770      	bx	lr
 8005104:	2000015c 	.word	0x2000015c

08005108 <_close_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4d06      	ldr	r5, [pc, #24]	@ (8005124 <_close_r+0x1c>)
 800510c:	2300      	movs	r3, #0
 800510e:	4604      	mov	r4, r0
 8005110:	4608      	mov	r0, r1
 8005112:	602b      	str	r3, [r5, #0]
 8005114:	f7fc fad8 	bl	80016c8 <_close>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_close_r+0x1a>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_close_r+0x1a>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	20002c2c 	.word	0x20002c2c

08005128 <_reclaim_reent>:
 8005128:	4b2d      	ldr	r3, [pc, #180]	@ (80051e0 <_reclaim_reent+0xb8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4283      	cmp	r3, r0
 800512e:	b570      	push	{r4, r5, r6, lr}
 8005130:	4604      	mov	r4, r0
 8005132:	d053      	beq.n	80051dc <_reclaim_reent+0xb4>
 8005134:	69c3      	ldr	r3, [r0, #28]
 8005136:	b31b      	cbz	r3, 8005180 <_reclaim_reent+0x58>
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	b163      	cbz	r3, 8005156 <_reclaim_reent+0x2e>
 800513c:	2500      	movs	r5, #0
 800513e:	69e3      	ldr	r3, [r4, #28]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	5959      	ldr	r1, [r3, r5]
 8005144:	b9b1      	cbnz	r1, 8005174 <_reclaim_reent+0x4c>
 8005146:	3504      	adds	r5, #4
 8005148:	2d80      	cmp	r5, #128	@ 0x80
 800514a:	d1f8      	bne.n	800513e <_reclaim_reent+0x16>
 800514c:	69e3      	ldr	r3, [r4, #28]
 800514e:	4620      	mov	r0, r4
 8005150:	68d9      	ldr	r1, [r3, #12]
 8005152:	f000 ff11 	bl	8005f78 <_free_r>
 8005156:	69e3      	ldr	r3, [r4, #28]
 8005158:	6819      	ldr	r1, [r3, #0]
 800515a:	b111      	cbz	r1, 8005162 <_reclaim_reent+0x3a>
 800515c:	4620      	mov	r0, r4
 800515e:	f000 ff0b 	bl	8005f78 <_free_r>
 8005162:	69e3      	ldr	r3, [r4, #28]
 8005164:	689d      	ldr	r5, [r3, #8]
 8005166:	b15d      	cbz	r5, 8005180 <_reclaim_reent+0x58>
 8005168:	4629      	mov	r1, r5
 800516a:	4620      	mov	r0, r4
 800516c:	682d      	ldr	r5, [r5, #0]
 800516e:	f000 ff03 	bl	8005f78 <_free_r>
 8005172:	e7f8      	b.n	8005166 <_reclaim_reent+0x3e>
 8005174:	680e      	ldr	r6, [r1, #0]
 8005176:	4620      	mov	r0, r4
 8005178:	f000 fefe 	bl	8005f78 <_free_r>
 800517c:	4631      	mov	r1, r6
 800517e:	e7e1      	b.n	8005144 <_reclaim_reent+0x1c>
 8005180:	6961      	ldr	r1, [r4, #20]
 8005182:	b111      	cbz	r1, 800518a <_reclaim_reent+0x62>
 8005184:	4620      	mov	r0, r4
 8005186:	f000 fef7 	bl	8005f78 <_free_r>
 800518a:	69e1      	ldr	r1, [r4, #28]
 800518c:	b111      	cbz	r1, 8005194 <_reclaim_reent+0x6c>
 800518e:	4620      	mov	r0, r4
 8005190:	f000 fef2 	bl	8005f78 <_free_r>
 8005194:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005196:	b111      	cbz	r1, 800519e <_reclaim_reent+0x76>
 8005198:	4620      	mov	r0, r4
 800519a:	f000 feed 	bl	8005f78 <_free_r>
 800519e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051a0:	b111      	cbz	r1, 80051a8 <_reclaim_reent+0x80>
 80051a2:	4620      	mov	r0, r4
 80051a4:	f000 fee8 	bl	8005f78 <_free_r>
 80051a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80051aa:	b111      	cbz	r1, 80051b2 <_reclaim_reent+0x8a>
 80051ac:	4620      	mov	r0, r4
 80051ae:	f000 fee3 	bl	8005f78 <_free_r>
 80051b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80051b4:	b111      	cbz	r1, 80051bc <_reclaim_reent+0x94>
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 fede 	bl	8005f78 <_free_r>
 80051bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80051be:	b111      	cbz	r1, 80051c6 <_reclaim_reent+0x9e>
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 fed9 	bl	8005f78 <_free_r>
 80051c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80051c8:	b111      	cbz	r1, 80051d0 <_reclaim_reent+0xa8>
 80051ca:	4620      	mov	r0, r4
 80051cc:	f000 fed4 	bl	8005f78 <_free_r>
 80051d0:	6a23      	ldr	r3, [r4, #32]
 80051d2:	b11b      	cbz	r3, 80051dc <_reclaim_reent+0xb4>
 80051d4:	4620      	mov	r0, r4
 80051d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80051da:	4718      	bx	r3
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
 80051de:	bf00      	nop
 80051e0:	2000001c 	.word	0x2000001c

080051e4 <_lseek_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d07      	ldr	r5, [pc, #28]	@ (8005204 <_lseek_r+0x20>)
 80051e8:	4604      	mov	r4, r0
 80051ea:	4608      	mov	r0, r1
 80051ec:	4611      	mov	r1, r2
 80051ee:	2200      	movs	r2, #0
 80051f0:	602a      	str	r2, [r5, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f7fc fa74 	bl	80016e0 <_lseek>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_lseek_r+0x1e>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_lseek_r+0x1e>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20002c2c 	.word	0x20002c2c

08005208 <_read_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d07      	ldr	r5, [pc, #28]	@ (8005228 <_read_r+0x20>)
 800520c:	4604      	mov	r4, r0
 800520e:	4608      	mov	r0, r1
 8005210:	4611      	mov	r1, r2
 8005212:	2200      	movs	r2, #0
 8005214:	602a      	str	r2, [r5, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	f7fc fa48 	bl	80016ac <_read>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_read_r+0x1e>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_read_r+0x1e>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	20002c2c 	.word	0x20002c2c

0800522c <_write_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d07      	ldr	r5, [pc, #28]	@ (800524c <_write_r+0x20>)
 8005230:	4604      	mov	r4, r0
 8005232:	4608      	mov	r0, r1
 8005234:	4611      	mov	r1, r2
 8005236:	2200      	movs	r2, #0
 8005238:	602a      	str	r2, [r5, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f7fb feca 	bl	8000fd4 <_write>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_write_r+0x1e>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_write_r+0x1e>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20002c2c 	.word	0x20002c2c

08005250 <__errno>:
 8005250:	4b01      	ldr	r3, [pc, #4]	@ (8005258 <__errno+0x8>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	2000001c 	.word	0x2000001c

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	4d0d      	ldr	r5, [pc, #52]	@ (8005294 <__libc_init_array+0x38>)
 8005260:	4c0d      	ldr	r4, [pc, #52]	@ (8005298 <__libc_init_array+0x3c>)
 8005262:	1b64      	subs	r4, r4, r5
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	2600      	movs	r6, #0
 8005268:	42a6      	cmp	r6, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	4d0b      	ldr	r5, [pc, #44]	@ (800529c <__libc_init_array+0x40>)
 800526e:	4c0c      	ldr	r4, [pc, #48]	@ (80052a0 <__libc_init_array+0x44>)
 8005270:	f003 f8b0 	bl	80083d4 <_init>
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	2600      	movs	r6, #0
 800527a:	42a6      	cmp	r6, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f855 3b04 	ldr.w	r3, [r5], #4
 8005284:	4798      	blx	r3
 8005286:	3601      	adds	r6, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f855 3b04 	ldr.w	r3, [r5], #4
 800528e:	4798      	blx	r3
 8005290:	3601      	adds	r6, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	08008d88 	.word	0x08008d88
 8005298:	08008d88 	.word	0x08008d88
 800529c:	08008d88 	.word	0x08008d88
 80052a0:	08008d8c 	.word	0x08008d8c

080052a4 <__retarget_lock_init_recursive>:
 80052a4:	4770      	bx	lr

080052a6 <__retarget_lock_acquire_recursive>:
 80052a6:	4770      	bx	lr

080052a8 <__retarget_lock_release_recursive>:
 80052a8:	4770      	bx	lr

080052aa <memcpy>:
 80052aa:	440a      	add	r2, r1
 80052ac:	4291      	cmp	r1, r2
 80052ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80052b2:	d100      	bne.n	80052b6 <memcpy+0xc>
 80052b4:	4770      	bx	lr
 80052b6:	b510      	push	{r4, lr}
 80052b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052c0:	4291      	cmp	r1, r2
 80052c2:	d1f9      	bne.n	80052b8 <memcpy+0xe>
 80052c4:	bd10      	pop	{r4, pc}

080052c6 <quorem>:
 80052c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	6903      	ldr	r3, [r0, #16]
 80052cc:	690c      	ldr	r4, [r1, #16]
 80052ce:	42a3      	cmp	r3, r4
 80052d0:	4607      	mov	r7, r0
 80052d2:	db7e      	blt.n	80053d2 <quorem+0x10c>
 80052d4:	3c01      	subs	r4, #1
 80052d6:	f101 0814 	add.w	r8, r1, #20
 80052da:	00a3      	lsls	r3, r4, #2
 80052dc:	f100 0514 	add.w	r5, r0, #20
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052f0:	3301      	adds	r3, #1
 80052f2:	429a      	cmp	r2, r3
 80052f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80052fc:	d32e      	bcc.n	800535c <quorem+0x96>
 80052fe:	f04f 0a00 	mov.w	sl, #0
 8005302:	46c4      	mov	ip, r8
 8005304:	46ae      	mov	lr, r5
 8005306:	46d3      	mov	fp, sl
 8005308:	f85c 3b04 	ldr.w	r3, [ip], #4
 800530c:	b298      	uxth	r0, r3
 800530e:	fb06 a000 	mla	r0, r6, r0, sl
 8005312:	0c02      	lsrs	r2, r0, #16
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	fb06 2303 	mla	r3, r6, r3, r2
 800531a:	f8de 2000 	ldr.w	r2, [lr]
 800531e:	b280      	uxth	r0, r0
 8005320:	b292      	uxth	r2, r2
 8005322:	1a12      	subs	r2, r2, r0
 8005324:	445a      	add	r2, fp
 8005326:	f8de 0000 	ldr.w	r0, [lr]
 800532a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800532e:	b29b      	uxth	r3, r3
 8005330:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005334:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005338:	b292      	uxth	r2, r2
 800533a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800533e:	45e1      	cmp	r9, ip
 8005340:	f84e 2b04 	str.w	r2, [lr], #4
 8005344:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005348:	d2de      	bcs.n	8005308 <quorem+0x42>
 800534a:	9b00      	ldr	r3, [sp, #0]
 800534c:	58eb      	ldr	r3, [r5, r3]
 800534e:	b92b      	cbnz	r3, 800535c <quorem+0x96>
 8005350:	9b01      	ldr	r3, [sp, #4]
 8005352:	3b04      	subs	r3, #4
 8005354:	429d      	cmp	r5, r3
 8005356:	461a      	mov	r2, r3
 8005358:	d32f      	bcc.n	80053ba <quorem+0xf4>
 800535a:	613c      	str	r4, [r7, #16]
 800535c:	4638      	mov	r0, r7
 800535e:	f001 f97d 	bl	800665c <__mcmp>
 8005362:	2800      	cmp	r0, #0
 8005364:	db25      	blt.n	80053b2 <quorem+0xec>
 8005366:	4629      	mov	r1, r5
 8005368:	2000      	movs	r0, #0
 800536a:	f858 2b04 	ldr.w	r2, [r8], #4
 800536e:	f8d1 c000 	ldr.w	ip, [r1]
 8005372:	fa1f fe82 	uxth.w	lr, r2
 8005376:	fa1f f38c 	uxth.w	r3, ip
 800537a:	eba3 030e 	sub.w	r3, r3, lr
 800537e:	4403      	add	r3, r0
 8005380:	0c12      	lsrs	r2, r2, #16
 8005382:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005386:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800538a:	b29b      	uxth	r3, r3
 800538c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005390:	45c1      	cmp	r9, r8
 8005392:	f841 3b04 	str.w	r3, [r1], #4
 8005396:	ea4f 4022 	mov.w	r0, r2, asr #16
 800539a:	d2e6      	bcs.n	800536a <quorem+0xa4>
 800539c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053a4:	b922      	cbnz	r2, 80053b0 <quorem+0xea>
 80053a6:	3b04      	subs	r3, #4
 80053a8:	429d      	cmp	r5, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	d30b      	bcc.n	80053c6 <quorem+0x100>
 80053ae:	613c      	str	r4, [r7, #16]
 80053b0:	3601      	adds	r6, #1
 80053b2:	4630      	mov	r0, r6
 80053b4:	b003      	add	sp, #12
 80053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	3b04      	subs	r3, #4
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d1cb      	bne.n	800535a <quorem+0x94>
 80053c2:	3c01      	subs	r4, #1
 80053c4:	e7c6      	b.n	8005354 <quorem+0x8e>
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	3b04      	subs	r3, #4
 80053ca:	2a00      	cmp	r2, #0
 80053cc:	d1ef      	bne.n	80053ae <quorem+0xe8>
 80053ce:	3c01      	subs	r4, #1
 80053d0:	e7ea      	b.n	80053a8 <quorem+0xe2>
 80053d2:	2000      	movs	r0, #0
 80053d4:	e7ee      	b.n	80053b4 <quorem+0xee>
	...

080053d8 <_dtoa_r>:
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	69c7      	ldr	r7, [r0, #28]
 80053de:	b097      	sub	sp, #92	@ 0x5c
 80053e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80053e4:	ec55 4b10 	vmov	r4, r5, d0
 80053e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80053ea:	9107      	str	r1, [sp, #28]
 80053ec:	4681      	mov	r9, r0
 80053ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80053f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80053f2:	b97f      	cbnz	r7, 8005414 <_dtoa_r+0x3c>
 80053f4:	2010      	movs	r0, #16
 80053f6:	f000 fe09 	bl	800600c <malloc>
 80053fa:	4602      	mov	r2, r0
 80053fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8005400:	b920      	cbnz	r0, 800540c <_dtoa_r+0x34>
 8005402:	4ba9      	ldr	r3, [pc, #676]	@ (80056a8 <_dtoa_r+0x2d0>)
 8005404:	21ef      	movs	r1, #239	@ 0xef
 8005406:	48a9      	ldr	r0, [pc, #676]	@ (80056ac <_dtoa_r+0x2d4>)
 8005408:	f001 fcc2 	bl	8006d90 <__assert_func>
 800540c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005410:	6007      	str	r7, [r0, #0]
 8005412:	60c7      	str	r7, [r0, #12]
 8005414:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005418:	6819      	ldr	r1, [r3, #0]
 800541a:	b159      	cbz	r1, 8005434 <_dtoa_r+0x5c>
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	604a      	str	r2, [r1, #4]
 8005420:	2301      	movs	r3, #1
 8005422:	4093      	lsls	r3, r2
 8005424:	608b      	str	r3, [r1, #8]
 8005426:	4648      	mov	r0, r9
 8005428:	f000 fee6 	bl	80061f8 <_Bfree>
 800542c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	1e2b      	subs	r3, r5, #0
 8005436:	bfb9      	ittee	lt
 8005438:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800543c:	9305      	strlt	r3, [sp, #20]
 800543e:	2300      	movge	r3, #0
 8005440:	6033      	strge	r3, [r6, #0]
 8005442:	9f05      	ldr	r7, [sp, #20]
 8005444:	4b9a      	ldr	r3, [pc, #616]	@ (80056b0 <_dtoa_r+0x2d8>)
 8005446:	bfbc      	itt	lt
 8005448:	2201      	movlt	r2, #1
 800544a:	6032      	strlt	r2, [r6, #0]
 800544c:	43bb      	bics	r3, r7
 800544e:	d112      	bne.n	8005476 <_dtoa_r+0x9e>
 8005450:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005452:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800545c:	4323      	orrs	r3, r4
 800545e:	f000 855a 	beq.w	8005f16 <_dtoa_r+0xb3e>
 8005462:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005464:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80056c4 <_dtoa_r+0x2ec>
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 855c 	beq.w	8005f26 <_dtoa_r+0xb4e>
 800546e:	f10a 0303 	add.w	r3, sl, #3
 8005472:	f000 bd56 	b.w	8005f22 <_dtoa_r+0xb4a>
 8005476:	ed9d 7b04 	vldr	d7, [sp, #16]
 800547a:	2200      	movs	r2, #0
 800547c:	ec51 0b17 	vmov	r0, r1, d7
 8005480:	2300      	movs	r3, #0
 8005482:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005486:	f7fb fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800548a:	4680      	mov	r8, r0
 800548c:	b158      	cbz	r0, 80054a6 <_dtoa_r+0xce>
 800548e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005490:	2301      	movs	r3, #1
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005496:	b113      	cbz	r3, 800549e <_dtoa_r+0xc6>
 8005498:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800549a:	4b86      	ldr	r3, [pc, #536]	@ (80056b4 <_dtoa_r+0x2dc>)
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80056c8 <_dtoa_r+0x2f0>
 80054a2:	f000 bd40 	b.w	8005f26 <_dtoa_r+0xb4e>
 80054a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80054aa:	aa14      	add	r2, sp, #80	@ 0x50
 80054ac:	a915      	add	r1, sp, #84	@ 0x54
 80054ae:	4648      	mov	r0, r9
 80054b0:	f001 f984 	bl	80067bc <__d2b>
 80054b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80054b8:	9002      	str	r0, [sp, #8]
 80054ba:	2e00      	cmp	r6, #0
 80054bc:	d078      	beq.n	80055b0 <_dtoa_r+0x1d8>
 80054be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80054c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80054cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054d8:	4619      	mov	r1, r3
 80054da:	2200      	movs	r2, #0
 80054dc:	4b76      	ldr	r3, [pc, #472]	@ (80056b8 <_dtoa_r+0x2e0>)
 80054de:	f7fa fedb 	bl	8000298 <__aeabi_dsub>
 80054e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005690 <_dtoa_r+0x2b8>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fb f88e 	bl	8000608 <__aeabi_dmul>
 80054ec:	a36a      	add	r3, pc, #424	@ (adr r3, 8005698 <_dtoa_r+0x2c0>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f7fa fed3 	bl	800029c <__adddf3>
 80054f6:	4604      	mov	r4, r0
 80054f8:	4630      	mov	r0, r6
 80054fa:	460d      	mov	r5, r1
 80054fc:	f7fb f81a 	bl	8000534 <__aeabi_i2d>
 8005500:	a367      	add	r3, pc, #412	@ (adr r3, 80056a0 <_dtoa_r+0x2c8>)
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f7fb f87f 	bl	8000608 <__aeabi_dmul>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4620      	mov	r0, r4
 8005510:	4629      	mov	r1, r5
 8005512:	f7fa fec3 	bl	800029c <__adddf3>
 8005516:	4604      	mov	r4, r0
 8005518:	460d      	mov	r5, r1
 800551a:	f7fb fb25 	bl	8000b68 <__aeabi_d2iz>
 800551e:	2200      	movs	r2, #0
 8005520:	4607      	mov	r7, r0
 8005522:	2300      	movs	r3, #0
 8005524:	4620      	mov	r0, r4
 8005526:	4629      	mov	r1, r5
 8005528:	f7fb fae0 	bl	8000aec <__aeabi_dcmplt>
 800552c:	b140      	cbz	r0, 8005540 <_dtoa_r+0x168>
 800552e:	4638      	mov	r0, r7
 8005530:	f7fb f800 	bl	8000534 <__aeabi_i2d>
 8005534:	4622      	mov	r2, r4
 8005536:	462b      	mov	r3, r5
 8005538:	f7fb face 	bl	8000ad8 <__aeabi_dcmpeq>
 800553c:	b900      	cbnz	r0, 8005540 <_dtoa_r+0x168>
 800553e:	3f01      	subs	r7, #1
 8005540:	2f16      	cmp	r7, #22
 8005542:	d852      	bhi.n	80055ea <_dtoa_r+0x212>
 8005544:	4b5d      	ldr	r3, [pc, #372]	@ (80056bc <_dtoa_r+0x2e4>)
 8005546:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005552:	f7fb facb 	bl	8000aec <__aeabi_dcmplt>
 8005556:	2800      	cmp	r0, #0
 8005558:	d049      	beq.n	80055ee <_dtoa_r+0x216>
 800555a:	3f01      	subs	r7, #1
 800555c:	2300      	movs	r3, #0
 800555e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005560:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005562:	1b9b      	subs	r3, r3, r6
 8005564:	1e5a      	subs	r2, r3, #1
 8005566:	bf45      	ittet	mi
 8005568:	f1c3 0301 	rsbmi	r3, r3, #1
 800556c:	9300      	strmi	r3, [sp, #0]
 800556e:	2300      	movpl	r3, #0
 8005570:	2300      	movmi	r3, #0
 8005572:	9206      	str	r2, [sp, #24]
 8005574:	bf54      	ite	pl
 8005576:	9300      	strpl	r3, [sp, #0]
 8005578:	9306      	strmi	r3, [sp, #24]
 800557a:	2f00      	cmp	r7, #0
 800557c:	db39      	blt.n	80055f2 <_dtoa_r+0x21a>
 800557e:	9b06      	ldr	r3, [sp, #24]
 8005580:	970d      	str	r7, [sp, #52]	@ 0x34
 8005582:	443b      	add	r3, r7
 8005584:	9306      	str	r3, [sp, #24]
 8005586:	2300      	movs	r3, #0
 8005588:	9308      	str	r3, [sp, #32]
 800558a:	9b07      	ldr	r3, [sp, #28]
 800558c:	2b09      	cmp	r3, #9
 800558e:	d863      	bhi.n	8005658 <_dtoa_r+0x280>
 8005590:	2b05      	cmp	r3, #5
 8005592:	bfc4      	itt	gt
 8005594:	3b04      	subgt	r3, #4
 8005596:	9307      	strgt	r3, [sp, #28]
 8005598:	9b07      	ldr	r3, [sp, #28]
 800559a:	f1a3 0302 	sub.w	r3, r3, #2
 800559e:	bfcc      	ite	gt
 80055a0:	2400      	movgt	r4, #0
 80055a2:	2401      	movle	r4, #1
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d863      	bhi.n	8005670 <_dtoa_r+0x298>
 80055a8:	e8df f003 	tbb	[pc, r3]
 80055ac:	2b375452 	.word	0x2b375452
 80055b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80055b4:	441e      	add	r6, r3
 80055b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	bfc1      	itttt	gt
 80055be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055c2:	409f      	lslgt	r7, r3
 80055c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055cc:	bfd6      	itet	le
 80055ce:	f1c3 0320 	rsble	r3, r3, #32
 80055d2:	ea47 0003 	orrgt.w	r0, r7, r3
 80055d6:	fa04 f003 	lslle.w	r0, r4, r3
 80055da:	f7fa ff9b 	bl	8000514 <__aeabi_ui2d>
 80055de:	2201      	movs	r2, #1
 80055e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055e4:	3e01      	subs	r6, #1
 80055e6:	9212      	str	r2, [sp, #72]	@ 0x48
 80055e8:	e776      	b.n	80054d8 <_dtoa_r+0x100>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e7b7      	b.n	800555e <_dtoa_r+0x186>
 80055ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80055f0:	e7b6      	b.n	8005560 <_dtoa_r+0x188>
 80055f2:	9b00      	ldr	r3, [sp, #0]
 80055f4:	1bdb      	subs	r3, r3, r7
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	427b      	negs	r3, r7
 80055fa:	9308      	str	r3, [sp, #32]
 80055fc:	2300      	movs	r3, #0
 80055fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8005600:	e7c3      	b.n	800558a <_dtoa_r+0x1b2>
 8005602:	2301      	movs	r3, #1
 8005604:	9309      	str	r3, [sp, #36]	@ 0x24
 8005606:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005608:	eb07 0b03 	add.w	fp, r7, r3
 800560c:	f10b 0301 	add.w	r3, fp, #1
 8005610:	2b01      	cmp	r3, #1
 8005612:	9303      	str	r3, [sp, #12]
 8005614:	bfb8      	it	lt
 8005616:	2301      	movlt	r3, #1
 8005618:	e006      	b.n	8005628 <_dtoa_r+0x250>
 800561a:	2301      	movs	r3, #1
 800561c:	9309      	str	r3, [sp, #36]	@ 0x24
 800561e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005620:	2b00      	cmp	r3, #0
 8005622:	dd28      	ble.n	8005676 <_dtoa_r+0x29e>
 8005624:	469b      	mov	fp, r3
 8005626:	9303      	str	r3, [sp, #12]
 8005628:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800562c:	2100      	movs	r1, #0
 800562e:	2204      	movs	r2, #4
 8005630:	f102 0514 	add.w	r5, r2, #20
 8005634:	429d      	cmp	r5, r3
 8005636:	d926      	bls.n	8005686 <_dtoa_r+0x2ae>
 8005638:	6041      	str	r1, [r0, #4]
 800563a:	4648      	mov	r0, r9
 800563c:	f000 fd9c 	bl	8006178 <_Balloc>
 8005640:	4682      	mov	sl, r0
 8005642:	2800      	cmp	r0, #0
 8005644:	d142      	bne.n	80056cc <_dtoa_r+0x2f4>
 8005646:	4b1e      	ldr	r3, [pc, #120]	@ (80056c0 <_dtoa_r+0x2e8>)
 8005648:	4602      	mov	r2, r0
 800564a:	f240 11af 	movw	r1, #431	@ 0x1af
 800564e:	e6da      	b.n	8005406 <_dtoa_r+0x2e>
 8005650:	2300      	movs	r3, #0
 8005652:	e7e3      	b.n	800561c <_dtoa_r+0x244>
 8005654:	2300      	movs	r3, #0
 8005656:	e7d5      	b.n	8005604 <_dtoa_r+0x22c>
 8005658:	2401      	movs	r4, #1
 800565a:	2300      	movs	r3, #0
 800565c:	9307      	str	r3, [sp, #28]
 800565e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005660:	f04f 3bff 	mov.w	fp, #4294967295
 8005664:	2200      	movs	r2, #0
 8005666:	f8cd b00c 	str.w	fp, [sp, #12]
 800566a:	2312      	movs	r3, #18
 800566c:	920c      	str	r2, [sp, #48]	@ 0x30
 800566e:	e7db      	b.n	8005628 <_dtoa_r+0x250>
 8005670:	2301      	movs	r3, #1
 8005672:	9309      	str	r3, [sp, #36]	@ 0x24
 8005674:	e7f4      	b.n	8005660 <_dtoa_r+0x288>
 8005676:	f04f 0b01 	mov.w	fp, #1
 800567a:	f8cd b00c 	str.w	fp, [sp, #12]
 800567e:	465b      	mov	r3, fp
 8005680:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005684:	e7d0      	b.n	8005628 <_dtoa_r+0x250>
 8005686:	3101      	adds	r1, #1
 8005688:	0052      	lsls	r2, r2, #1
 800568a:	e7d1      	b.n	8005630 <_dtoa_r+0x258>
 800568c:	f3af 8000 	nop.w
 8005690:	636f4361 	.word	0x636f4361
 8005694:	3fd287a7 	.word	0x3fd287a7
 8005698:	8b60c8b3 	.word	0x8b60c8b3
 800569c:	3fc68a28 	.word	0x3fc68a28
 80056a0:	509f79fb 	.word	0x509f79fb
 80056a4:	3fd34413 	.word	0x3fd34413
 80056a8:	080085f5 	.word	0x080085f5
 80056ac:	0800860c 	.word	0x0800860c
 80056b0:	7ff00000 	.word	0x7ff00000
 80056b4:	080085c5 	.word	0x080085c5
 80056b8:	3ff80000 	.word	0x3ff80000
 80056bc:	08008760 	.word	0x08008760
 80056c0:	08008664 	.word	0x08008664
 80056c4:	080085f1 	.word	0x080085f1
 80056c8:	080085c4 	.word	0x080085c4
 80056cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056d0:	6018      	str	r0, [r3, #0]
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	2b0e      	cmp	r3, #14
 80056d6:	f200 80a1 	bhi.w	800581c <_dtoa_r+0x444>
 80056da:	2c00      	cmp	r4, #0
 80056dc:	f000 809e 	beq.w	800581c <_dtoa_r+0x444>
 80056e0:	2f00      	cmp	r7, #0
 80056e2:	dd33      	ble.n	800574c <_dtoa_r+0x374>
 80056e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005958 <_dtoa_r+0x580>)
 80056e6:	f007 020f 	and.w	r2, r7, #15
 80056ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ee:	ed93 7b00 	vldr	d7, [r3]
 80056f2:	05f8      	lsls	r0, r7, #23
 80056f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80056f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056fc:	d516      	bpl.n	800572c <_dtoa_r+0x354>
 80056fe:	4b97      	ldr	r3, [pc, #604]	@ (800595c <_dtoa_r+0x584>)
 8005700:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005708:	f7fb f8a8 	bl	800085c <__aeabi_ddiv>
 800570c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005710:	f004 040f 	and.w	r4, r4, #15
 8005714:	2603      	movs	r6, #3
 8005716:	4d91      	ldr	r5, [pc, #580]	@ (800595c <_dtoa_r+0x584>)
 8005718:	b954      	cbnz	r4, 8005730 <_dtoa_r+0x358>
 800571a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800571e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005722:	f7fb f89b 	bl	800085c <__aeabi_ddiv>
 8005726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800572a:	e028      	b.n	800577e <_dtoa_r+0x3a6>
 800572c:	2602      	movs	r6, #2
 800572e:	e7f2      	b.n	8005716 <_dtoa_r+0x33e>
 8005730:	07e1      	lsls	r1, r4, #31
 8005732:	d508      	bpl.n	8005746 <_dtoa_r+0x36e>
 8005734:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800573c:	f7fa ff64 	bl	8000608 <__aeabi_dmul>
 8005740:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005744:	3601      	adds	r6, #1
 8005746:	1064      	asrs	r4, r4, #1
 8005748:	3508      	adds	r5, #8
 800574a:	e7e5      	b.n	8005718 <_dtoa_r+0x340>
 800574c:	f000 80af 	beq.w	80058ae <_dtoa_r+0x4d6>
 8005750:	427c      	negs	r4, r7
 8005752:	4b81      	ldr	r3, [pc, #516]	@ (8005958 <_dtoa_r+0x580>)
 8005754:	4d81      	ldr	r5, [pc, #516]	@ (800595c <_dtoa_r+0x584>)
 8005756:	f004 020f 	and.w	r2, r4, #15
 800575a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005766:	f7fa ff4f 	bl	8000608 <__aeabi_dmul>
 800576a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800576e:	1124      	asrs	r4, r4, #4
 8005770:	2300      	movs	r3, #0
 8005772:	2602      	movs	r6, #2
 8005774:	2c00      	cmp	r4, #0
 8005776:	f040 808f 	bne.w	8005898 <_dtoa_r+0x4c0>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1d3      	bne.n	8005726 <_dtoa_r+0x34e>
 800577e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005780:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8094 	beq.w	80058b2 <_dtoa_r+0x4da>
 800578a:	4b75      	ldr	r3, [pc, #468]	@ (8005960 <_dtoa_r+0x588>)
 800578c:	2200      	movs	r2, #0
 800578e:	4620      	mov	r0, r4
 8005790:	4629      	mov	r1, r5
 8005792:	f7fb f9ab 	bl	8000aec <__aeabi_dcmplt>
 8005796:	2800      	cmp	r0, #0
 8005798:	f000 808b 	beq.w	80058b2 <_dtoa_r+0x4da>
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 8087 	beq.w	80058b2 <_dtoa_r+0x4da>
 80057a4:	f1bb 0f00 	cmp.w	fp, #0
 80057a8:	dd34      	ble.n	8005814 <_dtoa_r+0x43c>
 80057aa:	4620      	mov	r0, r4
 80057ac:	4b6d      	ldr	r3, [pc, #436]	@ (8005964 <_dtoa_r+0x58c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	4629      	mov	r1, r5
 80057b2:	f7fa ff29 	bl	8000608 <__aeabi_dmul>
 80057b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057ba:	f107 38ff 	add.w	r8, r7, #4294967295
 80057be:	3601      	adds	r6, #1
 80057c0:	465c      	mov	r4, fp
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7fa feb6 	bl	8000534 <__aeabi_i2d>
 80057c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057cc:	f7fa ff1c 	bl	8000608 <__aeabi_dmul>
 80057d0:	4b65      	ldr	r3, [pc, #404]	@ (8005968 <_dtoa_r+0x590>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	f7fa fd62 	bl	800029c <__adddf3>
 80057d8:	4605      	mov	r5, r0
 80057da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80057de:	2c00      	cmp	r4, #0
 80057e0:	d16a      	bne.n	80058b8 <_dtoa_r+0x4e0>
 80057e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057e6:	4b61      	ldr	r3, [pc, #388]	@ (800596c <_dtoa_r+0x594>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	f7fa fd55 	bl	8000298 <__aeabi_dsub>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057f6:	462a      	mov	r2, r5
 80057f8:	4633      	mov	r3, r6
 80057fa:	f7fb f995 	bl	8000b28 <__aeabi_dcmpgt>
 80057fe:	2800      	cmp	r0, #0
 8005800:	f040 8298 	bne.w	8005d34 <_dtoa_r+0x95c>
 8005804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005808:	462a      	mov	r2, r5
 800580a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800580e:	f7fb f96d 	bl	8000aec <__aeabi_dcmplt>
 8005812:	bb38      	cbnz	r0, 8005864 <_dtoa_r+0x48c>
 8005814:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005818:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800581c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800581e:	2b00      	cmp	r3, #0
 8005820:	f2c0 8157 	blt.w	8005ad2 <_dtoa_r+0x6fa>
 8005824:	2f0e      	cmp	r7, #14
 8005826:	f300 8154 	bgt.w	8005ad2 <_dtoa_r+0x6fa>
 800582a:	4b4b      	ldr	r3, [pc, #300]	@ (8005958 <_dtoa_r+0x580>)
 800582c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005830:	ed93 7b00 	vldr	d7, [r3]
 8005834:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005836:	2b00      	cmp	r3, #0
 8005838:	ed8d 7b00 	vstr	d7, [sp]
 800583c:	f280 80e5 	bge.w	8005a0a <_dtoa_r+0x632>
 8005840:	9b03      	ldr	r3, [sp, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f300 80e1 	bgt.w	8005a0a <_dtoa_r+0x632>
 8005848:	d10c      	bne.n	8005864 <_dtoa_r+0x48c>
 800584a:	4b48      	ldr	r3, [pc, #288]	@ (800596c <_dtoa_r+0x594>)
 800584c:	2200      	movs	r2, #0
 800584e:	ec51 0b17 	vmov	r0, r1, d7
 8005852:	f7fa fed9 	bl	8000608 <__aeabi_dmul>
 8005856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800585a:	f7fb f95b 	bl	8000b14 <__aeabi_dcmpge>
 800585e:	2800      	cmp	r0, #0
 8005860:	f000 8266 	beq.w	8005d30 <_dtoa_r+0x958>
 8005864:	2400      	movs	r4, #0
 8005866:	4625      	mov	r5, r4
 8005868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800586a:	4656      	mov	r6, sl
 800586c:	ea6f 0803 	mvn.w	r8, r3
 8005870:	2700      	movs	r7, #0
 8005872:	4621      	mov	r1, r4
 8005874:	4648      	mov	r0, r9
 8005876:	f000 fcbf 	bl	80061f8 <_Bfree>
 800587a:	2d00      	cmp	r5, #0
 800587c:	f000 80bd 	beq.w	80059fa <_dtoa_r+0x622>
 8005880:	b12f      	cbz	r7, 800588e <_dtoa_r+0x4b6>
 8005882:	42af      	cmp	r7, r5
 8005884:	d003      	beq.n	800588e <_dtoa_r+0x4b6>
 8005886:	4639      	mov	r1, r7
 8005888:	4648      	mov	r0, r9
 800588a:	f000 fcb5 	bl	80061f8 <_Bfree>
 800588e:	4629      	mov	r1, r5
 8005890:	4648      	mov	r0, r9
 8005892:	f000 fcb1 	bl	80061f8 <_Bfree>
 8005896:	e0b0      	b.n	80059fa <_dtoa_r+0x622>
 8005898:	07e2      	lsls	r2, r4, #31
 800589a:	d505      	bpl.n	80058a8 <_dtoa_r+0x4d0>
 800589c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058a0:	f7fa feb2 	bl	8000608 <__aeabi_dmul>
 80058a4:	3601      	adds	r6, #1
 80058a6:	2301      	movs	r3, #1
 80058a8:	1064      	asrs	r4, r4, #1
 80058aa:	3508      	adds	r5, #8
 80058ac:	e762      	b.n	8005774 <_dtoa_r+0x39c>
 80058ae:	2602      	movs	r6, #2
 80058b0:	e765      	b.n	800577e <_dtoa_r+0x3a6>
 80058b2:	9c03      	ldr	r4, [sp, #12]
 80058b4:	46b8      	mov	r8, r7
 80058b6:	e784      	b.n	80057c2 <_dtoa_r+0x3ea>
 80058b8:	4b27      	ldr	r3, [pc, #156]	@ (8005958 <_dtoa_r+0x580>)
 80058ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058c4:	4454      	add	r4, sl
 80058c6:	2900      	cmp	r1, #0
 80058c8:	d054      	beq.n	8005974 <_dtoa_r+0x59c>
 80058ca:	4929      	ldr	r1, [pc, #164]	@ (8005970 <_dtoa_r+0x598>)
 80058cc:	2000      	movs	r0, #0
 80058ce:	f7fa ffc5 	bl	800085c <__aeabi_ddiv>
 80058d2:	4633      	mov	r3, r6
 80058d4:	462a      	mov	r2, r5
 80058d6:	f7fa fcdf 	bl	8000298 <__aeabi_dsub>
 80058da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80058de:	4656      	mov	r6, sl
 80058e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e4:	f7fb f940 	bl	8000b68 <__aeabi_d2iz>
 80058e8:	4605      	mov	r5, r0
 80058ea:	f7fa fe23 	bl	8000534 <__aeabi_i2d>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058f6:	f7fa fccf 	bl	8000298 <__aeabi_dsub>
 80058fa:	3530      	adds	r5, #48	@ 0x30
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005904:	f806 5b01 	strb.w	r5, [r6], #1
 8005908:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800590c:	f7fb f8ee 	bl	8000aec <__aeabi_dcmplt>
 8005910:	2800      	cmp	r0, #0
 8005912:	d172      	bne.n	80059fa <_dtoa_r+0x622>
 8005914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005918:	4911      	ldr	r1, [pc, #68]	@ (8005960 <_dtoa_r+0x588>)
 800591a:	2000      	movs	r0, #0
 800591c:	f7fa fcbc 	bl	8000298 <__aeabi_dsub>
 8005920:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005924:	f7fb f8e2 	bl	8000aec <__aeabi_dcmplt>
 8005928:	2800      	cmp	r0, #0
 800592a:	f040 80b4 	bne.w	8005a96 <_dtoa_r+0x6be>
 800592e:	42a6      	cmp	r6, r4
 8005930:	f43f af70 	beq.w	8005814 <_dtoa_r+0x43c>
 8005934:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005938:	4b0a      	ldr	r3, [pc, #40]	@ (8005964 <_dtoa_r+0x58c>)
 800593a:	2200      	movs	r2, #0
 800593c:	f7fa fe64 	bl	8000608 <__aeabi_dmul>
 8005940:	4b08      	ldr	r3, [pc, #32]	@ (8005964 <_dtoa_r+0x58c>)
 8005942:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005946:	2200      	movs	r2, #0
 8005948:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800594c:	f7fa fe5c 	bl	8000608 <__aeabi_dmul>
 8005950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005954:	e7c4      	b.n	80058e0 <_dtoa_r+0x508>
 8005956:	bf00      	nop
 8005958:	08008760 	.word	0x08008760
 800595c:	08008738 	.word	0x08008738
 8005960:	3ff00000 	.word	0x3ff00000
 8005964:	40240000 	.word	0x40240000
 8005968:	401c0000 	.word	0x401c0000
 800596c:	40140000 	.word	0x40140000
 8005970:	3fe00000 	.word	0x3fe00000
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	f7fa fe46 	bl	8000608 <__aeabi_dmul>
 800597c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005980:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005982:	4656      	mov	r6, sl
 8005984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005988:	f7fb f8ee 	bl	8000b68 <__aeabi_d2iz>
 800598c:	4605      	mov	r5, r0
 800598e:	f7fa fdd1 	bl	8000534 <__aeabi_i2d>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800599a:	f7fa fc7d 	bl	8000298 <__aeabi_dsub>
 800599e:	3530      	adds	r5, #48	@ 0x30
 80059a0:	f806 5b01 	strb.w	r5, [r6], #1
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	42a6      	cmp	r6, r4
 80059aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	d124      	bne.n	80059fe <_dtoa_r+0x626>
 80059b4:	4baf      	ldr	r3, [pc, #700]	@ (8005c74 <_dtoa_r+0x89c>)
 80059b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059ba:	f7fa fc6f 	bl	800029c <__adddf3>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c6:	f7fb f8af 	bl	8000b28 <__aeabi_dcmpgt>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d163      	bne.n	8005a96 <_dtoa_r+0x6be>
 80059ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059d2:	49a8      	ldr	r1, [pc, #672]	@ (8005c74 <_dtoa_r+0x89c>)
 80059d4:	2000      	movs	r0, #0
 80059d6:	f7fa fc5f 	bl	8000298 <__aeabi_dsub>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e2:	f7fb f883 	bl	8000aec <__aeabi_dcmplt>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f43f af14 	beq.w	8005814 <_dtoa_r+0x43c>
 80059ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80059ee:	1e73      	subs	r3, r6, #1
 80059f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80059f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059f6:	2b30      	cmp	r3, #48	@ 0x30
 80059f8:	d0f8      	beq.n	80059ec <_dtoa_r+0x614>
 80059fa:	4647      	mov	r7, r8
 80059fc:	e03b      	b.n	8005a76 <_dtoa_r+0x69e>
 80059fe:	4b9e      	ldr	r3, [pc, #632]	@ (8005c78 <_dtoa_r+0x8a0>)
 8005a00:	f7fa fe02 	bl	8000608 <__aeabi_dmul>
 8005a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a08:	e7bc      	b.n	8005984 <_dtoa_r+0x5ac>
 8005a0a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a0e:	4656      	mov	r6, sl
 8005a10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a14:	4620      	mov	r0, r4
 8005a16:	4629      	mov	r1, r5
 8005a18:	f7fa ff20 	bl	800085c <__aeabi_ddiv>
 8005a1c:	f7fb f8a4 	bl	8000b68 <__aeabi_d2iz>
 8005a20:	4680      	mov	r8, r0
 8005a22:	f7fa fd87 	bl	8000534 <__aeabi_i2d>
 8005a26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a2a:	f7fa fded 	bl	8000608 <__aeabi_dmul>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4620      	mov	r0, r4
 8005a34:	4629      	mov	r1, r5
 8005a36:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a3a:	f7fa fc2d 	bl	8000298 <__aeabi_dsub>
 8005a3e:	f806 4b01 	strb.w	r4, [r6], #1
 8005a42:	9d03      	ldr	r5, [sp, #12]
 8005a44:	eba6 040a 	sub.w	r4, r6, sl
 8005a48:	42a5      	cmp	r5, r4
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	d133      	bne.n	8005ab8 <_dtoa_r+0x6e0>
 8005a50:	f7fa fc24 	bl	800029c <__adddf3>
 8005a54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a58:	4604      	mov	r4, r0
 8005a5a:	460d      	mov	r5, r1
 8005a5c:	f7fb f864 	bl	8000b28 <__aeabi_dcmpgt>
 8005a60:	b9c0      	cbnz	r0, 8005a94 <_dtoa_r+0x6bc>
 8005a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f7fb f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a6e:	b110      	cbz	r0, 8005a76 <_dtoa_r+0x69e>
 8005a70:	f018 0f01 	tst.w	r8, #1
 8005a74:	d10e      	bne.n	8005a94 <_dtoa_r+0x6bc>
 8005a76:	9902      	ldr	r1, [sp, #8]
 8005a78:	4648      	mov	r0, r9
 8005a7a:	f000 fbbd 	bl	80061f8 <_Bfree>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	7033      	strb	r3, [r6, #0]
 8005a82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a84:	3701      	adds	r7, #1
 8005a86:	601f      	str	r7, [r3, #0]
 8005a88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 824b 	beq.w	8005f26 <_dtoa_r+0xb4e>
 8005a90:	601e      	str	r6, [r3, #0]
 8005a92:	e248      	b.n	8005f26 <_dtoa_r+0xb4e>
 8005a94:	46b8      	mov	r8, r7
 8005a96:	4633      	mov	r3, r6
 8005a98:	461e      	mov	r6, r3
 8005a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a9e:	2a39      	cmp	r2, #57	@ 0x39
 8005aa0:	d106      	bne.n	8005ab0 <_dtoa_r+0x6d8>
 8005aa2:	459a      	cmp	sl, r3
 8005aa4:	d1f8      	bne.n	8005a98 <_dtoa_r+0x6c0>
 8005aa6:	2230      	movs	r2, #48	@ 0x30
 8005aa8:	f108 0801 	add.w	r8, r8, #1
 8005aac:	f88a 2000 	strb.w	r2, [sl]
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	3201      	adds	r2, #1
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	e7a0      	b.n	80059fa <_dtoa_r+0x622>
 8005ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8005c78 <_dtoa_r+0x8a0>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	f7fa fda4 	bl	8000608 <__aeabi_dmul>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	f7fb f806 	bl	8000ad8 <__aeabi_dcmpeq>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d09f      	beq.n	8005a10 <_dtoa_r+0x638>
 8005ad0:	e7d1      	b.n	8005a76 <_dtoa_r+0x69e>
 8005ad2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	f000 80ea 	beq.w	8005cae <_dtoa_r+0x8d6>
 8005ada:	9a07      	ldr	r2, [sp, #28]
 8005adc:	2a01      	cmp	r2, #1
 8005ade:	f300 80cd 	bgt.w	8005c7c <_dtoa_r+0x8a4>
 8005ae2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	f000 80c1 	beq.w	8005c6c <_dtoa_r+0x894>
 8005aea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005aee:	9c08      	ldr	r4, [sp, #32]
 8005af0:	9e00      	ldr	r6, [sp, #0]
 8005af2:	9a00      	ldr	r2, [sp, #0]
 8005af4:	441a      	add	r2, r3
 8005af6:	9200      	str	r2, [sp, #0]
 8005af8:	9a06      	ldr	r2, [sp, #24]
 8005afa:	2101      	movs	r1, #1
 8005afc:	441a      	add	r2, r3
 8005afe:	4648      	mov	r0, r9
 8005b00:	9206      	str	r2, [sp, #24]
 8005b02:	f000 fc2d 	bl	8006360 <__i2b>
 8005b06:	4605      	mov	r5, r0
 8005b08:	b166      	cbz	r6, 8005b24 <_dtoa_r+0x74c>
 8005b0a:	9b06      	ldr	r3, [sp, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dd09      	ble.n	8005b24 <_dtoa_r+0x74c>
 8005b10:	42b3      	cmp	r3, r6
 8005b12:	9a00      	ldr	r2, [sp, #0]
 8005b14:	bfa8      	it	ge
 8005b16:	4633      	movge	r3, r6
 8005b18:	1ad2      	subs	r2, r2, r3
 8005b1a:	9200      	str	r2, [sp, #0]
 8005b1c:	9a06      	ldr	r2, [sp, #24]
 8005b1e:	1af6      	subs	r6, r6, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	9306      	str	r3, [sp, #24]
 8005b24:	9b08      	ldr	r3, [sp, #32]
 8005b26:	b30b      	cbz	r3, 8005b6c <_dtoa_r+0x794>
 8005b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 80c6 	beq.w	8005cbc <_dtoa_r+0x8e4>
 8005b30:	2c00      	cmp	r4, #0
 8005b32:	f000 80c0 	beq.w	8005cb6 <_dtoa_r+0x8de>
 8005b36:	4629      	mov	r1, r5
 8005b38:	4622      	mov	r2, r4
 8005b3a:	4648      	mov	r0, r9
 8005b3c:	f000 fcc8 	bl	80064d0 <__pow5mult>
 8005b40:	9a02      	ldr	r2, [sp, #8]
 8005b42:	4601      	mov	r1, r0
 8005b44:	4605      	mov	r5, r0
 8005b46:	4648      	mov	r0, r9
 8005b48:	f000 fc20 	bl	800638c <__multiply>
 8005b4c:	9902      	ldr	r1, [sp, #8]
 8005b4e:	4680      	mov	r8, r0
 8005b50:	4648      	mov	r0, r9
 8005b52:	f000 fb51 	bl	80061f8 <_Bfree>
 8005b56:	9b08      	ldr	r3, [sp, #32]
 8005b58:	1b1b      	subs	r3, r3, r4
 8005b5a:	9308      	str	r3, [sp, #32]
 8005b5c:	f000 80b1 	beq.w	8005cc2 <_dtoa_r+0x8ea>
 8005b60:	9a08      	ldr	r2, [sp, #32]
 8005b62:	4641      	mov	r1, r8
 8005b64:	4648      	mov	r0, r9
 8005b66:	f000 fcb3 	bl	80064d0 <__pow5mult>
 8005b6a:	9002      	str	r0, [sp, #8]
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	4648      	mov	r0, r9
 8005b70:	f000 fbf6 	bl	8006360 <__i2b>
 8005b74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b76:	4604      	mov	r4, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 81d8 	beq.w	8005f2e <_dtoa_r+0xb56>
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4601      	mov	r1, r0
 8005b82:	4648      	mov	r0, r9
 8005b84:	f000 fca4 	bl	80064d0 <__pow5mult>
 8005b88:	9b07      	ldr	r3, [sp, #28]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	f300 809f 	bgt.w	8005cd0 <_dtoa_r+0x8f8>
 8005b92:	9b04      	ldr	r3, [sp, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 8097 	bne.w	8005cc8 <_dtoa_r+0x8f0>
 8005b9a:	9b05      	ldr	r3, [sp, #20]
 8005b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 8093 	bne.w	8005ccc <_dtoa_r+0x8f4>
 8005ba6:	9b05      	ldr	r3, [sp, #20]
 8005ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bac:	0d1b      	lsrs	r3, r3, #20
 8005bae:	051b      	lsls	r3, r3, #20
 8005bb0:	b133      	cbz	r3, 8005bc0 <_dtoa_r+0x7e8>
 8005bb2:	9b00      	ldr	r3, [sp, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	9306      	str	r3, [sp, #24]
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	9308      	str	r3, [sp, #32]
 8005bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 81b8 	beq.w	8005f3a <_dtoa_r+0xb62>
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bd0:	6918      	ldr	r0, [r3, #16]
 8005bd2:	f000 fb79 	bl	80062c8 <__hi0bits>
 8005bd6:	f1c0 0020 	rsb	r0, r0, #32
 8005bda:	9b06      	ldr	r3, [sp, #24]
 8005bdc:	4418      	add	r0, r3
 8005bde:	f010 001f 	ands.w	r0, r0, #31
 8005be2:	f000 8082 	beq.w	8005cea <_dtoa_r+0x912>
 8005be6:	f1c0 0320 	rsb	r3, r0, #32
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	dd73      	ble.n	8005cd6 <_dtoa_r+0x8fe>
 8005bee:	9b00      	ldr	r3, [sp, #0]
 8005bf0:	f1c0 001c 	rsb	r0, r0, #28
 8005bf4:	4403      	add	r3, r0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	9b06      	ldr	r3, [sp, #24]
 8005bfa:	4403      	add	r3, r0
 8005bfc:	4406      	add	r6, r0
 8005bfe:	9306      	str	r3, [sp, #24]
 8005c00:	9b00      	ldr	r3, [sp, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	dd05      	ble.n	8005c12 <_dtoa_r+0x83a>
 8005c06:	9902      	ldr	r1, [sp, #8]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	4648      	mov	r0, r9
 8005c0c:	f000 fcba 	bl	8006584 <__lshift>
 8005c10:	9002      	str	r0, [sp, #8]
 8005c12:	9b06      	ldr	r3, [sp, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dd05      	ble.n	8005c24 <_dtoa_r+0x84c>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4648      	mov	r0, r9
 8005c1e:	f000 fcb1 	bl	8006584 <__lshift>
 8005c22:	4604      	mov	r4, r0
 8005c24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d061      	beq.n	8005cee <_dtoa_r+0x916>
 8005c2a:	9802      	ldr	r0, [sp, #8]
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	f000 fd15 	bl	800665c <__mcmp>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	da5b      	bge.n	8005cee <_dtoa_r+0x916>
 8005c36:	2300      	movs	r3, #0
 8005c38:	9902      	ldr	r1, [sp, #8]
 8005c3a:	220a      	movs	r2, #10
 8005c3c:	4648      	mov	r0, r9
 8005c3e:	f000 fafd 	bl	800623c <__multadd>
 8005c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c44:	9002      	str	r0, [sp, #8]
 8005c46:	f107 38ff 	add.w	r8, r7, #4294967295
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8177 	beq.w	8005f3e <_dtoa_r+0xb66>
 8005c50:	4629      	mov	r1, r5
 8005c52:	2300      	movs	r3, #0
 8005c54:	220a      	movs	r2, #10
 8005c56:	4648      	mov	r0, r9
 8005c58:	f000 faf0 	bl	800623c <__multadd>
 8005c5c:	f1bb 0f00 	cmp.w	fp, #0
 8005c60:	4605      	mov	r5, r0
 8005c62:	dc6f      	bgt.n	8005d44 <_dtoa_r+0x96c>
 8005c64:	9b07      	ldr	r3, [sp, #28]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	dc49      	bgt.n	8005cfe <_dtoa_r+0x926>
 8005c6a:	e06b      	b.n	8005d44 <_dtoa_r+0x96c>
 8005c6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c72:	e73c      	b.n	8005aee <_dtoa_r+0x716>
 8005c74:	3fe00000 	.word	0x3fe00000
 8005c78:	40240000 	.word	0x40240000
 8005c7c:	9b03      	ldr	r3, [sp, #12]
 8005c7e:	1e5c      	subs	r4, r3, #1
 8005c80:	9b08      	ldr	r3, [sp, #32]
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	db09      	blt.n	8005c9a <_dtoa_r+0x8c2>
 8005c86:	1b1c      	subs	r4, r3, r4
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f6bf af30 	bge.w	8005af0 <_dtoa_r+0x718>
 8005c90:	9b00      	ldr	r3, [sp, #0]
 8005c92:	9a03      	ldr	r2, [sp, #12]
 8005c94:	1a9e      	subs	r6, r3, r2
 8005c96:	2300      	movs	r3, #0
 8005c98:	e72b      	b.n	8005af2 <_dtoa_r+0x71a>
 8005c9a:	9b08      	ldr	r3, [sp, #32]
 8005c9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c9e:	9408      	str	r4, [sp, #32]
 8005ca0:	1ae3      	subs	r3, r4, r3
 8005ca2:	441a      	add	r2, r3
 8005ca4:	9e00      	ldr	r6, [sp, #0]
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	920d      	str	r2, [sp, #52]	@ 0x34
 8005caa:	2400      	movs	r4, #0
 8005cac:	e721      	b.n	8005af2 <_dtoa_r+0x71a>
 8005cae:	9c08      	ldr	r4, [sp, #32]
 8005cb0:	9e00      	ldr	r6, [sp, #0]
 8005cb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005cb4:	e728      	b.n	8005b08 <_dtoa_r+0x730>
 8005cb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005cba:	e751      	b.n	8005b60 <_dtoa_r+0x788>
 8005cbc:	9a08      	ldr	r2, [sp, #32]
 8005cbe:	9902      	ldr	r1, [sp, #8]
 8005cc0:	e750      	b.n	8005b64 <_dtoa_r+0x78c>
 8005cc2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005cc6:	e751      	b.n	8005b6c <_dtoa_r+0x794>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e779      	b.n	8005bc0 <_dtoa_r+0x7e8>
 8005ccc:	9b04      	ldr	r3, [sp, #16]
 8005cce:	e777      	b.n	8005bc0 <_dtoa_r+0x7e8>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9308      	str	r3, [sp, #32]
 8005cd4:	e779      	b.n	8005bca <_dtoa_r+0x7f2>
 8005cd6:	d093      	beq.n	8005c00 <_dtoa_r+0x828>
 8005cd8:	9a00      	ldr	r2, [sp, #0]
 8005cda:	331c      	adds	r3, #28
 8005cdc:	441a      	add	r2, r3
 8005cde:	9200      	str	r2, [sp, #0]
 8005ce0:	9a06      	ldr	r2, [sp, #24]
 8005ce2:	441a      	add	r2, r3
 8005ce4:	441e      	add	r6, r3
 8005ce6:	9206      	str	r2, [sp, #24]
 8005ce8:	e78a      	b.n	8005c00 <_dtoa_r+0x828>
 8005cea:	4603      	mov	r3, r0
 8005cec:	e7f4      	b.n	8005cd8 <_dtoa_r+0x900>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	46b8      	mov	r8, r7
 8005cf4:	dc20      	bgt.n	8005d38 <_dtoa_r+0x960>
 8005cf6:	469b      	mov	fp, r3
 8005cf8:	9b07      	ldr	r3, [sp, #28]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	dd1e      	ble.n	8005d3c <_dtoa_r+0x964>
 8005cfe:	f1bb 0f00 	cmp.w	fp, #0
 8005d02:	f47f adb1 	bne.w	8005868 <_dtoa_r+0x490>
 8005d06:	4621      	mov	r1, r4
 8005d08:	465b      	mov	r3, fp
 8005d0a:	2205      	movs	r2, #5
 8005d0c:	4648      	mov	r0, r9
 8005d0e:	f000 fa95 	bl	800623c <__multadd>
 8005d12:	4601      	mov	r1, r0
 8005d14:	4604      	mov	r4, r0
 8005d16:	9802      	ldr	r0, [sp, #8]
 8005d18:	f000 fca0 	bl	800665c <__mcmp>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	f77f ada3 	ble.w	8005868 <_dtoa_r+0x490>
 8005d22:	4656      	mov	r6, sl
 8005d24:	2331      	movs	r3, #49	@ 0x31
 8005d26:	f806 3b01 	strb.w	r3, [r6], #1
 8005d2a:	f108 0801 	add.w	r8, r8, #1
 8005d2e:	e59f      	b.n	8005870 <_dtoa_r+0x498>
 8005d30:	9c03      	ldr	r4, [sp, #12]
 8005d32:	46b8      	mov	r8, r7
 8005d34:	4625      	mov	r5, r4
 8005d36:	e7f4      	b.n	8005d22 <_dtoa_r+0x94a>
 8005d38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8101 	beq.w	8005f46 <_dtoa_r+0xb6e>
 8005d44:	2e00      	cmp	r6, #0
 8005d46:	dd05      	ble.n	8005d54 <_dtoa_r+0x97c>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4632      	mov	r2, r6
 8005d4c:	4648      	mov	r0, r9
 8005d4e:	f000 fc19 	bl	8006584 <__lshift>
 8005d52:	4605      	mov	r5, r0
 8005d54:	9b08      	ldr	r3, [sp, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d05c      	beq.n	8005e14 <_dtoa_r+0xa3c>
 8005d5a:	6869      	ldr	r1, [r5, #4]
 8005d5c:	4648      	mov	r0, r9
 8005d5e:	f000 fa0b 	bl	8006178 <_Balloc>
 8005d62:	4606      	mov	r6, r0
 8005d64:	b928      	cbnz	r0, 8005d72 <_dtoa_r+0x99a>
 8005d66:	4b82      	ldr	r3, [pc, #520]	@ (8005f70 <_dtoa_r+0xb98>)
 8005d68:	4602      	mov	r2, r0
 8005d6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d6e:	f7ff bb4a 	b.w	8005406 <_dtoa_r+0x2e>
 8005d72:	692a      	ldr	r2, [r5, #16]
 8005d74:	3202      	adds	r2, #2
 8005d76:	0092      	lsls	r2, r2, #2
 8005d78:	f105 010c 	add.w	r1, r5, #12
 8005d7c:	300c      	adds	r0, #12
 8005d7e:	f7ff fa94 	bl	80052aa <memcpy>
 8005d82:	2201      	movs	r2, #1
 8005d84:	4631      	mov	r1, r6
 8005d86:	4648      	mov	r0, r9
 8005d88:	f000 fbfc 	bl	8006584 <__lshift>
 8005d8c:	f10a 0301 	add.w	r3, sl, #1
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	eb0a 030b 	add.w	r3, sl, fp
 8005d96:	9308      	str	r3, [sp, #32]
 8005d98:	9b04      	ldr	r3, [sp, #16]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	462f      	mov	r7, r5
 8005da0:	9306      	str	r3, [sp, #24]
 8005da2:	4605      	mov	r5, r0
 8005da4:	9b00      	ldr	r3, [sp, #0]
 8005da6:	9802      	ldr	r0, [sp, #8]
 8005da8:	4621      	mov	r1, r4
 8005daa:	f103 3bff 	add.w	fp, r3, #4294967295
 8005dae:	f7ff fa8a 	bl	80052c6 <quorem>
 8005db2:	4603      	mov	r3, r0
 8005db4:	3330      	adds	r3, #48	@ 0x30
 8005db6:	9003      	str	r0, [sp, #12]
 8005db8:	4639      	mov	r1, r7
 8005dba:	9802      	ldr	r0, [sp, #8]
 8005dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dbe:	f000 fc4d 	bl	800665c <__mcmp>
 8005dc2:	462a      	mov	r2, r5
 8005dc4:	9004      	str	r0, [sp, #16]
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4648      	mov	r0, r9
 8005dca:	f000 fc63 	bl	8006694 <__mdiff>
 8005dce:	68c2      	ldr	r2, [r0, #12]
 8005dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	bb02      	cbnz	r2, 8005e18 <_dtoa_r+0xa40>
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	9802      	ldr	r0, [sp, #8]
 8005dda:	f000 fc3f 	bl	800665c <__mcmp>
 8005dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de0:	4602      	mov	r2, r0
 8005de2:	4631      	mov	r1, r6
 8005de4:	4648      	mov	r0, r9
 8005de6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dea:	f000 fa05 	bl	80061f8 <_Bfree>
 8005dee:	9b07      	ldr	r3, [sp, #28]
 8005df0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005df2:	9e00      	ldr	r6, [sp, #0]
 8005df4:	ea42 0103 	orr.w	r1, r2, r3
 8005df8:	9b06      	ldr	r3, [sp, #24]
 8005dfa:	4319      	orrs	r1, r3
 8005dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfe:	d10d      	bne.n	8005e1c <_dtoa_r+0xa44>
 8005e00:	2b39      	cmp	r3, #57	@ 0x39
 8005e02:	d027      	beq.n	8005e54 <_dtoa_r+0xa7c>
 8005e04:	9a04      	ldr	r2, [sp, #16]
 8005e06:	2a00      	cmp	r2, #0
 8005e08:	dd01      	ble.n	8005e0e <_dtoa_r+0xa36>
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	3331      	adds	r3, #49	@ 0x31
 8005e0e:	f88b 3000 	strb.w	r3, [fp]
 8005e12:	e52e      	b.n	8005872 <_dtoa_r+0x49a>
 8005e14:	4628      	mov	r0, r5
 8005e16:	e7b9      	b.n	8005d8c <_dtoa_r+0x9b4>
 8005e18:	2201      	movs	r2, #1
 8005e1a:	e7e2      	b.n	8005de2 <_dtoa_r+0xa0a>
 8005e1c:	9904      	ldr	r1, [sp, #16]
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	db04      	blt.n	8005e2c <_dtoa_r+0xa54>
 8005e22:	9807      	ldr	r0, [sp, #28]
 8005e24:	4301      	orrs	r1, r0
 8005e26:	9806      	ldr	r0, [sp, #24]
 8005e28:	4301      	orrs	r1, r0
 8005e2a:	d120      	bne.n	8005e6e <_dtoa_r+0xa96>
 8005e2c:	2a00      	cmp	r2, #0
 8005e2e:	ddee      	ble.n	8005e0e <_dtoa_r+0xa36>
 8005e30:	9902      	ldr	r1, [sp, #8]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	2201      	movs	r2, #1
 8005e36:	4648      	mov	r0, r9
 8005e38:	f000 fba4 	bl	8006584 <__lshift>
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	9002      	str	r0, [sp, #8]
 8005e40:	f000 fc0c 	bl	800665c <__mcmp>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	9b00      	ldr	r3, [sp, #0]
 8005e48:	dc02      	bgt.n	8005e50 <_dtoa_r+0xa78>
 8005e4a:	d1e0      	bne.n	8005e0e <_dtoa_r+0xa36>
 8005e4c:	07da      	lsls	r2, r3, #31
 8005e4e:	d5de      	bpl.n	8005e0e <_dtoa_r+0xa36>
 8005e50:	2b39      	cmp	r3, #57	@ 0x39
 8005e52:	d1da      	bne.n	8005e0a <_dtoa_r+0xa32>
 8005e54:	2339      	movs	r3, #57	@ 0x39
 8005e56:	f88b 3000 	strb.w	r3, [fp]
 8005e5a:	4633      	mov	r3, r6
 8005e5c:	461e      	mov	r6, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e64:	2a39      	cmp	r2, #57	@ 0x39
 8005e66:	d04e      	beq.n	8005f06 <_dtoa_r+0xb2e>
 8005e68:	3201      	adds	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	e501      	b.n	8005872 <_dtoa_r+0x49a>
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	dd03      	ble.n	8005e7a <_dtoa_r+0xaa2>
 8005e72:	2b39      	cmp	r3, #57	@ 0x39
 8005e74:	d0ee      	beq.n	8005e54 <_dtoa_r+0xa7c>
 8005e76:	3301      	adds	r3, #1
 8005e78:	e7c9      	b.n	8005e0e <_dtoa_r+0xa36>
 8005e7a:	9a00      	ldr	r2, [sp, #0]
 8005e7c:	9908      	ldr	r1, [sp, #32]
 8005e7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e82:	428a      	cmp	r2, r1
 8005e84:	d028      	beq.n	8005ed8 <_dtoa_r+0xb00>
 8005e86:	9902      	ldr	r1, [sp, #8]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	220a      	movs	r2, #10
 8005e8c:	4648      	mov	r0, r9
 8005e8e:	f000 f9d5 	bl	800623c <__multadd>
 8005e92:	42af      	cmp	r7, r5
 8005e94:	9002      	str	r0, [sp, #8]
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	f04f 020a 	mov.w	r2, #10
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	4648      	mov	r0, r9
 8005ea2:	d107      	bne.n	8005eb4 <_dtoa_r+0xadc>
 8005ea4:	f000 f9ca 	bl	800623c <__multadd>
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	4605      	mov	r5, r0
 8005eac:	9b00      	ldr	r3, [sp, #0]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	e777      	b.n	8005da4 <_dtoa_r+0x9cc>
 8005eb4:	f000 f9c2 	bl	800623c <__multadd>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4607      	mov	r7, r0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	220a      	movs	r2, #10
 8005ec0:	4648      	mov	r0, r9
 8005ec2:	f000 f9bb 	bl	800623c <__multadd>
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	e7f0      	b.n	8005eac <_dtoa_r+0xad4>
 8005eca:	f1bb 0f00 	cmp.w	fp, #0
 8005ece:	bfcc      	ite	gt
 8005ed0:	465e      	movgt	r6, fp
 8005ed2:	2601      	movle	r6, #1
 8005ed4:	4456      	add	r6, sl
 8005ed6:	2700      	movs	r7, #0
 8005ed8:	9902      	ldr	r1, [sp, #8]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	2201      	movs	r2, #1
 8005ede:	4648      	mov	r0, r9
 8005ee0:	f000 fb50 	bl	8006584 <__lshift>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	9002      	str	r0, [sp, #8]
 8005ee8:	f000 fbb8 	bl	800665c <__mcmp>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	dcb4      	bgt.n	8005e5a <_dtoa_r+0xa82>
 8005ef0:	d102      	bne.n	8005ef8 <_dtoa_r+0xb20>
 8005ef2:	9b00      	ldr	r3, [sp, #0]
 8005ef4:	07db      	lsls	r3, r3, #31
 8005ef6:	d4b0      	bmi.n	8005e5a <_dtoa_r+0xa82>
 8005ef8:	4633      	mov	r3, r6
 8005efa:	461e      	mov	r6, r3
 8005efc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f00:	2a30      	cmp	r2, #48	@ 0x30
 8005f02:	d0fa      	beq.n	8005efa <_dtoa_r+0xb22>
 8005f04:	e4b5      	b.n	8005872 <_dtoa_r+0x49a>
 8005f06:	459a      	cmp	sl, r3
 8005f08:	d1a8      	bne.n	8005e5c <_dtoa_r+0xa84>
 8005f0a:	2331      	movs	r3, #49	@ 0x31
 8005f0c:	f108 0801 	add.w	r8, r8, #1
 8005f10:	f88a 3000 	strb.w	r3, [sl]
 8005f14:	e4ad      	b.n	8005872 <_dtoa_r+0x49a>
 8005f16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005f74 <_dtoa_r+0xb9c>
 8005f1c:	b11b      	cbz	r3, 8005f26 <_dtoa_r+0xb4e>
 8005f1e:	f10a 0308 	add.w	r3, sl, #8
 8005f22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4650      	mov	r0, sl
 8005f28:	b017      	add	sp, #92	@ 0x5c
 8005f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2e:	9b07      	ldr	r3, [sp, #28]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f77f ae2e 	ble.w	8005b92 <_dtoa_r+0x7ba>
 8005f36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f38:	9308      	str	r3, [sp, #32]
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	e64d      	b.n	8005bda <_dtoa_r+0x802>
 8005f3e:	f1bb 0f00 	cmp.w	fp, #0
 8005f42:	f77f aed9 	ble.w	8005cf8 <_dtoa_r+0x920>
 8005f46:	4656      	mov	r6, sl
 8005f48:	9802      	ldr	r0, [sp, #8]
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	f7ff f9bb 	bl	80052c6 <quorem>
 8005f50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005f54:	f806 3b01 	strb.w	r3, [r6], #1
 8005f58:	eba6 020a 	sub.w	r2, r6, sl
 8005f5c:	4593      	cmp	fp, r2
 8005f5e:	ddb4      	ble.n	8005eca <_dtoa_r+0xaf2>
 8005f60:	9902      	ldr	r1, [sp, #8]
 8005f62:	2300      	movs	r3, #0
 8005f64:	220a      	movs	r2, #10
 8005f66:	4648      	mov	r0, r9
 8005f68:	f000 f968 	bl	800623c <__multadd>
 8005f6c:	9002      	str	r0, [sp, #8]
 8005f6e:	e7eb      	b.n	8005f48 <_dtoa_r+0xb70>
 8005f70:	08008664 	.word	0x08008664
 8005f74:	080085e8 	.word	0x080085e8

08005f78 <_free_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	d041      	beq.n	8006004 <_free_r+0x8c>
 8005f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f84:	1f0c      	subs	r4, r1, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfb8      	it	lt
 8005f8a:	18e4      	addlt	r4, r4, r3
 8005f8c:	f000 f8e8 	bl	8006160 <__malloc_lock>
 8005f90:	4a1d      	ldr	r2, [pc, #116]	@ (8006008 <_free_r+0x90>)
 8005f92:	6813      	ldr	r3, [r2, #0]
 8005f94:	b933      	cbnz	r3, 8005fa4 <_free_r+0x2c>
 8005f96:	6063      	str	r3, [r4, #4]
 8005f98:	6014      	str	r4, [r2, #0]
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fa0:	f000 b8e4 	b.w	800616c <__malloc_unlock>
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	d908      	bls.n	8005fba <_free_r+0x42>
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	1821      	adds	r1, r4, r0
 8005fac:	428b      	cmp	r3, r1
 8005fae:	bf01      	itttt	eq
 8005fb0:	6819      	ldreq	r1, [r3, #0]
 8005fb2:	685b      	ldreq	r3, [r3, #4]
 8005fb4:	1809      	addeq	r1, r1, r0
 8005fb6:	6021      	streq	r1, [r4, #0]
 8005fb8:	e7ed      	b.n	8005f96 <_free_r+0x1e>
 8005fba:	461a      	mov	r2, r3
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b10b      	cbz	r3, 8005fc4 <_free_r+0x4c>
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d9fa      	bls.n	8005fba <_free_r+0x42>
 8005fc4:	6811      	ldr	r1, [r2, #0]
 8005fc6:	1850      	adds	r0, r2, r1
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d10b      	bne.n	8005fe4 <_free_r+0x6c>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	4401      	add	r1, r0
 8005fd0:	1850      	adds	r0, r2, r1
 8005fd2:	4283      	cmp	r3, r0
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	d1e0      	bne.n	8005f9a <_free_r+0x22>
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	6053      	str	r3, [r2, #4]
 8005fde:	4408      	add	r0, r1
 8005fe0:	6010      	str	r0, [r2, #0]
 8005fe2:	e7da      	b.n	8005f9a <_free_r+0x22>
 8005fe4:	d902      	bls.n	8005fec <_free_r+0x74>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	e7d6      	b.n	8005f9a <_free_r+0x22>
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	1821      	adds	r1, r4, r0
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf04      	itt	eq
 8005ff4:	6819      	ldreq	r1, [r3, #0]
 8005ff6:	685b      	ldreq	r3, [r3, #4]
 8005ff8:	6063      	str	r3, [r4, #4]
 8005ffa:	bf04      	itt	eq
 8005ffc:	1809      	addeq	r1, r1, r0
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	6054      	str	r4, [r2, #4]
 8006002:	e7ca      	b.n	8005f9a <_free_r+0x22>
 8006004:	bd38      	pop	{r3, r4, r5, pc}
 8006006:	bf00      	nop
 8006008:	20002c38 	.word	0x20002c38

0800600c <malloc>:
 800600c:	4b02      	ldr	r3, [pc, #8]	@ (8006018 <malloc+0xc>)
 800600e:	4601      	mov	r1, r0
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	f000 b825 	b.w	8006060 <_malloc_r>
 8006016:	bf00      	nop
 8006018:	2000001c 	.word	0x2000001c

0800601c <sbrk_aligned>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4e0f      	ldr	r6, [pc, #60]	@ (800605c <sbrk_aligned+0x40>)
 8006020:	460c      	mov	r4, r1
 8006022:	6831      	ldr	r1, [r6, #0]
 8006024:	4605      	mov	r5, r0
 8006026:	b911      	cbnz	r1, 800602e <sbrk_aligned+0x12>
 8006028:	f000 fea2 	bl	8006d70 <_sbrk_r>
 800602c:	6030      	str	r0, [r6, #0]
 800602e:	4621      	mov	r1, r4
 8006030:	4628      	mov	r0, r5
 8006032:	f000 fe9d 	bl	8006d70 <_sbrk_r>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d103      	bne.n	8006042 <sbrk_aligned+0x26>
 800603a:	f04f 34ff 	mov.w	r4, #4294967295
 800603e:	4620      	mov	r0, r4
 8006040:	bd70      	pop	{r4, r5, r6, pc}
 8006042:	1cc4      	adds	r4, r0, #3
 8006044:	f024 0403 	bic.w	r4, r4, #3
 8006048:	42a0      	cmp	r0, r4
 800604a:	d0f8      	beq.n	800603e <sbrk_aligned+0x22>
 800604c:	1a21      	subs	r1, r4, r0
 800604e:	4628      	mov	r0, r5
 8006050:	f000 fe8e 	bl	8006d70 <_sbrk_r>
 8006054:	3001      	adds	r0, #1
 8006056:	d1f2      	bne.n	800603e <sbrk_aligned+0x22>
 8006058:	e7ef      	b.n	800603a <sbrk_aligned+0x1e>
 800605a:	bf00      	nop
 800605c:	20002c34 	.word	0x20002c34

08006060 <_malloc_r>:
 8006060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006064:	1ccd      	adds	r5, r1, #3
 8006066:	f025 0503 	bic.w	r5, r5, #3
 800606a:	3508      	adds	r5, #8
 800606c:	2d0c      	cmp	r5, #12
 800606e:	bf38      	it	cc
 8006070:	250c      	movcc	r5, #12
 8006072:	2d00      	cmp	r5, #0
 8006074:	4606      	mov	r6, r0
 8006076:	db01      	blt.n	800607c <_malloc_r+0x1c>
 8006078:	42a9      	cmp	r1, r5
 800607a:	d904      	bls.n	8006086 <_malloc_r+0x26>
 800607c:	230c      	movs	r3, #12
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	2000      	movs	r0, #0
 8006082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800615c <_malloc_r+0xfc>
 800608a:	f000 f869 	bl	8006160 <__malloc_lock>
 800608e:	f8d8 3000 	ldr.w	r3, [r8]
 8006092:	461c      	mov	r4, r3
 8006094:	bb44      	cbnz	r4, 80060e8 <_malloc_r+0x88>
 8006096:	4629      	mov	r1, r5
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff ffbf 	bl	800601c <sbrk_aligned>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	4604      	mov	r4, r0
 80060a2:	d158      	bne.n	8006156 <_malloc_r+0xf6>
 80060a4:	f8d8 4000 	ldr.w	r4, [r8]
 80060a8:	4627      	mov	r7, r4
 80060aa:	2f00      	cmp	r7, #0
 80060ac:	d143      	bne.n	8006136 <_malloc_r+0xd6>
 80060ae:	2c00      	cmp	r4, #0
 80060b0:	d04b      	beq.n	800614a <_malloc_r+0xea>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	4639      	mov	r1, r7
 80060b6:	4630      	mov	r0, r6
 80060b8:	eb04 0903 	add.w	r9, r4, r3
 80060bc:	f000 fe58 	bl	8006d70 <_sbrk_r>
 80060c0:	4581      	cmp	r9, r0
 80060c2:	d142      	bne.n	800614a <_malloc_r+0xea>
 80060c4:	6821      	ldr	r1, [r4, #0]
 80060c6:	1a6d      	subs	r5, r5, r1
 80060c8:	4629      	mov	r1, r5
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ffa6 	bl	800601c <sbrk_aligned>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d03a      	beq.n	800614a <_malloc_r+0xea>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	442b      	add	r3, r5
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	f8d8 3000 	ldr.w	r3, [r8]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	bb62      	cbnz	r2, 800613c <_malloc_r+0xdc>
 80060e2:	f8c8 7000 	str.w	r7, [r8]
 80060e6:	e00f      	b.n	8006108 <_malloc_r+0xa8>
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	1b52      	subs	r2, r2, r5
 80060ec:	d420      	bmi.n	8006130 <_malloc_r+0xd0>
 80060ee:	2a0b      	cmp	r2, #11
 80060f0:	d917      	bls.n	8006122 <_malloc_r+0xc2>
 80060f2:	1961      	adds	r1, r4, r5
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	6025      	str	r5, [r4, #0]
 80060f8:	bf18      	it	ne
 80060fa:	6059      	strne	r1, [r3, #4]
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	bf08      	it	eq
 8006100:	f8c8 1000 	streq.w	r1, [r8]
 8006104:	5162      	str	r2, [r4, r5]
 8006106:	604b      	str	r3, [r1, #4]
 8006108:	4630      	mov	r0, r6
 800610a:	f000 f82f 	bl	800616c <__malloc_unlock>
 800610e:	f104 000b 	add.w	r0, r4, #11
 8006112:	1d23      	adds	r3, r4, #4
 8006114:	f020 0007 	bic.w	r0, r0, #7
 8006118:	1ac2      	subs	r2, r0, r3
 800611a:	bf1c      	itt	ne
 800611c:	1a1b      	subne	r3, r3, r0
 800611e:	50a3      	strne	r3, [r4, r2]
 8006120:	e7af      	b.n	8006082 <_malloc_r+0x22>
 8006122:	6862      	ldr	r2, [r4, #4]
 8006124:	42a3      	cmp	r3, r4
 8006126:	bf0c      	ite	eq
 8006128:	f8c8 2000 	streq.w	r2, [r8]
 800612c:	605a      	strne	r2, [r3, #4]
 800612e:	e7eb      	b.n	8006108 <_malloc_r+0xa8>
 8006130:	4623      	mov	r3, r4
 8006132:	6864      	ldr	r4, [r4, #4]
 8006134:	e7ae      	b.n	8006094 <_malloc_r+0x34>
 8006136:	463c      	mov	r4, r7
 8006138:	687f      	ldr	r7, [r7, #4]
 800613a:	e7b6      	b.n	80060aa <_malloc_r+0x4a>
 800613c:	461a      	mov	r2, r3
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	42a3      	cmp	r3, r4
 8006142:	d1fb      	bne.n	800613c <_malloc_r+0xdc>
 8006144:	2300      	movs	r3, #0
 8006146:	6053      	str	r3, [r2, #4]
 8006148:	e7de      	b.n	8006108 <_malloc_r+0xa8>
 800614a:	230c      	movs	r3, #12
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	4630      	mov	r0, r6
 8006150:	f000 f80c 	bl	800616c <__malloc_unlock>
 8006154:	e794      	b.n	8006080 <_malloc_r+0x20>
 8006156:	6005      	str	r5, [r0, #0]
 8006158:	e7d6      	b.n	8006108 <_malloc_r+0xa8>
 800615a:	bf00      	nop
 800615c:	20002c38 	.word	0x20002c38

08006160 <__malloc_lock>:
 8006160:	4801      	ldr	r0, [pc, #4]	@ (8006168 <__malloc_lock+0x8>)
 8006162:	f7ff b8a0 	b.w	80052a6 <__retarget_lock_acquire_recursive>
 8006166:	bf00      	nop
 8006168:	20002c30 	.word	0x20002c30

0800616c <__malloc_unlock>:
 800616c:	4801      	ldr	r0, [pc, #4]	@ (8006174 <__malloc_unlock+0x8>)
 800616e:	f7ff b89b 	b.w	80052a8 <__retarget_lock_release_recursive>
 8006172:	bf00      	nop
 8006174:	20002c30 	.word	0x20002c30

08006178 <_Balloc>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	69c6      	ldr	r6, [r0, #28]
 800617c:	4604      	mov	r4, r0
 800617e:	460d      	mov	r5, r1
 8006180:	b976      	cbnz	r6, 80061a0 <_Balloc+0x28>
 8006182:	2010      	movs	r0, #16
 8006184:	f7ff ff42 	bl	800600c <malloc>
 8006188:	4602      	mov	r2, r0
 800618a:	61e0      	str	r0, [r4, #28]
 800618c:	b920      	cbnz	r0, 8006198 <_Balloc+0x20>
 800618e:	4b18      	ldr	r3, [pc, #96]	@ (80061f0 <_Balloc+0x78>)
 8006190:	4818      	ldr	r0, [pc, #96]	@ (80061f4 <_Balloc+0x7c>)
 8006192:	216b      	movs	r1, #107	@ 0x6b
 8006194:	f000 fdfc 	bl	8006d90 <__assert_func>
 8006198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800619c:	6006      	str	r6, [r0, #0]
 800619e:	60c6      	str	r6, [r0, #12]
 80061a0:	69e6      	ldr	r6, [r4, #28]
 80061a2:	68f3      	ldr	r3, [r6, #12]
 80061a4:	b183      	cbz	r3, 80061c8 <_Balloc+0x50>
 80061a6:	69e3      	ldr	r3, [r4, #28]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061ae:	b9b8      	cbnz	r0, 80061e0 <_Balloc+0x68>
 80061b0:	2101      	movs	r1, #1
 80061b2:	fa01 f605 	lsl.w	r6, r1, r5
 80061b6:	1d72      	adds	r2, r6, #5
 80061b8:	0092      	lsls	r2, r2, #2
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 fe06 	bl	8006dcc <_calloc_r>
 80061c0:	b160      	cbz	r0, 80061dc <_Balloc+0x64>
 80061c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061c6:	e00e      	b.n	80061e6 <_Balloc+0x6e>
 80061c8:	2221      	movs	r2, #33	@ 0x21
 80061ca:	2104      	movs	r1, #4
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 fdfd 	bl	8006dcc <_calloc_r>
 80061d2:	69e3      	ldr	r3, [r4, #28]
 80061d4:	60f0      	str	r0, [r6, #12]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e4      	bne.n	80061a6 <_Balloc+0x2e>
 80061dc:	2000      	movs	r0, #0
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	6802      	ldr	r2, [r0, #0]
 80061e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061e6:	2300      	movs	r3, #0
 80061e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061ec:	e7f7      	b.n	80061de <_Balloc+0x66>
 80061ee:	bf00      	nop
 80061f0:	080085f5 	.word	0x080085f5
 80061f4:	08008675 	.word	0x08008675

080061f8 <_Bfree>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	69c6      	ldr	r6, [r0, #28]
 80061fc:	4605      	mov	r5, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	b976      	cbnz	r6, 8006220 <_Bfree+0x28>
 8006202:	2010      	movs	r0, #16
 8006204:	f7ff ff02 	bl	800600c <malloc>
 8006208:	4602      	mov	r2, r0
 800620a:	61e8      	str	r0, [r5, #28]
 800620c:	b920      	cbnz	r0, 8006218 <_Bfree+0x20>
 800620e:	4b09      	ldr	r3, [pc, #36]	@ (8006234 <_Bfree+0x3c>)
 8006210:	4809      	ldr	r0, [pc, #36]	@ (8006238 <_Bfree+0x40>)
 8006212:	218f      	movs	r1, #143	@ 0x8f
 8006214:	f000 fdbc 	bl	8006d90 <__assert_func>
 8006218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800621c:	6006      	str	r6, [r0, #0]
 800621e:	60c6      	str	r6, [r0, #12]
 8006220:	b13c      	cbz	r4, 8006232 <_Bfree+0x3a>
 8006222:	69eb      	ldr	r3, [r5, #28]
 8006224:	6862      	ldr	r2, [r4, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800622c:	6021      	str	r1, [r4, #0]
 800622e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	080085f5 	.word	0x080085f5
 8006238:	08008675 	.word	0x08008675

0800623c <__multadd>:
 800623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006240:	690d      	ldr	r5, [r1, #16]
 8006242:	4607      	mov	r7, r0
 8006244:	460c      	mov	r4, r1
 8006246:	461e      	mov	r6, r3
 8006248:	f101 0c14 	add.w	ip, r1, #20
 800624c:	2000      	movs	r0, #0
 800624e:	f8dc 3000 	ldr.w	r3, [ip]
 8006252:	b299      	uxth	r1, r3
 8006254:	fb02 6101 	mla	r1, r2, r1, r6
 8006258:	0c1e      	lsrs	r6, r3, #16
 800625a:	0c0b      	lsrs	r3, r1, #16
 800625c:	fb02 3306 	mla	r3, r2, r6, r3
 8006260:	b289      	uxth	r1, r1
 8006262:	3001      	adds	r0, #1
 8006264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006268:	4285      	cmp	r5, r0
 800626a:	f84c 1b04 	str.w	r1, [ip], #4
 800626e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006272:	dcec      	bgt.n	800624e <__multadd+0x12>
 8006274:	b30e      	cbz	r6, 80062ba <__multadd+0x7e>
 8006276:	68a3      	ldr	r3, [r4, #8]
 8006278:	42ab      	cmp	r3, r5
 800627a:	dc19      	bgt.n	80062b0 <__multadd+0x74>
 800627c:	6861      	ldr	r1, [r4, #4]
 800627e:	4638      	mov	r0, r7
 8006280:	3101      	adds	r1, #1
 8006282:	f7ff ff79 	bl	8006178 <_Balloc>
 8006286:	4680      	mov	r8, r0
 8006288:	b928      	cbnz	r0, 8006296 <__multadd+0x5a>
 800628a:	4602      	mov	r2, r0
 800628c:	4b0c      	ldr	r3, [pc, #48]	@ (80062c0 <__multadd+0x84>)
 800628e:	480d      	ldr	r0, [pc, #52]	@ (80062c4 <__multadd+0x88>)
 8006290:	21ba      	movs	r1, #186	@ 0xba
 8006292:	f000 fd7d 	bl	8006d90 <__assert_func>
 8006296:	6922      	ldr	r2, [r4, #16]
 8006298:	3202      	adds	r2, #2
 800629a:	f104 010c 	add.w	r1, r4, #12
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	300c      	adds	r0, #12
 80062a2:	f7ff f802 	bl	80052aa <memcpy>
 80062a6:	4621      	mov	r1, r4
 80062a8:	4638      	mov	r0, r7
 80062aa:	f7ff ffa5 	bl	80061f8 <_Bfree>
 80062ae:	4644      	mov	r4, r8
 80062b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062b4:	3501      	adds	r5, #1
 80062b6:	615e      	str	r6, [r3, #20]
 80062b8:	6125      	str	r5, [r4, #16]
 80062ba:	4620      	mov	r0, r4
 80062bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c0:	08008664 	.word	0x08008664
 80062c4:	08008675 	.word	0x08008675

080062c8 <__hi0bits>:
 80062c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80062cc:	4603      	mov	r3, r0
 80062ce:	bf36      	itet	cc
 80062d0:	0403      	lslcc	r3, r0, #16
 80062d2:	2000      	movcs	r0, #0
 80062d4:	2010      	movcc	r0, #16
 80062d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062da:	bf3c      	itt	cc
 80062dc:	021b      	lslcc	r3, r3, #8
 80062de:	3008      	addcc	r0, #8
 80062e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e4:	bf3c      	itt	cc
 80062e6:	011b      	lslcc	r3, r3, #4
 80062e8:	3004      	addcc	r0, #4
 80062ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ee:	bf3c      	itt	cc
 80062f0:	009b      	lslcc	r3, r3, #2
 80062f2:	3002      	addcc	r0, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	db05      	blt.n	8006304 <__hi0bits+0x3c>
 80062f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062fc:	f100 0001 	add.w	r0, r0, #1
 8006300:	bf08      	it	eq
 8006302:	2020      	moveq	r0, #32
 8006304:	4770      	bx	lr

08006306 <__lo0bits>:
 8006306:	6803      	ldr	r3, [r0, #0]
 8006308:	4602      	mov	r2, r0
 800630a:	f013 0007 	ands.w	r0, r3, #7
 800630e:	d00b      	beq.n	8006328 <__lo0bits+0x22>
 8006310:	07d9      	lsls	r1, r3, #31
 8006312:	d421      	bmi.n	8006358 <__lo0bits+0x52>
 8006314:	0798      	lsls	r0, r3, #30
 8006316:	bf49      	itett	mi
 8006318:	085b      	lsrmi	r3, r3, #1
 800631a:	089b      	lsrpl	r3, r3, #2
 800631c:	2001      	movmi	r0, #1
 800631e:	6013      	strmi	r3, [r2, #0]
 8006320:	bf5c      	itt	pl
 8006322:	6013      	strpl	r3, [r2, #0]
 8006324:	2002      	movpl	r0, #2
 8006326:	4770      	bx	lr
 8006328:	b299      	uxth	r1, r3
 800632a:	b909      	cbnz	r1, 8006330 <__lo0bits+0x2a>
 800632c:	0c1b      	lsrs	r3, r3, #16
 800632e:	2010      	movs	r0, #16
 8006330:	b2d9      	uxtb	r1, r3
 8006332:	b909      	cbnz	r1, 8006338 <__lo0bits+0x32>
 8006334:	3008      	adds	r0, #8
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	0719      	lsls	r1, r3, #28
 800633a:	bf04      	itt	eq
 800633c:	091b      	lsreq	r3, r3, #4
 800633e:	3004      	addeq	r0, #4
 8006340:	0799      	lsls	r1, r3, #30
 8006342:	bf04      	itt	eq
 8006344:	089b      	lsreq	r3, r3, #2
 8006346:	3002      	addeq	r0, #2
 8006348:	07d9      	lsls	r1, r3, #31
 800634a:	d403      	bmi.n	8006354 <__lo0bits+0x4e>
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	f100 0001 	add.w	r0, r0, #1
 8006352:	d003      	beq.n	800635c <__lo0bits+0x56>
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	4770      	bx	lr
 8006358:	2000      	movs	r0, #0
 800635a:	4770      	bx	lr
 800635c:	2020      	movs	r0, #32
 800635e:	4770      	bx	lr

08006360 <__i2b>:
 8006360:	b510      	push	{r4, lr}
 8006362:	460c      	mov	r4, r1
 8006364:	2101      	movs	r1, #1
 8006366:	f7ff ff07 	bl	8006178 <_Balloc>
 800636a:	4602      	mov	r2, r0
 800636c:	b928      	cbnz	r0, 800637a <__i2b+0x1a>
 800636e:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <__i2b+0x24>)
 8006370:	4805      	ldr	r0, [pc, #20]	@ (8006388 <__i2b+0x28>)
 8006372:	f240 1145 	movw	r1, #325	@ 0x145
 8006376:	f000 fd0b 	bl	8006d90 <__assert_func>
 800637a:	2301      	movs	r3, #1
 800637c:	6144      	str	r4, [r0, #20]
 800637e:	6103      	str	r3, [r0, #16]
 8006380:	bd10      	pop	{r4, pc}
 8006382:	bf00      	nop
 8006384:	08008664 	.word	0x08008664
 8006388:	08008675 	.word	0x08008675

0800638c <__multiply>:
 800638c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006390:	4617      	mov	r7, r2
 8006392:	690a      	ldr	r2, [r1, #16]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	429a      	cmp	r2, r3
 8006398:	bfa8      	it	ge
 800639a:	463b      	movge	r3, r7
 800639c:	4689      	mov	r9, r1
 800639e:	bfa4      	itt	ge
 80063a0:	460f      	movge	r7, r1
 80063a2:	4699      	movge	r9, r3
 80063a4:	693d      	ldr	r5, [r7, #16]
 80063a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	eb05 060a 	add.w	r6, r5, sl
 80063b2:	42b3      	cmp	r3, r6
 80063b4:	b085      	sub	sp, #20
 80063b6:	bfb8      	it	lt
 80063b8:	3101      	addlt	r1, #1
 80063ba:	f7ff fedd 	bl	8006178 <_Balloc>
 80063be:	b930      	cbnz	r0, 80063ce <__multiply+0x42>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4b41      	ldr	r3, [pc, #260]	@ (80064c8 <__multiply+0x13c>)
 80063c4:	4841      	ldr	r0, [pc, #260]	@ (80064cc <__multiply+0x140>)
 80063c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80063ca:	f000 fce1 	bl	8006d90 <__assert_func>
 80063ce:	f100 0414 	add.w	r4, r0, #20
 80063d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80063d6:	4623      	mov	r3, r4
 80063d8:	2200      	movs	r2, #0
 80063da:	4573      	cmp	r3, lr
 80063dc:	d320      	bcc.n	8006420 <__multiply+0x94>
 80063de:	f107 0814 	add.w	r8, r7, #20
 80063e2:	f109 0114 	add.w	r1, r9, #20
 80063e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80063ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80063ee:	9302      	str	r3, [sp, #8]
 80063f0:	1beb      	subs	r3, r5, r7
 80063f2:	3b15      	subs	r3, #21
 80063f4:	f023 0303 	bic.w	r3, r3, #3
 80063f8:	3304      	adds	r3, #4
 80063fa:	3715      	adds	r7, #21
 80063fc:	42bd      	cmp	r5, r7
 80063fe:	bf38      	it	cc
 8006400:	2304      	movcc	r3, #4
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	9b02      	ldr	r3, [sp, #8]
 8006406:	9103      	str	r1, [sp, #12]
 8006408:	428b      	cmp	r3, r1
 800640a:	d80c      	bhi.n	8006426 <__multiply+0x9a>
 800640c:	2e00      	cmp	r6, #0
 800640e:	dd03      	ble.n	8006418 <__multiply+0x8c>
 8006410:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006414:	2b00      	cmp	r3, #0
 8006416:	d055      	beq.n	80064c4 <__multiply+0x138>
 8006418:	6106      	str	r6, [r0, #16]
 800641a:	b005      	add	sp, #20
 800641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006420:	f843 2b04 	str.w	r2, [r3], #4
 8006424:	e7d9      	b.n	80063da <__multiply+0x4e>
 8006426:	f8b1 a000 	ldrh.w	sl, [r1]
 800642a:	f1ba 0f00 	cmp.w	sl, #0
 800642e:	d01f      	beq.n	8006470 <__multiply+0xe4>
 8006430:	46c4      	mov	ip, r8
 8006432:	46a1      	mov	r9, r4
 8006434:	2700      	movs	r7, #0
 8006436:	f85c 2b04 	ldr.w	r2, [ip], #4
 800643a:	f8d9 3000 	ldr.w	r3, [r9]
 800643e:	fa1f fb82 	uxth.w	fp, r2
 8006442:	b29b      	uxth	r3, r3
 8006444:	fb0a 330b 	mla	r3, sl, fp, r3
 8006448:	443b      	add	r3, r7
 800644a:	f8d9 7000 	ldr.w	r7, [r9]
 800644e:	0c12      	lsrs	r2, r2, #16
 8006450:	0c3f      	lsrs	r7, r7, #16
 8006452:	fb0a 7202 	mla	r2, sl, r2, r7
 8006456:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800645a:	b29b      	uxth	r3, r3
 800645c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006460:	4565      	cmp	r5, ip
 8006462:	f849 3b04 	str.w	r3, [r9], #4
 8006466:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800646a:	d8e4      	bhi.n	8006436 <__multiply+0xaa>
 800646c:	9b01      	ldr	r3, [sp, #4]
 800646e:	50e7      	str	r7, [r4, r3]
 8006470:	9b03      	ldr	r3, [sp, #12]
 8006472:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006476:	3104      	adds	r1, #4
 8006478:	f1b9 0f00 	cmp.w	r9, #0
 800647c:	d020      	beq.n	80064c0 <__multiply+0x134>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	4647      	mov	r7, r8
 8006482:	46a4      	mov	ip, r4
 8006484:	f04f 0a00 	mov.w	sl, #0
 8006488:	f8b7 b000 	ldrh.w	fp, [r7]
 800648c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006490:	fb09 220b 	mla	r2, r9, fp, r2
 8006494:	4452      	add	r2, sl
 8006496:	b29b      	uxth	r3, r3
 8006498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800649c:	f84c 3b04 	str.w	r3, [ip], #4
 80064a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80064a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064a8:	f8bc 3000 	ldrh.w	r3, [ip]
 80064ac:	fb09 330a 	mla	r3, r9, sl, r3
 80064b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80064b4:	42bd      	cmp	r5, r7
 80064b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064ba:	d8e5      	bhi.n	8006488 <__multiply+0xfc>
 80064bc:	9a01      	ldr	r2, [sp, #4]
 80064be:	50a3      	str	r3, [r4, r2]
 80064c0:	3404      	adds	r4, #4
 80064c2:	e79f      	b.n	8006404 <__multiply+0x78>
 80064c4:	3e01      	subs	r6, #1
 80064c6:	e7a1      	b.n	800640c <__multiply+0x80>
 80064c8:	08008664 	.word	0x08008664
 80064cc:	08008675 	.word	0x08008675

080064d0 <__pow5mult>:
 80064d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d4:	4615      	mov	r5, r2
 80064d6:	f012 0203 	ands.w	r2, r2, #3
 80064da:	4607      	mov	r7, r0
 80064dc:	460e      	mov	r6, r1
 80064de:	d007      	beq.n	80064f0 <__pow5mult+0x20>
 80064e0:	4c25      	ldr	r4, [pc, #148]	@ (8006578 <__pow5mult+0xa8>)
 80064e2:	3a01      	subs	r2, #1
 80064e4:	2300      	movs	r3, #0
 80064e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064ea:	f7ff fea7 	bl	800623c <__multadd>
 80064ee:	4606      	mov	r6, r0
 80064f0:	10ad      	asrs	r5, r5, #2
 80064f2:	d03d      	beq.n	8006570 <__pow5mult+0xa0>
 80064f4:	69fc      	ldr	r4, [r7, #28]
 80064f6:	b97c      	cbnz	r4, 8006518 <__pow5mult+0x48>
 80064f8:	2010      	movs	r0, #16
 80064fa:	f7ff fd87 	bl	800600c <malloc>
 80064fe:	4602      	mov	r2, r0
 8006500:	61f8      	str	r0, [r7, #28]
 8006502:	b928      	cbnz	r0, 8006510 <__pow5mult+0x40>
 8006504:	4b1d      	ldr	r3, [pc, #116]	@ (800657c <__pow5mult+0xac>)
 8006506:	481e      	ldr	r0, [pc, #120]	@ (8006580 <__pow5mult+0xb0>)
 8006508:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800650c:	f000 fc40 	bl	8006d90 <__assert_func>
 8006510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006514:	6004      	str	r4, [r0, #0]
 8006516:	60c4      	str	r4, [r0, #12]
 8006518:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800651c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006520:	b94c      	cbnz	r4, 8006536 <__pow5mult+0x66>
 8006522:	f240 2171 	movw	r1, #625	@ 0x271
 8006526:	4638      	mov	r0, r7
 8006528:	f7ff ff1a 	bl	8006360 <__i2b>
 800652c:	2300      	movs	r3, #0
 800652e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006532:	4604      	mov	r4, r0
 8006534:	6003      	str	r3, [r0, #0]
 8006536:	f04f 0900 	mov.w	r9, #0
 800653a:	07eb      	lsls	r3, r5, #31
 800653c:	d50a      	bpl.n	8006554 <__pow5mult+0x84>
 800653e:	4631      	mov	r1, r6
 8006540:	4622      	mov	r2, r4
 8006542:	4638      	mov	r0, r7
 8006544:	f7ff ff22 	bl	800638c <__multiply>
 8006548:	4631      	mov	r1, r6
 800654a:	4680      	mov	r8, r0
 800654c:	4638      	mov	r0, r7
 800654e:	f7ff fe53 	bl	80061f8 <_Bfree>
 8006552:	4646      	mov	r6, r8
 8006554:	106d      	asrs	r5, r5, #1
 8006556:	d00b      	beq.n	8006570 <__pow5mult+0xa0>
 8006558:	6820      	ldr	r0, [r4, #0]
 800655a:	b938      	cbnz	r0, 800656c <__pow5mult+0x9c>
 800655c:	4622      	mov	r2, r4
 800655e:	4621      	mov	r1, r4
 8006560:	4638      	mov	r0, r7
 8006562:	f7ff ff13 	bl	800638c <__multiply>
 8006566:	6020      	str	r0, [r4, #0]
 8006568:	f8c0 9000 	str.w	r9, [r0]
 800656c:	4604      	mov	r4, r0
 800656e:	e7e4      	b.n	800653a <__pow5mult+0x6a>
 8006570:	4630      	mov	r0, r6
 8006572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006576:	bf00      	nop
 8006578:	08008728 	.word	0x08008728
 800657c:	080085f5 	.word	0x080085f5
 8006580:	08008675 	.word	0x08008675

08006584 <__lshift>:
 8006584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006588:	460c      	mov	r4, r1
 800658a:	6849      	ldr	r1, [r1, #4]
 800658c:	6923      	ldr	r3, [r4, #16]
 800658e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006592:	68a3      	ldr	r3, [r4, #8]
 8006594:	4607      	mov	r7, r0
 8006596:	4691      	mov	r9, r2
 8006598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800659c:	f108 0601 	add.w	r6, r8, #1
 80065a0:	42b3      	cmp	r3, r6
 80065a2:	db0b      	blt.n	80065bc <__lshift+0x38>
 80065a4:	4638      	mov	r0, r7
 80065a6:	f7ff fde7 	bl	8006178 <_Balloc>
 80065aa:	4605      	mov	r5, r0
 80065ac:	b948      	cbnz	r0, 80065c2 <__lshift+0x3e>
 80065ae:	4602      	mov	r2, r0
 80065b0:	4b28      	ldr	r3, [pc, #160]	@ (8006654 <__lshift+0xd0>)
 80065b2:	4829      	ldr	r0, [pc, #164]	@ (8006658 <__lshift+0xd4>)
 80065b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80065b8:	f000 fbea 	bl	8006d90 <__assert_func>
 80065bc:	3101      	adds	r1, #1
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	e7ee      	b.n	80065a0 <__lshift+0x1c>
 80065c2:	2300      	movs	r3, #0
 80065c4:	f100 0114 	add.w	r1, r0, #20
 80065c8:	f100 0210 	add.w	r2, r0, #16
 80065cc:	4618      	mov	r0, r3
 80065ce:	4553      	cmp	r3, sl
 80065d0:	db33      	blt.n	800663a <__lshift+0xb6>
 80065d2:	6920      	ldr	r0, [r4, #16]
 80065d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065d8:	f104 0314 	add.w	r3, r4, #20
 80065dc:	f019 091f 	ands.w	r9, r9, #31
 80065e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065e8:	d02b      	beq.n	8006642 <__lshift+0xbe>
 80065ea:	f1c9 0e20 	rsb	lr, r9, #32
 80065ee:	468a      	mov	sl, r1
 80065f0:	2200      	movs	r2, #0
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	fa00 f009 	lsl.w	r0, r0, r9
 80065f8:	4310      	orrs	r0, r2
 80065fa:	f84a 0b04 	str.w	r0, [sl], #4
 80065fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006602:	459c      	cmp	ip, r3
 8006604:	fa22 f20e 	lsr.w	r2, r2, lr
 8006608:	d8f3      	bhi.n	80065f2 <__lshift+0x6e>
 800660a:	ebac 0304 	sub.w	r3, ip, r4
 800660e:	3b15      	subs	r3, #21
 8006610:	f023 0303 	bic.w	r3, r3, #3
 8006614:	3304      	adds	r3, #4
 8006616:	f104 0015 	add.w	r0, r4, #21
 800661a:	4560      	cmp	r0, ip
 800661c:	bf88      	it	hi
 800661e:	2304      	movhi	r3, #4
 8006620:	50ca      	str	r2, [r1, r3]
 8006622:	b10a      	cbz	r2, 8006628 <__lshift+0xa4>
 8006624:	f108 0602 	add.w	r6, r8, #2
 8006628:	3e01      	subs	r6, #1
 800662a:	4638      	mov	r0, r7
 800662c:	612e      	str	r6, [r5, #16]
 800662e:	4621      	mov	r1, r4
 8006630:	f7ff fde2 	bl	80061f8 <_Bfree>
 8006634:	4628      	mov	r0, r5
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	f842 0f04 	str.w	r0, [r2, #4]!
 800663e:	3301      	adds	r3, #1
 8006640:	e7c5      	b.n	80065ce <__lshift+0x4a>
 8006642:	3904      	subs	r1, #4
 8006644:	f853 2b04 	ldr.w	r2, [r3], #4
 8006648:	f841 2f04 	str.w	r2, [r1, #4]!
 800664c:	459c      	cmp	ip, r3
 800664e:	d8f9      	bhi.n	8006644 <__lshift+0xc0>
 8006650:	e7ea      	b.n	8006628 <__lshift+0xa4>
 8006652:	bf00      	nop
 8006654:	08008664 	.word	0x08008664
 8006658:	08008675 	.word	0x08008675

0800665c <__mcmp>:
 800665c:	690a      	ldr	r2, [r1, #16]
 800665e:	4603      	mov	r3, r0
 8006660:	6900      	ldr	r0, [r0, #16]
 8006662:	1a80      	subs	r0, r0, r2
 8006664:	b530      	push	{r4, r5, lr}
 8006666:	d10e      	bne.n	8006686 <__mcmp+0x2a>
 8006668:	3314      	adds	r3, #20
 800666a:	3114      	adds	r1, #20
 800666c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006670:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006674:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006678:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800667c:	4295      	cmp	r5, r2
 800667e:	d003      	beq.n	8006688 <__mcmp+0x2c>
 8006680:	d205      	bcs.n	800668e <__mcmp+0x32>
 8006682:	f04f 30ff 	mov.w	r0, #4294967295
 8006686:	bd30      	pop	{r4, r5, pc}
 8006688:	42a3      	cmp	r3, r4
 800668a:	d3f3      	bcc.n	8006674 <__mcmp+0x18>
 800668c:	e7fb      	b.n	8006686 <__mcmp+0x2a>
 800668e:	2001      	movs	r0, #1
 8006690:	e7f9      	b.n	8006686 <__mcmp+0x2a>
	...

08006694 <__mdiff>:
 8006694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	4689      	mov	r9, r1
 800669a:	4606      	mov	r6, r0
 800669c:	4611      	mov	r1, r2
 800669e:	4648      	mov	r0, r9
 80066a0:	4614      	mov	r4, r2
 80066a2:	f7ff ffdb 	bl	800665c <__mcmp>
 80066a6:	1e05      	subs	r5, r0, #0
 80066a8:	d112      	bne.n	80066d0 <__mdiff+0x3c>
 80066aa:	4629      	mov	r1, r5
 80066ac:	4630      	mov	r0, r6
 80066ae:	f7ff fd63 	bl	8006178 <_Balloc>
 80066b2:	4602      	mov	r2, r0
 80066b4:	b928      	cbnz	r0, 80066c2 <__mdiff+0x2e>
 80066b6:	4b3f      	ldr	r3, [pc, #252]	@ (80067b4 <__mdiff+0x120>)
 80066b8:	f240 2137 	movw	r1, #567	@ 0x237
 80066bc:	483e      	ldr	r0, [pc, #248]	@ (80067b8 <__mdiff+0x124>)
 80066be:	f000 fb67 	bl	8006d90 <__assert_func>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066c8:	4610      	mov	r0, r2
 80066ca:	b003      	add	sp, #12
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d0:	bfbc      	itt	lt
 80066d2:	464b      	movlt	r3, r9
 80066d4:	46a1      	movlt	r9, r4
 80066d6:	4630      	mov	r0, r6
 80066d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80066dc:	bfba      	itte	lt
 80066de:	461c      	movlt	r4, r3
 80066e0:	2501      	movlt	r5, #1
 80066e2:	2500      	movge	r5, #0
 80066e4:	f7ff fd48 	bl	8006178 <_Balloc>
 80066e8:	4602      	mov	r2, r0
 80066ea:	b918      	cbnz	r0, 80066f4 <__mdiff+0x60>
 80066ec:	4b31      	ldr	r3, [pc, #196]	@ (80067b4 <__mdiff+0x120>)
 80066ee:	f240 2145 	movw	r1, #581	@ 0x245
 80066f2:	e7e3      	b.n	80066bc <__mdiff+0x28>
 80066f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80066f8:	6926      	ldr	r6, [r4, #16]
 80066fa:	60c5      	str	r5, [r0, #12]
 80066fc:	f109 0310 	add.w	r3, r9, #16
 8006700:	f109 0514 	add.w	r5, r9, #20
 8006704:	f104 0e14 	add.w	lr, r4, #20
 8006708:	f100 0b14 	add.w	fp, r0, #20
 800670c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006710:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	46d9      	mov	r9, fp
 8006718:	f04f 0c00 	mov.w	ip, #0
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006722:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	fa1f f38a 	uxth.w	r3, sl
 800672c:	4619      	mov	r1, r3
 800672e:	b283      	uxth	r3, r0
 8006730:	1acb      	subs	r3, r1, r3
 8006732:	0c00      	lsrs	r0, r0, #16
 8006734:	4463      	add	r3, ip
 8006736:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800673a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800673e:	b29b      	uxth	r3, r3
 8006740:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006744:	4576      	cmp	r6, lr
 8006746:	f849 3b04 	str.w	r3, [r9], #4
 800674a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800674e:	d8e5      	bhi.n	800671c <__mdiff+0x88>
 8006750:	1b33      	subs	r3, r6, r4
 8006752:	3b15      	subs	r3, #21
 8006754:	f023 0303 	bic.w	r3, r3, #3
 8006758:	3415      	adds	r4, #21
 800675a:	3304      	adds	r3, #4
 800675c:	42a6      	cmp	r6, r4
 800675e:	bf38      	it	cc
 8006760:	2304      	movcc	r3, #4
 8006762:	441d      	add	r5, r3
 8006764:	445b      	add	r3, fp
 8006766:	461e      	mov	r6, r3
 8006768:	462c      	mov	r4, r5
 800676a:	4544      	cmp	r4, r8
 800676c:	d30e      	bcc.n	800678c <__mdiff+0xf8>
 800676e:	f108 0103 	add.w	r1, r8, #3
 8006772:	1b49      	subs	r1, r1, r5
 8006774:	f021 0103 	bic.w	r1, r1, #3
 8006778:	3d03      	subs	r5, #3
 800677a:	45a8      	cmp	r8, r5
 800677c:	bf38      	it	cc
 800677e:	2100      	movcc	r1, #0
 8006780:	440b      	add	r3, r1
 8006782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006786:	b191      	cbz	r1, 80067ae <__mdiff+0x11a>
 8006788:	6117      	str	r7, [r2, #16]
 800678a:	e79d      	b.n	80066c8 <__mdiff+0x34>
 800678c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006790:	46e6      	mov	lr, ip
 8006792:	0c08      	lsrs	r0, r1, #16
 8006794:	fa1c fc81 	uxtah	ip, ip, r1
 8006798:	4471      	add	r1, lr
 800679a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800679e:	b289      	uxth	r1, r1
 80067a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80067a4:	f846 1b04 	str.w	r1, [r6], #4
 80067a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067ac:	e7dd      	b.n	800676a <__mdiff+0xd6>
 80067ae:	3f01      	subs	r7, #1
 80067b0:	e7e7      	b.n	8006782 <__mdiff+0xee>
 80067b2:	bf00      	nop
 80067b4:	08008664 	.word	0x08008664
 80067b8:	08008675 	.word	0x08008675

080067bc <__d2b>:
 80067bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067c0:	460f      	mov	r7, r1
 80067c2:	2101      	movs	r1, #1
 80067c4:	ec59 8b10 	vmov	r8, r9, d0
 80067c8:	4616      	mov	r6, r2
 80067ca:	f7ff fcd5 	bl	8006178 <_Balloc>
 80067ce:	4604      	mov	r4, r0
 80067d0:	b930      	cbnz	r0, 80067e0 <__d2b+0x24>
 80067d2:	4602      	mov	r2, r0
 80067d4:	4b23      	ldr	r3, [pc, #140]	@ (8006864 <__d2b+0xa8>)
 80067d6:	4824      	ldr	r0, [pc, #144]	@ (8006868 <__d2b+0xac>)
 80067d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80067dc:	f000 fad8 	bl	8006d90 <__assert_func>
 80067e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067e8:	b10d      	cbz	r5, 80067ee <__d2b+0x32>
 80067ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	f1b8 0300 	subs.w	r3, r8, #0
 80067f4:	d023      	beq.n	800683e <__d2b+0x82>
 80067f6:	4668      	mov	r0, sp
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	f7ff fd84 	bl	8006306 <__lo0bits>
 80067fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006802:	b1d0      	cbz	r0, 800683a <__d2b+0x7e>
 8006804:	f1c0 0320 	rsb	r3, r0, #32
 8006808:	fa02 f303 	lsl.w	r3, r2, r3
 800680c:	430b      	orrs	r3, r1
 800680e:	40c2      	lsrs	r2, r0
 8006810:	6163      	str	r3, [r4, #20]
 8006812:	9201      	str	r2, [sp, #4]
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	61a3      	str	r3, [r4, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf0c      	ite	eq
 800681c:	2201      	moveq	r2, #1
 800681e:	2202      	movne	r2, #2
 8006820:	6122      	str	r2, [r4, #16]
 8006822:	b1a5      	cbz	r5, 800684e <__d2b+0x92>
 8006824:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006828:	4405      	add	r5, r0
 800682a:	603d      	str	r5, [r7, #0]
 800682c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006830:	6030      	str	r0, [r6, #0]
 8006832:	4620      	mov	r0, r4
 8006834:	b003      	add	sp, #12
 8006836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800683a:	6161      	str	r1, [r4, #20]
 800683c:	e7ea      	b.n	8006814 <__d2b+0x58>
 800683e:	a801      	add	r0, sp, #4
 8006840:	f7ff fd61 	bl	8006306 <__lo0bits>
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	6163      	str	r3, [r4, #20]
 8006848:	3020      	adds	r0, #32
 800684a:	2201      	movs	r2, #1
 800684c:	e7e8      	b.n	8006820 <__d2b+0x64>
 800684e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006852:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006856:	6038      	str	r0, [r7, #0]
 8006858:	6918      	ldr	r0, [r3, #16]
 800685a:	f7ff fd35 	bl	80062c8 <__hi0bits>
 800685e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006862:	e7e5      	b.n	8006830 <__d2b+0x74>
 8006864:	08008664 	.word	0x08008664
 8006868:	08008675 	.word	0x08008675

0800686c <__sfputc_r>:
 800686c:	6893      	ldr	r3, [r2, #8]
 800686e:	3b01      	subs	r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	b410      	push	{r4}
 8006874:	6093      	str	r3, [r2, #8]
 8006876:	da08      	bge.n	800688a <__sfputc_r+0x1e>
 8006878:	6994      	ldr	r4, [r2, #24]
 800687a:	42a3      	cmp	r3, r4
 800687c:	db01      	blt.n	8006882 <__sfputc_r+0x16>
 800687e:	290a      	cmp	r1, #10
 8006880:	d103      	bne.n	800688a <__sfputc_r+0x1e>
 8006882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006886:	f000 b9df 	b.w	8006c48 <__swbuf_r>
 800688a:	6813      	ldr	r3, [r2, #0]
 800688c:	1c58      	adds	r0, r3, #1
 800688e:	6010      	str	r0, [r2, #0]
 8006890:	7019      	strb	r1, [r3, #0]
 8006892:	4608      	mov	r0, r1
 8006894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006898:	4770      	bx	lr

0800689a <__sfputs_r>:
 800689a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689c:	4606      	mov	r6, r0
 800689e:	460f      	mov	r7, r1
 80068a0:	4614      	mov	r4, r2
 80068a2:	18d5      	adds	r5, r2, r3
 80068a4:	42ac      	cmp	r4, r5
 80068a6:	d101      	bne.n	80068ac <__sfputs_r+0x12>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e007      	b.n	80068bc <__sfputs_r+0x22>
 80068ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b0:	463a      	mov	r2, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ffda 	bl	800686c <__sfputc_r>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d1f3      	bne.n	80068a4 <__sfputs_r+0xa>
 80068bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068c0 <_vfiprintf_r>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	460d      	mov	r5, r1
 80068c6:	b09d      	sub	sp, #116	@ 0x74
 80068c8:	4614      	mov	r4, r2
 80068ca:	4698      	mov	r8, r3
 80068cc:	4606      	mov	r6, r0
 80068ce:	b118      	cbz	r0, 80068d8 <_vfiprintf_r+0x18>
 80068d0:	6a03      	ldr	r3, [r0, #32]
 80068d2:	b90b      	cbnz	r3, 80068d8 <_vfiprintf_r+0x18>
 80068d4:	f7fe fb80 	bl	8004fd8 <__sinit>
 80068d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068da:	07d9      	lsls	r1, r3, #31
 80068dc:	d405      	bmi.n	80068ea <_vfiprintf_r+0x2a>
 80068de:	89ab      	ldrh	r3, [r5, #12]
 80068e0:	059a      	lsls	r2, r3, #22
 80068e2:	d402      	bmi.n	80068ea <_vfiprintf_r+0x2a>
 80068e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068e6:	f7fe fcde 	bl	80052a6 <__retarget_lock_acquire_recursive>
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	071b      	lsls	r3, r3, #28
 80068ee:	d501      	bpl.n	80068f4 <_vfiprintf_r+0x34>
 80068f0:	692b      	ldr	r3, [r5, #16]
 80068f2:	b99b      	cbnz	r3, 800691c <_vfiprintf_r+0x5c>
 80068f4:	4629      	mov	r1, r5
 80068f6:	4630      	mov	r0, r6
 80068f8:	f000 f9e4 	bl	8006cc4 <__swsetup_r>
 80068fc:	b170      	cbz	r0, 800691c <_vfiprintf_r+0x5c>
 80068fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006900:	07dc      	lsls	r4, r3, #31
 8006902:	d504      	bpl.n	800690e <_vfiprintf_r+0x4e>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	b01d      	add	sp, #116	@ 0x74
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	89ab      	ldrh	r3, [r5, #12]
 8006910:	0598      	lsls	r0, r3, #22
 8006912:	d4f7      	bmi.n	8006904 <_vfiprintf_r+0x44>
 8006914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006916:	f7fe fcc7 	bl	80052a8 <__retarget_lock_release_recursive>
 800691a:	e7f3      	b.n	8006904 <_vfiprintf_r+0x44>
 800691c:	2300      	movs	r3, #0
 800691e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006920:	2320      	movs	r3, #32
 8006922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006926:	f8cd 800c 	str.w	r8, [sp, #12]
 800692a:	2330      	movs	r3, #48	@ 0x30
 800692c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006adc <_vfiprintf_r+0x21c>
 8006930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006934:	f04f 0901 	mov.w	r9, #1
 8006938:	4623      	mov	r3, r4
 800693a:	469a      	mov	sl, r3
 800693c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006940:	b10a      	cbz	r2, 8006946 <_vfiprintf_r+0x86>
 8006942:	2a25      	cmp	r2, #37	@ 0x25
 8006944:	d1f9      	bne.n	800693a <_vfiprintf_r+0x7a>
 8006946:	ebba 0b04 	subs.w	fp, sl, r4
 800694a:	d00b      	beq.n	8006964 <_vfiprintf_r+0xa4>
 800694c:	465b      	mov	r3, fp
 800694e:	4622      	mov	r2, r4
 8006950:	4629      	mov	r1, r5
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ffa1 	bl	800689a <__sfputs_r>
 8006958:	3001      	adds	r0, #1
 800695a:	f000 80a7 	beq.w	8006aac <_vfiprintf_r+0x1ec>
 800695e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006960:	445a      	add	r2, fp
 8006962:	9209      	str	r2, [sp, #36]	@ 0x24
 8006964:	f89a 3000 	ldrb.w	r3, [sl]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 809f 	beq.w	8006aac <_vfiprintf_r+0x1ec>
 800696e:	2300      	movs	r3, #0
 8006970:	f04f 32ff 	mov.w	r2, #4294967295
 8006974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006978:	f10a 0a01 	add.w	sl, sl, #1
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	9307      	str	r3, [sp, #28]
 8006980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006984:	931a      	str	r3, [sp, #104]	@ 0x68
 8006986:	4654      	mov	r4, sl
 8006988:	2205      	movs	r2, #5
 800698a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698e:	4853      	ldr	r0, [pc, #332]	@ (8006adc <_vfiprintf_r+0x21c>)
 8006990:	f7f9 fc26 	bl	80001e0 <memchr>
 8006994:	9a04      	ldr	r2, [sp, #16]
 8006996:	b9d8      	cbnz	r0, 80069d0 <_vfiprintf_r+0x110>
 8006998:	06d1      	lsls	r1, r2, #27
 800699a:	bf44      	itt	mi
 800699c:	2320      	movmi	r3, #32
 800699e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069a2:	0713      	lsls	r3, r2, #28
 80069a4:	bf44      	itt	mi
 80069a6:	232b      	movmi	r3, #43	@ 0x2b
 80069a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069ac:	f89a 3000 	ldrb.w	r3, [sl]
 80069b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80069b2:	d015      	beq.n	80069e0 <_vfiprintf_r+0x120>
 80069b4:	9a07      	ldr	r2, [sp, #28]
 80069b6:	4654      	mov	r4, sl
 80069b8:	2000      	movs	r0, #0
 80069ba:	f04f 0c0a 	mov.w	ip, #10
 80069be:	4621      	mov	r1, r4
 80069c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c4:	3b30      	subs	r3, #48	@ 0x30
 80069c6:	2b09      	cmp	r3, #9
 80069c8:	d94b      	bls.n	8006a62 <_vfiprintf_r+0x1a2>
 80069ca:	b1b0      	cbz	r0, 80069fa <_vfiprintf_r+0x13a>
 80069cc:	9207      	str	r2, [sp, #28]
 80069ce:	e014      	b.n	80069fa <_vfiprintf_r+0x13a>
 80069d0:	eba0 0308 	sub.w	r3, r0, r8
 80069d4:	fa09 f303 	lsl.w	r3, r9, r3
 80069d8:	4313      	orrs	r3, r2
 80069da:	9304      	str	r3, [sp, #16]
 80069dc:	46a2      	mov	sl, r4
 80069de:	e7d2      	b.n	8006986 <_vfiprintf_r+0xc6>
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	1d19      	adds	r1, r3, #4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	9103      	str	r1, [sp, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bfbb      	ittet	lt
 80069ec:	425b      	neglt	r3, r3
 80069ee:	f042 0202 	orrlt.w	r2, r2, #2
 80069f2:	9307      	strge	r3, [sp, #28]
 80069f4:	9307      	strlt	r3, [sp, #28]
 80069f6:	bfb8      	it	lt
 80069f8:	9204      	strlt	r2, [sp, #16]
 80069fa:	7823      	ldrb	r3, [r4, #0]
 80069fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80069fe:	d10a      	bne.n	8006a16 <_vfiprintf_r+0x156>
 8006a00:	7863      	ldrb	r3, [r4, #1]
 8006a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a04:	d132      	bne.n	8006a6c <_vfiprintf_r+0x1ac>
 8006a06:	9b03      	ldr	r3, [sp, #12]
 8006a08:	1d1a      	adds	r2, r3, #4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	9203      	str	r2, [sp, #12]
 8006a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a12:	3402      	adds	r4, #2
 8006a14:	9305      	str	r3, [sp, #20]
 8006a16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006aec <_vfiprintf_r+0x22c>
 8006a1a:	7821      	ldrb	r1, [r4, #0]
 8006a1c:	2203      	movs	r2, #3
 8006a1e:	4650      	mov	r0, sl
 8006a20:	f7f9 fbde 	bl	80001e0 <memchr>
 8006a24:	b138      	cbz	r0, 8006a36 <_vfiprintf_r+0x176>
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	eba0 000a 	sub.w	r0, r0, sl
 8006a2c:	2240      	movs	r2, #64	@ 0x40
 8006a2e:	4082      	lsls	r2, r0
 8006a30:	4313      	orrs	r3, r2
 8006a32:	3401      	adds	r4, #1
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a3a:	4829      	ldr	r0, [pc, #164]	@ (8006ae0 <_vfiprintf_r+0x220>)
 8006a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a40:	2206      	movs	r2, #6
 8006a42:	f7f9 fbcd 	bl	80001e0 <memchr>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d03f      	beq.n	8006aca <_vfiprintf_r+0x20a>
 8006a4a:	4b26      	ldr	r3, [pc, #152]	@ (8006ae4 <_vfiprintf_r+0x224>)
 8006a4c:	bb1b      	cbnz	r3, 8006a96 <_vfiprintf_r+0x1d6>
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	3307      	adds	r3, #7
 8006a52:	f023 0307 	bic.w	r3, r3, #7
 8006a56:	3308      	adds	r3, #8
 8006a58:	9303      	str	r3, [sp, #12]
 8006a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5c:	443b      	add	r3, r7
 8006a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a60:	e76a      	b.n	8006938 <_vfiprintf_r+0x78>
 8006a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a66:	460c      	mov	r4, r1
 8006a68:	2001      	movs	r0, #1
 8006a6a:	e7a8      	b.n	80069be <_vfiprintf_r+0xfe>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	3401      	adds	r4, #1
 8006a70:	9305      	str	r3, [sp, #20]
 8006a72:	4619      	mov	r1, r3
 8006a74:	f04f 0c0a 	mov.w	ip, #10
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a7e:	3a30      	subs	r2, #48	@ 0x30
 8006a80:	2a09      	cmp	r2, #9
 8006a82:	d903      	bls.n	8006a8c <_vfiprintf_r+0x1cc>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0c6      	beq.n	8006a16 <_vfiprintf_r+0x156>
 8006a88:	9105      	str	r1, [sp, #20]
 8006a8a:	e7c4      	b.n	8006a16 <_vfiprintf_r+0x156>
 8006a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a90:	4604      	mov	r4, r0
 8006a92:	2301      	movs	r3, #1
 8006a94:	e7f0      	b.n	8006a78 <_vfiprintf_r+0x1b8>
 8006a96:	ab03      	add	r3, sp, #12
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	4b12      	ldr	r3, [pc, #72]	@ (8006ae8 <_vfiprintf_r+0x228>)
 8006a9e:	a904      	add	r1, sp, #16
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f7fd fe57 	bl	8004754 <_printf_float>
 8006aa6:	4607      	mov	r7, r0
 8006aa8:	1c78      	adds	r0, r7, #1
 8006aaa:	d1d6      	bne.n	8006a5a <_vfiprintf_r+0x19a>
 8006aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aae:	07d9      	lsls	r1, r3, #31
 8006ab0:	d405      	bmi.n	8006abe <_vfiprintf_r+0x1fe>
 8006ab2:	89ab      	ldrh	r3, [r5, #12]
 8006ab4:	059a      	lsls	r2, r3, #22
 8006ab6:	d402      	bmi.n	8006abe <_vfiprintf_r+0x1fe>
 8006ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aba:	f7fe fbf5 	bl	80052a8 <__retarget_lock_release_recursive>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	065b      	lsls	r3, r3, #25
 8006ac2:	f53f af1f 	bmi.w	8006904 <_vfiprintf_r+0x44>
 8006ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ac8:	e71e      	b.n	8006908 <_vfiprintf_r+0x48>
 8006aca:	ab03      	add	r3, sp, #12
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	462a      	mov	r2, r5
 8006ad0:	4b05      	ldr	r3, [pc, #20]	@ (8006ae8 <_vfiprintf_r+0x228>)
 8006ad2:	a904      	add	r1, sp, #16
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7fe f8d5 	bl	8004c84 <_printf_i>
 8006ada:	e7e4      	b.n	8006aa6 <_vfiprintf_r+0x1e6>
 8006adc:	080086ce 	.word	0x080086ce
 8006ae0:	080086d8 	.word	0x080086d8
 8006ae4:	08004755 	.word	0x08004755
 8006ae8:	0800689b 	.word	0x0800689b
 8006aec:	080086d4 	.word	0x080086d4

08006af0 <__sflush_r>:
 8006af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af8:	0716      	lsls	r6, r2, #28
 8006afa:	4605      	mov	r5, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	d454      	bmi.n	8006baa <__sflush_r+0xba>
 8006b00:	684b      	ldr	r3, [r1, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	dc02      	bgt.n	8006b0c <__sflush_r+0x1c>
 8006b06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	dd48      	ble.n	8006b9e <__sflush_r+0xae>
 8006b0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	d045      	beq.n	8006b9e <__sflush_r+0xae>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b18:	682f      	ldr	r7, [r5, #0]
 8006b1a:	6a21      	ldr	r1, [r4, #32]
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	d030      	beq.n	8006b82 <__sflush_r+0x92>
 8006b20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	0759      	lsls	r1, r3, #29
 8006b26:	d505      	bpl.n	8006b34 <__sflush_r+0x44>
 8006b28:	6863      	ldr	r3, [r4, #4]
 8006b2a:	1ad2      	subs	r2, r2, r3
 8006b2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b2e:	b10b      	cbz	r3, 8006b34 <__sflush_r+0x44>
 8006b30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	2300      	movs	r3, #0
 8006b36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b38:	6a21      	ldr	r1, [r4, #32]
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b0      	blx	r6
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	d106      	bne.n	8006b52 <__sflush_r+0x62>
 8006b44:	6829      	ldr	r1, [r5, #0]
 8006b46:	291d      	cmp	r1, #29
 8006b48:	d82b      	bhi.n	8006ba2 <__sflush_r+0xb2>
 8006b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf4 <__sflush_r+0x104>)
 8006b4c:	40ca      	lsrs	r2, r1
 8006b4e:	07d6      	lsls	r6, r2, #31
 8006b50:	d527      	bpl.n	8006ba2 <__sflush_r+0xb2>
 8006b52:	2200      	movs	r2, #0
 8006b54:	6062      	str	r2, [r4, #4]
 8006b56:	04d9      	lsls	r1, r3, #19
 8006b58:	6922      	ldr	r2, [r4, #16]
 8006b5a:	6022      	str	r2, [r4, #0]
 8006b5c:	d504      	bpl.n	8006b68 <__sflush_r+0x78>
 8006b5e:	1c42      	adds	r2, r0, #1
 8006b60:	d101      	bne.n	8006b66 <__sflush_r+0x76>
 8006b62:	682b      	ldr	r3, [r5, #0]
 8006b64:	b903      	cbnz	r3, 8006b68 <__sflush_r+0x78>
 8006b66:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b6a:	602f      	str	r7, [r5, #0]
 8006b6c:	b1b9      	cbz	r1, 8006b9e <__sflush_r+0xae>
 8006b6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b72:	4299      	cmp	r1, r3
 8006b74:	d002      	beq.n	8006b7c <__sflush_r+0x8c>
 8006b76:	4628      	mov	r0, r5
 8006b78:	f7ff f9fe 	bl	8005f78 <_free_r>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b80:	e00d      	b.n	8006b9e <__sflush_r+0xae>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b0      	blx	r6
 8006b88:	4602      	mov	r2, r0
 8006b8a:	1c50      	adds	r0, r2, #1
 8006b8c:	d1c9      	bne.n	8006b22 <__sflush_r+0x32>
 8006b8e:	682b      	ldr	r3, [r5, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0c6      	beq.n	8006b22 <__sflush_r+0x32>
 8006b94:	2b1d      	cmp	r3, #29
 8006b96:	d001      	beq.n	8006b9c <__sflush_r+0xac>
 8006b98:	2b16      	cmp	r3, #22
 8006b9a:	d11e      	bne.n	8006bda <__sflush_r+0xea>
 8006b9c:	602f      	str	r7, [r5, #0]
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	e022      	b.n	8006be8 <__sflush_r+0xf8>
 8006ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba6:	b21b      	sxth	r3, r3
 8006ba8:	e01b      	b.n	8006be2 <__sflush_r+0xf2>
 8006baa:	690f      	ldr	r7, [r1, #16]
 8006bac:	2f00      	cmp	r7, #0
 8006bae:	d0f6      	beq.n	8006b9e <__sflush_r+0xae>
 8006bb0:	0793      	lsls	r3, r2, #30
 8006bb2:	680e      	ldr	r6, [r1, #0]
 8006bb4:	bf08      	it	eq
 8006bb6:	694b      	ldreq	r3, [r1, #20]
 8006bb8:	600f      	str	r7, [r1, #0]
 8006bba:	bf18      	it	ne
 8006bbc:	2300      	movne	r3, #0
 8006bbe:	eba6 0807 	sub.w	r8, r6, r7
 8006bc2:	608b      	str	r3, [r1, #8]
 8006bc4:	f1b8 0f00 	cmp.w	r8, #0
 8006bc8:	dde9      	ble.n	8006b9e <__sflush_r+0xae>
 8006bca:	6a21      	ldr	r1, [r4, #32]
 8006bcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bce:	4643      	mov	r3, r8
 8006bd0:	463a      	mov	r2, r7
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b0      	blx	r6
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	dc08      	bgt.n	8006bec <__sflush_r+0xfc>
 8006bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bec:	4407      	add	r7, r0
 8006bee:	eba8 0800 	sub.w	r8, r8, r0
 8006bf2:	e7e7      	b.n	8006bc4 <__sflush_r+0xd4>
 8006bf4:	20400001 	.word	0x20400001

08006bf8 <_fflush_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	690b      	ldr	r3, [r1, #16]
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	b913      	cbnz	r3, 8006c08 <_fflush_r+0x10>
 8006c02:	2500      	movs	r5, #0
 8006c04:	4628      	mov	r0, r5
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	b118      	cbz	r0, 8006c12 <_fflush_r+0x1a>
 8006c0a:	6a03      	ldr	r3, [r0, #32]
 8006c0c:	b90b      	cbnz	r3, 8006c12 <_fflush_r+0x1a>
 8006c0e:	f7fe f9e3 	bl	8004fd8 <__sinit>
 8006c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f3      	beq.n	8006c02 <_fflush_r+0xa>
 8006c1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c1c:	07d0      	lsls	r0, r2, #31
 8006c1e:	d404      	bmi.n	8006c2a <_fflush_r+0x32>
 8006c20:	0599      	lsls	r1, r3, #22
 8006c22:	d402      	bmi.n	8006c2a <_fflush_r+0x32>
 8006c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c26:	f7fe fb3e 	bl	80052a6 <__retarget_lock_acquire_recursive>
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f7ff ff5f 	bl	8006af0 <__sflush_r>
 8006c32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c34:	07da      	lsls	r2, r3, #31
 8006c36:	4605      	mov	r5, r0
 8006c38:	d4e4      	bmi.n	8006c04 <_fflush_r+0xc>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	059b      	lsls	r3, r3, #22
 8006c3e:	d4e1      	bmi.n	8006c04 <_fflush_r+0xc>
 8006c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c42:	f7fe fb31 	bl	80052a8 <__retarget_lock_release_recursive>
 8006c46:	e7dd      	b.n	8006c04 <_fflush_r+0xc>

08006c48 <__swbuf_r>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	460e      	mov	r6, r1
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	4605      	mov	r5, r0
 8006c50:	b118      	cbz	r0, 8006c5a <__swbuf_r+0x12>
 8006c52:	6a03      	ldr	r3, [r0, #32]
 8006c54:	b90b      	cbnz	r3, 8006c5a <__swbuf_r+0x12>
 8006c56:	f7fe f9bf 	bl	8004fd8 <__sinit>
 8006c5a:	69a3      	ldr	r3, [r4, #24]
 8006c5c:	60a3      	str	r3, [r4, #8]
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	071a      	lsls	r2, r3, #28
 8006c62:	d501      	bpl.n	8006c68 <__swbuf_r+0x20>
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	b943      	cbnz	r3, 8006c7a <__swbuf_r+0x32>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f82a 	bl	8006cc4 <__swsetup_r>
 8006c70:	b118      	cbz	r0, 8006c7a <__swbuf_r+0x32>
 8006c72:	f04f 37ff 	mov.w	r7, #4294967295
 8006c76:	4638      	mov	r0, r7
 8006c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	6922      	ldr	r2, [r4, #16]
 8006c7e:	1a98      	subs	r0, r3, r2
 8006c80:	6963      	ldr	r3, [r4, #20]
 8006c82:	b2f6      	uxtb	r6, r6
 8006c84:	4283      	cmp	r3, r0
 8006c86:	4637      	mov	r7, r6
 8006c88:	dc05      	bgt.n	8006c96 <__swbuf_r+0x4e>
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f7ff ffb3 	bl	8006bf8 <_fflush_r>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d1ed      	bne.n	8006c72 <__swbuf_r+0x2a>
 8006c96:	68a3      	ldr	r3, [r4, #8]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	60a3      	str	r3, [r4, #8]
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	6022      	str	r2, [r4, #0]
 8006ca2:	701e      	strb	r6, [r3, #0]
 8006ca4:	6962      	ldr	r2, [r4, #20]
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d004      	beq.n	8006cb6 <__swbuf_r+0x6e>
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	07db      	lsls	r3, r3, #31
 8006cb0:	d5e1      	bpl.n	8006c76 <__swbuf_r+0x2e>
 8006cb2:	2e0a      	cmp	r6, #10
 8006cb4:	d1df      	bne.n	8006c76 <__swbuf_r+0x2e>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4628      	mov	r0, r5
 8006cba:	f7ff ff9d 	bl	8006bf8 <_fflush_r>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d0d9      	beq.n	8006c76 <__swbuf_r+0x2e>
 8006cc2:	e7d6      	b.n	8006c72 <__swbuf_r+0x2a>

08006cc4 <__swsetup_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4b29      	ldr	r3, [pc, #164]	@ (8006d6c <__swsetup_r+0xa8>)
 8006cc8:	4605      	mov	r5, r0
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	460c      	mov	r4, r1
 8006cce:	b118      	cbz	r0, 8006cd8 <__swsetup_r+0x14>
 8006cd0:	6a03      	ldr	r3, [r0, #32]
 8006cd2:	b90b      	cbnz	r3, 8006cd8 <__swsetup_r+0x14>
 8006cd4:	f7fe f980 	bl	8004fd8 <__sinit>
 8006cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cdc:	0719      	lsls	r1, r3, #28
 8006cde:	d422      	bmi.n	8006d26 <__swsetup_r+0x62>
 8006ce0:	06da      	lsls	r2, r3, #27
 8006ce2:	d407      	bmi.n	8006cf4 <__swsetup_r+0x30>
 8006ce4:	2209      	movs	r2, #9
 8006ce6:	602a      	str	r2, [r5, #0]
 8006ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf2:	e033      	b.n	8006d5c <__swsetup_r+0x98>
 8006cf4:	0758      	lsls	r0, r3, #29
 8006cf6:	d512      	bpl.n	8006d1e <__swsetup_r+0x5a>
 8006cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cfa:	b141      	cbz	r1, 8006d0e <__swsetup_r+0x4a>
 8006cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d00:	4299      	cmp	r1, r3
 8006d02:	d002      	beq.n	8006d0a <__swsetup_r+0x46>
 8006d04:	4628      	mov	r0, r5
 8006d06:	f7ff f937 	bl	8005f78 <_free_r>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	2300      	movs	r3, #0
 8006d18:	6063      	str	r3, [r4, #4]
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f043 0308 	orr.w	r3, r3, #8
 8006d24:	81a3      	strh	r3, [r4, #12]
 8006d26:	6923      	ldr	r3, [r4, #16]
 8006d28:	b94b      	cbnz	r3, 8006d3e <__swsetup_r+0x7a>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d34:	d003      	beq.n	8006d3e <__swsetup_r+0x7a>
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 f8b3 	bl	8006ea4 <__smakebuf_r>
 8006d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d42:	f013 0201 	ands.w	r2, r3, #1
 8006d46:	d00a      	beq.n	8006d5e <__swsetup_r+0x9a>
 8006d48:	2200      	movs	r2, #0
 8006d4a:	60a2      	str	r2, [r4, #8]
 8006d4c:	6962      	ldr	r2, [r4, #20]
 8006d4e:	4252      	negs	r2, r2
 8006d50:	61a2      	str	r2, [r4, #24]
 8006d52:	6922      	ldr	r2, [r4, #16]
 8006d54:	b942      	cbnz	r2, 8006d68 <__swsetup_r+0xa4>
 8006d56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d5a:	d1c5      	bne.n	8006ce8 <__swsetup_r+0x24>
 8006d5c:	bd38      	pop	{r3, r4, r5, pc}
 8006d5e:	0799      	lsls	r1, r3, #30
 8006d60:	bf58      	it	pl
 8006d62:	6962      	ldrpl	r2, [r4, #20]
 8006d64:	60a2      	str	r2, [r4, #8]
 8006d66:	e7f4      	b.n	8006d52 <__swsetup_r+0x8e>
 8006d68:	2000      	movs	r0, #0
 8006d6a:	e7f7      	b.n	8006d5c <__swsetup_r+0x98>
 8006d6c:	2000001c 	.word	0x2000001c

08006d70 <_sbrk_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4d06      	ldr	r5, [pc, #24]	@ (8006d8c <_sbrk_r+0x1c>)
 8006d74:	2300      	movs	r3, #0
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	f7fa fcb2 	bl	80016e4 <_sbrk>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_sbrk_r+0x1a>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_sbrk_r+0x1a>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	20002c2c 	.word	0x20002c2c

08006d90 <__assert_func>:
 8006d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d92:	4614      	mov	r4, r2
 8006d94:	461a      	mov	r2, r3
 8006d96:	4b09      	ldr	r3, [pc, #36]	@ (8006dbc <__assert_func+0x2c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	68d8      	ldr	r0, [r3, #12]
 8006d9e:	b14c      	cbz	r4, 8006db4 <__assert_func+0x24>
 8006da0:	4b07      	ldr	r3, [pc, #28]	@ (8006dc0 <__assert_func+0x30>)
 8006da2:	9100      	str	r1, [sp, #0]
 8006da4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006da8:	4906      	ldr	r1, [pc, #24]	@ (8006dc4 <__assert_func+0x34>)
 8006daa:	462b      	mov	r3, r5
 8006dac:	f000 f842 	bl	8006e34 <fiprintf>
 8006db0:	f000 f8d6 	bl	8006f60 <abort>
 8006db4:	4b04      	ldr	r3, [pc, #16]	@ (8006dc8 <__assert_func+0x38>)
 8006db6:	461c      	mov	r4, r3
 8006db8:	e7f3      	b.n	8006da2 <__assert_func+0x12>
 8006dba:	bf00      	nop
 8006dbc:	2000001c 	.word	0x2000001c
 8006dc0:	080086e9 	.word	0x080086e9
 8006dc4:	080086f6 	.word	0x080086f6
 8006dc8:	08008724 	.word	0x08008724

08006dcc <_calloc_r>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	fba1 5402 	umull	r5, r4, r1, r2
 8006dd2:	b934      	cbnz	r4, 8006de2 <_calloc_r+0x16>
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7ff f943 	bl	8006060 <_malloc_r>
 8006dda:	4606      	mov	r6, r0
 8006ddc:	b928      	cbnz	r0, 8006dea <_calloc_r+0x1e>
 8006dde:	4630      	mov	r0, r6
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
 8006de2:	220c      	movs	r2, #12
 8006de4:	6002      	str	r2, [r0, #0]
 8006de6:	2600      	movs	r6, #0
 8006de8:	e7f9      	b.n	8006dde <_calloc_r+0x12>
 8006dea:	462a      	mov	r2, r5
 8006dec:	4621      	mov	r1, r4
 8006dee:	f7fe f97e 	bl	80050ee <memset>
 8006df2:	e7f4      	b.n	8006dde <_calloc_r+0x12>

08006df4 <__ascii_mbtowc>:
 8006df4:	b082      	sub	sp, #8
 8006df6:	b901      	cbnz	r1, 8006dfa <__ascii_mbtowc+0x6>
 8006df8:	a901      	add	r1, sp, #4
 8006dfa:	b142      	cbz	r2, 8006e0e <__ascii_mbtowc+0x1a>
 8006dfc:	b14b      	cbz	r3, 8006e12 <__ascii_mbtowc+0x1e>
 8006dfe:	7813      	ldrb	r3, [r2, #0]
 8006e00:	600b      	str	r3, [r1, #0]
 8006e02:	7812      	ldrb	r2, [r2, #0]
 8006e04:	1e10      	subs	r0, r2, #0
 8006e06:	bf18      	it	ne
 8006e08:	2001      	movne	r0, #1
 8006e0a:	b002      	add	sp, #8
 8006e0c:	4770      	bx	lr
 8006e0e:	4610      	mov	r0, r2
 8006e10:	e7fb      	b.n	8006e0a <__ascii_mbtowc+0x16>
 8006e12:	f06f 0001 	mvn.w	r0, #1
 8006e16:	e7f8      	b.n	8006e0a <__ascii_mbtowc+0x16>

08006e18 <__ascii_wctomb>:
 8006e18:	4603      	mov	r3, r0
 8006e1a:	4608      	mov	r0, r1
 8006e1c:	b141      	cbz	r1, 8006e30 <__ascii_wctomb+0x18>
 8006e1e:	2aff      	cmp	r2, #255	@ 0xff
 8006e20:	d904      	bls.n	8006e2c <__ascii_wctomb+0x14>
 8006e22:	228a      	movs	r2, #138	@ 0x8a
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2a:	4770      	bx	lr
 8006e2c:	700a      	strb	r2, [r1, #0]
 8006e2e:	2001      	movs	r0, #1
 8006e30:	4770      	bx	lr
	...

08006e34 <fiprintf>:
 8006e34:	b40e      	push	{r1, r2, r3}
 8006e36:	b503      	push	{r0, r1, lr}
 8006e38:	4601      	mov	r1, r0
 8006e3a:	ab03      	add	r3, sp, #12
 8006e3c:	4805      	ldr	r0, [pc, #20]	@ (8006e54 <fiprintf+0x20>)
 8006e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e42:	6800      	ldr	r0, [r0, #0]
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	f7ff fd3b 	bl	80068c0 <_vfiprintf_r>
 8006e4a:	b002      	add	sp, #8
 8006e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e50:	b003      	add	sp, #12
 8006e52:	4770      	bx	lr
 8006e54:	2000001c 	.word	0x2000001c

08006e58 <__swhatbuf_r>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e60:	2900      	cmp	r1, #0
 8006e62:	b096      	sub	sp, #88	@ 0x58
 8006e64:	4615      	mov	r5, r2
 8006e66:	461e      	mov	r6, r3
 8006e68:	da0d      	bge.n	8006e86 <__swhatbuf_r+0x2e>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e70:	f04f 0100 	mov.w	r1, #0
 8006e74:	bf14      	ite	ne
 8006e76:	2340      	movne	r3, #64	@ 0x40
 8006e78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	6031      	str	r1, [r6, #0]
 8006e80:	602b      	str	r3, [r5, #0]
 8006e82:	b016      	add	sp, #88	@ 0x58
 8006e84:	bd70      	pop	{r4, r5, r6, pc}
 8006e86:	466a      	mov	r2, sp
 8006e88:	f000 f848 	bl	8006f1c <_fstat_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	dbec      	blt.n	8006e6a <__swhatbuf_r+0x12>
 8006e90:	9901      	ldr	r1, [sp, #4]
 8006e92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e9a:	4259      	negs	r1, r3
 8006e9c:	4159      	adcs	r1, r3
 8006e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ea2:	e7eb      	b.n	8006e7c <__swhatbuf_r+0x24>

08006ea4 <__smakebuf_r>:
 8006ea4:	898b      	ldrh	r3, [r1, #12]
 8006ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ea8:	079d      	lsls	r5, r3, #30
 8006eaa:	4606      	mov	r6, r0
 8006eac:	460c      	mov	r4, r1
 8006eae:	d507      	bpl.n	8006ec0 <__smakebuf_r+0x1c>
 8006eb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	6123      	str	r3, [r4, #16]
 8006eb8:	2301      	movs	r3, #1
 8006eba:	6163      	str	r3, [r4, #20]
 8006ebc:	b003      	add	sp, #12
 8006ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec0:	ab01      	add	r3, sp, #4
 8006ec2:	466a      	mov	r2, sp
 8006ec4:	f7ff ffc8 	bl	8006e58 <__swhatbuf_r>
 8006ec8:	9f00      	ldr	r7, [sp, #0]
 8006eca:	4605      	mov	r5, r0
 8006ecc:	4639      	mov	r1, r7
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff f8c6 	bl	8006060 <_malloc_r>
 8006ed4:	b948      	cbnz	r0, 8006eea <__smakebuf_r+0x46>
 8006ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eda:	059a      	lsls	r2, r3, #22
 8006edc:	d4ee      	bmi.n	8006ebc <__smakebuf_r+0x18>
 8006ede:	f023 0303 	bic.w	r3, r3, #3
 8006ee2:	f043 0302 	orr.w	r3, r3, #2
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	e7e2      	b.n	8006eb0 <__smakebuf_r+0xc>
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	6020      	str	r0, [r4, #0]
 8006eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef2:	81a3      	strh	r3, [r4, #12]
 8006ef4:	9b01      	ldr	r3, [sp, #4]
 8006ef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006efa:	b15b      	cbz	r3, 8006f14 <__smakebuf_r+0x70>
 8006efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f81d 	bl	8006f40 <_isatty_r>
 8006f06:	b128      	cbz	r0, 8006f14 <__smakebuf_r+0x70>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	f023 0303 	bic.w	r3, r3, #3
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	431d      	orrs	r5, r3
 8006f18:	81a5      	strh	r5, [r4, #12]
 8006f1a:	e7cf      	b.n	8006ebc <__smakebuf_r+0x18>

08006f1c <_fstat_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d07      	ldr	r5, [pc, #28]	@ (8006f3c <_fstat_r+0x20>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	f7fa fbd1 	bl	80016d0 <_fstat>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d102      	bne.n	8006f38 <_fstat_r+0x1c>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	b103      	cbz	r3, 8006f38 <_fstat_r+0x1c>
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20002c2c 	.word	0x20002c2c

08006f40 <_isatty_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d06      	ldr	r5, [pc, #24]	@ (8006f5c <_isatty_r+0x1c>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7fa fbc6 	bl	80016dc <_isatty>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_isatty_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_isatty_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	20002c2c 	.word	0x20002c2c

08006f60 <abort>:
 8006f60:	b508      	push	{r3, lr}
 8006f62:	2006      	movs	r0, #6
 8006f64:	f000 f82c 	bl	8006fc0 <raise>
 8006f68:	2001      	movs	r0, #1
 8006f6a:	f7fa fb99 	bl	80016a0 <_exit>

08006f6e <_raise_r>:
 8006f6e:	291f      	cmp	r1, #31
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4605      	mov	r5, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	d904      	bls.n	8006f82 <_raise_r+0x14>
 8006f78:	2316      	movs	r3, #22
 8006f7a:	6003      	str	r3, [r0, #0]
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f80:	bd38      	pop	{r3, r4, r5, pc}
 8006f82:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f84:	b112      	cbz	r2, 8006f8c <_raise_r+0x1e>
 8006f86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f8a:	b94b      	cbnz	r3, 8006fa0 <_raise_r+0x32>
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f000 f831 	bl	8006ff4 <_getpid_r>
 8006f92:	4622      	mov	r2, r4
 8006f94:	4601      	mov	r1, r0
 8006f96:	4628      	mov	r0, r5
 8006f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f9c:	f000 b818 	b.w	8006fd0 <_kill_r>
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d00a      	beq.n	8006fba <_raise_r+0x4c>
 8006fa4:	1c59      	adds	r1, r3, #1
 8006fa6:	d103      	bne.n	8006fb0 <_raise_r+0x42>
 8006fa8:	2316      	movs	r3, #22
 8006faa:	6003      	str	r3, [r0, #0]
 8006fac:	2001      	movs	r0, #1
 8006fae:	e7e7      	b.n	8006f80 <_raise_r+0x12>
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4798      	blx	r3
 8006fba:	2000      	movs	r0, #0
 8006fbc:	e7e0      	b.n	8006f80 <_raise_r+0x12>
	...

08006fc0 <raise>:
 8006fc0:	4b02      	ldr	r3, [pc, #8]	@ (8006fcc <raise+0xc>)
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	f7ff bfd2 	b.w	8006f6e <_raise_r>
 8006fca:	bf00      	nop
 8006fcc:	2000001c 	.word	0x2000001c

08006fd0 <_kill_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d07      	ldr	r5, [pc, #28]	@ (8006ff0 <_kill_r+0x20>)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	4611      	mov	r1, r2
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	f7fa fb57 	bl	8001690 <_kill>
 8006fe2:	1c43      	adds	r3, r0, #1
 8006fe4:	d102      	bne.n	8006fec <_kill_r+0x1c>
 8006fe6:	682b      	ldr	r3, [r5, #0]
 8006fe8:	b103      	cbz	r3, 8006fec <_kill_r+0x1c>
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
 8006fee:	bf00      	nop
 8006ff0:	20002c2c 	.word	0x20002c2c

08006ff4 <_getpid_r>:
 8006ff4:	f7fa bb4a 	b.w	800168c <_getpid>

08006ff8 <atan2>:
 8006ff8:	f000 b9ba 	b.w	8007370 <__ieee754_atan2>

08006ffc <sqrt>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	ed2d 8b02 	vpush	{d8}
 8007002:	ec55 4b10 	vmov	r4, r5, d0
 8007006:	f000 f8db 	bl	80071c0 <__ieee754_sqrt>
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	4620      	mov	r0, r4
 8007010:	4629      	mov	r1, r5
 8007012:	eeb0 8a40 	vmov.f32	s16, s0
 8007016:	eef0 8a60 	vmov.f32	s17, s1
 800701a:	f7f9 fd8f 	bl	8000b3c <__aeabi_dcmpun>
 800701e:	b990      	cbnz	r0, 8007046 <sqrt+0x4a>
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	4620      	mov	r0, r4
 8007026:	4629      	mov	r1, r5
 8007028:	f7f9 fd60 	bl	8000aec <__aeabi_dcmplt>
 800702c:	b158      	cbz	r0, 8007046 <sqrt+0x4a>
 800702e:	f7fe f90f 	bl	8005250 <__errno>
 8007032:	2321      	movs	r3, #33	@ 0x21
 8007034:	6003      	str	r3, [r0, #0]
 8007036:	2200      	movs	r2, #0
 8007038:	2300      	movs	r3, #0
 800703a:	4610      	mov	r0, r2
 800703c:	4619      	mov	r1, r3
 800703e:	f7f9 fc0d 	bl	800085c <__aeabi_ddiv>
 8007042:	ec41 0b18 	vmov	d8, r0, r1
 8007046:	eeb0 0a48 	vmov.f32	s0, s16
 800704a:	eef0 0a68 	vmov.f32	s1, s17
 800704e:	ecbd 8b02 	vpop	{d8}
 8007052:	bd38      	pop	{r3, r4, r5, pc}

08007054 <cosf>:
 8007054:	ee10 3a10 	vmov	r3, s0
 8007058:	b507      	push	{r0, r1, r2, lr}
 800705a:	4a1e      	ldr	r2, [pc, #120]	@ (80070d4 <cosf+0x80>)
 800705c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007060:	4293      	cmp	r3, r2
 8007062:	d806      	bhi.n	8007072 <cosf+0x1e>
 8007064:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80070d8 <cosf+0x84>
 8007068:	b003      	add	sp, #12
 800706a:	f85d eb04 	ldr.w	lr, [sp], #4
 800706e:	f000 bbe7 	b.w	8007840 <__kernel_cosf>
 8007072:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007076:	d304      	bcc.n	8007082 <cosf+0x2e>
 8007078:	ee30 0a40 	vsub.f32	s0, s0, s0
 800707c:	b003      	add	sp, #12
 800707e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007082:	4668      	mov	r0, sp
 8007084:	f000 fd5c 	bl	8007b40 <__ieee754_rem_pio2f>
 8007088:	f000 0003 	and.w	r0, r0, #3
 800708c:	2801      	cmp	r0, #1
 800708e:	d009      	beq.n	80070a4 <cosf+0x50>
 8007090:	2802      	cmp	r0, #2
 8007092:	d010      	beq.n	80070b6 <cosf+0x62>
 8007094:	b9b0      	cbnz	r0, 80070c4 <cosf+0x70>
 8007096:	eddd 0a01 	vldr	s1, [sp, #4]
 800709a:	ed9d 0a00 	vldr	s0, [sp]
 800709e:	f000 fbcf 	bl	8007840 <__kernel_cosf>
 80070a2:	e7eb      	b.n	800707c <cosf+0x28>
 80070a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80070a8:	ed9d 0a00 	vldr	s0, [sp]
 80070ac:	f000 fc20 	bl	80078f0 <__kernel_sinf>
 80070b0:	eeb1 0a40 	vneg.f32	s0, s0
 80070b4:	e7e2      	b.n	800707c <cosf+0x28>
 80070b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80070ba:	ed9d 0a00 	vldr	s0, [sp]
 80070be:	f000 fbbf 	bl	8007840 <__kernel_cosf>
 80070c2:	e7f5      	b.n	80070b0 <cosf+0x5c>
 80070c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80070c8:	ed9d 0a00 	vldr	s0, [sp]
 80070cc:	2001      	movs	r0, #1
 80070ce:	f000 fc0f 	bl	80078f0 <__kernel_sinf>
 80070d2:	e7d3      	b.n	800707c <cosf+0x28>
 80070d4:	3f490fd8 	.word	0x3f490fd8
 80070d8:	00000000 	.word	0x00000000

080070dc <sinf>:
 80070dc:	ee10 3a10 	vmov	r3, s0
 80070e0:	b507      	push	{r0, r1, r2, lr}
 80070e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007160 <sinf+0x84>)
 80070e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d807      	bhi.n	80070fc <sinf+0x20>
 80070ec:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007164 <sinf+0x88>
 80070f0:	2000      	movs	r0, #0
 80070f2:	b003      	add	sp, #12
 80070f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f8:	f000 bbfa 	b.w	80078f0 <__kernel_sinf>
 80070fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007100:	d304      	bcc.n	800710c <sinf+0x30>
 8007102:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007106:	b003      	add	sp, #12
 8007108:	f85d fb04 	ldr.w	pc, [sp], #4
 800710c:	4668      	mov	r0, sp
 800710e:	f000 fd17 	bl	8007b40 <__ieee754_rem_pio2f>
 8007112:	f000 0003 	and.w	r0, r0, #3
 8007116:	2801      	cmp	r0, #1
 8007118:	d00a      	beq.n	8007130 <sinf+0x54>
 800711a:	2802      	cmp	r0, #2
 800711c:	d00f      	beq.n	800713e <sinf+0x62>
 800711e:	b9c0      	cbnz	r0, 8007152 <sinf+0x76>
 8007120:	eddd 0a01 	vldr	s1, [sp, #4]
 8007124:	ed9d 0a00 	vldr	s0, [sp]
 8007128:	2001      	movs	r0, #1
 800712a:	f000 fbe1 	bl	80078f0 <__kernel_sinf>
 800712e:	e7ea      	b.n	8007106 <sinf+0x2a>
 8007130:	eddd 0a01 	vldr	s1, [sp, #4]
 8007134:	ed9d 0a00 	vldr	s0, [sp]
 8007138:	f000 fb82 	bl	8007840 <__kernel_cosf>
 800713c:	e7e3      	b.n	8007106 <sinf+0x2a>
 800713e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007142:	ed9d 0a00 	vldr	s0, [sp]
 8007146:	2001      	movs	r0, #1
 8007148:	f000 fbd2 	bl	80078f0 <__kernel_sinf>
 800714c:	eeb1 0a40 	vneg.f32	s0, s0
 8007150:	e7d9      	b.n	8007106 <sinf+0x2a>
 8007152:	eddd 0a01 	vldr	s1, [sp, #4]
 8007156:	ed9d 0a00 	vldr	s0, [sp]
 800715a:	f000 fb71 	bl	8007840 <__kernel_cosf>
 800715e:	e7f5      	b.n	800714c <sinf+0x70>
 8007160:	3f490fd8 	.word	0x3f490fd8
 8007164:	00000000 	.word	0x00000000

08007168 <tanf>:
 8007168:	ee10 3a10 	vmov	r3, s0
 800716c:	b507      	push	{r0, r1, r2, lr}
 800716e:	4a12      	ldr	r2, [pc, #72]	@ (80071b8 <tanf+0x50>)
 8007170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007174:	4293      	cmp	r3, r2
 8007176:	d807      	bhi.n	8007188 <tanf+0x20>
 8007178:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80071bc <tanf+0x54>
 800717c:	2001      	movs	r0, #1
 800717e:	b003      	add	sp, #12
 8007180:	f85d eb04 	ldr.w	lr, [sp], #4
 8007184:	f000 bbfc 	b.w	8007980 <__kernel_tanf>
 8007188:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800718c:	d304      	bcc.n	8007198 <tanf+0x30>
 800718e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007192:	b003      	add	sp, #12
 8007194:	f85d fb04 	ldr.w	pc, [sp], #4
 8007198:	4668      	mov	r0, sp
 800719a:	f000 fcd1 	bl	8007b40 <__ieee754_rem_pio2f>
 800719e:	0040      	lsls	r0, r0, #1
 80071a0:	f000 0002 	and.w	r0, r0, #2
 80071a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80071a8:	ed9d 0a00 	vldr	s0, [sp]
 80071ac:	f1c0 0001 	rsb	r0, r0, #1
 80071b0:	f000 fbe6 	bl	8007980 <__kernel_tanf>
 80071b4:	e7ed      	b.n	8007192 <tanf+0x2a>
 80071b6:	bf00      	nop
 80071b8:	3f490fda 	.word	0x3f490fda
 80071bc:	00000000 	.word	0x00000000

080071c0 <__ieee754_sqrt>:
 80071c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	4a66      	ldr	r2, [pc, #408]	@ (8007360 <__ieee754_sqrt+0x1a0>)
 80071c6:	ec55 4b10 	vmov	r4, r5, d0
 80071ca:	43aa      	bics	r2, r5
 80071cc:	462b      	mov	r3, r5
 80071ce:	4621      	mov	r1, r4
 80071d0:	d110      	bne.n	80071f4 <__ieee754_sqrt+0x34>
 80071d2:	4622      	mov	r2, r4
 80071d4:	4620      	mov	r0, r4
 80071d6:	4629      	mov	r1, r5
 80071d8:	f7f9 fa16 	bl	8000608 <__aeabi_dmul>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4620      	mov	r0, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7f9 f85a 	bl	800029c <__adddf3>
 80071e8:	4604      	mov	r4, r0
 80071ea:	460d      	mov	r5, r1
 80071ec:	ec45 4b10 	vmov	d0, r4, r5
 80071f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	dc0e      	bgt.n	8007216 <__ieee754_sqrt+0x56>
 80071f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80071fc:	4322      	orrs	r2, r4
 80071fe:	d0f5      	beq.n	80071ec <__ieee754_sqrt+0x2c>
 8007200:	b19d      	cbz	r5, 800722a <__ieee754_sqrt+0x6a>
 8007202:	4622      	mov	r2, r4
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	f7f9 f846 	bl	8000298 <__aeabi_dsub>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	f7f9 fb24 	bl	800085c <__aeabi_ddiv>
 8007214:	e7e8      	b.n	80071e8 <__ieee754_sqrt+0x28>
 8007216:	152a      	asrs	r2, r5, #20
 8007218:	d115      	bne.n	8007246 <__ieee754_sqrt+0x86>
 800721a:	2000      	movs	r0, #0
 800721c:	e009      	b.n	8007232 <__ieee754_sqrt+0x72>
 800721e:	0acb      	lsrs	r3, r1, #11
 8007220:	3a15      	subs	r2, #21
 8007222:	0549      	lsls	r1, r1, #21
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0fa      	beq.n	800721e <__ieee754_sqrt+0x5e>
 8007228:	e7f7      	b.n	800721a <__ieee754_sqrt+0x5a>
 800722a:	462a      	mov	r2, r5
 800722c:	e7fa      	b.n	8007224 <__ieee754_sqrt+0x64>
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	3001      	adds	r0, #1
 8007232:	02dc      	lsls	r4, r3, #11
 8007234:	d5fb      	bpl.n	800722e <__ieee754_sqrt+0x6e>
 8007236:	1e44      	subs	r4, r0, #1
 8007238:	1b12      	subs	r2, r2, r4
 800723a:	f1c0 0420 	rsb	r4, r0, #32
 800723e:	fa21 f404 	lsr.w	r4, r1, r4
 8007242:	4323      	orrs	r3, r4
 8007244:	4081      	lsls	r1, r0
 8007246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800724a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800724e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007252:	07d2      	lsls	r2, r2, #31
 8007254:	bf5c      	itt	pl
 8007256:	005b      	lslpl	r3, r3, #1
 8007258:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800725c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007260:	bf58      	it	pl
 8007262:	0049      	lslpl	r1, r1, #1
 8007264:	2600      	movs	r6, #0
 8007266:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800726a:	107f      	asrs	r7, r7, #1
 800726c:	0049      	lsls	r1, r1, #1
 800726e:	2016      	movs	r0, #22
 8007270:	4632      	mov	r2, r6
 8007272:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007276:	1915      	adds	r5, r2, r4
 8007278:	429d      	cmp	r5, r3
 800727a:	bfde      	ittt	le
 800727c:	192a      	addle	r2, r5, r4
 800727e:	1b5b      	suble	r3, r3, r5
 8007280:	1936      	addle	r6, r6, r4
 8007282:	0fcd      	lsrs	r5, r1, #31
 8007284:	3801      	subs	r0, #1
 8007286:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800728a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800728e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007292:	d1f0      	bne.n	8007276 <__ieee754_sqrt+0xb6>
 8007294:	4605      	mov	r5, r0
 8007296:	2420      	movs	r4, #32
 8007298:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800729c:	4293      	cmp	r3, r2
 800729e:	eb0c 0e00 	add.w	lr, ip, r0
 80072a2:	dc02      	bgt.n	80072aa <__ieee754_sqrt+0xea>
 80072a4:	d113      	bne.n	80072ce <__ieee754_sqrt+0x10e>
 80072a6:	458e      	cmp	lr, r1
 80072a8:	d811      	bhi.n	80072ce <__ieee754_sqrt+0x10e>
 80072aa:	f1be 0f00 	cmp.w	lr, #0
 80072ae:	eb0e 000c 	add.w	r0, lr, ip
 80072b2:	da3f      	bge.n	8007334 <__ieee754_sqrt+0x174>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	db3d      	blt.n	8007334 <__ieee754_sqrt+0x174>
 80072b8:	f102 0801 	add.w	r8, r2, #1
 80072bc:	1a9b      	subs	r3, r3, r2
 80072be:	458e      	cmp	lr, r1
 80072c0:	bf88      	it	hi
 80072c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80072c6:	eba1 010e 	sub.w	r1, r1, lr
 80072ca:	4465      	add	r5, ip
 80072cc:	4642      	mov	r2, r8
 80072ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80072d2:	3c01      	subs	r4, #1
 80072d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80072d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80072dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80072e0:	d1dc      	bne.n	800729c <__ieee754_sqrt+0xdc>
 80072e2:	4319      	orrs	r1, r3
 80072e4:	d01b      	beq.n	800731e <__ieee754_sqrt+0x15e>
 80072e6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8007364 <__ieee754_sqrt+0x1a4>
 80072ea:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007368 <__ieee754_sqrt+0x1a8>
 80072ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80072f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80072f6:	f7f8 ffcf 	bl	8000298 <__aeabi_dsub>
 80072fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4640      	mov	r0, r8
 8007304:	4649      	mov	r1, r9
 8007306:	f7f9 fbfb 	bl	8000b00 <__aeabi_dcmple>
 800730a:	b140      	cbz	r0, 800731e <__ieee754_sqrt+0x15e>
 800730c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007310:	e9da 0100 	ldrd	r0, r1, [sl]
 8007314:	e9db 2300 	ldrd	r2, r3, [fp]
 8007318:	d10e      	bne.n	8007338 <__ieee754_sqrt+0x178>
 800731a:	3601      	adds	r6, #1
 800731c:	4625      	mov	r5, r4
 800731e:	1073      	asrs	r3, r6, #1
 8007320:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007324:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007328:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800732c:	086b      	lsrs	r3, r5, #1
 800732e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8007332:	e759      	b.n	80071e8 <__ieee754_sqrt+0x28>
 8007334:	4690      	mov	r8, r2
 8007336:	e7c1      	b.n	80072bc <__ieee754_sqrt+0xfc>
 8007338:	f7f8 ffb0 	bl	800029c <__adddf3>
 800733c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4640      	mov	r0, r8
 8007346:	4649      	mov	r1, r9
 8007348:	f7f9 fbd0 	bl	8000aec <__aeabi_dcmplt>
 800734c:	b120      	cbz	r0, 8007358 <__ieee754_sqrt+0x198>
 800734e:	1cab      	adds	r3, r5, #2
 8007350:	bf08      	it	eq
 8007352:	3601      	addeq	r6, #1
 8007354:	3502      	adds	r5, #2
 8007356:	e7e2      	b.n	800731e <__ieee754_sqrt+0x15e>
 8007358:	1c6b      	adds	r3, r5, #1
 800735a:	f023 0501 	bic.w	r5, r3, #1
 800735e:	e7de      	b.n	800731e <__ieee754_sqrt+0x15e>
 8007360:	7ff00000 	.word	0x7ff00000
 8007364:	08008938 	.word	0x08008938
 8007368:	08008930 	.word	0x08008930
 800736c:	00000000 	.word	0x00000000

08007370 <__ieee754_atan2>:
 8007370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007374:	ec57 6b11 	vmov	r6, r7, d1
 8007378:	4273      	negs	r3, r6
 800737a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80074f8 <__ieee754_atan2+0x188>
 800737e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007382:	4333      	orrs	r3, r6
 8007384:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007388:	4543      	cmp	r3, r8
 800738a:	ec51 0b10 	vmov	r0, r1, d0
 800738e:	4635      	mov	r5, r6
 8007390:	d809      	bhi.n	80073a6 <__ieee754_atan2+0x36>
 8007392:	4244      	negs	r4, r0
 8007394:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007398:	4304      	orrs	r4, r0
 800739a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800739e:	4544      	cmp	r4, r8
 80073a0:	468e      	mov	lr, r1
 80073a2:	4681      	mov	r9, r0
 80073a4:	d907      	bls.n	80073b6 <__ieee754_atan2+0x46>
 80073a6:	4632      	mov	r2, r6
 80073a8:	463b      	mov	r3, r7
 80073aa:	f7f8 ff77 	bl	800029c <__adddf3>
 80073ae:	ec41 0b10 	vmov	d0, r0, r1
 80073b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80073ba:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80073be:	4334      	orrs	r4, r6
 80073c0:	d103      	bne.n	80073ca <__ieee754_atan2+0x5a>
 80073c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c6:	f000 b89b 	b.w	8007500 <atan>
 80073ca:	17bc      	asrs	r4, r7, #30
 80073cc:	f004 0402 	and.w	r4, r4, #2
 80073d0:	ea53 0909 	orrs.w	r9, r3, r9
 80073d4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80073d8:	d107      	bne.n	80073ea <__ieee754_atan2+0x7a>
 80073da:	2c02      	cmp	r4, #2
 80073dc:	d05f      	beq.n	800749e <__ieee754_atan2+0x12e>
 80073de:	2c03      	cmp	r4, #3
 80073e0:	d1e5      	bne.n	80073ae <__ieee754_atan2+0x3e>
 80073e2:	a143      	add	r1, pc, #268	@ (adr r1, 80074f0 <__ieee754_atan2+0x180>)
 80073e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073e8:	e7e1      	b.n	80073ae <__ieee754_atan2+0x3e>
 80073ea:	4315      	orrs	r5, r2
 80073ec:	d106      	bne.n	80073fc <__ieee754_atan2+0x8c>
 80073ee:	f1be 0f00 	cmp.w	lr, #0
 80073f2:	db5f      	blt.n	80074b4 <__ieee754_atan2+0x144>
 80073f4:	a136      	add	r1, pc, #216	@ (adr r1, 80074d0 <__ieee754_atan2+0x160>)
 80073f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073fa:	e7d8      	b.n	80073ae <__ieee754_atan2+0x3e>
 80073fc:	4542      	cmp	r2, r8
 80073fe:	d10f      	bne.n	8007420 <__ieee754_atan2+0xb0>
 8007400:	4293      	cmp	r3, r2
 8007402:	f104 34ff 	add.w	r4, r4, #4294967295
 8007406:	d107      	bne.n	8007418 <__ieee754_atan2+0xa8>
 8007408:	2c02      	cmp	r4, #2
 800740a:	d84c      	bhi.n	80074a6 <__ieee754_atan2+0x136>
 800740c:	4b36      	ldr	r3, [pc, #216]	@ (80074e8 <__ieee754_atan2+0x178>)
 800740e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007416:	e7ca      	b.n	80073ae <__ieee754_atan2+0x3e>
 8007418:	2c02      	cmp	r4, #2
 800741a:	d848      	bhi.n	80074ae <__ieee754_atan2+0x13e>
 800741c:	4b33      	ldr	r3, [pc, #204]	@ (80074ec <__ieee754_atan2+0x17c>)
 800741e:	e7f6      	b.n	800740e <__ieee754_atan2+0x9e>
 8007420:	4543      	cmp	r3, r8
 8007422:	d0e4      	beq.n	80073ee <__ieee754_atan2+0x7e>
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800742a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800742e:	da1e      	bge.n	800746e <__ieee754_atan2+0xfe>
 8007430:	2f00      	cmp	r7, #0
 8007432:	da01      	bge.n	8007438 <__ieee754_atan2+0xc8>
 8007434:	323c      	adds	r2, #60	@ 0x3c
 8007436:	db1e      	blt.n	8007476 <__ieee754_atan2+0x106>
 8007438:	4632      	mov	r2, r6
 800743a:	463b      	mov	r3, r7
 800743c:	f7f9 fa0e 	bl	800085c <__aeabi_ddiv>
 8007440:	ec41 0b10 	vmov	d0, r0, r1
 8007444:	f000 f9f4 	bl	8007830 <fabs>
 8007448:	f000 f85a 	bl	8007500 <atan>
 800744c:	ec51 0b10 	vmov	r0, r1, d0
 8007450:	2c01      	cmp	r4, #1
 8007452:	d013      	beq.n	800747c <__ieee754_atan2+0x10c>
 8007454:	2c02      	cmp	r4, #2
 8007456:	d015      	beq.n	8007484 <__ieee754_atan2+0x114>
 8007458:	2c00      	cmp	r4, #0
 800745a:	d0a8      	beq.n	80073ae <__ieee754_atan2+0x3e>
 800745c:	a318      	add	r3, pc, #96	@ (adr r3, 80074c0 <__ieee754_atan2+0x150>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f7f8 ff19 	bl	8000298 <__aeabi_dsub>
 8007466:	a318      	add	r3, pc, #96	@ (adr r3, 80074c8 <__ieee754_atan2+0x158>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	e014      	b.n	8007498 <__ieee754_atan2+0x128>
 800746e:	a118      	add	r1, pc, #96	@ (adr r1, 80074d0 <__ieee754_atan2+0x160>)
 8007470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007474:	e7ec      	b.n	8007450 <__ieee754_atan2+0xe0>
 8007476:	2000      	movs	r0, #0
 8007478:	2100      	movs	r1, #0
 800747a:	e7e9      	b.n	8007450 <__ieee754_atan2+0xe0>
 800747c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007480:	4619      	mov	r1, r3
 8007482:	e794      	b.n	80073ae <__ieee754_atan2+0x3e>
 8007484:	a30e      	add	r3, pc, #56	@ (adr r3, 80074c0 <__ieee754_atan2+0x150>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f7f8 ff05 	bl	8000298 <__aeabi_dsub>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	a10d      	add	r1, pc, #52	@ (adr r1, 80074c8 <__ieee754_atan2+0x158>)
 8007494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007498:	f7f8 fefe 	bl	8000298 <__aeabi_dsub>
 800749c:	e787      	b.n	80073ae <__ieee754_atan2+0x3e>
 800749e:	a10a      	add	r1, pc, #40	@ (adr r1, 80074c8 <__ieee754_atan2+0x158>)
 80074a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a4:	e783      	b.n	80073ae <__ieee754_atan2+0x3e>
 80074a6:	a10c      	add	r1, pc, #48	@ (adr r1, 80074d8 <__ieee754_atan2+0x168>)
 80074a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ac:	e77f      	b.n	80073ae <__ieee754_atan2+0x3e>
 80074ae:	2000      	movs	r0, #0
 80074b0:	2100      	movs	r1, #0
 80074b2:	e77c      	b.n	80073ae <__ieee754_atan2+0x3e>
 80074b4:	a10a      	add	r1, pc, #40	@ (adr r1, 80074e0 <__ieee754_atan2+0x170>)
 80074b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ba:	e778      	b.n	80073ae <__ieee754_atan2+0x3e>
 80074bc:	f3af 8000 	nop.w
 80074c0:	33145c07 	.word	0x33145c07
 80074c4:	3ca1a626 	.word	0x3ca1a626
 80074c8:	54442d18 	.word	0x54442d18
 80074cc:	400921fb 	.word	0x400921fb
 80074d0:	54442d18 	.word	0x54442d18
 80074d4:	3ff921fb 	.word	0x3ff921fb
 80074d8:	54442d18 	.word	0x54442d18
 80074dc:	3fe921fb 	.word	0x3fe921fb
 80074e0:	54442d18 	.word	0x54442d18
 80074e4:	bff921fb 	.word	0xbff921fb
 80074e8:	08008958 	.word	0x08008958
 80074ec:	08008940 	.word	0x08008940
 80074f0:	54442d18 	.word	0x54442d18
 80074f4:	c00921fb 	.word	0xc00921fb
 80074f8:	7ff00000 	.word	0x7ff00000
 80074fc:	00000000 	.word	0x00000000

08007500 <atan>:
 8007500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	ec55 4b10 	vmov	r4, r5, d0
 8007508:	4bbf      	ldr	r3, [pc, #764]	@ (8007808 <atan+0x308>)
 800750a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800750e:	429e      	cmp	r6, r3
 8007510:	46ab      	mov	fp, r5
 8007512:	d918      	bls.n	8007546 <atan+0x46>
 8007514:	4bbd      	ldr	r3, [pc, #756]	@ (800780c <atan+0x30c>)
 8007516:	429e      	cmp	r6, r3
 8007518:	d801      	bhi.n	800751e <atan+0x1e>
 800751a:	d109      	bne.n	8007530 <atan+0x30>
 800751c:	b144      	cbz	r4, 8007530 <atan+0x30>
 800751e:	4622      	mov	r2, r4
 8007520:	462b      	mov	r3, r5
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	f7f8 feb9 	bl	800029c <__adddf3>
 800752a:	4604      	mov	r4, r0
 800752c:	460d      	mov	r5, r1
 800752e:	e006      	b.n	800753e <atan+0x3e>
 8007530:	f1bb 0f00 	cmp.w	fp, #0
 8007534:	f340 812b 	ble.w	800778e <atan+0x28e>
 8007538:	a597      	add	r5, pc, #604	@ (adr r5, 8007798 <atan+0x298>)
 800753a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800753e:	ec45 4b10 	vmov	d0, r4, r5
 8007542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	4bb2      	ldr	r3, [pc, #712]	@ (8007810 <atan+0x310>)
 8007548:	429e      	cmp	r6, r3
 800754a:	d813      	bhi.n	8007574 <atan+0x74>
 800754c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007550:	429e      	cmp	r6, r3
 8007552:	d80c      	bhi.n	800756e <atan+0x6e>
 8007554:	a392      	add	r3, pc, #584	@ (adr r3, 80077a0 <atan+0x2a0>)
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	4620      	mov	r0, r4
 800755c:	4629      	mov	r1, r5
 800755e:	f7f8 fe9d 	bl	800029c <__adddf3>
 8007562:	4bac      	ldr	r3, [pc, #688]	@ (8007814 <atan+0x314>)
 8007564:	2200      	movs	r2, #0
 8007566:	f7f9 fadf 	bl	8000b28 <__aeabi_dcmpgt>
 800756a:	2800      	cmp	r0, #0
 800756c:	d1e7      	bne.n	800753e <atan+0x3e>
 800756e:	f04f 3aff 	mov.w	sl, #4294967295
 8007572:	e029      	b.n	80075c8 <atan+0xc8>
 8007574:	f000 f95c 	bl	8007830 <fabs>
 8007578:	4ba7      	ldr	r3, [pc, #668]	@ (8007818 <atan+0x318>)
 800757a:	429e      	cmp	r6, r3
 800757c:	ec55 4b10 	vmov	r4, r5, d0
 8007580:	f200 80bc 	bhi.w	80076fc <atan+0x1fc>
 8007584:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007588:	429e      	cmp	r6, r3
 800758a:	f200 809e 	bhi.w	80076ca <atan+0x1ca>
 800758e:	4622      	mov	r2, r4
 8007590:	462b      	mov	r3, r5
 8007592:	4620      	mov	r0, r4
 8007594:	4629      	mov	r1, r5
 8007596:	f7f8 fe81 	bl	800029c <__adddf3>
 800759a:	4b9e      	ldr	r3, [pc, #632]	@ (8007814 <atan+0x314>)
 800759c:	2200      	movs	r2, #0
 800759e:	f7f8 fe7b 	bl	8000298 <__aeabi_dsub>
 80075a2:	2200      	movs	r2, #0
 80075a4:	4606      	mov	r6, r0
 80075a6:	460f      	mov	r7, r1
 80075a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f8 fe74 	bl	800029c <__adddf3>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f9 f94e 	bl	800085c <__aeabi_ddiv>
 80075c0:	f04f 0a00 	mov.w	sl, #0
 80075c4:	4604      	mov	r4, r0
 80075c6:	460d      	mov	r5, r1
 80075c8:	4622      	mov	r2, r4
 80075ca:	462b      	mov	r3, r5
 80075cc:	4620      	mov	r0, r4
 80075ce:	4629      	mov	r1, r5
 80075d0:	f7f9 f81a 	bl	8000608 <__aeabi_dmul>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4680      	mov	r8, r0
 80075da:	4689      	mov	r9, r1
 80075dc:	f7f9 f814 	bl	8000608 <__aeabi_dmul>
 80075e0:	a371      	add	r3, pc, #452	@ (adr r3, 80077a8 <atan+0x2a8>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	4606      	mov	r6, r0
 80075e8:	460f      	mov	r7, r1
 80075ea:	f7f9 f80d 	bl	8000608 <__aeabi_dmul>
 80075ee:	a370      	add	r3, pc, #448	@ (adr r3, 80077b0 <atan+0x2b0>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f7f8 fe52 	bl	800029c <__adddf3>
 80075f8:	4632      	mov	r2, r6
 80075fa:	463b      	mov	r3, r7
 80075fc:	f7f9 f804 	bl	8000608 <__aeabi_dmul>
 8007600:	a36d      	add	r3, pc, #436	@ (adr r3, 80077b8 <atan+0x2b8>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	f7f8 fe49 	bl	800029c <__adddf3>
 800760a:	4632      	mov	r2, r6
 800760c:	463b      	mov	r3, r7
 800760e:	f7f8 fffb 	bl	8000608 <__aeabi_dmul>
 8007612:	a36b      	add	r3, pc, #428	@ (adr r3, 80077c0 <atan+0x2c0>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f7f8 fe40 	bl	800029c <__adddf3>
 800761c:	4632      	mov	r2, r6
 800761e:	463b      	mov	r3, r7
 8007620:	f7f8 fff2 	bl	8000608 <__aeabi_dmul>
 8007624:	a368      	add	r3, pc, #416	@ (adr r3, 80077c8 <atan+0x2c8>)
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 fe37 	bl	800029c <__adddf3>
 800762e:	4632      	mov	r2, r6
 8007630:	463b      	mov	r3, r7
 8007632:	f7f8 ffe9 	bl	8000608 <__aeabi_dmul>
 8007636:	a366      	add	r3, pc, #408	@ (adr r3, 80077d0 <atan+0x2d0>)
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f7f8 fe2e 	bl	800029c <__adddf3>
 8007640:	4642      	mov	r2, r8
 8007642:	464b      	mov	r3, r9
 8007644:	f7f8 ffe0 	bl	8000608 <__aeabi_dmul>
 8007648:	a363      	add	r3, pc, #396	@ (adr r3, 80077d8 <atan+0x2d8>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	4680      	mov	r8, r0
 8007650:	4689      	mov	r9, r1
 8007652:	4630      	mov	r0, r6
 8007654:	4639      	mov	r1, r7
 8007656:	f7f8 ffd7 	bl	8000608 <__aeabi_dmul>
 800765a:	a361      	add	r3, pc, #388	@ (adr r3, 80077e0 <atan+0x2e0>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f7f8 fe1a 	bl	8000298 <__aeabi_dsub>
 8007664:	4632      	mov	r2, r6
 8007666:	463b      	mov	r3, r7
 8007668:	f7f8 ffce 	bl	8000608 <__aeabi_dmul>
 800766c:	a35e      	add	r3, pc, #376	@ (adr r3, 80077e8 <atan+0x2e8>)
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f8 fe11 	bl	8000298 <__aeabi_dsub>
 8007676:	4632      	mov	r2, r6
 8007678:	463b      	mov	r3, r7
 800767a:	f7f8 ffc5 	bl	8000608 <__aeabi_dmul>
 800767e:	a35c      	add	r3, pc, #368	@ (adr r3, 80077f0 <atan+0x2f0>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f7f8 fe08 	bl	8000298 <__aeabi_dsub>
 8007688:	4632      	mov	r2, r6
 800768a:	463b      	mov	r3, r7
 800768c:	f7f8 ffbc 	bl	8000608 <__aeabi_dmul>
 8007690:	a359      	add	r3, pc, #356	@ (adr r3, 80077f8 <atan+0x2f8>)
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	f7f8 fdff 	bl	8000298 <__aeabi_dsub>
 800769a:	4632      	mov	r2, r6
 800769c:	463b      	mov	r3, r7
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4640      	mov	r0, r8
 80076a8:	4649      	mov	r1, r9
 80076aa:	f7f8 fdf7 	bl	800029c <__adddf3>
 80076ae:	4622      	mov	r2, r4
 80076b0:	462b      	mov	r3, r5
 80076b2:	f7f8 ffa9 	bl	8000608 <__aeabi_dmul>
 80076b6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	d148      	bne.n	8007752 <atan+0x252>
 80076c0:	4620      	mov	r0, r4
 80076c2:	4629      	mov	r1, r5
 80076c4:	f7f8 fde8 	bl	8000298 <__aeabi_dsub>
 80076c8:	e72f      	b.n	800752a <atan+0x2a>
 80076ca:	4b52      	ldr	r3, [pc, #328]	@ (8007814 <atan+0x314>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	4620      	mov	r0, r4
 80076d0:	4629      	mov	r1, r5
 80076d2:	f7f8 fde1 	bl	8000298 <__aeabi_dsub>
 80076d6:	4b4f      	ldr	r3, [pc, #316]	@ (8007814 <atan+0x314>)
 80076d8:	4606      	mov	r6, r0
 80076da:	460f      	mov	r7, r1
 80076dc:	2200      	movs	r2, #0
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7f8 fddb 	bl	800029c <__adddf3>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4630      	mov	r0, r6
 80076ec:	4639      	mov	r1, r7
 80076ee:	f7f9 f8b5 	bl	800085c <__aeabi_ddiv>
 80076f2:	f04f 0a01 	mov.w	sl, #1
 80076f6:	4604      	mov	r4, r0
 80076f8:	460d      	mov	r5, r1
 80076fa:	e765      	b.n	80075c8 <atan+0xc8>
 80076fc:	4b47      	ldr	r3, [pc, #284]	@ (800781c <atan+0x31c>)
 80076fe:	429e      	cmp	r6, r3
 8007700:	d21c      	bcs.n	800773c <atan+0x23c>
 8007702:	4b47      	ldr	r3, [pc, #284]	@ (8007820 <atan+0x320>)
 8007704:	2200      	movs	r2, #0
 8007706:	4620      	mov	r0, r4
 8007708:	4629      	mov	r1, r5
 800770a:	f7f8 fdc5 	bl	8000298 <__aeabi_dsub>
 800770e:	4b44      	ldr	r3, [pc, #272]	@ (8007820 <atan+0x320>)
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	2200      	movs	r2, #0
 8007716:	4620      	mov	r0, r4
 8007718:	4629      	mov	r1, r5
 800771a:	f7f8 ff75 	bl	8000608 <__aeabi_dmul>
 800771e:	4b3d      	ldr	r3, [pc, #244]	@ (8007814 <atan+0x314>)
 8007720:	2200      	movs	r2, #0
 8007722:	f7f8 fdbb 	bl	800029c <__adddf3>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4630      	mov	r0, r6
 800772c:	4639      	mov	r1, r7
 800772e:	f7f9 f895 	bl	800085c <__aeabi_ddiv>
 8007732:	f04f 0a02 	mov.w	sl, #2
 8007736:	4604      	mov	r4, r0
 8007738:	460d      	mov	r5, r1
 800773a:	e745      	b.n	80075c8 <atan+0xc8>
 800773c:	4622      	mov	r2, r4
 800773e:	462b      	mov	r3, r5
 8007740:	4938      	ldr	r1, [pc, #224]	@ (8007824 <atan+0x324>)
 8007742:	2000      	movs	r0, #0
 8007744:	f7f9 f88a 	bl	800085c <__aeabi_ddiv>
 8007748:	f04f 0a03 	mov.w	sl, #3
 800774c:	4604      	mov	r4, r0
 800774e:	460d      	mov	r5, r1
 8007750:	e73a      	b.n	80075c8 <atan+0xc8>
 8007752:	4b35      	ldr	r3, [pc, #212]	@ (8007828 <atan+0x328>)
 8007754:	4e35      	ldr	r6, [pc, #212]	@ (800782c <atan+0x32c>)
 8007756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f7f8 fd9b 	bl	8000298 <__aeabi_dsub>
 8007762:	4622      	mov	r2, r4
 8007764:	462b      	mov	r3, r5
 8007766:	f7f8 fd97 	bl	8000298 <__aeabi_dsub>
 800776a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007776:	f7f8 fd8f 	bl	8000298 <__aeabi_dsub>
 800777a:	f1bb 0f00 	cmp.w	fp, #0
 800777e:	4604      	mov	r4, r0
 8007780:	460d      	mov	r5, r1
 8007782:	f6bf aedc 	bge.w	800753e <atan+0x3e>
 8007786:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800778a:	461d      	mov	r5, r3
 800778c:	e6d7      	b.n	800753e <atan+0x3e>
 800778e:	a51c      	add	r5, pc, #112	@ (adr r5, 8007800 <atan+0x300>)
 8007790:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007794:	e6d3      	b.n	800753e <atan+0x3e>
 8007796:	bf00      	nop
 8007798:	54442d18 	.word	0x54442d18
 800779c:	3ff921fb 	.word	0x3ff921fb
 80077a0:	8800759c 	.word	0x8800759c
 80077a4:	7e37e43c 	.word	0x7e37e43c
 80077a8:	e322da11 	.word	0xe322da11
 80077ac:	3f90ad3a 	.word	0x3f90ad3a
 80077b0:	24760deb 	.word	0x24760deb
 80077b4:	3fa97b4b 	.word	0x3fa97b4b
 80077b8:	a0d03d51 	.word	0xa0d03d51
 80077bc:	3fb10d66 	.word	0x3fb10d66
 80077c0:	c54c206e 	.word	0xc54c206e
 80077c4:	3fb745cd 	.word	0x3fb745cd
 80077c8:	920083ff 	.word	0x920083ff
 80077cc:	3fc24924 	.word	0x3fc24924
 80077d0:	5555550d 	.word	0x5555550d
 80077d4:	3fd55555 	.word	0x3fd55555
 80077d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80077dc:	bfa2b444 	.word	0xbfa2b444
 80077e0:	52defd9a 	.word	0x52defd9a
 80077e4:	3fadde2d 	.word	0x3fadde2d
 80077e8:	af749a6d 	.word	0xaf749a6d
 80077ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80077f0:	fe231671 	.word	0xfe231671
 80077f4:	3fbc71c6 	.word	0x3fbc71c6
 80077f8:	9998ebc4 	.word	0x9998ebc4
 80077fc:	3fc99999 	.word	0x3fc99999
 8007800:	54442d18 	.word	0x54442d18
 8007804:	bff921fb 	.word	0xbff921fb
 8007808:	440fffff 	.word	0x440fffff
 800780c:	7ff00000 	.word	0x7ff00000
 8007810:	3fdbffff 	.word	0x3fdbffff
 8007814:	3ff00000 	.word	0x3ff00000
 8007818:	3ff2ffff 	.word	0x3ff2ffff
 800781c:	40038000 	.word	0x40038000
 8007820:	3ff80000 	.word	0x3ff80000
 8007824:	bff00000 	.word	0xbff00000
 8007828:	08008970 	.word	0x08008970
 800782c:	08008990 	.word	0x08008990

08007830 <fabs>:
 8007830:	ec51 0b10 	vmov	r0, r1, d0
 8007834:	4602      	mov	r2, r0
 8007836:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800783a:	ec43 2b10 	vmov	d0, r2, r3
 800783e:	4770      	bx	lr

08007840 <__kernel_cosf>:
 8007840:	ee10 3a10 	vmov	r3, s0
 8007844:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007848:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800784c:	eef0 6a40 	vmov.f32	s13, s0
 8007850:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007854:	d204      	bcs.n	8007860 <__kernel_cosf+0x20>
 8007856:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800785a:	ee17 2a90 	vmov	r2, s15
 800785e:	b342      	cbz	r2, 80078b2 <__kernel_cosf+0x72>
 8007860:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007864:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80078d0 <__kernel_cosf+0x90>
 8007868:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80078d4 <__kernel_cosf+0x94>
 800786c:	4a1a      	ldr	r2, [pc, #104]	@ (80078d8 <__kernel_cosf+0x98>)
 800786e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007872:	4293      	cmp	r3, r2
 8007874:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80078dc <__kernel_cosf+0x9c>
 8007878:	eee6 7a07 	vfma.f32	s15, s12, s14
 800787c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80078e0 <__kernel_cosf+0xa0>
 8007880:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007884:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80078e4 <__kernel_cosf+0xa4>
 8007888:	eee6 7a07 	vfma.f32	s15, s12, s14
 800788c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80078e8 <__kernel_cosf+0xa8>
 8007890:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007894:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8007898:	ee26 6a07 	vmul.f32	s12, s12, s14
 800789c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80078a0:	eee7 0a06 	vfma.f32	s1, s14, s12
 80078a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a8:	d804      	bhi.n	80078b4 <__kernel_cosf+0x74>
 80078aa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80078ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80078b2:	4770      	bx	lr
 80078b4:	4a0d      	ldr	r2, [pc, #52]	@ (80078ec <__kernel_cosf+0xac>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	bf9a      	itte	ls
 80078ba:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80078be:	ee07 3a10 	vmovls	s14, r3
 80078c2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80078c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80078ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078ce:	e7ec      	b.n	80078aa <__kernel_cosf+0x6a>
 80078d0:	ad47d74e 	.word	0xad47d74e
 80078d4:	310f74f6 	.word	0x310f74f6
 80078d8:	3e999999 	.word	0x3e999999
 80078dc:	b493f27c 	.word	0xb493f27c
 80078e0:	37d00d01 	.word	0x37d00d01
 80078e4:	bab60b61 	.word	0xbab60b61
 80078e8:	3d2aaaab 	.word	0x3d2aaaab
 80078ec:	3f480000 	.word	0x3f480000

080078f0 <__kernel_sinf>:
 80078f0:	ee10 3a10 	vmov	r3, s0
 80078f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078f8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80078fc:	d204      	bcs.n	8007908 <__kernel_sinf+0x18>
 80078fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007902:	ee17 3a90 	vmov	r3, s15
 8007906:	b35b      	cbz	r3, 8007960 <__kernel_sinf+0x70>
 8007908:	ee20 7a00 	vmul.f32	s14, s0, s0
 800790c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007964 <__kernel_sinf+0x74>
 8007910:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8007968 <__kernel_sinf+0x78>
 8007914:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007918:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800796c <__kernel_sinf+0x7c>
 800791c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007920:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8007970 <__kernel_sinf+0x80>
 8007924:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007928:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8007974 <__kernel_sinf+0x84>
 800792c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007930:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007934:	b930      	cbnz	r0, 8007944 <__kernel_sinf+0x54>
 8007936:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8007978 <__kernel_sinf+0x88>
 800793a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800793e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007942:	4770      	bx	lr
 8007944:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007948:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800794c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007950:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007954:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800797c <__kernel_sinf+0x8c>
 8007958:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800795c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	2f2ec9d3 	.word	0x2f2ec9d3
 8007968:	b2d72f34 	.word	0xb2d72f34
 800796c:	3638ef1b 	.word	0x3638ef1b
 8007970:	b9500d01 	.word	0xb9500d01
 8007974:	3c088889 	.word	0x3c088889
 8007978:	be2aaaab 	.word	0xbe2aaaab
 800797c:	3e2aaaab 	.word	0x3e2aaaab

08007980 <__kernel_tanf>:
 8007980:	b508      	push	{r3, lr}
 8007982:	ee10 3a10 	vmov	r3, s0
 8007986:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800798a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 800798e:	eef0 7a40 	vmov.f32	s15, s0
 8007992:	d217      	bcs.n	80079c4 <__kernel_tanf+0x44>
 8007994:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8007998:	ee17 1a10 	vmov	r1, s14
 800799c:	bb41      	cbnz	r1, 80079f0 <__kernel_tanf+0x70>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	d108      	bne.n	80079b6 <__kernel_tanf+0x36>
 80079a4:	f000 f9fc 	bl	8007da0 <fabsf>
 80079a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80079b0:	eeb0 0a67 	vmov.f32	s0, s15
 80079b4:	bd08      	pop	{r3, pc}
 80079b6:	2801      	cmp	r0, #1
 80079b8:	d0fa      	beq.n	80079b0 <__kernel_tanf+0x30>
 80079ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80079be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80079c2:	e7f5      	b.n	80079b0 <__kernel_tanf+0x30>
 80079c4:	494c      	ldr	r1, [pc, #304]	@ (8007af8 <__kernel_tanf+0x178>)
 80079c6:	428a      	cmp	r2, r1
 80079c8:	d312      	bcc.n	80079f0 <__kernel_tanf+0x70>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8007afc <__kernel_tanf+0x17c>
 80079d0:	bfb8      	it	lt
 80079d2:	eef1 7a40 	vneglt.f32	s15, s0
 80079d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079da:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8007b00 <__kernel_tanf+0x180>
 80079de:	bfb8      	it	lt
 80079e0:	eef1 0a60 	vneglt.f32	s1, s1
 80079e4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80079e8:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8007b04 <__kernel_tanf+0x184>
 80079ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079f0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80079f4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007b08 <__kernel_tanf+0x188>
 80079f8:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8007b0c <__kernel_tanf+0x18c>
 80079fc:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8007b10 <__kernel_tanf+0x190>
 8007a00:	493d      	ldr	r1, [pc, #244]	@ (8007af8 <__kernel_tanf+0x178>)
 8007a02:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007a06:	428a      	cmp	r2, r1
 8007a08:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007a0c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8007b14 <__kernel_tanf+0x194>
 8007a10:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007a14:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8007b18 <__kernel_tanf+0x198>
 8007a18:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007a1c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007b1c <__kernel_tanf+0x19c>
 8007a20:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007a24:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8007b20 <__kernel_tanf+0x1a0>
 8007a28:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007a2c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007b24 <__kernel_tanf+0x1a4>
 8007a30:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007a34:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8007b28 <__kernel_tanf+0x1a8>
 8007a38:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007a3c:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8007b2c <__kernel_tanf+0x1ac>
 8007a40:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007a44:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8007b30 <__kernel_tanf+0x1b0>
 8007a48:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007a4c:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8007b34 <__kernel_tanf+0x1b4>
 8007a50:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007a54:	eeb0 7a46 	vmov.f32	s14, s12
 8007a58:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007a5c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8007a60:	eeb0 6a60 	vmov.f32	s12, s1
 8007a64:	eea7 6a05 	vfma.f32	s12, s14, s10
 8007a68:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8007b38 <__kernel_tanf+0x1b8>
 8007a6c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8007a70:	eee5 0a07 	vfma.f32	s1, s10, s14
 8007a74:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8007a78:	d31d      	bcc.n	8007ab6 <__kernel_tanf+0x136>
 8007a7a:	ee07 0a10 	vmov	s14, r0
 8007a7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007a82:	ee26 5a06 	vmul.f32	s10, s12, s12
 8007a86:	ee36 6a07 	vadd.f32	s12, s12, s14
 8007a8a:	179b      	asrs	r3, r3, #30
 8007a8c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	f1c3 0301 	rsb	r3, r3, #1
 8007a98:	ee06 3a90 	vmov	s13, r3
 8007a9c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8007aa0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007aa4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007aa8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8007aac:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8007ab0:	ee66 7a87 	vmul.f32	s15, s13, s14
 8007ab4:	e77c      	b.n	80079b0 <__kernel_tanf+0x30>
 8007ab6:	2801      	cmp	r0, #1
 8007ab8:	d01b      	beq.n	8007af2 <__kernel_tanf+0x172>
 8007aba:	4b20      	ldr	r3, [pc, #128]	@ (8007b3c <__kernel_tanf+0x1bc>)
 8007abc:	ee16 2a10 	vmov	r2, s12
 8007ac0:	401a      	ands	r2, r3
 8007ac2:	ee05 2a90 	vmov	s11, r2
 8007ac6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007aca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ace:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007ad2:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8007ad6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007ada:	ee16 2a90 	vmov	r2, s13
 8007ade:	4013      	ands	r3, r2
 8007ae0:	ee07 3a90 	vmov	s15, r3
 8007ae4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007ae8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8007aec:	eee7 7a26 	vfma.f32	s15, s14, s13
 8007af0:	e75e      	b.n	80079b0 <__kernel_tanf+0x30>
 8007af2:	eef0 7a46 	vmov.f32	s15, s12
 8007af6:	e75b      	b.n	80079b0 <__kernel_tanf+0x30>
 8007af8:	3f2ca140 	.word	0x3f2ca140
 8007afc:	3f490fda 	.word	0x3f490fda
 8007b00:	33222168 	.word	0x33222168
 8007b04:	00000000 	.word	0x00000000
 8007b08:	b79bae5f 	.word	0xb79bae5f
 8007b0c:	38a3f445 	.word	0x38a3f445
 8007b10:	37d95384 	.word	0x37d95384
 8007b14:	3a1a26c8 	.word	0x3a1a26c8
 8007b18:	3b6b6916 	.word	0x3b6b6916
 8007b1c:	3cb327a4 	.word	0x3cb327a4
 8007b20:	3e088889 	.word	0x3e088889
 8007b24:	3895c07a 	.word	0x3895c07a
 8007b28:	398137b9 	.word	0x398137b9
 8007b2c:	3abede48 	.word	0x3abede48
 8007b30:	3c11371f 	.word	0x3c11371f
 8007b34:	3d5d0dd1 	.word	0x3d5d0dd1
 8007b38:	3eaaaaab 	.word	0x3eaaaaab
 8007b3c:	fffff000 	.word	0xfffff000

08007b40 <__ieee754_rem_pio2f>:
 8007b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b42:	ee10 6a10 	vmov	r6, s0
 8007b46:	4b88      	ldr	r3, [pc, #544]	@ (8007d68 <__ieee754_rem_pio2f+0x228>)
 8007b48:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8007b4c:	429d      	cmp	r5, r3
 8007b4e:	b087      	sub	sp, #28
 8007b50:	4604      	mov	r4, r0
 8007b52:	d805      	bhi.n	8007b60 <__ieee754_rem_pio2f+0x20>
 8007b54:	2300      	movs	r3, #0
 8007b56:	ed80 0a00 	vstr	s0, [r0]
 8007b5a:	6043      	str	r3, [r0, #4]
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	e022      	b.n	8007ba6 <__ieee754_rem_pio2f+0x66>
 8007b60:	4b82      	ldr	r3, [pc, #520]	@ (8007d6c <__ieee754_rem_pio2f+0x22c>)
 8007b62:	429d      	cmp	r5, r3
 8007b64:	d83a      	bhi.n	8007bdc <__ieee754_rem_pio2f+0x9c>
 8007b66:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007d70 <__ieee754_rem_pio2f+0x230>
 8007b70:	4a80      	ldr	r2, [pc, #512]	@ (8007d74 <__ieee754_rem_pio2f+0x234>)
 8007b72:	f023 030f 	bic.w	r3, r3, #15
 8007b76:	dd18      	ble.n	8007baa <__ieee754_rem_pio2f+0x6a>
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007b7e:	bf09      	itett	eq
 8007b80:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8007d78 <__ieee754_rem_pio2f+0x238>
 8007b84:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8007d7c <__ieee754_rem_pio2f+0x23c>
 8007b88:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8007d80 <__ieee754_rem_pio2f+0x240>
 8007b8c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007b90:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8007b94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b98:	ed80 7a00 	vstr	s14, [r0]
 8007b9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ba0:	edc0 7a01 	vstr	s15, [r0, #4]
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	b007      	add	sp, #28
 8007ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007baa:	4293      	cmp	r3, r2
 8007bac:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007bb0:	bf09      	itett	eq
 8007bb2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8007d78 <__ieee754_rem_pio2f+0x238>
 8007bb6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8007d7c <__ieee754_rem_pio2f+0x23c>
 8007bba:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8007d80 <__ieee754_rem_pio2f+0x240>
 8007bbe:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007bc2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007bc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bca:	ed80 7a00 	vstr	s14, [r0]
 8007bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd2:	edc0 7a01 	vstr	s15, [r0, #4]
 8007bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bda:	e7e4      	b.n	8007ba6 <__ieee754_rem_pio2f+0x66>
 8007bdc:	4b69      	ldr	r3, [pc, #420]	@ (8007d84 <__ieee754_rem_pio2f+0x244>)
 8007bde:	429d      	cmp	r5, r3
 8007be0:	d873      	bhi.n	8007cca <__ieee754_rem_pio2f+0x18a>
 8007be2:	f000 f8dd 	bl	8007da0 <fabsf>
 8007be6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8007d88 <__ieee754_rem_pio2f+0x248>
 8007bea:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007bee:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bfa:	ee17 0a90 	vmov	r0, s15
 8007bfe:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007d70 <__ieee754_rem_pio2f+0x230>
 8007c02:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007c06:	281f      	cmp	r0, #31
 8007c08:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007d7c <__ieee754_rem_pio2f+0x23c>
 8007c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c10:	eeb1 6a47 	vneg.f32	s12, s14
 8007c14:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007c18:	ee16 1a90 	vmov	r1, s13
 8007c1c:	dc09      	bgt.n	8007c32 <__ieee754_rem_pio2f+0xf2>
 8007c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8007d8c <__ieee754_rem_pio2f+0x24c>)
 8007c20:	1e47      	subs	r7, r0, #1
 8007c22:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007c26:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8007c2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d107      	bne.n	8007c42 <__ieee754_rem_pio2f+0x102>
 8007c32:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8007c36:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8007c3a:	2a08      	cmp	r2, #8
 8007c3c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007c40:	dc14      	bgt.n	8007c6c <__ieee754_rem_pio2f+0x12c>
 8007c42:	6021      	str	r1, [r4, #0]
 8007c44:	ed94 7a00 	vldr	s14, [r4]
 8007c48:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007c52:	ed84 0a01 	vstr	s0, [r4, #4]
 8007c56:	daa6      	bge.n	8007ba6 <__ieee754_rem_pio2f+0x66>
 8007c58:	eeb1 7a47 	vneg.f32	s14, s14
 8007c5c:	eeb1 0a40 	vneg.f32	s0, s0
 8007c60:	ed84 7a00 	vstr	s14, [r4]
 8007c64:	ed84 0a01 	vstr	s0, [r4, #4]
 8007c68:	4240      	negs	r0, r0
 8007c6a:	e79c      	b.n	8007ba6 <__ieee754_rem_pio2f+0x66>
 8007c6c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8007d78 <__ieee754_rem_pio2f+0x238>
 8007c70:	eef0 6a40 	vmov.f32	s13, s0
 8007c74:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007c78:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007c7c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007c80:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007d80 <__ieee754_rem_pio2f+0x240>
 8007c84:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007c88:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007c8c:	ee15 2a90 	vmov	r2, s11
 8007c90:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007c94:	1a5b      	subs	r3, r3, r1
 8007c96:	2b19      	cmp	r3, #25
 8007c98:	dc04      	bgt.n	8007ca4 <__ieee754_rem_pio2f+0x164>
 8007c9a:	edc4 5a00 	vstr	s11, [r4]
 8007c9e:	eeb0 0a66 	vmov.f32	s0, s13
 8007ca2:	e7cf      	b.n	8007c44 <__ieee754_rem_pio2f+0x104>
 8007ca4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8007d90 <__ieee754_rem_pio2f+0x250>
 8007ca8:	eeb0 0a66 	vmov.f32	s0, s13
 8007cac:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007cb0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007cb4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007d94 <__ieee754_rem_pio2f+0x254>
 8007cb8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007cbc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007cc0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007cc4:	ed84 7a00 	vstr	s14, [r4]
 8007cc8:	e7bc      	b.n	8007c44 <__ieee754_rem_pio2f+0x104>
 8007cca:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007cce:	d306      	bcc.n	8007cde <__ieee754_rem_pio2f+0x19e>
 8007cd0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007cd4:	edc0 7a01 	vstr	s15, [r0, #4]
 8007cd8:	edc0 7a00 	vstr	s15, [r0]
 8007cdc:	e73e      	b.n	8007b5c <__ieee754_rem_pio2f+0x1c>
 8007cde:	15ea      	asrs	r2, r5, #23
 8007ce0:	3a86      	subs	r2, #134	@ 0x86
 8007ce2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007cee:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8007d98 <__ieee754_rem_pio2f+0x258>
 8007cf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007cf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cfa:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007cfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d0e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007d12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1e:	edcd 7a05 	vstr	s15, [sp, #20]
 8007d22:	d11e      	bne.n	8007d62 <__ieee754_rem_pio2f+0x222>
 8007d24:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2c:	bf0c      	ite	eq
 8007d2e:	2301      	moveq	r3, #1
 8007d30:	2302      	movne	r3, #2
 8007d32:	491a      	ldr	r1, [pc, #104]	@ (8007d9c <__ieee754_rem_pio2f+0x25c>)
 8007d34:	9101      	str	r1, [sp, #4]
 8007d36:	2102      	movs	r1, #2
 8007d38:	9100      	str	r1, [sp, #0]
 8007d3a:	a803      	add	r0, sp, #12
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	f000 f837 	bl	8007db0 <__kernel_rem_pio2f>
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	f6bf af2f 	bge.w	8007ba6 <__ieee754_rem_pio2f+0x66>
 8007d48:	edd4 7a00 	vldr	s15, [r4]
 8007d4c:	eef1 7a67 	vneg.f32	s15, s15
 8007d50:	edc4 7a00 	vstr	s15, [r4]
 8007d54:	edd4 7a01 	vldr	s15, [r4, #4]
 8007d58:	eef1 7a67 	vneg.f32	s15, s15
 8007d5c:	edc4 7a01 	vstr	s15, [r4, #4]
 8007d60:	e782      	b.n	8007c68 <__ieee754_rem_pio2f+0x128>
 8007d62:	2303      	movs	r3, #3
 8007d64:	e7e5      	b.n	8007d32 <__ieee754_rem_pio2f+0x1f2>
 8007d66:	bf00      	nop
 8007d68:	3f490fd8 	.word	0x3f490fd8
 8007d6c:	4016cbe3 	.word	0x4016cbe3
 8007d70:	3fc90f80 	.word	0x3fc90f80
 8007d74:	3fc90fd0 	.word	0x3fc90fd0
 8007d78:	37354400 	.word	0x37354400
 8007d7c:	37354443 	.word	0x37354443
 8007d80:	2e85a308 	.word	0x2e85a308
 8007d84:	43490f80 	.word	0x43490f80
 8007d88:	3f22f984 	.word	0x3f22f984
 8007d8c:	080089b0 	.word	0x080089b0
 8007d90:	2e85a300 	.word	0x2e85a300
 8007d94:	248d3132 	.word	0x248d3132
 8007d98:	43800000 	.word	0x43800000
 8007d9c:	08008a30 	.word	0x08008a30

08007da0 <fabsf>:
 8007da0:	ee10 3a10 	vmov	r3, s0
 8007da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007da8:	ee00 3a10 	vmov	s0, r3
 8007dac:	4770      	bx	lr
	...

08007db0 <__kernel_rem_pio2f>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	ed2d 8b04 	vpush	{d8-d9}
 8007db8:	b0d9      	sub	sp, #356	@ 0x164
 8007dba:	4690      	mov	r8, r2
 8007dbc:	9001      	str	r0, [sp, #4]
 8007dbe:	4ab6      	ldr	r2, [pc, #728]	@ (8008098 <__kernel_rem_pio2f+0x2e8>)
 8007dc0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8007dc2:	f118 0f04 	cmn.w	r8, #4
 8007dc6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8007dca:	460f      	mov	r7, r1
 8007dcc:	f103 3bff 	add.w	fp, r3, #4294967295
 8007dd0:	db26      	blt.n	8007e20 <__kernel_rem_pio2f+0x70>
 8007dd2:	f1b8 0203 	subs.w	r2, r8, #3
 8007dd6:	bf48      	it	mi
 8007dd8:	f108 0204 	addmi.w	r2, r8, #4
 8007ddc:	10d2      	asrs	r2, r2, #3
 8007dde:	1c55      	adds	r5, r2, #1
 8007de0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007de2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80080a8 <__kernel_rem_pio2f+0x2f8>
 8007de6:	00e8      	lsls	r0, r5, #3
 8007de8:	eba2 060b 	sub.w	r6, r2, fp
 8007dec:	9002      	str	r0, [sp, #8]
 8007dee:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8007df2:	eb0a 0c0b 	add.w	ip, sl, fp
 8007df6:	ac1c      	add	r4, sp, #112	@ 0x70
 8007df8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	4560      	cmp	r0, ip
 8007e00:	dd10      	ble.n	8007e24 <__kernel_rem_pio2f+0x74>
 8007e02:	a91c      	add	r1, sp, #112	@ 0x70
 8007e04:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007e08:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8007e0c:	2600      	movs	r6, #0
 8007e0e:	4556      	cmp	r6, sl
 8007e10:	dc24      	bgt.n	8007e5c <__kernel_rem_pio2f+0xac>
 8007e12:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007e16:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80080a8 <__kernel_rem_pio2f+0x2f8>
 8007e1a:	4684      	mov	ip, r0
 8007e1c:	2400      	movs	r4, #0
 8007e1e:	e016      	b.n	8007e4e <__kernel_rem_pio2f+0x9e>
 8007e20:	2200      	movs	r2, #0
 8007e22:	e7dc      	b.n	8007dde <__kernel_rem_pio2f+0x2e>
 8007e24:	42c6      	cmn	r6, r0
 8007e26:	bf5d      	ittte	pl
 8007e28:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8007e2c:	ee07 1a90 	vmovpl	s15, r1
 8007e30:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007e34:	eef0 7a47 	vmovmi.f32	s15, s14
 8007e38:	ece4 7a01 	vstmia	r4!, {s15}
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	e7de      	b.n	8007dfe <__kernel_rem_pio2f+0x4e>
 8007e40:	ecfe 6a01 	vldmia	lr!, {s13}
 8007e44:	ed3c 7a01 	vldmdb	ip!, {s14}
 8007e48:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007e4c:	3401      	adds	r4, #1
 8007e4e:	455c      	cmp	r4, fp
 8007e50:	ddf6      	ble.n	8007e40 <__kernel_rem_pio2f+0x90>
 8007e52:	ece9 7a01 	vstmia	r9!, {s15}
 8007e56:	3601      	adds	r6, #1
 8007e58:	3004      	adds	r0, #4
 8007e5a:	e7d8      	b.n	8007e0e <__kernel_rem_pio2f+0x5e>
 8007e5c:	a908      	add	r1, sp, #32
 8007e5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e62:	9104      	str	r1, [sp, #16]
 8007e64:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007e66:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80080a4 <__kernel_rem_pio2f+0x2f4>
 8007e6a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80080a0 <__kernel_rem_pio2f+0x2f0>
 8007e6e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007e72:	9203      	str	r2, [sp, #12]
 8007e74:	4654      	mov	r4, sl
 8007e76:	00a2      	lsls	r2, r4, #2
 8007e78:	9205      	str	r2, [sp, #20]
 8007e7a:	aa58      	add	r2, sp, #352	@ 0x160
 8007e7c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007e80:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8007e84:	a944      	add	r1, sp, #272	@ 0x110
 8007e86:	aa08      	add	r2, sp, #32
 8007e88:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007e8c:	4694      	mov	ip, r2
 8007e8e:	4626      	mov	r6, r4
 8007e90:	2e00      	cmp	r6, #0
 8007e92:	dc4c      	bgt.n	8007f2e <__kernel_rem_pio2f+0x17e>
 8007e94:	4628      	mov	r0, r5
 8007e96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e9a:	f000 f9f1 	bl	8008280 <scalbnf>
 8007e9e:	eeb0 8a40 	vmov.f32	s16, s0
 8007ea2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8007ea6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007eaa:	f000 fa4f 	bl	800834c <floorf>
 8007eae:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8007eb2:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ebc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007ec0:	ee17 9a90 	vmov	r9, s15
 8007ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ec8:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007ecc:	dd41      	ble.n	8007f52 <__kernel_rem_pio2f+0x1a2>
 8007ece:	f104 3cff 	add.w	ip, r4, #4294967295
 8007ed2:	a908      	add	r1, sp, #32
 8007ed4:	f1c5 0e08 	rsb	lr, r5, #8
 8007ed8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8007edc:	fa46 f00e 	asr.w	r0, r6, lr
 8007ee0:	4481      	add	r9, r0
 8007ee2:	fa00 f00e 	lsl.w	r0, r0, lr
 8007ee6:	1a36      	subs	r6, r6, r0
 8007ee8:	f1c5 0007 	rsb	r0, r5, #7
 8007eec:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8007ef0:	4106      	asrs	r6, r0
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	dd3c      	ble.n	8007f70 <__kernel_rem_pio2f+0x1c0>
 8007ef6:	f04f 0e00 	mov.w	lr, #0
 8007efa:	f109 0901 	add.w	r9, r9, #1
 8007efe:	4670      	mov	r0, lr
 8007f00:	4574      	cmp	r4, lr
 8007f02:	dc68      	bgt.n	8007fd6 <__kernel_rem_pio2f+0x226>
 8007f04:	2d00      	cmp	r5, #0
 8007f06:	dd03      	ble.n	8007f10 <__kernel_rem_pio2f+0x160>
 8007f08:	2d01      	cmp	r5, #1
 8007f0a:	d074      	beq.n	8007ff6 <__kernel_rem_pio2f+0x246>
 8007f0c:	2d02      	cmp	r5, #2
 8007f0e:	d07d      	beq.n	800800c <__kernel_rem_pio2f+0x25c>
 8007f10:	2e02      	cmp	r6, #2
 8007f12:	d12d      	bne.n	8007f70 <__kernel_rem_pio2f+0x1c0>
 8007f14:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007f18:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007f1c:	b340      	cbz	r0, 8007f70 <__kernel_rem_pio2f+0x1c0>
 8007f1e:	4628      	mov	r0, r5
 8007f20:	9306      	str	r3, [sp, #24]
 8007f22:	f000 f9ad 	bl	8008280 <scalbnf>
 8007f26:	9b06      	ldr	r3, [sp, #24]
 8007f28:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007f2c:	e020      	b.n	8007f70 <__kernel_rem_pio2f+0x1c0>
 8007f2e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007f32:	3e01      	subs	r6, #1
 8007f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f3c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007f40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007f44:	ecac 0a01 	vstmia	ip!, {s0}
 8007f48:	ed30 0a01 	vldmdb	r0!, {s0}
 8007f4c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007f50:	e79e      	b.n	8007e90 <__kernel_rem_pio2f+0xe0>
 8007f52:	d105      	bne.n	8007f60 <__kernel_rem_pio2f+0x1b0>
 8007f54:	1e60      	subs	r0, r4, #1
 8007f56:	a908      	add	r1, sp, #32
 8007f58:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007f5c:	11f6      	asrs	r6, r6, #7
 8007f5e:	e7c8      	b.n	8007ef2 <__kernel_rem_pio2f+0x142>
 8007f60:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007f64:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6c:	da31      	bge.n	8007fd2 <__kernel_rem_pio2f+0x222>
 8007f6e:	2600      	movs	r6, #0
 8007f70:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f78:	f040 8098 	bne.w	80080ac <__kernel_rem_pio2f+0x2fc>
 8007f7c:	1e60      	subs	r0, r4, #1
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4550      	cmp	r0, sl
 8007f82:	da4b      	bge.n	800801c <__kernel_rem_pio2f+0x26c>
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	d065      	beq.n	8008054 <__kernel_rem_pio2f+0x2a4>
 8007f88:	3c01      	subs	r4, #1
 8007f8a:	ab08      	add	r3, sp, #32
 8007f8c:	3d08      	subs	r5, #8
 8007f8e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f8      	beq.n	8007f88 <__kernel_rem_pio2f+0x1d8>
 8007f96:	4628      	mov	r0, r5
 8007f98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007f9c:	f000 f970 	bl	8008280 <scalbnf>
 8007fa0:	1c63      	adds	r3, r4, #1
 8007fa2:	aa44      	add	r2, sp, #272	@ 0x110
 8007fa4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80080a4 <__kernel_rem_pio2f+0x2f4>
 8007fa8:	0099      	lsls	r1, r3, #2
 8007faa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007fae:	4623      	mov	r3, r4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f280 80a9 	bge.w	8008108 <__kernel_rem_pio2f+0x358>
 8007fb6:	4623      	mov	r3, r4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f2c0 80c7 	blt.w	800814c <__kernel_rem_pio2f+0x39c>
 8007fbe:	aa44      	add	r2, sp, #272	@ 0x110
 8007fc0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007fc4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800809c <__kernel_rem_pio2f+0x2ec>
 8007fc8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80080a8 <__kernel_rem_pio2f+0x2f8>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	1ae2      	subs	r2, r4, r3
 8007fd0:	e0b1      	b.n	8008136 <__kernel_rem_pio2f+0x386>
 8007fd2:	2602      	movs	r6, #2
 8007fd4:	e78f      	b.n	8007ef6 <__kernel_rem_pio2f+0x146>
 8007fd6:	f852 1b04 	ldr.w	r1, [r2], #4
 8007fda:	b948      	cbnz	r0, 8007ff0 <__kernel_rem_pio2f+0x240>
 8007fdc:	b121      	cbz	r1, 8007fe8 <__kernel_rem_pio2f+0x238>
 8007fde:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8007fe2:	f842 1c04 	str.w	r1, [r2, #-4]
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	f10e 0e01 	add.w	lr, lr, #1
 8007fec:	4608      	mov	r0, r1
 8007fee:	e787      	b.n	8007f00 <__kernel_rem_pio2f+0x150>
 8007ff0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8007ff4:	e7f5      	b.n	8007fe2 <__kernel_rem_pio2f+0x232>
 8007ff6:	f104 3cff 	add.w	ip, r4, #4294967295
 8007ffa:	aa08      	add	r2, sp, #32
 8007ffc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008000:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008004:	a908      	add	r1, sp, #32
 8008006:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800800a:	e781      	b.n	8007f10 <__kernel_rem_pio2f+0x160>
 800800c:	f104 3cff 	add.w	ip, r4, #4294967295
 8008010:	aa08      	add	r2, sp, #32
 8008012:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008016:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800801a:	e7f3      	b.n	8008004 <__kernel_rem_pio2f+0x254>
 800801c:	a908      	add	r1, sp, #32
 800801e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008022:	3801      	subs	r0, #1
 8008024:	430a      	orrs	r2, r1
 8008026:	e7ab      	b.n	8007f80 <__kernel_rem_pio2f+0x1d0>
 8008028:	3201      	adds	r2, #1
 800802a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800802e:	2e00      	cmp	r6, #0
 8008030:	d0fa      	beq.n	8008028 <__kernel_rem_pio2f+0x278>
 8008032:	9905      	ldr	r1, [sp, #20]
 8008034:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008038:	eb0d 0001 	add.w	r0, sp, r1
 800803c:	18e6      	adds	r6, r4, r3
 800803e:	a91c      	add	r1, sp, #112	@ 0x70
 8008040:	f104 0c01 	add.w	ip, r4, #1
 8008044:	384c      	subs	r0, #76	@ 0x4c
 8008046:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800804a:	4422      	add	r2, r4
 800804c:	4562      	cmp	r2, ip
 800804e:	da04      	bge.n	800805a <__kernel_rem_pio2f+0x2aa>
 8008050:	4614      	mov	r4, r2
 8008052:	e710      	b.n	8007e76 <__kernel_rem_pio2f+0xc6>
 8008054:	9804      	ldr	r0, [sp, #16]
 8008056:	2201      	movs	r2, #1
 8008058:	e7e7      	b.n	800802a <__kernel_rem_pio2f+0x27a>
 800805a:	9903      	ldr	r1, [sp, #12]
 800805c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008060:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8008064:	9105      	str	r1, [sp, #20]
 8008066:	ee07 1a90 	vmov	s15, r1
 800806a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800806e:	2400      	movs	r4, #0
 8008070:	ece6 7a01 	vstmia	r6!, {s15}
 8008074:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80080a8 <__kernel_rem_pio2f+0x2f8>
 8008078:	46b1      	mov	r9, r6
 800807a:	455c      	cmp	r4, fp
 800807c:	dd04      	ble.n	8008088 <__kernel_rem_pio2f+0x2d8>
 800807e:	ece0 7a01 	vstmia	r0!, {s15}
 8008082:	f10c 0c01 	add.w	ip, ip, #1
 8008086:	e7e1      	b.n	800804c <__kernel_rem_pio2f+0x29c>
 8008088:	ecfe 6a01 	vldmia	lr!, {s13}
 800808c:	ed39 7a01 	vldmdb	r9!, {s14}
 8008090:	3401      	adds	r4, #1
 8008092:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008096:	e7f0      	b.n	800807a <__kernel_rem_pio2f+0x2ca>
 8008098:	08008d74 	.word	0x08008d74
 800809c:	08008d48 	.word	0x08008d48
 80080a0:	43800000 	.word	0x43800000
 80080a4:	3b800000 	.word	0x3b800000
 80080a8:	00000000 	.word	0x00000000
 80080ac:	9b02      	ldr	r3, [sp, #8]
 80080ae:	eeb0 0a48 	vmov.f32	s0, s16
 80080b2:	eba3 0008 	sub.w	r0, r3, r8
 80080b6:	f000 f8e3 	bl	8008280 <scalbnf>
 80080ba:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80080a0 <__kernel_rem_pio2f+0x2f0>
 80080be:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80080c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c6:	db19      	blt.n	80080fc <__kernel_rem_pio2f+0x34c>
 80080c8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80080a4 <__kernel_rem_pio2f+0x2f4>
 80080cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80080d0:	aa08      	add	r2, sp, #32
 80080d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080d6:	3508      	adds	r5, #8
 80080d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80080e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80080e8:	ee10 3a10 	vmov	r3, s0
 80080ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80080f0:	ee17 3a90 	vmov	r3, s15
 80080f4:	3401      	adds	r4, #1
 80080f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80080fa:	e74c      	b.n	8007f96 <__kernel_rem_pio2f+0x1e6>
 80080fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008100:	aa08      	add	r2, sp, #32
 8008102:	ee10 3a10 	vmov	r3, s0
 8008106:	e7f6      	b.n	80080f6 <__kernel_rem_pio2f+0x346>
 8008108:	a808      	add	r0, sp, #32
 800810a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800810e:	9001      	str	r0, [sp, #4]
 8008110:	ee07 0a90 	vmov	s15, r0
 8008114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008118:	3b01      	subs	r3, #1
 800811a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800811e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008122:	ed62 7a01 	vstmdb	r2!, {s15}
 8008126:	e743      	b.n	8007fb0 <__kernel_rem_pio2f+0x200>
 8008128:	ecfc 6a01 	vldmia	ip!, {s13}
 800812c:	ecb5 7a01 	vldmia	r5!, {s14}
 8008130:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008134:	3001      	adds	r0, #1
 8008136:	4550      	cmp	r0, sl
 8008138:	dc01      	bgt.n	800813e <__kernel_rem_pio2f+0x38e>
 800813a:	4290      	cmp	r0, r2
 800813c:	ddf4      	ble.n	8008128 <__kernel_rem_pio2f+0x378>
 800813e:	a858      	add	r0, sp, #352	@ 0x160
 8008140:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008144:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8008148:	3b01      	subs	r3, #1
 800814a:	e735      	b.n	8007fb8 <__kernel_rem_pio2f+0x208>
 800814c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800814e:	2b02      	cmp	r3, #2
 8008150:	dc09      	bgt.n	8008166 <__kernel_rem_pio2f+0x3b6>
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc27      	bgt.n	80081a6 <__kernel_rem_pio2f+0x3f6>
 8008156:	d040      	beq.n	80081da <__kernel_rem_pio2f+0x42a>
 8008158:	f009 0007 	and.w	r0, r9, #7
 800815c:	b059      	add	sp, #356	@ 0x164
 800815e:	ecbd 8b04 	vpop	{d8-d9}
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008168:	2b03      	cmp	r3, #3
 800816a:	d1f5      	bne.n	8008158 <__kernel_rem_pio2f+0x3a8>
 800816c:	aa30      	add	r2, sp, #192	@ 0xc0
 800816e:	1f0b      	subs	r3, r1, #4
 8008170:	4413      	add	r3, r2
 8008172:	461a      	mov	r2, r3
 8008174:	4620      	mov	r0, r4
 8008176:	2800      	cmp	r0, #0
 8008178:	dc50      	bgt.n	800821c <__kernel_rem_pio2f+0x46c>
 800817a:	4622      	mov	r2, r4
 800817c:	2a01      	cmp	r2, #1
 800817e:	dc5d      	bgt.n	800823c <__kernel_rem_pio2f+0x48c>
 8008180:	ab30      	add	r3, sp, #192	@ 0xc0
 8008182:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80080a8 <__kernel_rem_pio2f+0x2f8>
 8008186:	440b      	add	r3, r1
 8008188:	2c01      	cmp	r4, #1
 800818a:	dc67      	bgt.n	800825c <__kernel_rem_pio2f+0x4ac>
 800818c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8008190:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8008194:	2e00      	cmp	r6, #0
 8008196:	d167      	bne.n	8008268 <__kernel_rem_pio2f+0x4b8>
 8008198:	edc7 6a00 	vstr	s13, [r7]
 800819c:	ed87 7a01 	vstr	s14, [r7, #4]
 80081a0:	edc7 7a02 	vstr	s15, [r7, #8]
 80081a4:	e7d8      	b.n	8008158 <__kernel_rem_pio2f+0x3a8>
 80081a6:	ab30      	add	r3, sp, #192	@ 0xc0
 80081a8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80080a8 <__kernel_rem_pio2f+0x2f8>
 80081ac:	440b      	add	r3, r1
 80081ae:	4622      	mov	r2, r4
 80081b0:	2a00      	cmp	r2, #0
 80081b2:	da24      	bge.n	80081fe <__kernel_rem_pio2f+0x44e>
 80081b4:	b34e      	cbz	r6, 800820a <__kernel_rem_pio2f+0x45a>
 80081b6:	eef1 7a47 	vneg.f32	s15, s14
 80081ba:	edc7 7a00 	vstr	s15, [r7]
 80081be:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80081c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081c6:	aa31      	add	r2, sp, #196	@ 0xc4
 80081c8:	2301      	movs	r3, #1
 80081ca:	429c      	cmp	r4, r3
 80081cc:	da20      	bge.n	8008210 <__kernel_rem_pio2f+0x460>
 80081ce:	b10e      	cbz	r6, 80081d4 <__kernel_rem_pio2f+0x424>
 80081d0:	eef1 7a67 	vneg.f32	s15, s15
 80081d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80081d8:	e7be      	b.n	8008158 <__kernel_rem_pio2f+0x3a8>
 80081da:	ab30      	add	r3, sp, #192	@ 0xc0
 80081dc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80080a8 <__kernel_rem_pio2f+0x2f8>
 80081e0:	440b      	add	r3, r1
 80081e2:	2c00      	cmp	r4, #0
 80081e4:	da05      	bge.n	80081f2 <__kernel_rem_pio2f+0x442>
 80081e6:	b10e      	cbz	r6, 80081ec <__kernel_rem_pio2f+0x43c>
 80081e8:	eef1 7a67 	vneg.f32	s15, s15
 80081ec:	edc7 7a00 	vstr	s15, [r7]
 80081f0:	e7b2      	b.n	8008158 <__kernel_rem_pio2f+0x3a8>
 80081f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80081f6:	3c01      	subs	r4, #1
 80081f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081fc:	e7f1      	b.n	80081e2 <__kernel_rem_pio2f+0x432>
 80081fe:	ed73 7a01 	vldmdb	r3!, {s15}
 8008202:	3a01      	subs	r2, #1
 8008204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008208:	e7d2      	b.n	80081b0 <__kernel_rem_pio2f+0x400>
 800820a:	eef0 7a47 	vmov.f32	s15, s14
 800820e:	e7d4      	b.n	80081ba <__kernel_rem_pio2f+0x40a>
 8008210:	ecb2 7a01 	vldmia	r2!, {s14}
 8008214:	3301      	adds	r3, #1
 8008216:	ee77 7a87 	vadd.f32	s15, s15, s14
 800821a:	e7d6      	b.n	80081ca <__kernel_rem_pio2f+0x41a>
 800821c:	ed72 7a01 	vldmdb	r2!, {s15}
 8008220:	edd2 6a01 	vldr	s13, [r2, #4]
 8008224:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008228:	3801      	subs	r0, #1
 800822a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800822e:	ed82 7a00 	vstr	s14, [r2]
 8008232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008236:	edc2 7a01 	vstr	s15, [r2, #4]
 800823a:	e79c      	b.n	8008176 <__kernel_rem_pio2f+0x3c6>
 800823c:	ed73 7a01 	vldmdb	r3!, {s15}
 8008240:	edd3 6a01 	vldr	s13, [r3, #4]
 8008244:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008248:	3a01      	subs	r2, #1
 800824a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800824e:	ed83 7a00 	vstr	s14, [r3]
 8008252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008256:	edc3 7a01 	vstr	s15, [r3, #4]
 800825a:	e78f      	b.n	800817c <__kernel_rem_pio2f+0x3cc>
 800825c:	ed33 7a01 	vldmdb	r3!, {s14}
 8008260:	3c01      	subs	r4, #1
 8008262:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008266:	e78f      	b.n	8008188 <__kernel_rem_pio2f+0x3d8>
 8008268:	eef1 6a66 	vneg.f32	s13, s13
 800826c:	eeb1 7a47 	vneg.f32	s14, s14
 8008270:	edc7 6a00 	vstr	s13, [r7]
 8008274:	ed87 7a01 	vstr	s14, [r7, #4]
 8008278:	eef1 7a67 	vneg.f32	s15, s15
 800827c:	e790      	b.n	80081a0 <__kernel_rem_pio2f+0x3f0>
 800827e:	bf00      	nop

08008280 <scalbnf>:
 8008280:	ee10 3a10 	vmov	r3, s0
 8008284:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008288:	d02b      	beq.n	80082e2 <scalbnf+0x62>
 800828a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800828e:	d302      	bcc.n	8008296 <scalbnf+0x16>
 8008290:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008294:	4770      	bx	lr
 8008296:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800829a:	d123      	bne.n	80082e4 <scalbnf+0x64>
 800829c:	4b24      	ldr	r3, [pc, #144]	@ (8008330 <scalbnf+0xb0>)
 800829e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008334 <scalbnf+0xb4>
 80082a2:	4298      	cmp	r0, r3
 80082a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80082a8:	db17      	blt.n	80082da <scalbnf+0x5a>
 80082aa:	ee10 3a10 	vmov	r3, s0
 80082ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80082b2:	3a19      	subs	r2, #25
 80082b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80082b8:	4288      	cmp	r0, r1
 80082ba:	dd15      	ble.n	80082e8 <scalbnf+0x68>
 80082bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008338 <scalbnf+0xb8>
 80082c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800833c <scalbnf+0xbc>
 80082c4:	ee10 3a10 	vmov	r3, s0
 80082c8:	eeb0 7a67 	vmov.f32	s14, s15
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bfb8      	it	lt
 80082d0:	eef0 7a66 	vmovlt.f32	s15, s13
 80082d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80082d8:	4770      	bx	lr
 80082da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008340 <scalbnf+0xc0>
 80082de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80082e2:	4770      	bx	lr
 80082e4:	0dd2      	lsrs	r2, r2, #23
 80082e6:	e7e5      	b.n	80082b4 <scalbnf+0x34>
 80082e8:	4410      	add	r0, r2
 80082ea:	28fe      	cmp	r0, #254	@ 0xfe
 80082ec:	dce6      	bgt.n	80082bc <scalbnf+0x3c>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	dd06      	ble.n	8008300 <scalbnf+0x80>
 80082f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80082f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80082fa:	ee00 3a10 	vmov	s0, r3
 80082fe:	4770      	bx	lr
 8008300:	f110 0f16 	cmn.w	r0, #22
 8008304:	da09      	bge.n	800831a <scalbnf+0x9a>
 8008306:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008340 <scalbnf+0xc0>
 800830a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008344 <scalbnf+0xc4>
 800830e:	ee10 3a10 	vmov	r3, s0
 8008312:	eeb0 7a67 	vmov.f32	s14, s15
 8008316:	2b00      	cmp	r3, #0
 8008318:	e7d9      	b.n	80082ce <scalbnf+0x4e>
 800831a:	3019      	adds	r0, #25
 800831c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008320:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008324:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008348 <scalbnf+0xc8>
 8008328:	ee07 3a90 	vmov	s15, r3
 800832c:	e7d7      	b.n	80082de <scalbnf+0x5e>
 800832e:	bf00      	nop
 8008330:	ffff3cb0 	.word	0xffff3cb0
 8008334:	4c000000 	.word	0x4c000000
 8008338:	7149f2ca 	.word	0x7149f2ca
 800833c:	f149f2ca 	.word	0xf149f2ca
 8008340:	0da24260 	.word	0x0da24260
 8008344:	8da24260 	.word	0x8da24260
 8008348:	33000000 	.word	0x33000000

0800834c <floorf>:
 800834c:	ee10 3a10 	vmov	r3, s0
 8008350:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008354:	3a7f      	subs	r2, #127	@ 0x7f
 8008356:	2a16      	cmp	r2, #22
 8008358:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800835c:	dc2b      	bgt.n	80083b6 <floorf+0x6a>
 800835e:	2a00      	cmp	r2, #0
 8008360:	da12      	bge.n	8008388 <floorf+0x3c>
 8008362:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80083c8 <floorf+0x7c>
 8008366:	ee30 0a27 	vadd.f32	s0, s0, s15
 800836a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800836e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008372:	dd06      	ble.n	8008382 <floorf+0x36>
 8008374:	2b00      	cmp	r3, #0
 8008376:	da24      	bge.n	80083c2 <floorf+0x76>
 8008378:	2900      	cmp	r1, #0
 800837a:	4b14      	ldr	r3, [pc, #80]	@ (80083cc <floorf+0x80>)
 800837c:	bf08      	it	eq
 800837e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8008382:	ee00 3a10 	vmov	s0, r3
 8008386:	4770      	bx	lr
 8008388:	4911      	ldr	r1, [pc, #68]	@ (80083d0 <floorf+0x84>)
 800838a:	4111      	asrs	r1, r2
 800838c:	420b      	tst	r3, r1
 800838e:	d0fa      	beq.n	8008386 <floorf+0x3a>
 8008390:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80083c8 <floorf+0x7c>
 8008394:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008398:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a0:	ddef      	ble.n	8008382 <floorf+0x36>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bfbe      	ittt	lt
 80083a6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80083aa:	fa40 f202 	asrlt.w	r2, r0, r2
 80083ae:	189b      	addlt	r3, r3, r2
 80083b0:	ea23 0301 	bic.w	r3, r3, r1
 80083b4:	e7e5      	b.n	8008382 <floorf+0x36>
 80083b6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80083ba:	d3e4      	bcc.n	8008386 <floorf+0x3a>
 80083bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80083c0:	4770      	bx	lr
 80083c2:	2300      	movs	r3, #0
 80083c4:	e7dd      	b.n	8008382 <floorf+0x36>
 80083c6:	bf00      	nop
 80083c8:	7149f2ca 	.word	0x7149f2ca
 80083cc:	bf800000 	.word	0xbf800000
 80083d0:	007fffff 	.word	0x007fffff

080083d4 <_init>:
 80083d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d6:	bf00      	nop
 80083d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083da:	bc08      	pop	{r3}
 80083dc:	469e      	mov	lr, r3
 80083de:	4770      	bx	lr

080083e0 <_fini>:
 80083e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e2:	bf00      	nop
 80083e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e6:	bc08      	pop	{r3}
 80083e8:	469e      	mov	lr, r3
 80083ea:	4770      	bx	lr
