
STM32F411Discovery_CubeAI_SineWave_model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007380  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  08007520  08007520  00008520  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fa8  08007fa8  0000985c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fa8  08007fa8  00008fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fb0  08007fb0  0000985c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb0  08007fb0  00008fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fb4  08007fb4  00008fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000085c  20000000  08007fb8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000085c  08008814  0000985c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20000ab4  08008814  00009ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000985c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a24c  00000000  00000000  0000988c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5d  00000000  00000000  00013ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00015738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a1  00000000  00000000  00015ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001783d  00000000  00000000  00016469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4cb  00000000  00000000  0002dca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926ee  00000000  00000000  00038171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000ca85f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e98  00000000  00000000  000ca8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  000cd780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000085c 	.word	0x2000085c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007508 	.word	0x08007508

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000860 	.word	0x20000860
 80001dc:	08007508 	.word	0x08007508

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f70:	e000      	b.n	8000f74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f9      	beq.n	8000f72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f7e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e009      	b.n	8000fc0 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	60ba      	str	r2, [r7, #8]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ffc7 	bl	8000f48 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf1      	blt.n	8000fac <_write+0x16>
	}
	return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	0000      	movs	r0, r0
 8000fd4:	0000      	movs	r0, r0
	...

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0cc      	sub	sp, #304	@ 0x130
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fb4f 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f90d 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 f9b1 	bl	800134c <MX_GPIO_Init>
  MX_CRC_Init();
 8000fea:	f000 f971 	bl	80012d0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000fee:	f000 f983 	bl	80012f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000ff2:	4875      	ldr	r0, [pc, #468]	@ (80011c8 <main+0x1f0>)
 8000ff4:	f004 fb96 	bl	8005724 <puts>
  // Buffers used to store input and output tensors
  ai_buffer *ai_input;
  ai_buffer *ai_output;

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  ai_error err;
  ai_network_report report;

  // Initialize network
  // Create instance of neural network
  const ai_handle acts[] = { activations };
 8000ffe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001002:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001006:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800100a:	601a      	str	r2, [r3, #0]

  err = ai_mysine_model_create_and_init(&sine_model, acts, NULL);
 800100c:	1d39      	adds	r1, r7, #4
 800100e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001012:	2200      	movs	r2, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f001 ff59 	bl	8002ecc <ai_mysine_model_create_and_init>
 800101a:	4603      	mov	r3, r0
 800101c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if(err.type != AI_ERROR_NONE)
 8001020:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <main+0x58>
  {
	  printf("Error: could not create NN instance\r\n");
 8001028:	4868      	ldr	r0, [pc, #416]	@ (80011cc <main+0x1f4>)
 800102a:	f004 fb7b 	bl	8005724 <puts>
 800102e:	e002      	b.n	8001036 <main+0x5e>
  }
  else
  {
	  printf("success in create NN instance\r\n");
 8001030:	4867      	ldr	r0, [pc, #412]	@ (80011d0 <main+0x1f8>)
 8001032:	f004 fb77 	bl	8005724 <puts>
  }

  // {optional} for debug/log purpose
  if(ai_mysine_model_get_report(sine_model, &report) != true)
 8001036:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800103a:	f107 0208 	add.w	r2, r7, #8
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f001 feb5 	bl	8002db0 <ai_mysine_model_get_report>
 8001046:	4603      	mov	r3, r0
 8001048:	f083 0301 	eor.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <main+0x80>
  {
	  printf("ai get report error\r\n");
 8001052:	4860      	ldr	r0, [pc, #384]	@ (80011d4 <main+0x1fc>)
 8001054:	f004 fb66 	bl	8005724 <puts>
  }

  printf("Model name      : ");
 8001058:	485f      	ldr	r0, [pc, #380]	@ (80011d8 <main+0x200>)
 800105a:	f004 fafb 	bl	8005654 <iprintf>
  printf(report.model_name);
 800105e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001062:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f004 faf3 	bl	8005654 <iprintf>
  printf("\nModel signature : ");
 800106e:	485b      	ldr	r0, [pc, #364]	@ (80011dc <main+0x204>)
 8001070:	f004 faf0 	bl	8005654 <iprintf>
  printf(report.model_signature);
 8001074:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001078:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	f004 fae8 	bl	8005654 <iprintf>


  ai_input = &report.inputs[0];
 8001084:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001088:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800108c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800108e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  ai_output = &report.outputs[0];
 8001092:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001096:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  printf("input[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_HEIGHT),
 80010a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	330c      	adds	r3, #12
 80010a8:	6819      	ldr	r1, [r3, #0]
                                      AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_WIDTH),
 80010aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	3308      	adds	r3, #8
  printf("input[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_HEIGHT),
 80010b2:	681a      	ldr	r2, [r3, #0]
                                      AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_CHANNEL));
 80010b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	3304      	adds	r3, #4
  printf("input[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_HEIGHT),
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4848      	ldr	r0, [pc, #288]	@ (80011e0 <main+0x208>)
 80010c0:	f004 fac8 	bl	8005654 <iprintf>
  printf("output[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_HEIGHT),
 80010c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	330c      	adds	r3, #12
 80010cc:	6819      	ldr	r1, [r3, #0]
                                       AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_WIDTH),
 80010ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	3308      	adds	r3, #8
  printf("output[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_HEIGHT),
 80010d6:	681a      	ldr	r2, [r3, #0]
                                       AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_CHANNEL));
 80010d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	3304      	adds	r3, #4
  printf("output[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_HEIGHT),
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4840      	ldr	r0, [pc, #256]	@ (80011e4 <main+0x20c>)
 80010e4:	f004 fab6 	bl	8005654 <iprintf>

  // link inputs and outputs to the model
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80010ec:	4a3e      	ldr	r2, [pc, #248]	@ (80011e8 <main+0x210>)
 80010ee:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80010f4:	4a3d      	ldr	r2, [pc, #244]	@ (80011ec <main+0x214>)
 80010f6:	605a      	str	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	float x = 0.0f;
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	for(int i = 0 ; i < 60; i++)
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001106:	e053      	b.n	80011b0 <main+0x1d8>
	{
		x = x + 0.1;
 8001108:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800110c:	f7ff fa24 	bl	8000558 <__aeabi_f2d>
 8001110:	a32b      	add	r3, pc, #172	@ (adr r3, 80011c0 <main+0x1e8>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff f8c1 	bl	800029c <__adddf3>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fd49 	bl	8000bb8 <__aeabi_d2f>
 8001126:	4603      	mov	r3, r0
 8001128:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

		for(uint32_t i = 0; i < AI_MYSINE_MODEL_IN_1_SIZE; i++)
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001132:	e00c      	b.n	800114e <main+0x176>
		{
			((ai_float *)in_data)[i] = (ai_float)x;
 8001134:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4a2b      	ldr	r2, [pc, #172]	@ (80011e8 <main+0x210>)
 800113c:	4413      	add	r3, r2
 800113e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001142:	601a      	str	r2, [r3, #0]
		for(uint32_t i = 0; i < AI_MYSINE_MODEL_IN_1_SIZE; i++)
 8001144:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001148:	3301      	adds	r3, #1
 800114a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800114e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0ee      	beq.n	8001134 <main+0x15c>
		}

		nbatch = ai_mysine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8001156:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800115a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800115e:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8001162:	4618      	mov	r0, r3
 8001164:	f001 ff6c 	bl	8003040 <ai_mysine_model_run>
 8001168:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
		if(nbatch != 1)
 800116c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001170:	2b01      	cmp	r3, #1
 8001172:	d002      	beq.n	800117a <main+0x1a2>
		{
			printf("Error: could not run inference\r\n");
 8001174:	481e      	ldr	r0, [pc, #120]	@ (80011f0 <main+0x218>)
 8001176:	f004 fad5 	bl	8005724 <puts>
		}

		y_val = ((float *)out_data)[0];
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <main+0x214>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1d      	ldr	r2, [pc, #116]	@ (80011f4 <main+0x21c>)
 8001180:	6013      	str	r3, [r2, #0]

		printf("%f \r\n", y_val);
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <main+0x21c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9e6 	bl	8000558 <__aeabi_f2d>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4819      	ldr	r0, [pc, #100]	@ (80011f8 <main+0x220>)
 8001192:	f004 fa5f 	bl	8005654 <iprintf>

		HAL_Delay(50);
 8001196:	2032      	movs	r0, #50	@ 0x32
 8001198:	f000 fae4 	bl	8001764 <HAL_Delay>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800119c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a0:	4816      	ldr	r0, [pc, #88]	@ (80011fc <main+0x224>)
 80011a2:	f000 fda2 	bl	8001cea <HAL_GPIO_TogglePin>
	for(int i = 0 ; i < 60; i++)
 80011a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011aa:	3301      	adds	r3, #1
 80011ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80011b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011b4:	2b3b      	cmp	r3, #59	@ 0x3b
 80011b6:	dda7      	ble.n	8001108 <main+0x130>
	}
	while(1);
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <main+0x1e0>
 80011bc:	f3af 8000 	nop.w
 80011c0:	9999999a 	.word	0x9999999a
 80011c4:	3fb99999 	.word	0x3fb99999
 80011c8:	08007520 	.word	0x08007520
 80011cc:	0800753c 	.word	0x0800753c
 80011d0:	08007564 	.word	0x08007564
 80011d4:	08007584 	.word	0x08007584
 80011d8:	0800759c 	.word	0x0800759c
 80011dc:	080075b0 	.word	0x080075b0
 80011e0:	080075c4 	.word	0x080075c4
 80011e4:	080075e0 	.word	0x080075e0
 80011e8:	200008c8 	.word	0x200008c8
 80011ec:	200008cc 	.word	0x200008cc
 80011f0:	080075fc 	.word	0x080075fc
 80011f4:	200008d0 	.word	0x200008d0
 80011f8:	0800761c 	.word	0x0800761c
 80011fc:	40020c00 	.word	0x40020c00

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	@ 0x50
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	2230      	movs	r2, #48	@ 0x30
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fb68 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <SystemClock_Config+0xc8>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	4a26      	ldr	r2, [pc, #152]	@ (80012c8 <SystemClock_Config+0xc8>)
 800122e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001232:	6413      	str	r3, [r2, #64]	@ 0x40
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <SystemClock_Config+0xc8>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <SystemClock_Config+0xcc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a20      	ldr	r2, [pc, #128]	@ (80012cc <SystemClock_Config+0xcc>)
 800124a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <SystemClock_Config+0xcc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001260:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001274:	2364      	movs	r3, #100	@ 0x64
 8001276:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800127c:	2304      	movs	r3, #4
 800127e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fd4b 	bl	8001d20 <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001290:	f000 f8bc 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001294:	230f      	movs	r3, #15
 8001296:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2302      	movs	r3, #2
 800129a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2103      	movs	r1, #3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 ffad 	bl	8002210 <HAL_RCC_ClockConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012bc:	f000 f8a6 	bl	800140c <Error_Handler>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3750      	adds	r7, #80	@ 0x50
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000

080012d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_CRC_Init+0x20>)
 80012d6:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <MX_CRC_Init+0x24>)
 80012d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_CRC_Init+0x20>)
 80012dc:	f000 fb4b 	bl	8001976 <HAL_CRC_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80012e6:	f000 f891 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000878 	.word	0x20000878
 80012f4:	40023000 	.word	0x40023000

080012f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <MX_USART2_UART_Init+0x50>)
 8001300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001330:	f001 f98e 	bl	8002650 <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133a:	f000 f867 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000880 	.word	0x20000880
 8001348:	40004400 	.word	0x40004400

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <MX_GPIO_Init+0xb8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a26      	ldr	r2, [pc, #152]	@ (8001404 <MX_GPIO_Init+0xb8>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <MX_GPIO_Init+0xb8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <MX_GPIO_Init+0xb8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a1f      	ldr	r2, [pc, #124]	@ (8001404 <MX_GPIO_Init+0xb8>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <MX_GPIO_Init+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <MX_GPIO_Init+0xb8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a18      	ldr	r2, [pc, #96]	@ (8001404 <MX_GPIO_Init+0xb8>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b16      	ldr	r3, [pc, #88]	@ (8001404 <MX_GPIO_Init+0xb8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <MX_GPIO_Init+0xb8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a11      	ldr	r2, [pc, #68]	@ (8001404 <MX_GPIO_Init+0xb8>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <MX_GPIO_Init+0xb8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013d8:	480b      	ldr	r0, [pc, #44]	@ (8001408 <MX_GPIO_Init+0xbc>)
 80013da:	f000 fc6d 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_GPIO_Init+0xbc>)
 80013f8:	f000 fada 	bl	80019b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	@ 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40020c00 	.word	0x40020c00

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <Error_Handler+0x8>

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	4a0f      	ldr	r2, [pc, #60]	@ (8001464 <HAL_MspInit+0x4c>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142c:	6453      	str	r3, [r2, #68]	@ 0x44
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	4a08      	ldr	r2, [pc, #32]	@ (8001464 <HAL_MspInit+0x4c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	@ 0x40
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0b      	ldr	r2, [pc, #44]	@ (80014a4 <HAL_CRC_MspInit+0x3c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10d      	bne.n	8001496 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_CRC_MspInit+0x40>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <HAL_CRC_MspInit+0x40>)
 8001484:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <HAL_CRC_MspInit+0x40>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023000 	.word	0x40023000
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <HAL_UART_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12b      	bne.n	8001526 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001516:	2307      	movs	r3, #7
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <HAL_UART_MspInit+0x8c>)
 8001522:	f000 fa45 	bl	80019b0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40004400 	.word	0x40004400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <NMI_Handler+0x4>

08001544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <MemManage_Handler+0x4>

08001554 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <UsageFault_Handler+0x4>

08001564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f000 f8c7 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f004 f9ec 	bl	80059a8 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20020000 	.word	0x20020000
 80015fc:	00000800 	.word	0x00000800
 8001600:	200008d4 	.word	0x200008d4
 8001604:	20000ab8 	.word	0x20000ab8

08001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001664 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001630:	f7ff ffea 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	@ (8001668 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	@ (800166c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	@ (8001678 <LoopFillZerobss+0x22>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165a:	f004 f9ab 	bl	80059b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff fcbb 	bl	8000fd8 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	2000085c 	.word	0x2000085c
  ldr r2, =_sidata
 8001670:	08007fb8 	.word	0x08007fb8
  ldr r2, =_sbss
 8001674:	2000085c 	.word	0x2000085c
  ldr r4, =_ebss
 8001678:	20000ab4 	.word	0x20000ab4

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <HAL_Init+0x40>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800168e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <HAL_Init+0x40>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <HAL_Init+0x40>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f931 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff feb0 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f93b 	bl	800195e <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f911 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	@ (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000000 	.word	0x20000000
 800171c:	20000008 	.word	0x20000008
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008
 8001748:	200008d8 	.word	0x200008d8

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	@ (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200008d8 	.word	0x200008d8

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008

080017ac <__NVIC_SetPriorityGrouping>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_SetPriority>:
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	@ (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	@ (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	@ 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff47 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff5c 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffb0 	bl	80018cc <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e00e      	b.n	80019a6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	795b      	ldrb	r3, [r3, #5]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fd65 	bl	8001468 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	@ 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e159      	b.n	8001c80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8148 	bne.w	8001c7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80a2 	beq.w	8001c7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a56      	ldr	r2, [pc, #344]	@ (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b54      	ldr	r3, [pc, #336]	@ (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b52:	4a52      	ldr	r2, [pc, #328]	@ (8001c9c <HAL_GPIO_Init+0x2ec>)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a49      	ldr	r2, [pc, #292]	@ (8001ca0 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d019      	beq.n	8001bb2 <HAL_GPIO_Init+0x202>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a48      	ldr	r2, [pc, #288]	@ (8001ca4 <HAL_GPIO_Init+0x2f4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0x1fe>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a47      	ldr	r2, [pc, #284]	@ (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00d      	beq.n	8001baa <HAL_GPIO_Init+0x1fa>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a46      	ldr	r2, [pc, #280]	@ (8001cac <HAL_GPIO_Init+0x2fc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x1f6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a45      	ldr	r2, [pc, #276]	@ (8001cb0 <HAL_GPIO_Init+0x300>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_GPIO_Init+0x1f2>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	@ (8001c9c <HAL_GPIO_Init+0x2ec>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a24      	ldr	r2, [pc, #144]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f aea2 	bls.w	80019cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40013c00 	.word	0x40013c00

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cfc:	887a      	ldrh	r2, [r7, #2]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4013      	ands	r3, r2
 8001d02:	041a      	lsls	r2, r3, #16
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e267      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d075      	beq.n	8001e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d3e:	4b88      	ldr	r3, [pc, #544]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d00c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	4b85      	ldr	r3, [pc, #532]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d112      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4b82      	ldr	r3, [pc, #520]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4b7e      	ldr	r3, [pc, #504]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d05b      	beq.n	8001e28 <HAL_RCC_OscConfig+0x108>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d157      	bne.n	8001e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e242      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x74>
 8001d86:	4b76      	ldr	r3, [pc, #472]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a75      	ldr	r2, [pc, #468]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e01d      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b70      	ldr	r3, [pc, #448]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6f      	ldr	r2, [pc, #444]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b6d      	ldr	r3, [pc, #436]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6c      	ldr	r2, [pc, #432]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001db8:	4b69      	ldr	r3, [pc, #420]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a68      	ldr	r2, [pc, #416]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b66      	ldr	r3, [pc, #408]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a65      	ldr	r2, [pc, #404]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fcb8 	bl	800174c <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fcb4 	bl	800174c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e207      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fca4 	bl	800174c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff fca0 	bl	800174c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	@ 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e1f3      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	4b51      	ldr	r3, [pc, #324]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0xe8>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d063      	beq.n	8001efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e36:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d11c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b44      	ldr	r3, [pc, #272]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e1c7      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b3b      	ldr	r3, [pc, #236]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4937      	ldr	r1, [pc, #220]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	e03a      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e90:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <HAL_RCC_OscConfig+0x244>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff fc59 	bl	800174c <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fc55 	bl	800174c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1a8      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4925      	ldr	r1, [pc, #148]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <HAL_RCC_OscConfig+0x244>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc38 	bl	800174c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fc34 	bl	800174c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e187      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d036      	beq.n	8001f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_RCC_OscConfig+0x248>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff fc18 	bl	800174c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff fc14 	bl	800174c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e167      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x200>
 8001f3e:	e01b      	b.n	8001f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_RCC_OscConfig+0x248>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fc01 	bl	800174c <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	e00e      	b.n	8001f6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fbfd 	bl	800174c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d907      	bls.n	8001f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e150      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
 8001f60:	40023800 	.word	0x40023800
 8001f64:	42470000 	.word	0x42470000
 8001f68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	4b88      	ldr	r3, [pc, #544]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ea      	bne.n	8001f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8097 	beq.w	80020b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b81      	ldr	r3, [pc, #516]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b77      	ldr	r3, [pc, #476]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b74      	ldr	r3, [pc, #464]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a73      	ldr	r2, [pc, #460]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fbbd 	bl	800174c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7ff fbb9 	bl	800174c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e10c      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x2ea>
 8001ffc:	4b64      	ldr	r3, [pc, #400]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002000:	4a63      	ldr	r2, [pc, #396]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	@ 0x70
 8002008:	e01c      	b.n	8002044 <HAL_RCC_OscConfig+0x324>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x30c>
 8002012:	4b5f      	ldr	r3, [pc, #380]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	4a5e      	ldr	r2, [pc, #376]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	@ 0x70
 800201e:	4b5c      	ldr	r3, [pc, #368]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002022:	4a5b      	ldr	r2, [pc, #364]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6713      	str	r3, [r2, #112]	@ 0x70
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0x324>
 800202c:	4b58      	ldr	r3, [pc, #352]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a57      	ldr	r2, [pc, #348]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
 8002038:	4b55      	ldr	r3, [pc, #340]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203c:	4a54      	ldr	r2, [pc, #336]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800203e:	f023 0304 	bic.w	r3, r3, #4
 8002042:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d015      	beq.n	8002078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff fb7e 	bl	800174c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7ff fb7a 	bl	800174c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e0cb      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	4b49      	ldr	r3, [pc, #292]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ee      	beq.n	8002054 <HAL_RCC_OscConfig+0x334>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7ff fb68 	bl	800174c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7ff fb64 	bl	800174c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0b5      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002096:	4b3e      	ldr	r3, [pc, #248]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1ee      	bne.n	8002080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a8:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	4a38      	ldr	r2, [pc, #224]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a1 	beq.w	8002200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020be:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d05c      	beq.n	8002184 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d141      	bne.n	8002156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b31      	ldr	r3, [pc, #196]	@ (8002198 <HAL_RCC_OscConfig+0x478>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fb38 	bl	800174c <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff fb34 	bl	800174c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e087      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	3b01      	subs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	491b      	ldr	r1, [pc, #108]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_RCC_OscConfig+0x478>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff fb0d 	bl	800174c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff fb09 	bl	800174c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e05c      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002148:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x416>
 8002154:	e054      	b.n	8002200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <HAL_RCC_OscConfig+0x478>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff faf6 	bl	800174c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7ff faf2 	bl	800174c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e045      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x444>
 8002182:	e03d      	b.n	8002200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e038      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000
 8002198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x4ec>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d028      	beq.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d121      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11a      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d111      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	3b01      	subs	r3, #1
 80021e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0cc      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b68      	ldr	r3, [pc, #416]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d90c      	bls.n	800224c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b65      	ldr	r3, [pc, #404]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b63      	ldr	r3, [pc, #396]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b8      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002264:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a58      	ldr	r2, [pc, #352]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800226e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800227c:	4b53      	ldr	r3, [pc, #332]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a52      	ldr	r2, [pc, #328]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b50      	ldr	r3, [pc, #320]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	494d      	ldr	r1, [pc, #308]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d044      	beq.n	8002330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b47      	ldr	r3, [pc, #284]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d119      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b3f      	ldr	r3, [pc, #252]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e067      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4934      	ldr	r1, [pc, #208]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7ff fa24 	bl	800174c <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7ff fa20 	bl	800174c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d20c      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e032      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4916      	ldr	r1, [pc, #88]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002382:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	490e      	ldr	r1, [pc, #56]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002396:	f000 f821 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490a      	ldr	r1, [pc, #40]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	4a09      	ldr	r2, [pc, #36]	@ (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f984 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00
 80023cc:	40023800 	.word	0x40023800
 80023d0:	080076d0 	.word	0x080076d0
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e0:	b094      	sub	sp, #80	@ 0x50
 80023e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f4:	4b79      	ldr	r3, [pc, #484]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d00d      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x40>
 8002400:	2b08      	cmp	r3, #8
 8002402:	f200 80e1 	bhi.w	80025c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x34>
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x3a>
 800240e:	e0db      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b73      	ldr	r3, [pc, #460]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002414:	e0db      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002416:	4b73      	ldr	r3, [pc, #460]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002418:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800241a:	e0d8      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241c:	4b6f      	ldr	r3, [pc, #444]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002424:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002426:	4b6d      	ldr	r3, [pc, #436]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d063      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002432:	4b6a      	ldr	r3, [pc, #424]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	2200      	movs	r2, #0
 800243a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800243c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002444:	633b      	str	r3, [r7, #48]	@ 0x30
 8002446:	2300      	movs	r3, #0
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
 800244a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800244e:	4622      	mov	r2, r4
 8002450:	462b      	mov	r3, r5
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	0159      	lsls	r1, r3, #5
 800245c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002460:	0150      	lsls	r0, r2, #5
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4621      	mov	r1, r4
 8002468:	1a51      	subs	r1, r2, r1
 800246a:	6139      	str	r1, [r7, #16]
 800246c:	4629      	mov	r1, r5
 800246e:	eb63 0301 	sbc.w	r3, r3, r1
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002480:	4659      	mov	r1, fp
 8002482:	018b      	lsls	r3, r1, #6
 8002484:	4651      	mov	r1, sl
 8002486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248a:	4651      	mov	r1, sl
 800248c:	018a      	lsls	r2, r1, #6
 800248e:	4651      	mov	r1, sl
 8002490:	ebb2 0801 	subs.w	r8, r2, r1
 8002494:	4659      	mov	r1, fp
 8002496:	eb63 0901 	sbc.w	r9, r3, r1
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ae:	4690      	mov	r8, r2
 80024b0:	4699      	mov	r9, r3
 80024b2:	4623      	mov	r3, r4
 80024b4:	eb18 0303 	adds.w	r3, r8, r3
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	462b      	mov	r3, r5
 80024bc:	eb49 0303 	adc.w	r3, r9, r3
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ce:	4629      	mov	r1, r5
 80024d0:	024b      	lsls	r3, r1, #9
 80024d2:	4621      	mov	r1, r4
 80024d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024d8:	4621      	mov	r1, r4
 80024da:	024a      	lsls	r2, r1, #9
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e2:	2200      	movs	r2, #0
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024ec:	f7fe fbb4 	bl	8000c58 <__aeabi_uldivmod>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4613      	mov	r3, r2
 80024f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024f8:	e058      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fa:	4b38      	ldr	r3, [pc, #224]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	099b      	lsrs	r3, r3, #6
 8002500:	2200      	movs	r2, #0
 8002502:	4618      	mov	r0, r3
 8002504:	4611      	mov	r1, r2
 8002506:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002510:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002514:	4642      	mov	r2, r8
 8002516:	464b      	mov	r3, r9
 8002518:	f04f 0000 	mov.w	r0, #0
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	0159      	lsls	r1, r3, #5
 8002522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002526:	0150      	lsls	r0, r2, #5
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4641      	mov	r1, r8
 800252e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002532:	4649      	mov	r1, r9
 8002534:	eb63 0b01 	sbc.w	fp, r3, r1
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002544:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002548:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800254c:	ebb2 040a 	subs.w	r4, r2, sl
 8002550:	eb63 050b 	sbc.w	r5, r3, fp
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	00eb      	lsls	r3, r5, #3
 800255e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002562:	00e2      	lsls	r2, r4, #3
 8002564:	4614      	mov	r4, r2
 8002566:	461d      	mov	r5, r3
 8002568:	4643      	mov	r3, r8
 800256a:	18e3      	adds	r3, r4, r3
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	464b      	mov	r3, r9
 8002570:	eb45 0303 	adc.w	r3, r5, r3
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002582:	4629      	mov	r1, r5
 8002584:	028b      	lsls	r3, r1, #10
 8002586:	4621      	mov	r1, r4
 8002588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800258c:	4621      	mov	r1, r4
 800258e:	028a      	lsls	r2, r1, #10
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002596:	2200      	movs	r2, #0
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	61fa      	str	r2, [r7, #28]
 800259c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a0:	f7fe fb5a 	bl	8000c58 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4613      	mov	r3, r2
 80025aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3750      	adds	r7, #80	@ 0x50
 80025d4:	46bd      	mov	sp, r7
 80025d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	007a1200 	.word	0x007a1200

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b03      	ldr	r3, [pc, #12]	@ (80025fc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	@ (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	080076e0 	.word	0x080076e0

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffdc 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0b5b      	lsrs	r3, r3, #13
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	@ (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	080076e0 	.word	0x080076e0

08002650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e042      	b.n	80026e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe ff18 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	@ 0x24
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f82b 	bl	80026f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b0c0      	sub	sp, #256	@ 0x100
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270c:	68d9      	ldr	r1, [r3, #12]
 800270e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	ea40 0301 	orr.w	r3, r0, r1
 8002718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800271a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	431a      	orrs	r2, r3
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	431a      	orrs	r2, r3
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002748:	f021 010c 	bic.w	r1, r1, #12
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002756:	430b      	orrs	r3, r1
 8002758:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800275a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276a:	6999      	ldr	r1, [r3, #24]
 800276c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	ea40 0301 	orr.w	r3, r0, r1
 8002776:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b8f      	ldr	r3, [pc, #572]	@ (80029bc <UART_SetConfig+0x2cc>)
 8002780:	429a      	cmp	r2, r3
 8002782:	d005      	beq.n	8002790 <UART_SetConfig+0xa0>
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b8d      	ldr	r3, [pc, #564]	@ (80029c0 <UART_SetConfig+0x2d0>)
 800278c:	429a      	cmp	r2, r3
 800278e:	d104      	bne.n	800279a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002790:	f7ff ff4a 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002794:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002798:	e003      	b.n	80027a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800279a:	f7ff ff31 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 800279e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027ac:	f040 810c 	bne.w	80029c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027c2:	4622      	mov	r2, r4
 80027c4:	462b      	mov	r3, r5
 80027c6:	1891      	adds	r1, r2, r2
 80027c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027ca:	415b      	adcs	r3, r3
 80027cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027d2:	4621      	mov	r1, r4
 80027d4:	eb12 0801 	adds.w	r8, r2, r1
 80027d8:	4629      	mov	r1, r5
 80027da:	eb43 0901 	adc.w	r9, r3, r1
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027f2:	4690      	mov	r8, r2
 80027f4:	4699      	mov	r9, r3
 80027f6:	4623      	mov	r3, r4
 80027f8:	eb18 0303 	adds.w	r3, r8, r3
 80027fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002800:	462b      	mov	r3, r5
 8002802:	eb49 0303 	adc.w	r3, r9, r3
 8002806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002816:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800281a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800281e:	460b      	mov	r3, r1
 8002820:	18db      	adds	r3, r3, r3
 8002822:	653b      	str	r3, [r7, #80]	@ 0x50
 8002824:	4613      	mov	r3, r2
 8002826:	eb42 0303 	adc.w	r3, r2, r3
 800282a:	657b      	str	r3, [r7, #84]	@ 0x54
 800282c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002830:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002834:	f7fe fa10 	bl	8000c58 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4b61      	ldr	r3, [pc, #388]	@ (80029c4 <UART_SetConfig+0x2d4>)
 800283e:	fba3 2302 	umull	r2, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	011c      	lsls	r4, r3, #4
 8002846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002850:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002854:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002858:	4642      	mov	r2, r8
 800285a:	464b      	mov	r3, r9
 800285c:	1891      	adds	r1, r2, r2
 800285e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002860:	415b      	adcs	r3, r3
 8002862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002864:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002868:	4641      	mov	r1, r8
 800286a:	eb12 0a01 	adds.w	sl, r2, r1
 800286e:	4649      	mov	r1, r9
 8002870:	eb43 0b01 	adc.w	fp, r3, r1
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002880:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002888:	4692      	mov	sl, r2
 800288a:	469b      	mov	fp, r3
 800288c:	4643      	mov	r3, r8
 800288e:	eb1a 0303 	adds.w	r3, sl, r3
 8002892:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002896:	464b      	mov	r3, r9
 8002898:	eb4b 0303 	adc.w	r3, fp, r3
 800289c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028b4:	460b      	mov	r3, r1
 80028b6:	18db      	adds	r3, r3, r3
 80028b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80028ba:	4613      	mov	r3, r2
 80028bc:	eb42 0303 	adc.w	r3, r2, r3
 80028c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028ca:	f7fe f9c5 	bl	8000c58 <__aeabi_uldivmod>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4611      	mov	r1, r2
 80028d4:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <UART_SetConfig+0x2d4>)
 80028d6:	fba3 2301 	umull	r2, r3, r3, r1
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2264      	movs	r2, #100	@ 0x64
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	1acb      	subs	r3, r1, r3
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028ea:	4b36      	ldr	r3, [pc, #216]	@ (80029c4 <UART_SetConfig+0x2d4>)
 80028ec:	fba3 2302 	umull	r2, r3, r3, r2
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028f8:	441c      	add	r4, r3
 80028fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002904:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002908:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800290c:	4642      	mov	r2, r8
 800290e:	464b      	mov	r3, r9
 8002910:	1891      	adds	r1, r2, r2
 8002912:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002914:	415b      	adcs	r3, r3
 8002916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800291c:	4641      	mov	r1, r8
 800291e:	1851      	adds	r1, r2, r1
 8002920:	6339      	str	r1, [r7, #48]	@ 0x30
 8002922:	4649      	mov	r1, r9
 8002924:	414b      	adcs	r3, r1
 8002926:	637b      	str	r3, [r7, #52]	@ 0x34
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002934:	4659      	mov	r1, fp
 8002936:	00cb      	lsls	r3, r1, #3
 8002938:	4651      	mov	r1, sl
 800293a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293e:	4651      	mov	r1, sl
 8002940:	00ca      	lsls	r2, r1, #3
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	4603      	mov	r3, r0
 8002948:	4642      	mov	r2, r8
 800294a:	189b      	adds	r3, r3, r2
 800294c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002950:	464b      	mov	r3, r9
 8002952:	460a      	mov	r2, r1
 8002954:	eb42 0303 	adc.w	r3, r2, r3
 8002958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002968:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800296c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002970:	460b      	mov	r3, r1
 8002972:	18db      	adds	r3, r3, r3
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002976:	4613      	mov	r3, r2
 8002978:	eb42 0303 	adc.w	r3, r2, r3
 800297c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800297e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002986:	f7fe f967 	bl	8000c58 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4b0d      	ldr	r3, [pc, #52]	@ (80029c4 <UART_SetConfig+0x2d4>)
 8002990:	fba3 1302 	umull	r1, r3, r3, r2
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	2164      	movs	r1, #100	@ 0x64
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	3332      	adds	r3, #50	@ 0x32
 80029a2:	4a08      	ldr	r2, [pc, #32]	@ (80029c4 <UART_SetConfig+0x2d4>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	f003 0207 	and.w	r2, r3, #7
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4422      	add	r2, r4
 80029b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029b8:	e106      	b.n	8002bc8 <UART_SetConfig+0x4d8>
 80029ba:	bf00      	nop
 80029bc:	40011000 	.word	0x40011000
 80029c0:	40011400 	.word	0x40011400
 80029c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029cc:	2200      	movs	r2, #0
 80029ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029da:	4642      	mov	r2, r8
 80029dc:	464b      	mov	r3, r9
 80029de:	1891      	adds	r1, r2, r2
 80029e0:	6239      	str	r1, [r7, #32]
 80029e2:	415b      	adcs	r3, r3
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ea:	4641      	mov	r1, r8
 80029ec:	1854      	adds	r4, r2, r1
 80029ee:	4649      	mov	r1, r9
 80029f0:	eb43 0501 	adc.w	r5, r3, r1
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	00eb      	lsls	r3, r5, #3
 80029fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a02:	00e2      	lsls	r2, r4, #3
 8002a04:	4614      	mov	r4, r2
 8002a06:	461d      	mov	r5, r3
 8002a08:	4643      	mov	r3, r8
 8002a0a:	18e3      	adds	r3, r4, r3
 8002a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a10:	464b      	mov	r3, r9
 8002a12:	eb45 0303 	adc.w	r3, r5, r3
 8002a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a36:	4629      	mov	r1, r5
 8002a38:	008b      	lsls	r3, r1, #2
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a40:	4621      	mov	r1, r4
 8002a42:	008a      	lsls	r2, r1, #2
 8002a44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a48:	f7fe f906 	bl	8000c58 <__aeabi_uldivmod>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4b60      	ldr	r3, [pc, #384]	@ (8002bd4 <UART_SetConfig+0x4e4>)
 8002a52:	fba3 2302 	umull	r2, r3, r3, r2
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	011c      	lsls	r4, r3, #4
 8002a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	464b      	mov	r3, r9
 8002a70:	1891      	adds	r1, r2, r2
 8002a72:	61b9      	str	r1, [r7, #24]
 8002a74:	415b      	adcs	r3, r3
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	1851      	adds	r1, r2, r1
 8002a80:	6139      	str	r1, [r7, #16]
 8002a82:	4649      	mov	r1, r9
 8002a84:	414b      	adcs	r3, r1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a94:	4659      	mov	r1, fp
 8002a96:	00cb      	lsls	r3, r1, #3
 8002a98:	4651      	mov	r1, sl
 8002a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	00ca      	lsls	r2, r1, #3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ab0:	464b      	mov	r3, r9
 8002ab2:	460a      	mov	r2, r1
 8002ab4:	eb42 0303 	adc.w	r3, r2, r3
 8002ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ac6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	008b      	lsls	r3, r1, #2
 8002ad8:	4641      	mov	r1, r8
 8002ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ade:	4641      	mov	r1, r8
 8002ae0:	008a      	lsls	r2, r1, #2
 8002ae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ae6:	f7fe f8b7 	bl	8000c58 <__aeabi_uldivmod>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <UART_SetConfig+0x4e4>)
 8002af2:	fba3 2301 	umull	r2, r3, r3, r1
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2264      	movs	r2, #100	@ 0x64
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	1acb      	subs	r3, r1, r3
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	3332      	adds	r3, #50	@ 0x32
 8002b04:	4a33      	ldr	r2, [pc, #204]	@ (8002bd4 <UART_SetConfig+0x4e4>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b10:	441c      	add	r4, r3
 8002b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b16:	2200      	movs	r2, #0
 8002b18:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b20:	4642      	mov	r2, r8
 8002b22:	464b      	mov	r3, r9
 8002b24:	1891      	adds	r1, r2, r2
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	415b      	adcs	r3, r3
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b30:	4641      	mov	r1, r8
 8002b32:	1851      	adds	r1, r2, r1
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	4649      	mov	r1, r9
 8002b38:	414b      	adcs	r3, r1
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b48:	4659      	mov	r1, fp
 8002b4a:	00cb      	lsls	r3, r1, #3
 8002b4c:	4651      	mov	r1, sl
 8002b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b52:	4651      	mov	r1, sl
 8002b54:	00ca      	lsls	r2, r1, #3
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b62:	464b      	mov	r3, r9
 8002b64:	460a      	mov	r2, r1
 8002b66:	eb42 0303 	adc.w	r3, r2, r3
 8002b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b76:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b84:	4649      	mov	r1, r9
 8002b86:	008b      	lsls	r3, r1, #2
 8002b88:	4641      	mov	r1, r8
 8002b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b8e:	4641      	mov	r1, r8
 8002b90:	008a      	lsls	r2, r1, #2
 8002b92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b96:	f7fe f85f 	bl	8000c58 <__aeabi_uldivmod>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <UART_SetConfig+0x4e4>)
 8002ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	2164      	movs	r1, #100	@ 0x64
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	3332      	adds	r3, #50	@ 0x32
 8002bb2:	4a08      	ldr	r2, [pc, #32]	@ (8002bd4 <UART_SetConfig+0x4e4>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	f003 020f 	and.w	r2, r3, #15
 8002bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4422      	add	r2, r4
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd4:	51eb851f 	.word	0x51eb851f

08002bd8 <mysine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mysine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_mysine_model_activations_map, 1, params)) {
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	4825      	ldr	r0, [pc, #148]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002be8:	f000 fb04 	bl	80031f4 <ai_platform_get_activations_map>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d039      	beq.n	8002c66 <mysine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_mysine_model_activations_map[0] + 60);
 8002bf2:	4b22      	ldr	r3, [pc, #136]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	333c      	adds	r3, #60	@ 0x3c
 8002bf8:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <mysine_model_configure_activations+0xa8>)
 8002bfa:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_mysine_model_activations_map[0] + 60);
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	333c      	adds	r3, #60	@ 0x3c
 8002c02:	4a1f      	ldr	r2, [pc, #124]	@ (8002c80 <mysine_model_configure_activations+0xa8>)
 8002c04:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_mysine_model_activations_map[0] + 64);
 8002c06:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3340      	adds	r3, #64	@ 0x40
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c84 <mysine_model_configure_activations+0xac>)
 8002c0e:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_mysine_model_activations_map[0] + 64);
 8002c10:	4b1a      	ldr	r3, [pc, #104]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3340      	adds	r3, #64	@ 0x40
 8002c16:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <mysine_model_configure_activations+0xac>)
 8002c18:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_mysine_model_activations_map[0] + 64);
 8002c1a:	4b18      	ldr	r3, [pc, #96]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3340      	adds	r3, #64	@ 0x40
 8002c20:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <mysine_model_configure_activations+0xb0>)
 8002c22:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_mysine_model_activations_map[0] + 64);
 8002c24:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3340      	adds	r3, #64	@ 0x40
 8002c2a:	4a17      	ldr	r2, [pc, #92]	@ (8002c88 <mysine_model_configure_activations+0xb0>)
 8002c2c:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_mysine_model_activations_map[0] + 0);
 8002c2e:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a16      	ldr	r2, [pc, #88]	@ (8002c8c <mysine_model_configure_activations+0xb4>)
 8002c34:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_mysine_model_activations_map[0] + 0);
 8002c36:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a14      	ldr	r2, [pc, #80]	@ (8002c8c <mysine_model_configure_activations+0xb4>)
 8002c3c:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_mysine_model_activations_map[0] + 64);
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3340      	adds	r3, #64	@ 0x40
 8002c44:	4a12      	ldr	r2, [pc, #72]	@ (8002c90 <mysine_model_configure_activations+0xb8>)
 8002c46:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_mysine_model_activations_map[0] + 64);
 8002c48:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3340      	adds	r3, #64	@ 0x40
 8002c4e:	4a10      	ldr	r2, [pc, #64]	@ (8002c90 <mysine_model_configure_activations+0xb8>)
 8002c50:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_mysine_model_activations_map[0] + 0);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	@ (8002c94 <mysine_model_configure_activations+0xbc>)
 8002c58:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_mysine_model_activations_map[0] + 0);
 8002c5a:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <mysine_model_configure_activations+0xa4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c94 <mysine_model_configure_activations+0xbc>)
 8002c60:	60d3      	str	r3, [r2, #12]
    return true;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e005      	b.n	8002c72 <mysine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002c66:	2213      	movs	r2, #19
 8002c68:	2130      	movs	r1, #48	@ 0x30
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fb80 	bl	8003370 <ai_platform_network_set_error>
  return false;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200008dc 	.word	0x200008dc
 8002c80:	2000000c 	.word	0x2000000c
 8002c84:	2000001c 	.word	0x2000001c
 8002c88:	2000002c 	.word	0x2000002c
 8002c8c:	2000003c 	.word	0x2000003c
 8002c90:	2000004c 	.word	0x2000004c
 8002c94:	2000005c 	.word	0x2000005c

08002c98 <mysine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mysine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_mysine_model_weights_map, 1, params)) {
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	483b      	ldr	r0, [pc, #236]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002ca8:	f000 fa50 	bl	800314c <ai_platform_get_weights_map>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d065      	beq.n	8002d7e <mysine_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002cb2:	4b39      	ldr	r3, [pc, #228]	@ (8002d98 <mysine_model_configure_weights+0x100>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cba:	4a37      	ldr	r2, [pc, #220]	@ (8002d98 <mysine_model_configure_weights+0x100>)
 8002cbc:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_mysine_model_weights_map[0] + 0);
 8002cbe:	4b35      	ldr	r3, [pc, #212]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a35      	ldr	r2, [pc, #212]	@ (8002d98 <mysine_model_configure_weights+0x100>)
 8002cc4:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_mysine_model_weights_map[0] + 0);
 8002cc6:	4b33      	ldr	r3, [pc, #204]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a33      	ldr	r2, [pc, #204]	@ (8002d98 <mysine_model_configure_weights+0x100>)
 8002ccc:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002cce:	4b33      	ldr	r3, [pc, #204]	@ (8002d9c <mysine_model_configure_weights+0x104>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cd6:	4a31      	ldr	r2, [pc, #196]	@ (8002d9c <mysine_model_configure_weights+0x104>)
 8002cd8:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_mysine_model_weights_map[0] + 64);
 8002cda:	4b2e      	ldr	r3, [pc, #184]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3340      	adds	r3, #64	@ 0x40
 8002ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d9c <mysine_model_configure_weights+0x104>)
 8002ce2:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_mysine_model_weights_map[0] + 64);
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3340      	adds	r3, #64	@ 0x40
 8002cea:	4a2c      	ldr	r2, [pc, #176]	@ (8002d9c <mysine_model_configure_weights+0x104>)
 8002cec:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8002cee:	4b2c      	ldr	r3, [pc, #176]	@ (8002da0 <mysine_model_configure_weights+0x108>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8002da0 <mysine_model_configure_weights+0x108>)
 8002cf8:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_mysine_model_weights_map[0] + 128);
 8002cfa:	4b26      	ldr	r3, [pc, #152]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3380      	adds	r3, #128	@ 0x80
 8002d00:	4a27      	ldr	r2, [pc, #156]	@ (8002da0 <mysine_model_configure_weights+0x108>)
 8002d02:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_mysine_model_weights_map[0] + 128);
 8002d04:	4b23      	ldr	r3, [pc, #140]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3380      	adds	r3, #128	@ 0x80
 8002d0a:	4a25      	ldr	r2, [pc, #148]	@ (8002da0 <mysine_model_configure_weights+0x108>)
 8002d0c:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002d0e:	4b25      	ldr	r3, [pc, #148]	@ (8002da4 <mysine_model_configure_weights+0x10c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d16:	4a23      	ldr	r2, [pc, #140]	@ (8002da4 <mysine_model_configure_weights+0x10c>)
 8002d18:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_mysine_model_weights_map[0] + 1152);
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8002d22:	4a20      	ldr	r2, [pc, #128]	@ (8002da4 <mysine_model_configure_weights+0x10c>)
 8002d24:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_mysine_model_weights_map[0] + 1152);
 8002d26:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002da4 <mysine_model_configure_weights+0x10c>)
 8002d30:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8002d32:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <mysine_model_configure_weights+0x110>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002da8 <mysine_model_configure_weights+0x110>)
 8002d3c:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_mysine_model_weights_map[0] + 1216);
 8002d3e:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8002d46:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <mysine_model_configure_weights+0x110>)
 8002d48:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_mysine_model_weights_map[0] + 1216);
 8002d4a:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8002d52:	4a15      	ldr	r2, [pc, #84]	@ (8002da8 <mysine_model_configure_weights+0x110>)
 8002d54:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <mysine_model_configure_weights+0x114>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d5e:	4a13      	ldr	r2, [pc, #76]	@ (8002dac <mysine_model_configure_weights+0x114>)
 8002d60:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_mysine_model_weights_map[0] + 1280);
 8002d62:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6a:	4a10      	ldr	r2, [pc, #64]	@ (8002dac <mysine_model_configure_weights+0x114>)
 8002d6c:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_mysine_model_weights_map[0] + 1280);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <mysine_model_configure_weights+0xfc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d76:	4a0d      	ldr	r2, [pc, #52]	@ (8002dac <mysine_model_configure_weights+0x114>)
 8002d78:	60d3      	str	r3, [r2, #12]
    return true;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e005      	b.n	8002d8a <mysine_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002d7e:	2212      	movs	r2, #18
 8002d80:	2130      	movs	r1, #48	@ 0x30
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 faf4 	bl	8003370 <ai_platform_network_set_error>
  return false;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	200008e0 	.word	0x200008e0
 8002d98:	2000006c 	.word	0x2000006c
 8002d9c:	2000007c 	.word	0x2000007c
 8002da0:	2000008c 	.word	0x2000008c
 8002da4:	2000009c 	.word	0x2000009c
 8002da8:	200000ac 	.word	0x200000ac
 8002dac:	200000bc 	.word	0x200000bc

08002db0 <ai_mysine_model_get_report>:


AI_API_ENTRY
ai_bool ai_mysine_model_get_report(
  ai_handle network, ai_network_report* report)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b0a6      	sub	sp, #152	@ 0x98
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fac4 	bl	8003348 <ai_platform_context_acquire>
 8002dc0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

  if (report && net_ctx)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d04a      	beq.n	8002e60 <ai_mysine_model_get_report+0xb0>
 8002dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d046      	beq.n	8002e60 <ai_mysine_model_get_report+0xb0>
  {
    ai_network_report r = {
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	2288      	movs	r2, #136	@ 0x88
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f002 fd82 	bl	80058e4 <memset>
 8002de0:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <ai_mysine_model_get_report+0xbc>)
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	4b22      	ldr	r3, [pc, #136]	@ (8002e70 <ai_mysine_model_get_report+0xc0>)
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <ai_mysine_model_get_report+0xc4>)
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	4b22      	ldr	r3, [pc, #136]	@ (8002e78 <ai_mysine_model_get_report+0xc8>)
 8002dee:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_MYSINE_MODEL_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8002df0:	f000 fa76 	bl	80032e0 <ai_platform_runtime_get_revision>
 8002df4:	4603      	mov	r3, r0
    ai_network_report r = {
 8002df6:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8002df8:	f000 fa76 	bl	80032e8 <ai_platform_runtime_get_version>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8002e00:	4b1e      	ldr	r3, [pc, #120]	@ (8002e7c <ai_mysine_model_get_report+0xcc>)
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	2309      	movs	r3, #9
 8002e06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8002e0a:	f000 fa71 	bl	80032f0 <ai_platform_api_get_version>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8002e12:	f000 fa83 	bl	800331c <ai_platform_interface_api_get_version>
 8002e16:	4603      	mov	r3, r0
 8002e18:	633b      	str	r3, [r7, #48]	@ 0x30
    ai_network_report r = {
 8002e1a:	f240 1261 	movw	r2, #353	@ 0x161
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002e26:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <ai_mysine_model_get_report+0xd0>)
 8002e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e2a:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <ai_mysine_model_get_report+0xd4>)
 8002e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x3ba8d4aa,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8002e30:	f107 0308 	add.w	r3, r7, #8
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 faa0 	bl	800337c <ai_platform_api_get_network_report>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f083 0301 	eor.w	r3, r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <ai_mysine_model_get_report+0x9c>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e00a      	b.n	8002e62 <ai_mysine_model_get_report+0xb2>

    *report = r;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f107 0308 	add.w	r3, r7, #8
 8002e54:	2288      	movs	r2, #136	@ 0x88
 8002e56:	4619      	mov	r1, r3
 8002e58:	f002 fdd3 	bl	8005a02 <memcpy>
    return true;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <ai_mysine_model_get_report+0xb2>
  }
  return false;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3798      	adds	r7, #152	@ 0x98
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08007624 	.word	0x08007624
 8002e70:	08007634 	.word	0x08007634
 8002e74:	08007658 	.word	0x08007658
 8002e78:	08007674 	.word	0x08007674
 8002e7c:	0800768c 	.word	0x0800768c
 8002e80:	a1facade 	.word	0xa1facade
 8002e84:	3ba8d4aa 	.word	0x3ba8d4aa

08002e88 <ai_mysine_model_get_error>:


AI_API_ENTRY
ai_error ai_mysine_model_get_error(ai_handle network)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fa61 	bl	8003358 <ai_platform_network_get_error>
 8002e96:	4603      	mov	r3, r0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <ai_mysine_model_create>:


AI_API_ENTRY
ai_error ai_mysine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	2305      	movs	r3, #5
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <ai_mysine_model_create+0x28>)
 8002eb6:	6839      	ldr	r1, [r7, #0]
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fc0d 	bl	80036d8 <ai_platform_network_create>
 8002ebe:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200005f0 	.word	0x200005f0

08002ecc <ai_mysine_model_create_and_init>:


AI_API_ENTRY
ai_error ai_mysine_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b094      	sub	sp, #80	@ 0x50
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_mysine_model_create(network, AI_MYSINE_MODEL_DATA_CONFIG);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7ff ffe0 	bl	8002ea0 <ai_mysine_model_create>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8002ee4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <ai_mysine_model_create_and_init+0x24>
    return err;
 8002eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eee:	e067      	b.n	8002fc0 <ai_mysine_model_create_and_init+0xf4>
  }
  
  if (ai_mysine_model_data_params_get(&params) != true) {
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f8b3 	bl	8003060 <ai_mysine_model_data_params_get>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f083 0301 	eor.w	r3, r3, #1
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <ai_mysine_model_create_and_init+0x4c>
    err = ai_mysine_model_get_error(*network);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ffbc 	bl	8002e88 <ai_mysine_model_get_error>
 8002f10:	4603      	mov	r3, r0
 8002f12:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8002f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f16:	e053      	b.n	8002fc0 <ai_mysine_model_create_and_init+0xf4>
  }
#if defined(AI_MYSINE_MODEL_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f1e:	e012      	b.n	8002f46 <ai_mysine_model_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002f20:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8002f24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	330c      	adds	r3, #12
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f8f8 	bl	800312c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8002f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f40:	3301      	adds	r3, #1
 8002f42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <ai_mysine_model_create_and_init+0x8a>
 8002f4c:	8bfb      	ldrh	r3, [r7, #30]
 8002f4e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d3e4      	bcc.n	8002f20 <ai_mysine_model_create_and_init+0x54>
  }
#endif
#if defined(AI_MYSINE_MODEL_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002f5c:	e012      	b.n	8002f84 <ai_mysine_model_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002f5e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8002f62:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f107 0310 	add.w	r3, r7, #16
 8002f72:	3304      	adds	r3, #4
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f8d9 	bl	800312c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8002f7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <ai_mysine_model_create_and_init+0xc8>
 8002f8a:	8afb      	ldrh	r3, [r7, #22]
 8002f8c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d3e4      	bcc.n	8002f5e <ai_mysine_model_create_and_init+0x92>
  }
#endif
  if (ai_mysine_model_init(*network, &params) != true) {
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f107 0210 	add.w	r2, r7, #16
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f812 	bl	8002fc8 <ai_mysine_model_init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f083 0301 	eor.w	r3, r3, #1
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <ai_mysine_model_create_and_init+0xf2>
    err = ai_mysine_model_get_error(*network);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff67 	bl	8002e88 <ai_mysine_model_get_error>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8002fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3750      	adds	r7, #80	@ 0x50
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <ai_mysine_model_init>:


AI_API_ENTRY
ai_bool ai_mysine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8002fd2:	6839      	ldr	r1, [r7, #0]
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fbc1 	bl	800375c <ai_platform_network_init>
 8002fda:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <ai_mysine_model_init+0x22>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e026      	b.n	8003038 <ai_mysine_model_init+0x70>
  ok &= mysine_model_configure_weights(net_ctx, params);
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f7ff fe53 	bl	8002c98 <mysine_model_configure_weights>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	72fb      	strb	r3, [r7, #11]
  ok &= mysine_model_configure_activations(net_ctx, params);
 8003004:	6839      	ldr	r1, [r7, #0]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff fde6 	bl	8002bd8 <mysine_model_configure_activations>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fc6a 	bl	80038f8 <ai_platform_network_post_init>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003036:	7afb      	ldrb	r3, [r7, #11]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <ai_mysine_model_run>:


AI_API_ENTRY
ai_i32 ai_mysine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fc81 	bl	8003958 <ai_platform_network_process>
 8003056:	4603      	mov	r3, r0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <ai_mysine_model_data_params_get>:
 * @ingroup mysine_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_mysine_model_data_params_get(ai_network_params* params)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <ai_mysine_model_data_params_get+0x12>
 800306e:	2300      	movs	r3, #0
 8003070:	e016      	b.n	80030a0 <ai_mysine_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8003072:	4a0d      	ldr	r2, [pc, #52]	@ (80030a8 <ai_mysine_model_data_params_get+0x48>)
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	e892 0003 	ldmia.w	r2, {r0, r1}
 800307c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MYSINE_MODEL_DATA_ACTIVATIONS_COUNT, g_mysine_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003080:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <ai_mysine_model_data_params_get+0x4c>)
 8003082:	f107 0308 	add.w	r3, r7, #8
 8003086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800308a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MYSINE_MODEL_DATA_WEIGHTS_COUNT, g_mysine_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800308e:	f107 0210 	add.w	r2, r7, #16
 8003092:	f107 0308 	add.w	r3, r7, #8
 8003096:	4619      	mov	r1, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f8ff 	bl	800329c <ai_platform_bind_network_params>
 800309e:	4603      	mov	r3, r0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	080076b0 	.word	0x080076b0
 80030ac:	080076b8 	.word	0x080076b8

080030b0 <ai_buffer_get_size>:
 80030b0:	b378      	cbz	r0, 8003112 <ai_buffer_get_size+0x62>
 80030b2:	b410      	push	{r4}
 80030b4:	6803      	ldr	r3, [r0, #0]
 80030b6:	4a17      	ldr	r2, [pc, #92]	@ (8003114 <ai_buffer_get_size+0x64>)
 80030b8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80030bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d01e      	beq.n	8003102 <ai_buffer_get_size+0x52>
 80030c4:	6984      	ldr	r4, [r0, #24]
 80030c6:	6862      	ldr	r2, [r4, #4]
 80030c8:	7d03      	ldrb	r3, [r0, #20]
 80030ca:	6941      	ldr	r1, [r0, #20]
 80030cc:	f1a3 0301 	sub.w	r3, r3, #1
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80030da:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80030de:	da0b      	bge.n	80030f8 <ai_buffer_get_size+0x48>
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <ai_buffer_get_size+0x3a>
 80030e4:	2802      	cmp	r0, #2
 80030e6:	d007      	beq.n	80030f8 <ai_buffer_get_size+0x48>
 80030e8:	2302      	movs	r3, #2
 80030ea:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80030ee:	3301      	adds	r3, #1
 80030f0:	4298      	cmp	r0, r3
 80030f2:	fb01 f202 	mul.w	r2, r1, r2
 80030f6:	d1f3      	bne.n	80030e0 <ai_buffer_get_size+0x30>
 80030f8:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80030fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	2900      	cmp	r1, #0
 8003104:	d0de      	beq.n	80030c4 <ai_buffer_get_size+0x14>
 8003106:	6984      	ldr	r4, [r0, #24]
 8003108:	6862      	ldr	r2, [r4, #4]
 800310a:	321f      	adds	r2, #31
 800310c:	f022 021f 	bic.w	r2, r2, #31
 8003110:	e7da      	b.n	80030c8 <ai_buffer_get_size+0x18>
 8003112:	4770      	bx	lr
 8003114:	000400c0 	.word	0x000400c0

08003118 <ai_buffer_array_sane>:
 8003118:	b138      	cbz	r0, 800312a <ai_buffer_array_sane+0x12>
 800311a:	6843      	ldr	r3, [r0, #4]
 800311c:	b123      	cbz	r3, 8003128 <ai_buffer_array_sane+0x10>
 800311e:	8840      	ldrh	r0, [r0, #2]
 8003120:	3800      	subs	r0, #0
 8003122:	bf18      	it	ne
 8003124:	2001      	movne	r0, #1
 8003126:	4770      	bx	lr
 8003128:	4618      	mov	r0, r3
 800312a:	4770      	bx	lr

0800312c <ai_buffer_array_item_set_address>:
 800312c:	b150      	cbz	r0, 8003144 <ai_buffer_array_item_set_address+0x18>
 800312e:	6843      	ldr	r3, [r0, #4]
 8003130:	b14b      	cbz	r3, 8003146 <ai_buffer_array_item_set_address+0x1a>
 8003132:	8840      	ldrh	r0, [r0, #2]
 8003134:	b900      	cbnz	r0, 8003138 <ai_buffer_array_item_set_address+0xc>
 8003136:	4770      	bx	lr
 8003138:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800313c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003140:	2001      	movs	r0, #1
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	4770      	bx	lr
 8003146:	4618      	mov	r0, r3
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop

0800314c <ai_platform_get_weights_map>:
 800314c:	2a00      	cmp	r2, #0
 800314e:	d037      	beq.n	80031c0 <ai_platform_get_weights_map+0x74>
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	4604      	mov	r4, r0
 8003154:	b1a0      	cbz	r0, 8003180 <ai_platform_get_weights_map+0x34>
 8003156:	460f      	mov	r7, r1
 8003158:	b191      	cbz	r1, 8003180 <ai_platform_get_weights_map+0x34>
 800315a:	4b25      	ldr	r3, [pc, #148]	@ (80031f0 <ai_platform_get_weights_map+0xa4>)
 800315c:	6810      	ldr	r0, [r2, #0]
 800315e:	4298      	cmp	r0, r3
 8003160:	4615      	mov	r5, r2
 8003162:	d00f      	beq.n	8003184 <ai_platform_get_weights_map+0x38>
 8003164:	6855      	ldr	r5, [r2, #4]
 8003166:	b15d      	cbz	r5, 8003180 <ai_platform_get_weights_map+0x34>
 8003168:	682e      	ldr	r6, [r5, #0]
 800316a:	429e      	cmp	r6, r3
 800316c:	d02a      	beq.n	80031c4 <ai_platform_get_weights_map+0x78>
 800316e:	f1a1 0001 	sub.w	r0, r1, #1
 8003172:	6025      	str	r5, [r4, #0]
 8003174:	fab0 f080 	clz	r0, r0
 8003178:	0940      	lsrs	r0, r0, #5
 800317a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800317c:	42a7      	cmp	r7, r4
 800317e:	d034      	beq.n	80031ea <ai_platform_get_weights_map+0x9e>
 8003180:	2000      	movs	r0, #0
 8003182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003184:	1d10      	adds	r0, r2, #4
 8003186:	f7ff ffc7 	bl	8003118 <ai_buffer_array_sane>
 800318a:	2800      	cmp	r0, #0
 800318c:	d0f8      	beq.n	8003180 <ai_platform_get_weights_map+0x34>
 800318e:	88eb      	ldrh	r3, [r5, #6]
 8003190:	429f      	cmp	r7, r3
 8003192:	d1f5      	bne.n	8003180 <ai_platform_get_weights_map+0x34>
 8003194:	f04f 0c00 	mov.w	ip, #0
 8003198:	1f20      	subs	r0, r4, #4
 800319a:	46e6      	mov	lr, ip
 800319c:	68ab      	ldr	r3, [r5, #8]
 800319e:	4463      	add	r3, ip
 80031a0:	f10c 0c1c 	add.w	ip, ip, #28
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	b12b      	cbz	r3, 80031b4 <ai_platform_get_weights_map+0x68>
 80031a8:	f10e 0e01 	add.w	lr, lr, #1
 80031ac:	4577      	cmp	r7, lr
 80031ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80031b2:	d1f3      	bne.n	800319c <ai_platform_get_weights_map+0x50>
 80031b4:	eba7 000e 	sub.w	r0, r7, lr
 80031b8:	fab0 f080 	clz	r0, r0
 80031bc:	0940      	lsrs	r0, r0, #5
 80031be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c0:	2000      	movs	r0, #0
 80031c2:	4770      	bx	lr
 80031c4:	1f20      	subs	r0, r4, #4
 80031c6:	462a      	mov	r2, r5
 80031c8:	2400      	movs	r4, #0
 80031ca:	e000      	b.n	80031ce <ai_platform_get_weights_map+0x82>
 80031cc:	461c      	mov	r4, r3
 80031ce:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80031d2:	42b3      	cmp	r3, r6
 80031d4:	d0d2      	beq.n	800317c <ai_platform_get_weights_map+0x30>
 80031d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80031da:	1c63      	adds	r3, r4, #1
 80031dc:	429f      	cmp	r7, r3
 80031de:	d1f5      	bne.n	80031cc <ai_platform_get_weights_map+0x80>
 80031e0:	3402      	adds	r4, #2
 80031e2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80031e6:	42b3      	cmp	r3, r6
 80031e8:	d1ca      	bne.n	8003180 <ai_platform_get_weights_map+0x34>
 80031ea:	2001      	movs	r0, #1
 80031ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ee:	bf00      	nop
 80031f0:	a1facade 	.word	0xa1facade

080031f4 <ai_platform_get_activations_map>:
 80031f4:	2a00      	cmp	r2, #0
 80031f6:	d038      	beq.n	800326a <ai_platform_get_activations_map+0x76>
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	4604      	mov	r4, r0
 80031fc:	b1a0      	cbz	r0, 8003228 <ai_platform_get_activations_map+0x34>
 80031fe:	460f      	mov	r7, r1
 8003200:	b191      	cbz	r1, 8003228 <ai_platform_get_activations_map+0x34>
 8003202:	4b25      	ldr	r3, [pc, #148]	@ (8003298 <ai_platform_get_activations_map+0xa4>)
 8003204:	6810      	ldr	r0, [r2, #0]
 8003206:	4298      	cmp	r0, r3
 8003208:	4615      	mov	r5, r2
 800320a:	d00f      	beq.n	800322c <ai_platform_get_activations_map+0x38>
 800320c:	6a15      	ldr	r5, [r2, #32]
 800320e:	b15d      	cbz	r5, 8003228 <ai_platform_get_activations_map+0x34>
 8003210:	682e      	ldr	r6, [r5, #0]
 8003212:	429e      	cmp	r6, r3
 8003214:	d02b      	beq.n	800326e <ai_platform_get_activations_map+0x7a>
 8003216:	f1a1 0001 	sub.w	r0, r1, #1
 800321a:	6025      	str	r5, [r4, #0]
 800321c:	fab0 f080 	clz	r0, r0
 8003220:	0940      	lsrs	r0, r0, #5
 8003222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003224:	42a7      	cmp	r7, r4
 8003226:	d035      	beq.n	8003294 <ai_platform_get_activations_map+0xa0>
 8003228:	2000      	movs	r0, #0
 800322a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322c:	f102 000c 	add.w	r0, r2, #12
 8003230:	f7ff ff72 	bl	8003118 <ai_buffer_array_sane>
 8003234:	2800      	cmp	r0, #0
 8003236:	d0f7      	beq.n	8003228 <ai_platform_get_activations_map+0x34>
 8003238:	89eb      	ldrh	r3, [r5, #14]
 800323a:	429f      	cmp	r7, r3
 800323c:	d1f4      	bne.n	8003228 <ai_platform_get_activations_map+0x34>
 800323e:	f04f 0c00 	mov.w	ip, #0
 8003242:	1f20      	subs	r0, r4, #4
 8003244:	46e6      	mov	lr, ip
 8003246:	692b      	ldr	r3, [r5, #16]
 8003248:	4463      	add	r3, ip
 800324a:	f10c 0c1c 	add.w	ip, ip, #28
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	b12b      	cbz	r3, 800325e <ai_platform_get_activations_map+0x6a>
 8003252:	f10e 0e01 	add.w	lr, lr, #1
 8003256:	4577      	cmp	r7, lr
 8003258:	f840 3f04 	str.w	r3, [r0, #4]!
 800325c:	d1f3      	bne.n	8003246 <ai_platform_get_activations_map+0x52>
 800325e:	eba7 000e 	sub.w	r0, r7, lr
 8003262:	fab0 f080 	clz	r0, r0
 8003266:	0940      	lsrs	r0, r0, #5
 8003268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800326a:	2000      	movs	r0, #0
 800326c:	4770      	bx	lr
 800326e:	1f20      	subs	r0, r4, #4
 8003270:	462a      	mov	r2, r5
 8003272:	2400      	movs	r4, #0
 8003274:	e000      	b.n	8003278 <ai_platform_get_activations_map+0x84>
 8003276:	461c      	mov	r4, r3
 8003278:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800327c:	42b3      	cmp	r3, r6
 800327e:	d0d1      	beq.n	8003224 <ai_platform_get_activations_map+0x30>
 8003280:	f840 3f04 	str.w	r3, [r0, #4]!
 8003284:	1c63      	adds	r3, r4, #1
 8003286:	429f      	cmp	r7, r3
 8003288:	d1f5      	bne.n	8003276 <ai_platform_get_activations_map+0x82>
 800328a:	3402      	adds	r4, #2
 800328c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003290:	42b3      	cmp	r3, r6
 8003292:	d1c9      	bne.n	8003228 <ai_platform_get_activations_map+0x34>
 8003294:	2001      	movs	r0, #1
 8003296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003298:	a1facade 	.word	0xa1facade

0800329c <ai_platform_bind_network_params>:
 800329c:	b1a0      	cbz	r0, 80032c8 <ai_platform_bind_network_params+0x2c>
 800329e:	b1b1      	cbz	r1, 80032ce <ai_platform_bind_network_params+0x32>
 80032a0:	b1c2      	cbz	r2, 80032d4 <ai_platform_bind_network_params+0x38>
 80032a2:	b410      	push	{r4}
 80032a4:	4603      	mov	r3, r0
 80032a6:	4c0d      	ldr	r4, [pc, #52]	@ (80032dc <ai_platform_bind_network_params+0x40>)
 80032a8:	f843 4b04 	str.w	r4, [r3], #4
 80032ac:	f100 0c0c 	add.w	ip, r0, #12
 80032b0:	c903      	ldmia	r1, {r0, r1}
 80032b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80032b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032ba:	e88c 0003 	stmia.w	ip, {r0, r1}
 80032be:	2301      	movs	r3, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	4603      	mov	r3, r0
 80032ca:	4618      	mov	r0, r3
 80032cc:	4770      	bx	lr
 80032ce:	460b      	mov	r3, r1
 80032d0:	4618      	mov	r0, r3
 80032d2:	4770      	bx	lr
 80032d4:	4613      	mov	r3, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	a1facade 	.word	0xa1facade

080032e0 <ai_platform_runtime_get_revision>:
 80032e0:	4800      	ldr	r0, [pc, #0]	@ (80032e4 <ai_platform_runtime_get_revision+0x4>)
 80032e2:	4770      	bx	lr
 80032e4:	08007c28 	.word	0x08007c28

080032e8 <ai_platform_runtime_get_version>:
 80032e8:	b082      	sub	sp, #8
 80032ea:	2009      	movs	r0, #9
 80032ec:	b002      	add	sp, #8
 80032ee:	4770      	bx	lr

080032f0 <ai_platform_api_get_version>:
 80032f0:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <ai_platform_api_get_version+0x28>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2000      	movs	r0, #0
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	f362 0007 	bfi	r0, r2, #0, #8
 80032fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003300:	f362 200f 	bfi	r0, r2, #8, #8
 8003304:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003308:	f362 4017 	bfi	r0, r2, #16, #8
 800330c:	0e1b      	lsrs	r3, r3, #24
 800330e:	b082      	sub	sp, #8
 8003310:	f363 601f 	bfi	r0, r3, #24, #8
 8003314:	b002      	add	sp, #8
 8003316:	4770      	bx	lr
 8003318:	08007c2c 	.word	0x08007c2c

0800331c <ai_platform_interface_api_get_version>:
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <ai_platform_interface_api_get_version+0x28>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2000      	movs	r0, #0
 8003322:	b2da      	uxtb	r2, r3
 8003324:	f362 0007 	bfi	r0, r2, #0, #8
 8003328:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800332c:	f362 200f 	bfi	r0, r2, #8, #8
 8003330:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003334:	f362 4017 	bfi	r0, r2, #16, #8
 8003338:	0e1b      	lsrs	r3, r3, #24
 800333a:	b082      	sub	sp, #8
 800333c:	f363 601f 	bfi	r0, r3, #24, #8
 8003340:	b002      	add	sp, #8
 8003342:	4770      	bx	lr
 8003344:	08007c30 	.word	0x08007c30

08003348 <ai_platform_context_acquire>:
 8003348:	6802      	ldr	r2, [r0, #0]
 800334a:	4b02      	ldr	r3, [pc, #8]	@ (8003354 <ai_platform_context_acquire+0xc>)
 800334c:	4393      	bics	r3, r2
 800334e:	bf18      	it	ne
 8003350:	2000      	movne	r0, #0
 8003352:	4770      	bx	lr
 8003354:	a1c00100 	.word	0xa1c00100

08003358 <ai_platform_network_get_error>:
 8003358:	4b04      	ldr	r3, [pc, #16]	@ (800336c <ai_platform_network_get_error+0x14>)
 800335a:	6802      	ldr	r2, [r0, #0]
 800335c:	4393      	bics	r3, r2
 800335e:	d102      	bne.n	8003366 <ai_platform_network_get_error+0xe>
 8003360:	300c      	adds	r0, #12
 8003362:	f000 bd3b 	b.w	8003ddc <core_get_error>
 8003366:	f241 0010 	movw	r0, #4112	@ 0x1010
 800336a:	4770      	bx	lr
 800336c:	a1c00100 	.word	0xa1c00100

08003370 <ai_platform_network_set_error>:
 8003370:	b110      	cbz	r0, 8003378 <ai_platform_network_set_error+0x8>
 8003372:	300c      	adds	r0, #12
 8003374:	f000 bd38 	b.w	8003de8 <core_set_error>
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop

0800337c <ai_platform_api_get_network_report>:
 800337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003380:	4ba4      	ldr	r3, [pc, #656]	@ (8003614 <ai_platform_api_get_network_report+0x298>)
 8003382:	6802      	ldr	r2, [r0, #0]
 8003384:	b089      	sub	sp, #36	@ 0x24
 8003386:	4393      	bics	r3, r2
 8003388:	9002      	str	r0, [sp, #8]
 800338a:	9103      	str	r1, [sp, #12]
 800338c:	d164      	bne.n	8003458 <ai_platform_api_get_network_report+0xdc>
 800338e:	2900      	cmp	r1, #0
 8003390:	d075      	beq.n	800347e <ai_platform_api_get_network_report+0x102>
 8003392:	2400      	movs	r4, #0
 8003394:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8003396:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003398:	b143      	cbz	r3, 80033ac <ai_platform_api_get_network_report+0x30>
 800339a:	3401      	adds	r4, #1
 800339c:	67cc      	str	r4, [r1, #124]	@ 0x7c
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d003      	beq.n	80033ac <ai_platform_api_get_network_report+0x30>
 80033a4:	b112      	cbz	r2, 80033ac <ai_platform_api_get_network_report+0x30>
 80033a6:	4613      	mov	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f6      	bne.n	800339a <ai_platform_api_get_network_report+0x1e>
 80033ac:	2c00      	cmp	r4, #0
 80033ae:	f000 812a 	beq.w	8003606 <ai_platform_api_get_network_report+0x28a>
 80033b2:	9a02      	ldr	r2, [sp, #8]
 80033b4:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d053      	beq.n	8003462 <ai_platform_api_get_network_report+0xe6>
 80033ba:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80033be:	f1ba 0f00 	cmp.w	sl, #0
 80033c2:	d04e      	beq.n	8003462 <ai_platform_api_get_network_report+0xe6>
 80033c4:	f04f 0b00 	mov.w	fp, #0
 80033c8:	465d      	mov	r5, fp
 80033ca:	e015      	b.n	80033f8 <ai_platform_api_get_network_report+0x7c>
 80033cc:	00e9      	lsls	r1, r5, #3
 80033ce:	2201      	movs	r2, #1
 80033d0:	507a      	str	r2, [r7, r1]
 80033d2:	69b1      	ldr	r1, [r6, #24]
 80033d4:	6849      	ldr	r1, [r1, #4]
 80033d6:	60a3      	str	r3, [r4, #8]
 80033d8:	f04f 0201 	mov.w	r2, #1
 80033dc:	7522      	strb	r2, [r4, #20]
 80033de:	6963      	ldr	r3, [r4, #20]
 80033e0:	6121      	str	r1, [r4, #16]
 80033e2:	f369 231f 	bfi	r3, r9, #8, #24
 80033e6:	e9c4 0c00 	strd	r0, ip, [r4]
 80033ea:	e9c4 3805 	strd	r3, r8, [r4, #20]
 80033ee:	2200      	movs	r2, #0
 80033f0:	60e2      	str	r2, [r4, #12]
 80033f2:	3501      	adds	r5, #1
 80033f4:	f10b 0b1c 	add.w	fp, fp, #28
 80033f8:	f8ba 3000 	ldrh.w	r3, [sl]
 80033fc:	42ab      	cmp	r3, r5
 80033fe:	b2aa      	uxth	r2, r5
 8003400:	d942      	bls.n	8003488 <ai_platform_api_get_network_report+0x10c>
 8003402:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d03e      	beq.n	8003488 <ai_platform_api_get_network_report+0x10c>
 800340a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800340e:	2e00      	cmp	r6, #0
 8003410:	d03a      	beq.n	8003488 <ai_platform_api_get_network_report+0x10c>
 8003412:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003416:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800341a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800341e:	69b3      	ldr	r3, [r6, #24]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	68b3      	ldr	r3, [r6, #8]
 8003424:	00ea      	lsls	r2, r5, #3
 8003426:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800342a:	9201      	str	r2, [sp, #4]
 800342c:	f001 fa68 	bl	8004900 <ai_array_to_buffer_fmt>
 8003430:	69b1      	ldr	r1, [r6, #24]
 8003432:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8003436:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800343a:	445c      	add	r4, fp
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0c9      	beq.n	80033d4 <ai_platform_api_get_network_report+0x58>
 8003440:	2100      	movs	r1, #0
 8003442:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003446:	6831      	ldr	r1, [r6, #0]
 8003448:	6059      	str	r1, [r3, #4]
 800344a:	b111      	cbz	r1, 8003452 <ai_platform_api_get_network_report+0xd6>
 800344c:	8849      	ldrh	r1, [r1, #2]
 800344e:	2900      	cmp	r1, #0
 8003450:	d1bc      	bne.n	80033cc <ai_platform_api_get_network_report+0x50>
 8003452:	69b1      	ldr	r1, [r6, #24]
 8003454:	2300      	movs	r3, #0
 8003456:	e7bd      	b.n	80033d4 <ai_platform_api_get_network_report+0x58>
 8003458:	2400      	movs	r4, #0
 800345a:	4620      	mov	r0, r4
 800345c:	b009      	add	sp, #36	@ 0x24
 800345e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003462:	9b03      	ldr	r3, [sp, #12]
 8003464:	9802      	ldr	r0, [sp, #8]
 8003466:	2400      	movs	r4, #0
 8003468:	63dc      	str	r4, [r3, #60]	@ 0x3c
 800346a:	871c      	strh	r4, [r3, #56]	@ 0x38
 800346c:	2218      	movs	r2, #24
 800346e:	2112      	movs	r1, #18
 8003470:	300c      	adds	r0, #12
 8003472:	f000 fcb9 	bl	8003de8 <core_set_error>
 8003476:	4620      	mov	r0, r4
 8003478:	b009      	add	sp, #36	@ 0x24
 800347a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347e:	460c      	mov	r4, r1
 8003480:	4620      	mov	r0, r4
 8003482:	b009      	add	sp, #36	@ 0x24
 8003484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003488:	2a00      	cmp	r2, #0
 800348a:	d0ea      	beq.n	8003462 <ai_platform_api_get_network_report+0xe6>
 800348c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003490:	9903      	ldr	r1, [sp, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8003496:	9b02      	ldr	r3, [sp, #8]
 8003498:	870a      	strh	r2, [r1, #56]	@ 0x38
 800349a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800349c:	2b01      	cmp	r3, #1
 800349e:	f240 80a4 	bls.w	80035ea <ai_platform_api_get_network_report+0x26e>
 80034a2:	9b02      	ldr	r3, [sp, #8]
 80034a4:	f04f 0900 	mov.w	r9, #0
 80034a8:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 80034ac:	464d      	mov	r5, r9
 80034ae:	46cb      	mov	fp, r9
 80034b0:	e016      	b.n	80034e0 <ai_platform_api_get_network_report+0x164>
 80034b2:	2201      	movs	r2, #1
 80034b4:	f84a 200e 	str.w	r2, [sl, lr]
 80034b8:	69b1      	ldr	r1, [r6, #24]
 80034ba:	684a      	ldr	r2, [r1, #4]
 80034bc:	60a3      	str	r3, [r4, #8]
 80034be:	9b01      	ldr	r3, [sp, #4]
 80034c0:	61a3      	str	r3, [r4, #24]
 80034c2:	f04f 0301 	mov.w	r3, #1
 80034c6:	7523      	strb	r3, [r4, #20]
 80034c8:	6963      	ldr	r3, [r4, #20]
 80034ca:	6122      	str	r2, [r4, #16]
 80034cc:	e9c4 0c00 	strd	r0, ip, [r4]
 80034d0:	f367 231f 	bfi	r3, r7, #8, #24
 80034d4:	f8c4 b00c 	str.w	fp, [r4, #12]
 80034d8:	3501      	adds	r5, #1
 80034da:	f109 091c 	add.w	r9, r9, #28
 80034de:	6163      	str	r3, [r4, #20]
 80034e0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80034e4:	42ab      	cmp	r3, r5
 80034e6:	b2aa      	uxth	r2, r5
 80034e8:	d927      	bls.n	800353a <ai_platform_api_get_network_report+0x1be>
 80034ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80034ee:	b323      	cbz	r3, 800353a <ai_platform_api_get_network_report+0x1be>
 80034f0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80034f4:	b30e      	cbz	r6, 800353a <ai_platform_api_get_network_report+0x1be>
 80034f6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80034fa:	68b7      	ldr	r7, [r6, #8]
 80034fc:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 8003500:	69b3      	ldr	r3, [r6, #24]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	68f3      	ldr	r3, [r6, #12]
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	f001 f9fa 	bl	8004900 <ai_array_to_buffer_fmt>
 800350c:	69b1      	ldr	r1, [r6, #24]
 800350e:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 8003512:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003516:	444c      	add	r4, r9
 8003518:	f3c7 2717 	ubfx	r7, r7, #8, #24
 800351c:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ca      	beq.n	80034ba <ai_platform_api_get_network_report+0x13e>
 8003524:	f84a b035 	str.w	fp, [sl, r5, lsl #3]
 8003528:	6831      	ldr	r1, [r6, #0]
 800352a:	6059      	str	r1, [r3, #4]
 800352c:	b111      	cbz	r1, 8003534 <ai_platform_api_get_network_report+0x1b8>
 800352e:	8849      	ldrh	r1, [r1, #2]
 8003530:	2900      	cmp	r1, #0
 8003532:	d1be      	bne.n	80034b2 <ai_platform_api_get_network_report+0x136>
 8003534:	69b1      	ldr	r1, [r6, #24]
 8003536:	2300      	movs	r3, #0
 8003538:	e7bf      	b.n	80034ba <ai_platform_api_get_network_report+0x13e>
 800353a:	2a00      	cmp	r2, #0
 800353c:	d055      	beq.n	80035ea <ai_platform_api_get_network_report+0x26e>
 800353e:	9902      	ldr	r1, [sp, #8]
 8003540:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003544:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 8003548:	9903      	ldr	r1, [sp, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	640b      	str	r3, [r1, #64]	@ 0x40
 800354e:	874a      	strh	r2, [r1, #58]	@ 0x3a
 8003550:	4630      	mov	r0, r6
 8003552:	f7ff fde1 	bl	8003118 <ai_buffer_array_sane>
 8003556:	4604      	mov	r4, r0
 8003558:	b968      	cbnz	r0, 8003576 <ai_platform_api_get_network_report+0x1fa>
 800355a:	4630      	mov	r0, r6
 800355c:	f7ff fddc 	bl	8003118 <ai_buffer_array_sane>
 8003560:	b148      	cbz	r0, 8003576 <ai_platform_api_get_network_report+0x1fa>
 8003562:	9b02      	ldr	r3, [sp, #8]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b133      	cbz	r3, 8003576 <ai_platform_api_get_network_report+0x1fa>
 8003568:	9802      	ldr	r0, [sp, #8]
 800356a:	2213      	movs	r2, #19
 800356c:	2111      	movs	r1, #17
 800356e:	300c      	adds	r0, #12
 8003570:	f000 fc3a 	bl	8003de8 <core_set_error>
 8003574:	e771      	b.n	800345a <ai_platform_api_get_network_report+0xde>
 8003576:	9d02      	ldr	r5, [sp, #8]
 8003578:	f105 0720 	add.w	r7, r5, #32
 800357c:	4638      	mov	r0, r7
 800357e:	f7ff fdcb 	bl	8003118 <ai_buffer_array_sane>
 8003582:	4604      	mov	r4, r0
 8003584:	b960      	cbnz	r0, 80035a0 <ai_platform_api_get_network_report+0x224>
 8003586:	4638      	mov	r0, r7
 8003588:	f7ff fdc6 	bl	8003118 <ai_buffer_array_sane>
 800358c:	b140      	cbz	r0, 80035a0 <ai_platform_api_get_network_report+0x224>
 800358e:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8003590:	b133      	cbz	r3, 80035a0 <ai_platform_api_get_network_report+0x224>
 8003592:	9802      	ldr	r0, [sp, #8]
 8003594:	2212      	movs	r2, #18
 8003596:	2111      	movs	r1, #17
 8003598:	300c      	adds	r0, #12
 800359a:	f000 fc25 	bl	8003de8 <core_set_error>
 800359e:	e75c      	b.n	800345a <ai_platform_api_get_network_report+0xde>
 80035a0:	9a02      	ldr	r2, [sp, #8]
 80035a2:	9c03      	ldr	r4, [sp, #12]
 80035a4:	6853      	ldr	r3, [r2, #4]
 80035a6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 80035aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003618 <ai_platform_api_get_network_report+0x29c>)
 80035ac:	6123      	str	r3, [r4, #16]
 80035ae:	2309      	movs	r3, #9
 80035b0:	6163      	str	r3, [r4, #20]
 80035b2:	f240 2c01 	movw	ip, #513	@ 0x201
 80035b6:	f240 5301 	movw	r3, #1281	@ 0x501
 80035ba:	e9c4 c309 	strd	ip, r3, [r4, #36]	@ 0x24
 80035be:	6890      	ldr	r0, [r2, #8]
 80035c0:	f001 fa4e 	bl	8004a60 <ai_platform_version_get>
 80035c4:	4b15      	ldr	r3, [pc, #84]	@ (800361c <ai_platform_api_get_network_report+0x2a0>)
 80035c6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80035c8:	6220      	str	r0, [r4, #32]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d128      	bne.n	8003620 <ai_platform_api_get_network_report+0x2a4>
 80035ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 80035d2:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80035d6:	e882 0003 	stmia.w	r2, {r0, r1}
 80035da:	e897 0003 	ldmia.w	r7, {r0, r1}
 80035de:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80035e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80035e6:	2401      	movs	r4, #1
 80035e8:	e737      	b.n	800345a <ai_platform_api_get_network_report+0xde>
 80035ea:	9b03      	ldr	r3, [sp, #12]
 80035ec:	9802      	ldr	r0, [sp, #8]
 80035ee:	2400      	movs	r4, #0
 80035f0:	641c      	str	r4, [r3, #64]	@ 0x40
 80035f2:	875c      	strh	r4, [r3, #58]	@ 0x3a
 80035f4:	2218      	movs	r2, #24
 80035f6:	2113      	movs	r1, #19
 80035f8:	300c      	adds	r0, #12
 80035fa:	f000 fbf5 	bl	8003de8 <core_set_error>
 80035fe:	4620      	mov	r0, r4
 8003600:	b009      	add	sp, #36	@ 0x24
 8003602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003606:	9802      	ldr	r0, [sp, #8]
 8003608:	2218      	movs	r2, #24
 800360a:	2111      	movs	r1, #17
 800360c:	300c      	adds	r0, #12
 800360e:	f000 fbeb 	bl	8003de8 <core_set_error>
 8003612:	e722      	b.n	800345a <ai_platform_api_get_network_report+0xde>
 8003614:	a1c00100 	.word	0xa1c00100
 8003618:	08007c28 	.word	0x08007c28
 800361c:	a1facade 	.word	0xa1facade
 8003620:	9903      	ldr	r1, [sp, #12]
 8003622:	4b2b      	ldr	r3, [pc, #172]	@ (80036d0 <ai_platform_api_get_network_report+0x354>)
 8003624:	2200      	movs	r2, #0
 8003626:	e9c1 2212 	strd	r2, r2, [r1, #72]	@ 0x48
 800362a:	e9c1 2214 	strd	r2, r2, [r1, #80]	@ 0x50
 800362e:	4a29      	ldr	r2, [pc, #164]	@ (80036d4 <ai_platform_api_get_network_report+0x358>)
 8003630:	644a      	str	r2, [r1, #68]	@ 0x44
 8003632:	f10d 0c10 	add.w	ip, sp, #16
 8003636:	f240 4201 	movw	r2, #1025	@ 0x401
 800363a:	f8c1 c05c 	str.w	ip, [r1, #92]	@ 0x5c
 800363e:	658a      	str	r2, [r1, #88]	@ 0x58
 8003640:	f101 0844 	add.w	r8, r1, #68	@ 0x44
 8003644:	f101 0960 	add.w	r9, r1, #96	@ 0x60
 8003648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800364a:	4645      	mov	r5, r8
 800364c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8003650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003652:	464c      	mov	r4, r9
 8003654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800365a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800365e:	4630      	mov	r0, r6
 8003660:	f7ff fd5a 	bl	8003118 <ai_buffer_array_sane>
 8003664:	b998      	cbnz	r0, 800368e <ai_platform_api_get_network_report+0x312>
 8003666:	4638      	mov	r0, r7
 8003668:	f7ff fd56 	bl	8003118 <ai_buffer_array_sane>
 800366c:	b908      	cbnz	r0, 8003672 <ai_platform_api_get_network_report+0x2f6>
 800366e:	2401      	movs	r4, #1
 8003670:	e6f3      	b.n	800345a <ai_platform_api_get_network_report+0xde>
 8003672:	4638      	mov	r0, r7
 8003674:	f7ff fd50 	bl	8003118 <ai_buffer_array_sane>
 8003678:	b1b8      	cbz	r0, 80036aa <ai_platform_api_get_network_report+0x32e>
 800367a:	9b02      	ldr	r3, [sp, #8]
 800367c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800367e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003680:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003684:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003688:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800368c:	e7ef      	b.n	800366e <ai_platform_api_get_network_report+0x2f2>
 800368e:	4630      	mov	r0, r6
 8003690:	f7ff fd42 	bl	8003118 <ai_buffer_array_sane>
 8003694:	b190      	cbz	r0, 80036bc <ai_platform_api_get_network_report+0x340>
 8003696:	9b02      	ldr	r3, [sp, #8]
 8003698:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800369a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800369c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80036a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80036a4:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 80036a8:	e7dd      	b.n	8003666 <ai_platform_api_get_network_report+0x2ea>
 80036aa:	4604      	mov	r4, r0
 80036ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ae:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80036b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80036b6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80036ba:	deff      	udf	#255	@ 0xff
 80036bc:	4604      	mov	r4, r0
 80036be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c0:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80036c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80036c8:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 80036cc:	deff      	udf	#255	@ 0xff
 80036ce:	bf00      	nop
 80036d0:	080076c0 	.word	0x080076c0
 80036d4:	00040440 	.word	0x00040440

080036d8 <ai_platform_network_create>:
 80036d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036dc:	b083      	sub	sp, #12
 80036de:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 80036e2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80036e6:	b320      	cbz	r0, 8003732 <ai_platform_network_create+0x5a>
 80036e8:	6002      	str	r2, [r0, #0]
 80036ea:	4616      	mov	r6, r2
 80036ec:	461f      	mov	r7, r3
 80036ee:	4604      	mov	r4, r0
 80036f0:	f000 fb72 	bl	8003dd8 <core_init>
 80036f4:	b970      	cbnz	r0, 8003714 <ai_platform_network_create+0x3c>
 80036f6:	2530      	movs	r5, #48	@ 0x30
 80036f8:	2300      	movs	r3, #0
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	2410      	movs	r4, #16
 80036fe:	4642      	mov	r2, r8
 8003700:	4649      	mov	r1, r9
 8003702:	4638      	mov	r0, r7
 8003704:	f001 f9a6 	bl	8004a54 <ai_version_get>
 8003708:	60b0      	str	r0, [r6, #8]
 800370a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800370e:	b003      	add	sp, #12
 8003710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003714:	2200      	movs	r2, #0
 8003716:	4649      	mov	r1, r9
 8003718:	4638      	mov	r0, r7
 800371a:	f001 f99b 	bl	8004a54 <ai_version_get>
 800371e:	2200      	movs	r2, #0
 8003720:	4605      	mov	r5, r0
 8003722:	2105      	movs	r1, #5
 8003724:	2001      	movs	r0, #1
 8003726:	f001 f995 	bl	8004a54 <ai_version_get>
 800372a:	4285      	cmp	r5, r0
 800372c:	d008      	beq.n	8003740 <ai_platform_network_create+0x68>
 800372e:	2501      	movs	r5, #1
 8003730:	e7e2      	b.n	80036f8 <ai_platform_network_create+0x20>
 8003732:	2510      	movs	r5, #16
 8003734:	462c      	mov	r4, r5
 8003736:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800373a:	b003      	add	sp, #12
 800373c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <ai_platform_network_create+0x80>)
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	a801      	add	r0, sp, #4
 8003746:	f000 fb5b 	bl	8003e00 <ai_check_custom_types>
 800374a:	b110      	cbz	r0, 8003752 <ai_platform_network_create+0x7a>
 800374c:	2400      	movs	r4, #0
 800374e:	4625      	mov	r5, r4
 8003750:	e7d5      	b.n	80036fe <ai_platform_network_create+0x26>
 8003752:	2502      	movs	r5, #2
 8003754:	e7d0      	b.n	80036f8 <ai_platform_network_create+0x20>
 8003756:	bf00      	nop
 8003758:	84048403 	.word	0x84048403

0800375c <ai_platform_network_init>:
 800375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003760:	4b63      	ldr	r3, [pc, #396]	@ (80038f0 <ai_platform_network_init+0x194>)
 8003762:	6802      	ldr	r2, [r0, #0]
 8003764:	4393      	bics	r3, r2
 8003766:	b083      	sub	sp, #12
 8003768:	d156      	bne.n	8003818 <ai_platform_network_init+0xbc>
 800376a:	4604      	mov	r4, r0
 800376c:	460f      	mov	r7, r1
 800376e:	2900      	cmp	r1, #0
 8003770:	f000 80a9 	beq.w	80038c6 <ai_platform_network_init+0x16a>
 8003774:	680b      	ldr	r3, [r1, #0]
 8003776:	495f      	ldr	r1, [pc, #380]	@ (80038f4 <ai_platform_network_init+0x198>)
 8003778:	428b      	cmp	r3, r1
 800377a:	d113      	bne.n	80037a4 <ai_platform_network_init+0x48>
 800377c:	495c      	ldr	r1, [pc, #368]	@ (80038f0 <ai_platform_network_init+0x194>)
 800377e:	89bd      	ldrh	r5, [r7, #12]
 8003780:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8003784:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8003788:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 800378c:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8003790:	68be      	ldr	r6, [r7, #8]
 8003792:	428a      	cmp	r2, r1
 8003794:	d02c      	beq.n	80037f0 <ai_platform_network_init+0x94>
 8003796:	2303      	movs	r3, #3
 8003798:	6123      	str	r3, [r4, #16]
 800379a:	4627      	mov	r7, r4
 800379c:	4638      	mov	r0, r7
 800379e:	b003      	add	sp, #12
 80037a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a4:	2101      	movs	r1, #1
 80037a6:	4638      	mov	r0, r7
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80037ae:	f7ff fc7f 	bl	80030b0 <ai_buffer_get_size>
 80037b2:	f107 081c 	add.w	r8, r7, #28
 80037b6:	4605      	mov	r5, r0
 80037b8:	2101      	movs	r1, #1
 80037ba:	4640      	mov	r0, r8
 80037bc:	463e      	mov	r6, r7
 80037be:	6a3f      	ldr	r7, [r7, #32]
 80037c0:	f7ff fc76 	bl	80030b0 <ai_buffer_get_size>
 80037c4:	2d00      	cmp	r5, #0
 80037c6:	9b01      	ldr	r3, [sp, #4]
 80037c8:	bf0a      	itet	eq
 80037ca:	46a9      	moveq	r9, r5
 80037cc:	f04f 0901 	movne.w	r9, #1
 80037d0:	462e      	moveq	r6, r5
 80037d2:	b330      	cbz	r0, 8003822 <ai_platform_network_init+0xc6>
 80037d4:	2f00      	cmp	r7, #0
 80037d6:	f000 8084 	beq.w	80038e2 <ai_platform_network_init+0x186>
 80037da:	f04f 0a01 	mov.w	sl, #1
 80037de:	f1bb 0f00 	cmp.w	fp, #0
 80037e2:	d021      	beq.n	8003828 <ai_platform_network_init+0xcc>
 80037e4:	2500      	movs	r5, #0
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	4941      	ldr	r1, [pc, #260]	@ (80038f0 <ai_platform_network_init+0x194>)
 80037ea:	428a      	cmp	r2, r1
 80037ec:	46ab      	mov	fp, r5
 80037ee:	d1d2      	bne.n	8003796 <ai_platform_network_init+0x3a>
 80037f0:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 80037f2:	454a      	cmp	r2, r9
 80037f4:	4a3f      	ldr	r2, [pc, #252]	@ (80038f4 <ai_platform_network_init+0x198>)
 80037f6:	d221      	bcs.n	800383c <ai_platform_network_init+0xe0>
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d15c      	bne.n	80038b6 <ai_platform_network_init+0x15a>
 80037fc:	6266      	str	r6, [r4, #36]	@ 0x24
 80037fe:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8003802:	f8a4 b020 	strh.w	fp, [r4, #32]
 8003806:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800380a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 800380e:	8525      	strh	r5, [r4, #40]	@ 0x28
 8003810:	4620      	mov	r0, r4
 8003812:	f000 fb1f 	bl	8003e54 <ai_layers_init_all>
 8003816:	e7be      	b.n	8003796 <ai_platform_network_init+0x3a>
 8003818:	2700      	movs	r7, #0
 800381a:	4638      	mov	r0, r7
 800381c:	b003      	add	sp, #12
 800381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003822:	4680      	mov	r8, r0
 8003824:	4682      	mov	sl, r0
 8003826:	e7da      	b.n	80037de <ai_platform_network_init+0x82>
 8003828:	2d00      	cmp	r5, #0
 800382a:	d0dc      	beq.n	80037e6 <ai_platform_network_init+0x8a>
 800382c:	2212      	movs	r2, #18
 800382e:	2110      	movs	r1, #16
 8003830:	f104 000c 	add.w	r0, r4, #12
 8003834:	f000 fad8 	bl	8003de8 <core_set_error>
 8003838:	465f      	mov	r7, fp
 800383a:	e7af      	b.n	800379c <ai_platform_network_init+0x40>
 800383c:	4293      	cmp	r3, r2
 800383e:	d0dd      	beq.n	80037fc <ai_platform_network_init+0xa0>
 8003840:	f1b9 0f00 	cmp.w	r9, #0
 8003844:	d018      	beq.n	8003878 <ai_platform_network_init+0x11c>
 8003846:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003850:	2700      	movs	r7, #0
 8003852:	4699      	mov	r9, r3
 8003854:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003856:	eb06 0e07 	add.w	lr, r6, r7
 800385a:	eb03 0c07 	add.w	ip, r3, r7
 800385e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003862:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003866:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800386a:	371c      	adds	r7, #28
 800386c:	45b9      	cmp	r9, r7
 800386e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003872:	d1ef      	bne.n	8003854 <ai_platform_network_init+0xf8>
 8003874:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003878:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800387a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800387e:	4553      	cmp	r3, sl
 8003880:	f8a4 b020 	strh.w	fp, [r4, #32]
 8003884:	d325      	bcc.n	80038d2 <ai_platform_network_init+0x176>
 8003886:	f1ba 0f00 	cmp.w	sl, #0
 800388a:	d0be      	beq.n	800380a <ai_platform_network_init+0xae>
 800388c:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8003890:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003894:	f04f 0c00 	mov.w	ip, #0
 8003898:	eb08 070c 	add.w	r7, r8, ip
 800389c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800389e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038a0:	4466      	add	r6, ip
 80038a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80038a4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80038a8:	f10c 0c1c 	add.w	ip, ip, #28
 80038ac:	45f4      	cmp	ip, lr
 80038ae:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80038b2:	d1f1      	bne.n	8003898 <ai_platform_network_init+0x13c>
 80038b4:	e7a9      	b.n	800380a <ai_platform_network_init+0xae>
 80038b6:	2212      	movs	r2, #18
 80038b8:	2116      	movs	r1, #22
 80038ba:	f104 000c 	add.w	r0, r4, #12
 80038be:	f000 fa93 	bl	8003de8 <core_set_error>
 80038c2:	2700      	movs	r7, #0
 80038c4:	e76a      	b.n	800379c <ai_platform_network_init+0x40>
 80038c6:	2211      	movs	r2, #17
 80038c8:	2110      	movs	r1, #16
 80038ca:	300c      	adds	r0, #12
 80038cc:	f000 fa8c 	bl	8003de8 <core_set_error>
 80038d0:	e764      	b.n	800379c <ai_platform_network_init+0x40>
 80038d2:	2213      	movs	r2, #19
 80038d4:	2116      	movs	r1, #22
 80038d6:	f104 000c 	add.w	r0, r4, #12
 80038da:	f000 fa85 	bl	8003de8 <core_set_error>
 80038de:	2700      	movs	r7, #0
 80038e0:	e75c      	b.n	800379c <ai_platform_network_init+0x40>
 80038e2:	2213      	movs	r2, #19
 80038e4:	2110      	movs	r1, #16
 80038e6:	f104 000c 	add.w	r0, r4, #12
 80038ea:	f000 fa7d 	bl	8003de8 <core_set_error>
 80038ee:	e755      	b.n	800379c <ai_platform_network_init+0x40>
 80038f0:	a1c00100 	.word	0xa1c00100
 80038f4:	a1facade 	.word	0xa1facade

080038f8 <ai_platform_network_post_init>:
 80038f8:	b538      	push	{r3, r4, r5, lr}
 80038fa:	4b16      	ldr	r3, [pc, #88]	@ (8003954 <ai_platform_network_post_init+0x5c>)
 80038fc:	6802      	ldr	r2, [r0, #0]
 80038fe:	ea02 0103 	and.w	r1, r2, r3
 8003902:	4393      	bics	r3, r2
 8003904:	d108      	bne.n	8003918 <ai_platform_network_post_init+0x20>
 8003906:	6903      	ldr	r3, [r0, #16]
 8003908:	f013 0502 	ands.w	r5, r3, #2
 800390c:	4604      	mov	r4, r0
 800390e:	d005      	beq.n	800391c <ai_platform_network_post_init+0x24>
 8003910:	428a      	cmp	r2, r1
 8003912:	d00a      	beq.n	800392a <ai_platform_network_post_init+0x32>
 8003914:	2001      	movs	r0, #1
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	2000      	movs	r0, #0
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	2210      	movs	r2, #16
 800391e:	2111      	movs	r1, #17
 8003920:	300c      	adds	r0, #12
 8003922:	f000 fa61 	bl	8003de8 <core_set_error>
 8003926:	4628      	mov	r0, r5
 8003928:	bd38      	pop	{r3, r4, r5, pc}
 800392a:	f000 faa1 	bl	8003e70 <ai_layers_post_init_all>
 800392e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ef      	beq.n	8003914 <ai_platform_network_post_init+0x1c>
 8003934:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8003936:	e008      	b.n	800394a <ai_platform_network_post_init+0x52>
 8003938:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800393c:	4798      	blx	r3
 800393e:	692b      	ldr	r3, [r5, #16]
 8003940:	42ab      	cmp	r3, r5
 8003942:	d0e7      	beq.n	8003914 <ai_platform_network_post_init+0x1c>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0e5      	beq.n	8003914 <ai_platform_network_post_init+0x1c>
 8003948:	461d      	mov	r5, r3
 800394a:	4629      	mov	r1, r5
 800394c:	2000      	movs	r0, #0
 800394e:	2d00      	cmp	r5, #0
 8003950:	d1f2      	bne.n	8003938 <ai_platform_network_post_init+0x40>
 8003952:	e7df      	b.n	8003914 <ai_platform_network_post_init+0x1c>
 8003954:	a1c00100 	.word	0xa1c00100

08003958 <ai_platform_network_process>:
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	4bb5      	ldr	r3, [pc, #724]	@ (8003c34 <ai_platform_network_process+0x2dc>)
 800395e:	4605      	mov	r5, r0
 8003960:	6800      	ldr	r0, [r0, #0]
 8003962:	b085      	sub	sp, #20
 8003964:	4383      	bics	r3, r0
 8003966:	9202      	str	r2, [sp, #8]
 8003968:	f040 8140 	bne.w	8003bec <ai_platform_network_process+0x294>
 800396c:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8125 	beq.w	8003bbe <ai_platform_network_process+0x266>
 8003974:	692b      	ldr	r3, [r5, #16]
 8003976:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2700      	movs	r7, #0
 8003980:	2b03      	cmp	r3, #3
 8003982:	61af      	str	r7, [r5, #24]
 8003984:	f040 8137 	bne.w	8003bf6 <ai_platform_network_process+0x29e>
 8003988:	2900      	cmp	r1, #0
 800398a:	f000 811e 	beq.w	8003bca <ai_platform_network_process+0x272>
 800398e:	f1ba 0f00 	cmp.w	sl, #0
 8003992:	f000 811a 	beq.w	8003bca <ai_platform_network_process+0x272>
 8003996:	f8ba 3000 	ldrh.w	r3, [sl]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8115 	beq.w	8003bca <ai_platform_network_process+0x272>
 80039a0:	698b      	ldr	r3, [r1, #24]
 80039a2:	9503      	str	r5, [sp, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	460e      	mov	r6, r1
 80039aa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d072      	beq.n	8003a98 <ai_platform_network_process+0x140>
 80039b2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80039b6:	2c00      	cmp	r4, #0
 80039b8:	d06e      	beq.n	8003a98 <ai_platform_network_process+0x140>
 80039ba:	f8da 3008 	ldr.w	r3, [sl, #8]
 80039be:	f8d3 9000 	ldr.w	r9, [r3]
 80039c2:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80039c6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80039ca:	f000 81d3 	beq.w	8003d74 <ai_platform_network_process+0x41c>
 80039ce:	69a3      	ldr	r3, [r4, #24]
 80039d0:	2101      	movs	r1, #1
 80039d2:	4630      	mov	r0, r6
 80039d4:	685d      	ldr	r5, [r3, #4]
 80039d6:	f7ff fb6b 	bl	80030b0 <ai_buffer_get_size>
 80039da:	4285      	cmp	r5, r0
 80039dc:	f0c0 8116 	bcc.w	8003c0c <ai_platform_network_process+0x2b4>
 80039e0:	68e0      	ldr	r0, [r4, #12]
 80039e2:	69b1      	ldr	r1, [r6, #24]
 80039e4:	68c2      	ldr	r2, [r0, #12]
 80039e6:	68cb      	ldr	r3, [r1, #12]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	f040 810f 	bne.w	8003c0c <ai_platform_network_process+0x2b4>
 80039ee:	6882      	ldr	r2, [r0, #8]
 80039f0:	688b      	ldr	r3, [r1, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	f040 810a 	bne.w	8003c0c <ai_platform_network_process+0x2b4>
 80039f8:	6842      	ldr	r2, [r0, #4]
 80039fa:	684b      	ldr	r3, [r1, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	f040 8105 	bne.w	8003c0c <ai_platform_network_process+0x2b4>
 8003a02:	69a3      	ldr	r3, [r4, #24]
 8003a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a08:	f001 f812 	bl	8004a30 <ai_array_get_data_byte_size>
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f001 f838 	bl	8004a84 <get_tensor_byte_size>
 8003a14:	4285      	cmp	r5, r0
 8003a16:	f0c0 80f9 	bcc.w	8003c0c <ai_platform_network_process+0x2b4>
 8003a1a:	69a3      	ldr	r3, [r4, #24]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	f000 ff6f 	bl	8004900 <ai_array_to_buffer_fmt>
 8003a22:	6833      	ldr	r3, [r6, #0]
 8003a24:	4058      	eors	r0, r3
 8003a26:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8003a2a:	f040 81a5 	bne.w	8003d78 <ai_platform_network_process+0x420>
 8003a2e:	6873      	ldr	r3, [r6, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 819f 	beq.w	8003d74 <ai_platform_network_process+0x41c>
 8003a36:	69b3      	ldr	r3, [r6, #24]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 81a5 	beq.w	8003d8a <ai_platform_network_process+0x432>
 8003a40:	9a01      	ldr	r2, [sp, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	bf38      	it	cc
 8003a46:	461a      	movcc	r2, r3
 8003a48:	4620      	mov	r0, r4
 8003a4a:	9201      	str	r2, [sp, #4]
 8003a4c:	f001 f81a 	bl	8004a84 <get_tensor_byte_size>
 8003a50:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a54:	69b3      	ldr	r3, [r6, #24]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	fb00 f303 	mul.w	r3, r0, r3
 8003a5c:	f8c8 300c 	str.w	r3, [r8, #12]
 8003a60:	6871      	ldr	r1, [r6, #4]
 8003a62:	f8c8 1004 	str.w	r1, [r8, #4]
 8003a66:	440b      	add	r3, r1
 8003a68:	f849 300b 	str.w	r3, [r9, fp]
 8003a6c:	69a0      	ldr	r0, [r4, #24]
 8003a6e:	6803      	ldr	r3, [r0, #0]
 8003a70:	009a      	lsls	r2, r3, #2
 8003a72:	f107 0701 	add.w	r7, r7, #1
 8003a76:	f106 061c 	add.w	r6, r6, #28
 8003a7a:	f100 80b1 	bmi.w	8003be0 <ai_platform_network_process+0x288>
 8003a7e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	4419      	add	r1, r3
 8003a86:	6081      	str	r1, [r0, #8]
 8003a88:	69a3      	ldr	r3, [r4, #24]
 8003a8a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	f8ba 3000 	ldrh.w	r3, [sl]
 8003a94:	42bb      	cmp	r3, r7
 8003a96:	d888      	bhi.n	80039aa <ai_platform_network_process+0x52>
 8003a98:	9d03      	ldr	r5, [sp, #12]
 8003a9a:	9b02      	ldr	r3, [sp, #8]
 8003a9c:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 817c 	beq.w	8003d9c <ai_platform_network_process+0x444>
 8003aa4:	2a01      	cmp	r2, #1
 8003aa6:	f240 80bd 	bls.w	8003c24 <ai_platform_network_process+0x2cc>
 8003aaa:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8003aae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80b6 	beq.w	8003c24 <ai_platform_network_process+0x2cc>
 8003ab8:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003abc:	2700      	movs	r7, #0
 8003abe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80bd 	beq.w	8003c42 <ai_platform_network_process+0x2ea>
 8003ac8:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8003acc:	2e00      	cmp	r6, #0
 8003ace:	f000 80b8 	beq.w	8003c42 <ai_platform_network_process+0x2ea>
 8003ad2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003ad6:	681c      	ldr	r4, [r3, #0]
 8003ad8:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8003adc:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8003ae0:	f000 8160 	beq.w	8003da4 <ai_platform_network_process+0x44c>
 8003ae4:	69b3      	ldr	r3, [r6, #24]
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	9302      	str	r3, [sp, #8]
 8003aec:	4658      	mov	r0, fp
 8003aee:	f7ff fadf 	bl	80030b0 <ai_buffer_get_size>
 8003af2:	9b02      	ldr	r3, [sp, #8]
 8003af4:	4283      	cmp	r3, r0
 8003af6:	f0c0 8095 	bcc.w	8003c24 <ai_platform_network_process+0x2cc>
 8003afa:	68f0      	ldr	r0, [r6, #12]
 8003afc:	f8db 1018 	ldr.w	r1, [fp, #24]
 8003b00:	68c2      	ldr	r2, [r0, #12]
 8003b02:	68cb      	ldr	r3, [r1, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	f040 808d 	bne.w	8003c24 <ai_platform_network_process+0x2cc>
 8003b0a:	6882      	ldr	r2, [r0, #8]
 8003b0c:	688b      	ldr	r3, [r1, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	f040 8088 	bne.w	8003c24 <ai_platform_network_process+0x2cc>
 8003b14:	6842      	ldr	r2, [r0, #4]
 8003b16:	684b      	ldr	r3, [r1, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	f040 8083 	bne.w	8003c24 <ai_platform_network_process+0x2cc>
 8003b1e:	69b3      	ldr	r3, [r6, #24]
 8003b20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b24:	f000 ff84 	bl	8004a30 <ai_array_get_data_byte_size>
 8003b28:	9002      	str	r0, [sp, #8]
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	f000 ffaa 	bl	8004a84 <get_tensor_byte_size>
 8003b30:	9b02      	ldr	r3, [sp, #8]
 8003b32:	4283      	cmp	r3, r0
 8003b34:	d376      	bcc.n	8003c24 <ai_platform_network_process+0x2cc>
 8003b36:	69b3      	ldr	r3, [r6, #24]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	f000 fee1 	bl	8004900 <ai_array_to_buffer_fmt>
 8003b3e:	f8db 3000 	ldr.w	r3, [fp]
 8003b42:	4058      	eors	r0, r3
 8003b44:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8003b48:	f040 8134 	bne.w	8003db4 <ai_platform_network_process+0x45c>
 8003b4c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8127 	beq.w	8003da4 <ai_platform_network_process+0x44c>
 8003b56:	f8db 3018 	ldr.w	r3, [fp, #24]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8133 	beq.w	8003dc8 <ai_platform_network_process+0x470>
 8003b62:	9a01      	ldr	r2, [sp, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf38      	it	cc
 8003b68:	461a      	movcc	r2, r3
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	9201      	str	r2, [sp, #4]
 8003b6e:	f000 ff89 	bl	8004a84 <get_tensor_byte_size>
 8003b72:	f8c9 0008 	str.w	r0, [r9, #8]
 8003b76:	f8db 3018 	ldr.w	r3, [fp, #24]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	fb00 f303 	mul.w	r3, r0, r3
 8003b80:	f8c9 300c 	str.w	r3, [r9, #12]
 8003b84:	f8db 1004 	ldr.w	r1, [fp, #4]
 8003b88:	f8c9 1004 	str.w	r1, [r9, #4]
 8003b8c:	440b      	add	r3, r1
 8003b8e:	f844 300a 	str.w	r3, [r4, sl]
 8003b92:	69b0      	ldr	r0, [r6, #24]
 8003b94:	6803      	ldr	r3, [r0, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	f107 0701 	add.w	r7, r7, #1
 8003b9c:	f10b 0b1c 	add.w	fp, fp, #28
 8003ba0:	d44a      	bmi.n	8003c38 <ai_platform_network_process+0x2e0>
 8003ba2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	4419      	add	r1, r3
 8003baa:	6081      	str	r1, [r0, #8]
 8003bac:	69b3      	ldr	r3, [r6, #24]
 8003bae:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003bb8:	42bb      	cmp	r3, r7
 8003bba:	d880      	bhi.n	8003abe <ai_platform_network_process+0x166>
 8003bbc:	e041      	b.n	8003c42 <ai_platform_network_process+0x2ea>
 8003bbe:	692a      	ldr	r2, [r5, #16]
 8003bc0:	61ab      	str	r3, [r5, #24]
 8003bc2:	f002 0203 	and.w	r2, r2, #3
 8003bc6:	2a03      	cmp	r2, #3
 8003bc8:	d115      	bne.n	8003bf6 <ai_platform_network_process+0x29e>
 8003bca:	2217      	movs	r2, #23
 8003bcc:	2112      	movs	r1, #18
 8003bce:	f105 000c 	add.w	r0, r5, #12
 8003bd2:	f000 f909 	bl	8003de8 <core_set_error>
 8003bd6:	2400      	movs	r4, #0
 8003bd8:	4620      	mov	r0, r4
 8003bda:	b005      	add	sp, #20
 8003bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be0:	f8ba 3000 	ldrh.w	r3, [sl]
 8003be4:	429f      	cmp	r7, r3
 8003be6:	f4ff aee0 	bcc.w	80039aa <ai_platform_network_process+0x52>
 8003bea:	e755      	b.n	8003a98 <ai_platform_network_process+0x140>
 8003bec:	2400      	movs	r4, #0
 8003bee:	4620      	mov	r0, r4
 8003bf0:	b005      	add	sp, #20
 8003bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf6:	2230      	movs	r2, #48	@ 0x30
 8003bf8:	2111      	movs	r1, #17
 8003bfa:	f105 000c 	add.w	r0, r5, #12
 8003bfe:	f000 f8f3 	bl	8003de8 <core_set_error>
 8003c02:	2400      	movs	r4, #0
 8003c04:	4620      	mov	r0, r4
 8003c06:	b005      	add	sp, #20
 8003c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0c:	9d03      	ldr	r5, [sp, #12]
 8003c0e:	2218      	movs	r2, #24
 8003c10:	2112      	movs	r1, #18
 8003c12:	f105 000c 	add.w	r0, r5, #12
 8003c16:	f000 f8e7 	bl	8003de8 <core_set_error>
 8003c1a:	2400      	movs	r4, #0
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	b005      	add	sp, #20
 8003c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c24:	2218      	movs	r2, #24
 8003c26:	2113      	movs	r1, #19
 8003c28:	f105 000c 	add.w	r0, r5, #12
 8003c2c:	f000 f8dc 	bl	8003de8 <core_set_error>
 8003c30:	2400      	movs	r4, #0
 8003c32:	e7d1      	b.n	8003bd8 <ai_platform_network_process+0x280>
 8003c34:	a1c00100 	.word	0xa1c00100
 8003c38:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003c3c:	429f      	cmp	r7, r3
 8003c3e:	f4ff af3e 	bcc.w	8003abe <ai_platform_network_process+0x166>
 8003c42:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003c46:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8003c48:	832b      	strh	r3, [r5, #24]
 8003c4a:	2a00      	cmp	r2, #0
 8003c4c:	f040 808c 	bne.w	8003d68 <ai_platform_network_process+0x410>
 8003c50:	4616      	mov	r6, r2
 8003c52:	4617      	mov	r7, r2
 8003c54:	8b6c      	ldrh	r4, [r5, #26]
 8003c56:	429c      	cmp	r4, r3
 8003c58:	bf38      	it	cc
 8003c5a:	46ab      	movcc	fp, r5
 8003c5c:	d2bc      	bcs.n	8003bd8 <ai_platform_network_process+0x280>
 8003c5e:	2e00      	cmp	r6, #0
 8003c60:	d030      	beq.n	8003cc4 <ai_platform_network_process+0x36c>
 8003c62:	f04f 0800 	mov.w	r8, #0
 8003c66:	e014      	b.n	8003c92 <ai_platform_network_process+0x33a>
 8003c68:	6882      	ldr	r2, [r0, #8]
 8003c6a:	68c5      	ldr	r5, [r0, #12]
 8003c6c:	6863      	ldr	r3, [r4, #4]
 8003c6e:	1b52      	subs	r2, r2, r5
 8003c70:	4413      	add	r3, r2
 8003c72:	6083      	str	r3, [r0, #8]
 8003c74:	698b      	ldr	r3, [r1, #24]
 8003c76:	6862      	ldr	r2, [r4, #4]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003c7e:	f859 200a 	ldr.w	r2, [r9, sl]
 8003c82:	440b      	add	r3, r1
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bf24      	itt	cs
 8003c88:	68e3      	ldrcs	r3, [r4, #12]
 8003c8a:	1ad3      	subcs	r3, r2, r3
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	f108 0801 	add.w	r8, r8, #1
 8003c92:	8833      	ldrh	r3, [r6, #0]
 8003c94:	4543      	cmp	r3, r8
 8003c96:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003c9a:	d913      	bls.n	8003cc4 <ai_platform_network_process+0x36c>
 8003c9c:	6873      	ldr	r3, [r6, #4]
 8003c9e:	b18b      	cbz	r3, 8003cc4 <ai_platform_network_process+0x36c>
 8003ca0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003ca4:	b171      	cbz	r1, 8003cc4 <ai_platform_network_process+0x36c>
 8003ca6:	6988      	ldr	r0, [r1, #24]
 8003ca8:	68b2      	ldr	r2, [r6, #8]
 8003caa:	6803      	ldr	r3, [r0, #0]
 8003cac:	f8d2 9000 	ldr.w	r9, [r2]
 8003cb0:	009d      	lsls	r5, r3, #2
 8003cb2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003cb6:	d5d7      	bpl.n	8003c68 <ai_platform_network_process+0x310>
 8003cb8:	6881      	ldr	r1, [r0, #8]
 8003cba:	68a2      	ldr	r2, [r4, #8]
 8003cbc:	6860      	ldr	r0, [r4, #4]
 8003cbe:	f000 fd99 	bl	80047f4 <st_int8_copy>
 8003cc2:	e7da      	b.n	8003c7a <ai_platform_network_process+0x322>
 8003cc4:	4658      	mov	r0, fp
 8003cc6:	f000 f8e7 	bl	8003e98 <ai_layers_forward_all>
 8003cca:	2f00      	cmp	r7, #0
 8003ccc:	d03d      	beq.n	8003d4a <ai_platform_network_process+0x3f2>
 8003cce:	2400      	movs	r4, #0
 8003cd0:	e016      	b.n	8003d00 <ai_platform_network_process+0x3a8>
 8003cd2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8003cd6:	f859 100a 	ldr.w	r1, [r9, sl]
 8003cda:	4413      	add	r3, r2
 8003cdc:	428b      	cmp	r3, r1
 8003cde:	bf24      	itt	cs
 8003ce0:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003ce4:	1acb      	subcs	r3, r1, r3
 8003ce6:	f8c8 3004 	str.w	r3, [r8, #4]
 8003cea:	6981      	ldr	r1, [r0, #24]
 8003cec:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003cf0:	1b52      	subs	r2, r2, r5
 8003cf2:	4413      	add	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
 8003cf6:	6983      	ldr	r3, [r0, #24]
 8003cf8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	3401      	adds	r4, #1
 8003d00:	883b      	ldrh	r3, [r7, #0]
 8003d02:	42a3      	cmp	r3, r4
 8003d04:	d921      	bls.n	8003d4a <ai_platform_network_process+0x3f2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	b1fb      	cbz	r3, 8003d4a <ai_platform_network_process+0x3f2>
 8003d0a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003d0e:	b1e0      	cbz	r0, 8003d4a <ai_platform_network_process+0x3f2>
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	6983      	ldr	r3, [r0, #24]
 8003d14:	f8d2 9000 	ldr.w	r9, [r2]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	0092      	lsls	r2, r2, #2
 8003d1c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8003d20:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8003d24:	d5d5      	bpl.n	8003cd2 <ai_platform_network_process+0x37a>
 8003d26:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8003d2a:	6898      	ldr	r0, [r3, #8]
 8003d2c:	f000 fd62 	bl	80047f4 <st_int8_copy>
 8003d30:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8003d34:	f859 200a 	ldr.w	r2, [r9, sl]
 8003d38:	440b      	add	r3, r1
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	bf24      	itt	cs
 8003d3e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003d42:	1ad3      	subcs	r3, r2, r3
 8003d44:	f8c8 3004 	str.w	r3, [r8, #4]
 8003d48:	e7d9      	b.n	8003cfe <ai_platform_network_process+0x3a6>
 8003d4a:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8003d4e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8003d52:	3401      	adds	r4, #1
 8003d54:	b2a4      	uxth	r4, r4
 8003d56:	42a3      	cmp	r3, r4
 8003d58:	f8ab 401a 	strh.w	r4, [fp, #26]
 8003d5c:	f63f af7f 	bhi.w	8003c5e <ai_platform_network_process+0x306>
 8003d60:	4620      	mov	r0, r4
 8003d62:	b005      	add	sp, #20
 8003d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d68:	2a01      	cmp	r2, #1
 8003d6a:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8003d6c:	d02a      	beq.n	8003dc4 <ai_platform_network_process+0x46c>
 8003d6e:	f106 070c 	add.w	r7, r6, #12
 8003d72:	e76f      	b.n	8003c54 <ai_platform_network_process+0x2fc>
 8003d74:	9d03      	ldr	r5, [sp, #12]
 8003d76:	e728      	b.n	8003bca <ai_platform_network_process+0x272>
 8003d78:	9d03      	ldr	r5, [sp, #12]
 8003d7a:	2219      	movs	r2, #25
 8003d7c:	2112      	movs	r1, #18
 8003d7e:	f105 000c 	add.w	r0, r5, #12
 8003d82:	f000 f831 	bl	8003de8 <core_set_error>
 8003d86:	2400      	movs	r4, #0
 8003d88:	e726      	b.n	8003bd8 <ai_platform_network_process+0x280>
 8003d8a:	9d03      	ldr	r5, [sp, #12]
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	2221      	movs	r2, #33	@ 0x21
 8003d90:	2112      	movs	r1, #18
 8003d92:	f105 000c 	add.w	r0, r5, #12
 8003d96:	f000 f827 	bl	8003de8 <core_set_error>
 8003d9a:	e71d      	b.n	8003bd8 <ai_platform_network_process+0x280>
 8003d9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003da0:	832b      	strh	r3, [r5, #24]
 8003da2:	e752      	b.n	8003c4a <ai_platform_network_process+0x2f2>
 8003da4:	2217      	movs	r2, #23
 8003da6:	2113      	movs	r1, #19
 8003da8:	f105 000c 	add.w	r0, r5, #12
 8003dac:	f000 f81c 	bl	8003de8 <core_set_error>
 8003db0:	2400      	movs	r4, #0
 8003db2:	e711      	b.n	8003bd8 <ai_platform_network_process+0x280>
 8003db4:	2219      	movs	r2, #25
 8003db6:	2113      	movs	r1, #19
 8003db8:	f105 000c 	add.w	r0, r5, #12
 8003dbc:	f000 f814 	bl	8003de8 <core_set_error>
 8003dc0:	2400      	movs	r4, #0
 8003dc2:	e709      	b.n	8003bd8 <ai_platform_network_process+0x280>
 8003dc4:	2700      	movs	r7, #0
 8003dc6:	e745      	b.n	8003c54 <ai_platform_network_process+0x2fc>
 8003dc8:	4604      	mov	r4, r0
 8003dca:	2221      	movs	r2, #33	@ 0x21
 8003dcc:	2113      	movs	r1, #19
 8003dce:	f105 000c 	add.w	r0, r5, #12
 8003dd2:	f000 f809 	bl	8003de8 <core_set_error>
 8003dd6:	e6ff      	b.n	8003bd8 <ai_platform_network_process+0x280>

08003dd8 <core_init>:
 8003dd8:	2001      	movs	r0, #1
 8003dda:	4770      	bx	lr

08003ddc <core_get_error>:
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2200      	movs	r2, #0
 8003de0:	6800      	ldr	r0, [r0, #0]
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop

08003de8 <core_set_error>:
 8003de8:	4603      	mov	r3, r0
 8003dea:	7800      	ldrb	r0, [r0, #0]
 8003dec:	b108      	cbz	r0, 8003df2 <core_set_error+0xa>
 8003dee:	2000      	movs	r0, #0
 8003df0:	4770      	bx	lr
 8003df2:	7019      	strb	r1, [r3, #0]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	f362 211f 	bfi	r1, r2, #8, #24
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	6019      	str	r1, [r3, #0]
 8003dfe:	4770      	bx	lr

08003e00 <ai_check_custom_types>:
 8003e00:	b082      	sub	sp, #8
 8003e02:	4b13      	ldr	r3, [pc, #76]	@ (8003e50 <ai_check_custom_types+0x50>)
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	b118      	cbz	r0, 8003e10 <ai_check_custom_types+0x10>
 8003e08:	7803      	ldrb	r3, [r0, #0]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d002      	beq.n	8003e14 <ai_check_custom_types+0x14>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	b002      	add	sp, #8
 8003e12:	4770      	bx	lr
 8003e14:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <ai_check_custom_types+0x26>
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f080 0001 	eor.w	r0, r0, #1
 8003e22:	b002      	add	sp, #8
 8003e24:	4770      	bx	lr
 8003e26:	7842      	ldrb	r2, [r0, #1]
 8003e28:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	f100 0001 	add.w	r0, r0, #1
 8003e32:	d1f3      	bne.n	8003e1c <ai_check_custom_types+0x1c>
 8003e34:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003e38:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1ed      	bne.n	8003e1c <ai_check_custom_types+0x1c>
 8003e40:	7842      	ldrb	r2, [r0, #1]
 8003e42:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d1e8      	bne.n	8003e1c <ai_check_custom_types+0x1c>
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	e7e7      	b.n	8003e1e <ai_check_custom_types+0x1e>
 8003e4e:	bf00      	nop
 8003e50:	84048403 	.word	0x84048403

08003e54 <ai_layers_init_all>:
 8003e54:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003e56:	2100      	movs	r1, #0
 8003e58:	b143      	cbz	r3, 8003e6c <ai_layers_init_all+0x18>
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	60d8      	str	r0, [r3, #12]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	f101 0101 	add.w	r1, r1, #1
 8003e64:	d002      	beq.n	8003e6c <ai_layers_init_all+0x18>
 8003e66:	b10a      	cbz	r2, 8003e6c <ai_layers_init_all+0x18>
 8003e68:	4613      	mov	r3, r2
 8003e6a:	e7f5      	b.n	8003e58 <ai_layers_init_all+0x4>
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4770      	bx	lr

08003e70 <ai_layers_post_init_all>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8003e74:	2500      	movs	r5, #0
 8003e76:	b16c      	cbz	r4, 8003e94 <ai_layers_post_init_all+0x24>
 8003e78:	6863      	ldr	r3, [r4, #4]
 8003e7a:	07db      	lsls	r3, r3, #31
 8003e7c:	d504      	bpl.n	8003e88 <ai_layers_post_init_all+0x18>
 8003e7e:	6a23      	ldr	r3, [r4, #32]
 8003e80:	4620      	mov	r0, r4
 8003e82:	b10b      	cbz	r3, 8003e88 <ai_layers_post_init_all+0x18>
 8003e84:	4798      	blx	r3
 8003e86:	3501      	adds	r5, #1
 8003e88:	6923      	ldr	r3, [r4, #16]
 8003e8a:	42a3      	cmp	r3, r4
 8003e8c:	d002      	beq.n	8003e94 <ai_layers_post_init_all+0x24>
 8003e8e:	b10b      	cbz	r3, 8003e94 <ai_layers_post_init_all+0x24>
 8003e90:	461c      	mov	r4, r3
 8003e92:	e7f0      	b.n	8003e76 <ai_layers_post_init_all+0x6>
 8003e94:	4628      	mov	r0, r5
 8003e96:	bd38      	pop	{r3, r4, r5, pc}

08003e98 <ai_layers_forward_all>:
 8003e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9c:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	f1b8 0f00 	cmp.w	r8, #0
 8003ea6:	d02b      	beq.n	8003f00 <ai_layers_forward_all+0x68>
 8003ea8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003eaa:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8003eac:	b321      	cbz	r1, 8003ef8 <ai_layers_forward_all+0x60>
 8003eae:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	47c0      	blx	r8
 8003eb4:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8003eb6:	b1fe      	cbz	r6, 8003ef8 <ai_layers_forward_all+0x60>
 8003eb8:	2700      	movs	r7, #0
 8003eba:	4631      	mov	r1, r6
 8003ebc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003ebe:	2002      	movs	r0, #2
 8003ec0:	47c0      	blx	r8
 8003ec2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	696b      	ldr	r3, [r5, #20]
 8003ec8:	4798      	blx	r3
 8003eca:	692e      	ldr	r6, [r5, #16]
 8003ecc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003ece:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003ed0:	42b5      	cmp	r5, r6
 8003ed2:	f04f 0003 	mov.w	r0, #3
 8003ed6:	d007      	beq.n	8003ee8 <ai_layers_forward_all+0x50>
 8003ed8:	47c0      	blx	r8
 8003eda:	3701      	adds	r7, #1
 8003edc:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8003ede:	2e00      	cmp	r6, #0
 8003ee0:	d1eb      	bne.n	8003eba <ai_layers_forward_all+0x22>
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee8:	2003      	movs	r0, #3
 8003eea:	47c0      	blx	r8
 8003eec:	2300      	movs	r3, #0
 8003eee:	3701      	adds	r7, #1
 8003ef0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef8:	2700      	movs	r7, #0
 8003efa:	4638      	mov	r0, r7
 8003efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f00:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8003f02:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	d0f7      	beq.n	8003ef8 <ai_layers_forward_all+0x60>
 8003f08:	4647      	mov	r7, r8
 8003f0a:	696b      	ldr	r3, [r5, #20]
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	4798      	blx	r3
 8003f10:	462b      	mov	r3, r5
 8003f12:	692d      	ldr	r5, [r5, #16]
 8003f14:	429d      	cmp	r5, r3
 8003f16:	d004      	beq.n	8003f22 <ai_layers_forward_all+0x8a>
 8003f18:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003f1a:	3701      	adds	r7, #1
 8003f1c:	2d00      	cmp	r5, #0
 8003f1e:	d1f4      	bne.n	8003f0a <ai_layers_forward_all+0x72>
 8003f20:	e7df      	b.n	8003ee2 <ai_layers_forward_all+0x4a>
 8003f22:	2300      	movs	r3, #0
 8003f24:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003f26:	3701      	adds	r7, #1
 8003f28:	e7db      	b.n	8003ee2 <ai_layers_forward_all+0x4a>
 8003f2a:	bf00      	nop

08003f2c <forward_dense>:
 8003f2c:	6983      	ldr	r3, [r0, #24]
 8003f2e:	881a      	ldrh	r2, [r3, #0]
 8003f30:	2a00      	cmp	r2, #0
 8003f32:	f000 80cc 	beq.w	80040ce <forward_dense+0x1a2>
 8003f36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3a:	ed2d 8b02 	vpush	{d8}
 8003f3e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8003f42:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003f46:	b09b      	sub	sp, #108	@ 0x6c
 8003f48:	b104      	cbz	r4, 8003f4c <forward_dense+0x20>
 8003f4a:	6824      	ldr	r4, [r4, #0]
 8003f4c:	2a01      	cmp	r2, #1
 8003f4e:	f000 81d7 	beq.w	8004300 <forward_dense+0x3d4>
 8003f52:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8003f56:	b105      	cbz	r5, 8003f5a <forward_dense+0x2e>
 8003f58:	682d      	ldr	r5, [r5, #0]
 8003f5a:	2a02      	cmp	r2, #2
 8003f5c:	f000 80b9 	beq.w	80040d2 <forward_dense+0x1a6>
 8003f60:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8003f64:	9308      	str	r3, [sp, #32]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 81c1 	beq.w	80042ee <forward_dense+0x3c2>
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8003f72:	6809      	ldr	r1, [r1, #0]
 8003f74:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	f240 81bb 	bls.w	80042f2 <forward_dense+0x3c6>
 8003f7c:	9b08      	ldr	r3, [sp, #32]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	9308      	str	r3, [sp, #32]
 8003f82:	460b      	mov	r3, r1
 8003f84:	68e0      	ldr	r0, [r4, #12]
 8003f86:	68ee      	ldr	r6, [r5, #12]
 8003f88:	6840      	ldr	r0, [r0, #4]
 8003f8a:	6999      	ldr	r1, [r3, #24]
 8003f8c:	9010      	str	r0, [sp, #64]	@ 0x40
 8003f8e:	6870      	ldr	r0, [r6, #4]
 8003f90:	680b      	ldr	r3, [r1, #0]
 8003f92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003f94:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 8003f98:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8003f9c:	fb00 f707 	mul.w	r7, r0, r7
 8003fa0:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8003fa4:	fa4e f000 	asr.w	r0, lr, r0
 8003fa8:	2a03      	cmp	r2, #3
 8003faa:	900d      	str	r0, [sp, #52]	@ 0x34
 8003fac:	f000 81a5 	beq.w	80042fa <forward_dense+0x3ce>
 8003fb0:	f8dc 8028 	ldr.w	r8, [ip, #40]	@ 0x28
 8003fb4:	f1b8 0f00 	cmp.w	r8, #0
 8003fb8:	d006      	beq.n	8003fc8 <forward_dense+0x9c>
 8003fba:	f8d8 8000 	ldr.w	r8, [r8]
 8003fbe:	f1b8 0f00 	cmp.w	r8, #0
 8003fc2:	d001      	beq.n	8003fc8 <forward_dense+0x9c>
 8003fc4:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8003fc8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8003fcc:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8003fd0:	fa42 f303 	asr.w	r3, r2, r3
 8003fd4:	07db      	lsls	r3, r3, #31
 8003fd6:	f140 8177 	bpl.w	80042c8 <forward_dense+0x39c>
 8003fda:	f04f 0900 	mov.w	r9, #0
 8003fde:	69a3      	ldr	r3, [r4, #24]
 8003fe0:	69aa      	ldr	r2, [r5, #24]
 8003fe2:	6891      	ldr	r1, [r2, #8]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fe8:	9102      	str	r1, [sp, #8]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	9303      	str	r3, [sp, #12]
 8003ff0:	fb07 f606 	mul.w	r6, r7, r6
 8003ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ff6:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003ffa:	009c      	lsls	r4, r3, #2
 8003ffc:	4281      	cmp	r1, r0
 8003ffe:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004000:	9409      	str	r4, [sp, #36]	@ 0x24
 8004002:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8004006:	d25d      	bcs.n	80040c4 <forward_dense+0x198>
 8004008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800400a:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 8004308 <forward_dense+0x3dc>
 800400e:	08d9      	lsrs	r1, r3, #3
 8004010:	4693      	mov	fp, r2
 8004012:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 8004016:	461a      	mov	r2, r3
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	014b      	lsls	r3, r1, #5
 8004024:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8004028:	9311      	str	r3, [sp, #68]	@ 0x44
 800402a:	0093      	lsls	r3, r2, #2
 800402c:	930c      	str	r3, [sp, #48]	@ 0x30
 800402e:	f002 0301 	and.w	r3, r2, #1
 8004032:	464c      	mov	r4, r9
 8004034:	9104      	str	r1, [sp, #16]
 8004036:	9305      	str	r3, [sp, #20]
 8004038:	46c1      	mov	r9, r8
 800403a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8004042:	9b08      	ldr	r3, [sp, #32]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d04a      	beq.n	80040de <forward_dense+0x1b2>
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	689d      	ldr	r5, [r3, #8]
 800404c:	2c00      	cmp	r4, #0
 800404e:	d049      	beq.n	80040e4 <forward_dense+0x1b8>
 8004050:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004052:	2b04      	cmp	r3, #4
 8004054:	9b02      	ldr	r3, [sp, #8]
 8004056:	d057      	beq.n	8004108 <forward_dense+0x1dc>
 8004058:	4599      	cmp	r9, r3
 800405a:	d927      	bls.n	80040ac <forward_dense+0x180>
 800405c:	9e03      	ldr	r6, [sp, #12]
 800405e:	4618      	mov	r0, r3
 8004060:	2d00      	cmp	r5, #0
 8004062:	d039      	beq.n	80040d8 <forward_dense+0x1ac>
 8004064:	ecb5 6a01 	vldmia	r5!, {s12}
 8004068:	45da      	cmp	sl, fp
 800406a:	d911      	bls.n	8004090 <forward_dense+0x164>
 800406c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8004308 <forward_dense+0x3dc>
 8004070:	465a      	mov	r2, fp
 8004072:	4661      	mov	r1, ip
 8004074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004078:	ecb2 7a01 	vldmia	r2!, {s14}
 800407c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004080:	edd3 6a00 	vldr	s13, [r3]
 8004084:	4592      	cmp	sl, r2
 8004086:	eee6 7a87 	vfma.f32	s15, s13, s14
 800408a:	d8f3      	bhi.n	8004074 <forward_dense+0x148>
 800408c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004090:	eca0 6a01 	vstmia	r0!, {s12}
 8004094:	4548      	cmp	r0, r9
 8004096:	44b4      	add	ip, r6
 8004098:	d3e2      	bcc.n	8004060 <forward_dense+0x134>
 800409a:	9a02      	ldr	r2, [sp, #8]
 800409c:	eba9 0302 	sub.w	r3, r9, r2
 80040a0:	3b01      	subs	r3, #1
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	3304      	adds	r3, #4
 80040a8:	18d3      	adds	r3, r2, r3
 80040aa:	9302      	str	r3, [sp, #8]
 80040ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040ae:	9a01      	ldr	r2, [sp, #4]
 80040b0:	4499      	add	r9, r3
 80040b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80040b4:	441a      	add	r2, r3
 80040b6:	449a      	add	sl, r3
 80040b8:	449b      	add	fp, r3
 80040ba:	9201      	str	r2, [sp, #4]
 80040bc:	9b02      	ldr	r3, [sp, #8]
 80040be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d3ba      	bcc.n	800403a <forward_dense+0x10e>
 80040c4:	b01b      	add	sp, #108	@ 0x6c
 80040c6:	ecbd 8b02 	vpop	{d8}
 80040ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ce:	6853      	ldr	r3, [r2, #4]
 80040d0:	deff      	udf	#255	@ 0xff
 80040d2:	2300      	movs	r3, #0
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	deff      	udf	#255	@ 0xff
 80040d8:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 8004308 <forward_dense+0x3dc>
 80040dc:	e7c4      	b.n	8004068 <forward_dense+0x13c>
 80040de:	461d      	mov	r5, r3
 80040e0:	2c00      	cmp	r4, #0
 80040e2:	d1b5      	bne.n	8004050 <forward_dense+0x124>
 80040e4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80040e6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80040e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80040ea:	9b02      	ldr	r3, [sp, #8]
 80040ec:	9218      	str	r2, [sp, #96]	@ 0x60
 80040ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040f0:	e9cd 3b13 	strd	r3, fp, [sp, #76]	@ 0x4c
 80040f4:	4413      	add	r3, r2
 80040f6:	9302      	str	r3, [sp, #8]
 80040f8:	a813      	add	r0, sp, #76	@ 0x4c
 80040fa:	2301      	movs	r3, #1
 80040fc:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 8004100:	9319      	str	r3, [sp, #100]	@ 0x64
 8004102:	f000 fa1d 	bl	8004540 <forward_lite_dense_if32of32wf32>
 8004106:	e7d1      	b.n	80040ac <forward_dense+0x180>
 8004108:	4599      	cmp	r9, r3
 800410a:	d9cf      	bls.n	80040ac <forward_dense+0x180>
 800410c:	9a04      	ldr	r2, [sp, #16]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	1c57      	adds	r7, r2, #1
 8004112:	9b01      	ldr	r3, [sp, #4]
 8004114:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004116:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 800411a:	4452      	add	r2, sl
 800411c:	3b01      	subs	r3, #1
 800411e:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8004122:	9206      	str	r2, [sp, #24]
 8004124:	9307      	str	r3, [sp, #28]
 8004126:	2d00      	cmp	r5, #0
 8004128:	f000 80c3 	beq.w	80042b2 <forward_dense+0x386>
 800412c:	9b04      	ldr	r3, [sp, #16]
 800412e:	ecf5 2a01 	vldmia	r5!, {s5}
 8004132:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8004308 <forward_dense+0x3dc>
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80c3 	beq.w	80042c2 <forward_dense+0x396>
 800413c:	f10c 0204 	add.w	r2, ip, #4
 8004140:	f10b 0320 	add.w	r3, fp, #32
 8004144:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 8004148:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 800414c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8004150:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8004154:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8004158:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800415c:	ed13 5a04 	vldr	s10, [r3, #-16]
 8004160:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004164:	ed13 6a02 	vldr	s12, [r3, #-8]
 8004168:	ed53 6a01 	vldr	s13, [r3, #-4]
 800416c:	f000 060f 	and.w	r6, r0, #15
 8004170:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004174:	edd6 7a00 	vldr	s15, [r6]
 8004178:	0900      	lsrs	r0, r0, #4
 800417a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800417e:	ed90 3a00 	vldr	s6, [r0]
 8004182:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004186:	0908      	lsrs	r0, r1, #4
 8004188:	eee3 7a23 	vfma.f32	s15, s6, s7
 800418c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004190:	f001 010f 	and.w	r1, r1, #15
 8004194:	edd0 3a00 	vldr	s7, [r0]
 8004198:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 800419c:	eee3 7a84 	vfma.f32	s15, s7, s8
 80041a0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80041a4:	0906      	lsrs	r6, r0, #4
 80041a6:	ed91 4a00 	vldr	s8, [r1]
 80041aa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80041ae:	eee4 7a24 	vfma.f32	s15, s8, s9
 80041b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80041b6:	f000 000f 	and.w	r0, r0, #15
 80041ba:	edd6 4a00 	vldr	s9, [r6]
 80041be:	eee4 7a85 	vfma.f32	s15, s9, s10
 80041c2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80041c6:	3204      	adds	r2, #4
 80041c8:	ed90 5a00 	vldr	s10, [r0]
 80041cc:	0908      	lsrs	r0, r1, #4
 80041ce:	eee5 7a25 	vfma.f32	s15, s10, s11
 80041d2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80041d6:	f001 010f 	and.w	r1, r1, #15
 80041da:	edd0 5a00 	vldr	s11, [r0]
 80041de:	eee5 7a86 	vfma.f32	s15, s11, s12
 80041e2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80041e6:	42ba      	cmp	r2, r7
 80041e8:	ed91 6a00 	vldr	s12, [r1]
 80041ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 80041f0:	f103 0320 	add.w	r3, r3, #32
 80041f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041f8:	d1a4      	bne.n	8004144 <forward_dense+0x218>
 80041fa:	f8dd e018 	ldr.w	lr, [sp, #24]
 80041fe:	f1a7 0804 	sub.w	r8, r7, #4
 8004202:	9b01      	ldr	r3, [sp, #4]
 8004204:	459e      	cmp	lr, r3
 8004206:	d22a      	bcs.n	800425e <forward_dense+0x332>
 8004208:	9b07      	ldr	r3, [sp, #28]
 800420a:	eba3 060e 	sub.w	r6, r3, lr
 800420e:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8004212:	f10e 0208 	add.w	r2, lr, #8
 8004216:	f108 30ff 	add.w	r0, r8, #4294967295
 800421a:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 800421e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004222:	ed52 5a01 	vldr	s11, [r2, #-4]
 8004226:	ed52 6a02 	vldr	s13, [r2, #-8]
 800422a:	f003 010f 	and.w	r1, r3, #15
 800422e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004232:	edd1 7a00 	vldr	s15, [r1]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800423c:	ed93 6a00 	vldr	s12, [r3]
 8004240:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004244:	42b0      	cmp	r0, r6
 8004246:	eee6 7a26 	vfma.f32	s15, s12, s13
 800424a:	f102 0208 	add.w	r2, r2, #8
 800424e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004252:	d1e4      	bne.n	800421e <forward_dense+0x2f2>
 8004254:	f10a 0a01 	add.w	sl, sl, #1
 8004258:	44d0      	add	r8, sl
 800425a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800425e:	9b05      	ldr	r3, [sp, #20]
 8004260:	b1cb      	cbz	r3, 8004296 <forward_dense+0x36a>
 8004262:	f898 3000 	ldrb.w	r3, [r8]
 8004266:	edde 7a00 	vldr	s15, [lr]
 800426a:	9a03      	ldr	r2, [sp, #12]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004272:	edd3 6a00 	vldr	s13, [r3]
 8004276:	9b00      	ldr	r3, [sp, #0]
 8004278:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800427c:	4494      	add	ip, r2
 800427e:	4417      	add	r7, r2
 8004280:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004284:	eca3 7a01 	vstmia	r3!, {s14}
 8004288:	4599      	cmp	r9, r3
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	f63f af4b 	bhi.w	8004126 <forward_dense+0x1fa>
 8004290:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004294:	e701      	b.n	800409a <forward_dense+0x16e>
 8004296:	9b00      	ldr	r3, [sp, #0]
 8004298:	9a03      	ldr	r2, [sp, #12]
 800429a:	ee72 2a87 	vadd.f32	s5, s5, s14
 800429e:	4494      	add	ip, r2
 80042a0:	ece3 2a01 	vstmia	r3!, {s5}
 80042a4:	454b      	cmp	r3, r9
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	4417      	add	r7, r2
 80042aa:	d2f1      	bcs.n	8004290 <forward_dense+0x364>
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	f47f af3d 	bne.w	800412c <forward_dense+0x200>
 80042b2:	9b04      	ldr	r3, [sp, #16]
 80042b4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004308 <forward_dense+0x3dc>
 80042b8:	eef0 2a48 	vmov.f32	s5, s16
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f47f af3d 	bne.w	800413c <forward_dense+0x210>
 80042c2:	46de      	mov	lr, fp
 80042c4:	46e0      	mov	r8, ip
 80042c6:	e79c      	b.n	8004202 <forward_dense+0x2d6>
 80042c8:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80042cc:	f1b8 0f00 	cmp.w	r8, #0
 80042d0:	f43f ae85 	beq.w	8003fde <forward_dense+0xb2>
 80042d4:	e9d8 0100 	ldrd	r0, r1, [r8]
 80042d8:	f000 fb82 	bl	80049e0 <ai_array_get_byte_size>
 80042dc:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80042e0:	4602      	mov	r2, r0
 80042e2:	4641      	mov	r1, r8
 80042e4:	4648      	mov	r0, r9
 80042e6:	f000 fa85 	bl	80047f4 <st_int8_copy>
 80042ea:	46c1      	mov	r9, r8
 80042ec:	e677      	b.n	8003fde <forward_dense+0xb2>
 80042ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80042f0:	e648      	b.n	8003f84 <forward_dense+0x58>
 80042f2:	2300      	movs	r3, #0
 80042f4:	9308      	str	r3, [sp, #32]
 80042f6:	460b      	mov	r3, r1
 80042f8:	e644      	b.n	8003f84 <forward_dense+0x58>
 80042fa:	2300      	movs	r3, #0
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	deff      	udf	#255	@ 0xff
 8004300:	2300      	movs	r3, #0
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	deff      	udf	#255	@ 0xff
 8004306:	bf00      	nop
 8004308:	00000000 	.word	0x00000000

0800430c <forward_relu>:
 800430c:	6982      	ldr	r2, [r0, #24]
 800430e:	8813      	ldrh	r3, [r2, #0]
 8004310:	b323      	cbz	r3, 800435c <forward_relu+0x50>
 8004312:	6851      	ldr	r1, [r2, #4]
 8004314:	684a      	ldr	r2, [r1, #4]
 8004316:	b102      	cbz	r2, 800431a <forward_relu+0xe>
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	f000 808d 	beq.w	800443a <forward_relu+0x12e>
 8004320:	b470      	push	{r4, r5, r6}
 8004322:	6909      	ldr	r1, [r1, #16]
 8004324:	b101      	cbz	r1, 8004328 <forward_relu+0x1c>
 8004326:	6809      	ldr	r1, [r1, #0]
 8004328:	69c6      	ldr	r6, [r0, #28]
 800432a:	b1ce      	cbz	r6, 8004360 <forward_relu+0x54>
 800432c:	6873      	ldr	r3, [r6, #4]
 800432e:	6988      	ldr	r0, [r1, #24]
 8004330:	6991      	ldr	r1, [r2, #24]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d044      	beq.n	80043c0 <forward_relu+0xb4>
 8004336:	6893      	ldr	r3, [r2, #8]
 8004338:	6880      	ldr	r0, [r0, #8]
 800433a:	6889      	ldr	r1, [r1, #8]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	d073      	beq.n	8004428 <forward_relu+0x11c>
 8004340:	68d5      	ldr	r5, [r2, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004348:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800434c:	429d      	cmp	r5, r3
 800434e:	fb04 f202 	mul.w	r2, r4, r2
 8004352:	d1f9      	bne.n	8004348 <forward_relu+0x3c>
 8004354:	68b3      	ldr	r3, [r6, #8]
 8004356:	bc70      	pop	{r4, r5, r6}
 8004358:	f000 b874 	b.w	8004444 <forward_lite_nl_relu_generic_if32of32_kernel>
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	deff      	udf	#255	@ 0xff
 8004360:	6893      	ldr	r3, [r2, #8]
 8004362:	6989      	ldr	r1, [r1, #24]
 8004364:	6990      	ldr	r0, [r2, #24]
 8004366:	6889      	ldr	r1, [r1, #8]
 8004368:	6884      	ldr	r4, [r0, #8]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	d05e      	beq.n	800442c <forward_relu+0x120>
 800436e:	68d5      	ldr	r5, [r2, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004376:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800437a:	429d      	cmp	r5, r3
 800437c:	fb00 f202 	mul.w	r2, r0, r2
 8004380:	d1f9      	bne.n	8004376 <forward_relu+0x6a>
 8004382:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8004386:	3b01      	subs	r3, #1
 8004388:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800438c:	4294      	cmp	r4, r2
 800438e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004392:	d813      	bhi.n	80043bc <forward_relu+0xb0>
 8004394:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004440 <forward_relu+0x134>
 8004398:	3204      	adds	r2, #4
 800439a:	3104      	adds	r1, #4
 800439c:	4613      	mov	r3, r2
 800439e:	ed72 7a01 	vldmdb	r2!, {s15}
 80043a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043aa:	f1a3 0308 	sub.w	r3, r3, #8
 80043ae:	bfb8      	it	lt
 80043b0:	eef0 7a47 	vmovlt.f32	s15, s14
 80043b4:	429c      	cmp	r4, r3
 80043b6:	ed61 7a01 	vstmdb	r1!, {s15}
 80043ba:	d9ef      	bls.n	800439c <forward_relu+0x90>
 80043bc:	bc70      	pop	{r4, r5, r6}
 80043be:	4770      	bx	lr
 80043c0:	688c      	ldr	r4, [r1, #8]
 80043c2:	6891      	ldr	r1, [r2, #8]
 80043c4:	6880      	ldr	r0, [r0, #8]
 80043c6:	0a09      	lsrs	r1, r1, #8
 80043c8:	d032      	beq.n	8004430 <forward_relu+0x124>
 80043ca:	68d5      	ldr	r5, [r2, #12]
 80043cc:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80043d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80043d4:	4295      	cmp	r5, r2
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	d1f9      	bne.n	80043d0 <forward_relu+0xc4>
 80043dc:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80043e0:	3a01      	subs	r2, #1
 80043e2:	68b1      	ldr	r1, [r6, #8]
 80043e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80043e8:	429c      	cmp	r4, r3
 80043ea:	ed91 7a00 	vldr	s14, [r1]
 80043ee:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80043f2:	d8e3      	bhi.n	80043bc <forward_relu+0xb0>
 80043f4:	2500      	movs	r5, #0
 80043f6:	3304      	adds	r3, #4
 80043f8:	1d02      	adds	r2, r0, #4
 80043fa:	ed53 7a01 	vldr	s15, [r3, #-4]
 80043fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004406:	f1a3 0104 	sub.w	r1, r3, #4
 800440a:	f1a3 0308 	sub.w	r3, r3, #8
 800440e:	d405      	bmi.n	800441c <forward_relu+0x110>
 8004410:	429c      	cmp	r4, r3
 8004412:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004416:	d8d1      	bhi.n	80043bc <forward_relu+0xb0>
 8004418:	460b      	mov	r3, r1
 800441a:	e7ee      	b.n	80043fa <forward_relu+0xee>
 800441c:	429c      	cmp	r4, r3
 800441e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004422:	d8cb      	bhi.n	80043bc <forward_relu+0xb0>
 8004424:	460b      	mov	r3, r1
 8004426:	e7e8      	b.n	80043fa <forward_relu+0xee>
 8004428:	2201      	movs	r2, #1
 800442a:	e793      	b.n	8004354 <forward_relu+0x48>
 800442c:	4622      	mov	r2, r4
 800442e:	e7b1      	b.n	8004394 <forward_relu+0x88>
 8004430:	68b2      	ldr	r2, [r6, #8]
 8004432:	4623      	mov	r3, r4
 8004434:	ed92 7a00 	vldr	s14, [r2]
 8004438:	e7dc      	b.n	80043f4 <forward_relu+0xe8>
 800443a:	2300      	movs	r3, #0
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	deff      	udf	#255	@ 0xff
 8004440:	00000000 	.word	0x00000000

08004444 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8004444:	edd3 6a02 	vldr	s13, [r3, #8]
 8004448:	ed93 7a00 	vldr	s14, [r3]
 800444c:	ed93 6a01 	vldr	s12, [r3, #4]
 8004450:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004458:	d42a      	bmi.n	80044b0 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800445a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800445e:	3a01      	subs	r2, #1
 8004460:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004464:	4561      	cmp	r1, ip
 8004466:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800446a:	d85d      	bhi.n	8004528 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800446c:	1d11      	adds	r1, r2, #4
 800446e:	f10c 0304 	add.w	r3, ip, #4
 8004472:	4408      	add	r0, r1
 8004474:	ebac 0202 	sub.w	r2, ip, r2
 8004478:	e00c      	b.n	8004494 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800447a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8004486:	db01      	blt.n	800448c <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8004488:	ee65 7a86 	vmul.f32	s15, s11, s12
 800448c:	4293      	cmp	r3, r2
 800448e:	ed60 7a01 	vstmdb	r0!, {s15}
 8004492:	d00c      	beq.n	80044ae <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8004494:	ed73 7a01 	vldmdb	r3!, {s15}
 8004498:	eef4 6ae7 	vcmpe.f32	s13, s15
 800449c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a0:	daeb      	bge.n	800447a <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 80044a2:	eef0 7a66 	vmov.f32	s15, s13
 80044a6:	4293      	cmp	r3, r2
 80044a8:	ed60 7a01 	vstmdb	r0!, {s15}
 80044ac:	d1f2      	bne.n	8004494 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80044ae:	4770      	bx	lr
 80044b0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80044b4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80044b8:	3a01      	subs	r2, #1
 80044ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044be:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80044c2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80044c6:	d017      	beq.n	80044f8 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 80044c8:	4561      	cmp	r1, ip
 80044ca:	d82d      	bhi.n	8004528 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80044cc:	1d11      	adds	r1, r2, #4
 80044ce:	f10c 0304 	add.w	r3, ip, #4
 80044d2:	4401      	add	r1, r0
 80044d4:	ebac 0202 	sub.w	r2, ip, r2
 80044d8:	ed73 7a01 	vldmdb	r3!, {s15}
 80044dc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80044e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80044ec:	d81d      	bhi.n	800452a <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 80044ee:	4293      	cmp	r3, r2
 80044f0:	ed61 6a01 	vstmdb	r1!, {s13}
 80044f4:	d1f0      	bne.n	80044d8 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 80044f6:	4770      	bx	lr
 80044f8:	4561      	cmp	r1, ip
 80044fa:	d815      	bhi.n	8004528 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80044fc:	1d11      	adds	r1, r2, #4
 80044fe:	b500      	push	{lr}
 8004500:	f10c 0304 	add.w	r3, ip, #4
 8004504:	f04f 0e00 	mov.w	lr, #0
 8004508:	4401      	add	r1, r0
 800450a:	ebac 0202 	sub.w	r2, ip, r2
 800450e:	ed73 7a01 	vldmdb	r3!, {s15}
 8004512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	d40b      	bmi.n	8004534 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800451c:	4293      	cmp	r3, r2
 800451e:	f841 ed04 	str.w	lr, [r1, #-4]!
 8004522:	d1f4      	bne.n	800450e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8004524:	f85d fb04 	ldr.w	pc, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	4293      	cmp	r3, r2
 800452c:	ed61 7a01 	vstmdb	r1!, {s15}
 8004530:	d1d2      	bne.n	80044d8 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8004532:	4770      	bx	lr
 8004534:	4293      	cmp	r3, r2
 8004536:	ed61 7a01 	vstmdb	r1!, {s15}
 800453a:	d1e8      	bne.n	800450e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800453c:	e7f2      	b.n	8004524 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800453e:	bf00      	nop

08004540 <forward_lite_dense_if32of32wf32>:
 8004540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8004548:	6801      	ldr	r1, [r0, #0]
 800454a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	b083      	sub	sp, #12
 8004554:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004558:	4299      	cmp	r1, r3
 800455a:	9100      	str	r1, [sp, #0]
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	f080 811e 	bcs.w	800479e <forward_lite_dense_if32of32wf32+0x25e>
 8004562:	6904      	ldr	r4, [r0, #16]
 8004564:	4607      	mov	r7, r0
 8004566:	0096      	lsls	r6, r2, #2
 8004568:	9b00      	ldr	r3, [sp, #0]
 800456a:	68bd      	ldr	r5, [r7, #8]
 800456c:	eb03 0e06 	add.w	lr, r3, r6
 8004570:	459e      	cmp	lr, r3
 8004572:	461e      	mov	r6, r3
 8004574:	f240 8104 	bls.w	8004780 <forward_lite_dense_if32of32wf32+0x240>
 8004578:	f1a4 0c10 	sub.w	ip, r4, #16
 800457c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8004580:	f10c 0c01 	add.w	ip, ip, #1
 8004584:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8004588:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800458c:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8004590:	2c0f      	cmp	r4, #15
 8004592:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80047f0 <forward_lite_dense_if32of32wf32+0x2b0>
 8004596:	f240 8105 	bls.w	80047a4 <forward_lite_dense_if32of32wf32+0x264>
 800459a:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800459e:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80045a2:	4621      	mov	r1, r4
 80045a4:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80045a8:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80045ac:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 80045b0:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 80045b4:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80045b8:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80045bc:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 80045c0:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 80045c4:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 80045c8:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 80045cc:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 80045d0:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 80045d4:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 80045d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80045dc:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 80045e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80045e4:	3910      	subs	r1, #16
 80045e6:	290f      	cmp	r1, #15
 80045e8:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 80045ec:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 80045f0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80045f4:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80045f8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80045fc:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8004600:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8004604:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004608:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800460c:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8004610:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004614:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8004618:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800461c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004620:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8004624:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8004628:	eee3 7a23 	vfma.f32	s15, s6, s7
 800462c:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8004630:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8004634:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004638:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800463c:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8004640:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004644:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8004648:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800464c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004650:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8004654:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8004658:	eee1 7a21 	vfma.f32	s15, s2, s3
 800465c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004660:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004664:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004668:	eee5 7a25 	vfma.f32	s15, s10, s11
 800466c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004674:	d896      	bhi.n	80045a4 <forward_lite_dense_if32of32wf32+0x64>
 8004676:	eb05 020b 	add.w	r2, r5, fp
 800467a:	f004 010f 	and.w	r1, r4, #15
 800467e:	4663      	mov	r3, ip
 8004680:	2903      	cmp	r1, #3
 8004682:	d95f      	bls.n	8004744 <forward_lite_dense_if32of32wf32+0x204>
 8004684:	edd2 6a01 	vldr	s13, [r2, #4]
 8004688:	edd3 7a01 	vldr	s15, [r3, #4]
 800468c:	ed93 6a00 	vldr	s12, [r3]
 8004690:	ed93 5a02 	vldr	s10, [r3, #8]
 8004694:	edd2 5a02 	vldr	s11, [r2, #8]
 8004698:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800469c:	edd2 6a00 	vldr	s13, [r2]
 80046a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80046a4:	1f08      	subs	r0, r1, #4
 80046a6:	2803      	cmp	r0, #3
 80046a8:	ed93 6a03 	vldr	s12, [r3, #12]
 80046ac:	edd2 6a03 	vldr	s13, [r2, #12]
 80046b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80046b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80046bc:	eeb0 7a67 	vmov.f32	s14, s15
 80046c0:	d938      	bls.n	8004734 <forward_lite_dense_if32of32wf32+0x1f4>
 80046c2:	edd2 6a05 	vldr	s13, [r2, #20]
 80046c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80046ca:	ed93 6a04 	vldr	s12, [r3, #16]
 80046ce:	ed93 5a06 	vldr	s10, [r3, #24]
 80046d2:	edd2 5a06 	vldr	s11, [r2, #24]
 80046d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80046da:	edd2 6a04 	vldr	s13, [r2, #16]
 80046de:	eee6 7a26 	vfma.f32	s15, s12, s13
 80046e2:	f1a1 0a08 	sub.w	sl, r1, #8
 80046e6:	f1ba 0f03 	cmp.w	sl, #3
 80046ea:	ed93 6a07 	vldr	s12, [r3, #28]
 80046ee:	edd2 6a07 	vldr	s13, [r2, #28]
 80046f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80046f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80046fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046fe:	d919      	bls.n	8004734 <forward_lite_dense_if32of32wf32+0x1f4>
 8004700:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004704:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8004708:	ed92 6a08 	vldr	s12, [r2, #32]
 800470c:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8004710:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8004714:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004718:	edd3 6a08 	vldr	s13, [r3, #32]
 800471c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004720:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8004724:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8004728:	eee5 7a25 	vfma.f32	s15, s10, s11
 800472c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004734:	0880      	lsrs	r0, r0, #2
 8004736:	3001      	adds	r0, #1
 8004738:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800473c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8004740:	f001 0103 	and.w	r1, r1, #3
 8004744:	b1a9      	cbz	r1, 8004772 <forward_lite_dense_if32of32wf32+0x232>
 8004746:	edd3 6a00 	vldr	s13, [r3]
 800474a:	edd2 7a00 	vldr	s15, [r2]
 800474e:	3901      	subs	r1, #1
 8004750:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004754:	d00d      	beq.n	8004772 <forward_lite_dense_if32of32wf32+0x232>
 8004756:	edd3 6a01 	vldr	s13, [r3, #4]
 800475a:	edd2 7a01 	vldr	s15, [r2, #4]
 800475e:	2901      	cmp	r1, #1
 8004760:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004764:	d005      	beq.n	8004772 <forward_lite_dense_if32of32wf32+0x232>
 8004766:	edd2 6a02 	vldr	s13, [r2, #8]
 800476a:	edd3 7a02 	vldr	s15, [r3, #8]
 800476e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004772:	444d      	add	r5, r9
 8004774:	eca6 7a01 	vstmia	r6!, {s14}
 8004778:	45b6      	cmp	lr, r6
 800477a:	f63f af09 	bhi.w	8004590 <forward_lite_dense_if32of32wf32+0x50>
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	b99b      	cbnz	r3, 80047ac <forward_lite_dense_if32of32wf32+0x26c>
 8004784:	9b00      	ldr	r3, [sp, #0]
 8004786:	9901      	ldr	r1, [sp, #4]
 8004788:	693c      	ldr	r4, [r7, #16]
 800478a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800478e:	4299      	cmp	r1, r3
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8004796:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800479a:	f63f aee5 	bhi.w	8004568 <forward_lite_dense_if32of32wf32+0x28>
 800479e:	b003      	add	sp, #12
 80047a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a4:	4621      	mov	r1, r4
 80047a6:	462a      	mov	r2, r5
 80047a8:	4643      	mov	r3, r8
 80047aa:	e769      	b.n	8004680 <forward_lite_dense_if32of32wf32+0x140>
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	d0e9      	beq.n	8004784 <forward_lite_dense_if32of32wf32+0x244>
 80047b0:	9a00      	ldr	r2, [sp, #0]
 80047b2:	ed93 7a00 	vldr	s14, [r3]
 80047b6:	edd2 7a00 	vldr	s15, [r2]
 80047ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047be:	4613      	mov	r3, r2
 80047c0:	edc2 7a00 	vstr	s15, [r2]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	2a01      	cmp	r2, #1
 80047c8:	d9dc      	bls.n	8004784 <forward_lite_dense_if32of32wf32+0x244>
 80047ca:	1d19      	adds	r1, r3, #4
 80047cc:	2301      	movs	r3, #1
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	ed91 7a00 	vldr	s14, [r1]
 80047d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80047d8:	edd2 7a00 	vldr	s15, [r2]
 80047dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047e0:	3301      	adds	r3, #1
 80047e2:	ece1 7a01 	vstmia	r1!, {s15}
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d8f0      	bhi.n	80047ce <forward_lite_dense_if32of32wf32+0x28e>
 80047ec:	e7ca      	b.n	8004784 <forward_lite_dense_if32of32wf32+0x244>
 80047ee:	bf00      	nop
 80047f0:	00000000 	.word	0x00000000

080047f4 <st_int8_copy>:
 80047f4:	4288      	cmp	r0, r1
 80047f6:	d056      	beq.n	80048a6 <st_int8_copy+0xb2>
 80047f8:	2a00      	cmp	r2, #0
 80047fa:	d054      	beq.n	80048a6 <st_int8_copy+0xb2>
 80047fc:	4288      	cmp	r0, r1
 80047fe:	d353      	bcc.n	80048a8 <st_int8_copy+0xb4>
 8004800:	078b      	lsls	r3, r1, #30
 8004802:	d102      	bne.n	800480a <st_int8_copy+0x16>
 8004804:	e009      	b.n	800481a <st_int8_copy+0x26>
 8004806:	2a00      	cmp	r2, #0
 8004808:	d05b      	beq.n	80048c2 <st_int8_copy+0xce>
 800480a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800480e:	f801 3b01 	strb.w	r3, [r1], #1
 8004812:	078b      	lsls	r3, r1, #30
 8004814:	f102 32ff 	add.w	r2, r2, #4294967295
 8004818:	d1f5      	bne.n	8004806 <st_int8_copy+0x12>
 800481a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8004822:	d068      	beq.n	80048f6 <st_int8_copy+0x102>
 8004824:	ea40 0301 	orr.w	r3, r0, r1
 8004828:	075b      	lsls	r3, r3, #29
 800482a:	d14b      	bne.n	80048c4 <st_int8_copy+0xd0>
 800482c:	f1be 0f01 	cmp.w	lr, #1
 8004830:	d048      	beq.n	80048c4 <st_int8_copy+0xd0>
 8004832:	f100 0310 	add.w	r3, r0, #16
 8004836:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800483a:	f101 0c10 	add.w	ip, r1, #16
 800483e:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8004842:	ed13 6b04 	vldr	d6, [r3, #-16]
 8004846:	ed13 7b02 	vldr	d7, [r3, #-8]
 800484a:	3310      	adds	r3, #16
 800484c:	4573      	cmp	r3, lr
 800484e:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8004852:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8004856:	f10c 0c10 	add.w	ip, ip, #16
 800485a:	d1f2      	bne.n	8004842 <st_int8_copy+0x4e>
 800485c:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8004860:	4421      	add	r1, r4
 8004862:	4420      	add	r0, r4
 8004864:	f002 0203 	and.w	r2, r2, #3
 8004868:	b16b      	cbz	r3, 8004886 <st_int8_copy+0x92>
 800486a:	6804      	ldr	r4, [r0, #0]
 800486c:	600c      	str	r4, [r1, #0]
 800486e:	1e5c      	subs	r4, r3, #1
 8004870:	d005      	beq.n	800487e <st_int8_copy+0x8a>
 8004872:	6845      	ldr	r5, [r0, #4]
 8004874:	604d      	str	r5, [r1, #4]
 8004876:	2c01      	cmp	r4, #1
 8004878:	bf1c      	itt	ne
 800487a:	6884      	ldrne	r4, [r0, #8]
 800487c:	608c      	strne	r4, [r1, #8]
 800487e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004882:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004886:	b162      	cbz	r2, 80048a2 <st_int8_copy+0xae>
 8004888:	f990 3000 	ldrsb.w	r3, [r0]
 800488c:	700b      	strb	r3, [r1, #0]
 800488e:	3a01      	subs	r2, #1
 8004890:	d007      	beq.n	80048a2 <st_int8_copy+0xae>
 8004892:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004896:	704b      	strb	r3, [r1, #1]
 8004898:	2a01      	cmp	r2, #1
 800489a:	bf1c      	itt	ne
 800489c:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 80048a0:	708b      	strbne	r3, [r1, #2]
 80048a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a6:	4770      	bx	lr
 80048a8:	1883      	adds	r3, r0, r2
 80048aa:	428b      	cmp	r3, r1
 80048ac:	d9a8      	bls.n	8004800 <st_int8_copy+0xc>
 80048ae:	4283      	cmp	r3, r0
 80048b0:	440a      	add	r2, r1
 80048b2:	d9f8      	bls.n	80048a6 <st_int8_copy+0xb2>
 80048b4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80048b8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80048bc:	4283      	cmp	r3, r0
 80048be:	d1f9      	bne.n	80048b4 <st_int8_copy+0xc0>
 80048c0:	4770      	bx	lr
 80048c2:	4770      	bx	lr
 80048c4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80048c8:	460b      	mov	r3, r1
 80048ca:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80048ce:	4684      	mov	ip, r0
 80048d0:	f8dc 7000 	ldr.w	r7, [ip]
 80048d4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80048d8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80048dc:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80048e0:	f8c3 800c 	str.w	r8, [r3, #12]
 80048e4:	601f      	str	r7, [r3, #0]
 80048e6:	605e      	str	r6, [r3, #4]
 80048e8:	609d      	str	r5, [r3, #8]
 80048ea:	3310      	adds	r3, #16
 80048ec:	459e      	cmp	lr, r3
 80048ee:	f10c 0c10 	add.w	ip, ip, #16
 80048f2:	d1ed      	bne.n	80048d0 <st_int8_copy+0xdc>
 80048f4:	e7b2      	b.n	800485c <st_int8_copy+0x68>
 80048f6:	0893      	lsrs	r3, r2, #2
 80048f8:	f002 0203 	and.w	r2, r2, #3
 80048fc:	e7b4      	b.n	8004868 <st_int8_copy+0x74>
 80048fe:	bf00      	nop

08004900 <ai_array_to_buffer_fmt>:
 8004900:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004904:	2b02      	cmp	r3, #2
 8004906:	d053      	beq.n	80049b0 <ai_array_to_buffer_fmt+0xb0>
 8004908:	4a2c      	ldr	r2, [pc, #176]	@ (80049bc <ai_array_to_buffer_fmt+0xbc>)
 800490a:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800490e:	4293      	cmp	r3, r2
 8004910:	d010      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 8004912:	dc21      	bgt.n	8004958 <ai_array_to_buffer_fmt+0x58>
 8004914:	4a2a      	ldr	r2, [pc, #168]	@ (80049c0 <ai_array_to_buffer_fmt+0xc0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00c      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 800491a:	dd0f      	ble.n	800493c <ai_array_to_buffer_fmt+0x3c>
 800491c:	4a29      	ldr	r2, [pc, #164]	@ (80049c4 <ai_array_to_buffer_fmt+0xc4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d008      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 8004922:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 800492a:	4a27      	ldr	r2, [pc, #156]	@ (80049c8 <ai_array_to_buffer_fmt+0xc8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	bf0c      	ite	eq
 8004930:	4613      	moveq	r3, r2
 8004932:	2340      	movne	r3, #64	@ 0x40
 8004934:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8004938:	4318      	orrs	r0, r3
 800493a:	4770      	bx	lr
 800493c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8004940:	4293      	cmp	r3, r2
 8004942:	d0f7      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 8004944:	dd2a      	ble.n	800499c <ai_array_to_buffer_fmt+0x9c>
 8004946:	4a21      	ldr	r2, [pc, #132]	@ (80049cc <ai_array_to_buffer_fmt+0xcc>)
 8004948:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800494c:	4293      	cmp	r3, r2
 800494e:	bf0c      	ite	eq
 8004950:	4613      	moveq	r3, r2
 8004952:	2340      	movne	r3, #64	@ 0x40
 8004954:	4318      	orrs	r0, r3
 8004956:	4770      	bx	lr
 8004958:	4a1d      	ldr	r2, [pc, #116]	@ (80049d0 <ai_array_to_buffer_fmt+0xd0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d0ea      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 800495e:	dd0f      	ble.n	8004980 <ai_array_to_buffer_fmt+0x80>
 8004960:	4a1c      	ldr	r2, [pc, #112]	@ (80049d4 <ai_array_to_buffer_fmt+0xd4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d0e6      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 8004966:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 800496a:	4293      	cmp	r3, r2
 800496c:	d0e2      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 800496e:	4a1a      	ldr	r2, [pc, #104]	@ (80049d8 <ai_array_to_buffer_fmt+0xd8>)
 8004970:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8004974:	4293      	cmp	r3, r2
 8004976:	bf0c      	ite	eq
 8004978:	4613      	moveq	r3, r2
 800497a:	2340      	movne	r3, #64	@ 0x40
 800497c:	4318      	orrs	r0, r3
 800497e:	4770      	bx	lr
 8004980:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8004984:	4293      	cmp	r3, r2
 8004986:	d0d5      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 8004988:	3207      	adds	r2, #7
 800498a:	4293      	cmp	r3, r2
 800498c:	d0d2      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 800498e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8004992:	4293      	cmp	r3, r2
 8004994:	bf0c      	ite	eq
 8004996:	4613      	moveq	r3, r2
 8004998:	2340      	movne	r3, #64	@ 0x40
 800499a:	e7cb      	b.n	8004934 <ai_array_to_buffer_fmt+0x34>
 800499c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d0c7      	beq.n	8004934 <ai_array_to_buffer_fmt+0x34>
 80049a4:	3280      	adds	r2, #128	@ 0x80
 80049a6:	4293      	cmp	r3, r2
 80049a8:	bf0c      	ite	eq
 80049aa:	4613      	moveq	r3, r2
 80049ac:	2340      	movne	r3, #64	@ 0x40
 80049ae:	e7c1      	b.n	8004934 <ai_array_to_buffer_fmt+0x34>
 80049b0:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <ai_array_to_buffer_fmt+0xdc>)
 80049b2:	4003      	ands	r3, r0
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049b8:	e7bc      	b.n	8004934 <ai_array_to_buffer_fmt+0x34>
 80049ba:	bf00      	nop
 80049bc:	00840040 	.word	0x00840040
 80049c0:	00040840 	.word	0x00040840
 80049c4:	00041040 	.word	0x00041040
 80049c8:	0004084f 	.word	0x0004084f
 80049cc:	00040447 	.word	0x00040447
 80049d0:	00840840 	.word	0x00840840
 80049d4:	00841040 	.word	0x00841040
 80049d8:	0084084f 	.word	0x0084084f
 80049dc:	00803fff 	.word	0x00803fff

080049e0 <ai_array_get_byte_size>:
 80049e0:	b319      	cbz	r1, 8004a2a <ai_array_get_byte_size+0x4a>
 80049e2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80049ee:	3307      	adds	r3, #7
 80049f0:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80049f4:	f023 0307 	bic.w	r3, r3, #7
 80049f8:	2a04      	cmp	r2, #4
 80049fa:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80049fe:	fa23 f101 	lsr.w	r1, r3, r1
 8004a02:	d00b      	beq.n	8004a1c <ai_array_get_byte_size+0x3c>
 8004a04:	2a08      	cmp	r2, #8
 8004a06:	d002      	beq.n	8004a0e <ai_array_get_byte_size+0x2e>
 8004a08:	3107      	adds	r1, #7
 8004a0a:	08c8      	lsrs	r0, r1, #3
 8004a0c:	4770      	bx	lr
 8004a0e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8004a12:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8004a16:	3107      	adds	r1, #7
 8004a18:	08c8      	lsrs	r0, r1, #3
 8004a1a:	4770      	bx	lr
 8004a1c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8004a20:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8004a24:	3107      	adds	r1, #7
 8004a26:	08c8      	lsrs	r0, r1, #3
 8004a28:	4770      	bx	lr
 8004a2a:	4608      	mov	r0, r1
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop

08004a30 <ai_array_get_data_byte_size>:
 8004a30:	b169      	cbz	r1, 8004a4e <ai_array_get_data_byte_size+0x1e>
 8004a32:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004a36:	fb03 f101 	mul.w	r1, r3, r1
 8004a3a:	1dcb      	adds	r3, r1, #7
 8004a3c:	f023 0307 	bic.w	r3, r3, #7
 8004a40:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8004a44:	fa23 f000 	lsr.w	r0, r3, r0
 8004a48:	3007      	adds	r0, #7
 8004a4a:	08c0      	lsrs	r0, r0, #3
 8004a4c:	4770      	bx	lr
 8004a4e:	4608      	mov	r0, r1
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop

08004a54 <ai_version_get>:
 8004a54:	0212      	lsls	r2, r2, #8
 8004a56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a5a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8004a5e:	4770      	bx	lr

08004a60 <ai_platform_version_get>:
 8004a60:	0e02      	lsrs	r2, r0, #24
 8004a62:	2300      	movs	r3, #0
 8004a64:	f362 0307 	bfi	r3, r2, #0, #8
 8004a68:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8004a6c:	f362 230f 	bfi	r3, r2, #8, #8
 8004a70:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004a74:	f360 4317 	bfi	r3, r0, #16, #8
 8004a78:	b082      	sub	sp, #8
 8004a7a:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 8004a7e:	b002      	add	sp, #8
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop

08004a84 <get_tensor_byte_size>:
 8004a84:	b410      	push	{r4}
 8004a86:	6983      	ldr	r3, [r0, #24]
 8004a88:	68c4      	ldr	r4, [r0, #12]
 8004a8a:	6941      	ldr	r1, [r0, #20]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68e0      	ldr	r0, [r4, #12]
 8004a90:	4a07      	ldr	r2, [pc, #28]	@ (8004ab0 <get_tensor_byte_size+0x2c>)
 8004a92:	68c9      	ldr	r1, [r1, #12]
 8004a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a98:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8004a9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004aa0:	fb01 f000 	mul.w	r0, r1, r0
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bf04      	itt	eq
 8004aa8:	3007      	addeq	r0, #7
 8004aaa:	08c0      	lsreq	r0, r0, #3
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	000400c0 	.word	0x000400c0

08004ab4 <malloc>:
 8004ab4:	4b02      	ldr	r3, [pc, #8]	@ (8004ac0 <malloc+0xc>)
 8004ab6:	4601      	mov	r1, r0
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	f000 b825 	b.w	8004b08 <_malloc_r>
 8004abe:	bf00      	nop
 8004ac0:	200006a0 	.word	0x200006a0

08004ac4 <sbrk_aligned>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	4e0f      	ldr	r6, [pc, #60]	@ (8004b04 <sbrk_aligned+0x40>)
 8004ac8:	460c      	mov	r4, r1
 8004aca:	6831      	ldr	r1, [r6, #0]
 8004acc:	4605      	mov	r5, r0
 8004ace:	b911      	cbnz	r1, 8004ad6 <sbrk_aligned+0x12>
 8004ad0:	f000 ff48 	bl	8005964 <_sbrk_r>
 8004ad4:	6030      	str	r0, [r6, #0]
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f000 ff43 	bl	8005964 <_sbrk_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d103      	bne.n	8004aea <sbrk_aligned+0x26>
 8004ae2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	bd70      	pop	{r4, r5, r6, pc}
 8004aea:	1cc4      	adds	r4, r0, #3
 8004aec:	f024 0403 	bic.w	r4, r4, #3
 8004af0:	42a0      	cmp	r0, r4
 8004af2:	d0f8      	beq.n	8004ae6 <sbrk_aligned+0x22>
 8004af4:	1a21      	subs	r1, r4, r0
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 ff34 	bl	8005964 <_sbrk_r>
 8004afc:	3001      	adds	r0, #1
 8004afe:	d1f2      	bne.n	8004ae6 <sbrk_aligned+0x22>
 8004b00:	e7ef      	b.n	8004ae2 <sbrk_aligned+0x1e>
 8004b02:	bf00      	nop
 8004b04:	20000968 	.word	0x20000968

08004b08 <_malloc_r>:
 8004b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b0c:	1ccd      	adds	r5, r1, #3
 8004b0e:	f025 0503 	bic.w	r5, r5, #3
 8004b12:	3508      	adds	r5, #8
 8004b14:	2d0c      	cmp	r5, #12
 8004b16:	bf38      	it	cc
 8004b18:	250c      	movcc	r5, #12
 8004b1a:	2d00      	cmp	r5, #0
 8004b1c:	4606      	mov	r6, r0
 8004b1e:	db01      	blt.n	8004b24 <_malloc_r+0x1c>
 8004b20:	42a9      	cmp	r1, r5
 8004b22:	d904      	bls.n	8004b2e <_malloc_r+0x26>
 8004b24:	230c      	movs	r3, #12
 8004b26:	6033      	str	r3, [r6, #0]
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c04 <_malloc_r+0xfc>
 8004b32:	f000 f869 	bl	8004c08 <__malloc_lock>
 8004b36:	f8d8 3000 	ldr.w	r3, [r8]
 8004b3a:	461c      	mov	r4, r3
 8004b3c:	bb44      	cbnz	r4, 8004b90 <_malloc_r+0x88>
 8004b3e:	4629      	mov	r1, r5
 8004b40:	4630      	mov	r0, r6
 8004b42:	f7ff ffbf 	bl	8004ac4 <sbrk_aligned>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	4604      	mov	r4, r0
 8004b4a:	d158      	bne.n	8004bfe <_malloc_r+0xf6>
 8004b4c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b50:	4627      	mov	r7, r4
 8004b52:	2f00      	cmp	r7, #0
 8004b54:	d143      	bne.n	8004bde <_malloc_r+0xd6>
 8004b56:	2c00      	cmp	r4, #0
 8004b58:	d04b      	beq.n	8004bf2 <_malloc_r+0xea>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	4639      	mov	r1, r7
 8004b5e:	4630      	mov	r0, r6
 8004b60:	eb04 0903 	add.w	r9, r4, r3
 8004b64:	f000 fefe 	bl	8005964 <_sbrk_r>
 8004b68:	4581      	cmp	r9, r0
 8004b6a:	d142      	bne.n	8004bf2 <_malloc_r+0xea>
 8004b6c:	6821      	ldr	r1, [r4, #0]
 8004b6e:	1a6d      	subs	r5, r5, r1
 8004b70:	4629      	mov	r1, r5
 8004b72:	4630      	mov	r0, r6
 8004b74:	f7ff ffa6 	bl	8004ac4 <sbrk_aligned>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d03a      	beq.n	8004bf2 <_malloc_r+0xea>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	442b      	add	r3, r5
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	f8d8 3000 	ldr.w	r3, [r8]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	bb62      	cbnz	r2, 8004be4 <_malloc_r+0xdc>
 8004b8a:	f8c8 7000 	str.w	r7, [r8]
 8004b8e:	e00f      	b.n	8004bb0 <_malloc_r+0xa8>
 8004b90:	6822      	ldr	r2, [r4, #0]
 8004b92:	1b52      	subs	r2, r2, r5
 8004b94:	d420      	bmi.n	8004bd8 <_malloc_r+0xd0>
 8004b96:	2a0b      	cmp	r2, #11
 8004b98:	d917      	bls.n	8004bca <_malloc_r+0xc2>
 8004b9a:	1961      	adds	r1, r4, r5
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	6025      	str	r5, [r4, #0]
 8004ba0:	bf18      	it	ne
 8004ba2:	6059      	strne	r1, [r3, #4]
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	bf08      	it	eq
 8004ba8:	f8c8 1000 	streq.w	r1, [r8]
 8004bac:	5162      	str	r2, [r4, r5]
 8004bae:	604b      	str	r3, [r1, #4]
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f000 f82f 	bl	8004c14 <__malloc_unlock>
 8004bb6:	f104 000b 	add.w	r0, r4, #11
 8004bba:	1d23      	adds	r3, r4, #4
 8004bbc:	f020 0007 	bic.w	r0, r0, #7
 8004bc0:	1ac2      	subs	r2, r0, r3
 8004bc2:	bf1c      	itt	ne
 8004bc4:	1a1b      	subne	r3, r3, r0
 8004bc6:	50a3      	strne	r3, [r4, r2]
 8004bc8:	e7af      	b.n	8004b2a <_malloc_r+0x22>
 8004bca:	6862      	ldr	r2, [r4, #4]
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	bf0c      	ite	eq
 8004bd0:	f8c8 2000 	streq.w	r2, [r8]
 8004bd4:	605a      	strne	r2, [r3, #4]
 8004bd6:	e7eb      	b.n	8004bb0 <_malloc_r+0xa8>
 8004bd8:	4623      	mov	r3, r4
 8004bda:	6864      	ldr	r4, [r4, #4]
 8004bdc:	e7ae      	b.n	8004b3c <_malloc_r+0x34>
 8004bde:	463c      	mov	r4, r7
 8004be0:	687f      	ldr	r7, [r7, #4]
 8004be2:	e7b6      	b.n	8004b52 <_malloc_r+0x4a>
 8004be4:	461a      	mov	r2, r3
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	d1fb      	bne.n	8004be4 <_malloc_r+0xdc>
 8004bec:	2300      	movs	r3, #0
 8004bee:	6053      	str	r3, [r2, #4]
 8004bf0:	e7de      	b.n	8004bb0 <_malloc_r+0xa8>
 8004bf2:	230c      	movs	r3, #12
 8004bf4:	6033      	str	r3, [r6, #0]
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f000 f80c 	bl	8004c14 <__malloc_unlock>
 8004bfc:	e794      	b.n	8004b28 <_malloc_r+0x20>
 8004bfe:	6005      	str	r5, [r0, #0]
 8004c00:	e7d6      	b.n	8004bb0 <_malloc_r+0xa8>
 8004c02:	bf00      	nop
 8004c04:	2000096c 	.word	0x2000096c

08004c08 <__malloc_lock>:
 8004c08:	4801      	ldr	r0, [pc, #4]	@ (8004c10 <__malloc_lock+0x8>)
 8004c0a:	f000 bef8 	b.w	80059fe <__retarget_lock_acquire_recursive>
 8004c0e:	bf00      	nop
 8004c10:	20000ab0 	.word	0x20000ab0

08004c14 <__malloc_unlock>:
 8004c14:	4801      	ldr	r0, [pc, #4]	@ (8004c1c <__malloc_unlock+0x8>)
 8004c16:	f000 bef3 	b.w	8005a00 <__retarget_lock_release_recursive>
 8004c1a:	bf00      	nop
 8004c1c:	20000ab0 	.word	0x20000ab0

08004c20 <__cvt>:
 8004c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	ec57 6b10 	vmov	r6, r7, d0
 8004c28:	2f00      	cmp	r7, #0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	463b      	mov	r3, r7
 8004c30:	bfbb      	ittet	lt
 8004c32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c36:	461f      	movlt	r7, r3
 8004c38:	2300      	movge	r3, #0
 8004c3a:	232d      	movlt	r3, #45	@ 0x2d
 8004c3c:	700b      	strb	r3, [r1, #0]
 8004c3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c44:	4691      	mov	r9, r2
 8004c46:	f023 0820 	bic.w	r8, r3, #32
 8004c4a:	bfbc      	itt	lt
 8004c4c:	4632      	movlt	r2, r6
 8004c4e:	4616      	movlt	r6, r2
 8004c50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c54:	d005      	beq.n	8004c62 <__cvt+0x42>
 8004c56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c5a:	d100      	bne.n	8004c5e <__cvt+0x3e>
 8004c5c:	3401      	adds	r4, #1
 8004c5e:	2102      	movs	r1, #2
 8004c60:	e000      	b.n	8004c64 <__cvt+0x44>
 8004c62:	2103      	movs	r1, #3
 8004c64:	ab03      	add	r3, sp, #12
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	ab02      	add	r3, sp, #8
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	ec47 6b10 	vmov	d0, r6, r7
 8004c70:	4653      	mov	r3, sl
 8004c72:	4622      	mov	r2, r4
 8004c74:	f000 ff5c 	bl	8005b30 <_dtoa_r>
 8004c78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	d119      	bne.n	8004cb4 <__cvt+0x94>
 8004c80:	f019 0f01 	tst.w	r9, #1
 8004c84:	d00e      	beq.n	8004ca4 <__cvt+0x84>
 8004c86:	eb00 0904 	add.w	r9, r0, r4
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4630      	mov	r0, r6
 8004c90:	4639      	mov	r1, r7
 8004c92:	f7fb ff21 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c96:	b108      	cbz	r0, 8004c9c <__cvt+0x7c>
 8004c98:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c9c:	2230      	movs	r2, #48	@ 0x30
 8004c9e:	9b03      	ldr	r3, [sp, #12]
 8004ca0:	454b      	cmp	r3, r9
 8004ca2:	d31e      	bcc.n	8004ce2 <__cvt+0xc2>
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ca8:	1b5b      	subs	r3, r3, r5
 8004caa:	4628      	mov	r0, r5
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	b004      	add	sp, #16
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004cb8:	eb00 0904 	add.w	r9, r0, r4
 8004cbc:	d1e5      	bne.n	8004c8a <__cvt+0x6a>
 8004cbe:	7803      	ldrb	r3, [r0, #0]
 8004cc0:	2b30      	cmp	r3, #48	@ 0x30
 8004cc2:	d10a      	bne.n	8004cda <__cvt+0xba>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4630      	mov	r0, r6
 8004cca:	4639      	mov	r1, r7
 8004ccc:	f7fb ff04 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cd0:	b918      	cbnz	r0, 8004cda <__cvt+0xba>
 8004cd2:	f1c4 0401 	rsb	r4, r4, #1
 8004cd6:	f8ca 4000 	str.w	r4, [sl]
 8004cda:	f8da 3000 	ldr.w	r3, [sl]
 8004cde:	4499      	add	r9, r3
 8004ce0:	e7d3      	b.n	8004c8a <__cvt+0x6a>
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	9103      	str	r1, [sp, #12]
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e7d9      	b.n	8004c9e <__cvt+0x7e>

08004cea <__exponent>:
 8004cea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cec:	2900      	cmp	r1, #0
 8004cee:	bfba      	itte	lt
 8004cf0:	4249      	neglt	r1, r1
 8004cf2:	232d      	movlt	r3, #45	@ 0x2d
 8004cf4:	232b      	movge	r3, #43	@ 0x2b
 8004cf6:	2909      	cmp	r1, #9
 8004cf8:	7002      	strb	r2, [r0, #0]
 8004cfa:	7043      	strb	r3, [r0, #1]
 8004cfc:	dd29      	ble.n	8004d52 <__exponent+0x68>
 8004cfe:	f10d 0307 	add.w	r3, sp, #7
 8004d02:	461d      	mov	r5, r3
 8004d04:	270a      	movs	r7, #10
 8004d06:	461a      	mov	r2, r3
 8004d08:	fbb1 f6f7 	udiv	r6, r1, r7
 8004d0c:	fb07 1416 	mls	r4, r7, r6, r1
 8004d10:	3430      	adds	r4, #48	@ 0x30
 8004d12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004d16:	460c      	mov	r4, r1
 8004d18:	2c63      	cmp	r4, #99	@ 0x63
 8004d1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d1e:	4631      	mov	r1, r6
 8004d20:	dcf1      	bgt.n	8004d06 <__exponent+0x1c>
 8004d22:	3130      	adds	r1, #48	@ 0x30
 8004d24:	1e94      	subs	r4, r2, #2
 8004d26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d2a:	1c41      	adds	r1, r0, #1
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	42ab      	cmp	r3, r5
 8004d30:	d30a      	bcc.n	8004d48 <__exponent+0x5e>
 8004d32:	f10d 0309 	add.w	r3, sp, #9
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	42ac      	cmp	r4, r5
 8004d3a:	bf88      	it	hi
 8004d3c:	2300      	movhi	r3, #0
 8004d3e:	3302      	adds	r3, #2
 8004d40:	4403      	add	r3, r0
 8004d42:	1a18      	subs	r0, r3, r0
 8004d44:	b003      	add	sp, #12
 8004d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d50:	e7ed      	b.n	8004d2e <__exponent+0x44>
 8004d52:	2330      	movs	r3, #48	@ 0x30
 8004d54:	3130      	adds	r1, #48	@ 0x30
 8004d56:	7083      	strb	r3, [r0, #2]
 8004d58:	70c1      	strb	r1, [r0, #3]
 8004d5a:	1d03      	adds	r3, r0, #4
 8004d5c:	e7f1      	b.n	8004d42 <__exponent+0x58>
	...

08004d60 <_printf_float>:
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	b08d      	sub	sp, #52	@ 0x34
 8004d66:	460c      	mov	r4, r1
 8004d68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	461f      	mov	r7, r3
 8004d70:	4605      	mov	r5, r0
 8004d72:	f000 fdbf 	bl	80058f4 <_localeconv_r>
 8004d76:	6803      	ldr	r3, [r0, #0]
 8004d78:	9304      	str	r3, [sp, #16]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fb fa80 	bl	8000280 <strlen>
 8004d80:	2300      	movs	r3, #0
 8004d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d84:	f8d8 3000 	ldr.w	r3, [r8]
 8004d88:	9005      	str	r0, [sp, #20]
 8004d8a:	3307      	adds	r3, #7
 8004d8c:	f023 0307 	bic.w	r3, r3, #7
 8004d90:	f103 0208 	add.w	r2, r3, #8
 8004d94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d98:	f8d4 b000 	ldr.w	fp, [r4]
 8004d9c:	f8c8 2000 	str.w	r2, [r8]
 8004da0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004da4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004da8:	9307      	str	r3, [sp, #28]
 8004daa:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004db6:	4b9c      	ldr	r3, [pc, #624]	@ (8005028 <_printf_float+0x2c8>)
 8004db8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbc:	f7fb febe 	bl	8000b3c <__aeabi_dcmpun>
 8004dc0:	bb70      	cbnz	r0, 8004e20 <_printf_float+0xc0>
 8004dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dc6:	4b98      	ldr	r3, [pc, #608]	@ (8005028 <_printf_float+0x2c8>)
 8004dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dcc:	f7fb fe98 	bl	8000b00 <__aeabi_dcmple>
 8004dd0:	bb30      	cbnz	r0, 8004e20 <_printf_float+0xc0>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	4649      	mov	r1, r9
 8004dda:	f7fb fe87 	bl	8000aec <__aeabi_dcmplt>
 8004dde:	b110      	cbz	r0, 8004de6 <_printf_float+0x86>
 8004de0:	232d      	movs	r3, #45	@ 0x2d
 8004de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004de6:	4a91      	ldr	r2, [pc, #580]	@ (800502c <_printf_float+0x2cc>)
 8004de8:	4b91      	ldr	r3, [pc, #580]	@ (8005030 <_printf_float+0x2d0>)
 8004dea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004dee:	bf94      	ite	ls
 8004df0:	4690      	movls	r8, r2
 8004df2:	4698      	movhi	r8, r3
 8004df4:	2303      	movs	r3, #3
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	f02b 0304 	bic.w	r3, fp, #4
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	f04f 0900 	mov.w	r9, #0
 8004e02:	9700      	str	r7, [sp, #0]
 8004e04:	4633      	mov	r3, r6
 8004e06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 f9d2 	bl	80051b4 <_printf_common>
 8004e10:	3001      	adds	r0, #1
 8004e12:	f040 808d 	bne.w	8004f30 <_printf_float+0x1d0>
 8004e16:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1a:	b00d      	add	sp, #52	@ 0x34
 8004e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	4640      	mov	r0, r8
 8004e26:	4649      	mov	r1, r9
 8004e28:	f7fb fe88 	bl	8000b3c <__aeabi_dcmpun>
 8004e2c:	b140      	cbz	r0, 8004e40 <_printf_float+0xe0>
 8004e2e:	464b      	mov	r3, r9
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bfbc      	itt	lt
 8004e34:	232d      	movlt	r3, #45	@ 0x2d
 8004e36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005034 <_printf_float+0x2d4>)
 8004e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8005038 <_printf_float+0x2d8>)
 8004e3e:	e7d4      	b.n	8004dea <_printf_float+0x8a>
 8004e40:	6863      	ldr	r3, [r4, #4]
 8004e42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e46:	9206      	str	r2, [sp, #24]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	d13b      	bne.n	8004ec4 <_printf_float+0x164>
 8004e4c:	2306      	movs	r3, #6
 8004e4e:	6063      	str	r3, [r4, #4]
 8004e50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004e54:	2300      	movs	r3, #0
 8004e56:	6022      	str	r2, [r4, #0]
 8004e58:	9303      	str	r3, [sp, #12]
 8004e5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e60:	ab09      	add	r3, sp, #36	@ 0x24
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	6861      	ldr	r1, [r4, #4]
 8004e66:	ec49 8b10 	vmov	d0, r8, r9
 8004e6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f7ff fed6 	bl	8004c20 <__cvt>
 8004e74:	9b06      	ldr	r3, [sp, #24]
 8004e76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e78:	2b47      	cmp	r3, #71	@ 0x47
 8004e7a:	4680      	mov	r8, r0
 8004e7c:	d129      	bne.n	8004ed2 <_printf_float+0x172>
 8004e7e:	1cc8      	adds	r0, r1, #3
 8004e80:	db02      	blt.n	8004e88 <_printf_float+0x128>
 8004e82:	6863      	ldr	r3, [r4, #4]
 8004e84:	4299      	cmp	r1, r3
 8004e86:	dd41      	ble.n	8004f0c <_printf_float+0x1ac>
 8004e88:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e8c:	fa5f fa8a 	uxtb.w	sl, sl
 8004e90:	3901      	subs	r1, #1
 8004e92:	4652      	mov	r2, sl
 8004e94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e98:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e9a:	f7ff ff26 	bl	8004cea <__exponent>
 8004e9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ea0:	1813      	adds	r3, r2, r0
 8004ea2:	2a01      	cmp	r2, #1
 8004ea4:	4681      	mov	r9, r0
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	dc02      	bgt.n	8004eb0 <_printf_float+0x150>
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	07d2      	lsls	r2, r2, #31
 8004eae:	d501      	bpl.n	8004eb4 <_printf_float+0x154>
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	6123      	str	r3, [r4, #16]
 8004eb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0a2      	beq.n	8004e02 <_printf_float+0xa2>
 8004ebc:	232d      	movs	r3, #45	@ 0x2d
 8004ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec2:	e79e      	b.n	8004e02 <_printf_float+0xa2>
 8004ec4:	9a06      	ldr	r2, [sp, #24]
 8004ec6:	2a47      	cmp	r2, #71	@ 0x47
 8004ec8:	d1c2      	bne.n	8004e50 <_printf_float+0xf0>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1c0      	bne.n	8004e50 <_printf_float+0xf0>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e7bd      	b.n	8004e4e <_printf_float+0xee>
 8004ed2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ed6:	d9db      	bls.n	8004e90 <_printf_float+0x130>
 8004ed8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004edc:	d118      	bne.n	8004f10 <_printf_float+0x1b0>
 8004ede:	2900      	cmp	r1, #0
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	dd0b      	ble.n	8004efc <_printf_float+0x19c>
 8004ee4:	6121      	str	r1, [r4, #16]
 8004ee6:	b913      	cbnz	r3, 8004eee <_printf_float+0x18e>
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	07d0      	lsls	r0, r2, #31
 8004eec:	d502      	bpl.n	8004ef4 <_printf_float+0x194>
 8004eee:	3301      	adds	r3, #1
 8004ef0:	440b      	add	r3, r1
 8004ef2:	6123      	str	r3, [r4, #16]
 8004ef4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ef6:	f04f 0900 	mov.w	r9, #0
 8004efa:	e7db      	b.n	8004eb4 <_printf_float+0x154>
 8004efc:	b913      	cbnz	r3, 8004f04 <_printf_float+0x1a4>
 8004efe:	6822      	ldr	r2, [r4, #0]
 8004f00:	07d2      	lsls	r2, r2, #31
 8004f02:	d501      	bpl.n	8004f08 <_printf_float+0x1a8>
 8004f04:	3302      	adds	r3, #2
 8004f06:	e7f4      	b.n	8004ef2 <_printf_float+0x192>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e7f2      	b.n	8004ef2 <_printf_float+0x192>
 8004f0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f12:	4299      	cmp	r1, r3
 8004f14:	db05      	blt.n	8004f22 <_printf_float+0x1c2>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	6121      	str	r1, [r4, #16]
 8004f1a:	07d8      	lsls	r0, r3, #31
 8004f1c:	d5ea      	bpl.n	8004ef4 <_printf_float+0x194>
 8004f1e:	1c4b      	adds	r3, r1, #1
 8004f20:	e7e7      	b.n	8004ef2 <_printf_float+0x192>
 8004f22:	2900      	cmp	r1, #0
 8004f24:	bfd4      	ite	le
 8004f26:	f1c1 0202 	rsble	r2, r1, #2
 8004f2a:	2201      	movgt	r2, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	e7e0      	b.n	8004ef2 <_printf_float+0x192>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	055a      	lsls	r2, r3, #21
 8004f34:	d407      	bmi.n	8004f46 <_printf_float+0x1e6>
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	4642      	mov	r2, r8
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	d12b      	bne.n	8004f9c <_printf_float+0x23c>
 8004f44:	e767      	b.n	8004e16 <_printf_float+0xb6>
 8004f46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f4a:	f240 80dd 	bls.w	8005108 <_printf_float+0x3a8>
 8004f4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f52:	2200      	movs	r2, #0
 8004f54:	2300      	movs	r3, #0
 8004f56:	f7fb fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d033      	beq.n	8004fc6 <_printf_float+0x266>
 8004f5e:	4a37      	ldr	r2, [pc, #220]	@ (800503c <_printf_float+0x2dc>)
 8004f60:	2301      	movs	r3, #1
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f43f af54 	beq.w	8004e16 <_printf_float+0xb6>
 8004f6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f72:	4543      	cmp	r3, r8
 8004f74:	db02      	blt.n	8004f7c <_printf_float+0x21c>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	07d8      	lsls	r0, r3, #31
 8004f7a:	d50f      	bpl.n	8004f9c <_printf_float+0x23c>
 8004f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f80:	4631      	mov	r1, r6
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	f43f af45 	beq.w	8004e16 <_printf_float+0xb6>
 8004f8c:	f04f 0900 	mov.w	r9, #0
 8004f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f94:	f104 0a1a 	add.w	sl, r4, #26
 8004f98:	45c8      	cmp	r8, r9
 8004f9a:	dc09      	bgt.n	8004fb0 <_printf_float+0x250>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	079b      	lsls	r3, r3, #30
 8004fa0:	f100 8103 	bmi.w	80051aa <_printf_float+0x44a>
 8004fa4:	68e0      	ldr	r0, [r4, #12]
 8004fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fa8:	4298      	cmp	r0, r3
 8004faa:	bfb8      	it	lt
 8004fac:	4618      	movlt	r0, r3
 8004fae:	e734      	b.n	8004e1a <_printf_float+0xba>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	4652      	mov	r2, sl
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	47b8      	blx	r7
 8004fba:	3001      	adds	r0, #1
 8004fbc:	f43f af2b 	beq.w	8004e16 <_printf_float+0xb6>
 8004fc0:	f109 0901 	add.w	r9, r9, #1
 8004fc4:	e7e8      	b.n	8004f98 <_printf_float+0x238>
 8004fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dc39      	bgt.n	8005040 <_printf_float+0x2e0>
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800503c <_printf_float+0x2dc>)
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f af1d 	beq.w	8004e16 <_printf_float+0xb6>
 8004fdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004fe0:	ea59 0303 	orrs.w	r3, r9, r3
 8004fe4:	d102      	bne.n	8004fec <_printf_float+0x28c>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	07d9      	lsls	r1, r3, #31
 8004fea:	d5d7      	bpl.n	8004f9c <_printf_float+0x23c>
 8004fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f af0d 	beq.w	8004e16 <_printf_float+0xb6>
 8004ffc:	f04f 0a00 	mov.w	sl, #0
 8005000:	f104 0b1a 	add.w	fp, r4, #26
 8005004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005006:	425b      	negs	r3, r3
 8005008:	4553      	cmp	r3, sl
 800500a:	dc01      	bgt.n	8005010 <_printf_float+0x2b0>
 800500c:	464b      	mov	r3, r9
 800500e:	e793      	b.n	8004f38 <_printf_float+0x1d8>
 8005010:	2301      	movs	r3, #1
 8005012:	465a      	mov	r2, fp
 8005014:	4631      	mov	r1, r6
 8005016:	4628      	mov	r0, r5
 8005018:	47b8      	blx	r7
 800501a:	3001      	adds	r0, #1
 800501c:	f43f aefb 	beq.w	8004e16 <_printf_float+0xb6>
 8005020:	f10a 0a01 	add.w	sl, sl, #1
 8005024:	e7ee      	b.n	8005004 <_printf_float+0x2a4>
 8005026:	bf00      	nop
 8005028:	7fefffff 	.word	0x7fefffff
 800502c:	08007c34 	.word	0x08007c34
 8005030:	08007c38 	.word	0x08007c38
 8005034:	08007c3c 	.word	0x08007c3c
 8005038:	08007c40 	.word	0x08007c40
 800503c:	08007c44 	.word	0x08007c44
 8005040:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005042:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005046:	4553      	cmp	r3, sl
 8005048:	bfa8      	it	ge
 800504a:	4653      	movge	r3, sl
 800504c:	2b00      	cmp	r3, #0
 800504e:	4699      	mov	r9, r3
 8005050:	dc36      	bgt.n	80050c0 <_printf_float+0x360>
 8005052:	f04f 0b00 	mov.w	fp, #0
 8005056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800505a:	f104 021a 	add.w	r2, r4, #26
 800505e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005060:	9306      	str	r3, [sp, #24]
 8005062:	eba3 0309 	sub.w	r3, r3, r9
 8005066:	455b      	cmp	r3, fp
 8005068:	dc31      	bgt.n	80050ce <_printf_float+0x36e>
 800506a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800506c:	459a      	cmp	sl, r3
 800506e:	dc3a      	bgt.n	80050e6 <_printf_float+0x386>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	07da      	lsls	r2, r3, #31
 8005074:	d437      	bmi.n	80050e6 <_printf_float+0x386>
 8005076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005078:	ebaa 0903 	sub.w	r9, sl, r3
 800507c:	9b06      	ldr	r3, [sp, #24]
 800507e:	ebaa 0303 	sub.w	r3, sl, r3
 8005082:	4599      	cmp	r9, r3
 8005084:	bfa8      	it	ge
 8005086:	4699      	movge	r9, r3
 8005088:	f1b9 0f00 	cmp.w	r9, #0
 800508c:	dc33      	bgt.n	80050f6 <_printf_float+0x396>
 800508e:	f04f 0800 	mov.w	r8, #0
 8005092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005096:	f104 0b1a 	add.w	fp, r4, #26
 800509a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800509c:	ebaa 0303 	sub.w	r3, sl, r3
 80050a0:	eba3 0309 	sub.w	r3, r3, r9
 80050a4:	4543      	cmp	r3, r8
 80050a6:	f77f af79 	ble.w	8004f9c <_printf_float+0x23c>
 80050aa:	2301      	movs	r3, #1
 80050ac:	465a      	mov	r2, fp
 80050ae:	4631      	mov	r1, r6
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b8      	blx	r7
 80050b4:	3001      	adds	r0, #1
 80050b6:	f43f aeae 	beq.w	8004e16 <_printf_float+0xb6>
 80050ba:	f108 0801 	add.w	r8, r8, #1
 80050be:	e7ec      	b.n	800509a <_printf_float+0x33a>
 80050c0:	4642      	mov	r2, r8
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	d1c2      	bne.n	8005052 <_printf_float+0x2f2>
 80050cc:	e6a3      	b.n	8004e16 <_printf_float+0xb6>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	9206      	str	r2, [sp, #24]
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	f43f ae9c 	beq.w	8004e16 <_printf_float+0xb6>
 80050de:	9a06      	ldr	r2, [sp, #24]
 80050e0:	f10b 0b01 	add.w	fp, fp, #1
 80050e4:	e7bb      	b.n	800505e <_printf_float+0x2fe>
 80050e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	d1c0      	bne.n	8005076 <_printf_float+0x316>
 80050f4:	e68f      	b.n	8004e16 <_printf_float+0xb6>
 80050f6:	9a06      	ldr	r2, [sp, #24]
 80050f8:	464b      	mov	r3, r9
 80050fa:	4442      	add	r2, r8
 80050fc:	4631      	mov	r1, r6
 80050fe:	4628      	mov	r0, r5
 8005100:	47b8      	blx	r7
 8005102:	3001      	adds	r0, #1
 8005104:	d1c3      	bne.n	800508e <_printf_float+0x32e>
 8005106:	e686      	b.n	8004e16 <_printf_float+0xb6>
 8005108:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800510c:	f1ba 0f01 	cmp.w	sl, #1
 8005110:	dc01      	bgt.n	8005116 <_printf_float+0x3b6>
 8005112:	07db      	lsls	r3, r3, #31
 8005114:	d536      	bpl.n	8005184 <_printf_float+0x424>
 8005116:	2301      	movs	r3, #1
 8005118:	4642      	mov	r2, r8
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	f43f ae78 	beq.w	8004e16 <_printf_float+0xb6>
 8005126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800512a:	4631      	mov	r1, r6
 800512c:	4628      	mov	r0, r5
 800512e:	47b8      	blx	r7
 8005130:	3001      	adds	r0, #1
 8005132:	f43f ae70 	beq.w	8004e16 <_printf_float+0xb6>
 8005136:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800513a:	2200      	movs	r2, #0
 800513c:	2300      	movs	r3, #0
 800513e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005142:	f7fb fcc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005146:	b9c0      	cbnz	r0, 800517a <_printf_float+0x41a>
 8005148:	4653      	mov	r3, sl
 800514a:	f108 0201 	add.w	r2, r8, #1
 800514e:	4631      	mov	r1, r6
 8005150:	4628      	mov	r0, r5
 8005152:	47b8      	blx	r7
 8005154:	3001      	adds	r0, #1
 8005156:	d10c      	bne.n	8005172 <_printf_float+0x412>
 8005158:	e65d      	b.n	8004e16 <_printf_float+0xb6>
 800515a:	2301      	movs	r3, #1
 800515c:	465a      	mov	r2, fp
 800515e:	4631      	mov	r1, r6
 8005160:	4628      	mov	r0, r5
 8005162:	47b8      	blx	r7
 8005164:	3001      	adds	r0, #1
 8005166:	f43f ae56 	beq.w	8004e16 <_printf_float+0xb6>
 800516a:	f108 0801 	add.w	r8, r8, #1
 800516e:	45d0      	cmp	r8, sl
 8005170:	dbf3      	blt.n	800515a <_printf_float+0x3fa>
 8005172:	464b      	mov	r3, r9
 8005174:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005178:	e6df      	b.n	8004f3a <_printf_float+0x1da>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	f104 0b1a 	add.w	fp, r4, #26
 8005182:	e7f4      	b.n	800516e <_printf_float+0x40e>
 8005184:	2301      	movs	r3, #1
 8005186:	4642      	mov	r2, r8
 8005188:	e7e1      	b.n	800514e <_printf_float+0x3ee>
 800518a:	2301      	movs	r3, #1
 800518c:	464a      	mov	r2, r9
 800518e:	4631      	mov	r1, r6
 8005190:	4628      	mov	r0, r5
 8005192:	47b8      	blx	r7
 8005194:	3001      	adds	r0, #1
 8005196:	f43f ae3e 	beq.w	8004e16 <_printf_float+0xb6>
 800519a:	f108 0801 	add.w	r8, r8, #1
 800519e:	68e3      	ldr	r3, [r4, #12]
 80051a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80051a2:	1a5b      	subs	r3, r3, r1
 80051a4:	4543      	cmp	r3, r8
 80051a6:	dcf0      	bgt.n	800518a <_printf_float+0x42a>
 80051a8:	e6fc      	b.n	8004fa4 <_printf_float+0x244>
 80051aa:	f04f 0800 	mov.w	r8, #0
 80051ae:	f104 0919 	add.w	r9, r4, #25
 80051b2:	e7f4      	b.n	800519e <_printf_float+0x43e>

080051b4 <_printf_common>:
 80051b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	4616      	mov	r6, r2
 80051ba:	4698      	mov	r8, r3
 80051bc:	688a      	ldr	r2, [r1, #8]
 80051be:	690b      	ldr	r3, [r1, #16]
 80051c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	bfb8      	it	lt
 80051c8:	4613      	movlt	r3, r2
 80051ca:	6033      	str	r3, [r6, #0]
 80051cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051d0:	4607      	mov	r7, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	b10a      	cbz	r2, 80051da <_printf_common+0x26>
 80051d6:	3301      	adds	r3, #1
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	0699      	lsls	r1, r3, #26
 80051de:	bf42      	ittt	mi
 80051e0:	6833      	ldrmi	r3, [r6, #0]
 80051e2:	3302      	addmi	r3, #2
 80051e4:	6033      	strmi	r3, [r6, #0]
 80051e6:	6825      	ldr	r5, [r4, #0]
 80051e8:	f015 0506 	ands.w	r5, r5, #6
 80051ec:	d106      	bne.n	80051fc <_printf_common+0x48>
 80051ee:	f104 0a19 	add.w	sl, r4, #25
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	6832      	ldr	r2, [r6, #0]
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	dc26      	bgt.n	800524a <_printf_common+0x96>
 80051fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	3b00      	subs	r3, #0
 8005204:	bf18      	it	ne
 8005206:	2301      	movne	r3, #1
 8005208:	0692      	lsls	r2, r2, #26
 800520a:	d42b      	bmi.n	8005264 <_printf_common+0xb0>
 800520c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005210:	4641      	mov	r1, r8
 8005212:	4638      	mov	r0, r7
 8005214:	47c8      	blx	r9
 8005216:	3001      	adds	r0, #1
 8005218:	d01e      	beq.n	8005258 <_printf_common+0xa4>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	f003 0306 	and.w	r3, r3, #6
 8005222:	2b04      	cmp	r3, #4
 8005224:	bf02      	ittt	eq
 8005226:	68e5      	ldreq	r5, [r4, #12]
 8005228:	6833      	ldreq	r3, [r6, #0]
 800522a:	1aed      	subeq	r5, r5, r3
 800522c:	68a3      	ldr	r3, [r4, #8]
 800522e:	bf0c      	ite	eq
 8005230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005234:	2500      	movne	r5, #0
 8005236:	4293      	cmp	r3, r2
 8005238:	bfc4      	itt	gt
 800523a:	1a9b      	subgt	r3, r3, r2
 800523c:	18ed      	addgt	r5, r5, r3
 800523e:	2600      	movs	r6, #0
 8005240:	341a      	adds	r4, #26
 8005242:	42b5      	cmp	r5, r6
 8005244:	d11a      	bne.n	800527c <_printf_common+0xc8>
 8005246:	2000      	movs	r0, #0
 8005248:	e008      	b.n	800525c <_printf_common+0xa8>
 800524a:	2301      	movs	r3, #1
 800524c:	4652      	mov	r2, sl
 800524e:	4641      	mov	r1, r8
 8005250:	4638      	mov	r0, r7
 8005252:	47c8      	blx	r9
 8005254:	3001      	adds	r0, #1
 8005256:	d103      	bne.n	8005260 <_printf_common+0xac>
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005260:	3501      	adds	r5, #1
 8005262:	e7c6      	b.n	80051f2 <_printf_common+0x3e>
 8005264:	18e1      	adds	r1, r4, r3
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	2030      	movs	r0, #48	@ 0x30
 800526a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800526e:	4422      	add	r2, r4
 8005270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005278:	3302      	adds	r3, #2
 800527a:	e7c7      	b.n	800520c <_printf_common+0x58>
 800527c:	2301      	movs	r3, #1
 800527e:	4622      	mov	r2, r4
 8005280:	4641      	mov	r1, r8
 8005282:	4638      	mov	r0, r7
 8005284:	47c8      	blx	r9
 8005286:	3001      	adds	r0, #1
 8005288:	d0e6      	beq.n	8005258 <_printf_common+0xa4>
 800528a:	3601      	adds	r6, #1
 800528c:	e7d9      	b.n	8005242 <_printf_common+0x8e>
	...

08005290 <_printf_i>:
 8005290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	7e0f      	ldrb	r7, [r1, #24]
 8005296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005298:	2f78      	cmp	r7, #120	@ 0x78
 800529a:	4691      	mov	r9, r2
 800529c:	4680      	mov	r8, r0
 800529e:	460c      	mov	r4, r1
 80052a0:	469a      	mov	sl, r3
 80052a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052a6:	d807      	bhi.n	80052b8 <_printf_i+0x28>
 80052a8:	2f62      	cmp	r7, #98	@ 0x62
 80052aa:	d80a      	bhi.n	80052c2 <_printf_i+0x32>
 80052ac:	2f00      	cmp	r7, #0
 80052ae:	f000 80d2 	beq.w	8005456 <_printf_i+0x1c6>
 80052b2:	2f58      	cmp	r7, #88	@ 0x58
 80052b4:	f000 80b9 	beq.w	800542a <_printf_i+0x19a>
 80052b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052c0:	e03a      	b.n	8005338 <_printf_i+0xa8>
 80052c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052c6:	2b15      	cmp	r3, #21
 80052c8:	d8f6      	bhi.n	80052b8 <_printf_i+0x28>
 80052ca:	a101      	add	r1, pc, #4	@ (adr r1, 80052d0 <_printf_i+0x40>)
 80052cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d0:	08005329 	.word	0x08005329
 80052d4:	0800533d 	.word	0x0800533d
 80052d8:	080052b9 	.word	0x080052b9
 80052dc:	080052b9 	.word	0x080052b9
 80052e0:	080052b9 	.word	0x080052b9
 80052e4:	080052b9 	.word	0x080052b9
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	080052b9 	.word	0x080052b9
 80052f0:	080052b9 	.word	0x080052b9
 80052f4:	080052b9 	.word	0x080052b9
 80052f8:	080052b9 	.word	0x080052b9
 80052fc:	0800543d 	.word	0x0800543d
 8005300:	08005367 	.word	0x08005367
 8005304:	080053f7 	.word	0x080053f7
 8005308:	080052b9 	.word	0x080052b9
 800530c:	080052b9 	.word	0x080052b9
 8005310:	0800545f 	.word	0x0800545f
 8005314:	080052b9 	.word	0x080052b9
 8005318:	08005367 	.word	0x08005367
 800531c:	080052b9 	.word	0x080052b9
 8005320:	080052b9 	.word	0x080052b9
 8005324:	080053ff 	.word	0x080053ff
 8005328:	6833      	ldr	r3, [r6, #0]
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6032      	str	r2, [r6, #0]
 8005330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005338:	2301      	movs	r3, #1
 800533a:	e09d      	b.n	8005478 <_printf_i+0x1e8>
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	1d19      	adds	r1, r3, #4
 8005342:	6031      	str	r1, [r6, #0]
 8005344:	0606      	lsls	r6, r0, #24
 8005346:	d501      	bpl.n	800534c <_printf_i+0xbc>
 8005348:	681d      	ldr	r5, [r3, #0]
 800534a:	e003      	b.n	8005354 <_printf_i+0xc4>
 800534c:	0645      	lsls	r5, r0, #25
 800534e:	d5fb      	bpl.n	8005348 <_printf_i+0xb8>
 8005350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005354:	2d00      	cmp	r5, #0
 8005356:	da03      	bge.n	8005360 <_printf_i+0xd0>
 8005358:	232d      	movs	r3, #45	@ 0x2d
 800535a:	426d      	negs	r5, r5
 800535c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005360:	4859      	ldr	r0, [pc, #356]	@ (80054c8 <_printf_i+0x238>)
 8005362:	230a      	movs	r3, #10
 8005364:	e011      	b.n	800538a <_printf_i+0xfa>
 8005366:	6821      	ldr	r1, [r4, #0]
 8005368:	6833      	ldr	r3, [r6, #0]
 800536a:	0608      	lsls	r0, r1, #24
 800536c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005370:	d402      	bmi.n	8005378 <_printf_i+0xe8>
 8005372:	0649      	lsls	r1, r1, #25
 8005374:	bf48      	it	mi
 8005376:	b2ad      	uxthmi	r5, r5
 8005378:	2f6f      	cmp	r7, #111	@ 0x6f
 800537a:	4853      	ldr	r0, [pc, #332]	@ (80054c8 <_printf_i+0x238>)
 800537c:	6033      	str	r3, [r6, #0]
 800537e:	bf14      	ite	ne
 8005380:	230a      	movne	r3, #10
 8005382:	2308      	moveq	r3, #8
 8005384:	2100      	movs	r1, #0
 8005386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800538a:	6866      	ldr	r6, [r4, #4]
 800538c:	60a6      	str	r6, [r4, #8]
 800538e:	2e00      	cmp	r6, #0
 8005390:	bfa2      	ittt	ge
 8005392:	6821      	ldrge	r1, [r4, #0]
 8005394:	f021 0104 	bicge.w	r1, r1, #4
 8005398:	6021      	strge	r1, [r4, #0]
 800539a:	b90d      	cbnz	r5, 80053a0 <_printf_i+0x110>
 800539c:	2e00      	cmp	r6, #0
 800539e:	d04b      	beq.n	8005438 <_printf_i+0x1a8>
 80053a0:	4616      	mov	r6, r2
 80053a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80053a6:	fb03 5711 	mls	r7, r3, r1, r5
 80053aa:	5dc7      	ldrb	r7, [r0, r7]
 80053ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053b0:	462f      	mov	r7, r5
 80053b2:	42bb      	cmp	r3, r7
 80053b4:	460d      	mov	r5, r1
 80053b6:	d9f4      	bls.n	80053a2 <_printf_i+0x112>
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d10b      	bne.n	80053d4 <_printf_i+0x144>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	07df      	lsls	r7, r3, #31
 80053c0:	d508      	bpl.n	80053d4 <_printf_i+0x144>
 80053c2:	6923      	ldr	r3, [r4, #16]
 80053c4:	6861      	ldr	r1, [r4, #4]
 80053c6:	4299      	cmp	r1, r3
 80053c8:	bfde      	ittt	le
 80053ca:	2330      	movle	r3, #48	@ 0x30
 80053cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053d4:	1b92      	subs	r2, r2, r6
 80053d6:	6122      	str	r2, [r4, #16]
 80053d8:	f8cd a000 	str.w	sl, [sp]
 80053dc:	464b      	mov	r3, r9
 80053de:	aa03      	add	r2, sp, #12
 80053e0:	4621      	mov	r1, r4
 80053e2:	4640      	mov	r0, r8
 80053e4:	f7ff fee6 	bl	80051b4 <_printf_common>
 80053e8:	3001      	adds	r0, #1
 80053ea:	d14a      	bne.n	8005482 <_printf_i+0x1f2>
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295
 80053f0:	b004      	add	sp, #16
 80053f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f043 0320 	orr.w	r3, r3, #32
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	4833      	ldr	r0, [pc, #204]	@ (80054cc <_printf_i+0x23c>)
 8005400:	2778      	movs	r7, #120	@ 0x78
 8005402:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	6831      	ldr	r1, [r6, #0]
 800540a:	061f      	lsls	r7, r3, #24
 800540c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005410:	d402      	bmi.n	8005418 <_printf_i+0x188>
 8005412:	065f      	lsls	r7, r3, #25
 8005414:	bf48      	it	mi
 8005416:	b2ad      	uxthmi	r5, r5
 8005418:	6031      	str	r1, [r6, #0]
 800541a:	07d9      	lsls	r1, r3, #31
 800541c:	bf44      	itt	mi
 800541e:	f043 0320 	orrmi.w	r3, r3, #32
 8005422:	6023      	strmi	r3, [r4, #0]
 8005424:	b11d      	cbz	r5, 800542e <_printf_i+0x19e>
 8005426:	2310      	movs	r3, #16
 8005428:	e7ac      	b.n	8005384 <_printf_i+0xf4>
 800542a:	4827      	ldr	r0, [pc, #156]	@ (80054c8 <_printf_i+0x238>)
 800542c:	e7e9      	b.n	8005402 <_printf_i+0x172>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	f023 0320 	bic.w	r3, r3, #32
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	e7f6      	b.n	8005426 <_printf_i+0x196>
 8005438:	4616      	mov	r6, r2
 800543a:	e7bd      	b.n	80053b8 <_printf_i+0x128>
 800543c:	6833      	ldr	r3, [r6, #0]
 800543e:	6825      	ldr	r5, [r4, #0]
 8005440:	6961      	ldr	r1, [r4, #20]
 8005442:	1d18      	adds	r0, r3, #4
 8005444:	6030      	str	r0, [r6, #0]
 8005446:	062e      	lsls	r6, r5, #24
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	d501      	bpl.n	8005450 <_printf_i+0x1c0>
 800544c:	6019      	str	r1, [r3, #0]
 800544e:	e002      	b.n	8005456 <_printf_i+0x1c6>
 8005450:	0668      	lsls	r0, r5, #25
 8005452:	d5fb      	bpl.n	800544c <_printf_i+0x1bc>
 8005454:	8019      	strh	r1, [r3, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	4616      	mov	r6, r2
 800545c:	e7bc      	b.n	80053d8 <_printf_i+0x148>
 800545e:	6833      	ldr	r3, [r6, #0]
 8005460:	1d1a      	adds	r2, r3, #4
 8005462:	6032      	str	r2, [r6, #0]
 8005464:	681e      	ldr	r6, [r3, #0]
 8005466:	6862      	ldr	r2, [r4, #4]
 8005468:	2100      	movs	r1, #0
 800546a:	4630      	mov	r0, r6
 800546c:	f7fa feb8 	bl	80001e0 <memchr>
 8005470:	b108      	cbz	r0, 8005476 <_printf_i+0x1e6>
 8005472:	1b80      	subs	r0, r0, r6
 8005474:	6060      	str	r0, [r4, #4]
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	2300      	movs	r3, #0
 800547c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005480:	e7aa      	b.n	80053d8 <_printf_i+0x148>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	4632      	mov	r2, r6
 8005486:	4649      	mov	r1, r9
 8005488:	4640      	mov	r0, r8
 800548a:	47d0      	blx	sl
 800548c:	3001      	adds	r0, #1
 800548e:	d0ad      	beq.n	80053ec <_printf_i+0x15c>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	079b      	lsls	r3, r3, #30
 8005494:	d413      	bmi.n	80054be <_printf_i+0x22e>
 8005496:	68e0      	ldr	r0, [r4, #12]
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	4298      	cmp	r0, r3
 800549c:	bfb8      	it	lt
 800549e:	4618      	movlt	r0, r3
 80054a0:	e7a6      	b.n	80053f0 <_printf_i+0x160>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4632      	mov	r2, r6
 80054a6:	4649      	mov	r1, r9
 80054a8:	4640      	mov	r0, r8
 80054aa:	47d0      	blx	sl
 80054ac:	3001      	adds	r0, #1
 80054ae:	d09d      	beq.n	80053ec <_printf_i+0x15c>
 80054b0:	3501      	adds	r5, #1
 80054b2:	68e3      	ldr	r3, [r4, #12]
 80054b4:	9903      	ldr	r1, [sp, #12]
 80054b6:	1a5b      	subs	r3, r3, r1
 80054b8:	42ab      	cmp	r3, r5
 80054ba:	dcf2      	bgt.n	80054a2 <_printf_i+0x212>
 80054bc:	e7eb      	b.n	8005496 <_printf_i+0x206>
 80054be:	2500      	movs	r5, #0
 80054c0:	f104 0619 	add.w	r6, r4, #25
 80054c4:	e7f5      	b.n	80054b2 <_printf_i+0x222>
 80054c6:	bf00      	nop
 80054c8:	08007c46 	.word	0x08007c46
 80054cc:	08007c57 	.word	0x08007c57

080054d0 <std>:
 80054d0:	2300      	movs	r3, #0
 80054d2:	b510      	push	{r4, lr}
 80054d4:	4604      	mov	r4, r0
 80054d6:	e9c0 3300 	strd	r3, r3, [r0]
 80054da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054de:	6083      	str	r3, [r0, #8]
 80054e0:	8181      	strh	r1, [r0, #12]
 80054e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80054e4:	81c2      	strh	r2, [r0, #14]
 80054e6:	6183      	str	r3, [r0, #24]
 80054e8:	4619      	mov	r1, r3
 80054ea:	2208      	movs	r2, #8
 80054ec:	305c      	adds	r0, #92	@ 0x5c
 80054ee:	f000 f9f9 	bl	80058e4 <memset>
 80054f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <std+0x58>)
 80054f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80054f6:	4b0d      	ldr	r3, [pc, #52]	@ (800552c <std+0x5c>)
 80054f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <std+0x60>)
 80054fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005534 <std+0x64>)
 8005500:	6323      	str	r3, [r4, #48]	@ 0x30
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <std+0x68>)
 8005504:	6224      	str	r4, [r4, #32]
 8005506:	429c      	cmp	r4, r3
 8005508:	d006      	beq.n	8005518 <std+0x48>
 800550a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800550e:	4294      	cmp	r4, r2
 8005510:	d002      	beq.n	8005518 <std+0x48>
 8005512:	33d0      	adds	r3, #208	@ 0xd0
 8005514:	429c      	cmp	r4, r3
 8005516:	d105      	bne.n	8005524 <std+0x54>
 8005518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800551c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005520:	f000 ba6c 	b.w	80059fc <__retarget_lock_init_recursive>
 8005524:	bd10      	pop	{r4, pc}
 8005526:	bf00      	nop
 8005528:	08005735 	.word	0x08005735
 800552c:	08005757 	.word	0x08005757
 8005530:	0800578f 	.word	0x0800578f
 8005534:	080057b3 	.word	0x080057b3
 8005538:	20000970 	.word	0x20000970

0800553c <stdio_exit_handler>:
 800553c:	4a02      	ldr	r2, [pc, #8]	@ (8005548 <stdio_exit_handler+0xc>)
 800553e:	4903      	ldr	r1, [pc, #12]	@ (800554c <stdio_exit_handler+0x10>)
 8005540:	4803      	ldr	r0, [pc, #12]	@ (8005550 <stdio_exit_handler+0x14>)
 8005542:	f000 b869 	b.w	8005618 <_fwalk_sglue>
 8005546:	bf00      	nop
 8005548:	20000694 	.word	0x20000694
 800554c:	080071dd 	.word	0x080071dd
 8005550:	200006a4 	.word	0x200006a4

08005554 <cleanup_stdio>:
 8005554:	6841      	ldr	r1, [r0, #4]
 8005556:	4b0c      	ldr	r3, [pc, #48]	@ (8005588 <cleanup_stdio+0x34>)
 8005558:	4299      	cmp	r1, r3
 800555a:	b510      	push	{r4, lr}
 800555c:	4604      	mov	r4, r0
 800555e:	d001      	beq.n	8005564 <cleanup_stdio+0x10>
 8005560:	f001 fe3c 	bl	80071dc <_fflush_r>
 8005564:	68a1      	ldr	r1, [r4, #8]
 8005566:	4b09      	ldr	r3, [pc, #36]	@ (800558c <cleanup_stdio+0x38>)
 8005568:	4299      	cmp	r1, r3
 800556a:	d002      	beq.n	8005572 <cleanup_stdio+0x1e>
 800556c:	4620      	mov	r0, r4
 800556e:	f001 fe35 	bl	80071dc <_fflush_r>
 8005572:	68e1      	ldr	r1, [r4, #12]
 8005574:	4b06      	ldr	r3, [pc, #24]	@ (8005590 <cleanup_stdio+0x3c>)
 8005576:	4299      	cmp	r1, r3
 8005578:	d004      	beq.n	8005584 <cleanup_stdio+0x30>
 800557a:	4620      	mov	r0, r4
 800557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005580:	f001 be2c 	b.w	80071dc <_fflush_r>
 8005584:	bd10      	pop	{r4, pc}
 8005586:	bf00      	nop
 8005588:	20000970 	.word	0x20000970
 800558c:	200009d8 	.word	0x200009d8
 8005590:	20000a40 	.word	0x20000a40

08005594 <global_stdio_init.part.0>:
 8005594:	b510      	push	{r4, lr}
 8005596:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <global_stdio_init.part.0+0x30>)
 8005598:	4c0b      	ldr	r4, [pc, #44]	@ (80055c8 <global_stdio_init.part.0+0x34>)
 800559a:	4a0c      	ldr	r2, [pc, #48]	@ (80055cc <global_stdio_init.part.0+0x38>)
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	4620      	mov	r0, r4
 80055a0:	2200      	movs	r2, #0
 80055a2:	2104      	movs	r1, #4
 80055a4:	f7ff ff94 	bl	80054d0 <std>
 80055a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055ac:	2201      	movs	r2, #1
 80055ae:	2109      	movs	r1, #9
 80055b0:	f7ff ff8e 	bl	80054d0 <std>
 80055b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055b8:	2202      	movs	r2, #2
 80055ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055be:	2112      	movs	r1, #18
 80055c0:	f7ff bf86 	b.w	80054d0 <std>
 80055c4:	20000aa8 	.word	0x20000aa8
 80055c8:	20000970 	.word	0x20000970
 80055cc:	0800553d 	.word	0x0800553d

080055d0 <__sfp_lock_acquire>:
 80055d0:	4801      	ldr	r0, [pc, #4]	@ (80055d8 <__sfp_lock_acquire+0x8>)
 80055d2:	f000 ba14 	b.w	80059fe <__retarget_lock_acquire_recursive>
 80055d6:	bf00      	nop
 80055d8:	20000ab1 	.word	0x20000ab1

080055dc <__sfp_lock_release>:
 80055dc:	4801      	ldr	r0, [pc, #4]	@ (80055e4 <__sfp_lock_release+0x8>)
 80055de:	f000 ba0f 	b.w	8005a00 <__retarget_lock_release_recursive>
 80055e2:	bf00      	nop
 80055e4:	20000ab1 	.word	0x20000ab1

080055e8 <__sinit>:
 80055e8:	b510      	push	{r4, lr}
 80055ea:	4604      	mov	r4, r0
 80055ec:	f7ff fff0 	bl	80055d0 <__sfp_lock_acquire>
 80055f0:	6a23      	ldr	r3, [r4, #32]
 80055f2:	b11b      	cbz	r3, 80055fc <__sinit+0x14>
 80055f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f8:	f7ff bff0 	b.w	80055dc <__sfp_lock_release>
 80055fc:	4b04      	ldr	r3, [pc, #16]	@ (8005610 <__sinit+0x28>)
 80055fe:	6223      	str	r3, [r4, #32]
 8005600:	4b04      	ldr	r3, [pc, #16]	@ (8005614 <__sinit+0x2c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f5      	bne.n	80055f4 <__sinit+0xc>
 8005608:	f7ff ffc4 	bl	8005594 <global_stdio_init.part.0>
 800560c:	e7f2      	b.n	80055f4 <__sinit+0xc>
 800560e:	bf00      	nop
 8005610:	08005555 	.word	0x08005555
 8005614:	20000aa8 	.word	0x20000aa8

08005618 <_fwalk_sglue>:
 8005618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800561c:	4607      	mov	r7, r0
 800561e:	4688      	mov	r8, r1
 8005620:	4614      	mov	r4, r2
 8005622:	2600      	movs	r6, #0
 8005624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005628:	f1b9 0901 	subs.w	r9, r9, #1
 800562c:	d505      	bpl.n	800563a <_fwalk_sglue+0x22>
 800562e:	6824      	ldr	r4, [r4, #0]
 8005630:	2c00      	cmp	r4, #0
 8005632:	d1f7      	bne.n	8005624 <_fwalk_sglue+0xc>
 8005634:	4630      	mov	r0, r6
 8005636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800563a:	89ab      	ldrh	r3, [r5, #12]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d907      	bls.n	8005650 <_fwalk_sglue+0x38>
 8005640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005644:	3301      	adds	r3, #1
 8005646:	d003      	beq.n	8005650 <_fwalk_sglue+0x38>
 8005648:	4629      	mov	r1, r5
 800564a:	4638      	mov	r0, r7
 800564c:	47c0      	blx	r8
 800564e:	4306      	orrs	r6, r0
 8005650:	3568      	adds	r5, #104	@ 0x68
 8005652:	e7e9      	b.n	8005628 <_fwalk_sglue+0x10>

08005654 <iprintf>:
 8005654:	b40f      	push	{r0, r1, r2, r3}
 8005656:	b507      	push	{r0, r1, r2, lr}
 8005658:	4906      	ldr	r1, [pc, #24]	@ (8005674 <iprintf+0x20>)
 800565a:	ab04      	add	r3, sp, #16
 800565c:	6808      	ldr	r0, [r1, #0]
 800565e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005662:	6881      	ldr	r1, [r0, #8]
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	f001 fc1d 	bl	8006ea4 <_vfiprintf_r>
 800566a:	b003      	add	sp, #12
 800566c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005670:	b004      	add	sp, #16
 8005672:	4770      	bx	lr
 8005674:	200006a0 	.word	0x200006a0

08005678 <_puts_r>:
 8005678:	6a03      	ldr	r3, [r0, #32]
 800567a:	b570      	push	{r4, r5, r6, lr}
 800567c:	6884      	ldr	r4, [r0, #8]
 800567e:	4605      	mov	r5, r0
 8005680:	460e      	mov	r6, r1
 8005682:	b90b      	cbnz	r3, 8005688 <_puts_r+0x10>
 8005684:	f7ff ffb0 	bl	80055e8 <__sinit>
 8005688:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800568a:	07db      	lsls	r3, r3, #31
 800568c:	d405      	bmi.n	800569a <_puts_r+0x22>
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	0598      	lsls	r0, r3, #22
 8005692:	d402      	bmi.n	800569a <_puts_r+0x22>
 8005694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005696:	f000 f9b2 	bl	80059fe <__retarget_lock_acquire_recursive>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	0719      	lsls	r1, r3, #28
 800569e:	d502      	bpl.n	80056a6 <_puts_r+0x2e>
 80056a0:	6923      	ldr	r3, [r4, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d135      	bne.n	8005712 <_puts_r+0x9a>
 80056a6:	4621      	mov	r1, r4
 80056a8:	4628      	mov	r0, r5
 80056aa:	f000 f8c5 	bl	8005838 <__swsetup_r>
 80056ae:	b380      	cbz	r0, 8005712 <_puts_r+0x9a>
 80056b0:	f04f 35ff 	mov.w	r5, #4294967295
 80056b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056b6:	07da      	lsls	r2, r3, #31
 80056b8:	d405      	bmi.n	80056c6 <_puts_r+0x4e>
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	059b      	lsls	r3, r3, #22
 80056be:	d402      	bmi.n	80056c6 <_puts_r+0x4e>
 80056c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056c2:	f000 f99d 	bl	8005a00 <__retarget_lock_release_recursive>
 80056c6:	4628      	mov	r0, r5
 80056c8:	bd70      	pop	{r4, r5, r6, pc}
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	da04      	bge.n	80056d8 <_puts_r+0x60>
 80056ce:	69a2      	ldr	r2, [r4, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	dc17      	bgt.n	8005704 <_puts_r+0x8c>
 80056d4:	290a      	cmp	r1, #10
 80056d6:	d015      	beq.n	8005704 <_puts_r+0x8c>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	6022      	str	r2, [r4, #0]
 80056de:	7019      	strb	r1, [r3, #0]
 80056e0:	68a3      	ldr	r3, [r4, #8]
 80056e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056e6:	3b01      	subs	r3, #1
 80056e8:	60a3      	str	r3, [r4, #8]
 80056ea:	2900      	cmp	r1, #0
 80056ec:	d1ed      	bne.n	80056ca <_puts_r+0x52>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	da11      	bge.n	8005716 <_puts_r+0x9e>
 80056f2:	4622      	mov	r2, r4
 80056f4:	210a      	movs	r1, #10
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 f85f 	bl	80057ba <__swbuf_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d0d7      	beq.n	80056b0 <_puts_r+0x38>
 8005700:	250a      	movs	r5, #10
 8005702:	e7d7      	b.n	80056b4 <_puts_r+0x3c>
 8005704:	4622      	mov	r2, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f857 	bl	80057ba <__swbuf_r>
 800570c:	3001      	adds	r0, #1
 800570e:	d1e7      	bne.n	80056e0 <_puts_r+0x68>
 8005710:	e7ce      	b.n	80056b0 <_puts_r+0x38>
 8005712:	3e01      	subs	r6, #1
 8005714:	e7e4      	b.n	80056e0 <_puts_r+0x68>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	6022      	str	r2, [r4, #0]
 800571c:	220a      	movs	r2, #10
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e7ee      	b.n	8005700 <_puts_r+0x88>
	...

08005724 <puts>:
 8005724:	4b02      	ldr	r3, [pc, #8]	@ (8005730 <puts+0xc>)
 8005726:	4601      	mov	r1, r0
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	f7ff bfa5 	b.w	8005678 <_puts_r>
 800572e:	bf00      	nop
 8005730:	200006a0 	.word	0x200006a0

08005734 <__sread>:
 8005734:	b510      	push	{r4, lr}
 8005736:	460c      	mov	r4, r1
 8005738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800573c:	f000 f900 	bl	8005940 <_read_r>
 8005740:	2800      	cmp	r0, #0
 8005742:	bfab      	itete	ge
 8005744:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005746:	89a3      	ldrhlt	r3, [r4, #12]
 8005748:	181b      	addge	r3, r3, r0
 800574a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800574e:	bfac      	ite	ge
 8005750:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005752:	81a3      	strhlt	r3, [r4, #12]
 8005754:	bd10      	pop	{r4, pc}

08005756 <__swrite>:
 8005756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575a:	461f      	mov	r7, r3
 800575c:	898b      	ldrh	r3, [r1, #12]
 800575e:	05db      	lsls	r3, r3, #23
 8005760:	4605      	mov	r5, r0
 8005762:	460c      	mov	r4, r1
 8005764:	4616      	mov	r6, r2
 8005766:	d505      	bpl.n	8005774 <__swrite+0x1e>
 8005768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576c:	2302      	movs	r3, #2
 800576e:	2200      	movs	r2, #0
 8005770:	f000 f8d4 	bl	800591c <_lseek_r>
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800577a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800577e:	81a3      	strh	r3, [r4, #12]
 8005780:	4632      	mov	r2, r6
 8005782:	463b      	mov	r3, r7
 8005784:	4628      	mov	r0, r5
 8005786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800578a:	f000 b8fb 	b.w	8005984 <_write_r>

0800578e <__sseek>:
 800578e:	b510      	push	{r4, lr}
 8005790:	460c      	mov	r4, r1
 8005792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005796:	f000 f8c1 	bl	800591c <_lseek_r>
 800579a:	1c43      	adds	r3, r0, #1
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	bf15      	itete	ne
 80057a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057aa:	81a3      	strheq	r3, [r4, #12]
 80057ac:	bf18      	it	ne
 80057ae:	81a3      	strhne	r3, [r4, #12]
 80057b0:	bd10      	pop	{r4, pc}

080057b2 <__sclose>:
 80057b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b6:	f000 b8a1 	b.w	80058fc <_close_r>

080057ba <__swbuf_r>:
 80057ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057bc:	460e      	mov	r6, r1
 80057be:	4614      	mov	r4, r2
 80057c0:	4605      	mov	r5, r0
 80057c2:	b118      	cbz	r0, 80057cc <__swbuf_r+0x12>
 80057c4:	6a03      	ldr	r3, [r0, #32]
 80057c6:	b90b      	cbnz	r3, 80057cc <__swbuf_r+0x12>
 80057c8:	f7ff ff0e 	bl	80055e8 <__sinit>
 80057cc:	69a3      	ldr	r3, [r4, #24]
 80057ce:	60a3      	str	r3, [r4, #8]
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	071a      	lsls	r2, r3, #28
 80057d4:	d501      	bpl.n	80057da <__swbuf_r+0x20>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	b943      	cbnz	r3, 80057ec <__swbuf_r+0x32>
 80057da:	4621      	mov	r1, r4
 80057dc:	4628      	mov	r0, r5
 80057de:	f000 f82b 	bl	8005838 <__swsetup_r>
 80057e2:	b118      	cbz	r0, 80057ec <__swbuf_r+0x32>
 80057e4:	f04f 37ff 	mov.w	r7, #4294967295
 80057e8:	4638      	mov	r0, r7
 80057ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	6922      	ldr	r2, [r4, #16]
 80057f0:	1a98      	subs	r0, r3, r2
 80057f2:	6963      	ldr	r3, [r4, #20]
 80057f4:	b2f6      	uxtb	r6, r6
 80057f6:	4283      	cmp	r3, r0
 80057f8:	4637      	mov	r7, r6
 80057fa:	dc05      	bgt.n	8005808 <__swbuf_r+0x4e>
 80057fc:	4621      	mov	r1, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	f001 fcec 	bl	80071dc <_fflush_r>
 8005804:	2800      	cmp	r0, #0
 8005806:	d1ed      	bne.n	80057e4 <__swbuf_r+0x2a>
 8005808:	68a3      	ldr	r3, [r4, #8]
 800580a:	3b01      	subs	r3, #1
 800580c:	60a3      	str	r3, [r4, #8]
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	6022      	str	r2, [r4, #0]
 8005814:	701e      	strb	r6, [r3, #0]
 8005816:	6962      	ldr	r2, [r4, #20]
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	429a      	cmp	r2, r3
 800581c:	d004      	beq.n	8005828 <__swbuf_r+0x6e>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	07db      	lsls	r3, r3, #31
 8005822:	d5e1      	bpl.n	80057e8 <__swbuf_r+0x2e>
 8005824:	2e0a      	cmp	r6, #10
 8005826:	d1df      	bne.n	80057e8 <__swbuf_r+0x2e>
 8005828:	4621      	mov	r1, r4
 800582a:	4628      	mov	r0, r5
 800582c:	f001 fcd6 	bl	80071dc <_fflush_r>
 8005830:	2800      	cmp	r0, #0
 8005832:	d0d9      	beq.n	80057e8 <__swbuf_r+0x2e>
 8005834:	e7d6      	b.n	80057e4 <__swbuf_r+0x2a>
	...

08005838 <__swsetup_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4b29      	ldr	r3, [pc, #164]	@ (80058e0 <__swsetup_r+0xa8>)
 800583c:	4605      	mov	r5, r0
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	460c      	mov	r4, r1
 8005842:	b118      	cbz	r0, 800584c <__swsetup_r+0x14>
 8005844:	6a03      	ldr	r3, [r0, #32]
 8005846:	b90b      	cbnz	r3, 800584c <__swsetup_r+0x14>
 8005848:	f7ff fece 	bl	80055e8 <__sinit>
 800584c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005850:	0719      	lsls	r1, r3, #28
 8005852:	d422      	bmi.n	800589a <__swsetup_r+0x62>
 8005854:	06da      	lsls	r2, r3, #27
 8005856:	d407      	bmi.n	8005868 <__swsetup_r+0x30>
 8005858:	2209      	movs	r2, #9
 800585a:	602a      	str	r2, [r5, #0]
 800585c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005860:	81a3      	strh	r3, [r4, #12]
 8005862:	f04f 30ff 	mov.w	r0, #4294967295
 8005866:	e033      	b.n	80058d0 <__swsetup_r+0x98>
 8005868:	0758      	lsls	r0, r3, #29
 800586a:	d512      	bpl.n	8005892 <__swsetup_r+0x5a>
 800586c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800586e:	b141      	cbz	r1, 8005882 <__swsetup_r+0x4a>
 8005870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005874:	4299      	cmp	r1, r3
 8005876:	d002      	beq.n	800587e <__swsetup_r+0x46>
 8005878:	4628      	mov	r0, r5
 800587a:	f000 ff1d 	bl	80066b8 <_free_r>
 800587e:	2300      	movs	r3, #0
 8005880:	6363      	str	r3, [r4, #52]	@ 0x34
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	2300      	movs	r3, #0
 800588c:	6063      	str	r3, [r4, #4]
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	f043 0308 	orr.w	r3, r3, #8
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	6923      	ldr	r3, [r4, #16]
 800589c:	b94b      	cbnz	r3, 80058b2 <__swsetup_r+0x7a>
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80058a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a8:	d003      	beq.n	80058b2 <__swsetup_r+0x7a>
 80058aa:	4621      	mov	r1, r4
 80058ac:	4628      	mov	r0, r5
 80058ae:	f001 fce3 	bl	8007278 <__smakebuf_r>
 80058b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b6:	f013 0201 	ands.w	r2, r3, #1
 80058ba:	d00a      	beq.n	80058d2 <__swsetup_r+0x9a>
 80058bc:	2200      	movs	r2, #0
 80058be:	60a2      	str	r2, [r4, #8]
 80058c0:	6962      	ldr	r2, [r4, #20]
 80058c2:	4252      	negs	r2, r2
 80058c4:	61a2      	str	r2, [r4, #24]
 80058c6:	6922      	ldr	r2, [r4, #16]
 80058c8:	b942      	cbnz	r2, 80058dc <__swsetup_r+0xa4>
 80058ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058ce:	d1c5      	bne.n	800585c <__swsetup_r+0x24>
 80058d0:	bd38      	pop	{r3, r4, r5, pc}
 80058d2:	0799      	lsls	r1, r3, #30
 80058d4:	bf58      	it	pl
 80058d6:	6962      	ldrpl	r2, [r4, #20]
 80058d8:	60a2      	str	r2, [r4, #8]
 80058da:	e7f4      	b.n	80058c6 <__swsetup_r+0x8e>
 80058dc:	2000      	movs	r0, #0
 80058de:	e7f7      	b.n	80058d0 <__swsetup_r+0x98>
 80058e0:	200006a0 	.word	0x200006a0

080058e4 <memset>:
 80058e4:	4402      	add	r2, r0
 80058e6:	4603      	mov	r3, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <_localeconv_r>:
 80058f4:	4800      	ldr	r0, [pc, #0]	@ (80058f8 <_localeconv_r+0x4>)
 80058f6:	4770      	bx	lr
 80058f8:	200007e0 	.word	0x200007e0

080058fc <_close_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4d06      	ldr	r5, [pc, #24]	@ (8005918 <_close_r+0x1c>)
 8005900:	2300      	movs	r3, #0
 8005902:	4604      	mov	r4, r0
 8005904:	4608      	mov	r0, r1
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	f001 fdc4 	bl	8007494 <_close>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_close_r+0x1a>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	b103      	cbz	r3, 8005916 <_close_r+0x1a>
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	20000aac 	.word	0x20000aac

0800591c <_lseek_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4d07      	ldr	r5, [pc, #28]	@ (800593c <_lseek_r+0x20>)
 8005920:	4604      	mov	r4, r0
 8005922:	4608      	mov	r0, r1
 8005924:	4611      	mov	r1, r2
 8005926:	2200      	movs	r2, #0
 8005928:	602a      	str	r2, [r5, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	f001 fdda 	bl	80074e4 <_lseek>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_lseek_r+0x1e>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	b103      	cbz	r3, 800593a <_lseek_r+0x1e>
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	20000aac 	.word	0x20000aac

08005940 <_read_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4d07      	ldr	r5, [pc, #28]	@ (8005960 <_read_r+0x20>)
 8005944:	4604      	mov	r4, r0
 8005946:	4608      	mov	r0, r1
 8005948:	4611      	mov	r1, r2
 800594a:	2200      	movs	r2, #0
 800594c:	602a      	str	r2, [r5, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	f001 fdd0 	bl	80074f4 <_read>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	d102      	bne.n	800595e <_read_r+0x1e>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	b103      	cbz	r3, 800595e <_read_r+0x1e>
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	20000aac 	.word	0x20000aac

08005964 <_sbrk_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	4d06      	ldr	r5, [pc, #24]	@ (8005980 <_sbrk_r+0x1c>)
 8005968:	2300      	movs	r3, #0
 800596a:	4604      	mov	r4, r0
 800596c:	4608      	mov	r0, r1
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	f7fb fe14 	bl	800159c <_sbrk>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_sbrk_r+0x1a>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_sbrk_r+0x1a>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	20000aac 	.word	0x20000aac

08005984 <_write_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	@ (80059a4 <_write_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fb faff 	bl	8000f96 <_write>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_write_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_write_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	20000aac 	.word	0x20000aac

080059a8 <__errno>:
 80059a8:	4b01      	ldr	r3, [pc, #4]	@ (80059b0 <__errno+0x8>)
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	200006a0 	.word	0x200006a0

080059b4 <__libc_init_array>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	4d0d      	ldr	r5, [pc, #52]	@ (80059ec <__libc_init_array+0x38>)
 80059b8:	4c0d      	ldr	r4, [pc, #52]	@ (80059f0 <__libc_init_array+0x3c>)
 80059ba:	1b64      	subs	r4, r4, r5
 80059bc:	10a4      	asrs	r4, r4, #2
 80059be:	2600      	movs	r6, #0
 80059c0:	42a6      	cmp	r6, r4
 80059c2:	d109      	bne.n	80059d8 <__libc_init_array+0x24>
 80059c4:	4d0b      	ldr	r5, [pc, #44]	@ (80059f4 <__libc_init_array+0x40>)
 80059c6:	4c0c      	ldr	r4, [pc, #48]	@ (80059f8 <__libc_init_array+0x44>)
 80059c8:	f001 fd9e 	bl	8007508 <_init>
 80059cc:	1b64      	subs	r4, r4, r5
 80059ce:	10a4      	asrs	r4, r4, #2
 80059d0:	2600      	movs	r6, #0
 80059d2:	42a6      	cmp	r6, r4
 80059d4:	d105      	bne.n	80059e2 <__libc_init_array+0x2e>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059dc:	4798      	blx	r3
 80059de:	3601      	adds	r6, #1
 80059e0:	e7ee      	b.n	80059c0 <__libc_init_array+0xc>
 80059e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e6:	4798      	blx	r3
 80059e8:	3601      	adds	r6, #1
 80059ea:	e7f2      	b.n	80059d2 <__libc_init_array+0x1e>
 80059ec:	08007fb0 	.word	0x08007fb0
 80059f0:	08007fb0 	.word	0x08007fb0
 80059f4:	08007fb0 	.word	0x08007fb0
 80059f8:	08007fb4 	.word	0x08007fb4

080059fc <__retarget_lock_init_recursive>:
 80059fc:	4770      	bx	lr

080059fe <__retarget_lock_acquire_recursive>:
 80059fe:	4770      	bx	lr

08005a00 <__retarget_lock_release_recursive>:
 8005a00:	4770      	bx	lr

08005a02 <memcpy>:
 8005a02:	440a      	add	r2, r1
 8005a04:	4291      	cmp	r1, r2
 8005a06:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a0a:	d100      	bne.n	8005a0e <memcpy+0xc>
 8005a0c:	4770      	bx	lr
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a18:	4291      	cmp	r1, r2
 8005a1a:	d1f9      	bne.n	8005a10 <memcpy+0xe>
 8005a1c:	bd10      	pop	{r4, pc}

08005a1e <quorem>:
 8005a1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a22:	6903      	ldr	r3, [r0, #16]
 8005a24:	690c      	ldr	r4, [r1, #16]
 8005a26:	42a3      	cmp	r3, r4
 8005a28:	4607      	mov	r7, r0
 8005a2a:	db7e      	blt.n	8005b2a <quorem+0x10c>
 8005a2c:	3c01      	subs	r4, #1
 8005a2e:	f101 0814 	add.w	r8, r1, #20
 8005a32:	00a3      	lsls	r3, r4, #2
 8005a34:	f100 0514 	add.w	r5, r0, #20
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a50:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a54:	d32e      	bcc.n	8005ab4 <quorem+0x96>
 8005a56:	f04f 0a00 	mov.w	sl, #0
 8005a5a:	46c4      	mov	ip, r8
 8005a5c:	46ae      	mov	lr, r5
 8005a5e:	46d3      	mov	fp, sl
 8005a60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a64:	b298      	uxth	r0, r3
 8005a66:	fb06 a000 	mla	r0, r6, r0, sl
 8005a6a:	0c02      	lsrs	r2, r0, #16
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	fb06 2303 	mla	r3, r6, r3, r2
 8005a72:	f8de 2000 	ldr.w	r2, [lr]
 8005a76:	b280      	uxth	r0, r0
 8005a78:	b292      	uxth	r2, r2
 8005a7a:	1a12      	subs	r2, r2, r0
 8005a7c:	445a      	add	r2, fp
 8005a7e:	f8de 0000 	ldr.w	r0, [lr]
 8005a82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a90:	b292      	uxth	r2, r2
 8005a92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a96:	45e1      	cmp	r9, ip
 8005a98:	f84e 2b04 	str.w	r2, [lr], #4
 8005a9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005aa0:	d2de      	bcs.n	8005a60 <quorem+0x42>
 8005aa2:	9b00      	ldr	r3, [sp, #0]
 8005aa4:	58eb      	ldr	r3, [r5, r3]
 8005aa6:	b92b      	cbnz	r3, 8005ab4 <quorem+0x96>
 8005aa8:	9b01      	ldr	r3, [sp, #4]
 8005aaa:	3b04      	subs	r3, #4
 8005aac:	429d      	cmp	r5, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	d32f      	bcc.n	8005b12 <quorem+0xf4>
 8005ab2:	613c      	str	r4, [r7, #16]
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	f001 f8c3 	bl	8006c40 <__mcmp>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	db25      	blt.n	8005b0a <quorem+0xec>
 8005abe:	4629      	mov	r1, r5
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ac6:	f8d1 c000 	ldr.w	ip, [r1]
 8005aca:	fa1f fe82 	uxth.w	lr, r2
 8005ace:	fa1f f38c 	uxth.w	r3, ip
 8005ad2:	eba3 030e 	sub.w	r3, r3, lr
 8005ad6:	4403      	add	r3, r0
 8005ad8:	0c12      	lsrs	r2, r2, #16
 8005ada:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005ade:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ae8:	45c1      	cmp	r9, r8
 8005aea:	f841 3b04 	str.w	r3, [r1], #4
 8005aee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005af2:	d2e6      	bcs.n	8005ac2 <quorem+0xa4>
 8005af4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005af8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005afc:	b922      	cbnz	r2, 8005b08 <quorem+0xea>
 8005afe:	3b04      	subs	r3, #4
 8005b00:	429d      	cmp	r5, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	d30b      	bcc.n	8005b1e <quorem+0x100>
 8005b06:	613c      	str	r4, [r7, #16]
 8005b08:	3601      	adds	r6, #1
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	b003      	add	sp, #12
 8005b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	3b04      	subs	r3, #4
 8005b16:	2a00      	cmp	r2, #0
 8005b18:	d1cb      	bne.n	8005ab2 <quorem+0x94>
 8005b1a:	3c01      	subs	r4, #1
 8005b1c:	e7c6      	b.n	8005aac <quorem+0x8e>
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	3b04      	subs	r3, #4
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	d1ef      	bne.n	8005b06 <quorem+0xe8>
 8005b26:	3c01      	subs	r4, #1
 8005b28:	e7ea      	b.n	8005b00 <quorem+0xe2>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	e7ee      	b.n	8005b0c <quorem+0xee>
	...

08005b30 <_dtoa_r>:
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	69c7      	ldr	r7, [r0, #28]
 8005b36:	b099      	sub	sp, #100	@ 0x64
 8005b38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b3c:	ec55 4b10 	vmov	r4, r5, d0
 8005b40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005b42:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b44:	4683      	mov	fp, r0
 8005b46:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005b4a:	b97f      	cbnz	r7, 8005b6c <_dtoa_r+0x3c>
 8005b4c:	2010      	movs	r0, #16
 8005b4e:	f7fe ffb1 	bl	8004ab4 <malloc>
 8005b52:	4602      	mov	r2, r0
 8005b54:	f8cb 001c 	str.w	r0, [fp, #28]
 8005b58:	b920      	cbnz	r0, 8005b64 <_dtoa_r+0x34>
 8005b5a:	4ba7      	ldr	r3, [pc, #668]	@ (8005df8 <_dtoa_r+0x2c8>)
 8005b5c:	21ef      	movs	r1, #239	@ 0xef
 8005b5e:	48a7      	ldr	r0, [pc, #668]	@ (8005dfc <_dtoa_r+0x2cc>)
 8005b60:	f001 fbe8 	bl	8007334 <__assert_func>
 8005b64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b68:	6007      	str	r7, [r0, #0]
 8005b6a:	60c7      	str	r7, [r0, #12]
 8005b6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b70:	6819      	ldr	r1, [r3, #0]
 8005b72:	b159      	cbz	r1, 8005b8c <_dtoa_r+0x5c>
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	604a      	str	r2, [r1, #4]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4093      	lsls	r3, r2
 8005b7c:	608b      	str	r3, [r1, #8]
 8005b7e:	4658      	mov	r0, fp
 8005b80:	f000 fe24 	bl	80067cc <_Bfree>
 8005b84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	1e2b      	subs	r3, r5, #0
 8005b8e:	bfb9      	ittee	lt
 8005b90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b94:	9303      	strlt	r3, [sp, #12]
 8005b96:	2300      	movge	r3, #0
 8005b98:	6033      	strge	r3, [r6, #0]
 8005b9a:	9f03      	ldr	r7, [sp, #12]
 8005b9c:	4b98      	ldr	r3, [pc, #608]	@ (8005e00 <_dtoa_r+0x2d0>)
 8005b9e:	bfbc      	itt	lt
 8005ba0:	2201      	movlt	r2, #1
 8005ba2:	6032      	strlt	r2, [r6, #0]
 8005ba4:	43bb      	bics	r3, r7
 8005ba6:	d112      	bne.n	8005bce <_dtoa_r+0x9e>
 8005ba8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005baa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005bb4:	4323      	orrs	r3, r4
 8005bb6:	f000 854d 	beq.w	8006654 <_dtoa_r+0xb24>
 8005bba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005bbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005e14 <_dtoa_r+0x2e4>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 854f 	beq.w	8006664 <_dtoa_r+0xb34>
 8005bc6:	f10a 0303 	add.w	r3, sl, #3
 8005bca:	f000 bd49 	b.w	8006660 <_dtoa_r+0xb30>
 8005bce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	ec51 0b17 	vmov	r0, r1, d7
 8005bd8:	2300      	movs	r3, #0
 8005bda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005bde:	f7fa ff7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005be2:	4680      	mov	r8, r0
 8005be4:	b158      	cbz	r0, 8005bfe <_dtoa_r+0xce>
 8005be6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005be8:	2301      	movs	r3, #1
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005bee:	b113      	cbz	r3, 8005bf6 <_dtoa_r+0xc6>
 8005bf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005bf2:	4b84      	ldr	r3, [pc, #528]	@ (8005e04 <_dtoa_r+0x2d4>)
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005e18 <_dtoa_r+0x2e8>
 8005bfa:	f000 bd33 	b.w	8006664 <_dtoa_r+0xb34>
 8005bfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005c02:	aa16      	add	r2, sp, #88	@ 0x58
 8005c04:	a917      	add	r1, sp, #92	@ 0x5c
 8005c06:	4658      	mov	r0, fp
 8005c08:	f001 f8ca 	bl	8006da0 <__d2b>
 8005c0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005c10:	4681      	mov	r9, r0
 8005c12:	2e00      	cmp	r6, #0
 8005c14:	d077      	beq.n	8005d06 <_dtoa_r+0x1d6>
 8005c16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005c30:	4619      	mov	r1, r3
 8005c32:	2200      	movs	r2, #0
 8005c34:	4b74      	ldr	r3, [pc, #464]	@ (8005e08 <_dtoa_r+0x2d8>)
 8005c36:	f7fa fb2f 	bl	8000298 <__aeabi_dsub>
 8005c3a:	a369      	add	r3, pc, #420	@ (adr r3, 8005de0 <_dtoa_r+0x2b0>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f7fa fce2 	bl	8000608 <__aeabi_dmul>
 8005c44:	a368      	add	r3, pc, #416	@ (adr r3, 8005de8 <_dtoa_r+0x2b8>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f7fa fb27 	bl	800029c <__adddf3>
 8005c4e:	4604      	mov	r4, r0
 8005c50:	4630      	mov	r0, r6
 8005c52:	460d      	mov	r5, r1
 8005c54:	f7fa fc6e 	bl	8000534 <__aeabi_i2d>
 8005c58:	a365      	add	r3, pc, #404	@ (adr r3, 8005df0 <_dtoa_r+0x2c0>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f7fa fcd3 	bl	8000608 <__aeabi_dmul>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7fa fb17 	bl	800029c <__adddf3>
 8005c6e:	4604      	mov	r4, r0
 8005c70:	460d      	mov	r5, r1
 8005c72:	f7fa ff79 	bl	8000b68 <__aeabi_d2iz>
 8005c76:	2200      	movs	r2, #0
 8005c78:	4607      	mov	r7, r0
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f7fa ff34 	bl	8000aec <__aeabi_dcmplt>
 8005c84:	b140      	cbz	r0, 8005c98 <_dtoa_r+0x168>
 8005c86:	4638      	mov	r0, r7
 8005c88:	f7fa fc54 	bl	8000534 <__aeabi_i2d>
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	462b      	mov	r3, r5
 8005c90:	f7fa ff22 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c94:	b900      	cbnz	r0, 8005c98 <_dtoa_r+0x168>
 8005c96:	3f01      	subs	r7, #1
 8005c98:	2f16      	cmp	r7, #22
 8005c9a:	d851      	bhi.n	8005d40 <_dtoa_r+0x210>
 8005c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8005e0c <_dtoa_r+0x2dc>)
 8005c9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005caa:	f7fa ff1f 	bl	8000aec <__aeabi_dcmplt>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d048      	beq.n	8005d44 <_dtoa_r+0x214>
 8005cb2:	3f01      	subs	r7, #1
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005cb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005cba:	1b9b      	subs	r3, r3, r6
 8005cbc:	1e5a      	subs	r2, r3, #1
 8005cbe:	bf44      	itt	mi
 8005cc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005cc4:	2300      	movmi	r3, #0
 8005cc6:	9208      	str	r2, [sp, #32]
 8005cc8:	bf54      	ite	pl
 8005cca:	f04f 0800 	movpl.w	r8, #0
 8005cce:	9308      	strmi	r3, [sp, #32]
 8005cd0:	2f00      	cmp	r7, #0
 8005cd2:	db39      	blt.n	8005d48 <_dtoa_r+0x218>
 8005cd4:	9b08      	ldr	r3, [sp, #32]
 8005cd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005cd8:	443b      	add	r3, r7
 8005cda:	9308      	str	r3, [sp, #32]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d864      	bhi.n	8005db0 <_dtoa_r+0x280>
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	bfc4      	itt	gt
 8005cea:	3b04      	subgt	r3, #4
 8005cec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cf0:	f1a3 0302 	sub.w	r3, r3, #2
 8005cf4:	bfcc      	ite	gt
 8005cf6:	2400      	movgt	r4, #0
 8005cf8:	2401      	movle	r4, #1
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d863      	bhi.n	8005dc6 <_dtoa_r+0x296>
 8005cfe:	e8df f003 	tbb	[pc, r3]
 8005d02:	372a      	.short	0x372a
 8005d04:	5535      	.short	0x5535
 8005d06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005d0a:	441e      	add	r6, r3
 8005d0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	bfc1      	itttt	gt
 8005d14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d18:	409f      	lslgt	r7, r3
 8005d1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d22:	bfd6      	itet	le
 8005d24:	f1c3 0320 	rsble	r3, r3, #32
 8005d28:	ea47 0003 	orrgt.w	r0, r7, r3
 8005d2c:	fa04 f003 	lslle.w	r0, r4, r3
 8005d30:	f7fa fbf0 	bl	8000514 <__aeabi_ui2d>
 8005d34:	2201      	movs	r2, #1
 8005d36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005d3a:	3e01      	subs	r6, #1
 8005d3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005d3e:	e777      	b.n	8005c30 <_dtoa_r+0x100>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e7b8      	b.n	8005cb6 <_dtoa_r+0x186>
 8005d44:	9012      	str	r0, [sp, #72]	@ 0x48
 8005d46:	e7b7      	b.n	8005cb8 <_dtoa_r+0x188>
 8005d48:	427b      	negs	r3, r7
 8005d4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	eba8 0807 	sub.w	r8, r8, r7
 8005d52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d54:	e7c4      	b.n	8005ce0 <_dtoa_r+0x1b0>
 8005d56:	2300      	movs	r3, #0
 8005d58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	dc35      	bgt.n	8005dcc <_dtoa_r+0x29c>
 8005d60:	2301      	movs	r3, #1
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	9307      	str	r3, [sp, #28]
 8005d66:	461a      	mov	r2, r3
 8005d68:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d6a:	e00b      	b.n	8005d84 <_dtoa_r+0x254>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e7f3      	b.n	8005d58 <_dtoa_r+0x228>
 8005d70:	2300      	movs	r3, #0
 8005d72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	bfb8      	it	lt
 8005d82:	2301      	movlt	r3, #1
 8005d84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005d88:	2100      	movs	r1, #0
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	f102 0514 	add.w	r5, r2, #20
 8005d90:	429d      	cmp	r5, r3
 8005d92:	d91f      	bls.n	8005dd4 <_dtoa_r+0x2a4>
 8005d94:	6041      	str	r1, [r0, #4]
 8005d96:	4658      	mov	r0, fp
 8005d98:	f000 fcd8 	bl	800674c <_Balloc>
 8005d9c:	4682      	mov	sl, r0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d13c      	bne.n	8005e1c <_dtoa_r+0x2ec>
 8005da2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e10 <_dtoa_r+0x2e0>)
 8005da4:	4602      	mov	r2, r0
 8005da6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005daa:	e6d8      	b.n	8005b5e <_dtoa_r+0x2e>
 8005dac:	2301      	movs	r3, #1
 8005dae:	e7e0      	b.n	8005d72 <_dtoa_r+0x242>
 8005db0:	2401      	movs	r4, #1
 8005db2:	2300      	movs	r3, #0
 8005db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005db6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005db8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	9307      	str	r3, [sp, #28]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2312      	movs	r3, #18
 8005dc4:	e7d0      	b.n	8005d68 <_dtoa_r+0x238>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dca:	e7f5      	b.n	8005db8 <_dtoa_r+0x288>
 8005dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	9307      	str	r3, [sp, #28]
 8005dd2:	e7d7      	b.n	8005d84 <_dtoa_r+0x254>
 8005dd4:	3101      	adds	r1, #1
 8005dd6:	0052      	lsls	r2, r2, #1
 8005dd8:	e7d8      	b.n	8005d8c <_dtoa_r+0x25c>
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w
 8005de0:	636f4361 	.word	0x636f4361
 8005de4:	3fd287a7 	.word	0x3fd287a7
 8005de8:	8b60c8b3 	.word	0x8b60c8b3
 8005dec:	3fc68a28 	.word	0x3fc68a28
 8005df0:	509f79fb 	.word	0x509f79fb
 8005df4:	3fd34413 	.word	0x3fd34413
 8005df8:	08007c75 	.word	0x08007c75
 8005dfc:	08007c8c 	.word	0x08007c8c
 8005e00:	7ff00000 	.word	0x7ff00000
 8005e04:	08007c45 	.word	0x08007c45
 8005e08:	3ff80000 	.word	0x3ff80000
 8005e0c:	08007d88 	.word	0x08007d88
 8005e10:	08007ce4 	.word	0x08007ce4
 8005e14:	08007c71 	.word	0x08007c71
 8005e18:	08007c44 	.word	0x08007c44
 8005e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e20:	6018      	str	r0, [r3, #0]
 8005e22:	9b07      	ldr	r3, [sp, #28]
 8005e24:	2b0e      	cmp	r3, #14
 8005e26:	f200 80a4 	bhi.w	8005f72 <_dtoa_r+0x442>
 8005e2a:	2c00      	cmp	r4, #0
 8005e2c:	f000 80a1 	beq.w	8005f72 <_dtoa_r+0x442>
 8005e30:	2f00      	cmp	r7, #0
 8005e32:	dd33      	ble.n	8005e9c <_dtoa_r+0x36c>
 8005e34:	4bad      	ldr	r3, [pc, #692]	@ (80060ec <_dtoa_r+0x5bc>)
 8005e36:	f007 020f 	and.w	r2, r7, #15
 8005e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e3e:	ed93 7b00 	vldr	d7, [r3]
 8005e42:	05f8      	lsls	r0, r7, #23
 8005e44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005e48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005e4c:	d516      	bpl.n	8005e7c <_dtoa_r+0x34c>
 8005e4e:	4ba8      	ldr	r3, [pc, #672]	@ (80060f0 <_dtoa_r+0x5c0>)
 8005e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e58:	f7fa fd00 	bl	800085c <__aeabi_ddiv>
 8005e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e60:	f004 040f 	and.w	r4, r4, #15
 8005e64:	2603      	movs	r6, #3
 8005e66:	4da2      	ldr	r5, [pc, #648]	@ (80060f0 <_dtoa_r+0x5c0>)
 8005e68:	b954      	cbnz	r4, 8005e80 <_dtoa_r+0x350>
 8005e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e72:	f7fa fcf3 	bl	800085c <__aeabi_ddiv>
 8005e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e7a:	e028      	b.n	8005ece <_dtoa_r+0x39e>
 8005e7c:	2602      	movs	r6, #2
 8005e7e:	e7f2      	b.n	8005e66 <_dtoa_r+0x336>
 8005e80:	07e1      	lsls	r1, r4, #31
 8005e82:	d508      	bpl.n	8005e96 <_dtoa_r+0x366>
 8005e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e8c:	f7fa fbbc 	bl	8000608 <__aeabi_dmul>
 8005e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e94:	3601      	adds	r6, #1
 8005e96:	1064      	asrs	r4, r4, #1
 8005e98:	3508      	adds	r5, #8
 8005e9a:	e7e5      	b.n	8005e68 <_dtoa_r+0x338>
 8005e9c:	f000 80d2 	beq.w	8006044 <_dtoa_r+0x514>
 8005ea0:	427c      	negs	r4, r7
 8005ea2:	4b92      	ldr	r3, [pc, #584]	@ (80060ec <_dtoa_r+0x5bc>)
 8005ea4:	4d92      	ldr	r5, [pc, #584]	@ (80060f0 <_dtoa_r+0x5c0>)
 8005ea6:	f004 020f 	and.w	r2, r4, #15
 8005eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005eb6:	f7fa fba7 	bl	8000608 <__aeabi_dmul>
 8005eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ebe:	1124      	asrs	r4, r4, #4
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2602      	movs	r6, #2
 8005ec4:	2c00      	cmp	r4, #0
 8005ec6:	f040 80b2 	bne.w	800602e <_dtoa_r+0x4fe>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1d3      	bne.n	8005e76 <_dtoa_r+0x346>
 8005ece:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ed0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80b7 	beq.w	8006048 <_dtoa_r+0x518>
 8005eda:	4b86      	ldr	r3, [pc, #536]	@ (80060f4 <_dtoa_r+0x5c4>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa fe03 	bl	8000aec <__aeabi_dcmplt>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f000 80ae 	beq.w	8006048 <_dtoa_r+0x518>
 8005eec:	9b07      	ldr	r3, [sp, #28]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80aa 	beq.w	8006048 <_dtoa_r+0x518>
 8005ef4:	9b00      	ldr	r3, [sp, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	dd37      	ble.n	8005f6a <_dtoa_r+0x43a>
 8005efa:	1e7b      	subs	r3, r7, #1
 8005efc:	9304      	str	r3, [sp, #16]
 8005efe:	4620      	mov	r0, r4
 8005f00:	4b7d      	ldr	r3, [pc, #500]	@ (80060f8 <_dtoa_r+0x5c8>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fa fb7f 	bl	8000608 <__aeabi_dmul>
 8005f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f0e:	9c00      	ldr	r4, [sp, #0]
 8005f10:	3601      	adds	r6, #1
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7fa fb0e 	bl	8000534 <__aeabi_i2d>
 8005f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f1c:	f7fa fb74 	bl	8000608 <__aeabi_dmul>
 8005f20:	4b76      	ldr	r3, [pc, #472]	@ (80060fc <_dtoa_r+0x5cc>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	f7fa f9ba 	bl	800029c <__adddf3>
 8005f28:	4605      	mov	r5, r0
 8005f2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	f040 808d 	bne.w	800604e <_dtoa_r+0x51e>
 8005f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f38:	4b71      	ldr	r3, [pc, #452]	@ (8006100 <_dtoa_r+0x5d0>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f7fa f9ac 	bl	8000298 <__aeabi_dsub>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f48:	462a      	mov	r2, r5
 8005f4a:	4633      	mov	r3, r6
 8005f4c:	f7fa fdec 	bl	8000b28 <__aeabi_dcmpgt>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	f040 828b 	bne.w	800646c <_dtoa_r+0x93c>
 8005f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5a:	462a      	mov	r2, r5
 8005f5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f60:	f7fa fdc4 	bl	8000aec <__aeabi_dcmplt>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f040 8128 	bne.w	80061ba <_dtoa_r+0x68a>
 8005f6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005f6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005f72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f2c0 815a 	blt.w	800622e <_dtoa_r+0x6fe>
 8005f7a:	2f0e      	cmp	r7, #14
 8005f7c:	f300 8157 	bgt.w	800622e <_dtoa_r+0x6fe>
 8005f80:	4b5a      	ldr	r3, [pc, #360]	@ (80060ec <_dtoa_r+0x5bc>)
 8005f82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f86:	ed93 7b00 	vldr	d7, [r3]
 8005f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	ed8d 7b00 	vstr	d7, [sp]
 8005f92:	da03      	bge.n	8005f9c <_dtoa_r+0x46c>
 8005f94:	9b07      	ldr	r3, [sp, #28]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f340 8101 	ble.w	800619e <_dtoa_r+0x66e>
 8005f9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fa0:	4656      	mov	r6, sl
 8005fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f7fa fc57 	bl	800085c <__aeabi_ddiv>
 8005fae:	f7fa fddb 	bl	8000b68 <__aeabi_d2iz>
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	f7fa fabe 	bl	8000534 <__aeabi_i2d>
 8005fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fbc:	f7fa fb24 	bl	8000608 <__aeabi_dmul>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005fcc:	f7fa f964 	bl	8000298 <__aeabi_dsub>
 8005fd0:	f806 4b01 	strb.w	r4, [r6], #1
 8005fd4:	9d07      	ldr	r5, [sp, #28]
 8005fd6:	eba6 040a 	sub.w	r4, r6, sl
 8005fda:	42a5      	cmp	r5, r4
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	f040 8117 	bne.w	8006212 <_dtoa_r+0x6e2>
 8005fe4:	f7fa f95a 	bl	800029c <__adddf3>
 8005fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fec:	4604      	mov	r4, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	f7fa fd9a 	bl	8000b28 <__aeabi_dcmpgt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f040 80f9 	bne.w	80061ec <_dtoa_r+0x6bc>
 8005ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f7fa fd69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006006:	b118      	cbz	r0, 8006010 <_dtoa_r+0x4e0>
 8006008:	f018 0f01 	tst.w	r8, #1
 800600c:	f040 80ee 	bne.w	80061ec <_dtoa_r+0x6bc>
 8006010:	4649      	mov	r1, r9
 8006012:	4658      	mov	r0, fp
 8006014:	f000 fbda 	bl	80067cc <_Bfree>
 8006018:	2300      	movs	r3, #0
 800601a:	7033      	strb	r3, [r6, #0]
 800601c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800601e:	3701      	adds	r7, #1
 8006020:	601f      	str	r7, [r3, #0]
 8006022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 831d 	beq.w	8006664 <_dtoa_r+0xb34>
 800602a:	601e      	str	r6, [r3, #0]
 800602c:	e31a      	b.n	8006664 <_dtoa_r+0xb34>
 800602e:	07e2      	lsls	r2, r4, #31
 8006030:	d505      	bpl.n	800603e <_dtoa_r+0x50e>
 8006032:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006036:	f7fa fae7 	bl	8000608 <__aeabi_dmul>
 800603a:	3601      	adds	r6, #1
 800603c:	2301      	movs	r3, #1
 800603e:	1064      	asrs	r4, r4, #1
 8006040:	3508      	adds	r5, #8
 8006042:	e73f      	b.n	8005ec4 <_dtoa_r+0x394>
 8006044:	2602      	movs	r6, #2
 8006046:	e742      	b.n	8005ece <_dtoa_r+0x39e>
 8006048:	9c07      	ldr	r4, [sp, #28]
 800604a:	9704      	str	r7, [sp, #16]
 800604c:	e761      	b.n	8005f12 <_dtoa_r+0x3e2>
 800604e:	4b27      	ldr	r3, [pc, #156]	@ (80060ec <_dtoa_r+0x5bc>)
 8006050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006056:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800605a:	4454      	add	r4, sl
 800605c:	2900      	cmp	r1, #0
 800605e:	d053      	beq.n	8006108 <_dtoa_r+0x5d8>
 8006060:	4928      	ldr	r1, [pc, #160]	@ (8006104 <_dtoa_r+0x5d4>)
 8006062:	2000      	movs	r0, #0
 8006064:	f7fa fbfa 	bl	800085c <__aeabi_ddiv>
 8006068:	4633      	mov	r3, r6
 800606a:	462a      	mov	r2, r5
 800606c:	f7fa f914 	bl	8000298 <__aeabi_dsub>
 8006070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006074:	4656      	mov	r6, sl
 8006076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800607a:	f7fa fd75 	bl	8000b68 <__aeabi_d2iz>
 800607e:	4605      	mov	r5, r0
 8006080:	f7fa fa58 	bl	8000534 <__aeabi_i2d>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800608c:	f7fa f904 	bl	8000298 <__aeabi_dsub>
 8006090:	3530      	adds	r5, #48	@ 0x30
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800609a:	f806 5b01 	strb.w	r5, [r6], #1
 800609e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060a2:	f7fa fd23 	bl	8000aec <__aeabi_dcmplt>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d171      	bne.n	800618e <_dtoa_r+0x65e>
 80060aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060ae:	4911      	ldr	r1, [pc, #68]	@ (80060f4 <_dtoa_r+0x5c4>)
 80060b0:	2000      	movs	r0, #0
 80060b2:	f7fa f8f1 	bl	8000298 <__aeabi_dsub>
 80060b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060ba:	f7fa fd17 	bl	8000aec <__aeabi_dcmplt>
 80060be:	2800      	cmp	r0, #0
 80060c0:	f040 8095 	bne.w	80061ee <_dtoa_r+0x6be>
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	f43f af50 	beq.w	8005f6a <_dtoa_r+0x43a>
 80060ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80060ce:	4b0a      	ldr	r3, [pc, #40]	@ (80060f8 <_dtoa_r+0x5c8>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	f7fa fa99 	bl	8000608 <__aeabi_dmul>
 80060d6:	4b08      	ldr	r3, [pc, #32]	@ (80060f8 <_dtoa_r+0x5c8>)
 80060d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060dc:	2200      	movs	r2, #0
 80060de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e2:	f7fa fa91 	bl	8000608 <__aeabi_dmul>
 80060e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ea:	e7c4      	b.n	8006076 <_dtoa_r+0x546>
 80060ec:	08007d88 	.word	0x08007d88
 80060f0:	08007d60 	.word	0x08007d60
 80060f4:	3ff00000 	.word	0x3ff00000
 80060f8:	40240000 	.word	0x40240000
 80060fc:	401c0000 	.word	0x401c0000
 8006100:	40140000 	.word	0x40140000
 8006104:	3fe00000 	.word	0x3fe00000
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	f7fa fa7c 	bl	8000608 <__aeabi_dmul>
 8006110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006114:	9415      	str	r4, [sp, #84]	@ 0x54
 8006116:	4656      	mov	r6, sl
 8006118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800611c:	f7fa fd24 	bl	8000b68 <__aeabi_d2iz>
 8006120:	4605      	mov	r5, r0
 8006122:	f7fa fa07 	bl	8000534 <__aeabi_i2d>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800612e:	f7fa f8b3 	bl	8000298 <__aeabi_dsub>
 8006132:	3530      	adds	r5, #48	@ 0x30
 8006134:	f806 5b01 	strb.w	r5, [r6], #1
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	42a6      	cmp	r6, r4
 800613e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	d124      	bne.n	8006192 <_dtoa_r+0x662>
 8006148:	4bac      	ldr	r3, [pc, #688]	@ (80063fc <_dtoa_r+0x8cc>)
 800614a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800614e:	f7fa f8a5 	bl	800029c <__adddf3>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800615a:	f7fa fce5 	bl	8000b28 <__aeabi_dcmpgt>
 800615e:	2800      	cmp	r0, #0
 8006160:	d145      	bne.n	80061ee <_dtoa_r+0x6be>
 8006162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006166:	49a5      	ldr	r1, [pc, #660]	@ (80063fc <_dtoa_r+0x8cc>)
 8006168:	2000      	movs	r0, #0
 800616a:	f7fa f895 	bl	8000298 <__aeabi_dsub>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006176:	f7fa fcb9 	bl	8000aec <__aeabi_dcmplt>
 800617a:	2800      	cmp	r0, #0
 800617c:	f43f aef5 	beq.w	8005f6a <_dtoa_r+0x43a>
 8006180:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006182:	1e73      	subs	r3, r6, #1
 8006184:	9315      	str	r3, [sp, #84]	@ 0x54
 8006186:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800618a:	2b30      	cmp	r3, #48	@ 0x30
 800618c:	d0f8      	beq.n	8006180 <_dtoa_r+0x650>
 800618e:	9f04      	ldr	r7, [sp, #16]
 8006190:	e73e      	b.n	8006010 <_dtoa_r+0x4e0>
 8006192:	4b9b      	ldr	r3, [pc, #620]	@ (8006400 <_dtoa_r+0x8d0>)
 8006194:	f7fa fa38 	bl	8000608 <__aeabi_dmul>
 8006198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800619c:	e7bc      	b.n	8006118 <_dtoa_r+0x5e8>
 800619e:	d10c      	bne.n	80061ba <_dtoa_r+0x68a>
 80061a0:	4b98      	ldr	r3, [pc, #608]	@ (8006404 <_dtoa_r+0x8d4>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061a8:	f7fa fa2e 	bl	8000608 <__aeabi_dmul>
 80061ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061b0:	f7fa fcb0 	bl	8000b14 <__aeabi_dcmpge>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f000 8157 	beq.w	8006468 <_dtoa_r+0x938>
 80061ba:	2400      	movs	r4, #0
 80061bc:	4625      	mov	r5, r4
 80061be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061c0:	43db      	mvns	r3, r3
 80061c2:	9304      	str	r3, [sp, #16]
 80061c4:	4656      	mov	r6, sl
 80061c6:	2700      	movs	r7, #0
 80061c8:	4621      	mov	r1, r4
 80061ca:	4658      	mov	r0, fp
 80061cc:	f000 fafe 	bl	80067cc <_Bfree>
 80061d0:	2d00      	cmp	r5, #0
 80061d2:	d0dc      	beq.n	800618e <_dtoa_r+0x65e>
 80061d4:	b12f      	cbz	r7, 80061e2 <_dtoa_r+0x6b2>
 80061d6:	42af      	cmp	r7, r5
 80061d8:	d003      	beq.n	80061e2 <_dtoa_r+0x6b2>
 80061da:	4639      	mov	r1, r7
 80061dc:	4658      	mov	r0, fp
 80061de:	f000 faf5 	bl	80067cc <_Bfree>
 80061e2:	4629      	mov	r1, r5
 80061e4:	4658      	mov	r0, fp
 80061e6:	f000 faf1 	bl	80067cc <_Bfree>
 80061ea:	e7d0      	b.n	800618e <_dtoa_r+0x65e>
 80061ec:	9704      	str	r7, [sp, #16]
 80061ee:	4633      	mov	r3, r6
 80061f0:	461e      	mov	r6, r3
 80061f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061f6:	2a39      	cmp	r2, #57	@ 0x39
 80061f8:	d107      	bne.n	800620a <_dtoa_r+0x6da>
 80061fa:	459a      	cmp	sl, r3
 80061fc:	d1f8      	bne.n	80061f0 <_dtoa_r+0x6c0>
 80061fe:	9a04      	ldr	r2, [sp, #16]
 8006200:	3201      	adds	r2, #1
 8006202:	9204      	str	r2, [sp, #16]
 8006204:	2230      	movs	r2, #48	@ 0x30
 8006206:	f88a 2000 	strb.w	r2, [sl]
 800620a:	781a      	ldrb	r2, [r3, #0]
 800620c:	3201      	adds	r2, #1
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	e7bd      	b.n	800618e <_dtoa_r+0x65e>
 8006212:	4b7b      	ldr	r3, [pc, #492]	@ (8006400 <_dtoa_r+0x8d0>)
 8006214:	2200      	movs	r2, #0
 8006216:	f7fa f9f7 	bl	8000608 <__aeabi_dmul>
 800621a:	2200      	movs	r2, #0
 800621c:	2300      	movs	r3, #0
 800621e:	4604      	mov	r4, r0
 8006220:	460d      	mov	r5, r1
 8006222:	f7fa fc59 	bl	8000ad8 <__aeabi_dcmpeq>
 8006226:	2800      	cmp	r0, #0
 8006228:	f43f aebb 	beq.w	8005fa2 <_dtoa_r+0x472>
 800622c:	e6f0      	b.n	8006010 <_dtoa_r+0x4e0>
 800622e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006230:	2a00      	cmp	r2, #0
 8006232:	f000 80db 	beq.w	80063ec <_dtoa_r+0x8bc>
 8006236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006238:	2a01      	cmp	r2, #1
 800623a:	f300 80bf 	bgt.w	80063bc <_dtoa_r+0x88c>
 800623e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006240:	2a00      	cmp	r2, #0
 8006242:	f000 80b7 	beq.w	80063b4 <_dtoa_r+0x884>
 8006246:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800624a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800624c:	4646      	mov	r6, r8
 800624e:	9a08      	ldr	r2, [sp, #32]
 8006250:	2101      	movs	r1, #1
 8006252:	441a      	add	r2, r3
 8006254:	4658      	mov	r0, fp
 8006256:	4498      	add	r8, r3
 8006258:	9208      	str	r2, [sp, #32]
 800625a:	f000 fb6b 	bl	8006934 <__i2b>
 800625e:	4605      	mov	r5, r0
 8006260:	b15e      	cbz	r6, 800627a <_dtoa_r+0x74a>
 8006262:	9b08      	ldr	r3, [sp, #32]
 8006264:	2b00      	cmp	r3, #0
 8006266:	dd08      	ble.n	800627a <_dtoa_r+0x74a>
 8006268:	42b3      	cmp	r3, r6
 800626a:	9a08      	ldr	r2, [sp, #32]
 800626c:	bfa8      	it	ge
 800626e:	4633      	movge	r3, r6
 8006270:	eba8 0803 	sub.w	r8, r8, r3
 8006274:	1af6      	subs	r6, r6, r3
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	9308      	str	r3, [sp, #32]
 800627a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800627c:	b1f3      	cbz	r3, 80062bc <_dtoa_r+0x78c>
 800627e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80b7 	beq.w	80063f4 <_dtoa_r+0x8c4>
 8006286:	b18c      	cbz	r4, 80062ac <_dtoa_r+0x77c>
 8006288:	4629      	mov	r1, r5
 800628a:	4622      	mov	r2, r4
 800628c:	4658      	mov	r0, fp
 800628e:	f000 fc11 	bl	8006ab4 <__pow5mult>
 8006292:	464a      	mov	r2, r9
 8006294:	4601      	mov	r1, r0
 8006296:	4605      	mov	r5, r0
 8006298:	4658      	mov	r0, fp
 800629a:	f000 fb61 	bl	8006960 <__multiply>
 800629e:	4649      	mov	r1, r9
 80062a0:	9004      	str	r0, [sp, #16]
 80062a2:	4658      	mov	r0, fp
 80062a4:	f000 fa92 	bl	80067cc <_Bfree>
 80062a8:	9b04      	ldr	r3, [sp, #16]
 80062aa:	4699      	mov	r9, r3
 80062ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ae:	1b1a      	subs	r2, r3, r4
 80062b0:	d004      	beq.n	80062bc <_dtoa_r+0x78c>
 80062b2:	4649      	mov	r1, r9
 80062b4:	4658      	mov	r0, fp
 80062b6:	f000 fbfd 	bl	8006ab4 <__pow5mult>
 80062ba:	4681      	mov	r9, r0
 80062bc:	2101      	movs	r1, #1
 80062be:	4658      	mov	r0, fp
 80062c0:	f000 fb38 	bl	8006934 <__i2b>
 80062c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062c6:	4604      	mov	r4, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 81cf 	beq.w	800666c <_dtoa_r+0xb3c>
 80062ce:	461a      	mov	r2, r3
 80062d0:	4601      	mov	r1, r0
 80062d2:	4658      	mov	r0, fp
 80062d4:	f000 fbee 	bl	8006ab4 <__pow5mult>
 80062d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062da:	2b01      	cmp	r3, #1
 80062dc:	4604      	mov	r4, r0
 80062de:	f300 8095 	bgt.w	800640c <_dtoa_r+0x8dc>
 80062e2:	9b02      	ldr	r3, [sp, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 8087 	bne.w	80063f8 <_dtoa_r+0x8c8>
 80062ea:	9b03      	ldr	r3, [sp, #12]
 80062ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f040 8089 	bne.w	8006408 <_dtoa_r+0x8d8>
 80062f6:	9b03      	ldr	r3, [sp, #12]
 80062f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062fc:	0d1b      	lsrs	r3, r3, #20
 80062fe:	051b      	lsls	r3, r3, #20
 8006300:	b12b      	cbz	r3, 800630e <_dtoa_r+0x7de>
 8006302:	9b08      	ldr	r3, [sp, #32]
 8006304:	3301      	adds	r3, #1
 8006306:	9308      	str	r3, [sp, #32]
 8006308:	f108 0801 	add.w	r8, r8, #1
 800630c:	2301      	movs	r3, #1
 800630e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 81b0 	beq.w	8006678 <_dtoa_r+0xb48>
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800631e:	6918      	ldr	r0, [r3, #16]
 8006320:	f000 fabc 	bl	800689c <__hi0bits>
 8006324:	f1c0 0020 	rsb	r0, r0, #32
 8006328:	9b08      	ldr	r3, [sp, #32]
 800632a:	4418      	add	r0, r3
 800632c:	f010 001f 	ands.w	r0, r0, #31
 8006330:	d077      	beq.n	8006422 <_dtoa_r+0x8f2>
 8006332:	f1c0 0320 	rsb	r3, r0, #32
 8006336:	2b04      	cmp	r3, #4
 8006338:	dd6b      	ble.n	8006412 <_dtoa_r+0x8e2>
 800633a:	9b08      	ldr	r3, [sp, #32]
 800633c:	f1c0 001c 	rsb	r0, r0, #28
 8006340:	4403      	add	r3, r0
 8006342:	4480      	add	r8, r0
 8006344:	4406      	add	r6, r0
 8006346:	9308      	str	r3, [sp, #32]
 8006348:	f1b8 0f00 	cmp.w	r8, #0
 800634c:	dd05      	ble.n	800635a <_dtoa_r+0x82a>
 800634e:	4649      	mov	r1, r9
 8006350:	4642      	mov	r2, r8
 8006352:	4658      	mov	r0, fp
 8006354:	f000 fc08 	bl	8006b68 <__lshift>
 8006358:	4681      	mov	r9, r0
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	2b00      	cmp	r3, #0
 800635e:	dd05      	ble.n	800636c <_dtoa_r+0x83c>
 8006360:	4621      	mov	r1, r4
 8006362:	461a      	mov	r2, r3
 8006364:	4658      	mov	r0, fp
 8006366:	f000 fbff 	bl	8006b68 <__lshift>
 800636a:	4604      	mov	r4, r0
 800636c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800636e:	2b00      	cmp	r3, #0
 8006370:	d059      	beq.n	8006426 <_dtoa_r+0x8f6>
 8006372:	4621      	mov	r1, r4
 8006374:	4648      	mov	r0, r9
 8006376:	f000 fc63 	bl	8006c40 <__mcmp>
 800637a:	2800      	cmp	r0, #0
 800637c:	da53      	bge.n	8006426 <_dtoa_r+0x8f6>
 800637e:	1e7b      	subs	r3, r7, #1
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	4649      	mov	r1, r9
 8006384:	2300      	movs	r3, #0
 8006386:	220a      	movs	r2, #10
 8006388:	4658      	mov	r0, fp
 800638a:	f000 fa41 	bl	8006810 <__multadd>
 800638e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006390:	4681      	mov	r9, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8172 	beq.w	800667c <_dtoa_r+0xb4c>
 8006398:	2300      	movs	r3, #0
 800639a:	4629      	mov	r1, r5
 800639c:	220a      	movs	r2, #10
 800639e:	4658      	mov	r0, fp
 80063a0:	f000 fa36 	bl	8006810 <__multadd>
 80063a4:	9b00      	ldr	r3, [sp, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	4605      	mov	r5, r0
 80063aa:	dc67      	bgt.n	800647c <_dtoa_r+0x94c>
 80063ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	dc41      	bgt.n	8006436 <_dtoa_r+0x906>
 80063b2:	e063      	b.n	800647c <_dtoa_r+0x94c>
 80063b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80063b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80063ba:	e746      	b.n	800624a <_dtoa_r+0x71a>
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	1e5c      	subs	r4, r3, #1
 80063c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	bfbf      	itttt	lt
 80063c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80063c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80063ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80063cc:	1ae3      	sublt	r3, r4, r3
 80063ce:	bfb4      	ite	lt
 80063d0:	18d2      	addlt	r2, r2, r3
 80063d2:	1b1c      	subge	r4, r3, r4
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	bfbc      	itt	lt
 80063d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80063da:	2400      	movlt	r4, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfb5      	itete	lt
 80063e0:	eba8 0603 	sublt.w	r6, r8, r3
 80063e4:	9b07      	ldrge	r3, [sp, #28]
 80063e6:	2300      	movlt	r3, #0
 80063e8:	4646      	movge	r6, r8
 80063ea:	e730      	b.n	800624e <_dtoa_r+0x71e>
 80063ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80063ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80063f0:	4646      	mov	r6, r8
 80063f2:	e735      	b.n	8006260 <_dtoa_r+0x730>
 80063f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063f6:	e75c      	b.n	80062b2 <_dtoa_r+0x782>
 80063f8:	2300      	movs	r3, #0
 80063fa:	e788      	b.n	800630e <_dtoa_r+0x7de>
 80063fc:	3fe00000 	.word	0x3fe00000
 8006400:	40240000 	.word	0x40240000
 8006404:	40140000 	.word	0x40140000
 8006408:	9b02      	ldr	r3, [sp, #8]
 800640a:	e780      	b.n	800630e <_dtoa_r+0x7de>
 800640c:	2300      	movs	r3, #0
 800640e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006410:	e782      	b.n	8006318 <_dtoa_r+0x7e8>
 8006412:	d099      	beq.n	8006348 <_dtoa_r+0x818>
 8006414:	9a08      	ldr	r2, [sp, #32]
 8006416:	331c      	adds	r3, #28
 8006418:	441a      	add	r2, r3
 800641a:	4498      	add	r8, r3
 800641c:	441e      	add	r6, r3
 800641e:	9208      	str	r2, [sp, #32]
 8006420:	e792      	b.n	8006348 <_dtoa_r+0x818>
 8006422:	4603      	mov	r3, r0
 8006424:	e7f6      	b.n	8006414 <_dtoa_r+0x8e4>
 8006426:	9b07      	ldr	r3, [sp, #28]
 8006428:	9704      	str	r7, [sp, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	dc20      	bgt.n	8006470 <_dtoa_r+0x940>
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006432:	2b02      	cmp	r3, #2
 8006434:	dd1e      	ble.n	8006474 <_dtoa_r+0x944>
 8006436:	9b00      	ldr	r3, [sp, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f47f aec0 	bne.w	80061be <_dtoa_r+0x68e>
 800643e:	4621      	mov	r1, r4
 8006440:	2205      	movs	r2, #5
 8006442:	4658      	mov	r0, fp
 8006444:	f000 f9e4 	bl	8006810 <__multadd>
 8006448:	4601      	mov	r1, r0
 800644a:	4604      	mov	r4, r0
 800644c:	4648      	mov	r0, r9
 800644e:	f000 fbf7 	bl	8006c40 <__mcmp>
 8006452:	2800      	cmp	r0, #0
 8006454:	f77f aeb3 	ble.w	80061be <_dtoa_r+0x68e>
 8006458:	4656      	mov	r6, sl
 800645a:	2331      	movs	r3, #49	@ 0x31
 800645c:	f806 3b01 	strb.w	r3, [r6], #1
 8006460:	9b04      	ldr	r3, [sp, #16]
 8006462:	3301      	adds	r3, #1
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	e6ae      	b.n	80061c6 <_dtoa_r+0x696>
 8006468:	9c07      	ldr	r4, [sp, #28]
 800646a:	9704      	str	r7, [sp, #16]
 800646c:	4625      	mov	r5, r4
 800646e:	e7f3      	b.n	8006458 <_dtoa_r+0x928>
 8006470:	9b07      	ldr	r3, [sp, #28]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8104 	beq.w	8006684 <_dtoa_r+0xb54>
 800647c:	2e00      	cmp	r6, #0
 800647e:	dd05      	ble.n	800648c <_dtoa_r+0x95c>
 8006480:	4629      	mov	r1, r5
 8006482:	4632      	mov	r2, r6
 8006484:	4658      	mov	r0, fp
 8006486:	f000 fb6f 	bl	8006b68 <__lshift>
 800648a:	4605      	mov	r5, r0
 800648c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d05a      	beq.n	8006548 <_dtoa_r+0xa18>
 8006492:	6869      	ldr	r1, [r5, #4]
 8006494:	4658      	mov	r0, fp
 8006496:	f000 f959 	bl	800674c <_Balloc>
 800649a:	4606      	mov	r6, r0
 800649c:	b928      	cbnz	r0, 80064aa <_dtoa_r+0x97a>
 800649e:	4b84      	ldr	r3, [pc, #528]	@ (80066b0 <_dtoa_r+0xb80>)
 80064a0:	4602      	mov	r2, r0
 80064a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80064a6:	f7ff bb5a 	b.w	8005b5e <_dtoa_r+0x2e>
 80064aa:	692a      	ldr	r2, [r5, #16]
 80064ac:	3202      	adds	r2, #2
 80064ae:	0092      	lsls	r2, r2, #2
 80064b0:	f105 010c 	add.w	r1, r5, #12
 80064b4:	300c      	adds	r0, #12
 80064b6:	f7ff faa4 	bl	8005a02 <memcpy>
 80064ba:	2201      	movs	r2, #1
 80064bc:	4631      	mov	r1, r6
 80064be:	4658      	mov	r0, fp
 80064c0:	f000 fb52 	bl	8006b68 <__lshift>
 80064c4:	f10a 0301 	add.w	r3, sl, #1
 80064c8:	9307      	str	r3, [sp, #28]
 80064ca:	9b00      	ldr	r3, [sp, #0]
 80064cc:	4453      	add	r3, sl
 80064ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	462f      	mov	r7, r5
 80064d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80064da:	4605      	mov	r5, r0
 80064dc:	9b07      	ldr	r3, [sp, #28]
 80064de:	4621      	mov	r1, r4
 80064e0:	3b01      	subs	r3, #1
 80064e2:	4648      	mov	r0, r9
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	f7ff fa9a 	bl	8005a1e <quorem>
 80064ea:	4639      	mov	r1, r7
 80064ec:	9002      	str	r0, [sp, #8]
 80064ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064f2:	4648      	mov	r0, r9
 80064f4:	f000 fba4 	bl	8006c40 <__mcmp>
 80064f8:	462a      	mov	r2, r5
 80064fa:	9008      	str	r0, [sp, #32]
 80064fc:	4621      	mov	r1, r4
 80064fe:	4658      	mov	r0, fp
 8006500:	f000 fbba 	bl	8006c78 <__mdiff>
 8006504:	68c2      	ldr	r2, [r0, #12]
 8006506:	4606      	mov	r6, r0
 8006508:	bb02      	cbnz	r2, 800654c <_dtoa_r+0xa1c>
 800650a:	4601      	mov	r1, r0
 800650c:	4648      	mov	r0, r9
 800650e:	f000 fb97 	bl	8006c40 <__mcmp>
 8006512:	4602      	mov	r2, r0
 8006514:	4631      	mov	r1, r6
 8006516:	4658      	mov	r0, fp
 8006518:	920e      	str	r2, [sp, #56]	@ 0x38
 800651a:	f000 f957 	bl	80067cc <_Bfree>
 800651e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006520:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006522:	9e07      	ldr	r6, [sp, #28]
 8006524:	ea43 0102 	orr.w	r1, r3, r2
 8006528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800652a:	4319      	orrs	r1, r3
 800652c:	d110      	bne.n	8006550 <_dtoa_r+0xa20>
 800652e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006532:	d029      	beq.n	8006588 <_dtoa_r+0xa58>
 8006534:	9b08      	ldr	r3, [sp, #32]
 8006536:	2b00      	cmp	r3, #0
 8006538:	dd02      	ble.n	8006540 <_dtoa_r+0xa10>
 800653a:	9b02      	ldr	r3, [sp, #8]
 800653c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006540:	9b00      	ldr	r3, [sp, #0]
 8006542:	f883 8000 	strb.w	r8, [r3]
 8006546:	e63f      	b.n	80061c8 <_dtoa_r+0x698>
 8006548:	4628      	mov	r0, r5
 800654a:	e7bb      	b.n	80064c4 <_dtoa_r+0x994>
 800654c:	2201      	movs	r2, #1
 800654e:	e7e1      	b.n	8006514 <_dtoa_r+0x9e4>
 8006550:	9b08      	ldr	r3, [sp, #32]
 8006552:	2b00      	cmp	r3, #0
 8006554:	db04      	blt.n	8006560 <_dtoa_r+0xa30>
 8006556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006558:	430b      	orrs	r3, r1
 800655a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800655c:	430b      	orrs	r3, r1
 800655e:	d120      	bne.n	80065a2 <_dtoa_r+0xa72>
 8006560:	2a00      	cmp	r2, #0
 8006562:	dded      	ble.n	8006540 <_dtoa_r+0xa10>
 8006564:	4649      	mov	r1, r9
 8006566:	2201      	movs	r2, #1
 8006568:	4658      	mov	r0, fp
 800656a:	f000 fafd 	bl	8006b68 <__lshift>
 800656e:	4621      	mov	r1, r4
 8006570:	4681      	mov	r9, r0
 8006572:	f000 fb65 	bl	8006c40 <__mcmp>
 8006576:	2800      	cmp	r0, #0
 8006578:	dc03      	bgt.n	8006582 <_dtoa_r+0xa52>
 800657a:	d1e1      	bne.n	8006540 <_dtoa_r+0xa10>
 800657c:	f018 0f01 	tst.w	r8, #1
 8006580:	d0de      	beq.n	8006540 <_dtoa_r+0xa10>
 8006582:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006586:	d1d8      	bne.n	800653a <_dtoa_r+0xa0a>
 8006588:	9a00      	ldr	r2, [sp, #0]
 800658a:	2339      	movs	r3, #57	@ 0x39
 800658c:	7013      	strb	r3, [r2, #0]
 800658e:	4633      	mov	r3, r6
 8006590:	461e      	mov	r6, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006598:	2a39      	cmp	r2, #57	@ 0x39
 800659a:	d052      	beq.n	8006642 <_dtoa_r+0xb12>
 800659c:	3201      	adds	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	e612      	b.n	80061c8 <_dtoa_r+0x698>
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	dd07      	ble.n	80065b6 <_dtoa_r+0xa86>
 80065a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065aa:	d0ed      	beq.n	8006588 <_dtoa_r+0xa58>
 80065ac:	9a00      	ldr	r2, [sp, #0]
 80065ae:	f108 0301 	add.w	r3, r8, #1
 80065b2:	7013      	strb	r3, [r2, #0]
 80065b4:	e608      	b.n	80061c8 <_dtoa_r+0x698>
 80065b6:	9b07      	ldr	r3, [sp, #28]
 80065b8:	9a07      	ldr	r2, [sp, #28]
 80065ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80065be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d028      	beq.n	8006616 <_dtoa_r+0xae6>
 80065c4:	4649      	mov	r1, r9
 80065c6:	2300      	movs	r3, #0
 80065c8:	220a      	movs	r2, #10
 80065ca:	4658      	mov	r0, fp
 80065cc:	f000 f920 	bl	8006810 <__multadd>
 80065d0:	42af      	cmp	r7, r5
 80065d2:	4681      	mov	r9, r0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	f04f 020a 	mov.w	r2, #10
 80065dc:	4639      	mov	r1, r7
 80065de:	4658      	mov	r0, fp
 80065e0:	d107      	bne.n	80065f2 <_dtoa_r+0xac2>
 80065e2:	f000 f915 	bl	8006810 <__multadd>
 80065e6:	4607      	mov	r7, r0
 80065e8:	4605      	mov	r5, r0
 80065ea:	9b07      	ldr	r3, [sp, #28]
 80065ec:	3301      	adds	r3, #1
 80065ee:	9307      	str	r3, [sp, #28]
 80065f0:	e774      	b.n	80064dc <_dtoa_r+0x9ac>
 80065f2:	f000 f90d 	bl	8006810 <__multadd>
 80065f6:	4629      	mov	r1, r5
 80065f8:	4607      	mov	r7, r0
 80065fa:	2300      	movs	r3, #0
 80065fc:	220a      	movs	r2, #10
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 f906 	bl	8006810 <__multadd>
 8006604:	4605      	mov	r5, r0
 8006606:	e7f0      	b.n	80065ea <_dtoa_r+0xaba>
 8006608:	9b00      	ldr	r3, [sp, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	bfcc      	ite	gt
 800660e:	461e      	movgt	r6, r3
 8006610:	2601      	movle	r6, #1
 8006612:	4456      	add	r6, sl
 8006614:	2700      	movs	r7, #0
 8006616:	4649      	mov	r1, r9
 8006618:	2201      	movs	r2, #1
 800661a:	4658      	mov	r0, fp
 800661c:	f000 faa4 	bl	8006b68 <__lshift>
 8006620:	4621      	mov	r1, r4
 8006622:	4681      	mov	r9, r0
 8006624:	f000 fb0c 	bl	8006c40 <__mcmp>
 8006628:	2800      	cmp	r0, #0
 800662a:	dcb0      	bgt.n	800658e <_dtoa_r+0xa5e>
 800662c:	d102      	bne.n	8006634 <_dtoa_r+0xb04>
 800662e:	f018 0f01 	tst.w	r8, #1
 8006632:	d1ac      	bne.n	800658e <_dtoa_r+0xa5e>
 8006634:	4633      	mov	r3, r6
 8006636:	461e      	mov	r6, r3
 8006638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800663c:	2a30      	cmp	r2, #48	@ 0x30
 800663e:	d0fa      	beq.n	8006636 <_dtoa_r+0xb06>
 8006640:	e5c2      	b.n	80061c8 <_dtoa_r+0x698>
 8006642:	459a      	cmp	sl, r3
 8006644:	d1a4      	bne.n	8006590 <_dtoa_r+0xa60>
 8006646:	9b04      	ldr	r3, [sp, #16]
 8006648:	3301      	adds	r3, #1
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	2331      	movs	r3, #49	@ 0x31
 800664e:	f88a 3000 	strb.w	r3, [sl]
 8006652:	e5b9      	b.n	80061c8 <_dtoa_r+0x698>
 8006654:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006656:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80066b4 <_dtoa_r+0xb84>
 800665a:	b11b      	cbz	r3, 8006664 <_dtoa_r+0xb34>
 800665c:	f10a 0308 	add.w	r3, sl, #8
 8006660:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	4650      	mov	r0, sl
 8006666:	b019      	add	sp, #100	@ 0x64
 8006668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800666e:	2b01      	cmp	r3, #1
 8006670:	f77f ae37 	ble.w	80062e2 <_dtoa_r+0x7b2>
 8006674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006676:	930a      	str	r3, [sp, #40]	@ 0x28
 8006678:	2001      	movs	r0, #1
 800667a:	e655      	b.n	8006328 <_dtoa_r+0x7f8>
 800667c:	9b00      	ldr	r3, [sp, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f77f aed6 	ble.w	8006430 <_dtoa_r+0x900>
 8006684:	4656      	mov	r6, sl
 8006686:	4621      	mov	r1, r4
 8006688:	4648      	mov	r0, r9
 800668a:	f7ff f9c8 	bl	8005a1e <quorem>
 800668e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006692:	f806 8b01 	strb.w	r8, [r6], #1
 8006696:	9b00      	ldr	r3, [sp, #0]
 8006698:	eba6 020a 	sub.w	r2, r6, sl
 800669c:	4293      	cmp	r3, r2
 800669e:	ddb3      	ble.n	8006608 <_dtoa_r+0xad8>
 80066a0:	4649      	mov	r1, r9
 80066a2:	2300      	movs	r3, #0
 80066a4:	220a      	movs	r2, #10
 80066a6:	4658      	mov	r0, fp
 80066a8:	f000 f8b2 	bl	8006810 <__multadd>
 80066ac:	4681      	mov	r9, r0
 80066ae:	e7ea      	b.n	8006686 <_dtoa_r+0xb56>
 80066b0:	08007ce4 	.word	0x08007ce4
 80066b4:	08007c68 	.word	0x08007c68

080066b8 <_free_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4605      	mov	r5, r0
 80066bc:	2900      	cmp	r1, #0
 80066be:	d041      	beq.n	8006744 <_free_r+0x8c>
 80066c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c4:	1f0c      	subs	r4, r1, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bfb8      	it	lt
 80066ca:	18e4      	addlt	r4, r4, r3
 80066cc:	f7fe fa9c 	bl	8004c08 <__malloc_lock>
 80066d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006748 <_free_r+0x90>)
 80066d2:	6813      	ldr	r3, [r2, #0]
 80066d4:	b933      	cbnz	r3, 80066e4 <_free_r+0x2c>
 80066d6:	6063      	str	r3, [r4, #4]
 80066d8:	6014      	str	r4, [r2, #0]
 80066da:	4628      	mov	r0, r5
 80066dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e0:	f7fe ba98 	b.w	8004c14 <__malloc_unlock>
 80066e4:	42a3      	cmp	r3, r4
 80066e6:	d908      	bls.n	80066fa <_free_r+0x42>
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	1821      	adds	r1, r4, r0
 80066ec:	428b      	cmp	r3, r1
 80066ee:	bf01      	itttt	eq
 80066f0:	6819      	ldreq	r1, [r3, #0]
 80066f2:	685b      	ldreq	r3, [r3, #4]
 80066f4:	1809      	addeq	r1, r1, r0
 80066f6:	6021      	streq	r1, [r4, #0]
 80066f8:	e7ed      	b.n	80066d6 <_free_r+0x1e>
 80066fa:	461a      	mov	r2, r3
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	b10b      	cbz	r3, 8006704 <_free_r+0x4c>
 8006700:	42a3      	cmp	r3, r4
 8006702:	d9fa      	bls.n	80066fa <_free_r+0x42>
 8006704:	6811      	ldr	r1, [r2, #0]
 8006706:	1850      	adds	r0, r2, r1
 8006708:	42a0      	cmp	r0, r4
 800670a:	d10b      	bne.n	8006724 <_free_r+0x6c>
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	4401      	add	r1, r0
 8006710:	1850      	adds	r0, r2, r1
 8006712:	4283      	cmp	r3, r0
 8006714:	6011      	str	r1, [r2, #0]
 8006716:	d1e0      	bne.n	80066da <_free_r+0x22>
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	6053      	str	r3, [r2, #4]
 800671e:	4408      	add	r0, r1
 8006720:	6010      	str	r0, [r2, #0]
 8006722:	e7da      	b.n	80066da <_free_r+0x22>
 8006724:	d902      	bls.n	800672c <_free_r+0x74>
 8006726:	230c      	movs	r3, #12
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	e7d6      	b.n	80066da <_free_r+0x22>
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	1821      	adds	r1, r4, r0
 8006730:	428b      	cmp	r3, r1
 8006732:	bf04      	itt	eq
 8006734:	6819      	ldreq	r1, [r3, #0]
 8006736:	685b      	ldreq	r3, [r3, #4]
 8006738:	6063      	str	r3, [r4, #4]
 800673a:	bf04      	itt	eq
 800673c:	1809      	addeq	r1, r1, r0
 800673e:	6021      	streq	r1, [r4, #0]
 8006740:	6054      	str	r4, [r2, #4]
 8006742:	e7ca      	b.n	80066da <_free_r+0x22>
 8006744:	bd38      	pop	{r3, r4, r5, pc}
 8006746:	bf00      	nop
 8006748:	2000096c 	.word	0x2000096c

0800674c <_Balloc>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	69c6      	ldr	r6, [r0, #28]
 8006750:	4604      	mov	r4, r0
 8006752:	460d      	mov	r5, r1
 8006754:	b976      	cbnz	r6, 8006774 <_Balloc+0x28>
 8006756:	2010      	movs	r0, #16
 8006758:	f7fe f9ac 	bl	8004ab4 <malloc>
 800675c:	4602      	mov	r2, r0
 800675e:	61e0      	str	r0, [r4, #28]
 8006760:	b920      	cbnz	r0, 800676c <_Balloc+0x20>
 8006762:	4b18      	ldr	r3, [pc, #96]	@ (80067c4 <_Balloc+0x78>)
 8006764:	4818      	ldr	r0, [pc, #96]	@ (80067c8 <_Balloc+0x7c>)
 8006766:	216b      	movs	r1, #107	@ 0x6b
 8006768:	f000 fde4 	bl	8007334 <__assert_func>
 800676c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006770:	6006      	str	r6, [r0, #0]
 8006772:	60c6      	str	r6, [r0, #12]
 8006774:	69e6      	ldr	r6, [r4, #28]
 8006776:	68f3      	ldr	r3, [r6, #12]
 8006778:	b183      	cbz	r3, 800679c <_Balloc+0x50>
 800677a:	69e3      	ldr	r3, [r4, #28]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006782:	b9b8      	cbnz	r0, 80067b4 <_Balloc+0x68>
 8006784:	2101      	movs	r1, #1
 8006786:	fa01 f605 	lsl.w	r6, r1, r5
 800678a:	1d72      	adds	r2, r6, #5
 800678c:	0092      	lsls	r2, r2, #2
 800678e:	4620      	mov	r0, r4
 8006790:	f000 fdee 	bl	8007370 <_calloc_r>
 8006794:	b160      	cbz	r0, 80067b0 <_Balloc+0x64>
 8006796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800679a:	e00e      	b.n	80067ba <_Balloc+0x6e>
 800679c:	2221      	movs	r2, #33	@ 0x21
 800679e:	2104      	movs	r1, #4
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fde5 	bl	8007370 <_calloc_r>
 80067a6:	69e3      	ldr	r3, [r4, #28]
 80067a8:	60f0      	str	r0, [r6, #12]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e4      	bne.n	800677a <_Balloc+0x2e>
 80067b0:	2000      	movs	r0, #0
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	6802      	ldr	r2, [r0, #0]
 80067b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067ba:	2300      	movs	r3, #0
 80067bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067c0:	e7f7      	b.n	80067b2 <_Balloc+0x66>
 80067c2:	bf00      	nop
 80067c4:	08007c75 	.word	0x08007c75
 80067c8:	08007cf5 	.word	0x08007cf5

080067cc <_Bfree>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	69c6      	ldr	r6, [r0, #28]
 80067d0:	4605      	mov	r5, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	b976      	cbnz	r6, 80067f4 <_Bfree+0x28>
 80067d6:	2010      	movs	r0, #16
 80067d8:	f7fe f96c 	bl	8004ab4 <malloc>
 80067dc:	4602      	mov	r2, r0
 80067de:	61e8      	str	r0, [r5, #28]
 80067e0:	b920      	cbnz	r0, 80067ec <_Bfree+0x20>
 80067e2:	4b09      	ldr	r3, [pc, #36]	@ (8006808 <_Bfree+0x3c>)
 80067e4:	4809      	ldr	r0, [pc, #36]	@ (800680c <_Bfree+0x40>)
 80067e6:	218f      	movs	r1, #143	@ 0x8f
 80067e8:	f000 fda4 	bl	8007334 <__assert_func>
 80067ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067f0:	6006      	str	r6, [r0, #0]
 80067f2:	60c6      	str	r6, [r0, #12]
 80067f4:	b13c      	cbz	r4, 8006806 <_Bfree+0x3a>
 80067f6:	69eb      	ldr	r3, [r5, #28]
 80067f8:	6862      	ldr	r2, [r4, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006800:	6021      	str	r1, [r4, #0]
 8006802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	08007c75 	.word	0x08007c75
 800680c:	08007cf5 	.word	0x08007cf5

08006810 <__multadd>:
 8006810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006814:	690d      	ldr	r5, [r1, #16]
 8006816:	4607      	mov	r7, r0
 8006818:	460c      	mov	r4, r1
 800681a:	461e      	mov	r6, r3
 800681c:	f101 0c14 	add.w	ip, r1, #20
 8006820:	2000      	movs	r0, #0
 8006822:	f8dc 3000 	ldr.w	r3, [ip]
 8006826:	b299      	uxth	r1, r3
 8006828:	fb02 6101 	mla	r1, r2, r1, r6
 800682c:	0c1e      	lsrs	r6, r3, #16
 800682e:	0c0b      	lsrs	r3, r1, #16
 8006830:	fb02 3306 	mla	r3, r2, r6, r3
 8006834:	b289      	uxth	r1, r1
 8006836:	3001      	adds	r0, #1
 8006838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800683c:	4285      	cmp	r5, r0
 800683e:	f84c 1b04 	str.w	r1, [ip], #4
 8006842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006846:	dcec      	bgt.n	8006822 <__multadd+0x12>
 8006848:	b30e      	cbz	r6, 800688e <__multadd+0x7e>
 800684a:	68a3      	ldr	r3, [r4, #8]
 800684c:	42ab      	cmp	r3, r5
 800684e:	dc19      	bgt.n	8006884 <__multadd+0x74>
 8006850:	6861      	ldr	r1, [r4, #4]
 8006852:	4638      	mov	r0, r7
 8006854:	3101      	adds	r1, #1
 8006856:	f7ff ff79 	bl	800674c <_Balloc>
 800685a:	4680      	mov	r8, r0
 800685c:	b928      	cbnz	r0, 800686a <__multadd+0x5a>
 800685e:	4602      	mov	r2, r0
 8006860:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <__multadd+0x84>)
 8006862:	480d      	ldr	r0, [pc, #52]	@ (8006898 <__multadd+0x88>)
 8006864:	21ba      	movs	r1, #186	@ 0xba
 8006866:	f000 fd65 	bl	8007334 <__assert_func>
 800686a:	6922      	ldr	r2, [r4, #16]
 800686c:	3202      	adds	r2, #2
 800686e:	f104 010c 	add.w	r1, r4, #12
 8006872:	0092      	lsls	r2, r2, #2
 8006874:	300c      	adds	r0, #12
 8006876:	f7ff f8c4 	bl	8005a02 <memcpy>
 800687a:	4621      	mov	r1, r4
 800687c:	4638      	mov	r0, r7
 800687e:	f7ff ffa5 	bl	80067cc <_Bfree>
 8006882:	4644      	mov	r4, r8
 8006884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006888:	3501      	adds	r5, #1
 800688a:	615e      	str	r6, [r3, #20]
 800688c:	6125      	str	r5, [r4, #16]
 800688e:	4620      	mov	r0, r4
 8006890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006894:	08007ce4 	.word	0x08007ce4
 8006898:	08007cf5 	.word	0x08007cf5

0800689c <__hi0bits>:
 800689c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80068a0:	4603      	mov	r3, r0
 80068a2:	bf36      	itet	cc
 80068a4:	0403      	lslcc	r3, r0, #16
 80068a6:	2000      	movcs	r0, #0
 80068a8:	2010      	movcc	r0, #16
 80068aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068ae:	bf3c      	itt	cc
 80068b0:	021b      	lslcc	r3, r3, #8
 80068b2:	3008      	addcc	r0, #8
 80068b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068b8:	bf3c      	itt	cc
 80068ba:	011b      	lslcc	r3, r3, #4
 80068bc:	3004      	addcc	r0, #4
 80068be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c2:	bf3c      	itt	cc
 80068c4:	009b      	lslcc	r3, r3, #2
 80068c6:	3002      	addcc	r0, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	db05      	blt.n	80068d8 <__hi0bits+0x3c>
 80068cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80068d0:	f100 0001 	add.w	r0, r0, #1
 80068d4:	bf08      	it	eq
 80068d6:	2020      	moveq	r0, #32
 80068d8:	4770      	bx	lr

080068da <__lo0bits>:
 80068da:	6803      	ldr	r3, [r0, #0]
 80068dc:	4602      	mov	r2, r0
 80068de:	f013 0007 	ands.w	r0, r3, #7
 80068e2:	d00b      	beq.n	80068fc <__lo0bits+0x22>
 80068e4:	07d9      	lsls	r1, r3, #31
 80068e6:	d421      	bmi.n	800692c <__lo0bits+0x52>
 80068e8:	0798      	lsls	r0, r3, #30
 80068ea:	bf49      	itett	mi
 80068ec:	085b      	lsrmi	r3, r3, #1
 80068ee:	089b      	lsrpl	r3, r3, #2
 80068f0:	2001      	movmi	r0, #1
 80068f2:	6013      	strmi	r3, [r2, #0]
 80068f4:	bf5c      	itt	pl
 80068f6:	6013      	strpl	r3, [r2, #0]
 80068f8:	2002      	movpl	r0, #2
 80068fa:	4770      	bx	lr
 80068fc:	b299      	uxth	r1, r3
 80068fe:	b909      	cbnz	r1, 8006904 <__lo0bits+0x2a>
 8006900:	0c1b      	lsrs	r3, r3, #16
 8006902:	2010      	movs	r0, #16
 8006904:	b2d9      	uxtb	r1, r3
 8006906:	b909      	cbnz	r1, 800690c <__lo0bits+0x32>
 8006908:	3008      	adds	r0, #8
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	0719      	lsls	r1, r3, #28
 800690e:	bf04      	itt	eq
 8006910:	091b      	lsreq	r3, r3, #4
 8006912:	3004      	addeq	r0, #4
 8006914:	0799      	lsls	r1, r3, #30
 8006916:	bf04      	itt	eq
 8006918:	089b      	lsreq	r3, r3, #2
 800691a:	3002      	addeq	r0, #2
 800691c:	07d9      	lsls	r1, r3, #31
 800691e:	d403      	bmi.n	8006928 <__lo0bits+0x4e>
 8006920:	085b      	lsrs	r3, r3, #1
 8006922:	f100 0001 	add.w	r0, r0, #1
 8006926:	d003      	beq.n	8006930 <__lo0bits+0x56>
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	4770      	bx	lr
 800692c:	2000      	movs	r0, #0
 800692e:	4770      	bx	lr
 8006930:	2020      	movs	r0, #32
 8006932:	4770      	bx	lr

08006934 <__i2b>:
 8006934:	b510      	push	{r4, lr}
 8006936:	460c      	mov	r4, r1
 8006938:	2101      	movs	r1, #1
 800693a:	f7ff ff07 	bl	800674c <_Balloc>
 800693e:	4602      	mov	r2, r0
 8006940:	b928      	cbnz	r0, 800694e <__i2b+0x1a>
 8006942:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <__i2b+0x24>)
 8006944:	4805      	ldr	r0, [pc, #20]	@ (800695c <__i2b+0x28>)
 8006946:	f240 1145 	movw	r1, #325	@ 0x145
 800694a:	f000 fcf3 	bl	8007334 <__assert_func>
 800694e:	2301      	movs	r3, #1
 8006950:	6144      	str	r4, [r0, #20]
 8006952:	6103      	str	r3, [r0, #16]
 8006954:	bd10      	pop	{r4, pc}
 8006956:	bf00      	nop
 8006958:	08007ce4 	.word	0x08007ce4
 800695c:	08007cf5 	.word	0x08007cf5

08006960 <__multiply>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	4614      	mov	r4, r2
 8006966:	690a      	ldr	r2, [r1, #16]
 8006968:	6923      	ldr	r3, [r4, #16]
 800696a:	429a      	cmp	r2, r3
 800696c:	bfa8      	it	ge
 800696e:	4623      	movge	r3, r4
 8006970:	460f      	mov	r7, r1
 8006972:	bfa4      	itt	ge
 8006974:	460c      	movge	r4, r1
 8006976:	461f      	movge	r7, r3
 8006978:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800697c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006980:	68a3      	ldr	r3, [r4, #8]
 8006982:	6861      	ldr	r1, [r4, #4]
 8006984:	eb0a 0609 	add.w	r6, sl, r9
 8006988:	42b3      	cmp	r3, r6
 800698a:	b085      	sub	sp, #20
 800698c:	bfb8      	it	lt
 800698e:	3101      	addlt	r1, #1
 8006990:	f7ff fedc 	bl	800674c <_Balloc>
 8006994:	b930      	cbnz	r0, 80069a4 <__multiply+0x44>
 8006996:	4602      	mov	r2, r0
 8006998:	4b44      	ldr	r3, [pc, #272]	@ (8006aac <__multiply+0x14c>)
 800699a:	4845      	ldr	r0, [pc, #276]	@ (8006ab0 <__multiply+0x150>)
 800699c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80069a0:	f000 fcc8 	bl	8007334 <__assert_func>
 80069a4:	f100 0514 	add.w	r5, r0, #20
 80069a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069ac:	462b      	mov	r3, r5
 80069ae:	2200      	movs	r2, #0
 80069b0:	4543      	cmp	r3, r8
 80069b2:	d321      	bcc.n	80069f8 <__multiply+0x98>
 80069b4:	f107 0114 	add.w	r1, r7, #20
 80069b8:	f104 0214 	add.w	r2, r4, #20
 80069bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80069c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80069c4:	9302      	str	r3, [sp, #8]
 80069c6:	1b13      	subs	r3, r2, r4
 80069c8:	3b15      	subs	r3, #21
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	3304      	adds	r3, #4
 80069d0:	f104 0715 	add.w	r7, r4, #21
 80069d4:	42ba      	cmp	r2, r7
 80069d6:	bf38      	it	cc
 80069d8:	2304      	movcc	r3, #4
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	9103      	str	r1, [sp, #12]
 80069e0:	428b      	cmp	r3, r1
 80069e2:	d80c      	bhi.n	80069fe <__multiply+0x9e>
 80069e4:	2e00      	cmp	r6, #0
 80069e6:	dd03      	ble.n	80069f0 <__multiply+0x90>
 80069e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d05b      	beq.n	8006aa8 <__multiply+0x148>
 80069f0:	6106      	str	r6, [r0, #16]
 80069f2:	b005      	add	sp, #20
 80069f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f8:	f843 2b04 	str.w	r2, [r3], #4
 80069fc:	e7d8      	b.n	80069b0 <__multiply+0x50>
 80069fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a02:	f1ba 0f00 	cmp.w	sl, #0
 8006a06:	d024      	beq.n	8006a52 <__multiply+0xf2>
 8006a08:	f104 0e14 	add.w	lr, r4, #20
 8006a0c:	46a9      	mov	r9, r5
 8006a0e:	f04f 0c00 	mov.w	ip, #0
 8006a12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006a16:	f8d9 3000 	ldr.w	r3, [r9]
 8006a1a:	fa1f fb87 	uxth.w	fp, r7
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006a28:	f8d9 7000 	ldr.w	r7, [r9]
 8006a2c:	4463      	add	r3, ip
 8006a2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006a32:	fb0a c70b 	mla	r7, sl, fp, ip
 8006a36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a40:	4572      	cmp	r2, lr
 8006a42:	f849 3b04 	str.w	r3, [r9], #4
 8006a46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006a4a:	d8e2      	bhi.n	8006a12 <__multiply+0xb2>
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	f845 c003 	str.w	ip, [r5, r3]
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006a58:	3104      	adds	r1, #4
 8006a5a:	f1b9 0f00 	cmp.w	r9, #0
 8006a5e:	d021      	beq.n	8006aa4 <__multiply+0x144>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	f104 0c14 	add.w	ip, r4, #20
 8006a66:	46ae      	mov	lr, r5
 8006a68:	f04f 0a00 	mov.w	sl, #0
 8006a6c:	f8bc b000 	ldrh.w	fp, [ip]
 8006a70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006a74:	fb09 770b 	mla	r7, r9, fp, r7
 8006a78:	4457      	add	r7, sl
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a80:	f84e 3b04 	str.w	r3, [lr], #4
 8006a84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a8c:	f8be 3000 	ldrh.w	r3, [lr]
 8006a90:	fb09 330a 	mla	r3, r9, sl, r3
 8006a94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006a98:	4562      	cmp	r2, ip
 8006a9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a9e:	d8e5      	bhi.n	8006a6c <__multiply+0x10c>
 8006aa0:	9f01      	ldr	r7, [sp, #4]
 8006aa2:	51eb      	str	r3, [r5, r7]
 8006aa4:	3504      	adds	r5, #4
 8006aa6:	e799      	b.n	80069dc <__multiply+0x7c>
 8006aa8:	3e01      	subs	r6, #1
 8006aaa:	e79b      	b.n	80069e4 <__multiply+0x84>
 8006aac:	08007ce4 	.word	0x08007ce4
 8006ab0:	08007cf5 	.word	0x08007cf5

08006ab4 <__pow5mult>:
 8006ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab8:	4615      	mov	r5, r2
 8006aba:	f012 0203 	ands.w	r2, r2, #3
 8006abe:	4607      	mov	r7, r0
 8006ac0:	460e      	mov	r6, r1
 8006ac2:	d007      	beq.n	8006ad4 <__pow5mult+0x20>
 8006ac4:	4c25      	ldr	r4, [pc, #148]	@ (8006b5c <__pow5mult+0xa8>)
 8006ac6:	3a01      	subs	r2, #1
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ace:	f7ff fe9f 	bl	8006810 <__multadd>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	10ad      	asrs	r5, r5, #2
 8006ad6:	d03d      	beq.n	8006b54 <__pow5mult+0xa0>
 8006ad8:	69fc      	ldr	r4, [r7, #28]
 8006ada:	b97c      	cbnz	r4, 8006afc <__pow5mult+0x48>
 8006adc:	2010      	movs	r0, #16
 8006ade:	f7fd ffe9 	bl	8004ab4 <malloc>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	61f8      	str	r0, [r7, #28]
 8006ae6:	b928      	cbnz	r0, 8006af4 <__pow5mult+0x40>
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b60 <__pow5mult+0xac>)
 8006aea:	481e      	ldr	r0, [pc, #120]	@ (8006b64 <__pow5mult+0xb0>)
 8006aec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006af0:	f000 fc20 	bl	8007334 <__assert_func>
 8006af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006af8:	6004      	str	r4, [r0, #0]
 8006afa:	60c4      	str	r4, [r0, #12]
 8006afc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b04:	b94c      	cbnz	r4, 8006b1a <__pow5mult+0x66>
 8006b06:	f240 2171 	movw	r1, #625	@ 0x271
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	f7ff ff12 	bl	8006934 <__i2b>
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b16:	4604      	mov	r4, r0
 8006b18:	6003      	str	r3, [r0, #0]
 8006b1a:	f04f 0900 	mov.w	r9, #0
 8006b1e:	07eb      	lsls	r3, r5, #31
 8006b20:	d50a      	bpl.n	8006b38 <__pow5mult+0x84>
 8006b22:	4631      	mov	r1, r6
 8006b24:	4622      	mov	r2, r4
 8006b26:	4638      	mov	r0, r7
 8006b28:	f7ff ff1a 	bl	8006960 <__multiply>
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4680      	mov	r8, r0
 8006b30:	4638      	mov	r0, r7
 8006b32:	f7ff fe4b 	bl	80067cc <_Bfree>
 8006b36:	4646      	mov	r6, r8
 8006b38:	106d      	asrs	r5, r5, #1
 8006b3a:	d00b      	beq.n	8006b54 <__pow5mult+0xa0>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	b938      	cbnz	r0, 8006b50 <__pow5mult+0x9c>
 8006b40:	4622      	mov	r2, r4
 8006b42:	4621      	mov	r1, r4
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff ff0b 	bl	8006960 <__multiply>
 8006b4a:	6020      	str	r0, [r4, #0]
 8006b4c:	f8c0 9000 	str.w	r9, [r0]
 8006b50:	4604      	mov	r4, r0
 8006b52:	e7e4      	b.n	8006b1e <__pow5mult+0x6a>
 8006b54:	4630      	mov	r0, r6
 8006b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b5a:	bf00      	nop
 8006b5c:	08007d50 	.word	0x08007d50
 8006b60:	08007c75 	.word	0x08007c75
 8006b64:	08007cf5 	.word	0x08007cf5

08006b68 <__lshift>:
 8006b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	6849      	ldr	r1, [r1, #4]
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b76:	68a3      	ldr	r3, [r4, #8]
 8006b78:	4607      	mov	r7, r0
 8006b7a:	4691      	mov	r9, r2
 8006b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b80:	f108 0601 	add.w	r6, r8, #1
 8006b84:	42b3      	cmp	r3, r6
 8006b86:	db0b      	blt.n	8006ba0 <__lshift+0x38>
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f7ff fddf 	bl	800674c <_Balloc>
 8006b8e:	4605      	mov	r5, r0
 8006b90:	b948      	cbnz	r0, 8006ba6 <__lshift+0x3e>
 8006b92:	4602      	mov	r2, r0
 8006b94:	4b28      	ldr	r3, [pc, #160]	@ (8006c38 <__lshift+0xd0>)
 8006b96:	4829      	ldr	r0, [pc, #164]	@ (8006c3c <__lshift+0xd4>)
 8006b98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b9c:	f000 fbca 	bl	8007334 <__assert_func>
 8006ba0:	3101      	adds	r1, #1
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	e7ee      	b.n	8006b84 <__lshift+0x1c>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f100 0114 	add.w	r1, r0, #20
 8006bac:	f100 0210 	add.w	r2, r0, #16
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	4553      	cmp	r3, sl
 8006bb4:	db33      	blt.n	8006c1e <__lshift+0xb6>
 8006bb6:	6920      	ldr	r0, [r4, #16]
 8006bb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bbc:	f104 0314 	add.w	r3, r4, #20
 8006bc0:	f019 091f 	ands.w	r9, r9, #31
 8006bc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bcc:	d02b      	beq.n	8006c26 <__lshift+0xbe>
 8006bce:	f1c9 0e20 	rsb	lr, r9, #32
 8006bd2:	468a      	mov	sl, r1
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	fa00 f009 	lsl.w	r0, r0, r9
 8006bdc:	4310      	orrs	r0, r2
 8006bde:	f84a 0b04 	str.w	r0, [sl], #4
 8006be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be6:	459c      	cmp	ip, r3
 8006be8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006bec:	d8f3      	bhi.n	8006bd6 <__lshift+0x6e>
 8006bee:	ebac 0304 	sub.w	r3, ip, r4
 8006bf2:	3b15      	subs	r3, #21
 8006bf4:	f023 0303 	bic.w	r3, r3, #3
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	f104 0015 	add.w	r0, r4, #21
 8006bfe:	4584      	cmp	ip, r0
 8006c00:	bf38      	it	cc
 8006c02:	2304      	movcc	r3, #4
 8006c04:	50ca      	str	r2, [r1, r3]
 8006c06:	b10a      	cbz	r2, 8006c0c <__lshift+0xa4>
 8006c08:	f108 0602 	add.w	r6, r8, #2
 8006c0c:	3e01      	subs	r6, #1
 8006c0e:	4638      	mov	r0, r7
 8006c10:	612e      	str	r6, [r5, #16]
 8006c12:	4621      	mov	r1, r4
 8006c14:	f7ff fdda 	bl	80067cc <_Bfree>
 8006c18:	4628      	mov	r0, r5
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c22:	3301      	adds	r3, #1
 8006c24:	e7c5      	b.n	8006bb2 <__lshift+0x4a>
 8006c26:	3904      	subs	r1, #4
 8006c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c30:	459c      	cmp	ip, r3
 8006c32:	d8f9      	bhi.n	8006c28 <__lshift+0xc0>
 8006c34:	e7ea      	b.n	8006c0c <__lshift+0xa4>
 8006c36:	bf00      	nop
 8006c38:	08007ce4 	.word	0x08007ce4
 8006c3c:	08007cf5 	.word	0x08007cf5

08006c40 <__mcmp>:
 8006c40:	690a      	ldr	r2, [r1, #16]
 8006c42:	4603      	mov	r3, r0
 8006c44:	6900      	ldr	r0, [r0, #16]
 8006c46:	1a80      	subs	r0, r0, r2
 8006c48:	b530      	push	{r4, r5, lr}
 8006c4a:	d10e      	bne.n	8006c6a <__mcmp+0x2a>
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	3114      	adds	r1, #20
 8006c50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c60:	4295      	cmp	r5, r2
 8006c62:	d003      	beq.n	8006c6c <__mcmp+0x2c>
 8006c64:	d205      	bcs.n	8006c72 <__mcmp+0x32>
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6a:	bd30      	pop	{r4, r5, pc}
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	d3f3      	bcc.n	8006c58 <__mcmp+0x18>
 8006c70:	e7fb      	b.n	8006c6a <__mcmp+0x2a>
 8006c72:	2001      	movs	r0, #1
 8006c74:	e7f9      	b.n	8006c6a <__mcmp+0x2a>
	...

08006c78 <__mdiff>:
 8006c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	4689      	mov	r9, r1
 8006c7e:	4606      	mov	r6, r0
 8006c80:	4611      	mov	r1, r2
 8006c82:	4648      	mov	r0, r9
 8006c84:	4614      	mov	r4, r2
 8006c86:	f7ff ffdb 	bl	8006c40 <__mcmp>
 8006c8a:	1e05      	subs	r5, r0, #0
 8006c8c:	d112      	bne.n	8006cb4 <__mdiff+0x3c>
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4630      	mov	r0, r6
 8006c92:	f7ff fd5b 	bl	800674c <_Balloc>
 8006c96:	4602      	mov	r2, r0
 8006c98:	b928      	cbnz	r0, 8006ca6 <__mdiff+0x2e>
 8006c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8006d98 <__mdiff+0x120>)
 8006c9c:	f240 2137 	movw	r1, #567	@ 0x237
 8006ca0:	483e      	ldr	r0, [pc, #248]	@ (8006d9c <__mdiff+0x124>)
 8006ca2:	f000 fb47 	bl	8007334 <__assert_func>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cac:	4610      	mov	r0, r2
 8006cae:	b003      	add	sp, #12
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb4:	bfbc      	itt	lt
 8006cb6:	464b      	movlt	r3, r9
 8006cb8:	46a1      	movlt	r9, r4
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006cc0:	bfba      	itte	lt
 8006cc2:	461c      	movlt	r4, r3
 8006cc4:	2501      	movlt	r5, #1
 8006cc6:	2500      	movge	r5, #0
 8006cc8:	f7ff fd40 	bl	800674c <_Balloc>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	b918      	cbnz	r0, 8006cd8 <__mdiff+0x60>
 8006cd0:	4b31      	ldr	r3, [pc, #196]	@ (8006d98 <__mdiff+0x120>)
 8006cd2:	f240 2145 	movw	r1, #581	@ 0x245
 8006cd6:	e7e3      	b.n	8006ca0 <__mdiff+0x28>
 8006cd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006cdc:	6926      	ldr	r6, [r4, #16]
 8006cde:	60c5      	str	r5, [r0, #12]
 8006ce0:	f109 0310 	add.w	r3, r9, #16
 8006ce4:	f109 0514 	add.w	r5, r9, #20
 8006ce8:	f104 0e14 	add.w	lr, r4, #20
 8006cec:	f100 0b14 	add.w	fp, r0, #20
 8006cf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006cf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	46d9      	mov	r9, fp
 8006cfc:	f04f 0c00 	mov.w	ip, #0
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	fa1f f38a 	uxth.w	r3, sl
 8006d10:	4619      	mov	r1, r3
 8006d12:	b283      	uxth	r3, r0
 8006d14:	1acb      	subs	r3, r1, r3
 8006d16:	0c00      	lsrs	r0, r0, #16
 8006d18:	4463      	add	r3, ip
 8006d1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d28:	4576      	cmp	r6, lr
 8006d2a:	f849 3b04 	str.w	r3, [r9], #4
 8006d2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d32:	d8e5      	bhi.n	8006d00 <__mdiff+0x88>
 8006d34:	1b33      	subs	r3, r6, r4
 8006d36:	3b15      	subs	r3, #21
 8006d38:	f023 0303 	bic.w	r3, r3, #3
 8006d3c:	3415      	adds	r4, #21
 8006d3e:	3304      	adds	r3, #4
 8006d40:	42a6      	cmp	r6, r4
 8006d42:	bf38      	it	cc
 8006d44:	2304      	movcc	r3, #4
 8006d46:	441d      	add	r5, r3
 8006d48:	445b      	add	r3, fp
 8006d4a:	461e      	mov	r6, r3
 8006d4c:	462c      	mov	r4, r5
 8006d4e:	4544      	cmp	r4, r8
 8006d50:	d30e      	bcc.n	8006d70 <__mdiff+0xf8>
 8006d52:	f108 0103 	add.w	r1, r8, #3
 8006d56:	1b49      	subs	r1, r1, r5
 8006d58:	f021 0103 	bic.w	r1, r1, #3
 8006d5c:	3d03      	subs	r5, #3
 8006d5e:	45a8      	cmp	r8, r5
 8006d60:	bf38      	it	cc
 8006d62:	2100      	movcc	r1, #0
 8006d64:	440b      	add	r3, r1
 8006d66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d6a:	b191      	cbz	r1, 8006d92 <__mdiff+0x11a>
 8006d6c:	6117      	str	r7, [r2, #16]
 8006d6e:	e79d      	b.n	8006cac <__mdiff+0x34>
 8006d70:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d74:	46e6      	mov	lr, ip
 8006d76:	0c08      	lsrs	r0, r1, #16
 8006d78:	fa1c fc81 	uxtah	ip, ip, r1
 8006d7c:	4471      	add	r1, lr
 8006d7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006d82:	b289      	uxth	r1, r1
 8006d84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d88:	f846 1b04 	str.w	r1, [r6], #4
 8006d8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d90:	e7dd      	b.n	8006d4e <__mdiff+0xd6>
 8006d92:	3f01      	subs	r7, #1
 8006d94:	e7e7      	b.n	8006d66 <__mdiff+0xee>
 8006d96:	bf00      	nop
 8006d98:	08007ce4 	.word	0x08007ce4
 8006d9c:	08007cf5 	.word	0x08007cf5

08006da0 <__d2b>:
 8006da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006da4:	460f      	mov	r7, r1
 8006da6:	2101      	movs	r1, #1
 8006da8:	ec59 8b10 	vmov	r8, r9, d0
 8006dac:	4616      	mov	r6, r2
 8006dae:	f7ff fccd 	bl	800674c <_Balloc>
 8006db2:	4604      	mov	r4, r0
 8006db4:	b930      	cbnz	r0, 8006dc4 <__d2b+0x24>
 8006db6:	4602      	mov	r2, r0
 8006db8:	4b23      	ldr	r3, [pc, #140]	@ (8006e48 <__d2b+0xa8>)
 8006dba:	4824      	ldr	r0, [pc, #144]	@ (8006e4c <__d2b+0xac>)
 8006dbc:	f240 310f 	movw	r1, #783	@ 0x30f
 8006dc0:	f000 fab8 	bl	8007334 <__assert_func>
 8006dc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006dc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dcc:	b10d      	cbz	r5, 8006dd2 <__d2b+0x32>
 8006dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	f1b8 0300 	subs.w	r3, r8, #0
 8006dd8:	d023      	beq.n	8006e22 <__d2b+0x82>
 8006dda:	4668      	mov	r0, sp
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	f7ff fd7c 	bl	80068da <__lo0bits>
 8006de2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006de6:	b1d0      	cbz	r0, 8006e1e <__d2b+0x7e>
 8006de8:	f1c0 0320 	rsb	r3, r0, #32
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	430b      	orrs	r3, r1
 8006df2:	40c2      	lsrs	r2, r0
 8006df4:	6163      	str	r3, [r4, #20]
 8006df6:	9201      	str	r2, [sp, #4]
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	61a3      	str	r3, [r4, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bf0c      	ite	eq
 8006e00:	2201      	moveq	r2, #1
 8006e02:	2202      	movne	r2, #2
 8006e04:	6122      	str	r2, [r4, #16]
 8006e06:	b1a5      	cbz	r5, 8006e32 <__d2b+0x92>
 8006e08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e0c:	4405      	add	r5, r0
 8006e0e:	603d      	str	r5, [r7, #0]
 8006e10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e14:	6030      	str	r0, [r6, #0]
 8006e16:	4620      	mov	r0, r4
 8006e18:	b003      	add	sp, #12
 8006e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e1e:	6161      	str	r1, [r4, #20]
 8006e20:	e7ea      	b.n	8006df8 <__d2b+0x58>
 8006e22:	a801      	add	r0, sp, #4
 8006e24:	f7ff fd59 	bl	80068da <__lo0bits>
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	6163      	str	r3, [r4, #20]
 8006e2c:	3020      	adds	r0, #32
 8006e2e:	2201      	movs	r2, #1
 8006e30:	e7e8      	b.n	8006e04 <__d2b+0x64>
 8006e32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e3a:	6038      	str	r0, [r7, #0]
 8006e3c:	6918      	ldr	r0, [r3, #16]
 8006e3e:	f7ff fd2d 	bl	800689c <__hi0bits>
 8006e42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e46:	e7e5      	b.n	8006e14 <__d2b+0x74>
 8006e48:	08007ce4 	.word	0x08007ce4
 8006e4c:	08007cf5 	.word	0x08007cf5

08006e50 <__sfputc_r>:
 8006e50:	6893      	ldr	r3, [r2, #8]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	b410      	push	{r4}
 8006e58:	6093      	str	r3, [r2, #8]
 8006e5a:	da08      	bge.n	8006e6e <__sfputc_r+0x1e>
 8006e5c:	6994      	ldr	r4, [r2, #24]
 8006e5e:	42a3      	cmp	r3, r4
 8006e60:	db01      	blt.n	8006e66 <__sfputc_r+0x16>
 8006e62:	290a      	cmp	r1, #10
 8006e64:	d103      	bne.n	8006e6e <__sfputc_r+0x1e>
 8006e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e6a:	f7fe bca6 	b.w	80057ba <__swbuf_r>
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	1c58      	adds	r0, r3, #1
 8006e72:	6010      	str	r0, [r2, #0]
 8006e74:	7019      	strb	r1, [r3, #0]
 8006e76:	4608      	mov	r0, r1
 8006e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <__sfputs_r>:
 8006e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e80:	4606      	mov	r6, r0
 8006e82:	460f      	mov	r7, r1
 8006e84:	4614      	mov	r4, r2
 8006e86:	18d5      	adds	r5, r2, r3
 8006e88:	42ac      	cmp	r4, r5
 8006e8a:	d101      	bne.n	8006e90 <__sfputs_r+0x12>
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	e007      	b.n	8006ea0 <__sfputs_r+0x22>
 8006e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e94:	463a      	mov	r2, r7
 8006e96:	4630      	mov	r0, r6
 8006e98:	f7ff ffda 	bl	8006e50 <__sfputc_r>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d1f3      	bne.n	8006e88 <__sfputs_r+0xa>
 8006ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ea4 <_vfiprintf_r>:
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	460d      	mov	r5, r1
 8006eaa:	b09d      	sub	sp, #116	@ 0x74
 8006eac:	4614      	mov	r4, r2
 8006eae:	4698      	mov	r8, r3
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	b118      	cbz	r0, 8006ebc <_vfiprintf_r+0x18>
 8006eb4:	6a03      	ldr	r3, [r0, #32]
 8006eb6:	b90b      	cbnz	r3, 8006ebc <_vfiprintf_r+0x18>
 8006eb8:	f7fe fb96 	bl	80055e8 <__sinit>
 8006ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ebe:	07d9      	lsls	r1, r3, #31
 8006ec0:	d405      	bmi.n	8006ece <_vfiprintf_r+0x2a>
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	059a      	lsls	r2, r3, #22
 8006ec6:	d402      	bmi.n	8006ece <_vfiprintf_r+0x2a>
 8006ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eca:	f7fe fd98 	bl	80059fe <__retarget_lock_acquire_recursive>
 8006ece:	89ab      	ldrh	r3, [r5, #12]
 8006ed0:	071b      	lsls	r3, r3, #28
 8006ed2:	d501      	bpl.n	8006ed8 <_vfiprintf_r+0x34>
 8006ed4:	692b      	ldr	r3, [r5, #16]
 8006ed6:	b99b      	cbnz	r3, 8006f00 <_vfiprintf_r+0x5c>
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7fe fcac 	bl	8005838 <__swsetup_r>
 8006ee0:	b170      	cbz	r0, 8006f00 <_vfiprintf_r+0x5c>
 8006ee2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ee4:	07dc      	lsls	r4, r3, #31
 8006ee6:	d504      	bpl.n	8006ef2 <_vfiprintf_r+0x4e>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	b01d      	add	sp, #116	@ 0x74
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef2:	89ab      	ldrh	r3, [r5, #12]
 8006ef4:	0598      	lsls	r0, r3, #22
 8006ef6:	d4f7      	bmi.n	8006ee8 <_vfiprintf_r+0x44>
 8006ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006efa:	f7fe fd81 	bl	8005a00 <__retarget_lock_release_recursive>
 8006efe:	e7f3      	b.n	8006ee8 <_vfiprintf_r+0x44>
 8006f00:	2300      	movs	r3, #0
 8006f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f04:	2320      	movs	r3, #32
 8006f06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f0e:	2330      	movs	r3, #48	@ 0x30
 8006f10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80070c0 <_vfiprintf_r+0x21c>
 8006f14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f18:	f04f 0901 	mov.w	r9, #1
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	469a      	mov	sl, r3
 8006f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f24:	b10a      	cbz	r2, 8006f2a <_vfiprintf_r+0x86>
 8006f26:	2a25      	cmp	r2, #37	@ 0x25
 8006f28:	d1f9      	bne.n	8006f1e <_vfiprintf_r+0x7a>
 8006f2a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f2e:	d00b      	beq.n	8006f48 <_vfiprintf_r+0xa4>
 8006f30:	465b      	mov	r3, fp
 8006f32:	4622      	mov	r2, r4
 8006f34:	4629      	mov	r1, r5
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7ff ffa1 	bl	8006e7e <__sfputs_r>
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	f000 80a7 	beq.w	8007090 <_vfiprintf_r+0x1ec>
 8006f42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f44:	445a      	add	r2, fp
 8006f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f48:	f89a 3000 	ldrb.w	r3, [sl]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 809f 	beq.w	8007090 <_vfiprintf_r+0x1ec>
 8006f52:	2300      	movs	r3, #0
 8006f54:	f04f 32ff 	mov.w	r2, #4294967295
 8006f58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f5c:	f10a 0a01 	add.w	sl, sl, #1
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	9307      	str	r3, [sp, #28]
 8006f64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f68:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f6a:	4654      	mov	r4, sl
 8006f6c:	2205      	movs	r2, #5
 8006f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f72:	4853      	ldr	r0, [pc, #332]	@ (80070c0 <_vfiprintf_r+0x21c>)
 8006f74:	f7f9 f934 	bl	80001e0 <memchr>
 8006f78:	9a04      	ldr	r2, [sp, #16]
 8006f7a:	b9d8      	cbnz	r0, 8006fb4 <_vfiprintf_r+0x110>
 8006f7c:	06d1      	lsls	r1, r2, #27
 8006f7e:	bf44      	itt	mi
 8006f80:	2320      	movmi	r3, #32
 8006f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f86:	0713      	lsls	r3, r2, #28
 8006f88:	bf44      	itt	mi
 8006f8a:	232b      	movmi	r3, #43	@ 0x2b
 8006f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f90:	f89a 3000 	ldrb.w	r3, [sl]
 8006f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f96:	d015      	beq.n	8006fc4 <_vfiprintf_r+0x120>
 8006f98:	9a07      	ldr	r2, [sp, #28]
 8006f9a:	4654      	mov	r4, sl
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f04f 0c0a 	mov.w	ip, #10
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fa8:	3b30      	subs	r3, #48	@ 0x30
 8006faa:	2b09      	cmp	r3, #9
 8006fac:	d94b      	bls.n	8007046 <_vfiprintf_r+0x1a2>
 8006fae:	b1b0      	cbz	r0, 8006fde <_vfiprintf_r+0x13a>
 8006fb0:	9207      	str	r2, [sp, #28]
 8006fb2:	e014      	b.n	8006fde <_vfiprintf_r+0x13a>
 8006fb4:	eba0 0308 	sub.w	r3, r0, r8
 8006fb8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	46a2      	mov	sl, r4
 8006fc2:	e7d2      	b.n	8006f6a <_vfiprintf_r+0xc6>
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	1d19      	adds	r1, r3, #4
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	9103      	str	r1, [sp, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bfbb      	ittet	lt
 8006fd0:	425b      	neglt	r3, r3
 8006fd2:	f042 0202 	orrlt.w	r2, r2, #2
 8006fd6:	9307      	strge	r3, [sp, #28]
 8006fd8:	9307      	strlt	r3, [sp, #28]
 8006fda:	bfb8      	it	lt
 8006fdc:	9204      	strlt	r2, [sp, #16]
 8006fde:	7823      	ldrb	r3, [r4, #0]
 8006fe0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fe2:	d10a      	bne.n	8006ffa <_vfiprintf_r+0x156>
 8006fe4:	7863      	ldrb	r3, [r4, #1]
 8006fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe8:	d132      	bne.n	8007050 <_vfiprintf_r+0x1ac>
 8006fea:	9b03      	ldr	r3, [sp, #12]
 8006fec:	1d1a      	adds	r2, r3, #4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	9203      	str	r2, [sp, #12]
 8006ff2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ff6:	3402      	adds	r4, #2
 8006ff8:	9305      	str	r3, [sp, #20]
 8006ffa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80070d0 <_vfiprintf_r+0x22c>
 8006ffe:	7821      	ldrb	r1, [r4, #0]
 8007000:	2203      	movs	r2, #3
 8007002:	4650      	mov	r0, sl
 8007004:	f7f9 f8ec 	bl	80001e0 <memchr>
 8007008:	b138      	cbz	r0, 800701a <_vfiprintf_r+0x176>
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	eba0 000a 	sub.w	r0, r0, sl
 8007010:	2240      	movs	r2, #64	@ 0x40
 8007012:	4082      	lsls	r2, r0
 8007014:	4313      	orrs	r3, r2
 8007016:	3401      	adds	r4, #1
 8007018:	9304      	str	r3, [sp, #16]
 800701a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701e:	4829      	ldr	r0, [pc, #164]	@ (80070c4 <_vfiprintf_r+0x220>)
 8007020:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007024:	2206      	movs	r2, #6
 8007026:	f7f9 f8db 	bl	80001e0 <memchr>
 800702a:	2800      	cmp	r0, #0
 800702c:	d03f      	beq.n	80070ae <_vfiprintf_r+0x20a>
 800702e:	4b26      	ldr	r3, [pc, #152]	@ (80070c8 <_vfiprintf_r+0x224>)
 8007030:	bb1b      	cbnz	r3, 800707a <_vfiprintf_r+0x1d6>
 8007032:	9b03      	ldr	r3, [sp, #12]
 8007034:	3307      	adds	r3, #7
 8007036:	f023 0307 	bic.w	r3, r3, #7
 800703a:	3308      	adds	r3, #8
 800703c:	9303      	str	r3, [sp, #12]
 800703e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007040:	443b      	add	r3, r7
 8007042:	9309      	str	r3, [sp, #36]	@ 0x24
 8007044:	e76a      	b.n	8006f1c <_vfiprintf_r+0x78>
 8007046:	fb0c 3202 	mla	r2, ip, r2, r3
 800704a:	460c      	mov	r4, r1
 800704c:	2001      	movs	r0, #1
 800704e:	e7a8      	b.n	8006fa2 <_vfiprintf_r+0xfe>
 8007050:	2300      	movs	r3, #0
 8007052:	3401      	adds	r4, #1
 8007054:	9305      	str	r3, [sp, #20]
 8007056:	4619      	mov	r1, r3
 8007058:	f04f 0c0a 	mov.w	ip, #10
 800705c:	4620      	mov	r0, r4
 800705e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007062:	3a30      	subs	r2, #48	@ 0x30
 8007064:	2a09      	cmp	r2, #9
 8007066:	d903      	bls.n	8007070 <_vfiprintf_r+0x1cc>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0c6      	beq.n	8006ffa <_vfiprintf_r+0x156>
 800706c:	9105      	str	r1, [sp, #20]
 800706e:	e7c4      	b.n	8006ffa <_vfiprintf_r+0x156>
 8007070:	fb0c 2101 	mla	r1, ip, r1, r2
 8007074:	4604      	mov	r4, r0
 8007076:	2301      	movs	r3, #1
 8007078:	e7f0      	b.n	800705c <_vfiprintf_r+0x1b8>
 800707a:	ab03      	add	r3, sp, #12
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	462a      	mov	r2, r5
 8007080:	4b12      	ldr	r3, [pc, #72]	@ (80070cc <_vfiprintf_r+0x228>)
 8007082:	a904      	add	r1, sp, #16
 8007084:	4630      	mov	r0, r6
 8007086:	f7fd fe6b 	bl	8004d60 <_printf_float>
 800708a:	4607      	mov	r7, r0
 800708c:	1c78      	adds	r0, r7, #1
 800708e:	d1d6      	bne.n	800703e <_vfiprintf_r+0x19a>
 8007090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007092:	07d9      	lsls	r1, r3, #31
 8007094:	d405      	bmi.n	80070a2 <_vfiprintf_r+0x1fe>
 8007096:	89ab      	ldrh	r3, [r5, #12]
 8007098:	059a      	lsls	r2, r3, #22
 800709a:	d402      	bmi.n	80070a2 <_vfiprintf_r+0x1fe>
 800709c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800709e:	f7fe fcaf 	bl	8005a00 <__retarget_lock_release_recursive>
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	065b      	lsls	r3, r3, #25
 80070a6:	f53f af1f 	bmi.w	8006ee8 <_vfiprintf_r+0x44>
 80070aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070ac:	e71e      	b.n	8006eec <_vfiprintf_r+0x48>
 80070ae:	ab03      	add	r3, sp, #12
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	462a      	mov	r2, r5
 80070b4:	4b05      	ldr	r3, [pc, #20]	@ (80070cc <_vfiprintf_r+0x228>)
 80070b6:	a904      	add	r1, sp, #16
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7fe f8e9 	bl	8005290 <_printf_i>
 80070be:	e7e4      	b.n	800708a <_vfiprintf_r+0x1e6>
 80070c0:	08007e50 	.word	0x08007e50
 80070c4:	08007e5a 	.word	0x08007e5a
 80070c8:	08004d61 	.word	0x08004d61
 80070cc:	08006e7f 	.word	0x08006e7f
 80070d0:	08007e56 	.word	0x08007e56

080070d4 <__sflush_r>:
 80070d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	0716      	lsls	r6, r2, #28
 80070de:	4605      	mov	r5, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	d454      	bmi.n	800718e <__sflush_r+0xba>
 80070e4:	684b      	ldr	r3, [r1, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dc02      	bgt.n	80070f0 <__sflush_r+0x1c>
 80070ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dd48      	ble.n	8007182 <__sflush_r+0xae>
 80070f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070f2:	2e00      	cmp	r6, #0
 80070f4:	d045      	beq.n	8007182 <__sflush_r+0xae>
 80070f6:	2300      	movs	r3, #0
 80070f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070fc:	682f      	ldr	r7, [r5, #0]
 80070fe:	6a21      	ldr	r1, [r4, #32]
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	d030      	beq.n	8007166 <__sflush_r+0x92>
 8007104:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007106:	89a3      	ldrh	r3, [r4, #12]
 8007108:	0759      	lsls	r1, r3, #29
 800710a:	d505      	bpl.n	8007118 <__sflush_r+0x44>
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007112:	b10b      	cbz	r3, 8007118 <__sflush_r+0x44>
 8007114:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007116:	1ad2      	subs	r2, r2, r3
 8007118:	2300      	movs	r3, #0
 800711a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800711c:	6a21      	ldr	r1, [r4, #32]
 800711e:	4628      	mov	r0, r5
 8007120:	47b0      	blx	r6
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	d106      	bne.n	8007136 <__sflush_r+0x62>
 8007128:	6829      	ldr	r1, [r5, #0]
 800712a:	291d      	cmp	r1, #29
 800712c:	d82b      	bhi.n	8007186 <__sflush_r+0xb2>
 800712e:	4a2a      	ldr	r2, [pc, #168]	@ (80071d8 <__sflush_r+0x104>)
 8007130:	410a      	asrs	r2, r1
 8007132:	07d6      	lsls	r6, r2, #31
 8007134:	d427      	bmi.n	8007186 <__sflush_r+0xb2>
 8007136:	2200      	movs	r2, #0
 8007138:	6062      	str	r2, [r4, #4]
 800713a:	04d9      	lsls	r1, r3, #19
 800713c:	6922      	ldr	r2, [r4, #16]
 800713e:	6022      	str	r2, [r4, #0]
 8007140:	d504      	bpl.n	800714c <__sflush_r+0x78>
 8007142:	1c42      	adds	r2, r0, #1
 8007144:	d101      	bne.n	800714a <__sflush_r+0x76>
 8007146:	682b      	ldr	r3, [r5, #0]
 8007148:	b903      	cbnz	r3, 800714c <__sflush_r+0x78>
 800714a:	6560      	str	r0, [r4, #84]	@ 0x54
 800714c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800714e:	602f      	str	r7, [r5, #0]
 8007150:	b1b9      	cbz	r1, 8007182 <__sflush_r+0xae>
 8007152:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007156:	4299      	cmp	r1, r3
 8007158:	d002      	beq.n	8007160 <__sflush_r+0x8c>
 800715a:	4628      	mov	r0, r5
 800715c:	f7ff faac 	bl	80066b8 <_free_r>
 8007160:	2300      	movs	r3, #0
 8007162:	6363      	str	r3, [r4, #52]	@ 0x34
 8007164:	e00d      	b.n	8007182 <__sflush_r+0xae>
 8007166:	2301      	movs	r3, #1
 8007168:	4628      	mov	r0, r5
 800716a:	47b0      	blx	r6
 800716c:	4602      	mov	r2, r0
 800716e:	1c50      	adds	r0, r2, #1
 8007170:	d1c9      	bne.n	8007106 <__sflush_r+0x32>
 8007172:	682b      	ldr	r3, [r5, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0c6      	beq.n	8007106 <__sflush_r+0x32>
 8007178:	2b1d      	cmp	r3, #29
 800717a:	d001      	beq.n	8007180 <__sflush_r+0xac>
 800717c:	2b16      	cmp	r3, #22
 800717e:	d11e      	bne.n	80071be <__sflush_r+0xea>
 8007180:	602f      	str	r7, [r5, #0]
 8007182:	2000      	movs	r0, #0
 8007184:	e022      	b.n	80071cc <__sflush_r+0xf8>
 8007186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800718a:	b21b      	sxth	r3, r3
 800718c:	e01b      	b.n	80071c6 <__sflush_r+0xf2>
 800718e:	690f      	ldr	r7, [r1, #16]
 8007190:	2f00      	cmp	r7, #0
 8007192:	d0f6      	beq.n	8007182 <__sflush_r+0xae>
 8007194:	0793      	lsls	r3, r2, #30
 8007196:	680e      	ldr	r6, [r1, #0]
 8007198:	bf08      	it	eq
 800719a:	694b      	ldreq	r3, [r1, #20]
 800719c:	600f      	str	r7, [r1, #0]
 800719e:	bf18      	it	ne
 80071a0:	2300      	movne	r3, #0
 80071a2:	eba6 0807 	sub.w	r8, r6, r7
 80071a6:	608b      	str	r3, [r1, #8]
 80071a8:	f1b8 0f00 	cmp.w	r8, #0
 80071ac:	dde9      	ble.n	8007182 <__sflush_r+0xae>
 80071ae:	6a21      	ldr	r1, [r4, #32]
 80071b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80071b2:	4643      	mov	r3, r8
 80071b4:	463a      	mov	r2, r7
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b0      	blx	r6
 80071ba:	2800      	cmp	r0, #0
 80071bc:	dc08      	bgt.n	80071d0 <__sflush_r+0xfc>
 80071be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071c6:	81a3      	strh	r3, [r4, #12]
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d0:	4407      	add	r7, r0
 80071d2:	eba8 0800 	sub.w	r8, r8, r0
 80071d6:	e7e7      	b.n	80071a8 <__sflush_r+0xd4>
 80071d8:	dfbffffe 	.word	0xdfbffffe

080071dc <_fflush_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	690b      	ldr	r3, [r1, #16]
 80071e0:	4605      	mov	r5, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	b913      	cbnz	r3, 80071ec <_fflush_r+0x10>
 80071e6:	2500      	movs	r5, #0
 80071e8:	4628      	mov	r0, r5
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	b118      	cbz	r0, 80071f6 <_fflush_r+0x1a>
 80071ee:	6a03      	ldr	r3, [r0, #32]
 80071f0:	b90b      	cbnz	r3, 80071f6 <_fflush_r+0x1a>
 80071f2:	f7fe f9f9 	bl	80055e8 <__sinit>
 80071f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f3      	beq.n	80071e6 <_fflush_r+0xa>
 80071fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007200:	07d0      	lsls	r0, r2, #31
 8007202:	d404      	bmi.n	800720e <_fflush_r+0x32>
 8007204:	0599      	lsls	r1, r3, #22
 8007206:	d402      	bmi.n	800720e <_fflush_r+0x32>
 8007208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800720a:	f7fe fbf8 	bl	80059fe <__retarget_lock_acquire_recursive>
 800720e:	4628      	mov	r0, r5
 8007210:	4621      	mov	r1, r4
 8007212:	f7ff ff5f 	bl	80070d4 <__sflush_r>
 8007216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007218:	07da      	lsls	r2, r3, #31
 800721a:	4605      	mov	r5, r0
 800721c:	d4e4      	bmi.n	80071e8 <_fflush_r+0xc>
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	059b      	lsls	r3, r3, #22
 8007222:	d4e1      	bmi.n	80071e8 <_fflush_r+0xc>
 8007224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007226:	f7fe fbeb 	bl	8005a00 <__retarget_lock_release_recursive>
 800722a:	e7dd      	b.n	80071e8 <_fflush_r+0xc>

0800722c <__swhatbuf_r>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	460c      	mov	r4, r1
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	2900      	cmp	r1, #0
 8007236:	b096      	sub	sp, #88	@ 0x58
 8007238:	4615      	mov	r5, r2
 800723a:	461e      	mov	r6, r3
 800723c:	da0d      	bge.n	800725a <__swhatbuf_r+0x2e>
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007244:	f04f 0100 	mov.w	r1, #0
 8007248:	bf14      	ite	ne
 800724a:	2340      	movne	r3, #64	@ 0x40
 800724c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007250:	2000      	movs	r0, #0
 8007252:	6031      	str	r1, [r6, #0]
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	b016      	add	sp, #88	@ 0x58
 8007258:	bd70      	pop	{r4, r5, r6, pc}
 800725a:	466a      	mov	r2, sp
 800725c:	f000 f848 	bl	80072f0 <_fstat_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	dbec      	blt.n	800723e <__swhatbuf_r+0x12>
 8007264:	9901      	ldr	r1, [sp, #4]
 8007266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800726a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800726e:	4259      	negs	r1, r3
 8007270:	4159      	adcs	r1, r3
 8007272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007276:	e7eb      	b.n	8007250 <__swhatbuf_r+0x24>

08007278 <__smakebuf_r>:
 8007278:	898b      	ldrh	r3, [r1, #12]
 800727a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800727c:	079d      	lsls	r5, r3, #30
 800727e:	4606      	mov	r6, r0
 8007280:	460c      	mov	r4, r1
 8007282:	d507      	bpl.n	8007294 <__smakebuf_r+0x1c>
 8007284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	6123      	str	r3, [r4, #16]
 800728c:	2301      	movs	r3, #1
 800728e:	6163      	str	r3, [r4, #20]
 8007290:	b003      	add	sp, #12
 8007292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007294:	ab01      	add	r3, sp, #4
 8007296:	466a      	mov	r2, sp
 8007298:	f7ff ffc8 	bl	800722c <__swhatbuf_r>
 800729c:	9f00      	ldr	r7, [sp, #0]
 800729e:	4605      	mov	r5, r0
 80072a0:	4639      	mov	r1, r7
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7fd fc30 	bl	8004b08 <_malloc_r>
 80072a8:	b948      	cbnz	r0, 80072be <__smakebuf_r+0x46>
 80072aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ae:	059a      	lsls	r2, r3, #22
 80072b0:	d4ee      	bmi.n	8007290 <__smakebuf_r+0x18>
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	f043 0302 	orr.w	r3, r3, #2
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	e7e2      	b.n	8007284 <__smakebuf_r+0xc>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	6020      	str	r0, [r4, #0]
 80072c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80072ce:	b15b      	cbz	r3, 80072e8 <__smakebuf_r+0x70>
 80072d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 f81d 	bl	8007314 <_isatty_r>
 80072da:	b128      	cbz	r0, 80072e8 <__smakebuf_r+0x70>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	81a3      	strh	r3, [r4, #12]
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	431d      	orrs	r5, r3
 80072ec:	81a5      	strh	r5, [r4, #12]
 80072ee:	e7cf      	b.n	8007290 <__smakebuf_r+0x18>

080072f0 <_fstat_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4d07      	ldr	r5, [pc, #28]	@ (8007310 <_fstat_r+0x20>)
 80072f4:	2300      	movs	r3, #0
 80072f6:	4604      	mov	r4, r0
 80072f8:	4608      	mov	r0, r1
 80072fa:	4611      	mov	r1, r2
 80072fc:	602b      	str	r3, [r5, #0]
 80072fe:	f000 f8d1 	bl	80074a4 <_fstat>
 8007302:	1c43      	adds	r3, r0, #1
 8007304:	d102      	bne.n	800730c <_fstat_r+0x1c>
 8007306:	682b      	ldr	r3, [r5, #0]
 8007308:	b103      	cbz	r3, 800730c <_fstat_r+0x1c>
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	bd38      	pop	{r3, r4, r5, pc}
 800730e:	bf00      	nop
 8007310:	20000aac 	.word	0x20000aac

08007314 <_isatty_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4d06      	ldr	r5, [pc, #24]	@ (8007330 <_isatty_r+0x1c>)
 8007318:	2300      	movs	r3, #0
 800731a:	4604      	mov	r4, r0
 800731c:	4608      	mov	r0, r1
 800731e:	602b      	str	r3, [r5, #0]
 8007320:	f000 f8d0 	bl	80074c4 <_isatty>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d102      	bne.n	800732e <_isatty_r+0x1a>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	b103      	cbz	r3, 800732e <_isatty_r+0x1a>
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	20000aac 	.word	0x20000aac

08007334 <__assert_func>:
 8007334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007336:	4614      	mov	r4, r2
 8007338:	461a      	mov	r2, r3
 800733a:	4b09      	ldr	r3, [pc, #36]	@ (8007360 <__assert_func+0x2c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4605      	mov	r5, r0
 8007340:	68d8      	ldr	r0, [r3, #12]
 8007342:	b954      	cbnz	r4, 800735a <__assert_func+0x26>
 8007344:	4b07      	ldr	r3, [pc, #28]	@ (8007364 <__assert_func+0x30>)
 8007346:	461c      	mov	r4, r3
 8007348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800734c:	9100      	str	r1, [sp, #0]
 800734e:	462b      	mov	r3, r5
 8007350:	4905      	ldr	r1, [pc, #20]	@ (8007368 <__assert_func+0x34>)
 8007352:	f000 f841 	bl	80073d8 <fiprintf>
 8007356:	f000 f851 	bl	80073fc <abort>
 800735a:	4b04      	ldr	r3, [pc, #16]	@ (800736c <__assert_func+0x38>)
 800735c:	e7f4      	b.n	8007348 <__assert_func+0x14>
 800735e:	bf00      	nop
 8007360:	200006a0 	.word	0x200006a0
 8007364:	08007ea6 	.word	0x08007ea6
 8007368:	08007e78 	.word	0x08007e78
 800736c:	08007e6b 	.word	0x08007e6b

08007370 <_calloc_r>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	fba1 5402 	umull	r5, r4, r1, r2
 8007376:	b93c      	cbnz	r4, 8007388 <_calloc_r+0x18>
 8007378:	4629      	mov	r1, r5
 800737a:	f7fd fbc5 	bl	8004b08 <_malloc_r>
 800737e:	4606      	mov	r6, r0
 8007380:	b928      	cbnz	r0, 800738e <_calloc_r+0x1e>
 8007382:	2600      	movs	r6, #0
 8007384:	4630      	mov	r0, r6
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	220c      	movs	r2, #12
 800738a:	6002      	str	r2, [r0, #0]
 800738c:	e7f9      	b.n	8007382 <_calloc_r+0x12>
 800738e:	462a      	mov	r2, r5
 8007390:	4621      	mov	r1, r4
 8007392:	f7fe faa7 	bl	80058e4 <memset>
 8007396:	e7f5      	b.n	8007384 <_calloc_r+0x14>

08007398 <__ascii_mbtowc>:
 8007398:	b082      	sub	sp, #8
 800739a:	b901      	cbnz	r1, 800739e <__ascii_mbtowc+0x6>
 800739c:	a901      	add	r1, sp, #4
 800739e:	b142      	cbz	r2, 80073b2 <__ascii_mbtowc+0x1a>
 80073a0:	b14b      	cbz	r3, 80073b6 <__ascii_mbtowc+0x1e>
 80073a2:	7813      	ldrb	r3, [r2, #0]
 80073a4:	600b      	str	r3, [r1, #0]
 80073a6:	7812      	ldrb	r2, [r2, #0]
 80073a8:	1e10      	subs	r0, r2, #0
 80073aa:	bf18      	it	ne
 80073ac:	2001      	movne	r0, #1
 80073ae:	b002      	add	sp, #8
 80073b0:	4770      	bx	lr
 80073b2:	4610      	mov	r0, r2
 80073b4:	e7fb      	b.n	80073ae <__ascii_mbtowc+0x16>
 80073b6:	f06f 0001 	mvn.w	r0, #1
 80073ba:	e7f8      	b.n	80073ae <__ascii_mbtowc+0x16>

080073bc <__ascii_wctomb>:
 80073bc:	4603      	mov	r3, r0
 80073be:	4608      	mov	r0, r1
 80073c0:	b141      	cbz	r1, 80073d4 <__ascii_wctomb+0x18>
 80073c2:	2aff      	cmp	r2, #255	@ 0xff
 80073c4:	d904      	bls.n	80073d0 <__ascii_wctomb+0x14>
 80073c6:	228a      	movs	r2, #138	@ 0x8a
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	f04f 30ff 	mov.w	r0, #4294967295
 80073ce:	4770      	bx	lr
 80073d0:	700a      	strb	r2, [r1, #0]
 80073d2:	2001      	movs	r0, #1
 80073d4:	4770      	bx	lr
	...

080073d8 <fiprintf>:
 80073d8:	b40e      	push	{r1, r2, r3}
 80073da:	b503      	push	{r0, r1, lr}
 80073dc:	4601      	mov	r1, r0
 80073de:	ab03      	add	r3, sp, #12
 80073e0:	4805      	ldr	r0, [pc, #20]	@ (80073f8 <fiprintf+0x20>)
 80073e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e6:	6800      	ldr	r0, [r0, #0]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	f7ff fd5b 	bl	8006ea4 <_vfiprintf_r>
 80073ee:	b002      	add	sp, #8
 80073f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073f4:	b003      	add	sp, #12
 80073f6:	4770      	bx	lr
 80073f8:	200006a0 	.word	0x200006a0

080073fc <abort>:
 80073fc:	b508      	push	{r3, lr}
 80073fe:	2006      	movs	r0, #6
 8007400:	f000 f82c 	bl	800745c <raise>
 8007404:	2001      	movs	r0, #1
 8007406:	f000 f87d 	bl	8007504 <_exit>

0800740a <_raise_r>:
 800740a:	291f      	cmp	r1, #31
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4605      	mov	r5, r0
 8007410:	460c      	mov	r4, r1
 8007412:	d904      	bls.n	800741e <_raise_r+0x14>
 8007414:	2316      	movs	r3, #22
 8007416:	6003      	str	r3, [r0, #0]
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	bd38      	pop	{r3, r4, r5, pc}
 800741e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007420:	b112      	cbz	r2, 8007428 <_raise_r+0x1e>
 8007422:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007426:	b94b      	cbnz	r3, 800743c <_raise_r+0x32>
 8007428:	4628      	mov	r0, r5
 800742a:	f000 f831 	bl	8007490 <_getpid_r>
 800742e:	4622      	mov	r2, r4
 8007430:	4601      	mov	r1, r0
 8007432:	4628      	mov	r0, r5
 8007434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007438:	f000 b818 	b.w	800746c <_kill_r>
 800743c:	2b01      	cmp	r3, #1
 800743e:	d00a      	beq.n	8007456 <_raise_r+0x4c>
 8007440:	1c59      	adds	r1, r3, #1
 8007442:	d103      	bne.n	800744c <_raise_r+0x42>
 8007444:	2316      	movs	r3, #22
 8007446:	6003      	str	r3, [r0, #0]
 8007448:	2001      	movs	r0, #1
 800744a:	e7e7      	b.n	800741c <_raise_r+0x12>
 800744c:	2100      	movs	r1, #0
 800744e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007452:	4620      	mov	r0, r4
 8007454:	4798      	blx	r3
 8007456:	2000      	movs	r0, #0
 8007458:	e7e0      	b.n	800741c <_raise_r+0x12>
	...

0800745c <raise>:
 800745c:	4b02      	ldr	r3, [pc, #8]	@ (8007468 <raise+0xc>)
 800745e:	4601      	mov	r1, r0
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	f7ff bfd2 	b.w	800740a <_raise_r>
 8007466:	bf00      	nop
 8007468:	200006a0 	.word	0x200006a0

0800746c <_kill_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d07      	ldr	r5, [pc, #28]	@ (800748c <_kill_r+0x20>)
 8007470:	2300      	movs	r3, #0
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	4611      	mov	r1, r2
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	f000 f82b 	bl	80074d4 <_kill>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	d102      	bne.n	8007488 <_kill_r+0x1c>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	b103      	cbz	r3, 8007488 <_kill_r+0x1c>
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	bd38      	pop	{r3, r4, r5, pc}
 800748a:	bf00      	nop
 800748c:	20000aac 	.word	0x20000aac

08007490 <_getpid_r>:
 8007490:	f000 b810 	b.w	80074b4 <_getpid>

08007494 <_close>:
 8007494:	4b02      	ldr	r3, [pc, #8]	@ (80074a0 <_close+0xc>)
 8007496:	2258      	movs	r2, #88	@ 0x58
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	f04f 30ff 	mov.w	r0, #4294967295
 800749e:	4770      	bx	lr
 80074a0:	20000aac 	.word	0x20000aac

080074a4 <_fstat>:
 80074a4:	4b02      	ldr	r3, [pc, #8]	@ (80074b0 <_fstat+0xc>)
 80074a6:	2258      	movs	r2, #88	@ 0x58
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	f04f 30ff 	mov.w	r0, #4294967295
 80074ae:	4770      	bx	lr
 80074b0:	20000aac 	.word	0x20000aac

080074b4 <_getpid>:
 80074b4:	4b02      	ldr	r3, [pc, #8]	@ (80074c0 <_getpid+0xc>)
 80074b6:	2258      	movs	r2, #88	@ 0x58
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295
 80074be:	4770      	bx	lr
 80074c0:	20000aac 	.word	0x20000aac

080074c4 <_isatty>:
 80074c4:	4b02      	ldr	r3, [pc, #8]	@ (80074d0 <_isatty+0xc>)
 80074c6:	2258      	movs	r2, #88	@ 0x58
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	2000      	movs	r0, #0
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000aac 	.word	0x20000aac

080074d4 <_kill>:
 80074d4:	4b02      	ldr	r3, [pc, #8]	@ (80074e0 <_kill+0xc>)
 80074d6:	2258      	movs	r2, #88	@ 0x58
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
 80074de:	4770      	bx	lr
 80074e0:	20000aac 	.word	0x20000aac

080074e4 <_lseek>:
 80074e4:	4b02      	ldr	r3, [pc, #8]	@ (80074f0 <_lseek+0xc>)
 80074e6:	2258      	movs	r2, #88	@ 0x58
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	f04f 30ff 	mov.w	r0, #4294967295
 80074ee:	4770      	bx	lr
 80074f0:	20000aac 	.word	0x20000aac

080074f4 <_read>:
 80074f4:	4b02      	ldr	r3, [pc, #8]	@ (8007500 <_read+0xc>)
 80074f6:	2258      	movs	r2, #88	@ 0x58
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295
 80074fe:	4770      	bx	lr
 8007500:	20000aac 	.word	0x20000aac

08007504 <_exit>:
 8007504:	e7fe      	b.n	8007504 <_exit>
	...

08007508 <_init>:
 8007508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750a:	bf00      	nop
 800750c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750e:	bc08      	pop	{r3}
 8007510:	469e      	mov	lr, r3
 8007512:	4770      	bx	lr

08007514 <_fini>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	bf00      	nop
 8007518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751a:	bc08      	pop	{r3}
 800751c:	469e      	mov	lr, r3
 800751e:	4770      	bx	lr
