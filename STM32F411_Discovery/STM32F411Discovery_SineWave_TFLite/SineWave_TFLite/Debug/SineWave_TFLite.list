
SineWave_TFLite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006018  08010978  08010978  00011978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016990  08016990  00018e40  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016990  08016990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016998  08016998  00018e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016998  08016998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0801699c  0801699c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000e40  20000000  080169a4  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bec  20000e40  080177e4  00018e40  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a2c  080177e4  00019a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018e40  2**0
                  CONTENTS, READONLY
 12 .debug_info   003e0da6  00000000  00000000  00018e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001aeb5  00000000  00000000  003f9c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00009248  00000000  00000000  00414ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00006e9d  00000000  00000000  0041dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030ac9  00000000  00000000  00424bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00084700  00000000  00000000  0045567e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019c015  00000000  00000000  004d9d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00675d93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002ac98  00000000  00000000  00675dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  006a0a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000e40 	.word	0x20000e40
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010960 	.word	0x08010960

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000e44 	.word	0x20000e44
 80001dc:	08010960 	.word	0x08010960

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b9be 	b.w	8000f6c <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f83c 	bl	8000c74 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2lz>:
 8000c08:	b538      	push	{r3, r4, r5, lr}
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4604      	mov	r4, r0
 8000c10:	460d      	mov	r5, r1
 8000c12:	f7ff ff7b 	bl	8000b0c <__aeabi_dcmplt>
 8000c16:	b928      	cbnz	r0, 8000c24 <__aeabi_d2lz+0x1c>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c20:	f000 b80a 	b.w	8000c38 <__aeabi_d2ulz>
 8000c24:	4620      	mov	r0, r4
 8000c26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c2a:	f000 f805 	bl	8000c38 <__aeabi_d2ulz>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	bd38      	pop	{r3, r4, r5, pc}
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2ulz>:
 8000c38:	b5d0      	push	{r4, r6, r7, lr}
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <__aeabi_d2ulz+0x34>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4606      	mov	r6, r0
 8000c40:	460f      	mov	r7, r1
 8000c42:	f7ff fcf1 	bl	8000628 <__aeabi_dmul>
 8000c46:	f000 f993 	bl	8000f70 <__aeabi_d2uiz>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f7ff fc72 	bl	8000534 <__aeabi_ui2d>
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <__aeabi_d2ulz+0x38>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f7ff fce8 	bl	8000628 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	4639      	mov	r1, r7
 8000c60:	f7ff fb2a 	bl	80002b8 <__aeabi_dsub>
 8000c64:	f000 f984 	bl	8000f70 <__aeabi_d2uiz>
 8000c68:	4621      	mov	r1, r4
 8000c6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c6c:	3df00000 	.word	0x3df00000
 8000c70:	41f00000 	.word	0x41f00000

08000c74 <__udivmoddi4>:
 8000c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c78:	9d08      	ldr	r5, [sp, #32]
 8000c7a:	468e      	mov	lr, r1
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	4688      	mov	r8, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14a      	bne.n	8000d1a <__udivmoddi4+0xa6>
 8000c84:	428a      	cmp	r2, r1
 8000c86:	4617      	mov	r7, r2
 8000c88:	d962      	bls.n	8000d50 <__udivmoddi4+0xdc>
 8000c8a:	fab2 f682 	clz	r6, r2
 8000c8e:	b14e      	cbz	r6, 8000ca4 <__udivmoddi4+0x30>
 8000c90:	f1c6 0320 	rsb	r3, r6, #32
 8000c94:	fa01 f806 	lsl.w	r8, r1, r6
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	40b7      	lsls	r7, r6
 8000c9e:	ea43 0808 	orr.w	r8, r3, r8
 8000ca2:	40b4      	lsls	r4, r6
 8000ca4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca8:	fa1f fc87 	uxth.w	ip, r7
 8000cac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fb01 f20c 	mul.w	r2, r1, ip
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0x62>
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cc8:	f080 80ea 	bcs.w	8000ea0 <__udivmoddi4+0x22c>
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f240 80e7 	bls.w	8000ea0 <__udivmoddi4+0x22c>
 8000cd2:	3902      	subs	r1, #2
 8000cd4:	443b      	add	r3, r7
 8000cd6:	1a9a      	subs	r2, r3, r2
 8000cd8:	b2a3      	uxth	r3, r4
 8000cda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ce6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cea:	459c      	cmp	ip, r3
 8000cec:	d909      	bls.n	8000d02 <__udivmoddi4+0x8e>
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf4:	f080 80d6 	bcs.w	8000ea4 <__udivmoddi4+0x230>
 8000cf8:	459c      	cmp	ip, r3
 8000cfa:	f240 80d3 	bls.w	8000ea4 <__udivmoddi4+0x230>
 8000cfe:	443b      	add	r3, r7
 8000d00:	3802      	subs	r0, #2
 8000d02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d06:	eba3 030c 	sub.w	r3, r3, ip
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	b11d      	cbz	r5, 8000d16 <__udivmoddi4+0xa2>
 8000d0e:	40f3      	lsrs	r3, r6
 8000d10:	2200      	movs	r2, #0
 8000d12:	e9c5 3200 	strd	r3, r2, [r5]
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d905      	bls.n	8000d2a <__udivmoddi4+0xb6>
 8000d1e:	b10d      	cbz	r5, 8000d24 <__udivmoddi4+0xb0>
 8000d20:	e9c5 0100 	strd	r0, r1, [r5]
 8000d24:	2100      	movs	r1, #0
 8000d26:	4608      	mov	r0, r1
 8000d28:	e7f5      	b.n	8000d16 <__udivmoddi4+0xa2>
 8000d2a:	fab3 f183 	clz	r1, r3
 8000d2e:	2900      	cmp	r1, #0
 8000d30:	d146      	bne.n	8000dc0 <__udivmoddi4+0x14c>
 8000d32:	4573      	cmp	r3, lr
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xc8>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 8105 	bhi.w	8000f46 <__udivmoddi4+0x2d2>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	4690      	mov	r8, r2
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e5      	beq.n	8000d16 <__udivmoddi4+0xa2>
 8000d4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d4e:	e7e2      	b.n	8000d16 <__udivmoddi4+0xa2>
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	f000 8090 	beq.w	8000e76 <__udivmoddi4+0x202>
 8000d56:	fab2 f682 	clz	r6, r2
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	f040 80a4 	bne.w	8000ea8 <__udivmoddi4+0x234>
 8000d60:	1a8a      	subs	r2, r1, r2
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	b280      	uxth	r0, r0
 8000d6a:	b2bc      	uxth	r4, r7
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x11e>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d88:	d202      	bcs.n	8000d90 <__udivmoddi4+0x11c>
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	f200 80e0 	bhi.w	8000f50 <__udivmoddi4+0x2dc>
 8000d90:	46c4      	mov	ip, r8
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da0:	fb02 f404 	mul.w	r4, r2, r4
 8000da4:	429c      	cmp	r4, r3
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x144>
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x142>
 8000db0:	429c      	cmp	r4, r3
 8000db2:	f200 80ca 	bhi.w	8000f4a <__udivmoddi4+0x2d6>
 8000db6:	4602      	mov	r2, r0
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dbe:	e7a5      	b.n	8000d0c <__udivmoddi4+0x98>
 8000dc0:	f1c1 0620 	rsb	r6, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000dca:	431f      	orrs	r7, r3
 8000dcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	fa00 f801 	lsl.w	r8, r0, r1
 8000de2:	fa1f fc87 	uxth.w	ip, r7
 8000de6:	fbbe f0f9 	udiv	r0, lr, r9
 8000dea:	0c1c      	lsrs	r4, r3, #16
 8000dec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x1a0>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e06:	f080 809c 	bcs.w	8000f42 <__udivmoddi4+0x2ce>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	f240 8099 	bls.w	8000f42 <__udivmoddi4+0x2ce>
 8000e10:	3802      	subs	r0, #2
 8000e12:	443c      	add	r4, r7
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	fa1f fe83 	uxth.w	lr, r3
 8000e1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e20:	fb09 4413 	mls	r4, r9, r3, r4
 8000e24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e2c:	45a4      	cmp	ip, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1ce>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e36:	f080 8082 	bcs.w	8000f3e <__udivmoddi4+0x2ca>
 8000e3a:	45a4      	cmp	ip, r4
 8000e3c:	d97f      	bls.n	8000f3e <__udivmoddi4+0x2ca>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	443c      	add	r4, r7
 8000e42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e46:	eba4 040c 	sub.w	r4, r4, ip
 8000e4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e4e:	4564      	cmp	r4, ip
 8000e50:	4673      	mov	r3, lr
 8000e52:	46e1      	mov	r9, ip
 8000e54:	d362      	bcc.n	8000f1c <__udivmoddi4+0x2a8>
 8000e56:	d05f      	beq.n	8000f18 <__udivmoddi4+0x2a4>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x1fe>
 8000e5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e62:	fa04 f606 	lsl.w	r6, r4, r6
 8000e66:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6a:	431e      	orrs	r6, r3
 8000e6c:	40cc      	lsrs	r4, r1
 8000e6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e72:	2100      	movs	r1, #0
 8000e74:	e74f      	b.n	8000d16 <__udivmoddi4+0xa2>
 8000e76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7a:	0c01      	lsrs	r1, r0, #16
 8000e7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e80:	b280      	uxth	r0, r0
 8000e82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e86:	463b      	mov	r3, r7
 8000e88:	4638      	mov	r0, r7
 8000e8a:	463c      	mov	r4, r7
 8000e8c:	46b8      	mov	r8, r7
 8000e8e:	46be      	mov	lr, r7
 8000e90:	2620      	movs	r6, #32
 8000e92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e96:	eba2 0208 	sub.w	r2, r2, r8
 8000e9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e9e:	e766      	b.n	8000d6e <__udivmoddi4+0xfa>
 8000ea0:	4601      	mov	r1, r0
 8000ea2:	e718      	b.n	8000cd6 <__udivmoddi4+0x62>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	e72c      	b.n	8000d02 <__udivmoddi4+0x8e>
 8000ea8:	f1c6 0220 	rsb	r2, r6, #32
 8000eac:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb0:	40b7      	lsls	r7, r6
 8000eb2:	40b1      	lsls	r1, r6
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec2:	b2bc      	uxth	r4, r7
 8000ec4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ec8:	0c11      	lsrs	r1, r2, #16
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb08 f904 	mul.w	r9, r8, r4
 8000ed2:	40b0      	lsls	r0, r6
 8000ed4:	4589      	cmp	r9, r1
 8000ed6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eda:	b280      	uxth	r0, r0
 8000edc:	d93e      	bls.n	8000f5c <__udivmoddi4+0x2e8>
 8000ede:	1879      	adds	r1, r7, r1
 8000ee0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee4:	d201      	bcs.n	8000eea <__udivmoddi4+0x276>
 8000ee6:	4589      	cmp	r9, r1
 8000ee8:	d81f      	bhi.n	8000f2a <__udivmoddi4+0x2b6>
 8000eea:	eba1 0109 	sub.w	r1, r1, r9
 8000eee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef2:	fb09 f804 	mul.w	r8, r9, r4
 8000ef6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efa:	b292      	uxth	r2, r2
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	4542      	cmp	r2, r8
 8000f02:	d229      	bcs.n	8000f58 <__udivmoddi4+0x2e4>
 8000f04:	18ba      	adds	r2, r7, r2
 8000f06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0a:	d2c4      	bcs.n	8000e96 <__udivmoddi4+0x222>
 8000f0c:	4542      	cmp	r2, r8
 8000f0e:	d2c2      	bcs.n	8000e96 <__udivmoddi4+0x222>
 8000f10:	f1a9 0102 	sub.w	r1, r9, #2
 8000f14:	443a      	add	r2, r7
 8000f16:	e7be      	b.n	8000e96 <__udivmoddi4+0x222>
 8000f18:	45f0      	cmp	r8, lr
 8000f1a:	d29d      	bcs.n	8000e58 <__udivmoddi4+0x1e4>
 8000f1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f24:	3801      	subs	r0, #1
 8000f26:	46e1      	mov	r9, ip
 8000f28:	e796      	b.n	8000e58 <__udivmoddi4+0x1e4>
 8000f2a:	eba7 0909 	sub.w	r9, r7, r9
 8000f2e:	4449      	add	r1, r9
 8000f30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f38:	fb09 f804 	mul.w	r8, r9, r4
 8000f3c:	e7db      	b.n	8000ef6 <__udivmoddi4+0x282>
 8000f3e:	4673      	mov	r3, lr
 8000f40:	e77f      	b.n	8000e42 <__udivmoddi4+0x1ce>
 8000f42:	4650      	mov	r0, sl
 8000f44:	e766      	b.n	8000e14 <__udivmoddi4+0x1a0>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e6fd      	b.n	8000d46 <__udivmoddi4+0xd2>
 8000f4a:	443b      	add	r3, r7
 8000f4c:	3a02      	subs	r2, #2
 8000f4e:	e733      	b.n	8000db8 <__udivmoddi4+0x144>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	443b      	add	r3, r7
 8000f56:	e71c      	b.n	8000d92 <__udivmoddi4+0x11e>
 8000f58:	4649      	mov	r1, r9
 8000f5a:	e79c      	b.n	8000e96 <__udivmoddi4+0x222>
 8000f5c:	eba1 0109 	sub.w	r1, r1, r9
 8000f60:	46c4      	mov	ip, r8
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fb09 f804 	mul.w	r8, r9, r4
 8000f6a:	e7c4      	b.n	8000ef6 <__udivmoddi4+0x282>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__aeabi_d2uiz>:
 8000f70:	004a      	lsls	r2, r1, #1
 8000f72:	d211      	bcs.n	8000f98 <__aeabi_d2uiz+0x28>
 8000f74:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000f78:	d211      	bcs.n	8000f9e <__aeabi_d2uiz+0x2e>
 8000f7a:	d50d      	bpl.n	8000f98 <__aeabi_d2uiz+0x28>
 8000f7c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000f80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f84:	d40e      	bmi.n	8000fa4 <__aeabi_d2uiz+0x34>
 8000f86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f92:	fa23 f002 	lsr.w	r0, r3, r2
 8000f96:	4770      	bx	lr
 8000f98:	f04f 0000 	mov.w	r0, #0
 8000f9c:	4770      	bx	lr
 8000f9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fa2:	d102      	bne.n	8000faa <__aeabi_d2uiz+0x3a>
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	4770      	bx	lr
 8000faa:	f04f 0000 	mov.w	r0, #0
 8000fae:	4770      	bx	lr

08000fb0 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() = default;
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	08015fc0 	.word	0x08015fc0

08000fd0 <_ZN6tflite13ErrorReporterD0Ev>:
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffe9 	bl	8000fb0 <_ZN6tflite13ErrorReporterD1Ev>
 8000fde:	2104      	movs	r1, #4
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f00c fd3a 	bl	800da5a <_ZdlPvj>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN6tflite18MicroErrorReporterD1Ev>:
namespace tflite {
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();
class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ffd5 	bl	8000fb0 <_ZN6tflite13ErrorReporterD1Ev>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	08016614 	.word	0x08016614

08001014 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ffe7 	bl	8000ff0 <_ZN6tflite18MicroErrorReporterD1Ev>
 8001022:	2104      	movs	r1, #4
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f00c fd18 	bl	800da5a <_ZdlPvj>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN11flatbuffers11EndianCheckEv>:

// Litmus check for ensuring the Offsets are the expected size.
static_assert(sizeof(Offset<>) == 4, "Offset has wrong size");
static_assert(sizeof(Offset64<>) == 8, "Offset64 has wrong size");

inline void EndianCheck() {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  int endiantest = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d005      	beq.n	8001052 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8001048:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 800104a:	213a      	movs	r1, #58	@ 0x3a
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 800104e:	f00c fdbd 	bl	800dbcc <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	08010978 	.word	0x08010978
 8001060:	080109bc 	.word	0x080109bc
 8001064:	080109dc 	.word	0x080109dc

08001068 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8001070:	687c      	ldr	r4, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fb8e 	bl	8001796 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800107a:	4603      	mov	r3, r0
 800107c:	425b      	negs	r3, r3
 800107e:	4423      	add	r3, r4
  }
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bd90      	pop	{r4, r7, pc}

08001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ffe7 	bl	8001068 <_ZNK11flatbuffers5Table9GetVTableEv>
 800109a:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 fb88 	bl	80017b2 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80010a2:	4603      	mov	r3, r0
 80010a4:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	897b      	ldrh	r3, [r7, #10]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d207      	bcs.n	80010be <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fb7c 	bl	80017b2 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	e000      	b.n	80010c0 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 80010be:	2300      	movs	r3, #0
  }
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	2104      	movs	r1, #4
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fb87 	bl	80017ea <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80010dc:	4603      	mov	r3, r0
  }
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions2_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  return ::flatbuffers::GetRoot<tflite::Model>(buf);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fb99 	bl	8001826 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <_ZN6tflite15MicroOpResolverD1Ev>:
  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual TfLiteBridgeBuiltinParseFunction GetOpDataParser(
      BuiltinOperator op) const = 0;

  virtual ~MicroOpResolver() {}
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	4a04      	ldr	r2, [pc, #16]	@ (800111c <_ZN6tflite15MicroOpResolverD1Ev+0x1c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	08015fa4 	.word	0x08015fa4

08001120 <_ZN6tflite15MicroOpResolverD0Ev>:
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffe9 	bl	8001100 <_ZN6tflite15MicroOpResolverD1Ev>
 800112e:	2104      	movs	r1, #4
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f00c fc92 	bl	800da5a <_ZdlPvj>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>:

namespace tflite {
TFLMRegistration* Register_DETECTION_POSTPROCESS();

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev+0x20>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ffd5 	bl	8001100 <_ZN6tflite15MicroOpResolverD1Ev>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	08015f88 	.word	0x08015f88

08001164 <_ZN6tflite22MicroMutableOpResolverILj1EED0Ev>:
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffe7 	bl	8001140 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 8001172:	2130      	movs	r1, #48	@ 0x30
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f00c fc70 	bl	800da5a <_ZdlPvj>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <__tcf_0>:
  }

  // <---- -------- Pull in only needed operations (should match with your NN layers).
  // Template parameter (<n>) is number of ops to be added.
  // Available ops: tensorflow/lite/micro/kernels/micro_ops.h -------- ---->
  static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
 8001188:	4801      	ldr	r0, [pc, #4]	@ (8001190 <__tcf_0+0xc>)
 800118a:	f7ff ffd9 	bl	8001140 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20001744 	.word	0x20001744

08001194 <__tcf_1>:

	  while(1);
  }

  // <---- -------- build an interpreter to run the model -------- ---->
  static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, KTensorArenaSize);
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
 8001198:	4801      	ldr	r0, [pc, #4]	@ (80011a0 <__tcf_1+0xc>)
 800119a:	f008 f838 	bl	800920e <_ZN6tflite16MicroInterpreterD1Ev>
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20001778 	.word	0x20001778

080011a4 <main>:
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	@ 0x30
 80011a8:	af04      	add	r7, sp, #16
  HAL_Init();
 80011aa:	f000 fe85 	bl	8001eb8 <HAL_Init>
  SystemClock_Config();
 80011ae:	f000 f9c7 	bl	8001540 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80011b2:	f000 fa8d 	bl	80016d0 <_ZL12MX_GPIO_Initv>
  MX_TIM11_Init();
 80011b6:	f000 fa35 	bl	8001624 <_ZL13MX_TIM11_Initv>
  MX_USART2_UART_Init();
 80011ba:	f000 fa5b 	bl	8001674 <_ZL19MX_USART2_UART_Initv>
  HAL_TIM_Base_Start(&htim11);
 80011be:	4886      	ldr	r0, [pc, #536]	@ (80013d8 <main+0x234>)
 80011c0:	f001 fe96 	bl	8002ef0 <HAL_TIM_Base_Start>
  error_reporter->Report("STM32 TFLite Test.");
 80011c4:	4b85      	ldr	r3, [pc, #532]	@ (80013dc <main+0x238>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4985      	ldr	r1, [pc, #532]	@ (80013e0 <main+0x23c>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fc77 	bl	8003abe <_ZN6tflite13ErrorReporter6ReportEPKcz>
  buf_len = sprintf(buf, "STM32 TFLite Test.");
 80011d0:	4983      	ldr	r1, [pc, #524]	@ (80013e0 <main+0x23c>)
 80011d2:	4884      	ldr	r0, [pc, #528]	@ (80013e4 <main+0x240>)
 80011d4:	f00d fc94 	bl	800eb00 <siprintf>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a83      	ldr	r2, [pc, #524]	@ (80013e8 <main+0x244>)
 80011dc:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80011de:	4b82      	ldr	r3, [pc, #520]	@ (80013e8 <main+0x244>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	2364      	movs	r3, #100	@ 0x64
 80011e6:	497f      	ldr	r1, [pc, #508]	@ (80013e4 <main+0x240>)
 80011e8:	4880      	ldr	r0, [pc, #512]	@ (80013ec <main+0x248>)
 80011ea:	f001 ffb1 	bl	8003150 <HAL_UART_Transmit>
  model = tflite::GetModel(sine_model);
 80011ee:	4880      	ldr	r0, [pc, #512]	@ (80013f0 <main+0x24c>)
 80011f0:	f7ff ff79 	bl	80010e6 <_ZN6tflite8GetModelEPKv>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a7f      	ldr	r2, [pc, #508]	@ (80013f4 <main+0x250>)
 80011f8:	6013      	str	r3, [r2, #0]
  if(model->version() != TFLITE_SCHEMA_VERSION)
 80011fa:	4b7e      	ldr	r3, [pc, #504]	@ (80013f4 <main+0x250>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff62 	bl	80010c8 <_ZNK6tflite5Model7versionEv>
 8001204:	4603      	mov	r3, r0
 8001206:	2b03      	cmp	r3, #3
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d016      	beq.n	8001242 <main+0x9e>
	  error_reporter->Report("Model version does not match schema.");
 8001214:	4b71      	ldr	r3, [pc, #452]	@ (80013dc <main+0x238>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4977      	ldr	r1, [pc, #476]	@ (80013f8 <main+0x254>)
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fc4f 	bl	8003abe <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  buf_len = sprintf(buf, "Model version does not match schema.");
 8001220:	4975      	ldr	r1, [pc, #468]	@ (80013f8 <main+0x254>)
 8001222:	4870      	ldr	r0, [pc, #448]	@ (80013e4 <main+0x240>)
 8001224:	f00d fc6c 	bl	800eb00 <siprintf>
 8001228:	4603      	mov	r3, r0
 800122a:	4a6f      	ldr	r2, [pc, #444]	@ (80013e8 <main+0x244>)
 800122c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800122e:	4b6e      	ldr	r3, [pc, #440]	@ (80013e8 <main+0x244>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29a      	uxth	r2, r3
 8001234:	2364      	movs	r3, #100	@ 0x64
 8001236:	496b      	ldr	r1, [pc, #428]	@ (80013e4 <main+0x240>)
 8001238:	486c      	ldr	r0, [pc, #432]	@ (80013ec <main+0x248>)
 800123a:	f001 ff89 	bl	8003150 <HAL_UART_Transmit>
	  while(1);
 800123e:	bf00      	nop
 8001240:	e7fd      	b.n	800123e <main+0x9a>
  static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 8001242:	4b6e      	ldr	r3, [pc, #440]	@ (80013fc <main+0x258>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f3bf 8f5b 	dmb	ish
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf0c      	ite	eq
 8001252:	2301      	moveq	r3, #1
 8001254:	2300      	movne	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <main+0xe0>
 800125c:	4867      	ldr	r0, [pc, #412]	@ (80013fc <main+0x258>)
 800125e:	f00c fbfe 	bl	800da5e <__cxa_guard_acquire>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d008      	beq.n	8001284 <main+0xe0>
 8001272:	4863      	ldr	r0, [pc, #396]	@ (8001400 <main+0x25c>)
 8001274:	f000 faf4 	bl	8001860 <_ZN6tflite22MicroMutableOpResolverILj1EEC1Ev>
 8001278:	4862      	ldr	r0, [pc, #392]	@ (8001404 <main+0x260>)
 800127a:	f00c fcc5 	bl	800dc08 <atexit>
 800127e:	485f      	ldr	r0, [pc, #380]	@ (80013fc <main+0x258>)
 8001280:	f00c fbf9 	bl	800da76 <__cxa_guard_release>
  tflite_status = micro_op_resolver.AddFullyConnected();
 8001284:	463b      	mov	r3, r7
 8001286:	4618      	mov	r0, r3
 8001288:	f00a fd04 	bl	800bc94 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	485b      	ldr	r0, [pc, #364]	@ (8001400 <main+0x25c>)
 8001292:	f000 fafd 	bl	8001890 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK16TFLMRegistration>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b5b      	ldr	r3, [pc, #364]	@ (8001408 <main+0x264>)
 800129c:	701a      	strb	r2, [r3, #0]
  if(tflite_status != kTfLiteOk)
 800129e:	4b5a      	ldr	r3, [pc, #360]	@ (8001408 <main+0x264>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d016      	beq.n	80012d4 <main+0x130>
	  error_reporter->Report("Couldn't add fully connected op.");
 80012a6:	4b4d      	ldr	r3, [pc, #308]	@ (80013dc <main+0x238>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4958      	ldr	r1, [pc, #352]	@ (800140c <main+0x268>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 fc06 	bl	8003abe <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  buf_len = sprintf(buf, "Couldn't add fully connected op.");
 80012b2:	4956      	ldr	r1, [pc, #344]	@ (800140c <main+0x268>)
 80012b4:	484b      	ldr	r0, [pc, #300]	@ (80013e4 <main+0x240>)
 80012b6:	f00d fc23 	bl	800eb00 <siprintf>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a4a      	ldr	r2, [pc, #296]	@ (80013e8 <main+0x244>)
 80012be:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80012c0:	4b49      	ldr	r3, [pc, #292]	@ (80013e8 <main+0x244>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	2364      	movs	r3, #100	@ 0x64
 80012c8:	4946      	ldr	r1, [pc, #280]	@ (80013e4 <main+0x240>)
 80012ca:	4848      	ldr	r0, [pc, #288]	@ (80013ec <main+0x248>)
 80012cc:	f001 ff40 	bl	8003150 <HAL_UART_Transmit>
	  while(1);
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <main+0x12c>
  static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, KTensorArenaSize);
 80012d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001410 <main+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f3bf 8f5b 	dmb	ish
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d020      	beq.n	8001330 <main+0x18c>
 80012ee:	4848      	ldr	r0, [pc, #288]	@ (8001410 <main+0x26c>)
 80012f0:	f00c fbb5 	bl	800da5e <__cxa_guard_acquire>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf14      	ite	ne
 80012fa:	2301      	movne	r3, #1
 80012fc:	2300      	moveq	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d015      	beq.n	8001330 <main+0x18c>
 8001304:	4b3b      	ldr	r3, [pc, #236]	@ (80013f4 <main+0x250>)
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	9303      	str	r3, [sp, #12]
 800130c:	2300      	movs	r3, #0
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2300      	movs	r3, #0
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	4b3e      	ldr	r3, [pc, #248]	@ (8001414 <main+0x270>)
 800131c:	4a38      	ldr	r2, [pc, #224]	@ (8001400 <main+0x25c>)
 800131e:	483e      	ldr	r0, [pc, #248]	@ (8001418 <main+0x274>)
 8001320:	f007 ff1d 	bl	800915e <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb>
 8001324:	483d      	ldr	r0, [pc, #244]	@ (800141c <main+0x278>)
 8001326:	f00c fc6f 	bl	800dc08 <atexit>
 800132a:	4839      	ldr	r0, [pc, #228]	@ (8001410 <main+0x26c>)
 800132c:	f00c fba3 	bl	800da76 <__cxa_guard_release>
  interpreter = &static_interpreter;
 8001330:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <main+0x27c>)
 8001332:	4a39      	ldr	r2, [pc, #228]	@ (8001418 <main+0x274>)
 8001334:	601a      	str	r2, [r3, #0]

  // <---- -------- Allocate memory from the tensor_arena for the model's tensors. -------- ---->
  tflite_status = interpreter->AllocateTensors();
 8001336:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <main+0x27c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f008 f942 	bl	80095c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b30      	ldr	r3, [pc, #192]	@ (8001408 <main+0x264>)
 8001346:	701a      	strb	r2, [r3, #0]
  if(tflite_status != kTfLiteOk)
 8001348:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <main+0x264>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d016      	beq.n	800137e <main+0x1da>
  {
	  error_reporter->Report("AllocateTensors failed.");
 8001350:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <main+0x238>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4933      	ldr	r1, [pc, #204]	@ (8001424 <main+0x280>)
 8001356:	4618      	mov	r0, r3
 8001358:	f002 fbb1 	bl	8003abe <_ZN6tflite13ErrorReporter6ReportEPKcz>

	  buf_len = sprintf(buf, "AllocateTensors failed.");
 800135c:	4931      	ldr	r1, [pc, #196]	@ (8001424 <main+0x280>)
 800135e:	4821      	ldr	r0, [pc, #132]	@ (80013e4 <main+0x240>)
 8001360:	f00d fbce 	bl	800eb00 <siprintf>
 8001364:	4603      	mov	r3, r0
 8001366:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <main+0x244>)
 8001368:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <main+0x244>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29a      	uxth	r2, r3
 8001370:	2364      	movs	r3, #100	@ 0x64
 8001372:	491c      	ldr	r1, [pc, #112]	@ (80013e4 <main+0x240>)
 8001374:	481d      	ldr	r0, [pc, #116]	@ (80013ec <main+0x248>)
 8001376:	f001 feeb 	bl	8003150 <HAL_UART_Transmit>

	  while(1);
 800137a:	bf00      	nop
 800137c:	e7fd      	b.n	800137a <main+0x1d6>
  }

  // <---- -------- Allocate model input/output buffers(tensors) to pointers -------- ---->
  model_input  = interpreter->input(0);
 800137e:	4b28      	ldr	r3, [pc, #160]	@ (8001420 <main+0x27c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f008 fabb 	bl	8009900 <_ZN6tflite16MicroInterpreter5inputEj>
 800138a:	4603      	mov	r3, r0
 800138c:	4a26      	ldr	r2, [pc, #152]	@ (8001428 <main+0x284>)
 800138e:	6013      	str	r3, [r2, #0]
  model_output = interpreter->output(0);
 8001390:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <main+0x27c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f008 fad4 	bl	8009944 <_ZN6tflite16MicroInterpreter6outputEj>
 800139c:	4603      	mov	r3, r0
 800139e:	4a23      	ldr	r2, [pc, #140]	@ (800142c <main+0x288>)
 80013a0:	6013      	str	r3, [r2, #0]

  // <---- -------- Get number of elements in input tensor -------- ---->
  num_elements = model_input->bytes / sizeof(float);
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <main+0x284>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <main+0x28c>)
 80013ac:	6013      	str	r3, [r2, #0]
  buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <main+0x28c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	491f      	ldr	r1, [pc, #124]	@ (8001434 <main+0x290>)
 80013b6:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <main+0x240>)
 80013b8:	f00d fba2 	bl	800eb00 <siprintf>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <main+0x244>)
 80013c0:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <main+0x244>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	2364      	movs	r3, #100	@ 0x64
 80013ca:	4906      	ldr	r1, [pc, #24]	@ (80013e4 <main+0x240>)
 80013cc:	4807      	ldr	r0, [pc, #28]	@ (80013ec <main+0x248>)
 80013ce:	f001 febf 	bl	8003150 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // <---- -------- Fill input buffer (use test value) -------- ---->
	  for(uint32_t i = 0; i < num_elements; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	e03b      	b.n	8001450 <main+0x2ac>
 80013d8:	20000e5c 	.word	0x20000e5c
 80013dc:	20000c64 	.word	0x20000c64
 80013e0:	08010a94 	.word	0x08010a94
 80013e4:	200016fc 	.word	0x200016fc
 80013e8:	20001730 	.word	0x20001730
 80013ec:	20000ea4 	.word	0x20000ea4
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000eec 	.word	0x20000eec
 80013f8:	08010aa8 	.word	0x08010aa8
 80013fc:	20001774 	.word	0x20001774
 8001400:	20001744 	.word	0x20001744
 8001404:	08001185 	.word	0x08001185
 8001408:	20001734 	.word	0x20001734
 800140c:	08010ad0 	.word	0x08010ad0
 8001410:	2000183c 	.word	0x2000183c
 8001414:	20000efc 	.word	0x20000efc
 8001418:	20001778 	.word	0x20001778
 800141c:	08001195 	.word	0x08001195
 8001420:	20000ef0 	.word	0x20000ef0
 8001424:	08010af4 	.word	0x08010af4
 8001428:	20000ef4 	.word	0x20000ef4
 800142c:	20000ef8 	.word	0x20000ef8
 8001430:	20001738 	.word	0x20001738
 8001434:	08010b0c 	.word	0x08010b0c
	  {
		  model_input->data.f[i] = 2.0f;
 8001438:	4b32      	ldr	r3, [pc, #200]	@ (8001504 <main+0x360>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001448:	601a      	str	r2, [r3, #0]
	  for(uint32_t i = 0; i < num_elements; i++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <main+0x364>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3ee      	bcc.n	8001438 <main+0x294>
	  }

	  // <---- -------- Get current timestamp -------- ---->
	  timestamp = htim11.Instance->CNT;
 800145a:	4b2c      	ldr	r3, [pc, #176]	@ (800150c <main+0x368>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001460:	4a2b      	ldr	r2, [pc, #172]	@ (8001510 <main+0x36c>)
 8001462:	6013      	str	r3, [r2, #0]

	  // <---- -------- Run inference -------- ---->
	  tflite_status = interpreter->Invoke();
 8001464:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <main+0x370>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f008 fa1b 	bl	80098a4 <_ZN6tflite16MicroInterpreter6InvokeEv>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b29      	ldr	r3, [pc, #164]	@ (8001518 <main+0x374>)
 8001474:	701a      	strb	r2, [r3, #0]
	  if(tflite_status != kTfLiteOk)
 8001476:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <main+0x374>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d014      	beq.n	80014a8 <main+0x304>
	  {
		  error_reporter->Report("Invoke failed.");
 800147e:	4b27      	ldr	r3, [pc, #156]	@ (800151c <main+0x378>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4927      	ldr	r1, [pc, #156]	@ (8001520 <main+0x37c>)
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fb1a 	bl	8003abe <_ZN6tflite13ErrorReporter6ReportEPKcz>

		  buf_len = sprintf(buf, "Invoke failed.");
 800148a:	4925      	ldr	r1, [pc, #148]	@ (8001520 <main+0x37c>)
 800148c:	4825      	ldr	r0, [pc, #148]	@ (8001524 <main+0x380>)
 800148e:	f00d fb37 	bl	800eb00 <siprintf>
 8001492:	4603      	mov	r3, r0
 8001494:	4a24      	ldr	r2, [pc, #144]	@ (8001528 <main+0x384>)
 8001496:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001498:	4b23      	ldr	r3, [pc, #140]	@ (8001528 <main+0x384>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b29a      	uxth	r2, r3
 800149e:	2364      	movs	r3, #100	@ 0x64
 80014a0:	4920      	ldr	r1, [pc, #128]	@ (8001524 <main+0x380>)
 80014a2:	4822      	ldr	r0, [pc, #136]	@ (800152c <main+0x388>)
 80014a4:	f001 fe54 	bl	8003150 <HAL_UART_Transmit>
	  }

	  // <---- -------- Read output (predict y) of neural network -------- ---->
	  y_val = model_output->data.f[0];
 80014a8:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <main+0x38c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a20      	ldr	r2, [pc, #128]	@ (8001534 <main+0x390>)
 80014b2:	6013      	str	r3, [r2, #0]

	  buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, (htim11.Instance->CNT - timestamp));
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <main+0x390>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4912      	ldr	r1, [pc, #72]	@ (800150c <main+0x368>)
 80014c4:	6809      	ldr	r1, [r1, #0]
 80014c6:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 80014c8:	4911      	ldr	r1, [pc, #68]	@ (8001510 <main+0x36c>)
 80014ca:	6809      	ldr	r1, [r1, #0]
 80014cc:	1a41      	subs	r1, r0, r1
 80014ce:	9100      	str	r1, [sp, #0]
 80014d0:	4919      	ldr	r1, [pc, #100]	@ (8001538 <main+0x394>)
 80014d2:	4814      	ldr	r0, [pc, #80]	@ (8001524 <main+0x380>)
 80014d4:	f00d fb14 	bl	800eb00 <siprintf>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a13      	ldr	r2, [pc, #76]	@ (8001528 <main+0x384>)
 80014dc:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <main+0x384>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	2364      	movs	r3, #100	@ 0x64
 80014e6:	490f      	ldr	r1, [pc, #60]	@ (8001524 <main+0x380>)
 80014e8:	4810      	ldr	r0, [pc, #64]	@ (800152c <main+0x388>)
 80014ea:	f001 fe31 	bl	8003150 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80014ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014f2:	f000 fd53 	bl	8001f9c <HAL_Delay>

	  HAL_GPIO_TogglePin(LED_OK_GPIO_Port, LED_OK_Pin);
 80014f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014fa:	4810      	ldr	r0, [pc, #64]	@ (800153c <main+0x398>)
 80014fc:	f000 fff5 	bl	80024ea <HAL_GPIO_TogglePin>
  }
 8001500:	e767      	b.n	80013d2 <main+0x22e>
 8001502:	bf00      	nop
 8001504:	20000ef4 	.word	0x20000ef4
 8001508:	20001738 	.word	0x20001738
 800150c:	20000e5c 	.word	0x20000e5c
 8001510:	2000173c 	.word	0x2000173c
 8001514:	20000ef0 	.word	0x20000ef0
 8001518:	20001734 	.word	0x20001734
 800151c:	20000c64 	.word	0x20000c64
 8001520:	08010b2c 	.word	0x08010b2c
 8001524:	200016fc 	.word	0x200016fc
 8001528:	20001730 	.word	0x20001730
 800152c:	20000ea4 	.word	0x20000ea4
 8001530:	20000ef8 	.word	0x20000ef8
 8001534:	20001740 	.word	0x20001740
 8001538:	08010b3c 	.word	0x08010b3c
 800153c:	40020c00 	.word	0x40020c00

08001540 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b094      	sub	sp, #80	@ 0x50
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2230      	movs	r2, #48	@ 0x30
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f00d fbea 	bl	800ed28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b2c      	ldr	r3, [pc, #176]	@ (800161c <_Z18SystemClock_Configv+0xdc>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a2b      	ldr	r2, [pc, #172]	@ (800161c <_Z18SystemClock_Configv+0xdc>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
 8001574:	4b29      	ldr	r3, [pc, #164]	@ (800161c <_Z18SystemClock_Configv+0xdc>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <_Z18SystemClock_Configv+0xe0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a25      	ldr	r2, [pc, #148]	@ (8001620 <_Z18SystemClock_Configv+0xe0>)
 800158a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <_Z18SystemClock_Configv+0xe0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a6:	2302      	movs	r3, #2
 80015a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015b0:	2304      	movs	r3, #4
 80015b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80015b4:	2364      	movs	r3, #100	@ 0x64
 80015b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015bc:	2304      	movs	r3, #4
 80015be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 ffab 	bl	8002520 <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80015da:	f000 f8cb 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015de:	230f      	movs	r3, #15
 80015e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e2:	2302      	movs	r3, #2
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2103      	movs	r1, #3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fa08 	bl	8002a10 <HAL_RCC_ClockConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001610:	f000 f8b0 	bl	8001774 <Error_Handler>
  }
}
 8001614:	bf00      	nop
 8001616:	3750      	adds	r7, #80	@ 0x50
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000

08001624 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001628:	4b10      	ldr	r3, [pc, #64]	@ (800166c <_ZL13MX_TIM11_Initv+0x48>)
 800162a:	4a11      	ldr	r2, [pc, #68]	@ (8001670 <_ZL13MX_TIM11_Initv+0x4c>)
 800162c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 80 - 1;
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <_ZL13MX_TIM11_Initv+0x48>)
 8001630:	224f      	movs	r2, #79	@ 0x4f
 8001632:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <_ZL13MX_TIM11_Initv+0x48>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65536 - 1;
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <_ZL13MX_TIM11_Initv+0x48>)
 800163c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001640:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <_ZL13MX_TIM11_Initv+0x48>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <_ZL13MX_TIM11_Initv+0x48>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800164e:	4807      	ldr	r0, [pc, #28]	@ (800166c <_ZL13MX_TIM11_Initv+0x48>)
 8001650:	f001 fbfe 	bl	8002e50 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8001664:	f000 f886 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000e5c 	.word	0x20000e5c
 8001670:	40014800 	.word	0x40014800

08001674 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800167a:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <_ZL19MX_USART2_UART_Initv+0x58>)
 800167c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016aa:	4807      	ldr	r0, [pc, #28]	@ (80016c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80016ac:	f001 fd00 	bl	80030b0 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80016c0:	f000 f858 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000ea4 	.word	0x20000ea4
 80016cc:	40004400 	.word	0x40004400

080016d0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <_ZL12MX_GPIO_Initv+0x9c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a1f      	ldr	r2, [pc, #124]	@ (800176c <_ZL12MX_GPIO_Initv+0x9c>)
 80016f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <_ZL12MX_GPIO_Initv+0x9c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <_ZL12MX_GPIO_Initv+0x9c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a18      	ldr	r2, [pc, #96]	@ (800176c <_ZL12MX_GPIO_Initv+0x9c>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b16      	ldr	r3, [pc, #88]	@ (800176c <_ZL12MX_GPIO_Initv+0x9c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <_ZL12MX_GPIO_Initv+0x9c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a11      	ldr	r2, [pc, #68]	@ (800176c <_ZL12MX_GPIO_Initv+0x9c>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <_ZL12MX_GPIO_Initv+0x9c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_OK_Pin|LED_Error_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001740:	480b      	ldr	r0, [pc, #44]	@ (8001770 <_ZL12MX_GPIO_Initv+0xa0>)
 8001742:	f000 feb9 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_OK_Pin LED_Error_Pin */
  GPIO_InitStruct.Pin = LED_OK_Pin|LED_Error_Pin;
 8001746:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800174a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4619      	mov	r1, r3
 800175e:	4804      	ldr	r0, [pc, #16]	@ (8001770 <_ZL12MX_GPIO_Initv+0xa0>)
 8001760:	f000 fd26 	bl	80021b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	40020c00 	.word	0x40020c00

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <Error_Handler+0x8>

08001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001788:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
FLATBUFFERS_SUPPRESS_UBSAN("alignment")
T ReadScalar(const void *p) {
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f886 	bl	80018b4 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f883 	bl	80018ca <_ZN11flatbuffers12EndianScalarItEET_S1_>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ffd0 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	460b      	mov	r3, r1
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	4619      	mov	r1, r3
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff fc43 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001802:	4603      	mov	r3, r0
 8001804:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001806:	8afb      	ldrh	r3, [r7, #22]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	8afb      	ldrh	r3, [r7, #22]
 8001810:	4413      	add	r3, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffdb 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001818:	4603      	mov	r3, r0
 800181a:	e000      	b.n	800181e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 800181c:	687b      	ldr	r3, [r7, #4]
  }
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T, typename SizeT = uoffset_t>
T *GetMutableSizePrefixedRoot(void *buf) {
  return GetMutableRoot<T>(reinterpret_cast<uint8_t *>(buf) + sizeof(SizeT));
}

template<typename T> const T *GetRoot(const void *buf) {
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f857 	bl	80018e2 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver {
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <_ZN6tflite15MicroOpResolverC1Ev+0x1c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	08015fa4 	.word	0x08015fa4

08001860 <_ZN6tflite22MicroMutableOpResolverILj1EEC1Ev>:
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver() {}
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ffe8 	bl	8001840 <_ZN6tflite15MicroOpResolverC1Ev>
 8001870:	4a06      	ldr	r2, [pc, #24]	@ (800188c <_ZN6tflite22MicroMutableOpResolverILj1EEC1Ev+0x2c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	08015f88 	.word	0x08015f88

08001890 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK16TFLMRegistration>:
  TfLiteStatus AddFramer() {
    // TODO(b/286250473): change back name to "Framer" and remove namespace
    return AddCustom("SignalFramer", tflite::tflm_signal::Register_FRAMER());
  }

  TfLiteStatus AddFullyConnected(
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
      const TFLMRegistration& registration = Register_FULLY_CONNECTED()) {
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
 800189a:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK16TFLMRegistration+0x20>)
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	2109      	movs	r1, #9
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f835 	bl	8001910 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80018a6:	4603      	mov	r3, r0
                      ParseFullyConnected);
  }
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	080040d9 	.word	0x080040d9

080018b4 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    return t;
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	80fb      	strh	r3, [r7, #6]
    return t;
 80018d4:	88fb      	ldrh	r3, [r7, #6]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  if (!buf) return nullptr;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv+0x12>
 80018f0:	2300      	movs	r3, #0
 80018f2:	e009      	b.n	8001908 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv+0x26>
  EndianCheck();
 80018f4:	f7ff fb9e 	bl	8001034 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff3f 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001902:	4602      	mov	r2, r0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4413      	add	r3, r2
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
                          const TFLMRegistration& registration,
                          TfLiteBridgeBuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b20      	cmp	r3, #32
 8001922:	d107      	bne.n	8001934 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x24>
      MicroPrintf("Invalid parameter BuiltinOperator_CUSTOM to the ");
 8001924:	4833      	ldr	r0, [pc, #204]	@ (80019f4 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xe4>)
 8001926:	f009 f8bf 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      MicroPrintf("AddBuiltin function.");
 800192a:	4833      	ldr	r0, [pc, #204]	@ (80019f8 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xe8>)
 800192c:	f009 f8bc 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8001930:	2301      	movs	r3, #1
 8001932:	e05a      	b.n	80019ea <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xda>
    }

    if (FindOp(op) != nullptr) {
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	4798      	blx	r3
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x52>
      MicroPrintf("Calling AddBuiltin with the same op more than ");
 8001950:	482a      	ldr	r0, [pc, #168]	@ (80019fc <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xec>)
 8001952:	f009 f8a9 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      MicroPrintf("once is not supported (Op: #%d).", op);
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	4829      	ldr	r0, [pc, #164]	@ (8001a00 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf0>)
 800195a:	f009 f8a5 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800195e:	2301      	movs	r3, #1
 8001960:	e043      	b.n	80019ea <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xda>
    }

    if (registrations_len_ >= tOpCount) {
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6e>
      MicroPrintf("Couldn't register builtin op #%d, resolver size ", op);
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	4825      	ldr	r0, [pc, #148]	@ (8001a04 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 800196e:	f009 f89b 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      MicroPrintf("is too small (%d).", tOpCount);
 8001972:	2101      	movs	r1, #1
 8001974:	4824      	ldr	r0, [pc, #144]	@ (8001a08 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 8001976:	f009 f897 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800197a:	2301      	movs	r3, #1
 800197c:	e035      	b.n	80019ea <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xda>
    }

    registrations_[registrations_len_] = registration;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a1a      	ldr	r2, [r3, #32]
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	1d1c      	adds	r4, r3, #4
 8001992:	4615      	mov	r5, r2
 8001994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001998:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800199c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    // Strictly speaking, the builtin_code is not necessary for TFLM but
    // filling it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a1a      	ldr	r2, [r3, #32]
 80019a4:	68f9      	ldr	r1, [r7, #12]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	3318      	adds	r3, #24
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	621a      	str	r2, [r3, #32]

    builtin_codes_[num_buitin_ops_] = op;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	3308      	adds	r3, #8
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	605a      	str	r2, [r3, #4]
    builtin_parsers_[num_buitin_ops_] = parser;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	320a      	adds	r2, #10
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    num_buitin_ops_++;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    return kTfLiteOk;
 80019e8:	2300      	movs	r3, #0
  }
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bdb0      	pop	{r4, r5, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	08010b5c 	.word	0x08010b5c
 80019f8:	08010b90 	.word	0x08010b90
 80019fc:	08010ba8 	.word	0x08010ba8
 8001a00:	08010bd8 	.word	0x08010bd8
 8001a04:	08010bfc 	.word	0x08010bfc
 8001a08:	08010c30 	.word	0x08010c30

08001a0c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE>:
  const TFLMRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d101      	bne.n	8001a20 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x14>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e01b      	b.n	8001a58 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e012      	b.n	8001a4c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x40>
      const TFLMRegistration& registration = registrations_[i];
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	3304      	adds	r3, #4
 8001a36:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d101      	bne.n	8001a46 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x3a>
        return &registration;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	e008      	b.n	8001a58 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d3e7      	bcc.n	8001a26 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001a56:	2300      	movs	r3, #0
  }
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	tflite::MicroErrorReporter micro_error_reporter;
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8001a6a:	f7ff fac1 	bl	8000ff0 <_ZN6tflite18MicroErrorReporterD1Ev>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000c60 	.word	0x20000c60

08001a78 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc>:
  const TFLMRegistration* FindOp(const char* op) const override {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e01a      	b.n	8001abe <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x46>
      const TFLMRegistration& registration = registrations_[i];
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	3304      	adds	r3, #4
 8001a98:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d10a      	bne.n	8001ab8 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x40>
          (strcmp(registration.custom_name, op) == 0)) {
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	6839      	ldr	r1, [r7, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fb99 	bl	80001e0 <strcmp>
 8001aae:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x40>
        return &registration;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	e008      	b.n	8001aca <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x52>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3df      	bcc.n	8001a88 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x10>
    return nullptr;
 8001ac8:	2300      	movs	r3, #0
  }
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE>:
  TfLiteBridgeBuiltinParseFunction GetOpDataParser(
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d901      	bls.n	8001ae8 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x16>
 8001ae4:	f00c f86a 	bl	800dbbc <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e011      	b.n	8001b12 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x40>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3308      	adds	r3, #8
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d105      	bne.n	8001b0c <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x3a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	320a      	adds	r2, #10
 8001b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0a:	e008      	b.n	8001b1e <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3e8      	bcc.n	8001aee <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001b1c:	2300      	movs	r3, #0
  }
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_GLOBAL__sub_D_sine_model_len>:
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	f7ff ff9b 	bl	8001a64 <_Z41__static_initialization_and_destruction_0v>
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <HAL_TIM_Base_MspInit+0x3c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10d      	bne.n	8001bae <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x40>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x40>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x40>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40014800 	.word	0x40014800
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a19      	ldr	r2, [pc, #100]	@ (8001c48 <HAL_UART_MspInit+0x84>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d12b      	bne.n	8001c3e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <HAL_UART_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_UART_MspInit+0x88>)
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_UART_MspInit+0x88>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_UART_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a10      	ldr	r2, [pc, #64]	@ (8001c4c <HAL_UART_MspInit+0x88>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <HAL_UART_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c1e:	230c      	movs	r3, #12
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c2e:	2307      	movs	r3, #7
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <HAL_UART_MspInit+0x8c>)
 8001c3a:	f000 fab9 	bl	80021b0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c3e:	bf00      	nop
 8001c40:	3728      	adds	r7, #40	@ 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <NMI_Handler+0x4>

08001c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001caa:	f000 f957 	bl	8001f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  return 1;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_kill>:

int _kill(int pid, int sig)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ccc:	f00d f8e4 	bl	800ee98 <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2216      	movs	r2, #22
 8001cd4:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_exit>:

void _exit (int status)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cea:	f04f 31ff 	mov.w	r1, #4294967295
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffe7 	bl	8001cc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <_exit+0x12>

08001cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e00a      	b.n	8001d20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d0a:	f3af 8000 	nop.w
 8001d0e:	4601      	mov	r1, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	b2ca      	uxtb	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf0      	blt.n	8001d0a <_read+0x12>
  }

  return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e009      	b.n	8001d58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60ba      	str	r2, [r7, #8]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf1      	blt.n	8001d44 <_write+0x12>
  }
  return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_close>:

int _close(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d92:	605a      	str	r2, [r3, #4]
  return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f00d f848 	bl	800ee98 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20020000 	.word	0x20020000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20001840 	.word	0x20001840
 8001e3c:	20001a30 	.word	0x20001a30

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e68:	f7ff ffea 	bl	8001e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e6c:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e6e:	490d      	ldr	r1, [pc, #52]	@ (8001ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e84:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e92:	f00d f807 	bl	800eea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff f985 	bl	80011a4 <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	20000e40 	.word	0x20000e40
  ldr r2, =_sidata
 8001ea8:	080169a4 	.word	0x080169a4
  ldr r2, =_sbss
 8001eac:	20000e40 	.word	0x20000e40
  ldr r4, =_ebss
 8001eb0:	20001a2c 	.word	0x20001a2c

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f931 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f000 f808 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fe20 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_InitTick+0x54>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_InitTick+0x58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f93b 	bl	8002196 <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 f911 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	@ (8001f58 <HAL_InitTick+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000c68 	.word	0x20000c68
 8001f54:	20000c70 	.word	0x20000c70
 8001f58:	20000c6c 	.word	0x20000c6c

08001f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_IncTick+0x20>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x24>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <HAL_IncTick+0x24>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000c70 	.word	0x20000c70
 8001f80:	20001844 	.word	0x20001844

08001f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return uwTick;
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <HAL_GetTick+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20001844 	.word	0x20001844

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff ffee 	bl	8001f84 <HAL_GetTick>
 8001fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d005      	beq.n	8001fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <HAL_Delay+0x44>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fc2:	bf00      	nop
 8001fc4:	f7ff ffde 	bl	8001f84 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d8f7      	bhi.n	8001fc4 <HAL_Delay+0x28>
  {
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000c70 	.word	0x20000c70

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	@ (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	@ (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	@ 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	@ (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff47 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff5c 	bl	800202c <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff8e 	bl	800209c <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffb0 	bl	8002104 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	e159      	b.n	8002480 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021cc:	2201      	movs	r2, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	f040 8148 	bne.w	800247a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d005      	beq.n	8002202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d130      	bne.n	8002264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 0201 	and.w	r2, r3, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b03      	cmp	r3, #3
 800226e:	d017      	beq.n	80022a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d123      	bne.n	80022f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	220f      	movs	r2, #15
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	08da      	lsrs	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3208      	adds	r2, #8
 80022ee:	69b9      	ldr	r1, [r7, #24]
 80022f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0203 	and.w	r2, r3, #3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80a2 	beq.w	800247a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b57      	ldr	r3, [pc, #348]	@ (8002498 <HAL_GPIO_Init+0x2e8>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	4a56      	ldr	r2, [pc, #344]	@ (8002498 <HAL_GPIO_Init+0x2e8>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002344:	6453      	str	r3, [r2, #68]	@ 0x44
 8002346:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <HAL_GPIO_Init+0x2e8>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002352:	4a52      	ldr	r2, [pc, #328]	@ (800249c <HAL_GPIO_Init+0x2ec>)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	3302      	adds	r3, #2
 800235a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a49      	ldr	r2, [pc, #292]	@ (80024a0 <HAL_GPIO_Init+0x2f0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d019      	beq.n	80023b2 <HAL_GPIO_Init+0x202>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a48      	ldr	r2, [pc, #288]	@ (80024a4 <HAL_GPIO_Init+0x2f4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <HAL_GPIO_Init+0x1fe>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a47      	ldr	r2, [pc, #284]	@ (80024a8 <HAL_GPIO_Init+0x2f8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00d      	beq.n	80023aa <HAL_GPIO_Init+0x1fa>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a46      	ldr	r2, [pc, #280]	@ (80024ac <HAL_GPIO_Init+0x2fc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <HAL_GPIO_Init+0x1f6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a45      	ldr	r2, [pc, #276]	@ (80024b0 <HAL_GPIO_Init+0x300>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_GPIO_Init+0x1f2>
 800239e:	2304      	movs	r3, #4
 80023a0:	e008      	b.n	80023b4 <HAL_GPIO_Init+0x204>
 80023a2:	2307      	movs	r3, #7
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x204>
 80023a6:	2303      	movs	r3, #3
 80023a8:	e004      	b.n	80023b4 <HAL_GPIO_Init+0x204>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_Init+0x204>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_GPIO_Init+0x204>
 80023b2:	2300      	movs	r3, #0
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	f002 0203 	and.w	r2, r2, #3
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	4093      	lsls	r3, r2
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c4:	4935      	ldr	r1, [pc, #212]	@ (800249c <HAL_GPIO_Init+0x2ec>)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d2:	4b38      	ldr	r3, [pc, #224]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f6:	4a2f      	ldr	r2, [pc, #188]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023fc:	4b2d      	ldr	r3, [pc, #180]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002420:	4a24      	ldr	r2, [pc, #144]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002426:	4b23      	ldr	r3, [pc, #140]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244a:	4a1a      	ldr	r2, [pc, #104]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002450:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002474:	4a0f      	ldr	r2, [pc, #60]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3301      	adds	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b0f      	cmp	r3, #15
 8002484:	f67f aea2 	bls.w	80021cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3724      	adds	r7, #36	@ 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40013800 	.word	0x40013800
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40020400 	.word	0x40020400
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020c00 	.word	0x40020c00
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	619a      	str	r2, [r3, #24]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024fc:	887a      	ldrh	r2, [r7, #2]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	041a      	lsls	r2, r3, #16
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43d9      	mvns	r1, r3
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	400b      	ands	r3, r1
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e267      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d075      	beq.n	800262a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253e:	4b88      	ldr	r3, [pc, #544]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4b85      	ldr	r3, [pc, #532]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002552:	2b08      	cmp	r3, #8
 8002554:	d112      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b82      	ldr	r3, [pc, #520]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b7e      	ldr	r3, [pc, #504]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05b      	beq.n	8002628 <HAL_RCC_OscConfig+0x108>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e242      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x74>
 8002586:	4b76      	ldr	r3, [pc, #472]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a75      	ldr	r2, [pc, #468]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x98>
 800259e:	4b70      	ldr	r3, [pc, #448]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 80025b8:	4b69      	ldr	r3, [pc, #420]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a68      	ldr	r2, [pc, #416]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b66      	ldr	r3, [pc, #408]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a65      	ldr	r2, [pc, #404]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fcd4 	bl	8001f84 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff fcd0 	bl	8001f84 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e207      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff fcc0 	bl	8001f84 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7ff fcbc 	bl	8001f84 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1f3      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b51      	ldr	r3, [pc, #324]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0xe8>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002636:	4b4a      	ldr	r3, [pc, #296]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002642:	4b47      	ldr	r3, [pc, #284]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b44      	ldr	r3, [pc, #272]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b41      	ldr	r3, [pc, #260]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1c7      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b3b      	ldr	r3, [pc, #236]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4937      	ldr	r1, [pc, #220]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e03a      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b34      	ldr	r3, [pc, #208]	@ (8002764 <HAL_RCC_OscConfig+0x244>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7ff fc75 	bl	8001f84 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269e:	f7ff fc71 	bl	8001f84 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1a8      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b28      	ldr	r3, [pc, #160]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4925      	ldr	r1, [pc, #148]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b24      	ldr	r3, [pc, #144]	@ (8002764 <HAL_RCC_OscConfig+0x244>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff fc54 	bl	8001f84 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7ff fc50 	bl	8001f84 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e187      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d036      	beq.n	8002778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_RCC_OscConfig+0x248>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7ff fc34 	bl	8001f84 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7ff fc30 	bl	8001f84 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e167      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x200>
 800273e:	e01b      	b.n	8002778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_RCC_OscConfig+0x248>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7ff fc1d 	bl	8001f84 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	e00e      	b.n	800276c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274e:	f7ff fc19 	bl	8001f84 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d907      	bls.n	800276c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e150      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002760:	40023800 	.word	0x40023800
 8002764:	42470000 	.word	0x42470000
 8002768:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b88      	ldr	r3, [pc, #544]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ea      	bne.n	800274e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8097 	beq.w	80028b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b81      	ldr	r3, [pc, #516]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b7d      	ldr	r3, [pc, #500]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	4a7c      	ldr	r2, [pc, #496]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b77      	ldr	r3, [pc, #476]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c2:	4b74      	ldr	r3, [pc, #464]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a73      	ldr	r2, [pc, #460]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7ff fbd9 	bl	8001f84 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7ff fbd5 	bl	8001f84 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e10c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x2ea>
 80027fc:	4b64      	ldr	r3, [pc, #400]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002800:	4a63      	ldr	r2, [pc, #396]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	@ 0x70
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x30c>
 8002812:	4b5f      	ldr	r3, [pc, #380]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	4a5e      	ldr	r2, [pc, #376]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6713      	str	r3, [r2, #112]	@ 0x70
 800281e:	4b5c      	ldr	r3, [pc, #368]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	4a5b      	ldr	r2, [pc, #364]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6713      	str	r3, [r2, #112]	@ 0x70
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800282c:	4b58      	ldr	r3, [pc, #352]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002830:	4a57      	ldr	r2, [pc, #348]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	@ 0x70
 8002838:	4b55      	ldr	r3, [pc, #340]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a54      	ldr	r2, [pc, #336]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d015      	beq.n	8002878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7ff fb9a 	bl	8001f84 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7ff fb96 	bl	8001f84 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0cb      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	4b49      	ldr	r3, [pc, #292]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ee      	beq.n	8002854 <HAL_RCC_OscConfig+0x334>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7ff fb84 	bl	8001f84 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7ff fb80 	bl	8001f84 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0b5      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	4b3e      	ldr	r3, [pc, #248]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ee      	bne.n	8002880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	4a38      	ldr	r2, [pc, #224]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a1 	beq.w	8002a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028be:	4b34      	ldr	r3, [pc, #208]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d05c      	beq.n	8002984 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d141      	bne.n	8002956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <HAL_RCC_OscConfig+0x478>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fb54 	bl	8001f84 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff fb50 	bl	8001f84 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e087      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b27      	ldr	r3, [pc, #156]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	3b01      	subs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	491b      	ldr	r1, [pc, #108]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <HAL_RCC_OscConfig+0x478>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff fb29 	bl	8001f84 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002936:	f7ff fb25 	bl	8001f84 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e05c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x416>
 8002954:	e054      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff fb12 	bl	8001f84 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7ff fb0e 	bl	8001f84 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e045      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x444>
 8002982:	e03d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e038      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002990:	40023800 	.word	0x40023800
 8002994:	40007000 	.word	0x40007000
 8002998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800299c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <HAL_RCC_OscConfig+0x4ec>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d028      	beq.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d121      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d11a      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cc      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d90c      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b65      	ldr	r3, [pc, #404]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a58      	ldr	r2, [pc, #352]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a52      	ldr	r2, [pc, #328]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d044      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d119      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b3f      	ldr	r3, [pc, #252]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3b      	ldr	r3, [pc, #236]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e067      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b37      	ldr	r3, [pc, #220]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4934      	ldr	r1, [pc, #208]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7ff fa40 	bl	8001f84 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7ff fa3c 	bl	8001f84 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d20c      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490a      	ldr	r1, [pc, #40]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f9a0 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08015fcc 	.word	0x08015fcc
 8002bd4:	20000c68 	.word	0x20000c68
 8002bd8:	20000c6c 	.word	0x20000c6c

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be0:	b094      	sub	sp, #80	@ 0x50
 8002be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf4:	4b79      	ldr	r3, [pc, #484]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	f200 80e1 	bhi.w	8002dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0e:	e0db      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b73      	ldr	r3, [pc, #460]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c14:	e0db      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c16:	4b73      	ldr	r3, [pc, #460]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c1a:	e0d8      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c26:	4b6d      	ldr	r3, [pc, #436]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d063      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b6a      	ldr	r3, [pc, #424]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c4e:	4622      	mov	r2, r4
 8002c50:	462b      	mov	r3, r5
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c60:	0150      	lsls	r0, r2, #5
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4621      	mov	r1, r4
 8002c68:	1a51      	subs	r1, r2, r1
 8002c6a:	6139      	str	r1, [r7, #16]
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c80:	4659      	mov	r1, fp
 8002c82:	018b      	lsls	r3, r1, #6
 8002c84:	4651      	mov	r1, sl
 8002c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	018a      	lsls	r2, r1, #6
 8002c8e:	4651      	mov	r1, sl
 8002c90:	ebb2 0801 	subs.w	r8, r2, r1
 8002c94:	4659      	mov	r1, fp
 8002c96:	eb63 0901 	sbc.w	r9, r3, r1
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cae:	4690      	mov	r8, r2
 8002cb0:	4699      	mov	r9, r3
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	eb18 0303 	adds.w	r3, r8, r3
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	462b      	mov	r3, r5
 8002cbc:	eb49 0303 	adc.w	r3, r9, r3
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cce:	4629      	mov	r1, r5
 8002cd0:	024b      	lsls	r3, r1, #9
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cd8:	4621      	mov	r1, r4
 8002cda:	024a      	lsls	r2, r1, #9
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cec:	f7fd ff74 	bl	8000bd8 <__aeabi_uldivmod>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cf8:	e058      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b38      	ldr	r3, [pc, #224]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	2200      	movs	r2, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	4611      	mov	r1, r2
 8002d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	0159      	lsls	r1, r3, #5
 8002d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d26:	0150      	lsls	r0, r2, #5
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d32:	4649      	mov	r1, r9
 8002d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d50:	eb63 050b 	sbc.w	r5, r3, fp
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	00eb      	lsls	r3, r5, #3
 8002d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d62:	00e2      	lsls	r2, r4, #3
 8002d64:	4614      	mov	r4, r2
 8002d66:	461d      	mov	r5, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	18e3      	adds	r3, r4, r3
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	464b      	mov	r3, r9
 8002d70:	eb45 0303 	adc.w	r3, r5, r3
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d82:	4629      	mov	r1, r5
 8002d84:	028b      	lsls	r3, r1, #10
 8002d86:	4621      	mov	r1, r4
 8002d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	028a      	lsls	r2, r1, #10
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d96:	2200      	movs	r2, #0
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	61fa      	str	r2, [r7, #28]
 8002d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da0:	f7fd ff1a 	bl	8000bd8 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002dbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3750      	adds	r7, #80	@ 0x50
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	007a1200 	.word	0x007a1200

08002de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000c68 	.word	0x20000c68

08002e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e04:	f7ff fff0 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0a9b      	lsrs	r3, r3, #10
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	@ (8002e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08015fdc 	.word	0x08015fdc

08002e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e2c:	f7ff ffdc 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0b5b      	lsrs	r3, r3, #13
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4903      	ldr	r1, [pc, #12]	@ (8002e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08015fdc 	.word	0x08015fdc

08002e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e041      	b.n	8002ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe fe82 	bl	8001b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f000 f888 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d001      	beq.n	8002f08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e03c      	b.n	8002f82 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1e      	ldr	r2, [pc, #120]	@ (8002f90 <HAL_TIM_Base_Start+0xa0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d018      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f22:	d013      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1a      	ldr	r2, [pc, #104]	@ (8002f94 <HAL_TIM_Base_Start+0xa4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00e      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a19      	ldr	r2, [pc, #100]	@ (8002f98 <HAL_TIM_Base_Start+0xa8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <HAL_TIM_Base_Start+0xac>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a16      	ldr	r2, [pc, #88]	@ (8002fa0 <HAL_TIM_Base_Start+0xb0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d111      	bne.n	8002f70 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d010      	beq.n	8002f80 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	e007      	b.n	8002f80 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800
 8002f9c:	40000c00 	.word	0x40000c00
 8002fa0:	40014000 	.word	0x40014000

08002fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a37      	ldr	r2, [pc, #220]	@ (8003094 <TIM_Base_SetConfig+0xf0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00f      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc2:	d00b      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a34      	ldr	r2, [pc, #208]	@ (8003098 <TIM_Base_SetConfig+0xf4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a33      	ldr	r2, [pc, #204]	@ (800309c <TIM_Base_SetConfig+0xf8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a32      	ldr	r2, [pc, #200]	@ (80030a0 <TIM_Base_SetConfig+0xfc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a28      	ldr	r2, [pc, #160]	@ (8003094 <TIM_Base_SetConfig+0xf0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01b      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffc:	d017      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a25      	ldr	r2, [pc, #148]	@ (8003098 <TIM_Base_SetConfig+0xf4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a24      	ldr	r2, [pc, #144]	@ (800309c <TIM_Base_SetConfig+0xf8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00f      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a23      	ldr	r2, [pc, #140]	@ (80030a0 <TIM_Base_SetConfig+0xfc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a22      	ldr	r2, [pc, #136]	@ (80030a4 <TIM_Base_SetConfig+0x100>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a21      	ldr	r2, [pc, #132]	@ (80030a8 <TIM_Base_SetConfig+0x104>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a20      	ldr	r2, [pc, #128]	@ (80030ac <TIM_Base_SetConfig+0x108>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a0c      	ldr	r2, [pc, #48]	@ (8003094 <TIM_Base_SetConfig+0xf0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d103      	bne.n	800306e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f043 0204 	orr.w	r2, r3, #4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	601a      	str	r2, [r3, #0]
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800
 80030a0:	40000c00 	.word	0x40000c00
 80030a4:	40014000 	.word	0x40014000
 80030a8:	40014400 	.word	0x40014400
 80030ac:	40014800 	.word	0x40014800

080030b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e042      	b.n	8003148 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe fd74 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2224      	movs	r2, #36	@ 0x24
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f973 	bl	80033e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	@ 0x28
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b20      	cmp	r3, #32
 800316e:	d175      	bne.n	800325c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_UART_Transmit+0x2c>
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e06e      	b.n	800325e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2221      	movs	r2, #33	@ 0x21
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800318e:	f7fe fef9 	bl	8001f84 <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	88fa      	ldrh	r2, [r7, #6]
 800319e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031a8:	d108      	bne.n	80031bc <HAL_UART_Transmit+0x6c>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d104      	bne.n	80031bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e003      	b.n	80031c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031c4:	e02e      	b.n	8003224 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2180      	movs	r1, #128	@ 0x80
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f848 	bl	8003266 <UART_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e03a      	b.n	800325e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10b      	bne.n	8003206 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	3302      	adds	r3, #2
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	e007      	b.n	8003216 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	3301      	adds	r3, #1
 8003214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1cb      	bne.n	80031c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	2140      	movs	r1, #64	@ 0x40
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f814 	bl	8003266 <UART_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e006      	b.n	800325e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003276:	e03b      	b.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d037      	beq.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003280:	f7fe fe80 	bl	8001f84 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	429a      	cmp	r2, r3
 800328e:	d302      	bcc.n	8003296 <UART_WaitOnFlagUntilTimeout+0x30>
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e03a      	b.n	8003310 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d023      	beq.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b80      	cmp	r3, #128	@ 0x80
 80032ac:	d020      	beq.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	d01d      	beq.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d116      	bne.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f81d 	bl	8003318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2208      	movs	r2, #8
 80032e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e00f      	b.n	8003310 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4013      	ands	r3, r2
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	429a      	cmp	r2, r3
 800330c:	d0b4      	beq.n	8003278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b095      	sub	sp, #84	@ 0x54
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332a:	e853 3f00 	ldrex	r3, [r3]
 800332e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003340:	643a      	str	r2, [r7, #64]	@ 0x40
 8003342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003348:	e841 2300 	strex	r3, r2, [r1]
 800334c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800334e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e5      	bne.n	8003320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3314      	adds	r3, #20
 800335a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	61fb      	str	r3, [r7, #28]
   return(result);
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3314      	adds	r3, #20
 8003372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003374:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800337a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e5      	bne.n	8003354 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	2b01      	cmp	r3, #1
 800338e:	d119      	bne.n	80033c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	60bb      	str	r3, [r7, #8]
   return(result);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f023 0310 	bic.w	r3, r3, #16
 80033a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033b0:	61ba      	str	r2, [r7, #24]
 80033b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	6979      	ldr	r1, [r7, #20]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	613b      	str	r3, [r7, #16]
   return(result);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e5      	bne.n	8003390 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033d2:	bf00      	nop
 80033d4:	3754      	adds	r7, #84	@ 0x54
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e4:	b0c0      	sub	sp, #256	@ 0x100
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fc:	68d9      	ldr	r1, [r3, #12]
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	ea40 0301 	orr.w	r3, r0, r1
 8003408:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	431a      	orrs	r2, r3
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	431a      	orrs	r2, r3
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003438:	f021 010c 	bic.w	r1, r1, #12
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003446:	430b      	orrs	r3, r1
 8003448:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345a:	6999      	ldr	r1, [r3, #24]
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	ea40 0301 	orr.w	r3, r0, r1
 8003466:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b8f      	ldr	r3, [pc, #572]	@ (80036ac <UART_SetConfig+0x2cc>)
 8003470:	429a      	cmp	r2, r3
 8003472:	d005      	beq.n	8003480 <UART_SetConfig+0xa0>
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b8d      	ldr	r3, [pc, #564]	@ (80036b0 <UART_SetConfig+0x2d0>)
 800347c:	429a      	cmp	r2, r3
 800347e:	d104      	bne.n	800348a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003480:	f7ff fcd2 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 8003484:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003488:	e003      	b.n	8003492 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800348a:	f7ff fcb9 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 800348e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349c:	f040 810c 	bne.w	80036b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034a4:	2200      	movs	r2, #0
 80034a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034b2:	4622      	mov	r2, r4
 80034b4:	462b      	mov	r3, r5
 80034b6:	1891      	adds	r1, r2, r2
 80034b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034ba:	415b      	adcs	r3, r3
 80034bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034c2:	4621      	mov	r1, r4
 80034c4:	eb12 0801 	adds.w	r8, r2, r1
 80034c8:	4629      	mov	r1, r5
 80034ca:	eb43 0901 	adc.w	r9, r3, r1
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e2:	4690      	mov	r8, r2
 80034e4:	4699      	mov	r9, r3
 80034e6:	4623      	mov	r3, r4
 80034e8:	eb18 0303 	adds.w	r3, r8, r3
 80034ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034f0:	462b      	mov	r3, r5
 80034f2:	eb49 0303 	adc.w	r3, r9, r3
 80034f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003506:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800350a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800350e:	460b      	mov	r3, r1
 8003510:	18db      	adds	r3, r3, r3
 8003512:	653b      	str	r3, [r7, #80]	@ 0x50
 8003514:	4613      	mov	r3, r2
 8003516:	eb42 0303 	adc.w	r3, r2, r3
 800351a:	657b      	str	r3, [r7, #84]	@ 0x54
 800351c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003520:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003524:	f7fd fb58 	bl	8000bd8 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4b61      	ldr	r3, [pc, #388]	@ (80036b4 <UART_SetConfig+0x2d4>)
 800352e:	fba3 2302 	umull	r2, r3, r3, r2
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	011c      	lsls	r4, r3, #4
 8003536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800353a:	2200      	movs	r2, #0
 800353c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003540:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003544:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003548:	4642      	mov	r2, r8
 800354a:	464b      	mov	r3, r9
 800354c:	1891      	adds	r1, r2, r2
 800354e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003550:	415b      	adcs	r3, r3
 8003552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003554:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003558:	4641      	mov	r1, r8
 800355a:	eb12 0a01 	adds.w	sl, r2, r1
 800355e:	4649      	mov	r1, r9
 8003560:	eb43 0b01 	adc.w	fp, r3, r1
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003570:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003578:	4692      	mov	sl, r2
 800357a:	469b      	mov	fp, r3
 800357c:	4643      	mov	r3, r8
 800357e:	eb1a 0303 	adds.w	r3, sl, r3
 8003582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003586:	464b      	mov	r3, r9
 8003588:	eb4b 0303 	adc.w	r3, fp, r3
 800358c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800359c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035a4:	460b      	mov	r3, r1
 80035a6:	18db      	adds	r3, r3, r3
 80035a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035aa:	4613      	mov	r3, r2
 80035ac:	eb42 0303 	adc.w	r3, r2, r3
 80035b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035ba:	f7fd fb0d 	bl	8000bd8 <__aeabi_uldivmod>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	4b3b      	ldr	r3, [pc, #236]	@ (80036b4 <UART_SetConfig+0x2d4>)
 80035c6:	fba3 2301 	umull	r2, r3, r3, r1
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2264      	movs	r2, #100	@ 0x64
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	1acb      	subs	r3, r1, r3
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035da:	4b36      	ldr	r3, [pc, #216]	@ (80036b4 <UART_SetConfig+0x2d4>)
 80035dc:	fba3 2302 	umull	r2, r3, r3, r2
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035e8:	441c      	add	r4, r3
 80035ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035fc:	4642      	mov	r2, r8
 80035fe:	464b      	mov	r3, r9
 8003600:	1891      	adds	r1, r2, r2
 8003602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003604:	415b      	adcs	r3, r3
 8003606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800360c:	4641      	mov	r1, r8
 800360e:	1851      	adds	r1, r2, r1
 8003610:	6339      	str	r1, [r7, #48]	@ 0x30
 8003612:	4649      	mov	r1, r9
 8003614:	414b      	adcs	r3, r1
 8003616:	637b      	str	r3, [r7, #52]	@ 0x34
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003624:	4659      	mov	r1, fp
 8003626:	00cb      	lsls	r3, r1, #3
 8003628:	4651      	mov	r1, sl
 800362a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362e:	4651      	mov	r1, sl
 8003630:	00ca      	lsls	r2, r1, #3
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	4603      	mov	r3, r0
 8003638:	4642      	mov	r2, r8
 800363a:	189b      	adds	r3, r3, r2
 800363c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003640:	464b      	mov	r3, r9
 8003642:	460a      	mov	r2, r1
 8003644:	eb42 0303 	adc.w	r3, r2, r3
 8003648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003658:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800365c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003660:	460b      	mov	r3, r1
 8003662:	18db      	adds	r3, r3, r3
 8003664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003666:	4613      	mov	r3, r2
 8003668:	eb42 0303 	adc.w	r3, r2, r3
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800366e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003672:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003676:	f7fd faaf 	bl	8000bd8 <__aeabi_uldivmod>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4b0d      	ldr	r3, [pc, #52]	@ (80036b4 <UART_SetConfig+0x2d4>)
 8003680:	fba3 1302 	umull	r1, r3, r3, r2
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	2164      	movs	r1, #100	@ 0x64
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	3332      	adds	r3, #50	@ 0x32
 8003692:	4a08      	ldr	r2, [pc, #32]	@ (80036b4 <UART_SetConfig+0x2d4>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	f003 0207 	and.w	r2, r3, #7
 800369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4422      	add	r2, r4
 80036a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036a8:	e106      	b.n	80038b8 <UART_SetConfig+0x4d8>
 80036aa:	bf00      	nop
 80036ac:	40011000 	.word	0x40011000
 80036b0:	40011400 	.word	0x40011400
 80036b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036bc:	2200      	movs	r2, #0
 80036be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036ca:	4642      	mov	r2, r8
 80036cc:	464b      	mov	r3, r9
 80036ce:	1891      	adds	r1, r2, r2
 80036d0:	6239      	str	r1, [r7, #32]
 80036d2:	415b      	adcs	r3, r3
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036da:	4641      	mov	r1, r8
 80036dc:	1854      	adds	r4, r2, r1
 80036de:	4649      	mov	r1, r9
 80036e0:	eb43 0501 	adc.w	r5, r3, r1
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	00eb      	lsls	r3, r5, #3
 80036ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f2:	00e2      	lsls	r2, r4, #3
 80036f4:	4614      	mov	r4, r2
 80036f6:	461d      	mov	r5, r3
 80036f8:	4643      	mov	r3, r8
 80036fa:	18e3      	adds	r3, r4, r3
 80036fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003700:	464b      	mov	r3, r9
 8003702:	eb45 0303 	adc.w	r3, r5, r3
 8003706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003726:	4629      	mov	r1, r5
 8003728:	008b      	lsls	r3, r1, #2
 800372a:	4621      	mov	r1, r4
 800372c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003730:	4621      	mov	r1, r4
 8003732:	008a      	lsls	r2, r1, #2
 8003734:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003738:	f7fd fa4e 	bl	8000bd8 <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4b60      	ldr	r3, [pc, #384]	@ (80038c4 <UART_SetConfig+0x4e4>)
 8003742:	fba3 2302 	umull	r2, r3, r3, r2
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	011c      	lsls	r4, r3, #4
 800374a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800374e:	2200      	movs	r2, #0
 8003750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003754:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003758:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800375c:	4642      	mov	r2, r8
 800375e:	464b      	mov	r3, r9
 8003760:	1891      	adds	r1, r2, r2
 8003762:	61b9      	str	r1, [r7, #24]
 8003764:	415b      	adcs	r3, r3
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800376c:	4641      	mov	r1, r8
 800376e:	1851      	adds	r1, r2, r1
 8003770:	6139      	str	r1, [r7, #16]
 8003772:	4649      	mov	r1, r9
 8003774:	414b      	adcs	r3, r1
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003784:	4659      	mov	r1, fp
 8003786:	00cb      	lsls	r3, r1, #3
 8003788:	4651      	mov	r1, sl
 800378a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800378e:	4651      	mov	r1, sl
 8003790:	00ca      	lsls	r2, r1, #3
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	4603      	mov	r3, r0
 8003798:	4642      	mov	r2, r8
 800379a:	189b      	adds	r3, r3, r2
 800379c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037a0:	464b      	mov	r3, r9
 80037a2:	460a      	mov	r2, r1
 80037a4:	eb42 0303 	adc.w	r3, r2, r3
 80037a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037c4:	4649      	mov	r1, r9
 80037c6:	008b      	lsls	r3, r1, #2
 80037c8:	4641      	mov	r1, r8
 80037ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ce:	4641      	mov	r1, r8
 80037d0:	008a      	lsls	r2, r1, #2
 80037d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037d6:	f7fd f9ff 	bl	8000bd8 <__aeabi_uldivmod>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	4b38      	ldr	r3, [pc, #224]	@ (80038c4 <UART_SetConfig+0x4e4>)
 80037e2:	fba3 2301 	umull	r2, r3, r3, r1
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2264      	movs	r2, #100	@ 0x64
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	1acb      	subs	r3, r1, r3
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	3332      	adds	r3, #50	@ 0x32
 80037f4:	4a33      	ldr	r2, [pc, #204]	@ (80038c4 <UART_SetConfig+0x4e4>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003800:	441c      	add	r4, r3
 8003802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003806:	2200      	movs	r2, #0
 8003808:	673b      	str	r3, [r7, #112]	@ 0x70
 800380a:	677a      	str	r2, [r7, #116]	@ 0x74
 800380c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	1891      	adds	r1, r2, r2
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	415b      	adcs	r3, r3
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003820:	4641      	mov	r1, r8
 8003822:	1851      	adds	r1, r2, r1
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	4649      	mov	r1, r9
 8003828:	414b      	adcs	r3, r1
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003838:	4659      	mov	r1, fp
 800383a:	00cb      	lsls	r3, r1, #3
 800383c:	4651      	mov	r1, sl
 800383e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003842:	4651      	mov	r1, sl
 8003844:	00ca      	lsls	r2, r1, #3
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	4603      	mov	r3, r0
 800384c:	4642      	mov	r2, r8
 800384e:	189b      	adds	r3, r3, r2
 8003850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003852:	464b      	mov	r3, r9
 8003854:	460a      	mov	r2, r1
 8003856:	eb42 0303 	adc.w	r3, r2, r3
 800385a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	663b      	str	r3, [r7, #96]	@ 0x60
 8003866:	667a      	str	r2, [r7, #100]	@ 0x64
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003874:	4649      	mov	r1, r9
 8003876:	008b      	lsls	r3, r1, #2
 8003878:	4641      	mov	r1, r8
 800387a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800387e:	4641      	mov	r1, r8
 8003880:	008a      	lsls	r2, r1, #2
 8003882:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003886:	f7fd f9a7 	bl	8000bd8 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <UART_SetConfig+0x4e4>)
 8003890:	fba3 1302 	umull	r1, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	2164      	movs	r1, #100	@ 0x64
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	3332      	adds	r3, #50	@ 0x32
 80038a2:	4a08      	ldr	r2, [pc, #32]	@ (80038c4 <UART_SetConfig+0x4e4>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	f003 020f 	and.w	r2, r3, #15
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4422      	add	r2, r4
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038be:	46bd      	mov	sp, r7
 80038c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c4:	51eb851f 	.word	0x51eb851f

080038c8 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  int32_t DimensionsCount() const { return size_; }
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	da01      	bge.n	800390a <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8003906:	f00a f959 	bl	800dbbc <abort>
    TFLITE_DCHECK_LT(i, size_);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	db01      	blt.n	8003918 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8003914:	f00a f952 	bl	800dbbc <abort>
    return dims_[i];
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	685b      	ldr	r3, [r3, #4]
  }
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <_ZNK6tflite12RuntimeShape8DimsDataEv>:
                                    const RuntimeShape& shape) {
    TFLITE_DCHECK_LE(new_shape_size, kMaxSmallSize);
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
  const int32_t* DimsData() const { return dims_; }
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ffeb 	bl	800392a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8003954:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e00b      	b.n	8003974 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	3301      	adds	r3, #1
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	429a      	cmp	r2, r3
 800397c:	dbee      	blt.n	800395c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 800397e:	697b      	ldr	r3, [r7, #20]
  }
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:

 private:
  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 80039ae:	f00a f905 	bl	800dbbc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x12>
 80039cc:	f00a f8f6 	bl	800dbbc <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f805 	bl	80039f8 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
    return t;
 8003a02:	79fb      	ldrb	r3, [r7, #7]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f831 	bl	8003a86 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8003a24:	4603      	mov	r3, r0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 8003a38:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	ee07 3a90 	vmov	s15, r3
}
 8003a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x12>
 8003a76:	f00a f8a1 	bl	800dbbc <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	71fb      	strb	r3, [r7, #7]
    return t;
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8003aae:	f00a f885 	bl	800dbbc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <_ZN6tflite13ErrorReporter6ReportEPKcz>:

#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8003abe:	b40e      	push	{r1, r2, r3}
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8003ac8:	f107 0320 	add.w	r3, r7, #32
 8003acc:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	69f9      	ldr	r1, [r7, #28]
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
 8003ade:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003aec:	b003      	add	sp, #12
 8003aee:	4770      	bx	lr

08003af0 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8003af0:	b40c      	push	{r2, r3}
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8003afc:	f107 031c 	add.w	r3, r7, #28
 8003b00:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3308      	adds	r3, #8
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	69b9      	ldr	r1, [r7, #24]
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
 8003b12:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003b14:	68fb      	ldr	r3, [r7, #12]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b20:	b002      	add	sp, #8
 8003b22:	4770      	bx	lr

08003b24 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2104      	movs	r1, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f853 	bl	8003bde <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003b38:	4603      	mov	r3, r0
  }
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	210a      	movs	r1, #10
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f826 	bl	8003ba2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003b56:	4603      	mov	r3, r0
  }
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 8003b6e:	f00a f825 	bl	800dbbc <abort>

  return std::max(
      op_code->builtin_code(),
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ffe5 	bl	8003b42 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	60bb      	str	r3, [r7, #8]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ffd1 	bl	8003b24 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 8003b82:	4603      	mov	r3, r0
 8003b84:	60fb      	str	r3, [r7, #12]
  return std::max(
 8003b86:	f107 020c 	add.w	r2, r7, #12
 8003b8a:	f107 0308 	add.w	r3, r7, #8
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 f844 	bl	8003c1e <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 8003b96:	4603      	mov	r3, r0
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 8003b98:	681b      	ldr	r3, [r3, #0]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	460b      	mov	r3, r1
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8003bb0:	897b      	ldrh	r3, [r7, #10]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7fd fa67 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003bbe:	8afb      	ldrh	r3, [r7, #22]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	8afb      	ldrh	r3, [r7, #22]
 8003bc8:	4413      	add	r3, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd fde3 	bl	8001796 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	e000      	b.n	8003bd6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8003bd4:	687b      	ldr	r3, [r7, #4]
  }
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	807b      	strh	r3, [r7, #2]
 8003bea:	4613      	mov	r3, r2
 8003bec:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8003bee:	887b      	ldrh	r3, [r7, #2]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd fa48 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003bfc:	89fb      	ldrh	r3, [r7, #14]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	4413      	add	r3, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff01 	bl	8003a10 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	e001      	b.n	8003c16 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8003c12:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	da01      	bge.n	8003c38 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	e000      	b.n	8003c3a <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 8003c38:	687b      	ldr	r3, [r7, #4]
    }
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <_ZNK11flatbuffers6String5c_strEv>:
#include "flatbuffers/vector.h"

namespace flatbuffers {

struct String : public Vector<char> {
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 faed 	bl	8004248 <_ZNK11flatbuffers6VectorIcmE4DataEv>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	2104      	movs	r1, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ffa9 	bl	8003bde <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003c8c:	4603      	mov	r3, r0
  }
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2106      	movs	r1, #6
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff9a 	bl	8003bde <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003caa:	4603      	mov	r3, r0
  }
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2108      	movs	r1, #8
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fafc 	bl	80042c0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
  }
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	210a      	movs	r1, #10
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fae8 	bl	80042c0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bf14      	ite	ne
 8003cf6:	2301      	movne	r3, #1
 8003cf8:	2300      	moveq	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
  }
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <_ZNK6tflite21FullyConnectedOptions19quantized_bias_typeEv>:
  tflite::TensorType quantized_bias_type() const {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_QUANTIZED_BIAS_TYPE, 0));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	210c      	movs	r1, #12
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff63 	bl	8003bde <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003d18:	4603      	mov	r3, r0
  }
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_ZNK6tflite9IfOptions19then_subgraph_indexEv>:
  int32_t then_subgraph_index() const {
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_THEN_SUBGRAPH_INDEX, 0);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2104      	movs	r1, #4
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff36 	bl	8003ba2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d36:	4603      	mov	r3, r0
  }
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_ZNK6tflite9IfOptions19else_subgraph_indexEv>:
  int32_t else_subgraph_index() const {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_ELSE_SUBGRAPH_INDEX, 0);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2106      	movs	r1, #6
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff27 	bl	8003ba2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d54:	4603      	mov	r3, r0
  }
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_ZNK6tflite15CallOnceOptions19init_subgraph_indexEv>:
  int32_t init_subgraph_index() const {
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_INIT_SUBGRAPH_INDEX, 0);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff18 	bl	8003ba2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d72:	4603      	mov	r3, r0
  }
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZNK6tflite12WhileOptions19cond_subgraph_indexEv>:
  int32_t cond_subgraph_index() const {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	2104      	movs	r1, #4
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff09 	bl	8003ba2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d90:	4603      	mov	r3, r0
  }
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <_ZNK6tflite12WhileOptions19body_subgraph_indexEv>:
  int32_t body_subgraph_index() const {
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2106      	movs	r1, #6
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fefa 	bl	8003ba2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003dae:	4603      	mov	r3, r0
  }
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	210a      	movs	r1, #10
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fa7a 	bl	80042c0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003dcc:	4603      	mov	r3, r0
  }
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	210c      	movs	r1, #12
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fa8b 	bl	80042fe <_ZNK11flatbuffers5Table10GetPointerIPKvmEET_t>
 8003de8:	4603      	mov	r3, r0
  }
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ffdc 	bl	8003db8 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d104      	bne.n	8003e10 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ffe5 	bl	8003dd6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	e000      	b.n	8003e12 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8003e10:	2300      	movs	r3, #0
  }
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv>:
  const tflite::IfOptions *builtin_options_as_IfOptions() const {
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ffc8 	bl	8003db8 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b5c      	cmp	r3, #92	@ 0x5c
 8003e2c:	d104      	bne.n	8003e38 <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv+0x1e>
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ffd1 	bl	8003dd6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003e34:	4603      	mov	r3, r0
 8003e36:	e000      	b.n	8003e3a <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv+0x20>
 8003e38:	2300      	movs	r3, #0
  }
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv>:
  const tflite::WhileOptions *builtin_options_as_WhileOptions() const {
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ffb4 	bl	8003db8 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b5d      	cmp	r3, #93	@ 0x5d
 8003e54:	d104      	bne.n	8003e60 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv+0x1e>
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ffbd 	bl	8003dd6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	e000      	b.n	8003e62 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv+0x20>
 8003e60:	2300      	movs	r3, #0
  }
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_ZNK6tflite8Operator34builtin_options_as_CallOnceOptionsEv>:
  const tflite::CallOnceOptions *builtin_options_as_CallOnceOptions() const {
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_CallOnceOptions ? static_cast<const tflite::CallOnceOptions *>(builtin_options()) : nullptr;
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffa0 	bl	8003db8 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b67      	cmp	r3, #103	@ 0x67
 8003e7c:	d104      	bne.n	8003e88 <_ZNK6tflite8Operator34builtin_options_as_CallOnceOptionsEv+0x1e>
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ffa9 	bl	8003dd6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003e84:	4603      	mov	r3, r0
 8003e86:	e000      	b.n	8003e8a <_ZNK6tflite8Operator34builtin_options_as_CallOnceOptionsEv+0x20>
 8003e88:	2300      	movs	r3, #0
  }
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4798      	blx	r3
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8003f08:	f009 fe58 	bl	800dbbc <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8003f12:	f009 fe53 	bl	800dbbc <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8003f1c:	f009 fe4e 	bl	800dbbc <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8003f26:	f009 fe49 	bl	800dbbc <abort>
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d81a      	bhi.n	8003f7c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8003f46:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f65 	.word	0x08003f65
 8003f50:	08003f69 	.word	0x08003f69
 8003f54:	08003f6d 	.word	0x08003f6d
 8003f58:	08003f71 	.word	0x08003f71
 8003f5c:	08003f75 	.word	0x08003f75
 8003f60:	08003f79 	.word	0x08003f79
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e00a      	b.n	8003f7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e008      	b.n	8003f7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e006      	b.n	8003f7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e004      	b.n	8003f7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8003f74:	2304      	movs	r3, #4
 8003f76:	e002      	b.n	8003f7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8003f78:	2305      	movs	r3, #5
 8003f7a:	e000      	b.n	8003f7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop

08003f8c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8003f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9e:	2b12      	cmp	r3, #18
 8003fa0:	f200 8089 	bhi.w	80040b6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x12a>
 8003fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x20>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	0800400d 	.word	0x0800400d
 8003fb0:	08003ff9 	.word	0x08003ff9
 8003fb4:	08004035 	.word	0x08004035
 8003fb8:	08004049 	.word	0x08004049
 8003fbc:	0800405d 	.word	0x0800405d
 8003fc0:	08004071 	.word	0x08004071
 8003fc4:	0800407b 	.word	0x0800407b
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004085 	.word	0x08004085
 8003fd0:	08004053 	.word	0x08004053
 8003fd4:	08004017 	.word	0x08004017
 8003fd8:	0800408f 	.word	0x0800408f
 8003fdc:	08004067 	.word	0x08004067
 8003fe0:	08004099 	.word	0x08004099
 8003fe4:	080040a3 	.word	0x080040a3
 8003fe8:	0800403f 	.word	0x0800403f
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	080040ad 	.word	0x080040ad
 8003ff4:	08004003 	.word	0x08004003
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	220a      	movs	r2, #10
 8003ffc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e064      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_BFLOAT16:
      *type = kTfLiteBFloat16;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2213      	movs	r2, #19
 8004006:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004008:	2300      	movs	r3, #0
 800400a:	e05f      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004012:	2300      	movs	r3, #0
 8004014:	e05a      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	220b      	movs	r2, #11
 800401a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800401c:	2300      	movs	r3, #0
 800401e:	e055      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2207      	movs	r2, #7
 8004024:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004026:	2300      	movs	r3, #0
 8004028:	e050      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_UINT16:
      *type = kTfLiteUInt16;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2211      	movs	r2, #17
 800402e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004030:	2300      	movs	r3, #0
 8004032:	e04b      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800403a:	2300      	movs	r3, #0
 800403c:	e046      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2210      	movs	r2, #16
 8004042:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004044:	2300      	movs	r3, #0
 8004046:	e041      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2203      	movs	r2, #3
 800404c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800404e:	2300      	movs	r3, #0
 8004050:	e03c      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2209      	movs	r2, #9
 8004056:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004058:	2300      	movs	r3, #0
 800405a:	e037      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2204      	movs	r2, #4
 8004060:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004062:	2300      	movs	r3, #0
 8004064:	e032      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	220d      	movs	r2, #13
 800406a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800406c:	2300      	movs	r3, #0
 800406e:	e02d      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_STRING:
      *type = kTfLiteString;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2205      	movs	r2, #5
 8004074:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004076:	2300      	movs	r3, #0
 8004078:	e028      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2206      	movs	r2, #6
 800407e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004080:	2300      	movs	r3, #0
 8004082:	e023      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2208      	movs	r2, #8
 8004088:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800408a:	2300      	movs	r3, #0
 800408c:	e01e      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	220c      	movs	r2, #12
 8004092:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004094:	2300      	movs	r3, #0
 8004096:	e019      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	220e      	movs	r2, #14
 800409c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800409e:	2300      	movs	r3, #0
 80040a0:	e014      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	220f      	movs	r2, #15
 80040a6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e00f      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT4:
      *type = kTfLiteInt4;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2212      	movs	r2, #18
 80040b0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e00a      	b.n	80040cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    default:
      *type = kTfLiteNoType;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80040bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c0:	461a      	mov	r2, r3
 80040c2:	4904      	ldr	r1, [pc, #16]	@ (80040d4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x148>)
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fcfa 	bl	8003abe <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 80040ca:	2301      	movs	r3, #1
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	08010d5c 	.word	0x08010d5c

080040d8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 80040d8:	b5b0      	push	{r4, r5, r7, lr}
 80040da:	b08c      	sub	sp, #48	@ 0x30
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff ff01 	bl	8003ef4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80040f2:	f107 031c 	add.w	r3, r7, #28
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff feec 	bl	8003ed6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	f107 021c 	add.w	r2, r7, #28
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f9af 	bl	800446c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800410e:	f107 0314 	add.w	r3, r7, #20
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f000 f9e9 	bl	80044ec <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800411a:	4603      	mov	r3, r0
 800411c:	f083 0301 	eor.w	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00c      	beq.n	8004140 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004126:	4b44      	ldr	r3, [pc, #272]	@ (8004238 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x160>)
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4b42      	ldr	r3, [pc, #264]	@ (800423c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x164>)
 8004132:	4a43      	ldr	r2, [pc, #268]	@ (8004240 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>)
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	68b8      	ldr	r0, [r7, #8]
 8004138:	f7ff fcda 	bl	8003af0 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800413c:	2401      	movs	r4, #1
 800413e:	e071      	b.n	8004224 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7ff fe56 	bl	8003df2 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8004146:	6278      	str	r0, [r7, #36]	@ 0x24

  if (schema_params != nullptr) {
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	d061      	beq.n	8004212 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13a>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800414e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004150:	f7ff fd92 	bl	8003c78 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 8004154:	4603      	mov	r3, r0
 8004156:	461d      	mov	r5, r3
    params->activation =
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f9d2 	bl	8004506 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004162:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8004164:	4628      	mov	r0, r5
 8004166:	f7ff fee5 	bl	8003f34 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800416a:	4603      	mov	r3, r0
    params->activation =
 800416c:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 800416e:	f107 0314 	add.w	r3, r7, #20
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f9c7 	bl	8004506 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004178:	4604      	mov	r4, r0
 800417a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800417c:	f7ff fd9a 	bl	8003cb4 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8004180:	4603      	mov	r3, r0
 8004182:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8004184:	f107 0314 	add.w	r3, r7, #20
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f9bc 	bl	8004506 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800418e:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8004190:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004192:	f7ff fda3 	bl	8003cdc <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 8004196:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 8004198:	70e3      	strb	r3, [r4, #3]
    TF_LITE_ENSURE_STATUS(
 800419a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800419c:	f7ff fdb2 	bl	8003d04 <_ZNK6tflite21FullyConnectedOptions19quantized_bias_typeEv>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461c      	mov	r4, r3
 80041a4:	f107 0314 	add.w	r3, r7, #20
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 f9ac 	bl	8004506 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80041ae:	4603      	mov	r3, r0
 80041b0:	3304      	adds	r3, #4
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4620      	mov	r0, r4
 80041b8:	f7ff fee8 	bl	8003f8c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
 80041ca:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 80041ce:	e029      	b.n	8004224 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
        ConvertTensorType(schema_params->quantized_bias_type(),
                          &params->quantized_bias_type, error_reporter));
    switch (schema_params->weights_format()) {
 80041d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80041d2:	f7ff fd60 	bl	8003c96 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10a>
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d009      	beq.n	80041f4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
 80041e0:	e011      	b.n	8004206 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12e>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 80041e2:	f107 0314 	add.w	r3, r7, #20
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f98d 	bl	8004506 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2200      	movs	r2, #0
 80041f0:	705a      	strb	r2, [r3, #1]
        break;
 80041f2:	e00e      	b.n	8004212 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13a>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 f984 	bl	8004506 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80041fe:	4603      	mov	r3, r0
 8004200:	2201      	movs	r2, #1
 8004202:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8004204:	e005      	b.n	8004212 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13a>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8004206:	490f      	ldr	r1, [pc, #60]	@ (8004244 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x16c>)
 8004208:	68b8      	ldr	r0, [r7, #8]
 800420a:	f7ff fc58 	bl	8003abe <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 800420e:	2401      	movs	r4, #1
 8004210:	e008      	b.n	8004224 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f981 	bl	800451e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800421c:	4602      	mov	r2, r0
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004222:	2400      	movs	r4, #0
}
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	4618      	mov	r0, r3
 800422a:	f000 f93d 	bl	80044a8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800422e:	4623      	mov	r3, r4
 8004230:	4618      	mov	r0, r3
 8004232:	3728      	adds	r7, #40	@ 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	bdb0      	pop	{r4, r5, r7, pc}
 8004238:	08010ca4 	.word	0x08010ca4
 800423c:	08010c44 	.word	0x08010c44
 8004240:	08010c8c 	.word	0x08010c8c
 8004244:	08010d80 	.word	0x08010d80

08004248 <_ZNK11flatbuffers6VectorIcmE4DataEv>:
    FLATBUFFERS_ASSERT(i < size());
    return const_cast<mutable_return_type>(IndirectHelper<T>::Read(Data(), i));
  }

  // The raw data in little endian format. Use with care.
  const uint8_t *Data() const {
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
  }
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>:
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
                        : nullptr;
  }
  template<typename P, typename OffsetSize = uoffset_t>
  P GetPointer(voffset_t field) const {
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 800426c:	887b      	ldrh	r3, [r7, #2]
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f96d 	bl	8004550 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>
 8004276:	4603      	mov	r3, r0
  }
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f97d 	bl	8004590 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t>
 8004296:	4603      	mov	r3, r0
  }
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f98d 	bl	80045d0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t>
 80042b6:	4603      	mov	r3, r0
  }
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	807b      	strh	r3, [r7, #2]
 80042cc:	4613      	mov	r3, r2
 80042ce:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7fc fed7 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80042da:	4603      	mov	r3, r0
 80042dc:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80042de:	89fb      	ldrh	r3, [r7, #14]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	89fb      	ldrh	r3, [r7, #14]
 80042e8:	4413      	add	r3, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fb76 	bl	80039dc <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 80042f0:	4603      	mov	r3, r0
 80042f2:	e000      	b.n	80042f6 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 80042f4:	787b      	ldrb	r3, [r7, #1]
  }
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_ZNK11flatbuffers5Table10GetPointerIPKvmEET_t>:
  P GetPointer(voffset_t field) const {
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 800430a:	887b      	ldrh	r3, [r7, #2]
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f97e 	bl	8004610 <_ZN11flatbuffers5Table10GetPointerIPKvmEET_t>
 8004314:	4603      	mov	r3, r0
  }
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 800432a:	887b      	ldrh	r3, [r7, #2]
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f98e 	bl	8004650 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8004334:	4603      	mov	r3, r0
  }
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>:
  P GetPointer(voffset_t field) const {
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	4619      	mov	r1, r3
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f99e 	bl	8004690 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>
 8004354:	4603      	mov	r3, r0
  }
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <_ZNK11flatbuffers6VectorIhmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd fa08 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8004370:	4603      	mov	r3, r0
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <_ZNK11flatbuffers6VectorIfmE4sizeEv>:
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd f9fa 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800438c:	4603      	mov	r3, r0
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <_ZNK11flatbuffers6VectorIxmE4sizeEv>:
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd f9ec 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80043a8:	4603      	mov	r3, r0
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <_ZNK11flatbuffers6VectorIxmE3GetEm>:
  return_type Get(SizeT i) const {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ffe9 	bl	8004396 <_ZNK11flatbuffers6VectorIxmE4sizeEv>
 80043c4:	4602      	mov	r2, r0
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d305      	bcc.n	80043d8 <_ZNK11flatbuffers6VectorIxmE3GetEm+0x24>
 80043cc:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <_ZNK11flatbuffers6VectorIxmE3GetEm+0x44>)
 80043ce:	4a0b      	ldr	r2, [pc, #44]	@ (80043fc <_ZNK11flatbuffers6VectorIxmE3GetEm+0x48>)
 80043d0:	21b0      	movs	r1, #176	@ 0xb0
 80043d2:	480b      	ldr	r0, [pc, #44]	@ (8004400 <_ZNK11flatbuffers6VectorIxmE3GetEm+0x4c>)
 80043d4:	f009 fbfa 	bl	800dbcc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f991 	bl	8004700 <_ZNK11flatbuffers6VectorIxmE4DataEv>
 80043de:	4603      	mov	r3, r0
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f998 	bl	8004718 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhj>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
  }
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	0801110c 	.word	0x0801110c
 80043fc:	08011118 	.word	0x08011118
 8004400:	080111c4 	.word	0x080111c4

08004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7fd f9b5 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8004416:	4603      	mov	r3, r0
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>:
  return_type Get(SizeT i) const {
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ffea 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8004430:	4602      	mov	r2, r0
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	4293      	cmp	r3, r2
 8004436:	d305      	bcc.n	8004444 <_ZNK11flatbuffers6VectorIlmE3GetEm+0x24>
 8004438:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <_ZNK11flatbuffers6VectorIlmE3GetEm+0x40>)
 800443a:	4a0a      	ldr	r2, [pc, #40]	@ (8004464 <_ZNK11flatbuffers6VectorIlmE3GetEm+0x44>)
 800443c:	21b0      	movs	r1, #176	@ 0xb0
 800443e:	480a      	ldr	r0, [pc, #40]	@ (8004468 <_ZNK11flatbuffers6VectorIlmE3GetEm+0x48>)
 8004440:	f009 fbc4 	bl	800dbcc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f97d 	bl	8004744 <_ZNK11flatbuffers6VectorIlmE4DataEv>
 800444a:	4603      	mov	r3, r0
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f984 	bl	800475c <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhj>
 8004454:	4603      	mov	r3, r0
  }
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	0801110c 	.word	0x0801110c
 8004464:	0801127c 	.word	0x0801127c
 8004468:	080111c4 	.word	0x080111c4

0800446c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f980 	bl	8004780 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8004480:	4604      	mov	r4, r0
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f107 030c 	add.w	r3, r7, #12
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fd00 	bl	8003e92 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004492:	f107 030c 	add.w	r3, r7, #12
 8004496:	461a      	mov	r2, r3
 8004498:	4621      	mov	r1, r4
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f99c 	bl	80047d8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd90      	pop	{r4, r7, pc}

080044a8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:

      /// Destructor, invokes the deleter if the stored pointer is not null.
#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~unique_ptr() noexcept
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f9a5 	bl	8004802 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80044b8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f9aa 	bl	800481c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80044c8:	4604      	mov	r4, r0
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f9b3 	bl	8004836 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80044d0:	4603      	mov	r3, r0
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4619      	mov	r1, r3
 80044d6:	4620      	mov	r0, r4
 80044d8:	f7ff fcea 	bl	8003eb0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
      }
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd90      	pop	{r4, r7, pc}

080044ec <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:

  /// unique_ptr comparison with nullptr
  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9a8 	bl	800484c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
	return get();
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9ad 	bl	800486e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004514:	4603      	mov	r3, r0
      }
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f9ad 	bl	8004888 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800452e:	4603      	mov	r3, r0
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <_ZNK11flatbuffers6VectorIhmE4dataEv>:

  uint8_t *Data() { return reinterpret_cast<uint8_t *>(&length_ + 1); }

  // Similarly, but typed, much like std::vector::data
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8c5 	bl	80046d0 <_ZNK11flatbuffers6VectorIhmE4DataEv>
 8004546:	4603      	mov	r3, r0
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>:
  P GetPointer(voffset_t field) {
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fc fd91 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004566:	4603      	mov	r3, r0
 8004568:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	89fb      	ldrh	r3, [r7, #14]
 800456e:	4413      	add	r3, r2
 8004570:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004572:	89fb      	ldrh	r3, [r7, #14]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d006      	beq.n	8004586 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t+0x36>
 8004578:	68b8      	ldr	r0, [r7, #8]
 800457a:	f7fd f928 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800457e:	4602      	mov	r2, r0
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4413      	add	r3, r2
                        : nullptr;
 8004584:	e000      	b.n	8004588 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004586:	2300      	movs	r3, #0
  }
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t>:
  P GetPointer(voffset_t field) {
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800459c:	887b      	ldrh	r3, [r7, #2]
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7fc fd71 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80045a6:	4603      	mov	r3, r0
 80045a8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	89fb      	ldrh	r3, [r7, #14]
 80045ae:	4413      	add	r3, r2
 80045b0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80045b2:	89fb      	ldrh	r3, [r7, #14]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t+0x36>
 80045b8:	68b8      	ldr	r0, [r7, #8]
 80045ba:	f7fd f908 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80045be:	4602      	mov	r2, r0
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4413      	add	r3, r2
                        : nullptr;
 80045c4:	e000      	b.n	80045c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80045c6:	2300      	movs	r3, #0
  }
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t>:
  P GetPointer(voffset_t field) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80045dc:	887b      	ldrh	r3, [r7, #2]
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fc fd51 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80045e6:	4603      	mov	r3, r0
 80045e8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	89fb      	ldrh	r3, [r7, #14]
 80045ee:	4413      	add	r3, r2
 80045f0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80045f2:	89fb      	ldrh	r3, [r7, #14]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d006      	beq.n	8004606 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t+0x36>
 80045f8:	68b8      	ldr	r0, [r7, #8]
 80045fa:	f7fd f8e8 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4413      	add	r3, r2
                        : nullptr;
 8004604:	e000      	b.n	8004608 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004606:	2300      	movs	r3, #0
  }
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZN11flatbuffers5Table10GetPointerIPKvmEET_t>:
  P GetPointer(voffset_t field) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	4619      	mov	r1, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7fc fd31 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004626:	4603      	mov	r3, r0
 8004628:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	89fb      	ldrh	r3, [r7, #14]
 800462e:	4413      	add	r3, r2
 8004630:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004632:	89fb      	ldrh	r3, [r7, #14]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <_ZN11flatbuffers5Table10GetPointerIPKvmEET_t+0x36>
 8004638:	68b8      	ldr	r0, [r7, #8]
 800463a:	f7fd f8c8 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4413      	add	r3, r2
                        : nullptr;
 8004644:	e000      	b.n	8004648 <_ZN11flatbuffers5Table10GetPointerIPKvmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004646:	2300      	movs	r3, #0
  }
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>:
  P GetPointer(voffset_t field) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800465c:	887b      	ldrh	r3, [r7, #2]
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fc fd11 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004666:	4603      	mov	r3, r0
 8004668:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	4413      	add	r3, r2
 8004670:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004672:	89fb      	ldrh	r3, [r7, #14]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d006      	beq.n	8004686 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t+0x36>
 8004678:	68b8      	ldr	r0, [r7, #8]
 800467a:	f7fd f8a8 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800467e:	4602      	mov	r2, r0
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4413      	add	r3, r2
                        : nullptr;
 8004684:	e000      	b.n	8004688 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004686:	2300      	movs	r3, #0
  }
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>:
  P GetPointer(voffset_t field) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800469c:	887b      	ldrh	r3, [r7, #2]
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7fc fcf1 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80046a6:	4603      	mov	r3, r0
 80046a8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	89fb      	ldrh	r3, [r7, #14]
 80046ae:	4413      	add	r3, r2
 80046b0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80046b2:	89fb      	ldrh	r3, [r7, #14]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d006      	beq.n	80046c6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t+0x36>
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	f7fd f888 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80046be:	4602      	mov	r2, r0
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4413      	add	r3, r2
                        : nullptr;
 80046c4:	e000      	b.n	80046c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80046c6:	2300      	movs	r3, #0
  }
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <_ZNK11flatbuffers6VectorIhmE4DataEv>:
  const uint8_t *Data() const {
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
  }
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <_ZNK11flatbuffers6VectorIfmE4DataEv>:
  const uint8_t *Data() const {
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
  }
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <_ZNK11flatbuffers6VectorIxmE4DataEv>:
  const uint8_t *Data() const {
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
  }
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhj>:
  static return_type Read(const uint8_t *p, const size_t i) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	4610      	mov	r0, r2
 8004730:	4619      	mov	r1, r3
 8004732:	f7ff f97c 	bl	8003a2e <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
  }
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <_ZNK11flatbuffers6VectorIlmE4DataEv>:
  const uint8_t *Data() const {
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
  }
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhj>:
  static return_type Read(const uint8_t *p, const size_t i) {
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fd f89f 	bl	80018b4 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8004776:	4603      	mov	r3, r0
  }
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    static_assert(std::is_trivially_destructible<T>::value,
                  "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	2105      	movs	r1, #5
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	4798      	blx	r3
 8004796:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4619      	mov	r1, r3
 800479c:	2005      	movs	r0, #5
 800479e:	f7ff fa52 	bl	8003c46 <_ZnwjPv>
 80047a2:	4601      	mov	r1, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	711a      	strb	r2, [r3, #4]
 80047ac:	460b      	mov	r3, r1
  }
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f87d 	bl	80048c8 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 80047e4:	68fc      	ldr	r4, [r7, #12]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f863 	bl	80048b2 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80047ec:	4603      	mov	r3, r0
 80047ee:	461a      	mov	r2, r3
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4620      	mov	r0, r4
 80047f4:	f7ff ffdf 	bl	80047b6 <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}

08004802 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f871 	bl	80048f4 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004812:	4603      	mov	r3, r0
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f871 	bl	800490e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800482c:	4603      	mov	r3, r0
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f80a 	bl	800486e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f855 	bl	8004928 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800487e:	4603      	mov	r3, r0
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ffb6 	bl	8004802 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004896:	4603      	mov	r3, r0
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ffb0 	bl	8004802 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
	return __p;
 80048a8:	68fb      	ldr	r3, [r7, #12]
      }
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80048d4:	68fc      	ldr	r4, [r7, #12]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f834 	bl	8004944 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80048dc:	4602      	mov	r2, r0
 80048de:	f107 0308 	add.w	r3, r7, #8
 80048e2:	4619      	mov	r1, r3
 80048e4:	4620      	mov	r0, r4
 80048e6:	f000 f838 	bl	800495a <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd90      	pop	{r4, r7, pc}

080048f4 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f844 	bl	800498c <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004904:	4603      	mov	r3, r0
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f843 	bl	80049a4 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800491e:	4603      	mov	r3, r0
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f843 	bl	80049be <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004938:	4603      	mov	r3, r0
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800495a:	b5b0      	push	{r4, r5, r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004966:	68fc      	ldr	r4, [r7, #12]
 8004968:	68b8      	ldr	r0, [r7, #8]
 800496a:	f000 f841 	bl	80049f0 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800496e:	4605      	mov	r5, r0
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ffe7 	bl	8004944 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004976:	4603      	mov	r3, r0
 8004978:	461a      	mov	r2, r3
 800497a:	4629      	mov	r1, r5
 800497c:	4620      	mov	r0, r4
 800497e:	f000 f842 	bl	8004a06 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bdb0      	pop	{r4, r5, r7, pc}

0800498c <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f854 	bl	8004a42 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800499a:	4603      	mov	r3, r0
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f812 	bl	80049d8 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80049b4:	4603      	mov	r3, r0
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f848 	bl	8004a5e <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f85b 	bl	8004a9c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004a06:	b590      	push	{r4, r7, lr}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8004a12:	68fc      	ldr	r4, [r7, #12]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff95 	bl	8004944 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 f829 	bl	8004a76 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1d1c      	adds	r4, r3, #4
 8004a28:	68b8      	ldr	r0, [r7, #8]
 8004a2a:	f7ff ffe1 	bl	80049f0 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4619      	mov	r1, r3
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 f83f 	bl	8004ab6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
	{ }
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd90      	pop	{r4, r7, pc}

08004a42 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f842 	bl	8004ad8 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8004a54:	4603      	mov	r3, r0
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f841 	bl	8004aee <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8004a76:	b590      	push	{r4, r7, lr}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8004a80:	687c      	ldr	r4, [r7, #4]
 8004a82:	6838      	ldr	r0, [r7, #0]
 8004a84:	f7ff ff5e 	bl	8004944 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 f83c 	bl	8004b0a <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
	{ }
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd90      	pop	{r4, r7, pc}

08004a9c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f840 	bl	8004b2c <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004ac0:	6838      	ldr	r0, [r7, #0]
 8004ac2:	f7ff ff95 	bl	80049f0 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f821 	bl	8004b42 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004b14:	6838      	ldr	r0, [r7, #0]
 8004b16:	f7ff ff15 	bl	8004944 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <TfLiteIntArrayGetSizeInBytes>:

#endif  // TF_LITE_STATIC_MEMORY

extern "C" {

size_t TfLiteIntArrayGetSizeInBytes(int size) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  return TfLiteVarArrayGetSizeInBytes<TfLiteIntArray>(size);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f893 	bl	8004c8c <_ZN12_GLOBAL__N_128TfLiteVarArrayGetSizeInBytesI14TfLiteIntArrayEEji>
 8004b66:	4603      	mov	r3, r0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <TfLiteTypeGetName>:
    return t->dims;
  }
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	2b13      	cmp	r3, #19
 8004b7e:	d853      	bhi.n	8004c28 <TfLiteTypeGetName+0xb8>
 8004b80:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <TfLiteTypeGetName+0x18>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004bd9 	.word	0x08004bd9
 8004b8c:	08004bdd 	.word	0x08004bdd
 8004b90:	08004be9 	.word	0x08004be9
 8004b94:	08004bf1 	.word	0x08004bf1
 8004b98:	08004bf9 	.word	0x08004bf9
 8004b9c:	08004c0d 	.word	0x08004c0d
 8004ba0:	08004c01 	.word	0x08004c01
 8004ba4:	08004be5 	.word	0x08004be5
 8004ba8:	08004c05 	.word	0x08004c05
 8004bac:	08004bf5 	.word	0x08004bf5
 8004bb0:	08004c11 	.word	0x08004c11
 8004bb4:	08004c19 	.word	0x08004c19
 8004bb8:	08004c09 	.word	0x08004c09
 8004bbc:	08004bfd 	.word	0x08004bfd
 8004bc0:	08004c1d 	.word	0x08004c1d
 8004bc4:	08004c21 	.word	0x08004c21
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004be1 	.word	0x08004be1
 8004bd0:	08004c25 	.word	0x08004c25
 8004bd4:	08004c15 	.word	0x08004c15
    case kTfLiteNoType:
      return "NOTYPE";
 8004bd8:	4b17      	ldr	r3, [pc, #92]	@ (8004c38 <TfLiteTypeGetName+0xc8>)
 8004bda:	e026      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteFloat32:
      return "FLOAT32";
 8004bdc:	4b17      	ldr	r3, [pc, #92]	@ (8004c3c <TfLiteTypeGetName+0xcc>)
 8004bde:	e024      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteUInt16:
      return "UINT16";
 8004be0:	4b17      	ldr	r3, [pc, #92]	@ (8004c40 <TfLiteTypeGetName+0xd0>)
 8004be2:	e022      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteInt16:
      return "INT16";
 8004be4:	4b17      	ldr	r3, [pc, #92]	@ (8004c44 <TfLiteTypeGetName+0xd4>)
 8004be6:	e020      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteInt32:
      return "INT32";
 8004be8:	4b17      	ldr	r3, [pc, #92]	@ (8004c48 <TfLiteTypeGetName+0xd8>)
 8004bea:	e01e      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteUInt32:
      return "UINT32";
 8004bec:	4b17      	ldr	r3, [pc, #92]	@ (8004c4c <TfLiteTypeGetName+0xdc>)
 8004bee:	e01c      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteUInt8:
      return "UINT8";
 8004bf0:	4b17      	ldr	r3, [pc, #92]	@ (8004c50 <TfLiteTypeGetName+0xe0>)
 8004bf2:	e01a      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteInt8:
      return "INT8";
 8004bf4:	4b17      	ldr	r3, [pc, #92]	@ (8004c54 <TfLiteTypeGetName+0xe4>)
 8004bf6:	e018      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteInt64:
      return "INT64";
 8004bf8:	4b17      	ldr	r3, [pc, #92]	@ (8004c58 <TfLiteTypeGetName+0xe8>)
 8004bfa:	e016      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteUInt64:
      return "UINT64";
 8004bfc:	4b17      	ldr	r3, [pc, #92]	@ (8004c5c <TfLiteTypeGetName+0xec>)
 8004bfe:	e014      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteBool:
      return "BOOL";
 8004c00:	4b17      	ldr	r3, [pc, #92]	@ (8004c60 <TfLiteTypeGetName+0xf0>)
 8004c02:	e012      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8004c04:	4b17      	ldr	r3, [pc, #92]	@ (8004c64 <TfLiteTypeGetName+0xf4>)
 8004c06:	e010      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8004c08:	4b17      	ldr	r3, [pc, #92]	@ (8004c68 <TfLiteTypeGetName+0xf8>)
 8004c0a:	e00e      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteString:
      return "STRING";
 8004c0c:	4b17      	ldr	r3, [pc, #92]	@ (8004c6c <TfLiteTypeGetName+0xfc>)
 8004c0e:	e00c      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteFloat16:
      return "FLOAT16";
 8004c10:	4b17      	ldr	r3, [pc, #92]	@ (8004c70 <TfLiteTypeGetName+0x100>)
 8004c12:	e00a      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteBFloat16:
      return "BFLOAT16";
 8004c14:	4b17      	ldr	r3, [pc, #92]	@ (8004c74 <TfLiteTypeGetName+0x104>)
 8004c16:	e008      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteFloat64:
      return "FLOAT64";
 8004c18:	4b17      	ldr	r3, [pc, #92]	@ (8004c78 <TfLiteTypeGetName+0x108>)
 8004c1a:	e006      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteResource:
      return "RESOURCE";
 8004c1c:	4b17      	ldr	r3, [pc, #92]	@ (8004c7c <TfLiteTypeGetName+0x10c>)
 8004c1e:	e004      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteVariant:
      return "VARIANT";
 8004c20:	4b17      	ldr	r3, [pc, #92]	@ (8004c80 <TfLiteTypeGetName+0x110>)
 8004c22:	e002      	b.n	8004c2a <TfLiteTypeGetName+0xba>
    case kTfLiteInt4:
      return "INT4";
 8004c24:	4b17      	ldr	r3, [pc, #92]	@ (8004c84 <TfLiteTypeGetName+0x114>)
 8004c26:	e000      	b.n	8004c2a <TfLiteTypeGetName+0xba>
  }
  return "Unknown type";
 8004c28:	4b17      	ldr	r3, [pc, #92]	@ (8004c88 <TfLiteTypeGetName+0x118>)
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	08011394 	.word	0x08011394
 8004c3c:	0801139c 	.word	0x0801139c
 8004c40:	080113a4 	.word	0x080113a4
 8004c44:	080113ac 	.word	0x080113ac
 8004c48:	080113b4 	.word	0x080113b4
 8004c4c:	080113bc 	.word	0x080113bc
 8004c50:	080113c4 	.word	0x080113c4
 8004c54:	080113cc 	.word	0x080113cc
 8004c58:	080113d4 	.word	0x080113d4
 8004c5c:	080113dc 	.word	0x080113dc
 8004c60:	080113e4 	.word	0x080113e4
 8004c64:	080113ec 	.word	0x080113ec
 8004c68:	080113f8 	.word	0x080113f8
 8004c6c:	08011404 	.word	0x08011404
 8004c70:	0801140c 	.word	0x0801140c
 8004c74:	08011414 	.word	0x08011414
 8004c78:	08011420 	.word	0x08011420
 8004c7c:	08011428 	.word	0x08011428
 8004c80:	08011434 	.word	0x08011434
 8004c84:	0801143c 	.word	0x0801143c
 8004c88:	08011444 	.word	0x08011444

08004c8c <_ZN12_GLOBAL__N_128TfLiteVarArrayGetSizeInBytesI14TfLiteIntArrayEEji>:
size_t TfLiteVarArrayGetSizeInBytes(const int size) {
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  constexpr size_t data_size = sizeof(std::declval<T>().data[0]);
 8004c94:	2304      	movs	r3, #4
 8004c96:	60fb      	str	r3, [r7, #12]
  size_t computed_size = sizeof(T) + data_size * size;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	60bb      	str	r3, [r7, #8]
  return computed_size;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <_ZNSt14numeric_limitsIlE3minEv>:
    struct numeric_limits<long>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8004cae:	b480      	push	{r7}
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8004cc8:	4618      	mov	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8004cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd8:	b092      	sub	sp, #72	@ 0x48
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	61f8      	str	r0, [r7, #28]
 8004cde:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d107      	bne.n	8004cf8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8004ce8:	f7ff ffe1 	bl	8004cae <_ZNSt14numeric_limitsIlE3minEv>
 8004cec:	4602      	mov	r2, r0
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  std::int64_t a_64(a);
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	17da      	asrs	r2, r3, #31
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	60fa      	str	r2, [r7, #12]
 8004d06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  std::int64_t b_64(b);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	17da      	asrs	r2, r3, #31
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d22:	fb03 f202 	mul.w	r2, r3, r2
 8004d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d34:	fba1 4502 	umull	r4, r5, r1, r2
 8004d38:	442b      	add	r3, r5
 8004d3a:	461d      	mov	r5, r3
 8004d3c:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 8004d40:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8004d44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	db02      	blt.n	8004d52 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8004d4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004d50:	e000      	b.n	8004d54 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8004d52:	4b1a      	ldr	r3, [pc, #104]	@ (8004dbc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	17da      	asrs	r2, r3, #31
 8004d5a:	4698      	mov	r8, r3
 8004d5c:	4691      	mov	r9, r2
 8004d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d62:	eb18 0102 	adds.w	r1, r8, r2
 8004d66:	6139      	str	r1, [r7, #16]
 8004d68:	eb49 0303 	adc.w	r3, r9, r3
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da07      	bge.n	8004d86 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8004d76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d7a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d7e:	f143 0b00 	adc.w	fp, r3, #0
 8004d82:	4652      	mov	r2, sl
 8004d84:	465b      	mov	r3, fp
 8004d86:	f04f 0000 	mov.w	r0, #0
 8004d8a:	f04f 0100 	mov.w	r1, #0
 8004d8e:	0fd0      	lsrs	r0, r2, #31
 8004d90:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8004d94:	17d9      	asrs	r1, r3, #31
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8004d9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8004da6:	f7ff ff8b 	bl	8004cc0 <_ZNSt14numeric_limitsIlE3maxEv>
 8004daa:	4603      	mov	r3, r0
 8004dac:	e000      	b.n	8004db0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8004dae:	6a3b      	ldr	r3, [r7, #32]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3748      	adds	r7, #72	@ 0x48
 8004db4:	46bd      	mov	sp, r7
 8004db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dba:	bf00      	nop
 8004dbc:	c0000001 	.word	0xc0000001

08004dc0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return static_cast<int32_t>(result);
}
// Double-rounding MultiplyByQuantizedMultiplier
#else
int32_t MultiplyByQuantizedMultiplier(int32_t x, int32_t quantized_multiplier,
                                      int shift) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004dd2:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	425b      	negs	r3, r3
 8004dd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ddc:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff73 	bl	8004cd4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8004dee:	4603      	mov	r3, r0
 8004df0:	6939      	ldr	r1, [r7, #16]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f8a2 	bl	8004f3c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8004df8:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>:

int32_t MultiplyByQuantizedMultiplier(int64_t x, int32_t quantized_multiplier,
                                      int shift) {
 8004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	b08d      	sub	sp, #52	@ 0x34
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004e10:	617a      	str	r2, [r7, #20]
 8004e12:	613b      	str	r3, [r7, #16]
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	da05      	bge.n	8004e26 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x22>
 8004e1a:	4b42      	ldr	r3, [pc, #264]	@ (8004f24 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x120>)
 8004e1c:	4a42      	ldr	r2, [pc, #264]	@ (8004f28 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 8004e1e:	2158      	movs	r1, #88	@ 0x58
 8004e20:	4842      	ldr	r0, [pc, #264]	@ (8004f2c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 8004e22:	f008 fed3 	bl	800dbcc <__assert_func>
  assert(shift >= -31 && shift < 8);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f113 0f1f 	cmn.w	r3, #31
 8004e2c:	db02      	blt.n	8004e34 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x30>
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b07      	cmp	r3, #7
 8004e32:	dd05      	ble.n	8004e40 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x3c>
 8004e34:	4b3e      	ldr	r3, [pc, #248]	@ (8004f30 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x12c>)
 8004e36:	4a3c      	ldr	r2, [pc, #240]	@ (8004f28 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 8004e38:	2159      	movs	r1, #89	@ 0x59
 8004e3a:	483c      	ldr	r0, [pc, #240]	@ (8004f2c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 8004e3c:	f008 fec6 	bl	800dbcc <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
 8004e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e44:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004e48:	db04      	blt.n	8004e54 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x50>
 8004e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e52:	db05      	blt.n	8004e60 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x5c>
 8004e54:	4b37      	ldr	r3, [pc, #220]	@ (8004f34 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x130>)
 8004e56:	4a34      	ldr	r2, [pc, #208]	@ (8004f28 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 8004e58:	215a      	movs	r1, #90	@ 0x5a
 8004e5a:	4834      	ldr	r0, [pc, #208]	@ (8004f2c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 8004e5c:	f008 feb6 	bl	800dbcc <__assert_func>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4a35      	ldr	r2, [pc, #212]	@ (8004f38 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x134>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	dc04      	bgt.n	8004e72 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x6e>
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004e6e:	141b      	asrs	r3, r3, #16
 8004e70:	e001      	b.n	8004e76 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x72>
 8004e72:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   : 0x7FFF;
  int total_shift = 15 - shift;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f1c3 030f 	rsb	r3, r3, #15
 8004e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
 8004e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e82:	17da      	asrs	r2, r3, #31
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	60fa      	str	r2, [r7, #12]
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e8e:	460a      	mov	r2, r1
 8004e90:	fb02 f203 	mul.w	r2, r2, r3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	fba2 8901 	umull	r8, r9, r2, r1
 8004eaa:	444b      	add	r3, r9
 8004eac:	4699      	mov	r9, r3
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	1e59      	subs	r1, r3, #1
 8004eb2:	f04f 0201 	mov.w	r2, #1
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	f1a1 0620 	sub.w	r6, r1, #32
 8004ebe:	f1c1 0020 	rsb	r0, r1, #32
 8004ec2:	fa03 f501 	lsl.w	r5, r3, r1
 8004ec6:	fa02 f606 	lsl.w	r6, r2, r6
 8004eca:	4335      	orrs	r5, r6
 8004ecc:	fa22 f000 	lsr.w	r0, r2, r0
 8004ed0:	4305      	orrs	r5, r0
 8004ed2:	fa02 f401 	lsl.w	r4, r2, r1
 8004ed6:	eb18 0304 	adds.w	r3, r8, r4
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	eb49 0305 	adc.w	r3, r9, r5
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004ee6:	e9c7 3406 	strd	r3, r4, [r7, #24]
  int32_t result = x >> total_shift;
 8004eea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ef0:	f1c1 0420 	rsb	r4, r1, #32
 8004ef4:	f1b1 0020 	subs.w	r0, r1, #32
 8004ef8:	fa22 fa01 	lsr.w	sl, r2, r1
 8004efc:	fa03 f404 	lsl.w	r4, r3, r4
 8004f00:	ea4a 0a04 	orr.w	sl, sl, r4
 8004f04:	d403      	bmi.n	8004f0e <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x10a>
 8004f06:	fa43 f000 	asr.w	r0, r3, r0
 8004f0a:	ea4a 0a00 	orr.w	sl, sl, r0
 8004f0e:	fa43 fb01 	asr.w	fp, r3, r1
 8004f12:	4653      	mov	r3, sl
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3734      	adds	r7, #52	@ 0x34
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f22:	bf00      	nop
 8004f24:	08011454 	.word	0x08011454
 8004f28:	08011470 	.word	0x08011470
 8004f2c:	080114b8 	.word	0x080114b8
 8004f30:	080114f8 	.word	0x080114f8
 8004f34:	08011514 	.word	0x08011514
 8004f38:	7ffeffff 	.word	0x7ffeffff

08004f3c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8004f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3e:	b089      	sub	sp, #36	@ 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	da06      	bge.n	8004f5a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8004f4c:	4b31      	ldr	r3, [pc, #196]	@ (8005014 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8004f4e:	4a32      	ldr	r2, [pc, #200]	@ (8005018 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8004f50:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 8004f54:	4831      	ldr	r0, [pc, #196]	@ (800501c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8004f56:	f008 fe39 	bl	800dbcc <__assert_func>
  assert(exponent <= 31);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	291f      	cmp	r1, #31
 8004f5e:	dd06      	ble.n	8004f6e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8004f60:	4b2f      	ldr	r3, [pc, #188]	@ (8005020 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8004f62:	4a2d      	ldr	r2, [pc, #180]	@ (8005018 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8004f64:	f240 1167 	movw	r1, #359	@ 0x167
 8004f68:	482c      	ldr	r0, [pc, #176]	@ (800501c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8004f6a:	f008 fe2f 	bl	800dbcc <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8004f6e:	f04f 0001 	mov.w	r0, #1
 8004f72:	f04f 0100 	mov.w	r1, #0
 8004f76:	683c      	ldr	r4, [r7, #0]
 8004f78:	f1a4 0620 	sub.w	r6, r4, #32
 8004f7c:	f1c4 0520 	rsb	r5, r4, #32
 8004f80:	fa01 f304 	lsl.w	r3, r1, r4
 8004f84:	fa00 f606 	lsl.w	r6, r0, r6
 8004f88:	4333      	orrs	r3, r6
 8004f8a:	fa20 f505 	lsr.w	r5, r0, r5
 8004f8e:	432b      	orrs	r3, r5
 8004f90:	fa00 f204 	lsl.w	r2, r0, r4
 8004f94:	4613      	mov	r3, r2
 8004f96:	3b01      	subs	r3, #1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f843 	bl	8005024 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8004f9e:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f000 f83f 	bl	8005024 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8004fa6:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f000 f83b 	bl	8005024 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8004fae:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8004fb0:	69f9      	ldr	r1, [r7, #28]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f841 	bl	800503a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8004fb8:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8004fba:	2101      	movs	r1, #1
 8004fbc:	69f8      	ldr	r0, [r7, #28]
 8004fbe:	f000 f84a 	bl	8005056 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	69b9      	ldr	r1, [r7, #24]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f854 	bl	8005074 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f832 	bl	800503a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f000 f85e 	bl	800509c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8004fe0:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f836 	bl	8005056 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8004fea:	4604      	mov	r4, r0
 8004fec:	68f9      	ldr	r1, [r7, #12]
 8004fee:	6938      	ldr	r0, [r7, #16]
 8004ff0:	f000 f862 	bl	80050b8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	6979      	ldr	r1, [r7, #20]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 f81e 	bl	800503a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8004ffe:	4603      	mov	r3, r0
 8005000:	4619      	mov	r1, r3
 8005002:	4620      	mov	r0, r4
 8005004:	f000 f84a 	bl	800509c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8005008:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800500a:	4618      	mov	r0, r3
 800500c:	3724      	adds	r7, #36	@ 0x24
 800500e:	46bd      	mov	sp, r7
 8005010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005012:	bf00      	nop
 8005014:	08011564 	.word	0x08011564
 8005018:	08011574 	.word	0x08011574
 800501c:	080115d0 	.word	0x080115d0
 8005020:	08011680 	.word	0x08011680

08005024 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  return x;
 800502c:	687b      	ldr	r3, [r7, #4]
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  return a & b;
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	4013      	ands	r3, r2
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	fa42 f303 	asr.w	r3, r2, r3
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	bfb4      	ite	lt
 8005086:	2301      	movlt	r3, #1
 8005088:	2300      	movge	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f827 	bl	80050e0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8005092:	4603      	mov	r3, r0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  return a + b;
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4413      	add	r3, r2
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	bfcc      	ite	gt
 80050ca:	2301      	movgt	r3, #1
 80050cc:	2300      	movle	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 f805 	bl	80050e0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80050d6:	4603      	mov	r3, r0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 80050ee:	2000      	movs	r0, #0
 80050f0:	f000 f807 	bl	8005102 <_ZN8gemmlowp6BitNotIlEET_S1_>
 80050f4:	4603      	mov	r3, r0
 80050f6:	e000      	b.n	80050fa <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  return ~a;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	43db      	mvns	r3, r3
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 800511a:	b480      	push	{r7}
 800511c:	b087      	sub	sp, #28
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
  // For example, 3 elements means both
  //   1) Packed: 3 int4's = 12 bit -> 16 bits (padded) = 2 bytes.
  //      stored in src_buffer[0] and src_buffer[1] (i = 0..1)
  //   2) Unpacked: 3 int8's = 3 bytes.
  //.     stored in dst_buffer[0], dst_buffer[1] and dst_buffer[2] (j = 0..2)
  for (int i = 0; i < num_elements / 2; i++) {
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e01e      	b.n	800516a <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x50>
    int8_t byte = src_buffer[i];
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	74fb      	strb	r3, [r7, #19]
    // Shift left first so that sign is properly extended when shifted right
    int8_t lower = static_cast<int8_t>(byte << 4) >> 4;
 8005136:	7cfb      	ldrb	r3, [r7, #19]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	b25b      	sxtb	r3, r3
 800513c:	111b      	asrs	r3, r3, #4
 800513e:	74bb      	strb	r3, [r7, #18]
    int8_t higher = byte >> 4;
 8005140:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005144:	111b      	asrs	r3, r3, #4
 8005146:	747b      	strb	r3, [r7, #17]
    dst_buffer[2 * i] = lower;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	461a      	mov	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	7cba      	ldrb	r2, [r7, #18]
 8005154:	701a      	strb	r2, [r3, #0]
    dst_buffer[2 * i + 1] = higher;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	3301      	adds	r3, #1
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	7c7a      	ldrb	r2, [r7, #17]
 8005162:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements / 2; i++) {
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	3301      	adds	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	0fda      	lsrs	r2, r3, #31
 800516e:	4413      	add	r3, r2
 8005170:	105b      	asrs	r3, r3, #1
 8005172:	461a      	mov	r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4293      	cmp	r3, r2
 8005178:	dbd8      	blt.n	800512c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }

  // If the buffer size is odd, extract the final lower nibble.
  if (num_elements % 2 != 0) {
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d011      	beq.n	80051a8 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x8e>
    dst_buffer[num_elements - 1] =
        static_cast<int8_t>(src_buffer[num_elements / 2] << 4) >> 4;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	0fda      	lsrs	r2, r3, #31
 8005188:	4413      	add	r3, r2
 800518a:	105b      	asrs	r3, r3, #1
 800518c:	461a      	mov	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f993 3000 	ldrsb.w	r3, [r3]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	b25a      	sxtb	r2, r3
    dst_buffer[num_elements - 1] =
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3b01      	subs	r3, #1
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	440b      	add	r3, r1
        static_cast<int8_t>(src_buffer[num_elements / 2] << 4) >> 4;
 80051a2:	1112      	asrs	r2, r2, #4
 80051a4:	b252      	sxtb	r2, r2
    dst_buffer[num_elements - 1] =
 80051a6:	701a      	strb	r2, [r3, #0]
  }
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	ed93 7a00 	vldr	s14, [r3]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	edd3 7a00 	vldr	s15, [r3]
 80051ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d2:	d501      	bpl.n	80051d8 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	e000      	b.n	80051da <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80051d8:	687b      	ldr	r3, [r7, #4]
    }
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	ed93 7a00 	vldr	s14, [r3]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	edd3 7a00 	vldr	s15, [r3]
 80051fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	d501      	bpl.n	800520a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	e000      	b.n	800520c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800520a:	687b      	ldr	r3, [r7, #4]
    }
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005222:	ed97 0a01 	vldr	s0, [r7, #4]
 8005226:	f008 fca5 	bl	800db74 <roundf>
 800522a:	eef0 7a40 	vmov.f32	s15, s0
 800522e:	eeb0 0a67 	vmov.f32	s0, s15
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8005238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	ed87 0b02 	vstr	d0, [r7, #8]
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005254:	f7fb fc50 	bl	8000af8 <__aeabi_dcmpeq>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d006      	beq.n	800526c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
    return;
 800526a:	e069      	b.n	8005340 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x108>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800526c:	6838      	ldr	r0, [r7, #0]
 800526e:	ed97 0b02 	vldr	d0, [r7, #8]
 8005272:	f008 fc05 	bl	800da80 <frexp>
 8005276:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	4b32      	ldr	r3, [pc, #200]	@ (8005348 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8005280:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005284:	f7fb f9d0 	bl	8000628 <__aeabi_dmul>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	ec43 2b17 	vmov	d7, r2, r3
 8005290:	eeb0 0a47 	vmov.f32	s0, s14
 8005294:	eef0 0a67 	vmov.f32	s1, s15
 8005298:	f000 f85a 	bl	8005350 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800529c:	ec53 2b10 	vmov	r2, r3, d0
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	f7fb fcb0 	bl	8000c08 <__aeabi_d2lz>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 80052b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b4:	4925      	ldr	r1, [pc, #148]	@ (800534c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 80052b6:	428a      	cmp	r2, r1
 80052b8:	f173 0300 	sbcs.w	r3, r3, #0
 80052bc:	db01      	blt.n	80052c2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 80052be:	f008 fc7d 	bl	800dbbc <abort>
  if (q_fixed == (1LL << 31)) {
 80052c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c6:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80052ca:	430b      	orrs	r3, r1
 80052cc:	d119      	bne.n	8005302 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xca>
    q_fixed /= 2;
 80052ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	0fd8      	lsrs	r0, r3, #31
 80052dc:	2100      	movs	r1, #0
 80052de:	1884      	adds	r4, r0, r2
 80052e0:	eb41 0503 	adc.w	r5, r1, r3
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	0862      	lsrs	r2, r4, #1
 80052ee:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80052f2:	106b      	asrs	r3, r5, #1
 80052f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8005302:	f7ff fcdd 	bl	8004cc0 <_ZNSt14numeric_limitsIlE3maxEv>
 8005306:	4603      	mov	r3, r0
 8005308:	17da      	asrs	r2, r3, #31
 800530a:	4698      	mov	r8, r3
 800530c:	4691      	mov	r9, r2
 800530e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005312:	4590      	cmp	r8, r2
 8005314:	eb79 0303 	sbcs.w	r3, r9, r3
 8005318:	da01      	bge.n	800531e <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe6>
 800531a:	f008 fc4f 	bl	800dbbc <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f113 0f1f 	cmn.w	r3, #31
 8005326:	da08      	bge.n	800533a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x102>
    *shift = 0;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]
}
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005348:	41e00000 	.word	0x41e00000
 800534c:	80000001 	.word	0x80000001

08005350 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round)
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	ed87 0b00 	vstr	d0, [r7]
 800535a:	ed97 0b00 	vldr	d0, [r7]
 800535e:	f008 fbc3 	bl	800dae8 <round>
 8005362:	eeb0 7a40 	vmov.f32	s14, s0
 8005366:	eef0 7a60 	vmov.f32	s15, s1
 800536a:	eeb0 0a47 	vmov.f32	s0, s14
 800536e:	eef0 0a67 	vmov.f32	s1, s15
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005382:	ed97 0a01 	vldr	s0, [r7, #4]
 8005386:	f7ff ff47 	bl	8005218 <_ZSt5roundf>
 800538a:	eef0 7a40 	vmov.f32	s15, s0
 800538e:	eeb0 0a67 	vmov.f32	s0, s15
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <_ZN6tflite12RuntimeShapeC1Ev>:
  RuntimeShape() : size_(0) {}
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <_ZN6tflite12RuntimeShapeC1EiPKl>:
  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f811 	bl	80053f2 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <_ZN6tflite12RuntimeShape8DimsDataEv>:
  int32_t* DimsData() { return dims_; }
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b086      	sub	sp, #24
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b06      	cmp	r3, #6
 8005402:	dd01      	ble.n	8005408 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl+0x16>
 8005404:	f008 fbda 	bl	800dbbc <abort>
    size_ = dimensions_count;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff ffe3 	bl	80053da <_ZN6tflite12RuntimeShape8DimsDataEv>
 8005414:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	461a      	mov	r2, r3
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	6978      	ldr	r0, [r7, #20]
 8005420:	f009 fd67 	bl	800eef2 <memcpy>
  }
 8005424:	bf00      	nop
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	ed87 0b00 	vstr	d0, [r7]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800543e:	ec43 2b17 	vmov	d7, r2, r3
 8005442:	eeb0 0a47 	vmov.f32	s0, s14
 8005446:	eef0 0a67 	vmov.f32	s1, s15
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
 8005458:	4b02      	ldr	r3, [pc, #8]	@ (8005464 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800545a:	4618      	mov	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	ffff8000 	.word	0xffff8000

08005468 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
 800546c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	da01      	bge.n	8005494 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	e000      	b.n	8005496 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8005494:	687b      	ldr	r3, [r7, #4]
    }
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	da01      	bge.n	80054bc <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	e000      	b.n	80054be <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 80054bc:	687b      	ldr	r3, [r7, #4]
    }
 80054be:	4618      	mov	r0, r3
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 80054ca:	b480      	push	{r7}
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80054d2:	4618      	mov	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
 80054e0:	237f      	movs	r3, #127	@ 0x7f
 80054e2:	4618      	mov	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	2300      	movs	r3, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
 8005500:	23ff      	movs	r3, #255	@ 0xff
 8005502:	4618      	mov	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	0000      	movs	r0, r0
	...

08005510 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005510:	b5b0      	push	{r4, r5, r7, lr}
 8005512:	b08e      	sub	sp, #56	@ 0x38
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fb f828 	bl	8000578 <__aeabi_f2d>
 8005528:	4604      	mov	r4, r0
 800552a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4618      	mov	r0, r3
 8005532:	f7fb f821 	bl	8000578 <__aeabi_f2d>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fb f873 	bl	8000628 <__aeabi_dmul>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d04b      	beq.n	80055e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4618      	mov	r0, r3
 8005556:	f7fb f80f 	bl	8000578 <__aeabi_f2d>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8005562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005566:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800556a:	f7fa fea5 	bl	80002b8 <__aeabi_dsub>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	ec43 2b17 	vmov	d7, r2, r3
 8005576:	eeb0 0a47 	vmov.f32	s0, s14
 800557a:	eef0 0a67 	vmov.f32	s1, s15
 800557e:	f7ff ff55 	bl	800542c <_ZSt3absd>
 8005582:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8005586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	4618      	mov	r0, r3
 800558c:	f7fa fff4 	bl	8000578 <__aeabi_f2d>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8005598:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800559c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055a0:	f7fb f96c 	bl	800087c <__aeabi_ddiv>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4610      	mov	r0, r2
 80055aa:	4619      	mov	r1, r3
 80055ac:	2301      	movs	r3, #1
 80055ae:	461c      	mov	r4, r3
 80055b0:	a318      	add	r3, pc, #96	@ (adr r3, 8005614 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f7fb fab3 	bl	8000b20 <__aeabi_dcmple>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 80055c0:	2300      	movs	r3, #0
 80055c2:	461c      	mov	r4, r3
 80055c4:	b2e3      	uxtb	r3, r4
 80055c6:	f083 0301 	eor.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	695c      	ldr	r4, [r3, #20]
 80055d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005608 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	f240 1343 	movw	r3, #323	@ 0x143
 80055dc:	4a0b      	ldr	r2, [pc, #44]	@ (800560c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80055de:	490c      	ldr	r1, [pc, #48]	@ (8005610 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	47a0      	blx	r4
 80055e4:	2301      	movs	r3, #1
 80055e6:	e009      	b.n	80055fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 80055e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f812 	bl	800561c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 80055f8:	4603      	mov	r3, r0
                                          multiplier);
 80055fa:	bf00      	nop
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3730      	adds	r7, #48	@ 0x30
 8005600:	46bd      	mov	sp, r7
 8005602:	bdb0      	pop	{r4, r5, r7, pc}
 8005604:	f3af 8000 	nop.w
 8005608:	080118d0 	.word	0x080118d0
 800560c:	080116f0 	.word	0x080116f0
 8005610:	0801179c 	.word	0x0801179c
 8005614:	47ae147b 	.word	0x47ae147b
 8005618:	3f947ae1 	.word	0x3f947ae1

0800561c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b089      	sub	sp, #36	@ 0x24
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	edd3 7a03 	vldr	s15, [r3, #12]
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800563a:	ee17 0a90 	vmov	r0, s15
 800563e:	f7fa ff9b 	bl	8000578 <__aeabi_f2d>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800564a:	2301      	movs	r3, #1
 800564c:	461c      	mov	r4, r3
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800565a:	f7fb fa6b 	bl	8000b34 <__aeabi_dcmpge>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8005664:	2300      	movs	r3, #0
 8005666:	461c      	mov	r4, r3
 8005668:	b2e3      	uxtb	r3, r4
 800566a:	f083 0301 	eor.w	r3, r3, #1
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	695c      	ldr	r4, [r3, #20]
 8005678:	4b0f      	ldr	r3, [pc, #60]	@ (80056b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005680:	4a0e      	ldr	r2, [pc, #56]	@ (80056bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8005682:	490f      	ldr	r1, [pc, #60]	@ (80056c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	47a0      	blx	r4
 8005688:	2301      	movs	r3, #1
 800568a:	e010      	b.n	80056ae <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4618      	mov	r0, r3
 8005692:	f7fa ff71 	bl	8000578 <__aeabi_f2d>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800569e:	f7fb f8ed 	bl	800087c <__aeabi_ddiv>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056a8:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd90      	pop	{r4, r7, pc}
 80056b6:	bf00      	nop
 80056b8:	080118f4 	.word	0x080118f4
 80056bc:	080116f0 	.word	0x080116f0
 80056c0:	0801179c 	.word	0x0801179c

080056c4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b08b      	sub	sp, #44	@ 0x2c
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	6178      	str	r0, [r7, #20]
 80056cc:	ed87 0a04 	vstr	s0, [r7, #16]
 80056d0:	60f9      	str	r1, [r7, #12]
 80056d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 80056d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80056dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80056e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80056e4:	eeb0 0a66 	vmov.f32	s0, s13
 80056e8:	f7ff fe46 	bl	8005378 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80056ec:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80056f0:	f7ff fadd 	bl	8004cae <_ZNSt14numeric_limitsIlE3minEv>
 80056f4:	ee07 0a90 	vmov	s15, r0
 80056f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8005700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005708:	db0e      	blt.n	8005728 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800570a:	f7ff fad9 	bl	8004cc0 <_ZNSt14numeric_limitsIlE3maxEv>
 800570e:	ee07 0a90 	vmov	s15, r0
 8005712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8005716:	ed97 7a07 	vldr	s14, [r7, #28]
 800571a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800571e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005722:	d801      	bhi.n	8005728 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8005728:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800572a:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 800572c:	7efb      	ldrb	r3, [r7, #27]
 800572e:	f083 0301 	eor.w	r3, r3, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00b      	beq.n	8005750 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	695c      	ldr	r4, [r3, #20]
 800573c:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005744:	4a0b      	ldr	r2, [pc, #44]	@ (8005774 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 8005746:	490c      	ldr	r1, [pc, #48]	@ (8005778 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 8005748:	6978      	ldr	r0, [r7, #20]
 800574a:	47a0      	blx	r4
 800574c:	2301      	movs	r3, #1
 800574e:	e00a      	b.n	8005766 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 8005750:	edd7 7a07 	vldr	s15, [r7, #28]
 8005754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005758:	ee17 2a90 	vmov	r2, s15
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	441a      	add	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3724      	adds	r7, #36	@ 0x24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd90      	pop	{r4, r7, pc}
 800576e:	bf00      	nop
 8005770:	08011910 	.word	0x08011910
 8005774:	080116f0 	.word	0x080116f0
 8005778:	0801179c 	.word	0x0801179c

0800577c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	@ 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	460b      	mov	r3, r1
 800578a:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
  const auto zero_point = output->params.zero_point;
 8005792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d120      	bne.n	80057e0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 800579e:	f107 0314 	add.w	r3, r7, #20
 80057a2:	461a      	mov	r2, r3
 80057a4:	eddf 0a52 	vldr	s1, [pc, #328]	@ 80058f0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 80057a8:	6a39      	ldr	r1, [r7, #32]
 80057aa:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7ff ff88 	bl	80056c4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80057b4:	4603      	mov	r3, r0
 80057b6:	76fb      	strb	r3, [r7, #27]
 80057b8:	7efb      	ldrb	r3, [r7, #27]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 80057be:	7efb      	ldrb	r3, [r7, #27]
 80057c0:	e091      	b.n	80058e6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80057c2:	f107 0214 	add.w	r2, r7, #20
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	4611      	mov	r1, r2
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fe55 	bl	800547a <_ZSt3maxIlERKT_S2_S2_>
 80057d0:	4603      	mov	r3, r0
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d6:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	e081      	b.n	80058e4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 80057e0:	7afb      	ldrb	r3, [r7, #11]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d13a      	bne.n	800585c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 80057e6:	f107 0314 	add.w	r3, r7, #20
 80057ea:	461a      	mov	r2, r3
 80057ec:	eddf 0a40 	vldr	s1, [pc, #256]	@ 80058f0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 80057f0:	6a39      	ldr	r1, [r7, #32]
 80057f2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff ff64 	bl	80056c4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80057fc:	4603      	mov	r3, r0
 80057fe:	777b      	strb	r3, [r7, #29]
 8005800:	7f7b      	ldrb	r3, [r7, #29]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 8005806:	7f7b      	ldrb	r3, [r7, #29]
 8005808:	e06d      	b.n	80058e6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800580a:	f107 0214 	add.w	r2, r7, #20
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	4611      	mov	r1, r2
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fe31 	bl	800547a <_ZSt3maxIlERKT_S2_S2_>
 8005818:	4603      	mov	r3, r0
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581e:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	461a      	mov	r2, r3
 8005826:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 800582a:	6a39      	ldr	r1, [r7, #32]
 800582c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff ff47 	bl	80056c4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8005836:	4603      	mov	r3, r0
 8005838:	773b      	strb	r3, [r7, #28]
 800583a:	7f3b      	ldrb	r3, [r7, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 8005840:	7f3b      	ldrb	r3, [r7, #28]
 8005842:	e050      	b.n	80058e6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8005844:	f107 0214 	add.w	r2, r7, #20
 8005848:	463b      	mov	r3, r7
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fe28 	bl	80054a2 <_ZSt3minIlERKT_S2_S2_>
 8005852:	4603      	mov	r3, r0
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e043      	b.n	80058e4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 800585c:	7afb      	ldrb	r3, [r7, #11]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d13a      	bne.n	80058d8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 8005862:	f107 0314 	add.w	r3, r7, #20
 8005866:	461a      	mov	r2, r3
 8005868:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800586c:	6a39      	ldr	r1, [r7, #32]
 800586e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff ff26 	bl	80056c4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8005878:	4603      	mov	r3, r0
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	7ffb      	ldrb	r3, [r7, #31]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 8005882:	7ffb      	ldrb	r3, [r7, #31]
 8005884:	e02f      	b.n	80058e6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8005886:	f107 0214 	add.w	r2, r7, #20
 800588a:	1d3b      	adds	r3, r7, #4
 800588c:	4611      	mov	r1, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff fdf3 	bl	800547a <_ZSt3maxIlERKT_S2_S2_>
 8005894:	4603      	mov	r3, r0
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589a:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800589c:	f107 0314 	add.w	r3, r7, #20
 80058a0:	461a      	mov	r2, r3
 80058a2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80058a6:	6a39      	ldr	r1, [r7, #32]
 80058a8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff ff09 	bl	80056c4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80058b2:	4603      	mov	r3, r0
 80058b4:	77bb      	strb	r3, [r7, #30]
 80058b6:	7fbb      	ldrb	r3, [r7, #30]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 80058bc:	7fbb      	ldrb	r3, [r7, #30]
 80058be:	e012      	b.n	80058e6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 80058c0:	f107 0214 	add.w	r2, r7, #20
 80058c4:	463b      	mov	r3, r7
 80058c6:	4611      	mov	r1, r2
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff fdea 	bl	80054a2 <_ZSt3minIlERKT_S2_S2_>
 80058ce:	4603      	mov	r3, r0
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	e005      	b.n	80058e4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058dc:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3728      	adds	r7, #40	@ 0x28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	00000000 	.word	0x00000000

080058f4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b08b      	sub	sp, #44	@ 0x2c
 80058f8:	af04      	add	r7, sp, #16
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	460b      	mov	r3, r1
 8005902:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d108      	bne.n	8005926 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8005914:	f7ff fdea 	bl	80054ec <_ZNSt14numeric_limitsIhE3minEv>
 8005918:	4603      	mov	r3, r0
 800591a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800591c:	f7ff fdee 	bl	80054fc <_ZNSt14numeric_limitsIhE3maxEv>
 8005920:	4603      	mov	r3, r0
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	e025      	b.n	8005972 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b09      	cmp	r3, #9
 800592c:	d108      	bne.n	8005940 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800592e:	f7ff fdcc 	bl	80054ca <_ZNSt14numeric_limitsIaE3minEv>
 8005932:	4603      	mov	r3, r0
 8005934:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8005936:	f7ff fdd1 	bl	80054dc <_ZNSt14numeric_limitsIaE3maxEv>
 800593a:	4603      	mov	r3, r0
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	e018      	b.n	8005972 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b07      	cmp	r3, #7
 8005946:	d108      	bne.n	800595a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8005948:	f7ff fd84 	bl	8005454 <_ZNSt14numeric_limitsIsE3minEv>
 800594c:	4603      	mov	r3, r0
 800594e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8005950:	f7ff fd8a 	bl	8005468 <_ZNSt14numeric_limitsIsE3maxEv>
 8005954:	4603      	mov	r3, r0
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	e00b      	b.n	8005972 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	695c      	ldr	r4, [r3, #20]
 800595e:	4b0e      	ldr	r3, [pc, #56]	@ (8005998 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	f44f 73cb 	mov.w	r3, #406	@ 0x196
 8005966:	4a0d      	ldr	r2, [pc, #52]	@ (800599c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8005968:	490d      	ldr	r1, [pc, #52]	@ (80059a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	47a0      	blx	r4
 800596e:	2301      	movs	r3, #1
 8005970:	e00d      	b.n	800598e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 8005972:	7af9      	ldrb	r1, [r7, #11]
 8005974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005976:	9302      	str	r3, [sp, #8]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff fef9 	bl	800577c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 800598a:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 800598c:	bf00      	nop
}
 800598e:	4618      	mov	r0, r3
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	bd90      	pop	{r4, r7, pc}
 8005996:	bf00      	nop
 8005998:	08011938 	.word	0x08011938
 800599c:	080116f0 	.word	0x080116f0
 80059a0:	0801179c 	.word	0x0801179c

080059a4 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	da01      	bge.n	80059be <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	e000      	b.n	80059c0 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 80059be:	687b      	ldr	r3, [r7, #4]
    }
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <_ZN6tflite29INonPersistentBufferAllocatorC1Ev>:
// Interface class for managing non-persistent buffers.
// The default non-persistent buffers are temp buffers that are not resizable.
// Support of at least one resizable buffer is required.
class INonPersistentBufferAllocator {
 public:
  INonPersistentBufferAllocator() {}
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	4a04      	ldr	r2, [pc, #16]	@ (80059e8 <_ZN6tflite29INonPersistentBufferAllocatorC1Ev+0x1c>)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	08015fec 	.word	0x08015fec

080059ec <_ZN6tflite29INonPersistentBufferAllocatorD1Ev>:
  virtual ~INonPersistentBufferAllocator() {}
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	4a04      	ldr	r2, [pc, #16]	@ (8005a08 <_ZN6tflite29INonPersistentBufferAllocatorD1Ev+0x1c>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	08015fec 	.word	0x08015fec

08005a0c <_ZN6tflite29INonPersistentBufferAllocatorD0Ev>:
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff ffe9 	bl	80059ec <_ZN6tflite29INonPersistentBufferAllocatorD1Ev>
 8005a1a:	2104      	movs	r1, #4
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f008 f81c 	bl	800da5a <_ZdlPvj>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZN6tflite26IPersistentBufferAllocatorC1Ev>:
  IPersistentBufferAllocator() {}
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	4a04      	ldr	r2, [pc, #16]	@ (8005a48 <_ZN6tflite26IPersistentBufferAllocatorC1Ev+0x1c>)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	08016028 	.word	0x08016028

08005a4c <_ZN6tflite26IPersistentBufferAllocatorD1Ev>:
  virtual ~IPersistentBufferAllocator() {}
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	4a04      	ldr	r2, [pc, #16]	@ (8005a68 <_ZN6tflite26IPersistentBufferAllocatorD1Ev+0x1c>)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	08016028 	.word	0x08016028

08005a6c <_ZN6tflite26IPersistentBufferAllocatorD0Ev>:
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff ffe9 	bl	8005a4c <_ZN6tflite26IPersistentBufferAllocatorD1Ev>
 8005a7a:	2104      	movs	r1, #4
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f007 ffec 	bl	800da5a <_ZdlPvj>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <_ZN6tflite29INonPersistentBufferAllocatorC1ERKS0_>:
class INonPersistentBufferAllocator {
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
 8005a96:	4a05      	ldr	r2, [pc, #20]	@ (8005aac <_ZN6tflite29INonPersistentBufferAllocatorC1ERKS0_+0x20>)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	08015fec 	.word	0x08015fec

08005ab0 <_ZN6tflite26IPersistentBufferAllocatorC1ERKS0_>:
class IPersistentBufferAllocator {
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	4a05      	ldr	r2, [pc, #20]	@ (8005ad0 <_ZN6tflite26IPersistentBufferAllocatorC1ERKS0_+0x20>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	08016028 	.word	0x08016028

08005ad4 <_ZN6tflite26SingleArenaBufferAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SingleArenaBufferAllocator : public INonPersistentBufferAllocator,
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff ffd1 	bl	8005a8c <_ZN6tflite29INonPersistentBufferAllocatorC1ERKS0_>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	1d1a      	adds	r2, r3, #4
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f7ff ffdb 	bl	8005ab0 <_ZN6tflite26IPersistentBufferAllocatorC1ERKS0_>
 8005afa:	4a13      	ldr	r2, [pc, #76]	@ (8005b48 <_ZN6tflite26SingleArenaBufferAllocatorC1ERKS0_+0x74>)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	4a12      	ldr	r2, [pc, #72]	@ (8005b4c <_ZN6tflite26SingleArenaBufferAllocatorC1ERKS0_+0x78>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	609a      	str	r2, [r3, #8]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	611a      	str	r2, [r3, #16]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	695a      	ldr	r2, [r3, #20]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	615a      	str	r2, [r3, #20]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	619a      	str	r2, [r3, #24]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	61da      	str	r2, [r3, #28]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6a1a      	ldr	r2, [r3, #32]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	08016040 	.word	0x08016040
 8005b4c:	08016084 	.word	0x08016084

08005b50 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_>:
#include "tensorflow/lite/micro/memory_helpers.h"
#include "tensorflow/lite/micro/micro_log.h"

namespace tflite {

SingleArenaBufferAllocator::SingleArenaBufferAllocator(uint8_t* buffer_head,
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
                                                       uint8_t* buffer_tail)
    : buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff ff34 	bl	80059cc <_ZN6tflite29INonPersistentBufferAllocatorC1Ev>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff ff5f 	bl	8005a2c <_ZN6tflite26IPersistentBufferAllocatorC1Ev>
 8005b6e:	4a10      	ldr	r2, [pc, #64]	@ (8005bb0 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_+0x60>)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	4a0f      	ldr	r2, [pc, #60]	@ (8005bb4 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_+0x64>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	605a      	str	r2, [r3, #4]
    : buffer_head_(buffer_head),
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	609a      	str	r2, [r3, #8]
      buffer_tail_(buffer_tail),
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	60da      	str	r2, [r3, #12]
      head_(buffer_head),
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	611a      	str	r2, [r3, #16]
      tail_(buffer_tail),
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	615a      	str	r2, [r3, #20]
      temp_(buffer_head_) {}
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	619a      	str	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	61da      	str	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	621a      	str	r2, [r3, #32]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	08016040 	.word	0x08016040
 8005bb4:	08016084 	.word	0x08016084

08005bb8 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhj>:

SingleArenaBufferAllocator::SingleArenaBufferAllocator(uint8_t* buffer,
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
                                                       size_t buffer_size)
    : SingleArenaBufferAllocator(buffer, buffer + buffer_size) {}
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff ffbe 	bl	8005b50 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>:

/* static */
SingleArenaBufferAllocator* SingleArenaBufferAllocator::Create(
    uint8_t* buffer_head, size_t buffer_size) {
 8005bde:	b590      	push	{r4, r7, lr}
 8005be0:	b08d      	sub	sp, #52	@ 0x34
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(buffer_head != nullptr);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x14>
 8005bee:	f007 ffe5 	bl	800dbbc <abort>
  SingleArenaBufferAllocator tmp =
      SingleArenaBufferAllocator(buffer_head, buffer_size);
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff ffdc 	bl	8005bb8 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhj>

  // Allocate enough bytes from the buffer to create a
  // SingleArenaBufferAllocator. The new instance will use the current adjusted
  // tail buffer from the tmp allocator instance.
  uint8_t* allocator_buffer = tmp.AllocatePersistentBuffer(
 8005c00:	f107 0308 	add.w	r3, r7, #8
 8005c04:	2204      	movs	r2, #4
 8005c06:	2124      	movs	r1, #36	@ 0x24
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 f8e9 	bl	8005de0 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>
 8005c0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      sizeof(SingleArenaBufferAllocator), alignof(SingleArenaBufferAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	4619      	mov	r1, r3
 8005c14:	2024      	movs	r0, #36	@ 0x24
 8005c16:	f7fe f816 	bl	8003c46 <_ZnwjPv>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	f107 0308 	add.w	r3, r7, #8
 8005c20:	4619      	mov	r1, r3
 8005c22:	4620      	mov	r0, r4
 8005c24:	f7ff ff56 	bl	8005ad4 <_ZN6tflite26SingleArenaBufferAllocatorC1ERKS0_>
}
 8005c28:	f107 0308 	add.w	r3, r7, #8
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 f805 	bl	8005c3c <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
 8005c32:	4623      	mov	r3, r4
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3734      	adds	r7, #52	@ 0x34
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd90      	pop	{r4, r7, pc}

08005c3c <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>:

SingleArenaBufferAllocator::~SingleArenaBufferAllocator() {}
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	4a09      	ldr	r2, [pc, #36]	@ (8005c6c <_ZN6tflite26SingleArenaBufferAllocatorD1Ev+0x30>)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	4a09      	ldr	r2, [pc, #36]	@ (8005c70 <_ZN6tflite26SingleArenaBufferAllocatorD1Ev+0x34>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	605a      	str	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fef9 	bl	8005a4c <_ZN6tflite26IPersistentBufferAllocatorD1Ev>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fec5 	bl	80059ec <_ZN6tflite29INonPersistentBufferAllocatorD1Ev>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	08016040 	.word	0x08016040
 8005c70:	08016084 	.word	0x08016084

08005c74 <_ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev>:
 public:
  // TODO(b/157615197): Cleanup constructors/destructor and use factory
  // functions.
  SingleArenaBufferAllocator(uint8_t* buffer_head, uint8_t* buffer_tail);
  SingleArenaBufferAllocator(uint8_t* buffer, size_t buffer_size);
  virtual ~SingleArenaBufferAllocator();
 8005c74:	f1a0 0004 	sub.w	r0, r0, #4
 8005c78:	f7ff bfe0 	b.w	8005c3c <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>

08005c7c <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>:
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff ffd9 	bl	8005c3c <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>
 8005c8a:	2124      	movs	r1, #36	@ 0x24
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f007 fee4 	bl	800da5a <_ZdlPvj>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <_ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev>:
 8005c9c:	f1a0 0004 	sub.w	r0, r0, #4
 8005ca0:	f7ff bfec 	b.w	8005c7c <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>

08005ca4 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj>:

uint8_t* SingleArenaBufferAllocator::AllocateResizableBuffer(size_t size,
                                                             size_t alignment) {
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  // Only supports one resizable buffer, which starts at the buffer head.
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fb69 	bl	800638e <_ZN6tflite14AlignPointerUpEPhj>
 8005cbc:	6178      	str	r0, [r7, #20]
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	331c      	adds	r3, #28
 8005cc4:	681c      	ldr	r4, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	6979      	ldr	r1, [r7, #20]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	47a0      	blx	r4
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2301      	moveq	r3, #1
 8005cd8:	2300      	movne	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x40>
    return expect_resizable_buf;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	e000      	b.n	8005ce6 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x42>
  }
  return nullptr;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd90      	pop	{r4, r7, pc}

08005cee <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh>:

TfLiteStatus SingleArenaBufferAllocator::DeallocateResizableBuffer(
    uint8_t* resizable_buf) {
 8005cee:	b590      	push	{r4, r7, lr}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  return ResizeBuffer(resizable_buf, 0, 1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	331c      	adds	r3, #28
 8005cfe:	681c      	ldr	r4, [r3, #0]
 8005d00:	2301      	movs	r3, #1
 8005d02:	2200      	movs	r2, #0
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	47a0      	blx	r4
 8005d0a:	4603      	mov	r3, r0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd90      	pop	{r4, r7, pc}

08005d14 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj>:

TfLiteStatus SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(
    size_t size, size_t alignment) {
 8005d14:	b590      	push	{r4, r7, lr}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fb31 	bl	800638e <_ZN6tflite14AlignPointerUpEPhj>
 8005d2c:	6178      	str	r0, [r7, #20]
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	331c      	adds	r3, #28
 8005d34:	681c      	ldr	r4, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	6979      	ldr	r1, [r7, #20]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	47a0      	blx	r4
 8005d40:	4603      	mov	r3, r0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd90      	pop	{r4, r7, pc}
	...

08005d4c <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj>:

TfLiteStatus SingleArenaBufferAllocator::ResizeBuffer(uint8_t* resizable_buf,
                                                      size_t size,
                                                      size_t alignment) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  // Only supports one resizable buffer, which starts at the buffer head.
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fb14 	bl	800638e <_ZN6tflite14AlignPointerUpEPhj>
 8005d66:	61f8      	str	r0, [r7, #28]
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d103      	bne.n	8005d7c <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x30>
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d004      	beq.n	8005d86 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x3a>
    MicroPrintf(
 8005d7c:	4816      	ldr	r0, [pc, #88]	@ (8005dd8 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x8c>)
 8005d7e:	f004 fe93 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "Internal error: either buffer is not resizable or "
        "ResetTempAllocations() is not called before ResizeBuffer().");
    return kTfLiteError;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e023      	b.n	8005dce <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x82>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fafe 	bl	800638e <_ZN6tflite14AlignPointerUpEPhj>
 8005d92:	61b8      	str	r0, [r7, #24]
  const size_t available_memory = tail_ - aligned_result;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]
  if (available_memory < size) {
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d209      	bcs.n	8005dba <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x6e>
    MicroPrintf(
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	480a      	ldr	r0, [pc, #40]	@ (8005ddc <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x90>)
 8005db2:	f004 fe79 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "Failed to resize buffer. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e009      	b.n	8005dce <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x82>
  }
  head_ = aligned_result + size;
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	441a      	add	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	08011ad8 	.word	0x08011ad8
 8005ddc:	08011b48 	.word	0x08011b48

08005de0 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:

uint8_t* SingleArenaBufferAllocator::AllocatePersistentBuffer(
    size_t size, size_t alignment) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	425b      	negs	r3, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fae1 	bl	80063c0 <_ZN6tflite16AlignPointerDownEPhj>
 8005dfe:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d20e      	bcs.n	8005e28 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x48>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	613b      	str	r3, [r7, #16]
    MicroPrintf(
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad2      	subs	r2, r2, r3
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	4806      	ldr	r0, [pc, #24]	@ (8005e38 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x58>)
 8005e20:	f004 fe42 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "Failed to allocate tail memory. Requested: %u, "
        "available %u, missing: %u",
        size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 8005e24:	2300      	movs	r3, #0
 8005e26:	e003      	b.n	8005e30 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x50>
  }
  tail_ = aligned_result;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8005e2e:	697b      	ldr	r3, [r7, #20]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	08011b8c 	.word	0x08011b8c

08005e3c <_ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
  virtual TfLiteStatus ReserveNonPersistentOverlayMemory(
      size_t size, size_t alignment) override;

  // Allocates persistent memory starting at the tail of the arena (highest
  // address and moving downwards).
  virtual uint8_t* AllocatePersistentBuffer(size_t size,
 8005e3c:	f1a0 0004 	sub.w	r0, r0, #4
 8005e40:	f7ff bfce 	b.w	8005de0 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>

08005e44 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj>:

uint8_t* SingleArenaBufferAllocator::AllocateTemp(size_t size,
                                                  size_t alignment) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fa99 	bl	800638e <_ZN6tflite14AlignPointerUpEPhj>
 8005e5c:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d209      	bcs.n	8005e84 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x40>
    MicroPrintf(
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	480d      	ldr	r0, [pc, #52]	@ (8005eb0 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x6c>)
 8005e7c:	f004 fe14 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "Failed to allocate temp memory. Requested: %u, "
        "available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
 8005e80:	2300      	movs	r3, #0
 8005e82:	e010      	b.n	8005ea6 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x62>
  }
  temp_ = aligned_result + size;
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	619a      	str	r2, [r3, #24]
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	405a      	eors	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	61da      	str	r2, [r3, #28]
  temp_buffer_count_++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	621a      	str	r2, [r3, #32]
  return aligned_result;
 8005ea4:	697b      	ldr	r3, [r7, #20]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	08011bd8 	.word	0x08011bd8

08005eb4 <_ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh>:

void SingleArenaBufferAllocator::DeallocateTemp(uint8_t* temp_buf) {
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	405a      	eors	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	61da      	str	r2, [r3, #28]
  temp_buffer_count_--;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	1e5a      	subs	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	621a      	str	r2, [r3, #32]
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv>:

bool SingleArenaBufferAllocator::IsAllTempDeallocated() {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  if (temp_buffer_count_ != 0 || temp_buffer_ptr_check_sum_ != 0) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d103      	bne.n	8005ef8 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x18>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00e      	beq.n	8005f16 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x36>
    MicroPrintf(
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a19      	ldr	r1, [r3, #32]
        "Number of allocated temp buffers: %d. Checksum passing status: %d",
        temp_buffer_count_, !temp_buffer_ptr_check_sum_);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
    MicroPrintf(
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	bf0c      	ite	eq
 8005f04:	2301      	moveq	r3, #1
 8005f06:	2300      	movne	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4804      	ldr	r0, [pc, #16]	@ (8005f20 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x40>)
 8005f0e:	f004 fdcb 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return false;
 8005f12:	2300      	movs	r3, #0
 8005f14:	e000      	b.n	8005f18 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x38>
  }
  return true;
 8005f16:	2301      	movs	r3, #1
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	08011c24 	.word	0x08011c24

08005f24 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv>:

TfLiteStatus SingleArenaBufferAllocator::ResetTempAllocations() {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  // TODO(b/209453859): enable error check based on IsAllTempDeallocated after
  // all AllocateTemp have been paird with DeallocateTemp
  if (!IsAllTempDeallocated()) {
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3310      	adds	r3, #16
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f083 0301 	eor.w	r3, r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x2a>
    MicroPrintf(
 8005f44:	4806      	ldr	r0, [pc, #24]	@ (8005f60 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x3c>)
 8005f46:	f004 fdaf 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "All temp buffers must be freed before calling ResetTempAllocations()");
    return kTfLiteError;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e004      	b.n	8005f58 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x34>
  }
  temp_ = head_;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	08011c68 	.word	0x08011c68

08005f64 <_ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv>:

uint8_t* SingleArenaBufferAllocator::GetOverlayMemoryAddress() const {
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  return buffer_head_;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <_ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  return std::max(head_ - buffer_head_, temp_ - buffer_head_);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	f107 020c 	add.w	r2, r7, #12
 8005fa0:	f107 0308 	add.w	r3, r7, #8
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff fcfc 	bl	80059a4 <_ZSt3maxIiERKT_S2_S2_>
 8005fac:	4603      	mov	r3, r0
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetPersistentUsedBytes() const {
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  return buffer_tail_ - tail_;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	1ad3      	subs	r3, r2, r3
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <_ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

  // Returns the size of the head section in bytes.
  size_t GetNonPersistentUsedBytes() const override;

  // Returns the size of all allocations in the tail section in bytes.
  size_t GetPersistentUsedBytes() const override;
 8005fd6:	f1a0 0004 	sub.w	r0, r0, #4
 8005fda:	f7ff bfed 	b.w	8005fb8 <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>

08005fde <_ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj>:

size_t SingleArenaBufferAllocator::GetAvailableMemory(size_t alignment) const {
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f9cd 	bl	800638e <_ZN6tflite14AlignPointerUpEPhj>
 8005ff4:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 f9df 	bl	80063c0 <_ZN6tflite16AlignPointerDownEPhj>
 8006002:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1ad3      	subs	r3, r2, r3
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* format, va_list args) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  vfprintf(stderr, format, args);
 800601e:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <DebugLog+0x24>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4618      	mov	r0, r3
 800602a:	f008 faff 	bl	800e62c <vfiprintf>
#endif
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000c80 	.word	0x20000c80

0800603c <_ZN6tflite12MicroContext20SetAlternateProfilerEPNS_22MicroProfilerInterfaceE>:
  virtual TfLiteStatus SetAlternateProfiler(
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
    return kTfLiteError;
 8006046:	2301      	movs	r3, #1
  }
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <_ZNK6tflite12MicroContext20GetAlternateProfilerEv>:
  virtual MicroProfilerInterface* GetAlternateProfiler() const {
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
    return nullptr;
 800605c:	2300      	movs	r3, #0
  }
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <_ZN6tflite25MicroArenaBufferAlignmentEv>:
namespace tflite {

// The default buffer alignment requirement.
// We align tensor buffers to 16-byte boundaries, since this is a common
// requirement for SIMD extensions.
constexpr int MicroArenaBufferAlignment() { return 16; }
 800606a:	b480      	push	{r7}
 800606c:	af00      	add	r7, sp, #0
 800606e:	2310      	movs	r3, #16
 8006070:	4618      	mov	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <_ZN6tflite12MicroContextC1Ev>:
class MicroContext {
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	4a04      	ldr	r2, [pc, #16]	@ (8006098 <_ZN6tflite12MicroContextC1Ev+0x1c>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	0801609c 	.word	0x0801609c

0800609c <_ZN6tflite12MicroContextD1Ev>:
  virtual ~MicroContext() = default;
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	4a04      	ldr	r2, [pc, #16]	@ (80060b8 <_ZN6tflite12MicroContextD1Ev+0x1c>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	0801609c 	.word	0x0801609c

080060bc <_ZN6tflite12MicroContextD0Ev>:
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff ffe9 	bl	800609c <_ZN6tflite12MicroContextD1Ev>
 80060ca:	2104      	movs	r1, #4
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f007 fcc4 	bl	800da5a <_ZdlPvj>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <_ZNK6tflite8SubGraph9operatorsEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Operator>> *operators() const {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	210a      	movs	r1, #10
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 f85d 	bl	80061a8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t>
 80060ee:	4603      	mov	r3, r0
  }
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_ZNK6tflite5Model9subgraphsEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2108      	movs	r1, #8
 8006104:	4618      	mov	r0, r3
 8006106:	f000 f85f 	bl	80061c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t>
 800610a:	4603      	mov	r3, r0
  }
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ffdd 	bl	80060dc <_ZNK6tflite8SubGraph9operatorsEv>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d008      	beq.n	8006144 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff ffd2 	bl	80060dc <_ZNK6tflite8SubGraph9operatorsEv>
 8006138:	4603      	mov	r3, r0
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f854 	bl	80061e8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4sizeEv>
 8006140:	4603      	mov	r3, r0
 8006142:	e000      	b.n	8006146 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 8006144:	2300      	movs	r3, #0
  }
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff ffcd 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800615e:	4602      	mov	r2, r0
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f000 f85b 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800616a:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff ffd1 	bl	8006114 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8006172:	4603      	mov	r3, r0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>:

TfLiteIntArray* FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array) {
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  // On little-endian machines, TfLiteIntArray happens to have the same memory
  // layout as flatbuffers:Vector<int32_t>, so we can reinterpret_cast the
  // flatbuffer vector and avoid a copy and malloc.
  // TODO(b/188459715): audit this usage of const_cast.
  return const_cast<TfLiteIntArray*>(
      reinterpret_cast<const TfLiteIntArray*>(flatbuffer_array));
 8006184:	687b      	ldr	r3, [r7, #4]
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfmEE>:

TfLiteFloatArray* FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<float>* flatbuffer_array) {
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  // On little-endian machines, TfLiteFloatArray happens to have the same memory
  // layout as flatbuffers:Vector<float>, so we can reinterpret_cast the
  // flatbuffer vector and avoid a copy and malloc.
  // TODO(b/188459715): audit this usage of const_cast.
  return const_cast<TfLiteFloatArray*>(
      reinterpret_cast<const TfLiteFloatArray*>(flatbuffer_array));
 800619a:	687b      	ldr	r3, [r7, #4]
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 80061b4:	887b      	ldrh	r3, [r7, #2]
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f857 	bl	800626c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t>
 80061be:	4603      	mov	r3, r0
  }
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 80061d4:	887b      	ldrh	r3, [r7, #2]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f867 	bl	80062ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t>
 80061de:	4603      	mov	r3, r0
  }
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fb fac3 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80061fa:	4603      	mov	r3, r0
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>:
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f7fb fab5 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8006216:	4603      	mov	r3, r0
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff ffea 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8006230:	4602      	mov	r2, r0
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	4293      	cmp	r3, r2
 8006236:	d305      	bcc.n	8006244 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm+0x24>
 8006238:	4b09      	ldr	r3, [pc, #36]	@ (8006260 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm+0x40>)
 800623a:	4a0a      	ldr	r2, [pc, #40]	@ (8006264 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm+0x44>)
 800623c:	21b0      	movs	r1, #176	@ 0xb0
 800623e:	480a      	ldr	r0, [pc, #40]	@ (8006268 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm+0x48>)
 8006240:	f007 fcc4 	bl	800dbcc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f851 	bl	80062ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4DataEv>
 800624a:	4603      	mov	r3, r0
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f858 	bl	8006304 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8006254:	4603      	mov	r3, r0
  }
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	08011cb0 	.word	0x08011cb0
 8006264:	08011cbc 	.word	0x08011cbc
 8006268:	08011d8c 	.word	0x08011d8c

0800626c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8006278:	887b      	ldrh	r3, [r7, #2]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7fa ff03 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8006282:	4603      	mov	r3, r0
 8006284:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	4413      	add	r3, r2
 800628c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800628e:	89fb      	ldrh	r3, [r7, #14]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t+0x36>
 8006294:	68b8      	ldr	r0, [r7, #8]
 8006296:	f7fb fa9a 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800629a:	4602      	mov	r2, r0
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4413      	add	r3, r2
                        : nullptr;
 80062a0:	e000      	b.n	80062a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80062a2:	2300      	movs	r3, #0
  }
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80062b8:	887b      	ldrh	r3, [r7, #2]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7fa fee3 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80062c2:	4603      	mov	r3, r0
 80062c4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	89fb      	ldrh	r3, [r7, #14]
 80062ca:	4413      	add	r3, r2
 80062cc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80062ce:	89fb      	ldrh	r3, [r7, #14]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d006      	beq.n	80062e2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t+0x36>
 80062d4:	68b8      	ldr	r0, [r7, #8]
 80062d6:	f7fb fa7a 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80062da:	4602      	mov	r2, r0
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4413      	add	r3, r2
                        : nullptr;
 80062e0:	e000      	b.n	80062e4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80062e2:	2300      	movs	r3, #0
  }
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4DataEv>:
  const uint8_t *Data() const {
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3304      	adds	r3, #4
  }
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4413      	add	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7fb fa58 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800631e:	4602      	mov	r2, r0
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
  }
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d201      	bcs.n	8006346 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	e000      	b.n	8006348 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006346:	687b      	ldr	r3, [r7, #4]
    }
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <_ZNK6tflite6Tensor5shapeEv>:
  const ::flatbuffers::Vector<int32_t> *shape() const {
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2104      	movs	r1, #4
 8006360:	4618      	mov	r0, r3
 8006362:	f7fd ffdc 	bl	800431e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8006366:	4603      	mov	r3, r0
  }
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	2106      	movs	r1, #6
 800637e:	4618      	mov	r0, r3
 8006380:	f7fd fc2d 	bl	8003bde <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8006384:	4603      	mov	r3, r0
  }
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/micro/tflite_bridge/flatbuffer_conversions_bridge.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	1e5a      	subs	r2, r3, #1
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 80063b0:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80063b2:	68bb      	ldr	r3, [r7, #8]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 80063dc:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80063de:	68bb      	ldr	r3, [r7, #8]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4413      	add	r3, r2
 80063fc:	1e5a      	subs	r2, r3, #1
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	fbb2 f2f3 	udiv	r2, r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	6039      	str	r1, [r7, #0]
 8006426:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	3b01      	subs	r3, #1
 800642c:	2b12      	cmp	r3, #18
 800642e:	d86d      	bhi.n	800650c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf0>
 8006430:	a201      	add	r2, pc, #4	@ (adr r2, 8006438 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8006432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006436:	bf00      	nop
 8006438:	08006495 	.word	0x08006495
 800643c:	080064ad 	.word	0x080064ad
 8006440:	080064bd 	.word	0x080064bd
 8006444:	080064d5 	.word	0x080064d5
 8006448:	0800650d 	.word	0x0800650d
 800644c:	080064e5 	.word	0x080064e5
 8006450:	080064a5 	.word	0x080064a5
 8006454:	080064f5 	.word	0x080064f5
 8006458:	080064cd 	.word	0x080064cd
 800645c:	08006485 	.word	0x08006485
 8006460:	0800649d 	.word	0x0800649d
 8006464:	080064fd 	.word	0x080064fd
 8006468:	080064dd 	.word	0x080064dd
 800646c:	080064ed 	.word	0x080064ed
 8006470:	0800650d 	.word	0x0800650d
 8006474:	080064b5 	.word	0x080064b5
 8006478:	080064c5 	.word	0x080064c5
 800647c:	08006505 	.word	0x08006505
 8006480:	0800648d 	.word	0x0800648d
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2202      	movs	r2, #2
 8006488:	601a      	str	r2, [r3, #0]
      break;
 800648a:	e041      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteBFloat16:
      *size = sizeof(int16_t);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2202      	movs	r2, #2
 8006490:	601a      	str	r2, [r3, #0]
      break;
 8006492:	e03d      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteFloat32:
      *size = sizeof(float);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2204      	movs	r2, #4
 8006498:	601a      	str	r2, [r3, #0]
      break;
 800649a:	e039      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteFloat64:
      *size = sizeof(double);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2208      	movs	r2, #8
 80064a0:	601a      	str	r2, [r3, #0]
      break;
 80064a2:	e035      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2202      	movs	r2, #2
 80064a8:	601a      	str	r2, [r3, #0]
      break;
 80064aa:	e031      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2204      	movs	r2, #4
 80064b0:	601a      	str	r2, [r3, #0]
      break;
 80064b2:	e02d      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2204      	movs	r2, #4
 80064b8:	601a      	str	r2, [r3, #0]
      break;
 80064ba:	e029      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2201      	movs	r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
      break;
 80064c2:	e025      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteUInt16:
      *size = sizeof(uint16_t);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2202      	movs	r2, #2
 80064c8:	601a      	str	r2, [r3, #0]
      break;
 80064ca:	e021      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
      break;
 80064d2:	e01d      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2208      	movs	r2, #8
 80064d8:	601a      	str	r2, [r3, #0]
      break;
 80064da:	e019      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2208      	movs	r2, #8
 80064e0:	601a      	str	r2, [r3, #0]
      break;
 80064e2:	e015      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteBool:
      *size = sizeof(bool);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
      break;
 80064ea:	e011      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteResource:
      *size = sizeof(int32_t);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2204      	movs	r2, #4
 80064f0:	601a      	str	r2, [r3, #0]
      break;
 80064f2:	e00d      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2208      	movs	r2, #8
 80064f8:	601a      	str	r2, [r3, #0]
      break;
 80064fa:	e009      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2210      	movs	r2, #16
 8006500:	601a      	str	r2, [r3, #0]
      break;
 8006502:	e005      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    case kTfLiteInt4:
      *size = sizeof(int8_t);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2201      	movs	r2, #1
 8006508:	601a      	str	r2, [r3, #0]
      break;
 800650a:	e001      	b.n	8006510 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf4>
    default:
      return kTfLiteError;
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xf6>
  }
  return kTfLiteOk;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop

08006520 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  int element_count = 1;
 800652c:	2301      	movs	r3, #1
 800652e:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff ff0f 	bl	8006354 <_ZNK6tflite6Tensor5shapeEv>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	bf14      	ite	ne
 800653c:	2301      	movne	r3, #1
 800653e:	2300      	moveq	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d022      	beq.n	800658c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x6c>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 8006546:	2300      	movs	r3, #0
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	e00f      	b.n	800656c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x4c>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7ff ff01 	bl	8006354 <_ZNK6tflite6Tensor5shapeEv>
 8006552:	4603      	mov	r3, r0
 8006554:	69b9      	ldr	r1, [r7, #24]
 8006556:	4618      	mov	r0, r3
 8006558:	f7fd ff62 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 800655c:	4602      	mov	r2, r0
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	3301      	adds	r3, #1
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fef1 	bl	8006354 <_ZNK6tflite6Tensor5shapeEv>
 8006572:	4603      	mov	r3, r0
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd ff45 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800657a:	4602      	mov	r2, r0
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	4293      	cmp	r3, r2
 8006580:	bf34      	ite	cc
 8006582:	2301      	movcc	r3, #1
 8006584:	2300      	movcs	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1df      	bne.n	800654c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff feef 	bl	8006370 <_ZNK6tflite6Tensor4typeEv>
 8006592:	4603      	mov	r3, r0
 8006594:	461a      	mov	r2, r3
 8006596:	f107 0315 	add.w	r3, r7, #21
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f007 f9e9 	bl	800d974 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 80065a2:	4603      	mov	r3, r0
 80065a4:	75fb      	strb	r3, [r7, #23]
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x90>
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	e013      	b.n	80065d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0xb8>
      ConvertTensorType(flatbuffer_tensor.type(), &tf_lite_type));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 80065b0:	7d7b      	ldrb	r3, [r7, #21]
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff ff31 	bl	800641c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 80065ba:	4603      	mov	r3, r0
 80065bc:	75bb      	strb	r3, [r7, #22]
 80065be:	7dbb      	ldrb	r3, [r7, #22]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0xa8>
 80065c4:	7dbb      	ldrb	r3, [r7, #22]
 80065c6:	e007      	b.n	80065d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0xb8>
  *bytes = element_count * (*type_size);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	fb03 f202 	mul.w	r2, r3, r2
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 80065f0:	f007 fae4 	bl	800dbbc <abort>

  int element_count = 1;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d015      	beq.n	800662c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006600:	2300      	movs	r3, #0
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	e00c      	b.n	8006620 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x40>
      element_count *= eval_tensor->dims->data[n];
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	fb02 f303 	mul.w	r3, r2, r3
 8006618:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	3301      	adds	r3, #1
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	429a      	cmp	r2, r3
 800662a:	dbec      	blt.n	8006606 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x26>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	7a1b      	ldrb	r3, [r3, #8]
 8006630:	f107 0208 	add.w	r2, r7, #8
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fef0 	bl	800641c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	e006      	b.n	8006658 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	fb03 f202 	mul.w	r2, r3, r2
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	210e      	movs	r1, #14
 800666e:	4618      	mov	r0, r3
 8006670:	f7fd fe26 	bl	80042c0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	bf14      	ite	ne
 800667a:	2301      	movne	r3, #1
 800667c:	2300      	moveq	r3, #0
 800667e:	b2db      	uxtb	r3, r3
  }
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	2104      	movs	r1, #4
 8006696:	4618      	mov	r0, r3
 8006698:	f7fb f8a7 	bl	80017ea <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800669c:	4603      	mov	r3, r0
  }
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <_ZNK6tflite8Operator6inputsEv>:
  const ::flatbuffers::Vector<int32_t> *inputs() const {
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2106      	movs	r1, #6
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fd fe33 	bl	800431e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 80066b8:	4603      	mov	r3, r0
  }
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <_ZNK6tflite8Operator7outputsEv>:
  const ::flatbuffers::Vector<int32_t> *outputs() const {
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2108      	movs	r1, #8
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fd fe25 	bl	800431e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 80066d4:	4603      	mov	r3, r0
  }
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <_ZNK6tflite8Operator13intermediatesEv>:
  const ::flatbuffers::Vector<int32_t> *intermediates() const {
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INTERMEDIATES);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2114      	movs	r1, #20
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fd fe17 	bl	800431e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 80066f0:	4603      	mov	r3, r0
  }
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <_ZNK6tflite8SubGraph7tensorsEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2104      	movs	r1, #4
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fddc 	bl	80072c4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t>
 800670c:	4603      	mov	r3, r0
  }
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <_ZNK6tflite8SubGraph6inputsEv>:
  const ::flatbuffers::Vector<int32_t> *inputs() const {
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2106      	movs	r1, #6
 8006722:	4618      	mov	r0, r3
 8006724:	f7fd fdfb 	bl	800431e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8006728:	4603      	mov	r3, r0
  }
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <_ZNK6tflite8SubGraph7outputsEv>:
  const ::flatbuffers::Vector<int32_t> *outputs() const {
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2108      	movs	r1, #8
 800673e:	4618      	mov	r0, r3
 8006740:	f7fd fded 	bl	800431e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8006744:	4603      	mov	r3, r0
  }
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <_ZNK6tflite6Buffer4dataEv>:
  const ::flatbuffers::Vector<uint8_t> *data() const {
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2104      	movs	r1, #4
 800675a:	4618      	mov	r0, r3
 800675c:	f7fd fd80 	bl	8004260 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>
 8006760:	4603      	mov	r3, r0
  }
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <_ZNK6tflite8Metadata4nameEv>:
  const ::flatbuffers::String *name() const {
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2104      	movs	r1, #4
 8006776:	4618      	mov	r0, r3
 8006778:	f7fd fde1 	bl	800433e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>
 800677c:	4603      	mov	r3, r0
  }
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	2106      	movs	r1, #6
 8006794:	4618      	mov	r0, r3
 8006796:	f7fb f828 	bl	80017ea <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800679a:	4603      	mov	r3, r0
  }
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <_ZNK6tflite5Model14operator_codesEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2106      	movs	r1, #6
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fd97 	bl	80072e4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t>
 80067b6:	4603      	mov	r3, r0
  }
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <_ZNK6tflite5Model7buffersEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	210c      	movs	r1, #12
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fd99 	bl	8007304 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t>
 80067d2:	4603      	mov	r3, r0
  }
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_ZNK6tflite5Model8metadataEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2110      	movs	r1, #16
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fd9b 	bl	8007324 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t>
 80067ee:	4603      	mov	r3, r0
  }
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>:

// Mark the given Allocation info as first created at the specified allocation
// scope count. Only the first creation must be recorded since the allocation
// scope count monotonically increases throughout the lifetime marking process.
void AllocationInfoBuilder::UpdateFirstCreated(AllocationInfo* current,
                                               int allocation_scope_count) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	da01      	bge.n	8006812 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi+0x1a>
 800680e:	f007 f9d5 	bl	800dbbc <abort>
  if (current->first_created == kUninitializedLifetime) {
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d102      	bne.n	8006822 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi+0x2a>
    current->first_created = allocation_scope_count;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]
  }
}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>:

// Mark the given AllocationInfo as last used at the specified allocation scope
// count. Update the last used marker every time, since the allocation scope
// count monotonically increases through the lifetime marking process.
void AllocationInfoBuilder::UpdateLastUsed(AllocationInfo* current,
                                           int allocation_scope_count) {
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	da01      	bge.n	8006844 <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi+0x1a>
 8006840:	f007 f9bc 	bl	800dbbc <abort>
  current->last_used = allocation_scope_count;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	60da      	str	r2, [r3, #12]
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:

TfLiteStatus AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(
    const Operator* op, internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles,
    SubgraphAllocations* allocations) {
 8006852:	b590      	push	{r4, r7, lr}
 8006854:	b08b      	sub	sp, #44	@ 0x2c
 8006856:	af02      	add	r7, sp, #8
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	607a      	str	r2, [r7, #4]
 800685e:	603b      	str	r3, [r7, #0]
  int first_subgraph_index = -1;
 8006860:	f04f 33ff 	mov.w	r3, #4294967295
 8006864:	61fb      	str	r3, [r7, #28]
  int second_subgraph_index = -1;
 8006866:	f04f 33ff 	mov.w	r3, #4294967295
 800686a:	61bb      	str	r3, [r7, #24]
  const OperatorCode* opcode =
      model_->operator_codes()->Get(op->opcode_index());
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff ff97 	bl	80067a4 <_ZNK6tflite5Model14operator_codesEv>
 8006876:	4604      	mov	r4, r0
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f7ff ff05 	bl	8006688 <_ZNK6tflite8Operator12opcode_indexEv>
 800687e:	4603      	mov	r3, r0
 8006880:	4619      	mov	r1, r3
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fdc6 	bl	8007414 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm>
 8006888:	6178      	str	r0, [r7, #20]
  switch (opcode->builtin_code()) {
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	f7fd f959 	bl	8003b42 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8006890:	4603      	mov	r3, r0
 8006892:	2b81      	cmp	r3, #129	@ 0x81
 8006894:	d017      	beq.n	80068c6 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x74>
 8006896:	2b81      	cmp	r3, #129	@ 0x81
 8006898:	dc2f      	bgt.n	80068fa <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xa8>
 800689a:	2b76      	cmp	r3, #118	@ 0x76
 800689c:	d002      	beq.n	80068a4 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x52>
 800689e:	2b77      	cmp	r3, #119	@ 0x77
 80068a0:	d01a      	beq.n	80068d8 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x86>
      second_subgraph_index =
          op->builtin_options_as_WhileOptions()->body_subgraph_index();
      break;
    }
    default: {
      break;
 80068a2:	e02a      	b.n	80068fa <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xa8>
          op->builtin_options_as_IfOptions()->then_subgraph_index();
 80068a4:	68b8      	ldr	r0, [r7, #8]
 80068a6:	f7fd fab8 	bl	8003e1a <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv>
 80068aa:	4603      	mov	r3, r0
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fd fa38 	bl	8003d22 <_ZNK6tflite9IfOptions19then_subgraph_indexEv>
 80068b2:	61f8      	str	r0, [r7, #28]
          op->builtin_options_as_IfOptions()->else_subgraph_index();
 80068b4:	68b8      	ldr	r0, [r7, #8]
 80068b6:	f7fd fab0 	bl	8003e1a <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv>
 80068ba:	4603      	mov	r3, r0
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fd fa3f 	bl	8003d40 <_ZNK6tflite9IfOptions19else_subgraph_indexEv>
 80068c2:	61b8      	str	r0, [r7, #24]
      break;
 80068c4:	e01a      	b.n	80068fc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xaa>
          op->builtin_options_as_CallOnceOptions()->init_subgraph_index();
 80068c6:	68b8      	ldr	r0, [r7, #8]
 80068c8:	f7fd facf 	bl	8003e6a <_ZNK6tflite8Operator34builtin_options_as_CallOnceOptionsEv>
 80068cc:	4603      	mov	r3, r0
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fd fa45 	bl	8003d5e <_ZNK6tflite15CallOnceOptions19init_subgraph_indexEv>
 80068d4:	61f8      	str	r0, [r7, #28]
      break;
 80068d6:	e011      	b.n	80068fc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xaa>
          op->builtin_options_as_WhileOptions()->cond_subgraph_index();
 80068d8:	68b8      	ldr	r0, [r7, #8]
 80068da:	f7fd fab2 	bl	8003e42 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv>
 80068de:	4603      	mov	r3, r0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fd fa4b 	bl	8003d7c <_ZNK6tflite12WhileOptions19cond_subgraph_indexEv>
 80068e6:	61f8      	str	r0, [r7, #28]
          op->builtin_options_as_WhileOptions()->body_subgraph_index();
 80068e8:	68b8      	ldr	r0, [r7, #8]
 80068ea:	f7fd faaa 	bl	8003e42 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv>
 80068ee:	4603      	mov	r3, r0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fd fa52 	bl	8003d9a <_ZNK6tflite12WhileOptions19body_subgraph_indexEv>
 80068f6:	61b8      	str	r0, [r7, #24]
      break;
 80068f8:	e000      	b.n	80068fc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xaa>
      break;
 80068fa:	bf00      	nop
    }
  }
  if (first_subgraph_index != -1) {
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d013      	beq.n	800692c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xda>
    // Enter a new allocation scope for each subgraph.
    allocation_scope_count_++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	621a      	str	r2, [r3, #32]
    TF_LITE_ENSURE_STATUS(
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	69f9      	ldr	r1, [r7, #28]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 fa5e 	bl	8006dda <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 800691e:	4603      	mov	r3, r0
 8006920:	74fb      	strb	r3, [r7, #19]
 8006922:	7cfb      	ldrb	r3, [r7, #19]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xda>
 8006928:	7cfb      	ldrb	r3, [r7, #19]
 800692a:	e018      	b.n	800695e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10c>
        MarkAllocationLifetimes(first_subgraph_index, scratch_buffer_requests,
                                scratch_buffer_handles, allocations));
  }
  if (second_subgraph_index != -1) {
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d013      	beq.n	800695c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10a>
    // Enter a new allocation scope for each subgraph.
    allocation_scope_count_++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	621a      	str	r2, [r3, #32]
    TF_LITE_ENSURE_STATUS(
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	69b9      	ldr	r1, [r7, #24]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fa46 	bl	8006dda <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 800694e:	4603      	mov	r3, r0
 8006950:	74bb      	strb	r3, [r7, #18]
 8006952:	7cbb      	ldrb	r3, [r7, #18]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10a>
 8006958:	7cbb      	ldrb	r3, [r7, #18]
 800695a:	e000      	b.n	800695e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10c>
        MarkAllocationLifetimes(second_subgraph_index, scratch_buffer_requests,
                                scratch_buffer_handles, allocations));
  }
  return kTfLiteOk;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3724      	adds	r7, #36	@ 0x24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd90      	pop	{r4, r7, pc}
	...

08006968 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>:

TfLiteStatus AllocationInfoBuilder::CreateAllocationInfo(
    int scratch_buffer_request_count) {
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fbbe 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800697c:	4603      	mov	r3, r0
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fc40 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8006984:	4603      	mov	r3, r0
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	60fb      	str	r3, [r7, #12]
  info_.subgraph_offsets =
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6858      	ldr	r0, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3308      	adds	r3, #8
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2204      	movs	r2, #4
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	4798      	blx	r3
 800699e:	4602      	mov	r2, r0
  info_.subgraph_offsets =
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	611a      	str	r2, [r3, #16]
          subgraph_offsets_length, alignof(size_t)));
  if (info_.subgraph_offsets == nullptr) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d105      	bne.n	80069b8 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x50>
    MicroPrintf(
 80069ac:	68f9      	ldr	r1, [r7, #12]
 80069ae:	4836      	ldr	r0, [pc, #216]	@ (8006a88 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x120>)
 80069b0:	f004 f87a 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "Failed to allocate memory for memory planning, %d bytes required",
        subgraph_offsets_length);
    return kTfLiteError;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e063      	b.n	8006a80 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x118>
  }
  size_t tensor_count = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	e01f      	b.n	8006a02 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x9a>
       subgraph_idx++) {
    // Add all tensors in each subgraph to the AllocationInfo array. Even weight
    // tensors are added but marked with needs_allocating = false. Including all
    // tensors in the graph here simplifies logic.
    info_.subgraph_offsets[subgraph_idx] = tensor_count;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	601a      	str	r2, [r3, #0]
    tensor_count += model_->subgraphs()->Get(subgraph_idx)->tensors()->size();
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff fb8f 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 80069da:	4603      	mov	r3, r0
 80069dc:	6939      	ldr	r1, [r7, #16]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fc1e 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 80069e4:	4603      	mov	r3, r0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fe87 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 80069ec:	4603      	mov	r3, r0
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fca8 	bl	8007344 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 80069f4:	4602      	mov	r2, r0
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	4413      	add	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	3301      	adds	r3, #1
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff fb76 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fbf8 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	bf34      	ite	cc
 8006a1c:	2301      	movcc	r3, #1
 8006a1e:	2300      	movcs	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1cd      	bne.n	80069c2 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x5a>
  }
  info_.tensor_count = tensor_count;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	619a      	str	r2, [r3, #24]

  // Scratch buffer allocations follow tensor allocations, so the scratch offset
  // is equal to the number of tensor allocations.
  info_.scratch_offset = tensor_count;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	615a      	str	r2, [r3, #20]
  info_.allocation_info_count = tensor_count + scratch_buffer_request_count;
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	441a      	add	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60da      	str	r2, [r3, #12]
  info_.scratch_buffer_count = scratch_buffer_request_count;
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	61da      	str	r2, [r3, #28]
  size_t bytes = sizeof(AllocationInfo) * info_.allocation_info_count;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	4613      	mov	r3, r2
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	4413      	add	r3, r2
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	60bb      	str	r3, [r7, #8]

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  info_.allocation_info = reinterpret_cast<AllocationInfo*>(
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6858      	ldr	r0, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	4798      	blx	r3
 8006a64:	4602      	mov	r2, r0
  info_.allocation_info = reinterpret_cast<AllocationInfo*>(
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	609a      	str	r2, [r3, #8]
  if (info_.allocation_info == nullptr) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d105      	bne.n	8006a7e <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x116>
    MicroPrintf(
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	4804      	ldr	r0, [pc, #16]	@ (8006a88 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x120>)
 8006a76:	f004 f817 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "Failed to allocate memory for memory planning, %d bytes required",
        bytes);
    return kTfLiteError;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x118>
  }
  return kTfLiteOk;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	08011e44 	.word	0x08011e44

08006a8c <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>:

TfLiteStatus AllocationInfoBuilder::FreeAllocationInfo() {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  non_persistent_allocator_->DeallocateTemp(
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6858      	ldr	r0, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	330c      	adds	r3, #12
 8006aa0:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<uint8_t*>(info_.allocation_info));
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6892      	ldr	r2, [r2, #8]
  non_persistent_allocator_->DeallocateTemp(
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4798      	blx	r3
  non_persistent_allocator_->DeallocateTemp(
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6858      	ldr	r0, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<uint8_t*>(info_.subgraph_offsets));
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6912      	ldr	r2, [r2, #16]
  non_persistent_allocator_->DeallocateTemp(
 8006abc:	4611      	mov	r1, r2
 8006abe:	4798      	blx	r3
  return kTfLiteOk;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus AllocationInfoBuilder::ValidateSubgraph(
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08c      	sub	sp, #48	@ 0x30
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8006ad8:	68b8      	ldr	r0, [r7, #8]
 8006ada:	f7ff fb1b 	bl	8006114 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8006ade:	6278      	str	r0, [r7, #36]	@ 0x24

  for (uint32_t i = 0; i < operators_size; i++) {
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ae4:	e052      	b.n	8006b8c <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc0>
    const auto op = subgraph->operators()->Get(i);
 8006ae6:	68b8      	ldr	r0, [r7, #8]
 8006ae8:	f7ff faf8 	bl	80060dc <_ZNK6tflite8SubGraph9operatorsEv>
 8006aec:	4603      	mov	r3, r0
 8006aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fc5b 	bl	80073ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm>
 8006af6:	6238      	str	r0, [r7, #32]
    for (size_t n = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006afc:	e02d      	b.n	8006b5a <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x8e>
         op->intermediates() != nullptr && n < op->intermediates()->size();
         n++) {
      const int tensor_index = op->intermediates()->Get(n);
 8006afe:	6a38      	ldr	r0, [r7, #32]
 8006b00:	f7ff fded 	bl	80066de <_ZNK6tflite8Operator13intermediatesEv>
 8006b04:	4603      	mov	r3, r0
 8006b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fd fc89 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8006b0e:	61f8      	str	r0, [r7, #28]
      size_t tensor_size = -1;
 8006b10:	f04f 33ff 	mov.w	r3, #4294967295
 8006b14:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	461a      	mov	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	f107 0214 	add.w	r2, r7, #20
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff fd57 	bl	80065e0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8006b32:	4603      	mov	r3, r0
 8006b34:	76fb      	strb	r3, [r7, #27]
 8006b36:	7efb      	ldrb	r3, [r7, #27]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x74>
 8006b3c:	7efb      	ldrb	r3, [r7, #27]
 8006b3e:	e02a      	b.n	8006b96 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xca>
          &eval_tensors[tensor_index], &tensor_size));
      if (tensor_size != 0) {
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d006      	beq.n	8006b54 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x88>
        MicroPrintf(
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4815      	ldr	r0, [pc, #84]	@ (8006ba0 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd4>)
 8006b4c:	f003 ffac 	bl	800aaa8 <_Z11MicroPrintfPKcz>
            "Does not support intermediate tensor with non-zero size: %d",
            tensor_size);
        return kTfLiteError;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e020      	b.n	8006b96 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xca>
    for (size_t n = 0;
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	3301      	adds	r3, #1
 8006b58:	62bb      	str	r3, [r7, #40]	@ 0x28
         op->intermediates() != nullptr && n < op->intermediates()->size();
 8006b5a:	6a38      	ldr	r0, [r7, #32]
 8006b5c:	f7ff fdbf 	bl	80066de <_ZNK6tflite8Operator13intermediatesEv>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00c      	beq.n	8006b80 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xb4>
 8006b66:	6a38      	ldr	r0, [r7, #32]
 8006b68:	f7ff fdb9 	bl	80066de <_ZNK6tflite8Operator13intermediatesEv>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fd fc48 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8006b74:	4602      	mov	r2, r0
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d201      	bcs.n	8006b80 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xb4>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xb6>
 8006b80:	2300      	movs	r3, #0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1bb      	bne.n	8006afe <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
  for (uint32_t i = 0; i < operators_size; i++) {
 8006b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b88:	3301      	adds	r3, #1
 8006b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d3a8      	bcc.n	8006ae6 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x1a>
      }
    }
  }
  return kTfLiteOk;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3730      	adds	r7, #48	@ 0x30
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	08011e88 	.word	0x08011e88

08006ba4 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>:

TfLiteStatus AllocationInfoBuilder::InitializeAllocationInfo(
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b092      	sub	sp, #72	@ 0x48
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  AllocationInfo* allocation_info = info_.allocation_info;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
  // Initialize allocation info for every tensor in every subgraph.
  int offline_index = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	647b      	str	r3, [r7, #68]	@ 0x44
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8006bba:	2300      	movs	r3, #0
 8006bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bbe:	e0c7      	b.n	8006d50 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1ac>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff fa97 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fb26 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8006bd4:	62b8      	str	r0, [r7, #40]	@ 0x28
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 8006bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	4413      	add	r3, r2
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
    AllocationInfo* subgraph_allocation_info =
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	461a      	mov	r2, r3
    AllocationInfo* subgraph_allocation_info =
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfa:	4413      	add	r3, r2
 8006bfc:	623b      	str	r3, [r7, #32]

    // Ensure constraints are met.
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7ff ff62 	bl	8006acc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	7ffb      	ldrb	r3, [r7, #31]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x72>
 8006c12:	7ffb      	ldrb	r3, [r7, #31]
 8006c14:	e0dd      	b.n	8006dd2 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x22e>

    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8006c16:	2300      	movs	r3, #0
 8006c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c1a:	e085      	b.n	8006d28 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x184>
      AllocationInfo* current = &subgraph_allocation_info[i];
 8006c1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c1e:	4613      	mov	r3, r2
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	4413      	add	r3, r2
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	461a      	mov	r2, r3
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	61bb      	str	r3, [r7, #24]
      current->output_ptr = &(eval_tensors[i].data.data);
 8006c2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c30:	4613      	mov	r3, r2
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	4413      	add	r3, r2
 8006c3e:	461a      	mov	r2, r3
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	605a      	str	r2, [r3, #4]

      TF_LITE_ENSURE_STATUS(
 8006c44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c46:	4613      	mov	r3, r2
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	4413      	add	r3, r2
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4611      	mov	r1, r2
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fcc1 	bl	80065e0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	75fb      	strb	r3, [r7, #23]
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xc8>
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	e0b2      	b.n	8006dd2 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x22e>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

      current->first_created = kUninitializedLifetime;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c72:	609a      	str	r2, [r3, #8]
      current->last_used = kUninitializedLifetime;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7a:	60da      	str	r2, [r3, #12]
      current->needs_allocating =
          (eval_tensors[i].data.data == nullptr) &&
 8006c7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c7e:	4613      	mov	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	461a      	mov	r2, r3
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	4413      	add	r3, r2
 8006c8c:	681b      	ldr	r3, [r3, #0]
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d117      	bne.n	8006cc2 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x11e>
 8006c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c94:	f7ff fd31 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fb5f 	bl	8007360 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fcdb 	bl	8006660 <_ZNK6tflite6Tensor11is_variableEv>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f083 0301 	eor.w	r3, r3, #1
 8006cb0:	b2db      	uxtb	r3, r3
          (eval_tensors[i].data.data == nullptr) &&
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x11e>
          (current->bytes != 0);
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	681b      	ldr	r3, [r3, #0]
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x11e>
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	e000      	b.n	8006cc4 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x120>
 8006cc2:	2200      	movs	r2, #0
      current->needs_allocating =
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	751a      	strb	r2, [r3, #20]
      if (offline_offsets) {
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d025      	beq.n	8006d1a <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x176>
        current->offline_offset = offline_offsets[offline_index++];
 8006cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	4413      	add	r3, r2
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	611a      	str	r2, [r3, #16]

        // Mark offline planned variable tensors so they can get an offline
        // offset and be handled offline.
        if (subgraph->tensors()->Get(i)->is_variable() &&
 8006ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce2:	f7ff fd0a 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fb38 	bl	8007360 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fcb4 	bl	8006660 <_ZNK6tflite6Tensor11is_variableEv>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d006      	beq.n	8006d0c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x168>
            current->offline_offset != kOnlinePlannedBuffer) {
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	691b      	ldr	r3, [r3, #16]
        if (subgraph->tensors()->Get(i)->is_variable() &&
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d001      	beq.n	8006d0c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x168>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x16a>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x17e>
          current->needs_allocating = true;
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2201      	movs	r2, #1
 8006d16:	751a      	strb	r2, [r3, #20]
 8006d18:	e003      	b.n	8006d22 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x17e>
        }
      } else {
        current->offline_offset = kOnlinePlannedBuffer;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d20:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8006d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d24:	3301      	adds	r3, #1
 8006d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d2a:	f7ff fce6 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb07 	bl	8007344 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 8006d36:	4602      	mov	r2, r0
 8006d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	bf34      	ite	cc
 8006d3e:	2301      	movcc	r3, #1
 8006d40:	2300      	movcs	r3, #0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f47f af69 	bne.w	8006c1c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x78>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8006d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff f9cf 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fa51 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8006d62:	4602      	mov	r2, r0
 8006d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d66:	4293      	cmp	r3, r2
 8006d68:	bf34      	ite	cc
 8006d6a:	2301      	movcc	r3, #1
 8006d6c:	2300      	movcs	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f47f af25 	bne.w	8006bc0 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1c>
      }
    }
  }
  // Initialize allocation info for every scratch buffer.
  AllocationInfo* scratch_allocation_info =
      &allocation_info[info_.scratch_offset];
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	695a      	ldr	r2, [r3, #20]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	461a      	mov	r2, r3
  AllocationInfo* scratch_allocation_info =
 8006d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d86:	4413      	add	r3, r2
 8006d88:	633b      	str	r3, [r7, #48]	@ 0x30
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d8e:	e01a      	b.n	8006dc6 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x222>
    AllocationInfo* current = &scratch_allocation_info[i];
 8006d90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d92:	4613      	mov	r3, r2
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	4413      	add	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	4413      	add	r3, r2
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    current->first_created = kUninitializedLifetime;
 8006da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da4:	f04f 32ff 	mov.w	r2, #4294967295
 8006da8:	609a      	str	r2, [r3, #8]
    current->last_used = kUninitializedLifetime;
 8006daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dac:	f04f 32ff 	mov.w	r2, #4294967295
 8006db0:	60da      	str	r2, [r3, #12]
    current->needs_allocating = true;
 8006db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db4:	2201      	movs	r2, #1
 8006db6:	751a      	strb	r2, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
 8006db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dba:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbe:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d3df      	bcc.n	8006d90 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1ec>
  }
  return kTfLiteOk;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3748      	adds	r7, #72	@ 0x48
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:

TfLiteStatus AllocationInfoBuilder::MarkAllocationLifetimes(
    int subgraph_idx, internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles,
    SubgraphAllocations* allocations) {
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b0a4      	sub	sp, #144	@ 0x90
 8006dde:	af02      	add	r7, sp, #8
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff f983 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 8006df2:	4602      	mov	r2, r0
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4619      	mov	r1, r3
 8006df8:	4610      	mov	r0, r2
 8006dfa:	f7ff fa11 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8006dfe:	66b8      	str	r0, [r7, #104]	@ 0x68

  AllocationInfo* allocation_info = info_.allocation_info;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	667b      	str	r3, [r7, #100]	@ 0x64
  // Each subgraph's tensor allocations are in a contiguous block starting at
  // subgraph_offsets_[subgraph index] with one entry per tensor.
  AllocationInfo* subgraph_allocation_info =
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4613      	mov	r3, r2
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	4413      	add	r3, r2
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	461a      	mov	r2, r3
  AllocationInfo* subgraph_allocation_info =
 8006e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e1e:	4413      	add	r3, r2
 8006e20:	663b      	str	r3, [r7, #96]	@ 0x60

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8006e22:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006e24:	f7ff f976 	bl	8006114 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8006e28:	65f8      	str	r0, [r7, #92]	@ 0x5c
  // Mark all inputs as created at the start of the subgraph invocation.
  for (size_t i = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e30:	e025      	b.n	8006e7e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xa4>
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
    const int tensor_index = subgraph->inputs()->Get(i);
 8006e32:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006e34:	f7ff fc6f 	bl	8006716 <_ZNK6tflite8SubGraph6inputsEv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fd faee 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8006e44:	6278      	str	r0, [r7, #36]	@ 0x24
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8006e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e48:	4613      	mov	r3, r2
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	461a      	mov	r2, r3
 8006e52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e54:	4413      	add	r3, r2
 8006e56:	623b      	str	r3, [r7, #32]
    UpdateFirstCreated(current, allocation_scope_count_);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6a39      	ldr	r1, [r7, #32]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff fcc9 	bl	80067f8 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    // This will ensure that the tensors that are inputs to the subgraphs
    // but not used in any ops also have a reasonable lifetime.
    UpdateLastUsed(current, allocation_scope_count_);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6a39      	ldr	r1, [r7, #32]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff fcdb 	bl	800682a <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
  for (size_t i = 0;
 8006e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e78:	3301      	adds	r3, #1
 8006e7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
 8006e7e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006e80:	f7ff fc49 	bl	8006716 <_ZNK6tflite8SubGraph6inputsEv>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00d      	beq.n	8006ea6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xcc>
 8006e8a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006e8c:	f7ff fc43 	bl	8006716 <_ZNK6tflite8SubGraph6inputsEv>
 8006e90:	4603      	mov	r3, r0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fd fab6 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d201      	bcs.n	8006ea6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xcc>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xce>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1c2      	bne.n	8006e32 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x58>
  }

  for (uint32_t i = 0; i < operators_size; i++) {
 8006eac:	2300      	movs	r3, #0
 8006eae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006eb2:	e10c      	b.n	80070ce <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2f4>
    // Each operator has a new allocation scope.
    allocation_scope_count_++;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]
    const auto* op = subgraph->operators()->Get(i);
 8006ebe:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006ec0:	f7ff f90c 	bl	80060dc <_ZNK6tflite8SubGraph9operatorsEv>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fa6e 	bl	80073ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm>
 8006ed0:	6538      	str	r0, [r7, #80]	@ 0x50
    // Figure out when the first creation and use of each tensor is.
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ed6:	e01b      	b.n	8006f10 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x136>
         ++n) {
      const int tensor_index = op->outputs()->Get(n);
 8006ed8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006eda:	f7ff fbf2 	bl	80066c2 <_ZNK6tflite8Operator7outputsEv>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fd fa9c 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8006ee8:	62f8      	str	r0, [r7, #44]	@ 0x2c
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8006eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eec:	4613      	mov	r3, r2
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4413      	add	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ef8:	4413      	add	r3, r2
 8006efa:	62bb      	str	r3, [r7, #40]	@ 0x28
      UpdateFirstCreated(current, allocation_scope_count_);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fc77 	bl	80067f8 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8006f0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f10:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006f12:	f7ff fbd6 	bl	80066c2 <_ZNK6tflite8Operator7outputsEv>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00c      	beq.n	8006f36 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x15c>
 8006f1c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006f1e:	f7ff fbd0 	bl	80066c2 <_ZNK6tflite8Operator7outputsEv>
 8006f22:	4603      	mov	r3, r0
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fd fa6d 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d201      	bcs.n	8006f36 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x15c>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x15e>
 8006f36:	2300      	movs	r3, #0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1cd      	bne.n	8006ed8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xfe>
    }

    // Keep track of scope count before any subgraphs, so that scratch buffers'
    // lifetime within a control flow op properly overlaps with all subgraphs.
    int start_allocation_scope_count = allocation_scope_count_;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Control flow operators can invoke subgraphs. Plan these subgraphs
    // before continuing on to the rest of the graph.
    MarkSubgraphLifetimesIfNecessary(op, scratch_buffer_requests,
 8006f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7ff fc7f 	bl	8006852 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
                                     scratch_buffer_handles, allocations);

    // Figure out when the last use of each tensor is.
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 8006f54:	2300      	movs	r3, #0
 8006f56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f58:	e01e      	b.n	8006f98 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1be>
         ++n) {
      const int tensor_index = op->inputs()->Get(n);
 8006f5a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006f5c:	f7ff fba3 	bl	80066a6 <_ZNK6tflite8Operator6inputsEv>
 8006f60:	4603      	mov	r3, r0
 8006f62:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fd fa5b 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8006f6a:	6378      	str	r0, [r7, #52]	@ 0x34
      // Optional bias tensors can have an index of -1 when they are omitted.
      if (tensor_index >= 0) {
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	db0f      	blt.n	8006f92 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1b8>
        AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8006f72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f74:	4613      	mov	r3, r2
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	4413      	add	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f80:	4413      	add	r3, r2
 8006f82:	633b      	str	r3, [r7, #48]	@ 0x30
        // No need to update creation since it is either marked by the subgraph
        // or producer op, or it is not part of the memory plan (weight, bias
        // tensor).
        UpdateLastUsed(current, allocation_scope_count_);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff fc4c 	bl	800682a <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 8006f92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f94:	3301      	adds	r3, #1
 8006f96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f98:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006f9a:	f7ff fb84 	bl	80066a6 <_ZNK6tflite8Operator6inputsEv>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00c      	beq.n	8006fbe <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1e4>
 8006fa4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006fa6:	f7ff fb7e 	bl	80066a6 <_ZNK6tflite8Operator6inputsEv>
 8006faa:	4603      	mov	r3, r0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fd fa29 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d201      	bcs.n	8006fbe <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1e4>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1e6>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1ca      	bne.n	8006f5a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x180>
      }
    }
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fc8:	e01b      	b.n	8007002 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x228>
         ++n) {
      const int tensor_index = op->outputs()->Get(n);
 8006fca:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006fcc:	f7ff fb79 	bl	80066c2 <_ZNK6tflite8Operator7outputsEv>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fd fa23 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8006fda:	63f8      	str	r0, [r7, #60]	@ 0x3c
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8006fdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006fde:	4613      	mov	r3, r2
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	4413      	add	r3, r2
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fea:	4413      	add	r3, r2
 8006fec:	63bb      	str	r3, [r7, #56]	@ 0x38
      UpdateLastUsed(current, allocation_scope_count_);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff fc17 	bl	800682a <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8006ffc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ffe:	3301      	adds	r3, #1
 8007000:	677b      	str	r3, [r7, #116]	@ 0x74
 8007002:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007004:	f7ff fb5d 	bl	80066c2 <_ZNK6tflite8Operator7outputsEv>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x24e>
 800700e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007010:	f7ff fb57 	bl	80066c2 <_ZNK6tflite8Operator7outputsEv>
 8007014:	4603      	mov	r3, r0
 8007016:	4618      	mov	r0, r3
 8007018:	f7fd f9f4 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800701c:	4602      	mov	r2, r0
 800701e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007020:	4293      	cmp	r3, r2
 8007022:	d201      	bcs.n	8007028 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x24e>
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x250>
 8007028:	2300      	movs	r3, #0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1cd      	bne.n	8006fca <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1f0>
    // Mark thse lifetime of scratch buffers belonging to the current node. This
    // operation is O(N * M) where N is the total number of visited nodes and M
    // is the total number of scratch buffers.
    // TODO(b/217794030): Optimize this memory planning code.
    AllocationInfo* scratch_allocation_info =
        &allocation_info[info_.scratch_offset];
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	695a      	ldr	r2, [r3, #20]
 8007032:	4613      	mov	r3, r2
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	4413      	add	r3, r2
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	461a      	mov	r2, r3
    AllocationInfo* scratch_allocation_info =
 800703c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800703e:	4413      	add	r3, r2
 8007040:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 8007042:	2300      	movs	r3, #0
 8007044:	673b      	str	r3, [r7, #112]	@ 0x70
 8007046:	e038      	b.n	80070ba <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2e0>
         scratch_idx++) {
      internal::ScratchBufferRequest request =
          scratch_buffer_requests[scratch_idx];
 8007048:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800704a:	4613      	mov	r3, r2
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	461a      	mov	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	441a      	add	r2, r3
      internal::ScratchBufferRequest request =
 8007058:	f107 0314 	add.w	r3, r7, #20
 800705c:	ca07      	ldmia	r2, {r0, r1, r2}
 800705e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      AllocationInfo* current = &scratch_allocation_info[scratch_idx];
 8007062:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007064:	4613      	mov	r3, r2
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	4413      	add	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	461a      	mov	r2, r3
 800706e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007070:	4413      	add	r3, r2
 8007072:	647b      	str	r3, [r7, #68]	@ 0x44
      if (request.node_idx == static_cast<int>(i) &&
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800707a:	429a      	cmp	r2, r3
 800707c:	d11a      	bne.n	80070b4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2da>
          request.subgraph_idx == static_cast<int>(subgraph_idx)) {
 800707e:	69fb      	ldr	r3, [r7, #28]
      if (request.node_idx == static_cast<int>(i) &&
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	d116      	bne.n	80070b4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2da>
        ScratchBufferHandle* current_handle =
            &(scratch_buffer_handles[scratch_idx]);
 8007086:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007088:	009b      	lsls	r3, r3, #2
        ScratchBufferHandle* current_handle =
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	4413      	add	r3, r2
 800708e:	643b      	str	r3, [r7, #64]	@ 0x40
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8007090:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007094:	605a      	str	r2, [r3, #4]
        current->bytes = request.bytes;
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800709a:	601a      	str	r2, [r3, #0]
        UpdateFirstCreated(current, start_allocation_scope_count);
 800709c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800709e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff fba9 	bl	80067f8 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
        UpdateLastUsed(current, allocation_scope_count_);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	461a      	mov	r2, r3
 80070ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff fbbb 	bl	800682a <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 80070b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070b6:	3301      	adds	r3, #1
 80070b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d3c1      	bcc.n	8007048 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x26e>
  for (uint32_t i = 0; i < operators_size; i++) {
 80070c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070c8:	3301      	adds	r3, #1
 80070ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070d4:	429a      	cmp	r2, r3
 80070d6:	f4ff aeed 	bcc.w	8006eb4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xda>
      }
    }
  }

  // Mark all outputs as persistent to the end of the subgraph invocation.
  for (size_t i = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070de:	e022      	b.n	8007126 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x34c>
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
    const int tensor_index = subgraph->outputs()->Get(i);
 80070e0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80070e2:	f7ff fb26 	bl	8006732 <_ZNK6tflite8SubGraph7outputsEv>
 80070e6:	4603      	mov	r3, r0
 80070e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd f998 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 80070f0:	65b8      	str	r0, [r7, #88]	@ 0x58
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 80070f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070f4:	4613      	mov	r3, r2
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	4413      	add	r3, r2
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	461a      	mov	r2, r3
 80070fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007100:	4413      	add	r3, r2
 8007102:	657b      	str	r3, [r7, #84]	@ 0x54
    // Make sure to assign the First created value of the subgraph output
    // This will handle the case where the subgraph is empty. This helps
    // ensure all tensors have valid lifetimes before those are used by the
    // memory planner.
    UpdateFirstCreated(current, allocation_scope_count_);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	461a      	mov	r2, r3
 800710a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fb73 	bl	80067f8 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    UpdateLastUsed(current, allocation_scope_count_);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	461a      	mov	r2, r3
 8007118:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff fb85 	bl	800682a <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
  for (size_t i = 0;
 8007120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007122:	3301      	adds	r3, #1
 8007124:	66fb      	str	r3, [r7, #108]	@ 0x6c
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
 8007126:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8007128:	f7ff fb03 	bl	8006732 <_ZNK6tflite8SubGraph7outputsEv>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00c      	beq.n	800714c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x372>
 8007132:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8007134:	f7ff fafd 	bl	8006732 <_ZNK6tflite8SubGraph7outputsEv>
 8007138:	4603      	mov	r3, r0
 800713a:	4618      	mov	r0, r3
 800713c:	f7fd f962 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8007140:	4602      	mov	r2, r0
 8007142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007144:	4293      	cmp	r3, r2
 8007146:	d201      	bcs.n	800714c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x372>
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x374>
 800714c:	2300      	movs	r3, #0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1c6      	bne.n	80070e0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x306>
  }
  return kTfLiteOk;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3788      	adds	r7, #136	@ 0x88
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const int32_t** offline_planner_offsets) {
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b08d      	sub	sp, #52	@ 0x34
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  if (model_->metadata()) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff fb36 	bl	80067dc <_ZNK6tflite5Model8metadataEv>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	bf14      	ite	ne
 8007176:	2301      	movne	r3, #1
 8007178:	2300      	moveq	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 808a 	beq.w	8007296 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x13a>
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 8007182:	2300      	movs	r3, #0
 8007184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007186:	e073      	b.n	8007270 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x114>
      auto metadata = model_->metadata()->Get(i);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fb25 	bl	80067dc <_ZNK6tflite5Model8metadataEv>
 8007192:	4603      	mov	r3, r0
 8007194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f9a4 	bl	80074e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm>
 800719c:	62b8      	str	r0, [r7, #40]	@ 0x28

      if (metadata->name()) {
 800719e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071a0:	f7ff fae3 	bl	800676a <_ZNK6tflite8Metadata4nameEv>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bf14      	ite	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	2300      	moveq	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d05a      	beq.n	800726a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x10e>
        const size_t metadata_name_size = metadata->name()->size();
 80071b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071b6:	f7ff fad8 	bl	800676a <_ZNK6tflite8Metadata4nameEv>
 80071ba:	4603      	mov	r3, r0
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 f873 	bl	80072a8 <_ZNK11flatbuffers6VectorIcmE4sizeEv>
 80071c2:	4603      	mov	r3, r0
 80071c4:	60fb      	str	r3, [r7, #12]

        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80071c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c8:	f7ff facf 	bl	800676a <_ZNK6tflite8Metadata4nameEv>
 80071cc:	4603      	mov	r3, r0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fc fd45 	bl	8003c5e <_ZNK11flatbuffers6String5c_strEv>
 80071d4:	4604      	mov	r4, r0
                     std::min(metadata_name_size,
                              strlen(kOfflineMemAllocMetadata))) == 0) &&
 80071d6:	2317      	movs	r3, #23
 80071d8:	613b      	str	r3, [r7, #16]
                     std::min(metadata_name_size,
 80071da:	f107 0210 	add.w	r2, r7, #16
 80071de:	f107 030c 	add.w	r3, r7, #12
 80071e2:	4611      	mov	r1, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff f8a1 	bl	800632c <_ZSt3minIjERKT_S2_S2_>
 80071ea:	4603      	mov	r3, r0
        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	492b      	ldr	r1, [pc, #172]	@ (80072a0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x144>)
 80071f2:	4620      	mov	r0, r4
 80071f4:	f007 fda0 	bl	800ed38 <strncmp>
 80071f8:	4603      	mov	r3, r0
                              strlen(kOfflineMemAllocMetadata))) == 0) &&
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d104      	bne.n	8007208 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xac>
            metadata_name_size == strlen(kOfflineMemAllocMetadata)) {
 80071fe:	68fb      	ldr	r3, [r7, #12]
                              strlen(kOfflineMemAllocMetadata))) == 0) &&
 8007200:	2b17      	cmp	r3, #23
 8007202:	d101      	bne.n	8007208 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xac>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xae>
 8007208:	2300      	movs	r3, #0
        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800720a:	2b00      	cmp	r3, #0
 800720c:	d02d      	beq.n	800726a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x10e>
          const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
              model_->buffers();
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff fad4 	bl	80067c0 <_ZNK6tflite5Model7buffersEv>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24
          auto* buffer = (*buffers)[metadata->buffer()];
 800721a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800721c:	f7ff fab3 	bl	8006786 <_ZNK6tflite8Metadata6bufferEv>
 8007220:	4603      	mov	r3, r0
 8007222:	4619      	mov	r1, r3
 8007224:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007226:	f000 f983 	bl	8007530 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmEixEm>
 800722a:	6238      	str	r0, [r7, #32]
          auto* array = buffer->data();
 800722c:	6a38      	ldr	r0, [r7, #32]
 800722e:	f7ff fa8e 	bl	800674e <_ZNK6tflite6Buffer4dataEv>
 8007232:	61f8      	str	r0, [r7, #28]
          const uint32_t* metadata_buffer =
              reinterpret_cast<const uint32_t*>(array->data());
 8007234:	69f8      	ldr	r0, [r7, #28]
 8007236:	f7fd f97f 	bl	8004538 <_ZNK11flatbuffers6VectorIhmE4dataEv>
 800723a:	61b8      	str	r0, [r7, #24]
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	3308      	adds	r3, #8
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	617b      	str	r3, [r7, #20]
          *offline_planner_offsets =
              reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f103 020c 	add.w	r2, r3, #12
          *offline_planner_offsets =
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	601a      	str	r2, [r3, #0]

          if (info_.tensor_count != nbr_tensors) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	429a      	cmp	r2, r3
 8007256:	d008      	beq.n	800726a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x10e>
            MicroPrintf(
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	461a      	mov	r2, r3
 800725e:	6979      	ldr	r1, [r7, #20]
 8007260:	4810      	ldr	r0, [pc, #64]	@ (80072a4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x148>)
 8007262:	f003 fc21 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                "Nbr of offline buffer offsets (%d) in metadata "
                "not equal nbr tensors (%d)\n",
                nbr_tensors, info_.tensor_count);
            return kTfLiteError;
 8007266:	2301      	movs	r3, #1
 8007268:	e016      	b.n	8007298 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x13c>
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 800726a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726c:	3301      	adds	r3, #1
 800726e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff fab1 	bl	80067dc <_ZNK6tflite5Model8metadataEv>
 800727a:	4603      	mov	r3, r0
 800727c:	4618      	mov	r0, r3
 800727e:	f000 f923 	bl	80074c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4sizeEv>
 8007282:	4602      	mov	r2, r0
 8007284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007286:	4293      	cmp	r3, r2
 8007288:	bf34      	ite	cc
 800728a:	2301      	movcc	r3, #1
 800728c:	2300      	movcs	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	f47f af79 	bne.w	8007188 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x2c>
          }
        }
      }
    }
  }
  return kTfLiteOk;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3734      	adds	r7, #52	@ 0x34
 800729c:	46bd      	mov	sp, r7
 800729e:	bd90      	pop	{r4, r7, pc}
 80072a0:	080160d8 	.word	0x080160d8
 80072a4:	08011ec4 	.word	0x08011ec4

080072a8 <_ZNK11flatbuffers6VectorIcmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fa fa63 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80072ba:	4603      	mov	r3, r0
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 80072d0:	887b      	ldrh	r3, [r7, #2]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f939 	bl	800754c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t>
 80072da:	4603      	mov	r3, r0
  }
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 80072f0:	887b      	ldrh	r3, [r7, #2]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f949 	bl	800758c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t>
 80072fa:	4603      	mov	r3, r0
  }
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8007310:	887b      	ldrh	r3, [r7, #2]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f959 	bl	80075cc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t>
 800731a:	4603      	mov	r3, r0
  }
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8007330:	887b      	ldrh	r3, [r7, #2]
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f969 	bl	800760c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t>
 800733a:	4603      	mov	r3, r0
  }
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>:
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4618      	mov	r0, r3
 8007352:	f7fa fa15 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007356:	4603      	mov	r3, r0
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff ffea 	bl	8007344 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 8007370:	4602      	mov	r2, r0
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	4293      	cmp	r3, r2
 8007376:	d305      	bcc.n	8007384 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm+0x24>
 8007378:	4b09      	ldr	r3, [pc, #36]	@ (80073a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm+0x40>)
 800737a:	4a0a      	ldr	r2, [pc, #40]	@ (80073a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm+0x44>)
 800737c:	21b0      	movs	r1, #176	@ 0xb0
 800737e:	480a      	ldr	r0, [pc, #40]	@ (80073a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm+0x48>)
 8007380:	f006 fc24 	bl	800dbcc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f961 	bl	800764c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4DataEv>
 800738a:	4603      	mov	r3, r0
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f968 	bl	8007664 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8007394:	4603      	mov	r3, r0
  }
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	08011f10 	.word	0x08011f10
 80073a4:	08012078 	.word	0x08012078
 80073a8:	08011fc0 	.word	0x08011fc0

080073ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fe ff16 	bl	80061e8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4sizeEv>
 80073bc:	4602      	mov	r2, r0
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d305      	bcc.n	80073d0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm+0x24>
 80073c4:	4b09      	ldr	r3, [pc, #36]	@ (80073ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm+0x40>)
 80073c6:	4a0a      	ldr	r2, [pc, #40]	@ (80073f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm+0x44>)
 80073c8:	21b0      	movs	r1, #176	@ 0xb0
 80073ca:	480a      	ldr	r0, [pc, #40]	@ (80073f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm+0x48>)
 80073cc:	f006 fbfe 	bl	800dbcc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f95b 	bl	800768c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4DataEv>
 80073d6:	4603      	mov	r3, r0
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f962 	bl	80076a4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 80073e0:	4603      	mov	r3, r0
  }
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	08011f10 	.word	0x08011f10
 80073f0:	08012144 	.word	0x08012144
 80073f4:	08011fc0 	.word	0x08011fc0

080073f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4618      	mov	r0, r3
 8007406:	f7fa f9bb 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800740a:	4603      	mov	r3, r0
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff ffea 	bl	80073f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4sizeEv>
 8007424:	4602      	mov	r2, r0
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	4293      	cmp	r3, r2
 800742a:	d305      	bcc.n	8007438 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm+0x24>
 800742c:	4b09      	ldr	r3, [pc, #36]	@ (8007454 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm+0x40>)
 800742e:	4a0a      	ldr	r2, [pc, #40]	@ (8007458 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm+0x44>)
 8007430:	21b0      	movs	r1, #176	@ 0xb0
 8007432:	480a      	ldr	r0, [pc, #40]	@ (800745c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm+0x48>)
 8007434:	f006 fbca 	bl	800dbcc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f947 	bl	80076cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4DataEv>
 800743e:	4603      	mov	r3, r0
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f94e 	bl	80076e4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8007448:	4603      	mov	r3, r0
  }
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	08011f10 	.word	0x08011f10
 8007458:	08012214 	.word	0x08012214
 800745c:	08011fc0 	.word	0x08011fc0

08007460 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4618      	mov	r0, r3
 800746e:	f7fa f987 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007472:	4603      	mov	r3, r0
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff ffea 	bl	8007460 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE4sizeEv>
 800748c:	4602      	mov	r2, r0
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	4293      	cmp	r3, r2
 8007492:	d305      	bcc.n	80074a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm+0x24>
 8007494:	4b09      	ldr	r3, [pc, #36]	@ (80074bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm+0x40>)
 8007496:	4a0a      	ldr	r2, [pc, #40]	@ (80074c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm+0x44>)
 8007498:	21b0      	movs	r1, #176	@ 0xb0
 800749a:	480a      	ldr	r0, [pc, #40]	@ (80074c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm+0x48>)
 800749c:	f006 fb96 	bl	800dbcc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f933 	bl	800770c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE4DataEv>
 80074a6:	4603      	mov	r3, r0
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f93a 	bl	8007724 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 80074b0:	4603      	mov	r3, r0
  }
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	08011f10 	.word	0x08011f10
 80074c0:	080123bc 	.word	0x080123bc
 80074c4:	08011fc0 	.word	0x08011fc0

080074c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fa f953 	bl	8001780 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80074da:	4603      	mov	r3, r0
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff ffea 	bl	80074c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4sizeEv>
 80074f4:	4602      	mov	r2, r0
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d305      	bcc.n	8007508 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm+0x24>
 80074fc:	4b09      	ldr	r3, [pc, #36]	@ (8007524 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm+0x40>)
 80074fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007528 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm+0x44>)
 8007500:	21b0      	movs	r1, #176	@ 0xb0
 8007502:	480a      	ldr	r0, [pc, #40]	@ (800752c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm+0x48>)
 8007504:	f006 fb62 	bl	800dbcc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f91f 	bl	800774c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4DataEv>
 800750e:	4603      	mov	r3, r0
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 f926 	bl	8007764 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8007518:	4603      	mov	r3, r0
  }
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	08011f10 	.word	0x08011f10
 8007528:	08012488 	.word	0x08012488
 800752c:	08011fc0 	.word	0x08011fc0

08007530 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmEixEm>:
  return_type operator[](SizeT i) const { return Get(i); }
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff ff9d 	bl	800747c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm>
 8007542:	4603      	mov	r3, r0
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007558:	887b      	ldrh	r3, [r7, #2]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7f9 fd93 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8007562:	4603      	mov	r3, r0
 8007564:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	89fb      	ldrh	r3, [r7, #14]
 800756a:	4413      	add	r3, r2
 800756c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800756e:	89fb      	ldrh	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d006      	beq.n	8007582 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t+0x36>
 8007574:	68b8      	ldr	r0, [r7, #8]
 8007576:	f7fa f92a 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800757a:	4602      	mov	r2, r0
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4413      	add	r3, r2
                        : nullptr;
 8007580:	e000      	b.n	8007584 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007582:	2300      	movs	r3, #0
  }
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007598:	887b      	ldrh	r3, [r7, #2]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7f9 fd73 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80075a2:	4603      	mov	r3, r0
 80075a4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	89fb      	ldrh	r3, [r7, #14]
 80075aa:	4413      	add	r3, r2
 80075ac:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80075ae:	89fb      	ldrh	r3, [r7, #14]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d006      	beq.n	80075c2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t+0x36>
 80075b4:	68b8      	ldr	r0, [r7, #8]
 80075b6:	f7fa f90a 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80075ba:	4602      	mov	r2, r0
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4413      	add	r3, r2
                        : nullptr;
 80075c0:	e000      	b.n	80075c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80075c2:	2300      	movs	r3, #0
  }
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80075d8:	887b      	ldrh	r3, [r7, #2]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7f9 fd53 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80075e2:	4603      	mov	r3, r0
 80075e4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	89fb      	ldrh	r3, [r7, #14]
 80075ea:	4413      	add	r3, r2
 80075ec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80075ee:	89fb      	ldrh	r3, [r7, #14]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d006      	beq.n	8007602 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t+0x36>
 80075f4:	68b8      	ldr	r0, [r7, #8]
 80075f6:	f7fa f8ea 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80075fa:	4602      	mov	r2, r0
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4413      	add	r3, r2
                        : nullptr;
 8007600:	e000      	b.n	8007604 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007602:	2300      	movs	r3, #0
  }
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007618:	887b      	ldrh	r3, [r7, #2]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7f9 fd33 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8007622:	4603      	mov	r3, r0
 8007624:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	89fb      	ldrh	r3, [r7, #14]
 800762a:	4413      	add	r3, r2
 800762c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800762e:	89fb      	ldrh	r3, [r7, #14]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d006      	beq.n	8007642 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t+0x36>
 8007634:	68b8      	ldr	r0, [r7, #8]
 8007636:	f7fa f8ca 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800763a:	4602      	mov	r2, r0
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4413      	add	r3, r2
                        : nullptr;
 8007640:	e000      	b.n	8007644 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007642:	2300      	movs	r3, #0
  }
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4DataEv>:
  const uint8_t *Data() const {
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3304      	adds	r3, #4
  }
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	4413      	add	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7fa f8a8 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800767e:	4602      	mov	r2, r0
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
  }
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4DataEv>:
  const uint8_t *Data() const {
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3304      	adds	r3, #4
  }
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	4413      	add	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7fa f888 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80076be:	4602      	mov	r2, r0
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
  }
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4DataEv>:
  const uint8_t *Data() const {
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
  }
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f7fa f868 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80076fe:	4602      	mov	r2, r0
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
  }
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE4DataEv>:
  const uint8_t *Data() const {
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3304      	adds	r3, #4
  }
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	4413      	add	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7fa f848 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800773e:	4602      	mov	r2, r0
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
  }
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4DataEv>:
  const uint8_t *Data() const {
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3304      	adds	r3, #4
  }
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4413      	add	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7fa f828 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800777e:	4602      	mov	r2, r0
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
  }
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const ::flatbuffers::Vector<float> *scale() const {
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_SCALE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2108      	movs	r1, #8
 8007798:	4618      	mov	r0, r3
 800779a:	f7fc fd71 	bl	8004280 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t>
 800779e:	4603      	mov	r3, r0
  }
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const ::flatbuffers::Vector<int64_t> *zero_point() const {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	210a      	movs	r1, #10
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fc fd73 	bl	80042a0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t>
 80077ba:	4603      	mov	r3, r0
  }
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	2110      	movs	r1, #16
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fc f9e5 	bl	8003ba2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80077d8:	4603      	mov	r3, r0
  }
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	2108      	movs	r1, #8
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7f9 fffa 	bl	80017ea <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80077f6:	4603      	mov	r3, r0
  }
 80077f8:	4618      	mov	r0, r3
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	210c      	movs	r1, #12
 800780c:	4618      	mov	r0, r3
 800780e:	f001 fa65 	bl	8008cdc <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t>
 8007812:	4603      	mov	r3, r0
  }
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	4a04      	ldr	r2, [pc, #16]	@ (8007838 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	08016160 	.word	0x08016160

0800783c <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff ffe9 	bl	800781c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800784a:	2104      	movs	r1, #4
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f006 f904 	bl	800da5a <_ZdlPvj>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <_ZN6tflite21AllocationInfoBuilderC1EPKNS_5ModelEPNS_29INonPersistentBufferAllocatorE>:
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Create`, Init`, `Add*`, to
// `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(const Model* model,
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
                        INonPersistentBufferAllocator* non_persistent_allocator)
      : model_(model), non_persistent_allocator_(non_persistent_allocator) {}
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3308      	adds	r3, #8
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	609a      	str	r2, [r3, #8]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	611a      	str	r2, [r3, #16]
 8007884:	615a      	str	r2, [r3, #20]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	621a      	str	r2, [r3, #32]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <_ZNK6tflite21AllocationInfoBuilder15AllocationCountEv>:
      internal::ScratchBufferRequest* scratch_buffer_requests,
      ScratchBufferHandle* scratch_buffer_handles,
      SubgraphAllocations* allocations);

  // Returns the number of allocations.
  int AllocationCount() const { return info_.allocation_info_count; }
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <_ZNK6tflite21AllocationInfoBuilder6FinishEv>:

  // Returns a pointer to the built AllocationInfo array.
  AllocationInfo* Finish() const { return info_.allocation_info; }
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	4a04      	ldr	r2, [pc, #16]	@ (80078e8 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	08016160 	.word	0x08016160

080078ec <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_26IPersistentBufferAllocatorE>:

const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public TfLiteBridgeBuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
      IPersistentBufferAllocator* persistent_allocator)
      : persistent_allocator_(persistent_allocator) {}
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff ffe7 	bl	80078cc <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 80078fe:	4a05      	ldr	r2, [pc, #20]	@ (8007914 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_26IPersistentBufferAllocatorE+0x28>)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	605a      	str	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	080160fc 	.word	0x080160fc

08007918 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
    return persistent_allocator_->AllocatePersistentBuffer(size,
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6858      	ldr	r0, [r3, #4]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3308      	adds	r3, #8
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	68b9      	ldr	r1, [r7, #8]
 8007936:	4798      	blx	r3
 8007938:	4603      	mov	r3, r0
                                                           alignment_hint);
  }
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE>:
  TF_LITE_REMOVE_VIRTUAL_DELETE
};

MicroMemoryPlanner* CreateMemoryPlanner(
    MemoryPlannerType memory_planner_type,
    IPersistentBufferAllocator* memory_allocator) {
 8007958:	b590      	push	{r4, r7, lr}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  MicroMemoryPlanner* memory_planner = nullptr;
 8007962:	2300      	movs	r3, #0
 8007964:	60fb      	str	r3, [r7, #12]
  uint8_t* memory_planner_buffer = nullptr;
 8007966:	2300      	movs	r3, #0
 8007968:	60bb      	str	r3, [r7, #8]

  switch (memory_planner_type) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d018      	beq.n	80079a2 <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE+0x4a>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d129      	bne.n	80079ca <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE+0x72>
    case MemoryPlannerType::kLinear: {
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2204      	movs	r2, #4
 8007980:	f241 010c 	movw	r1, #4108	@ 0x100c
 8007984:	6838      	ldr	r0, [r7, #0]
 8007986:	4798      	blx	r3
 8007988:	60b8      	str	r0, [r7, #8]
          sizeof(LinearMemoryPlanner), alignof(LinearMemoryPlanner));
      memory_planner = new (memory_planner_buffer) LinearMemoryPlanner();
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4619      	mov	r1, r3
 800798e:	f241 000c 	movw	r0, #4108	@ 0x100c
 8007992:	f7fc f958 	bl	8003c46 <_ZnwjPv>
 8007996:	4604      	mov	r4, r0
 8007998:	4620      	mov	r0, r4
 800799a:	f005 ff27 	bl	800d7ec <_ZN6tflite19LinearMemoryPlannerC1Ev>
 800799e:	60fc      	str	r4, [r7, #12]
      break;
 80079a0:	e013      	b.n	80079ca <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE+0x72>
    }
    case MemoryPlannerType::kGreedy: {
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3308      	adds	r3, #8
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2204      	movs	r2, #4
 80079ac:	212c      	movs	r1, #44	@ 0x2c
 80079ae:	6838      	ldr	r0, [r7, #0]
 80079b0:	4798      	blx	r3
 80079b2:	60b8      	str	r0, [r7, #8]
          sizeof(GreedyMemoryPlanner), alignof(GreedyMemoryPlanner));
      memory_planner = new (memory_planner_buffer) GreedyMemoryPlanner();
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	4619      	mov	r1, r3
 80079b8:	202c      	movs	r0, #44	@ 0x2c
 80079ba:	f7fc f944 	bl	8003c46 <_ZnwjPv>
 80079be:	4604      	mov	r4, r0
 80079c0:	4620      	mov	r0, r4
 80079c2:	f005 fa59 	bl	800ce78 <_ZN6tflite19GreedyMemoryPlannerC1Ev>
 80079c6:	60fc      	str	r4, [r7, #12]
      break;
 80079c8:	bf00      	nop
    }
  }
  return memory_planner;
 80079ca:	68fb      	ldr	r3, [r7, #12]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd90      	pop	{r4, r7, pc}

080079d4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj>:

TfLiteStatus CreatePlan(MicroMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 80079d4:	b590      	push	{r4, r7, lr}
 80079d6:	b08b      	sub	sp, #44	@ 0x2c
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
 80079e4:	e046      	b.n	8007a74 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0xa0>
    const AllocationInfo* current = &allocation_info[i];
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	4613      	mov	r3, r2
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	4413      	add	r3, r2
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	461a      	mov	r2, r3
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4413      	add	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	7d1b      	ldrb	r3, [r3, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d036      	beq.n	8007a6e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x9a>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, MicroArenaBufferAlignment());
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	681c      	ldr	r4, [r3, #0]
 8007a04:	f7fe fb31 	bl	800606a <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f7fe fced 	bl	80063ec <_ZN6tflite11AlignSizeUpEjj>
 8007a12:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d111      	bne.n	8007a42 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x6e>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(aligned_bytes_required,
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	681c      	ldr	r4, [r3, #0]
 8007a26:	6979      	ldr	r1, [r7, #20]
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	47a0      	blx	r4
 8007a34:	4603      	mov	r3, r0
 8007a36:	74bb      	strb	r3, [r7, #18]
 8007a38:	7cbb      	ldrb	r3, [r7, #18]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d017      	beq.n	8007a6e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x9a>
 8007a3e:	7cbb      	ldrb	r3, [r7, #18]
 8007a40:	e01d      	b.n	8007a7e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0xaa>
                                                 current->first_created,
                                                 current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	330c      	adds	r3, #12
 8007a48:	681c      	ldr	r4, [r3, #0]
 8007a4a:	6979      	ldr	r1, [r7, #20]
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	68d8      	ldr	r0, [r3, #12]
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	47a0      	blx	r4
 8007a60:	4603      	mov	r3, r0
 8007a62:	74fb      	strb	r3, [r7, #19]
 8007a64:	7cfb      	ldrb	r3, [r7, #19]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x9a>
 8007a6a:	7cfb      	ldrb	r3, [r7, #19]
 8007a6c:	e007      	b.n	8007a7e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0xaa>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	3301      	adds	r3, #1
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d3b4      	bcc.n	80079e6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x12>
            planner->AddBuffer(aligned_bytes_required, current->first_created,
                               current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3724      	adds	r7, #36	@ 0x24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd90      	pop	{r4, r7, pc}

08007a86 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj>:

TfLiteStatus CommitPlan(MicroMemoryPlanner* planner, uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b08a      	sub	sp, #40	@ 0x28
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007a98:	2300      	movs	r3, #0
 8007a9a:	623b      	str	r3, [r7, #32]
 8007a9c:	e02c      	b.n	8007af8 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x72>
    const AllocationInfo* current = &allocation_info[i];
 8007a9e:	6a3a      	ldr	r2, [r7, #32]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	4413      	add	r3, r2
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	7d1b      	ldrb	r3, [r3, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01c      	beq.n	8007af2 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x6c>
      int offset = -1;
 8007ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8007abc:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3318      	adds	r3, #24
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f107 0214 	add.w	r2, r7, #20
 8007aca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	4798      	blx	r3
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	76fb      	strb	r3, [r7, #27]
 8007ad4:	7efb      	ldrb	r3, [r7, #27]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x58>
 8007ada:	7efb      	ldrb	r3, [r7, #27]
 8007adc:	e011      	b.n	8007b02 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x7c>
          planner->GetOffsetForBuffer(planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	440a      	add	r2, r1
 8007aea:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	3301      	adds	r3, #1
 8007af0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	3301      	adds	r3, #1
 8007af6:	623b      	str	r3, [r7, #32]
 8007af8:	6a3a      	ldr	r2, [r7, #32]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d3ce      	bcc.n	8007a9e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x18>
    }
  }
  return kTfLiteOk;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3728      	adds	r7, #40	@ 0x28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b086      	sub	sp, #24
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fe62 	bl	80077e2 <_ZNK6tflite6Tensor6bufferEv>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4619      	mov	r1, r3
 8007b22:	6838      	ldr	r0, [r7, #0]
 8007b24:	f7ff fd04 	bl	8007530 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmEixEm>
 8007b28:	6138      	str	r0, [r7, #16]
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d015      	beq.n	8007b5c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8007b30:	6938      	ldr	r0, [r7, #16]
 8007b32:	f7fe fe0c 	bl	800674e <_ZNK6tflite6Buffer4dataEv>
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00e      	beq.n	8007b5c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f7fc fc0d 	bl	800435e <_ZNK11flatbuffers6VectorIhmE4sizeEv>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bf14      	ite	ne
 8007b4a:	2301      	movne	r3, #1
 8007b4c:	2300      	moveq	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f7fc fcef 	bl	8004538 <_ZNK11flatbuffers6VectorIhmE4dataEv>
 8007b5a:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 8007b5c:	697b      	ldr	r3, [r7, #20]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor>:
TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    IPersistentBufferAllocator* persistent_buffer_allocator,
    INonPersistentBufferAllocator* non_persistent_buffer_allocator,
    bool allocate_temp, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    TfLiteTensor* result) {
 8007b68:	b5b0      	push	{r4, r5, r7, lr}
 8007b6a:	b08c      	sub	sp, #48	@ 0x30
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	4613      	mov	r3, r2
 8007b76:	71fb      	strb	r3, [r7, #7]
  TFLITE_DCHECK(result != nullptr);
 8007b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1a>
 8007b7e:	f006 f81d 	bl	800dbbc <abort>

  *result = {};
 8007b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b84:	4618      	mov	r0, r3
 8007b86:	2340      	movs	r3, #64	@ 0x40
 8007b88:	461a      	mov	r2, r3
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	f007 f8cc 	bl	800ed28 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(
 8007b90:	6838      	ldr	r0, [r7, #0]
 8007b92:	f7fe fbed 	bl	8006370 <_ZNK6tflite6Tensor4typeEv>
 8007b96:	4603      	mov	r3, r0
 8007b98:	461a      	mov	r2, r3
 8007b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f005 fee8 	bl	800d974 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007baa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x50>
 8007bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bb6:	e135      	b.n	8007e24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2bc>
      tflite::ConvertTensorType(flatbuffer_tensor.type(), &result->type));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8007bb8:	6838      	ldr	r0, [r7, #0]
 8007bba:	f7fe fd51 	bl	8006660 <_ZNK6tflite6Tensor11is_variableEv>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8007bc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bca:	6838      	ldr	r0, [r7, #0]
 8007bcc:	f7ff ff9d 	bl	8007b0a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd4:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8007bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d103      	bne.n	8007be6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8007bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be0:	2202      	movs	r2, #2
 8007be2:	751a      	strb	r2, [r3, #20]
 8007be4:	e002      	b.n	8007bec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 8007be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be8:	2201      	movs	r2, #1
 8007bea:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(
 8007bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bee:	3318      	adds	r3, #24
 8007bf0:	f107 0214 	add.w	r2, r7, #20
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6838      	ldr	r0, [r7, #0]
 8007bf8:	f7fe fc92 	bl	8006520 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xa8>
 8007c0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007c0e:	e109      	b.n	8007e24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2bc>
      BytesRequiredForTensor(flatbuffer_tensor, &result->bytes, &type_size));

  if (flatbuffer_tensor.shape() == nullptr) {
 8007c10:	6838      	ldr	r0, [r7, #0]
 8007c12:	f7fe fb9f 	bl	8006354 <_ZNK6tflite6Tensor5shapeEv>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2301      	moveq	r3, #1
 8007c1e:	2300      	movne	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xc6>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    // TODO(b/188459715): figure out why const_cast is required here.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8007c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c28:	4a80      	ldr	r2, [pc, #512]	@ (8007e2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2c4>)
 8007c2a:	609a      	str	r2, [r3, #8]
 8007c2c:	e009      	b.n	8007c42 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xda>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 8007c2e:	6838      	ldr	r0, [r7, #0]
 8007c30:	f7fe fb90 	bl	8006354 <_ZNK6tflite6Tensor5shapeEv>
 8007c34:	4603      	mov	r3, r0
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe faa0 	bl	800617c <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c40:	609a      	str	r2, [r3, #8]
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8007c42:	6838      	ldr	r0, [r7, #0]
 8007c44:	f7ff fddc 	bl	8007800 <_ZNK6tflite6Tensor12quantizationEv>
 8007c48:	6278      	str	r0, [r7, #36]	@ 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d021      	beq.n	8007c94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
  if (src_quantization && src_quantization->scale() &&
 8007c50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c52:	f7ff fd9b 	bl	800778c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01b      	beq.n	8007c94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
      (src_quantization->scale()->size() > 0) &&
 8007c5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c5e:	f7ff fd95 	bl	800778c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fc fb88 	bl	800437a <_ZNK11flatbuffers6VectorIfmE4sizeEv>
 8007c6a:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d011      	beq.n	8007c94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
      src_quantization->zero_point() &&
 8007c70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c72:	f7ff fd99 	bl	80077a8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007c76:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
      (src_quantization->zero_point()->size() > 0)) {
 8007c7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c7e:	f7ff fd93 	bl	80077a8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007c82:	4603      	mov	r3, r0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fc fb86 	bl	8004396 <_ZNK11flatbuffers6VectorIxmE4sizeEv>
 8007c8a:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12e>
 8007c94:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 80c3 	beq.w	8007e22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2ba>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8007c9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c9e:	f7ff fd75 	bl	800778c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 f828 	bl	8008cfc <_ZNK11flatbuffers6VectorIfmE3GetEm>
 8007cac:	eef0 7a40 	vmov.f32	s15, s0
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb2:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8007cb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cb8:	f7ff fd76 	bl	80077a8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fc fb77 	bl	80043b4 <_ZNK11flatbuffers6VectorIxmE3GetEm>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
    result->params.zero_point =
 8007cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ccc:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8007cce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cd0:	f7ff fd5c 	bl	800778c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fc fb4f 	bl	800437a <_ZNK11flatbuffers6VectorIfmE4sizeEv>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d009      	beq.n	8007cfa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x192>
                  non_persistent_buffer_allocator->AllocateTemp(
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2204      	movs	r2, #4
 8007cf0:	210c      	movs	r1, #12
 8007cf2:	68b8      	ldr	r0, [r7, #8]
 8007cf4:	4798      	blx	r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	e008      	b.n	8007d0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1a4>
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)))
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2204      	movs	r2, #4
 8007d04:	210c      	movs	r1, #12
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	4798      	blx	r3
 8007d0a:	4603      	mov	r3, r0
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8007d0c:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1b6>
      MicroPrintf("Unable to allocate TfLiteAffineQuantization.\n");
 8007d14:	4846      	ldr	r0, [pc, #280]	@ (8007e30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2c8>)
 8007d16:	f002 fec7 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e082      	b.n	8007e24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2bc>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00e      	beq.n	8007d42 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1da>
                  non_persistent_buffer_allocator->AllocateTemp(
 8007d24:	68bd      	ldr	r5, [r7, #8]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	681c      	ldr	r4, [r3, #0]
 8007d2e:	6a38      	ldr	r0, [r7, #32]
 8007d30:	f7fc ff12 	bl	8004b58 <TfLiteIntArrayGetSizeInBytes>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2204      	movs	r2, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	47a0      	blx	r4
 8007d3e:	4603      	mov	r3, r0
 8007d40:	e00d      	b.n	8007d5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1f6>
                      TfLiteIntArrayGetSizeInBytes(channels),
                      alignof(TfLiteIntArray)))
            : reinterpret_cast<TfLiteIntArray*>(
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8007d42:	68fd      	ldr	r5, [r7, #12]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	681c      	ldr	r4, [r3, #0]
 8007d4c:	6a38      	ldr	r0, [r7, #32]
 8007d4e:	f7fc ff03 	bl	8004b58 <TfLiteIntArrayGetSizeInBytes>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2204      	movs	r2, #4
 8007d56:	4619      	mov	r1, r3
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47a0      	blx	r4
 8007d5c:	4603      	mov	r3, r0
    quantization->zero_point =
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	6053      	str	r3, [r2, #4]
                      TfLiteIntArrayGetSizeInBytes(channels),
                      alignof(TfLiteIntArray)));
    if (quantization->zero_point == nullptr) {
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x20c>
      MicroPrintf("Unable to allocate quantization->zero_point.\n");
 8007d6a:	4832      	ldr	r0, [pc, #200]	@ (8007e34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2cc>)
 8007d6c:	f002 fe9c 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e057      	b.n	8007e24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2bc>
    }

    quantization->scale =
        FlatBufferVectorToTfLiteTypeArray(src_quantization->scale());
 8007d74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d76:	f7ff fd09 	bl	800778c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fa08 	bl	8006192 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfmEE>
 8007d82:	4602      	mov	r2, r0
    quantization->scale =
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	601a      	str	r2, [r3, #0]

    quantization->zero_point->size = channels;
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	6a3a      	ldr	r2, [r7, #32]
 8007d8e:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	3304      	adds	r3, #4
 8007d96:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < channels; i++) {
 8007d98:	2300      	movs	r3, #0
 8007d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d9c:	e031      	b.n	8007e02 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x29a>
      // As a space-saving optimization, zero point arrays for weights can be
      // reduced to a single value, since all zero points for weights are 0.
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8007d9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007da0:	f7ff fd02 	bl	80077a8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007da4:	4603      	mov	r3, r0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fc faf5 	bl	8004396 <_ZNK11flatbuffers6VectorIxmE4sizeEv>
 8007dac:	4604      	mov	r4, r0
                                   src_quantization->scale()->size()
 8007dae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007db0:	f7ff fcec 	bl	800778c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007db4:	4603      	mov	r3, r0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fc fadf 	bl	800437a <_ZNK11flatbuffers6VectorIfmE4sizeEv>
 8007dbc:	4603      	mov	r3, r0
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d10c      	bne.n	8007ddc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x274>
                               ? src_quantization->zero_point()->Get(i)
 8007dc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007dc4:	f7ff fcf0 	bl	80077a8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7fc faf0 	bl	80043b4 <_ZNK11flatbuffers6VectorIxmE3GetEm>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8007dd8:	4611      	mov	r1, r2
 8007dda:	e00a      	b.n	8007df2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x28a>
                               : src_quantization->zero_point()->Get(0);
 8007ddc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007dde:	f7ff fce3 	bl	80077a8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fc fae4 	bl	80043b4 <_ZNK11flatbuffers6VectorIxmE3GetEm>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8007df0:	4611      	mov	r1, r2
 8007df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	4413      	add	r3, r2
 8007dfa:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfe:	3301      	adds	r3, #1
 8007e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	dbc9      	blt.n	8007d9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x236>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8007e0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e0c:	f7ff fcda 	bl	80077c4 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8007e10:	4602      	mov	r2, r0
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8007e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e18:	2201      	movs	r2, #1
 8007e1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e1e:	69fa      	ldr	r2, [r7, #28]
 8007e20:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  return kTfLiteOk;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3730      	adds	r7, #48	@ 0x30
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e2c:	080160f0 	.word	0x080160f0
 8007e30:	08012558 	.word	0x08012558
 8007e34:	08012588 	.word	0x08012588

08007e38 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    TfLiteEvalTensor* result) {
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  *result = {};
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	461a      	mov	r2, r3
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	6053      	str	r3, [r2, #4]
 8007e4e:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7fe fa8d 	bl	8006370 <_ZNK6tflite6Tensor4typeEv>
 8007e56:	4603      	mov	r3, r0
 8007e58:	461a      	mov	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4610      	mov	r0, r2
 8007e62:	f005 fd87 	bl	800d974 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 8007e66:	4603      	mov	r3, r0
 8007e68:	75fb      	strb	r3, [r7, #23]
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x3c>
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	e020      	b.n	8007eb6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x7e>
      tflite::ConvertTensorType(flatbuffer_tensor.type(), &result->type));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8007e74:	68b9      	ldr	r1, [r7, #8]
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff fe47 	bl	8007b0a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7fe fa66 	bl	8006354 <_ZNK6tflite6Tensor5shapeEv>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	bf0c      	ite	eq
 8007e8e:	2301      	moveq	r3, #1
 8007e90:	2300      	movne	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x68>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a09      	ldr	r2, [pc, #36]	@ (8007ec0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x88>)
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	e009      	b.n	8007eb4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x7c>
  } else {
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7fe fa57 	bl	8006354 <_ZNK6tflite6Tensor5shapeEv>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe f967 	bl	800617c <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	605a      	str	r2, [r3, #4]
  }
  return kTfLiteOk;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	080160f0 	.word	0x080160f0

08007ec4 <_ZN6tflite14MicroAllocatorC1EPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEPNS_18MicroMemoryPlannerE>:
    : non_persistent_buffer_allocator_(memory_allocator),
      persistent_buffer_allocator_(memory_allocator),
      memory_planner_(memory_planner),
      model_is_allocating_(false) {}

MicroAllocator::MicroAllocator(
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
    INonPersistentBufferAllocator* non_persistent_buffer_allocator,
    MicroMemoryPlanner* memory_planner)
    : non_persistent_buffer_allocator_(non_persistent_buffer_allocator),
      persistent_buffer_allocator_(persistent_buffer_allocator),
      memory_planner_(memory_planner),
      model_is_allocating_(false) {}
 8007ed2:	4a11      	ldr	r2, [pc, #68]	@ (8007f18 <_ZN6tflite14MicroAllocatorC1EPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEPNS_18MicroMemoryPlannerE+0x54>)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	601a      	str	r2, [r3, #0]
    : non_persistent_buffer_allocator_(non_persistent_buffer_allocator),
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	605a      	str	r2, [r3, #4]
      persistent_buffer_allocator_(persistent_buffer_allocator),
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	609a      	str	r2, [r3, #8]
      model_is_allocating_(false) {}
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	60da      	str	r2, [r3, #12]
      memory_planner_(memory_planner),
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	611a      	str	r2, [r3, #16]
      model_is_allocating_(false) {}
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	751a      	strb	r2, [r3, #20]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	619a      	str	r2, [r3, #24]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	61da      	str	r2, [r3, #28]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	621a      	str	r2, [r3, #32]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	08016114 	.word	0x08016114

08007f1c <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	4a04      	ldr	r2, [pc, #16]	@ (8007f38 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	08016114 	.word	0x08016114

08007f3c <_ZN6tflite14MicroAllocatorD0Ev>:
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff ffe9 	bl	8007f1c <_ZN6tflite14MicroAllocatorD1Ev>
 8007f4a:	2124      	movs	r1, #36	@ 0x24
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f005 fd84 	bl	800da5a <_ZdlPvj>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE>:

  return Create(memory_allocator, memory_planner);
}

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       MemoryPlannerType memory_planner_type) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena =
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 8007f68:	f7fe f87f 	bl	800606a <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	4619      	mov	r1, r3
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f7fe fa0c 	bl	800638e <_ZN6tflite14AlignPointerUpEPhj>
 8007f76:	61f8      	str	r0, [r7, #28]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	441a      	add	r2, r3
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	61bb      	str	r3, [r7, #24]
  SingleArenaBufferAllocator* memory_allocator =
      SingleArenaBufferAllocator::Create(aligned_arena, aligned_arena_size);
 8007f84:	69b9      	ldr	r1, [r7, #24]
 8007f86:	69f8      	ldr	r0, [r7, #28]
 8007f88:	f7fd fe29 	bl	8005bde <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>
 8007f8c:	6178      	str	r0, [r7, #20]

  // By default create GreedyMemoryPlanner.
  // If a different MemoryPlanner is needed, use the other api.
  MicroMemoryPlanner* memory_planner =
      CreateMemoryPlanner(memory_planner_type, memory_allocator);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x3e>
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	3304      	adds	r3, #4
 8007f98:	e000      	b.n	8007f9c <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x40>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff fcda 	bl	8007958 <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE>
 8007fa4:	6138      	str	r0, [r7, #16]

  return Create(memory_allocator, memory_planner);
 8007fa6:	6939      	ldr	r1, [r7, #16]
 8007fa8:	6978      	ldr	r0, [r7, #20]
 8007faa:	f000 f805 	bl	8007fb8 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE>
 8007fae:	4603      	mov	r3, r0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3720      	adds	r7, #32
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE>:

MicroAllocator* MicroAllocator::Create(
    SingleArenaBufferAllocator* memory_allocator,
    MicroMemoryPlanner* memory_planner) {
 8007fb8:	b590      	push	{r4, r7, lr}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x14>
 8007fc8:	f005 fdf8 	bl	800dbbc <abort>
  TFLITE_DCHECK(memory_planner != nullptr);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x1e>
 8007fd2:	f005 fdf3 	bl	800dbbc <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocatePersistentBuffer(
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3334      	adds	r3, #52	@ 0x34
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2204      	movs	r2, #4
 8007fe0:	2124      	movs	r1, #36	@ 0x24
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
 8007fe6:	60f8      	str	r0, [r7, #12]
      sizeof(MicroAllocator), alignof(MicroAllocator));
  MicroAllocator* allocator = new (allocator_buffer)
      MicroAllocator(memory_allocator, memory_allocator, memory_planner);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4619      	mov	r1, r3
 8007fec:	2024      	movs	r0, #36	@ 0x24
 8007fee:	f7fb fe2a 	bl	8003c46 <_ZnwjPv>
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x48>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	1d19      	adds	r1, r3, #4
 8007ffe:	e000      	b.n	8008002 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x4a>
 8008000:	2100      	movs	r1, #0
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	4620      	mov	r0, r4
 8008008:	f7ff ff5c 	bl	8007ec4 <_ZN6tflite14MicroAllocatorC1EPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEPNS_18MicroMemoryPlannerE>
 800800c:	60bc      	str	r4, [r7, #8]
  return allocator;
 800800e:	68bb      	ldr	r3, [r7, #8]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	bd90      	pop	{r4, r7, pc}

08008018 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
      MicroAllocator(persistent_buffer_allocator,
                     non_persistent_buffer_allocator, memory_planner);
  return allocator;
}

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 8008018:	b5b0      	push	{r4, r5, r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 8008028:	f005 fdc8 	bl	800dbbc <abort>

  if (model_is_allocating_) {
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	7d1b      	ldrb	r3, [r3, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x26>
    MicroPrintf(
 8008034:	4836      	ldr	r0, [pc, #216]	@ (8008110 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf8>)
 8008036:	f002 fd37 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "MicroAllocator: Model allocation started before "
        "finishing previously allocated model");
    return nullptr;
 800803a:	2300      	movs	r3, #0
 800803c:	e063      	b.n	8008106 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xee>
  }

  model_is_allocating_ = true;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	751a      	strb	r2, [r3, #20]

  uint8_t* data_allocator_buffer =
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6898      	ldr	r0, [r3, #8]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2204      	movs	r2, #4
 8008054:	2108      	movs	r1, #8
 8008056:	4798      	blx	r3
 8008058:	60f8      	str	r0, [r7, #12]
          sizeof(MicroBuiltinDataAllocator),
          alignof(MicroBuiltinDataAllocator));
  builtin_data_allocator_ = new (data_allocator_buffer)
 800805a:	68fb      	ldr	r3, [r7, #12]
      MicroBuiltinDataAllocator(persistent_buffer_allocator_);
 800805c:	4619      	mov	r1, r3
 800805e:	2008      	movs	r0, #8
 8008060:	f7fb fdf1 	bl	8003c46 <_ZnwjPv>
 8008064:	4604      	mov	r4, r0
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	4619      	mov	r1, r3
 800806c:	4620      	mov	r0, r4
 800806e:	f7ff fc3d 	bl	80078ec <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_26IPersistentBufferAllocatorE>
  builtin_data_allocator_ = new (data_allocator_buffer)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60dc      	str	r4, [r3, #12]

  if (InitScratchBufferData() != kTfLiteOk) {
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fdf6 	bl	8008c68 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	bf14      	ite	ne
 8008082:	2301      	movne	r3, #1
 8008084:	2300      	moveq	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    return nullptr;
 800808c:	2300      	movs	r3, #0
 800808e:	e03a      	b.n	8008106 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xee>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689d      	ldr	r5, [r3, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3308      	adds	r3, #8
 800809c:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 800809e:	6838      	ldr	r0, [r7, #0]
 80080a0:	f7fe f82a 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 80080a4:	4603      	mov	r3, r0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe f8ac 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 80080ac:	4603      	mov	r3, r0
 80080ae:	00db      	lsls	r3, r3, #3
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80080b0:	2204      	movs	r2, #4
 80080b2:	4619      	mov	r1, r3
 80080b4:	4628      	mov	r0, r5
 80080b6:	47a0      	blx	r4
 80080b8:	60b8      	str	r0, [r7, #8]
          alignof(SubgraphAllocations)));
  if (output == nullptr) {
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb2>
    MicroPrintf("Failed to allocate memory for model metadata.");
 80080c0:	4814      	ldr	r0, [pc, #80]	@ (8008114 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 80080c2:	f002 fcf1 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return nullptr;
 80080c6:	2300      	movs	r3, #0
 80080c8:	e01d      	b.n	8008106 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xee>

  if (
#ifdef USE_TFLM_COMPRESSION
      AllocateCompressedTensorsList(model, output) != kTfLiteOk ||
#endif  // USE_TFLM_COMPRESSION
      AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	332c      	adds	r3, #44	@ 0x2c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10a      	bne.n	80080f6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xde>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3328      	adds	r3, #40	@ 0x28
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
 80080f0:	4603      	mov	r3, r0
      AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe2>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e000      	b.n	80080fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
 80080fa:	2300      	movs	r3, #0
  if (
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xec>
    return nullptr;
 8008100:	2300      	movs	r3, #0
 8008102:	e000      	b.n	8008106 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xee>
  }
  return output;
 8008104:	68bb      	ldr	r3, [r7, #8]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bdb0      	pop	{r4, r5, r7, pc}
 800810e:	bf00      	nop
 8008110:	080125b8 	.word	0x080125b8
 8008114:	08012610 	.word	0x08012610

08008118 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 8008118:	b590      	push	{r4, r7, lr}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	7d1b      	ldrb	r3, [r3, #20]
 800812a:	f083 0301 	eor.w	r3, r3, #1
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x26>
    MicroPrintf(
 8008134:	4816      	ldr	r0, [pc, #88]	@ (8008190 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x78>)
 8008136:	f002 fcb7 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "MicroAllocator: Model allocation finished before "
        "starting allocating model");
    return kTfLiteError;
 800813a:	2301      	movs	r3, #1
 800813c:	e024      	b.n	8008188 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x70>
  }

  // Allocate scratch buffer metadata.
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3340      	adds	r3, #64	@ 0x40
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	6992      	ldr	r2, [r2, #24]
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	4798      	blx	r3
 8008150:	4603      	mov	r3, r0
 8008152:	75fb      	strb	r3, [r7, #23]
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x46>
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	e014      	b.n	8008188 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x70>
      scratch_buffer_handles, scratch_buffer_request_count_));

  // Plan all subgraphs and scratch buffers together.
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph_allocations,
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	333c      	adds	r3, #60	@ 0x3c
 8008164:	681c      	ldr	r4, [r3, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	47a0      	blx	r4
 8008172:	4603      	mov	r3, r0
 8008174:	75bb      	strb	r3, [r7, #22]
 8008176:	7dbb      	ldrb	r3, [r7, #22]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x68>
 800817c:	7dbb      	ldrb	r3, [r7, #22]
 800817e:	e003      	b.n	8008188 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x70>
                                               *scratch_buffer_handles));
  model_is_allocating_ = false;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	751a      	strb	r2, [r3, #20]
  return kTfLiteOk;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	bd90      	pop	{r4, r7, pc}
 8008190:	08012640 	.word	0x08012640

08008194 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 8008194:	b5b0      	push	{r4, r5, r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689d      	ldr	r5, [r3, #8]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	681c      	ldr	r4, [r3, #0]
      bytes, MicroArenaBufferAlignment());
 80081ac:	f7fd ff5d 	bl	800606a <_ZN6tflite25MicroArenaBufferAlignmentEv>
 80081b0:	4603      	mov	r3, r0
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 80081b2:	461a      	mov	r2, r3
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	4628      	mov	r0, r5
 80081b8:	47a0      	blx	r4
 80081ba:	4603      	mov	r3, r0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bdb0      	pop	{r4, r5, r7, pc}

080081c4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fd67 	bl	8008ca6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80081d8:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80081de:	2300      	movs	r3, #0
 80081e0:	61bb      	str	r3, [r7, #24]
 80081e2:	e011      	b.n	8008208 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	4613      	mov	r3, r2
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	461a      	mov	r2, r3
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	4413      	add	r3, r2
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fa:	d102      	bne.n	8008202 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	3301      	adds	r3, #1
 8008200:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	3301      	adds	r3, #1
 8008206:	61bb      	str	r3, [r7, #24]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	429a      	cmp	r2, r3
 8008210:	d3e8      	bcc.n	80081e4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	2b0b      	cmp	r3, #11
 8008216:	d905      	bls.n	8008224 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 8008218:	210c      	movs	r1, #12
 800821a:	4817      	ldr	r0, [pc, #92]	@ (8008278 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 800821c:	f002 fc44 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8008220:	2301      	movs	r3, #1
 8008222:	e024      	b.n	800826e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	699a      	ldr	r2, [r3, #24]
 8008228:	4613      	mov	r3, r2
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	4413      	add	r3, r2
 8008236:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	461a      	mov	r2, r3
 800823c:	2300      	movs	r3, #0
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	6053      	str	r3, [r2, #4]
 8008242:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f04f 32ff 	mov.w	r2, #4294967295
 8008250:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	461a      	mov	r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3720      	adds	r7, #32
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	0801268c 	.word	0x0801268c

0800827c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3314      	adds	r3, #20
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
 8008292:	4603      	mov	r3, r0
 8008294:	74fb      	strb	r3, [r7, #19]
 8008296:	7cfb      	ldrb	r3, [r7, #19]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x24>
 800829c:	7cfb      	ldrb	r3, [r7, #19]
 800829e:	e03f      	b.n	8008320 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0xa4>

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fd00 	bl	8008ca6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80082a6:	60f8      	str	r0, [r7, #12]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80082a8:	2300      	movs	r3, #0
 80082aa:	617b      	str	r3, [r7, #20]
 80082ac:	e018      	b.n	80082e0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x64>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4613      	mov	r3, r2
 80082b2:	005b      	lsls	r3, r3, #1
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	461a      	mov	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c4:	d109      	bne.n	80082da <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x5e>
      requests[i].node_idx = node_id;
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4613      	mov	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	461a      	mov	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	3301      	adds	r3, #1
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d3e1      	bcc.n	80082ae <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x32>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6858      	ldr	r0, [r3, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	331c      	adds	r3, #28
 80082f6:	681c      	ldr	r4, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	69d9      	ldr	r1, [r3, #28]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	699a      	ldr	r2, [r3, #24]
 8008300:	4613      	mov	r3, r2
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	4413      	add	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800830c:	2304      	movs	r3, #4
 800830e:	47a0      	blx	r4
 8008310:	4603      	mov	r3, r0
 8008312:	72fb      	strb	r3, [r7, #11]
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0xa2>
 800831a:	7afb      	ldrb	r3, [r7, #11]
 800831c:	e000      	b.n	8008320 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0xa4>
      scratch_buffer_head_,
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	371c      	adds	r7, #28
 8008324:	46bd      	mov	sp, r7
 8008326:	bd90      	pop	{r4, r7, pc}

08008328 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
  return non_persistent_buffer_allocator_->GetNonPersistentUsedBytes() +
         persistent_buffer_allocator_->GetPersistentUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800833a:	f005 fc3f 	bl	800dbbc <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]
 8008342:	e030      	b.n	80083a6 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x7e>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8008344:	68b8      	ldr	r0, [r7, #8]
 8008346:	f7fd fed7 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800834a:	4603      	mov	r3, r0
 800834c:	69f9      	ldr	r1, [r7, #28]
 800834e:	4618      	mov	r0, r3
 8008350:	f7fd ff66 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8008354:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
 800835c:	f005 fc2e 	bl	800dbbc <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8008360:	69b8      	ldr	r0, [r7, #24]
 8008362:	f7fd fed7 	bl	8006114 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8008366:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6898      	ldr	r0, [r3, #8]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3308      	adds	r3, #8
 8008374:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	212c      	movs	r1, #44	@ 0x2c
 800837a:	fb02 f101 	mul.w	r1, r2, r1
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 800837e:	2204      	movs	r2, #4
 8008380:	4798      	blx	r3
 8008382:	6138      	str	r0, [r7, #16]
            alignof(NodeAndRegistration)));
    if (output == nullptr) {
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d104      	bne.n	8008394 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x6c>
      MicroPrintf("Failed to allocate memory for node_and_registrations.");
 800838a:	4811      	ldr	r0, [pc, #68]	@ (80083d0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
 800838c:	f002 fb8c 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8008390:	2301      	movs	r3, #1
 8008392:	e019      	b.n	80083c8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa0>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	4413      	add	r3, r2
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	3301      	adds	r3, #1
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	68b8      	ldr	r0, [r7, #8]
 80083a8:	f7fd fea6 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 80083ac:	4603      	mov	r3, r0
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fd ff28 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 80083b4:	4602      	mov	r2, r0
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4293      	cmp	r3, r2
 80083ba:	bf34      	ite	cc
 80083bc:	2301      	movcc	r3, #1
 80083be:	2300      	movcs	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1be      	bne.n	8008344 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c>
  }
  return kTfLiteOk;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3720      	adds	r7, #32
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	080126c4 	.word	0x080126c4

080083d4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 80083d4:	b590      	push	{r4, r7, lr}
 80083d6:	b089      	sub	sp, #36	@ 0x24
 80083d8:	af02      	add	r7, sp, #8
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 80083e2:	68b8      	ldr	r0, [r7, #8]
 80083e4:	f7fd fe88 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 80083e8:	4602      	mov	r2, r0
 80083ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f7fd ff16 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 80083f4:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 80083fc:	f005 fbde 	bl	800dbbc <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3334      	adds	r3, #52	@ 0x34
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	4798      	blx	r3
 800840c:	6138      	str	r0, [r7, #16]

  if (tensor == nullptr) {
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d104      	bne.n	800841e <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x4a>
    MicroPrintf("Failed to allocate memory for persistent TfLiteTensor");
 8008414:	4821      	ldr	r0, [pc, #132]	@ (800849c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>)
 8008416:	f002 fb47 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return nullptr;
 800841a:	2300      	movs	r3, #0
 800841c:	e039      	b.n	8008492 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbe>
  }

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3338      	adds	r3, #56	@ 0x38
 8008424:	681c      	ldr	r4, [r3, #0]
 8008426:	2300      	movs	r3, #0
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	47a0      	blx	r4
 8008438:	4603      	mov	r3, r0
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 800843a:	2b00      	cmp	r3, #0
 800843c:	bf14      	ite	ne
 800843e:	2301      	movne	r3, #1
 8008440:	2300      	moveq	r3, #0
 8008442:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7e>
    MicroPrintf(
 8008448:	4815      	ldr	r0, [pc, #84]	@ (80084a0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
 800844a:	f002 fb2d 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "Failed to populate a persistent TfLiteTensor struct "
        "from flatbuffer data!");
    return nullptr;
 800844e:	2300      	movs	r3, #0
 8008450:	e01f      	b.n	8008492 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbe>
  }

  if (subgraph_allocations != nullptr) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01b      	beq.n	8008490 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8008458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	4413      	add	r3, r2
 8008460:	6859      	ldr	r1, [r3, #4]
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4613      	mov	r3, r2
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 8008474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	6859      	ldr	r1, [r3, #4]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	4613      	mov	r3, r2
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	440b      	add	r3, r1
 800848a:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 8008490:	693b      	ldr	r3, [r7, #16]
}
 8008492:	4618      	mov	r0, r3
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	bd90      	pop	{r4, r7, pc}
 800849a:	bf00      	nop
 800849c:	080126fc 	.word	0x080126fc
 80084a0:	08012734 	.word	0x08012734

080084a4 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(tensor != nullptr);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x14>
 80084b4:	f005 fb82 	bl	800dbbc <abort>

  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d11d      	bne.n	80084fc <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x58>
    TFLITE_DCHECK(tensor->quantization.params != nullptr);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x28>
 80084c8:	f005 fb78 	bl	800dbbc <abort>
    TfLiteAffineQuantization* quantization =
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d0:	60fb      	str	r3, [r7, #12]
        reinterpret_cast<TfLiteAffineQuantization*>(
            tensor->quantization.params);

    non_persistent_buffer_allocator_->DeallocateTemp(
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6858      	ldr	r0, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	330c      	adds	r3, #12
 80084de:	681b      	ldr	r3, [r3, #0]
        reinterpret_cast<uint8_t*>(quantization->zero_point));
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	6852      	ldr	r2, [r2, #4]
    non_persistent_buffer_allocator_->DeallocateTemp(
 80084e4:	4611      	mov	r1, r2
 80084e6:	4798      	blx	r3
    non_persistent_buffer_allocator_->DeallocateTemp(
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	330c      	adds	r3, #12
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
        reinterpret_cast<uint8_t*>(quantization));
  }

  // Clear the data in case someone still access tensor arena by mistake
  tensor->quantization.type = kTfLiteNoQuantization;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2200      	movs	r2, #0
 8008500:	631a      	str	r2, [r3, #48]	@ 0x30
  tensor->quantization.params = nullptr;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2200      	movs	r2, #0
 8008506:	635a      	str	r2, [r3, #52]	@ 0x34
  tensor->data.data = nullptr;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2200      	movs	r2, #0
 800850c:	605a      	str	r2, [r3, #4]
  tensor->dims = nullptr;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2200      	movs	r2, #0
 8008512:	609a      	str	r2, [r3, #8]
  non_persistent_buffer_allocator_->DeallocateTemp(
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	330c      	adds	r3, #12
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
      reinterpret_cast<uint8_t*>(tensor));
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8008530:	b590      	push	{r4, r7, lr}
 8008532:	b089      	sub	sp, #36	@ 0x24
 8008534:	af02      	add	r7, sp, #8
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800853e:	68b8      	ldr	r0, [r7, #8]
 8008540:	f7fd fdda 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 8008544:	4602      	mov	r2, r0
 8008546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008548:	4619      	mov	r1, r3
 800854a:	4610      	mov	r0, r2
 800854c:	f7fd fe68 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8008550:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8008558:	f005 fb30 	bl	800dbbc <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor = reinterpret_cast<TfLiteTensor*>(
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6858      	ldr	r0, [r3, #4]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3308      	adds	r3, #8
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2204      	movs	r2, #4
 800856c:	2140      	movs	r1, #64	@ 0x40
 800856e:	4798      	blx	r3
 8008570:	6138      	str	r0, [r7, #16]
                                                     alignof(TfLiteTensor)));
  if (tensor == nullptr) {
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d106      	bne.n	8008586 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x56>
    MicroPrintf("Failed to allocate temp. memory for tensor %d, subgraph %d",
 8008578:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	4821      	ldr	r0, [pc, #132]	@ (8008604 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
 800857e:	f002 fa93 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                tensor_index, subgraph_index);
    return nullptr;
 8008582:	2300      	movs	r3, #0
 8008584:	e039      	b.n	80085fa <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xca>
  }

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3338      	adds	r3, #56	@ 0x38
 800858c:	681c      	ldr	r4, [r3, #0]
 800858e:	2301      	movs	r3, #1
 8008590:	9301      	str	r3, [sp, #4]
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	47a0      	blx	r4
 80085a0:	4603      	mov	r3, r0
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bf14      	ite	ne
 80085a6:	2301      	movne	r3, #1
 80085a8:	2300      	moveq	r3, #0
 80085aa:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x8a>
    MicroPrintf(
 80085b0:	4815      	ldr	r0, [pc, #84]	@ (8008608 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd8>)
 80085b2:	f002 fa79 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e01f      	b.n	80085fa <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xca>
  }

  if (subgraph_allocations != nullptr) {
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01b      	beq.n	80085f8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 80085c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	4413      	add	r3, r2
 80085c8:	6859      	ldr	r1, [r3, #4]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4613      	mov	r3, r2
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 80085dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	4413      	add	r3, r2
 80085e4:	6859      	ldr	r1, [r3, #4]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4613      	mov	r3, r2
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	4413      	add	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 80085f8:	693b      	ldr	r3, [r7, #16]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd90      	pop	{r4, r7, pc}
 8008602:	bf00      	nop
 8008604:	08012780 	.word	0x08012780
 8008608:	080127bc 	.word	0x080127bc

0800860c <_ZN6tflite14MicroAllocator18AllocateTempBufferEjj>:

uint8_t* MicroAllocator::AllocateTempBuffer(size_t size, size_t alignment) {
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  return non_persistent_buffer_allocator_->AllocateTemp(size, alignment);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6858      	ldr	r0, [r3, #4]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3308      	adds	r3, #8
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	4798      	blx	r3
 800862c:	4603      	mov	r3, r0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <_ZN6tflite14MicroAllocator20DeallocateTempBufferEPh>:

void MicroAllocator::DeallocateTempBuffer(uint8_t* buffer) {
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  non_persistent_buffer_allocator_->DeallocateTemp(buffer);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	330c      	adds	r3, #12
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	4610      	mov	r0, r2
 8008652:	4798      	blx	r3
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

TfLiteStatus MicroAllocator::ResetTempAllocations() {
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  return non_persistent_buffer_allocator_->ResetTempAllocations();
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3314      	adds	r3, #20
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4610      	mov	r0, r2
 8008674:	4798      	blx	r3
 8008676:	4603      	mov	r3, r0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <_ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv>:

bool MicroAllocator::IsAllTempDeallocated() {
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  return non_persistent_buffer_allocator_->IsAllTempDeallocated();
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3310      	adds	r3, #16
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4610      	mov	r0, r2
 8008698:	4798      	blx	r3
 800869a:	4603      	mov	r3, r0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
}

#endif  // USE_TFLM_COMPRESSION

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 80086a4:	b590      	push	{r4, r7, lr}
 80086a6:	b08b      	sub	sp, #44	@ 0x2c
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 80086b6:	f005 fa81 	bl	800dbbc <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80086ba:	2300      	movs	r3, #0
 80086bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80086be:	e06a      	b.n	8008796 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 80086c0:	68b8      	ldr	r0, [r7, #8]
 80086c2:	f7fd fd19 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 80086c6:	4603      	mov	r3, r0
 80086c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fd fda8 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 80086d0:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
 80086d8:	f005 fa70 	bl	800dbbc <abort>

    size_t alloc_count = subgraph->tensors()->size();
 80086dc:	69f8      	ldr	r0, [r7, #28]
 80086de:	f7fe f80c 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 80086e2:	4603      	mov	r3, r0
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe fe2d 	bl	8007344 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 80086ea:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors = reinterpret_cast<TfLiteEvalTensor*>(
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6898      	ldr	r0, [r3, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	681c      	ldr	r4, [r3, #0]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	4613      	mov	r3, r2
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	2204      	movs	r2, #4
 8008706:	4619      	mov	r1, r3
 8008708:	47a0      	blx	r4
 800870a:	6178      	str	r0, [r7, #20]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    if (tensors == nullptr) {
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
      MicroPrintf(
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	4613      	mov	r3, r2
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4619      	mov	r1, r3
 800871e:	4828      	ldr	r0, [pc, #160]	@ (80087c0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x11c>)
 8008720:	f002 f9c2 	bl	800aaa8 <_Z11MicroPrintfPKcz>
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 8008724:	2301      	movs	r3, #1
 8008726:	e047      	b.n	80087b8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 8008728:	2300      	movs	r3, #0
 800872a:	623b      	str	r3, [r7, #32]
 800872c:	e026      	b.n	800877c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd8>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
          *subgraph->tensors()->Get(i), model->buffers(), &tensors[i]);
 800872e:	69f8      	ldr	r0, [r7, #28]
 8008730:	f7fd ffe3 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 8008734:	4603      	mov	r3, r0
 8008736:	6a39      	ldr	r1, [r7, #32]
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe fe11 	bl	8007360 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 800873e:	4604      	mov	r4, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8008740:	68b8      	ldr	r0, [r7, #8]
 8008742:	f7fe f83d 	bl	80067c0 <_ZNK6tflite5Model7buffersEv>
 8008746:	4601      	mov	r1, r0
          *subgraph->tensors()->Get(i), model->buffers(), &tensors[i]);
 8008748:	6a3a      	ldr	r2, [r7, #32]
 800874a:	4613      	mov	r3, r2
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	4413      	add	r3, r2
 8008758:	461a      	mov	r2, r3
 800875a:	4620      	mov	r0, r4
 800875c:	f7ff fb6c 	bl	8007e38 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor>
 8008760:	4603      	mov	r3, r0
 8008762:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 8008764:	7cfb      	ldrb	r3, [r7, #19]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
        MicroPrintf("Failed to initialize tensor %d", i);
 800876a:	6a39      	ldr	r1, [r7, #32]
 800876c:	4815      	ldr	r0, [pc, #84]	@ (80087c4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x120>)
 800876e:	f002 f99b 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8008772:	2301      	movs	r3, #1
 8008774:	e020      	b.n	80087b8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
    for (size_t i = 0; i < alloc_count; ++i) {
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	3301      	adds	r3, #1
 800877a:	623b      	str	r3, [r7, #32]
 800877c:	6a3a      	ldr	r2, [r7, #32]
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	429a      	cmp	r2, r3
 8008782:	d3d4      	bcc.n	800872e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8a>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	4413      	add	r3, r2
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008792:	3301      	adds	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24
 8008796:	68b8      	ldr	r0, [r7, #8]
 8008798:	f7fd fcae 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800879c:	4603      	mov	r3, r0
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd fd30 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 80087a4:	4602      	mov	r2, r0
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	4293      	cmp	r3, r2
 80087aa:	bf34      	ite	cc
 80087ac:	2301      	movcc	r3, #1
 80087ae:	2300      	movcs	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d184      	bne.n	80086c0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c>
  }
  return kTfLiteOk;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	372c      	adds	r7, #44	@ 0x2c
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd90      	pop	{r4, r7, pc}
 80087c0:	08012800 	.word	0x08012800
 80087c4:	08012848 	.word	0x08012848

080087c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl>:

TfLiteStatus MicroAllocator::AllocateVariables(
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors,
    const int32_t* offline_planner_offsets) {
 80087c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ca:	b08b      	sub	sp, #44	@ 0x2c
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6178      	str	r0, [r7, #20]
 80087d0:	6139      	str	r1, [r7, #16]
 80087d2:	60fa      	str	r2, [r7, #12]
 80087d4:	60bb      	str	r3, [r7, #8]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80087d6:	2300      	movs	r3, #0
 80087d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087da:	e05e      	b.n	800889a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xd2>
    auto* tensor = subgraph->tensors()->Get(i);
 80087dc:	6938      	ldr	r0, [r7, #16]
 80087de:	f7fd ff8c 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 80087e2:	4603      	mov	r3, r0
 80087e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe fdba 	bl	8007360 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 80087ec:	6238      	str	r0, [r7, #32]
    if (tensor->is_variable()) {
 80087ee:	6a38      	ldr	r0, [r7, #32]
 80087f0:	f7fd ff36 	bl	8006660 <_ZNK6tflite6Tensor11is_variableEv>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d04c      	beq.n	8008894 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xcc>
      if (offline_planner_offsets == nullptr ||
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x48>
          offline_planner_offsets[i] == kOnlinePlannedBuffer) {
 8008800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	4413      	add	r3, r2
 8008808:	681b      	ldr	r3, [r3, #0]
      if (offline_planner_offsets == nullptr ||
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d141      	bne.n	8008894 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xcc>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(
 8008810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008812:	4613      	mov	r3, r2
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	461a      	mov	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f107 0218 	add.w	r2, r7, #24
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f7fd feda 	bl	80065e0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800882c:	4603      	mov	r3, r0
 800882e:	77fb      	strb	r3, [r7, #31]
 8008830:	7ffb      	ldrb	r3, [r7, #31]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x72>
 8008836:	7ffb      	ldrb	r3, [r7, #31]
 8008838:	e040      	b.n	80088bc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xf4>
            TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

        eval_tensors[i].data.data =
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	689e      	ldr	r6, [r3, #8]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3308      	adds	r3, #8
 8008846:	681d      	ldr	r5, [r3, #0]
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	607b      	str	r3, [r7, #4]
                buffer_size, MicroArenaBufferAlignment());
 800884c:	f7fd fc0d 	bl	800606a <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8008850:	4603      	mov	r3, r0
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008852:	4619      	mov	r1, r3
        eval_tensors[i].data.data =
 8008854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008856:	4613      	mov	r3, r2
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	461a      	mov	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	189c      	adds	r4, r3, r2
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008864:	460a      	mov	r2, r1
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	4630      	mov	r0, r6
 800886a:	47a8      	blx	r5
 800886c:	4603      	mov	r3, r0
        eval_tensors[i].data.data =
 800886e:	6023      	str	r3, [r4, #0]

        if (eval_tensors[i].data.data == nullptr) {
 8008870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008872:	4613      	mov	r3, r2
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	461a      	mov	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xcc>
          MicroPrintf("Failed to allocate variable tensor of size %d",
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	4619      	mov	r1, r3
 800888a:	480e      	ldr	r0, [pc, #56]	@ (80088c4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xfc>)
 800888c:	f002 f90c 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                      buffer_size);
          return kTfLiteError;
 8008890:	2301      	movs	r3, #1
 8008892:	e013      	b.n	80088bc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xf4>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	3301      	adds	r3, #1
 8008898:	627b      	str	r3, [r7, #36]	@ 0x24
 800889a:	6938      	ldr	r0, [r7, #16]
 800889c:	f7fd ff2d 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 80088a0:	4603      	mov	r3, r0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fd4e 	bl	8007344 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 80088a8:	4602      	mov	r2, r0
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	4293      	cmp	r3, r2
 80088ae:	bf34      	ite	cc
 80088b0:	2301      	movcc	r3, #1
 80088b2:	2300      	movcs	r3, #0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d190      	bne.n	80087dc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x14>
        }
      }
    }
  }
  return kTfLiteOk;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	372c      	adds	r7, #44	@ 0x2c
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c4:	08012868 	.word	0x08012868

080088c8 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6898      	ldr	r0, [r3, #8]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3308      	adds	r3, #8
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2204      	movs	r2, #4
 80088e0:	2140      	movs	r1, #64	@ 0x40
 80088e2:	4798      	blx	r3
 80088e4:	4603      	mov	r3, r0
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 80088ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f0:	b087      	sub	sp, #28
 80088f2:	af02      	add	r7, sp, #8
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
 80088fa:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689c      	ldr	r4, [r3, #8]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	685d      	ldr	r5, [r3, #4]
      persistent_buffer_allocator_, non_persistent_buffer_allocator_,
      allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 8008904:	68b8      	ldr	r0, [r7, #8]
 8008906:	f7fd fbf7 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800890a:	4602      	mov	r2, r0
 800890c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f7fd fc85 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8008916:	4603      	mov	r3, r0
 8008918:	4618      	mov	r0, r3
 800891a:	f7fd feee 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 800891e:	4602      	mov	r2, r0
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	4619      	mov	r1, r3
 8008924:	4610      	mov	r0, r2
 8008926:	f7fe fd1b 	bl	8007360 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 800892a:	4606      	mov	r6, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800892c:	68b8      	ldr	r0, [r7, #8]
 800892e:	f7fd ff47 	bl	80067c0 <_ZNK6tflite5Model7buffersEv>
 8008932:	4601      	mov	r1, r0
 8008934:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	9301      	str	r3, [sp, #4]
 800893c:	9100      	str	r1, [sp, #0]
 800893e:	4633      	mov	r3, r6
 8008940:	4629      	mov	r1, r5
 8008942:	4620      	mov	r0, r4
 8008944:	f7ff f910 	bl	8007b68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor>
 8008948:	4603      	mov	r3, r0
      model->buffers(), tensor);
}
 800894a:	4618      	mov	r0, r3
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008952 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, SubgraphAllocations* allocations,
    ScratchBufferHandle* scratch_buffer_handles) {
 8008952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008954:	b09f      	sub	sp, #124	@ 0x7c
 8008956:	af02      	add	r7, sp, #8
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	66bb      	str	r3, [r7, #104]	@ 0x68
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(model, non_persistent_buffer_allocator_);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	f107 0318 	add.w	r3, r7, #24
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe ff74 	bl	800785c <_ZN6tflite21AllocationInfoBuilderC1EPKNS_5ModelEPNS_29INonPersistentBufferAllocatorE>
  TF_LITE_ENSURE_STATUS(
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	461a      	mov	r2, r3
 800897a:	f107 0318 	add.w	r3, r7, #24
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f7fd fff1 	bl	8006968 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>
 8008986:	4603      	mov	r3, r0
 8008988:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800898c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x48>
 8008994:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008998:	e13e      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      builder.CreateAllocationInfo(scratch_buffer_request_count_));

  const int32_t* offline_planner_offsets = nullptr;
 800899a:	2300      	movs	r3, #0
 800899c:	617b      	str	r3, [r7, #20]
  TF_LITE_ENSURE_STATUS(
 800899e:	f107 0214 	add.w	r2, r7, #20
 80089a2:	f107 0318 	add.w	r3, r7, #24
 80089a6:	4611      	mov	r1, r2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fe fbd7 	bl	800715c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80089b4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x70>
 80089bc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80089c0:	e12a      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      builder.GetOfflinePlannedOffsets(&offline_planner_offsets));

  // We allocate buffers for variable tensors here since the offline planner
  // offsets are conviently available here.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80089c2:	2300      	movs	r3, #0
 80089c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089c6:	e027      	b.n	8008a18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xc6>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 80089c8:	68b8      	ldr	r0, [r7, #8]
 80089ca:	f7fd fb95 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 80089ce:	4603      	mov	r3, r0
 80089d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fd fc24 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 80089d8:	6438      	str	r0, [r7, #64]	@ 0x40
    TFLITE_DCHECK(subgraph != nullptr);
 80089da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x92>
 80089e0:	f005 f8ec 	bl	800dbbc <abort>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3330      	adds	r3, #48	@ 0x30
 80089ea:	681c      	ldr	r4, [r3, #0]
 80089ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	47a0      	blx	r4
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008a04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xc0>
 8008a0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008a10:	e102      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a14:	3301      	adds	r3, #1
 8008a16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a18:	68b8      	ldr	r0, [r7, #8]
 8008a1a:	f7fd fb6d 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fd fbef 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8008a26:	4602      	mov	r2, r0
 8008a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	bf34      	ite	cc
 8008a2e:	2301      	movcc	r3, #1
 8008a30:	2300      	movcs	r3, #0
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1c7      	bne.n	80089c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x76>
        subgraph, allocations[subgraph_idx].tensors, offline_planner_offsets));
  }

  TF_LITE_ENSURE_STATUS(
 8008a38:	6979      	ldr	r1, [r7, #20]
 8008a3a:	f107 0318 	add.w	r3, r7, #24
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe f8af 	bl	8006ba4 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>
 8008a46:	4603      	mov	r3, r0
 8008a48:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8008a4c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x108>
 8008a54:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8008a58:	e0de      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      builder.InitializeAllocationInfo(offline_planner_offsets, allocations));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f923 	bl	8008ca6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8008a60:	6638      	str	r0, [r7, #96]	@ 0x60
  TF_LITE_ENSURE_STATUS(builder.MarkAllocationLifetimes(
 8008a62:	f107 0018 	add.w	r0, r7, #24
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a6e:	2100      	movs	r1, #0
 8008a70:	f7fe f9b3 	bl	8006dda <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 8008a74:	4603      	mov	r3, r0
 8008a76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x136>
 8008a82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a86:	e0c7      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      0, scratch_buffer_requests, scratch_buffer_handles, allocations));
  int allocation_info_count = builder.AllocationCount();
 8008a88:	f107 0318 	add.w	r3, r7, #24
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe ff04 	bl	800789a <_ZNK6tflite21AllocationInfoBuilder15AllocationCountEv>
 8008a92:	65b8      	str	r0, [r7, #88]	@ 0x58
  AllocationInfo* allocation_info = builder.Finish();
 8008a94:	f107 0318 	add.w	r3, r7, #24
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe ff0a 	bl	80078b2 <_ZNK6tflite21AllocationInfoBuilder6FinishEv>
 8008a9e:	6578      	str	r0, [r7, #84]	@ 0x54

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      non_persistent_buffer_allocator_->GetAvailableMemory(
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	685d      	ldr	r5, [r3, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3330      	adds	r3, #48	@ 0x30
 8008aac:	681c      	ldr	r4, [r3, #0]
          MicroArenaBufferAlignment());
 8008aae:	f7fd fadc 	bl	800606a <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8008ab2:	4603      	mov	r3, r0
      non_persistent_buffer_allocator_->GetAvailableMemory(
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47a0      	blx	r4
 8008aba:	6538      	str	r0, [r7, #80]	@ 0x50
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	685d      	ldr	r5, [r3, #4]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	681c      	ldr	r4, [r3, #0]
      remaining_arena_size, MicroArenaBufferAlignment());
 8008aca:	f7fd face 	bl	800606a <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8008ace:	4603      	mov	r3, r0
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47a0      	blx	r4
 8008ad8:	64f8      	str	r0, [r7, #76]	@ 0x4c

  if (planner_arena == nullptr) {
 8008ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x192>
    return kTfLiteError;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e099      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
  }

  memory_planner_->Init(planner_arena, remaining_arena_size);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6918      	ldr	r0, [r3, #16]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	331c      	adds	r3, #28
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008af4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008af6:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008afe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe ff67 	bl	80079d4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj>
 8008b06:	4603      	mov	r3, r0
 8008b08:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8008b0c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1c8>
 8008b14:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008b18:	e07e      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      CreatePlan(memory_planner_, allocation_info, allocation_info_count));

  // Commit the plan.
  TF_LITE_ENSURE_STATUS(
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	691c      	ldr	r4, [r3, #16]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3324      	adds	r3, #36	@ 0x24
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4798      	blx	r3
 8008b30:	4601      	mov	r1, r0
 8008b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b36:	4620      	mov	r0, r4
 8008b38:	f7fe ffa5 	bl	8007a86 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8008b42:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1fe>
 8008b4a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008b4e:	e063      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      CommitPlan(memory_planner_,
                 non_persistent_buffer_allocator_->GetOverlayMemoryAddress(),
                 allocation_info, allocation_info_count));

  // Reset all temp allocations used above:
  builder.FreeAllocationInfo();
 8008b50:	f107 0318 	add.w	r3, r7, #24
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fd ff99 	bl	8006a8c <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>
  non_persistent_buffer_allocator_->DeallocateTemp(planner_arena);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	330c      	adds	r3, #12
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3314      	adds	r3, #20
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4798      	blx	r3
 8008b80:	4603      	mov	r3, r0
 8008b82:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8008b86:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x242>
 8008b8e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8008b92:	e041      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      non_persistent_buffer_allocator_->ResetTempAllocations());
  TF_LITE_ENSURE_STATUS(
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6858      	ldr	r0, [r3, #4]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3320      	adds	r3, #32
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	69d2      	ldr	r2, [r2, #28]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4798      	blx	r3
 8008baa:	4603      	mov	r3, r0
 8008bac:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8008bb0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x26c>
 8008bb8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8008bbc:	e02c      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
          scratch_buffer_head_));

#ifdef TF_LITE_SHOW_MEMORY_USE
  memory_planner_->PrintMemoryPlan();
#endif
  head_usage = memory_planner_->GetMaximumMemorySize();
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	691a      	ldr	r2, [r3, #16]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3310      	adds	r3, #16
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
 8008bd0:	66b8      	str	r0, [r7, #104]	@ 0x68
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d902      	bls.n	8008be2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x290>
    max_head_buffer_usage_ = head_usage;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008be0:	621a      	str	r2, [r3, #32]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	685d      	ldr	r5, [r3, #4]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3328      	adds	r3, #40	@ 0x28
 8008bee:	681c      	ldr	r4, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6a1e      	ldr	r6, [r3, #32]
 8008bf4:	f7fd fa39 	bl	800606a <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47a0      	blx	r4
 8008c02:	4603      	mov	r3, r0
 8008c04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008c08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c4>
 8008c10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c14:	e000      	b.n	8008c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      non_persistent_buffer_allocator_->ReserveNonPersistentOverlayMemory(
          max_head_buffer_usage_, MicroArenaBufferAlignment()));
  return kTfLiteOk;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3774      	adds	r7, #116	@ 0x74
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c20 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 8008c32:	f004 ffc3 	bl	800dbbc <abort>

  if (scratch_buffer_request_count_ == 0) {
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e00e      	b.n	8008c60 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6898      	ldr	r0, [r3, #8]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	0091      	lsls	r1, r2, #2
 8008c54:	2204      	movs	r2, #4
 8008c56:	4798      	blx	r3
 8008c58:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	601a      	str	r2, [r3, #0]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));

  return kTfLiteOk;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	619a      	str	r2, [r3, #24]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  scratch_buffer_head_ =
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6858      	ldr	r0, [r3, #4]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3318      	adds	r3, #24
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2204      	movs	r2, #4
 8008c86:	2190      	movs	r1, #144	@ 0x90
 8008c88:	4798      	blx	r3
 8008c8a:	4602      	mov	r2, r0
  scratch_buffer_head_ =
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	61da      	str	r2, [r3, #28]
          sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
          alignof(internal::ScratchBufferRequest));
  if (scratch_buffer_head_ == nullptr) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x34>
    return kTfLiteError;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e000      	b.n	8008c9e <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x36>
  }

  return kTfLiteOk;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	2104      	movs	r1, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fd fb6a 	bl	800638e <_ZN6tflite14AlignPointerUpEPhj>
 8008cba:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

TfLiteBridgeBuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t>:
  P GetPointer(voffset_t field) const {
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8008ce8:	887b      	ldrh	r3, [r7, #2]
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f82d 	bl	8008d4c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t>
 8008cf2:	4603      	mov	r3, r0
  }
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <_ZNK11flatbuffers6VectorIfmE3GetEm>:
  return_type Get(SizeT i) const {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fb fb37 	bl	800437a <_ZNK11flatbuffers6VectorIfmE4sizeEv>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d305      	bcc.n	8008d20 <_ZNK11flatbuffers6VectorIfmE3GetEm+0x24>
 8008d14:	4b0a      	ldr	r3, [pc, #40]	@ (8008d40 <_ZNK11flatbuffers6VectorIfmE3GetEm+0x44>)
 8008d16:	4a0b      	ldr	r2, [pc, #44]	@ (8008d44 <_ZNK11flatbuffers6VectorIfmE3GetEm+0x48>)
 8008d18:	21b0      	movs	r1, #176	@ 0xb0
 8008d1a:	480b      	ldr	r0, [pc, #44]	@ (8008d48 <_ZNK11flatbuffers6VectorIfmE3GetEm+0x4c>)
 8008d1c:	f004 ff56 	bl	800dbcc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7fb fce1 	bl	80046e8 <_ZNK11flatbuffers6VectorIfmE4DataEv>
 8008d26:	4603      	mov	r3, r0
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 f82e 	bl	8008d8c <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhj>
 8008d30:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008d34:	eeb0 0a67 	vmov.f32	s0, s15
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	08012898 	.word	0x08012898
 8008d44:	080128a4 	.word	0x080128a4
 8008d48:	08012940 	.word	0x08012940

08008d4c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t>:
  P GetPointer(voffset_t field) {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d58:	887b      	ldrh	r3, [r7, #2]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7f8 f993 	bl	8001088 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008d62:	4603      	mov	r3, r0
 8008d64:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	89fb      	ldrh	r3, [r7, #14]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008d6e:	89fb      	ldrh	r3, [r7, #14]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d006      	beq.n	8008d82 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t+0x36>
 8008d74:	68b8      	ldr	r0, [r7, #8]
 8008d76:	f7f8 fd2a 	bl	80017ce <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	4413      	add	r3, r2
                        : nullptr;
 8008d80:	e000      	b.n	8008d84 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008d82:	2300      	movs	r3, #0
  }
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhj>:
  static return_type Read(const uint8_t *p, const size_t i) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	edd3 7a00 	vldr	s15, [r3]
 8008da2:	eeb0 0a67 	vmov.f32	s0, s15
 8008da6:	f7fa fe50 	bl	8003a4a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8008daa:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008dae:	eeb0 0a67 	vmov.f32	s0, s15
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public TfLiteBridgeBuiltinDataAllocator {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	4a05      	ldr	r2, [pc, #20]	@ (8008dd8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fe fd27 	bl	800781c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	080160fc 	.word	0x080160fc

08008ddc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff ffe7 	bl	8008db8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8008dea:	2108      	movs	r1, #8
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f004 fe34 	bl	800da5a <_ZdlPvj>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {
namespace {

int GetTensorIndex(int index, int max_size, const int* tensor_indices) {
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  if (index >= 0 && index < max_size) {
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	db0f      	blt.n	8008e2e <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi+0x32>
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	da0b      	bge.n	8008e2e <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi+0x32>
    const int tensor_index = tensor_indices[index];
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d001      	beq.n	8008e2e <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi+0x32>
      return tensor_index;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	e001      	b.n	8008e32 <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi+0x36>
    }
  }
  return -1;
 8008e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

}  // namespace

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b086      	sub	sp, #24
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6819      	ldr	r1, [r3, #0]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	3304      	adds	r3, #4
 8008e56:	461a      	mov	r2, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff ffcf 	bl	8008dfc <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi>
 8008e5e:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da01      	bge.n	8008e6a <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8008e66:	2300      	movs	r3, #0
 8008e68:	e008      	b.n	8008e7c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3314      	adds	r3, #20
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6979      	ldr	r1, [r7, #20]
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	4798      	blx	r3
 8008e78:	4603      	mov	r3, r0
 8008e7a:	bf00      	nop
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	6819      	ldr	r1, [r3, #0]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff ffac 	bl	8008dfc <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi>
 8008ea4:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	da01      	bge.n	8008eb0 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8008eac:	2300      	movs	r3, #0
 8008eae:	e008      	b.n	8008ec2 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3314      	adds	r3, #20
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6979      	ldr	r1, [r7, #20]
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	4798      	blx	r3
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	bf00      	nop
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3718      	adds	r7, #24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 8008eca:	b40e      	push	{r1, r2, r3}
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8008ed4:	f107 0320 	add.w	r3, r7, #32
 8008ed8:	60fb      	str	r3, [r7, #12]
  VMicroPrintf(format, args);
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	69f8      	ldr	r0, [r7, #28]
 8008ede:	f001 fdd1 	bl	800aa84 <_Z12VMicroPrintfPKcSt9__va_list>
  va_end(args);
}
 8008ee2:	bf00      	nop
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008eec:	b003      	add	sp, #12
 8008eee:	4770      	bx	lr

08008ef0 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
  return names;
 8008ef4:	4b02      	ldr	r3, [pc, #8]	@ (8008f00 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	08016170 	.word	0x08016170

08008f04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_STABLEHLO_CASE)) return "";
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	23d1      	movs	r3, #209	@ 0xd1
 8008f12:	613b      	str	r3, [r7, #16]
 8008f14:	f107 0210 	add.w	r2, r7, #16
 8008f18:	f107 010c 	add.w	r1, r7, #12
 8008f1c:	1d3b      	adds	r3, r7, #4
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fd4d 	bl	80099be <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2a>
 8008f2a:	4b07      	ldr	r3, [pc, #28]	@ (8008f48 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x44>)
 8008f2c:	e008      	b.n	8008f40 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3c>
  const size_t index = static_cast<size_t>(e);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	617b      	str	r3, [r7, #20]
  return EnumNamesBuiltinOperator()[index];
 8008f32:	f7ff ffdd 	bl	8008ef0 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8008f36:	4602      	mov	r2, r0
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	681b      	ldr	r3, [r3, #0]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3718      	adds	r7, #24
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	08013880 	.word	0x08013880

08008f4c <_ZNK6tflite8Operator14custom_optionsEv>:
  const ::flatbuffers::Vector<uint8_t> *custom_options() const {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	210e      	movs	r1, #14
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fb f981 	bl	8004260 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>
 8008f5e:	4603      	mov	r3, r0
  }
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <_ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj>:
// kernels.
// TODO(b/213010668): migrate all existing kernels to use MicroContext, delete
// these functions, and remove corresponding members from the TfLiteContext
// struct for TFLM.
inline void* MicroContextAllocatePersistentBuffer(TfLiteContext* ctx,
                                                  size_t bytes) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  return GetMicroContext(ctx)->AllocatePersistentBuffer(bytes);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fa fd08 	bl	8003988 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	3208      	adds	r2, #8
 8008f7e:	6812      	ldr	r2, [r2, #0]
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	4790      	blx	r2
 8008f86:	4603      	mov	r3, r0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <_ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi>:
inline TfLiteStatus MicroContextRequestScratchBufferInArena(TfLiteContext* ctx,
                                                            size_t bytes,
                                                            int* buffer_idx) {
 8008f90:	b590      	push	{r4, r7, lr}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
  return GetMicroContext(ctx)->RequestScratchBufferInArena(bytes, buffer_idx);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7fa fcf3 	bl	8003988 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	320c      	adds	r2, #12
 8008fa8:	6814      	ldr	r4, [r2, #0]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	47a0      	blx	r4
 8008fb2:	4603      	mov	r3, r0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd90      	pop	{r4, r7, pc}

08008fbc <_ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti>:
inline void* MicroContextGetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  return GetMicroContext(ctx)->GetScratchBuffer(buffer_idx);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7fa fcde 	bl	8003988 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	3210      	adds	r2, #16
 8008fd2:	6812      	ldr	r2, [r2, #0]
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	4790      	blx	r2
 8008fda:	4603      	mov	r3, r0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <_ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti>:
inline TfLiteTensor* MicroContextGetTensor(const struct TfLiteContext* context,
                                           int tensor_idx) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  return GetMicroContext(context)->AllocateTempTfLiteTensor(tensor_idx);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fa fcca 	bl	8003988 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	3214      	adds	r2, #20
 8008ffa:	6812      	ldr	r2, [r2, #0]
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	4790      	blx	r2
 8009002:	4603      	mov	r3, r0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <_ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti>:
inline TfLiteEvalTensor* MicroContextGetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  return GetMicroContext(context)->GetEvalTensor(tensor_idx);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fa fcb6 	bl	8003988 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800901c:	4603      	mov	r3, r0
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	3224      	adds	r2, #36	@ 0x24
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	4618      	mov	r0, r3
 8009028:	4790      	blx	r2
 800902a:	4603      	mov	r3, r0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <_ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType>:
inline TfLiteExternalContext* MicroContextGetExternalContext(
    TfLiteContext* context, TfLiteExternalContextType unused) {
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  return reinterpret_cast<TfLiteExternalContext*>(
      GetMicroContext(context)->external_context());
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7fa fca1 	bl	8003988 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8009046:	4603      	mov	r3, r0
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	322c      	adds	r2, #44	@ 0x2c
 800904c:	6812      	ldr	r2, [r2, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	4790      	blx	r2
 8009052:	4603      	mov	r3, r0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>:
  // identifier of the operator inside the subgraph
  int GetCurrentOperatorIndex() { return current_operator_index_; }

  // Gets the list of allocations for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // pointer should be at least as long as this interpreter. TFLM supports only
  // one external context.
  TfLiteStatus SetMicroExternalContext(void* external_context_payload);

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4618      	mov	r0, r3
 8009082:	f7fd f839 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 8009086:	4603      	mov	r3, r0
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f7fd f8c8 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8009090:	4603      	mov	r3, r0
 8009092:	4618      	mov	r0, r3
 8009094:	f7fd fb3f 	bl	8006716 <_ZNK6tflite8SubGraph6inputsEv>
 8009098:	4603      	mov	r3, r0
 800909a:	4618      	mov	r0, r3
 800909c:	f7fb f9b2 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 80090a0:	4603      	mov	r3, r0
  }
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fd f81e 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 80090bc:	4603      	mov	r3, r0
 80090be:	2100      	movs	r1, #0
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fd f8ad 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 80090c6:	4603      	mov	r3, r0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fd fb24 	bl	8006716 <_ZNK6tflite8SubGraph6inputsEv>
 80090ce:	4603      	mov	r3, r0
  }
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fd f807 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2100      	movs	r1, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fd f896 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 80090f4:	4603      	mov	r3, r0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fd fb1b 	bl	8006732 <_ZNK6tflite8SubGraph7outputsEv>
 80090fc:	4603      	mov	r3, r0
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fb f980 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8009104:	4603      	mov	r3, r0
  }
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f7fc ffec 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 8009120:	4603      	mov	r3, r0
 8009122:	2100      	movs	r1, #0
 8009124:	4618      	mov	r0, r3
 8009126:	f7fd f87b 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800912a:	4603      	mov	r3, r0
 800912c:	4618      	mov	r0, r3
 800912e:	f7fd fb00 	bl	8006732 <_ZNK6tflite8SubGraph7outputsEv>
 8009132:	4603      	mov	r3, r0
  }
 8009134:	4618      	mov	r0, r3
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <_ZN6tflite12_GLOBAL__N_123FlagToMemoryPlannerTypeEb>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {
namespace {
MemoryPlannerType FlagToMemoryPlannerType(bool preserve_all_tensors) {
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	71fb      	strb	r3, [r7, #7]
  if (preserve_all_tensors) {
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <_ZN6tflite12_GLOBAL__N_123FlagToMemoryPlannerTypeEb+0x14>
    return MemoryPlannerType::kLinear;
 800914c:	2301      	movs	r3, #1
 800914e:	e000      	b.n	8009152 <_ZN6tflite12_GLOBAL__N_123FlagToMemoryPlannerTypeEb+0x16>
  } else {
    return MemoryPlannerType::kGreedy;
 8009150:	2300      	movs	r3, #0
  }
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb>:
}  // namespace

MicroInterpreter::MicroInterpreter(const Model* model,
 800915e:	b580      	push	{r7, lr}
 8009160:	b086      	sub	sp, #24
 8009162:	af02      	add	r7, sp, #8
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	603b      	str	r3, [r7, #0]
                                   uint8_t* tensor_arena,
                                   size_t tensor_arena_size,
                                   MicroResourceVariables* resource_variables,
                                   MicroProfilerInterface* profiler,
                                   bool preserve_all_tensors)
    : model_(model),
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	601a      	str	r2, [r3, #0]
      op_resolver_(op_resolver),
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	605a      	str	r2, [r3, #4]
      graph_(&context_, model, &allocator_, resource_variables),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr),
      micro_context_(&allocator_, model_, &graph_) {
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3308      	adds	r3, #8
 800917c:	2264      	movs	r2, #100	@ 0x64
 800917e:	2100      	movs	r1, #0
 8009180:	4618      	mov	r0, r3
 8009182:	f005 fdd1 	bl	800ed28 <memset>
      allocator_(*MicroAllocator::Create(
 8009186:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff ffd6 	bl	800913c <_ZN6tflite12_GLOBAL__N_123FlagToMemoryPlannerTypeEb>
 8009190:	4603      	mov	r3, r0
 8009192:	461a      	mov	r2, r3
 8009194:	69b9      	ldr	r1, [r7, #24]
 8009196:	6838      	ldr	r0, [r7, #0]
 8009198:	f7fe fee0 	bl	8007f5c <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE>
 800919c:	4602      	mov	r2, r0
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      graph_(&context_, model, &allocator_, resource_variables),
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f103 0108 	add.w	r1, r3, #8
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	4613      	mov	r3, r2
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	f000 febf 	bl	8009f3c <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>
      tensors_allocated_(false),
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      initialization_status_(kTfLiteError),
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
      micro_context_(&allocator_, model_, &graph_) {
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
      input_tensors_(nullptr),
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      output_tensors_(nullptr),
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      micro_context_(&allocator_, model_, &graph_) {
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f103 00a4 	add.w	r0, r3, #164	@ 0xa4
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3370      	adds	r3, #112	@ 0x70
 80091f8:	f000 fc20 	bl	8009a3c <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE>
  Init(profiler);
 80091fc:	6a39      	ldr	r1, [r7, #32]
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 f82a 	bl	8009258 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE>
}
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <_ZN6tflite16MicroInterpreterD1Ev>:
      output_tensors_(nullptr),
      micro_context_(&allocator_, model_, &graph_) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3370      	adds	r3, #112	@ 0x70
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff ff1e 	bl	800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	bf14      	ite	ne
 8009226:	2301      	movne	r3, #1
 8009228:	2300      	moveq	r3, #0
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3370      	adds	r3, #112	@ 0x70
 8009234:	4618      	mov	r0, r3
 8009236:	f001 f869 	bl	800a30c <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv>
  }
}
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	33a4      	adds	r3, #164	@ 0xa4
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fc26 	bl	8009a90 <_ZN6tflite23MicroInterpreterContextD1Ev>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3370      	adds	r3, #112	@ 0x70
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fead 	bl	8009fa8 <_ZN6tflite21MicroInterpreterGraphD1Ev>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE>:

void MicroInterpreter::Init(MicroProfilerInterface* profiler) {
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  micro_context_.SetInterpreterState(
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	33a4      	adds	r3, #164	@ 0xa4
 8009266:	2100      	movs	r1, #0
 8009268:	4618      	mov	r0, r3
 800926a:	f000 fd4f 	bl	8009d0c <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kInit);
  context_.impl_ = static_cast<void*>(&micro_context_);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f103 02a4 	add.w	r2, r3, #164	@ 0xa4
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	615a      	str	r2, [r3, #20]
  context_.ReportError = MicroContextReportOpError;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a0f      	ldr	r2, [pc, #60]	@ (80092b8 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x60>)
 800927c:	61da      	str	r2, [r3, #28]
  context_.GetTensor = MicroContextGetTensor;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a0e      	ldr	r2, [pc, #56]	@ (80092bc <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x64>)
 8009282:	659a      	str	r2, [r3, #88]	@ 0x58
  context_.GetEvalTensor = MicroContextGetEvalTensor;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a0e      	ldr	r2, [pc, #56]	@ (80092c0 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x68>)
 8009288:	65da      	str	r2, [r3, #92]	@ 0x5c
  context_.profiler = profiler;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	63da      	str	r2, [r3, #60]	@ 0x3c
  context_.RequestScratchBufferInArena =
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a0c      	ldr	r2, [pc, #48]	@ (80092c4 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x6c>)
 8009294:	649a      	str	r2, [r3, #72]	@ 0x48
      MicroContextRequestScratchBufferInArena;
  context_.GetExternalContext = MicroContextGetExternalContext;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a0b      	ldr	r2, [pc, #44]	@ (80092c8 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x70>)
 800929a:	631a      	str	r2, [r3, #48]	@ 0x30
  context_.AllocatePersistentBuffer = MicroContextAllocatePersistentBuffer;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a0b      	ldr	r2, [pc, #44]	@ (80092cc <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x74>)
 80092a0:	641a      	str	r2, [r3, #64]	@ 0x40
  context_.GetScratchBuffer = MicroContextGetScratchBuffer;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a0a      	ldr	r2, [pc, #40]	@ (80092d0 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x78>)
 80092a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  initialization_status_ = kTfLiteOk;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	08008ecb 	.word	0x08008ecb
 80092bc:	08008fe5 	.word	0x08008fe5
 80092c0:	0800900d 	.word	0x0800900d
 80092c4:	08008f91 	.word	0x08008f91
 80092c8:	08009035 	.word	0x08009035
 80092cc:	08008f69 	.word	0x08008f69
 80092d0:	08008fbd 	.word	0x08008fbd

080092d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 80092d4:	b590      	push	{r4, r7, lr}
 80092d6:	b097      	sub	sp, #92	@ 0x5c
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 80092dc:	2300      	movs	r3, #0
 80092de:	657b      	str	r3, [r7, #84]	@ 0x54
 80092e0:	e151      	b.n	8009586 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b2>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fc ff06 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 80092ec:	4602      	mov	r2, r0
 80092ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	f7fc ff94 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 80092f8:	6478      	str	r0, [r7, #68]	@ 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 80092fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x30>
 8009300:	f004 fc5c 	bl	800dbbc <abort>

    auto* opcodes = model_->operator_codes();
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4618      	mov	r0, r3
 800930a:	f7fd fa4b 	bl	80067a4 <_ZNK6tflite5Model14operator_codesEv>
 800930e:	6438      	str	r0, [r7, #64]	@ 0x40
    TfLiteBridgeBuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009314:	4618      	mov	r0, r3
 8009316:	f7ff fcd5 	bl	8008cc4 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 800931a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800931c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800931e:	f7fc fef9 	bl	8006114 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8009322:	63b8      	str	r0, [r7, #56]	@ 0x38
    for (size_t i = 0; i < operators_size; ++i) {
 8009324:	2300      	movs	r3, #0
 8009326:	653b      	str	r3, [r7, #80]	@ 0x50
 8009328:	e125      	b.n	8009576 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a2>
      const auto* op = subgraph->operators()->Get(i);
 800932a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800932c:	f7fc fed6 	bl	80060dc <_ZNK6tflite8SubGraph9operatorsEv>
 8009330:	4603      	mov	r3, r0
 8009332:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe f839 	bl	80073ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm>
 800933a:	6378      	str	r0, [r7, #52]	@ 0x34
      const size_t index = op->opcode_index();
 800933c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800933e:	f7fd f9a3 	bl	8006688 <_ZNK6tflite8Operator12opcode_indexEv>
 8009342:	6338      	str	r0, [r7, #48]	@ 0x30
      if (index >= opcodes->size()) {
 8009344:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009346:	f7fe f857 	bl	80073f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4sizeEv>
 800934a:	4602      	mov	r2, r0
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	4293      	cmp	r3, r2
 8009350:	bf2c      	ite	cs
 8009352:	2301      	movcs	r3, #1
 8009354:	2300      	movcc	r3, #0
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d005      	beq.n	8009368 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x94>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 800935c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800935e:	4894      	ldr	r0, [pc, #592]	@ (80095b0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2dc>)
 8009360:	f001 fba2 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8009364:	2301      	movs	r3, #1
 8009366:	e11e      	b.n	80095a6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d2>
      }
      const auto* opcode = opcodes->Get(index);
 8009368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800936a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800936c:	f7fe f852 	bl	8007414 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm>
 8009370:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_,
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685c      	ldr	r4, [r3, #4]
                                    &(graph_.GetAllocations()[subgraph_idx]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3370      	adds	r3, #112	@ 0x70
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fe6e 	bl	800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 8009380:	4602      	mov	r2, r0
 8009382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009384:	00db      	lsls	r3, r3, #3
 8009386:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800938c:	212c      	movs	r1, #44	@ 0x2c
 800938e:	fb01 f303 	mul.w	r3, r1, r3
 8009392:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_,
 8009394:	3328      	adds	r3, #40	@ 0x28
 8009396:	461a      	mov	r2, r3
 8009398:	4621      	mov	r1, r4
 800939a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800939c:	f001 fba4 	bl	800aae8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                                          .registration));
      if (status != kTfLiteOk) {
 80093a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00e      	beq.n	80093cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf8>
        MicroPrintf("Failed to get registration from op code %s\n ",
 80093ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093b0:	f7fa fbd6 	bl	8003b60 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 80093b4:	4603      	mov	r3, r0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff fda4 	bl	8008f04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80093bc:	4603      	mov	r3, r0
 80093be:	4619      	mov	r1, r3
 80093c0:	487c      	ldr	r0, [pc, #496]	@ (80095b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e0>)
 80093c2:	f001 fb71 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 80093c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80093ca:	e0ec      	b.n	80095a6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d2>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3370      	adds	r3, #112	@ 0x70
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff fe43 	bl	800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 80093d6:	4602      	mov	r2, r0
 80093d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093e2:	212c      	movs	r1, #44	@ 0x2c
 80093e4:	fb01 f303 	mul.w	r3, r1, r3
 80093e8:	4413      	add	r3, r2
                                     .registration;
 80093ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ec:	627b      	str	r3, [r7, #36]	@ 0x24
      if (registration == nullptr) {
 80093ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x12c>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 80093f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093f6:	4870      	ldr	r0, [pc, #448]	@ (80095b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>)
 80093f8:	f001 fb56 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e0d2      	b.n	80095a6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d2>
      }
      BuiltinOperator op_type =
 8009400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	623b      	str	r3, [r7, #32]
          static_cast<BuiltinOperator>(registration->builtin_code);

      const char* custom_data = nullptr;
 8009406:	2300      	movs	r3, #0
 8009408:	64fb      	str	r3, [r7, #76]	@ 0x4c
      size_t custom_data_size = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	64bb      	str	r3, [r7, #72]	@ 0x48
      unsigned char* builtin_data = nullptr;
 800940e:	2300      	movs	r3, #0
 8009410:	60bb      	str	r3, [r7, #8]

      if (op_type == BuiltinOperator_CUSTOM) {
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	2b20      	cmp	r3, #32
 8009416:	d11b      	bne.n	8009450 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x17c>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 8009418:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800941a:	f7ff fd97 	bl	8008f4c <_ZNK6tflite8Operator14custom_optionsEv>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	bf14      	ite	ne
 8009424:	2301      	movne	r3, #1
 8009426:	2300      	moveq	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d04b      	beq.n	80094c6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f2>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 800942e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009430:	f7ff fd8c 	bl	8008f4c <_ZNK6tflite8Operator14custom_optionsEv>
 8009434:	4603      	mov	r3, r0
 8009436:	4618      	mov	r0, r3
 8009438:	f7fb f87e 	bl	8004538 <_ZNK11flatbuffers6VectorIhmE4dataEv>
 800943c:	64f8      	str	r0, [r7, #76]	@ 0x4c
          custom_data_size = op->custom_options()->size();
 800943e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009440:	f7ff fd84 	bl	8008f4c <_ZNK6tflite8Operator14custom_optionsEv>
 8009444:	4603      	mov	r3, r0
 8009446:	4618      	mov	r0, r3
 8009448:	f7fa ff89 	bl	800435e <_ZNK11flatbuffers6VectorIhmE4sizeEv>
 800944c:	64b8      	str	r0, [r7, #72]	@ 0x48
 800944e:	e03a      	b.n	80094c6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f2>
        }
      } else {
        if (op->custom_options() != nullptr) {
 8009450:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009452:	f7ff fd7b 	bl	8008f4c <_ZNK6tflite8Operator14custom_optionsEv>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	bf14      	ite	ne
 800945c:	2301      	movne	r3, #1
 800945e:	2300      	moveq	r3, #0
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1a6>
          MicroPrintf(
 8009466:	6a38      	ldr	r0, [r7, #32]
 8009468:	f7ff fd4c 	bl	8008f04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800946c:	4603      	mov	r3, r0
 800946e:	4619      	mov	r1, r3
 8009470:	4852      	ldr	r0, [pc, #328]	@ (80095bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e8>)
 8009472:	f001 fb19 	bl	800aaa8 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 8009476:	2301      	movs	r3, #1
 8009478:	e095      	b.n	80095a6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d2>
        }

        TfLiteBridgeBuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3308      	adds	r3, #8
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6a39      	ldr	r1, [r7, #32]
 800948a:	4610      	mov	r0, r2
 800948c:	4798      	blx	r3
 800948e:	61f8      	str	r0, [r7, #28]
        if (parser == nullptr) {
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d109      	bne.n	80094aa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d6>
          MicroPrintf("Did not find a parser for %s",
 8009496:	6a38      	ldr	r0, [r7, #32]
 8009498:	f7ff fd34 	bl	8008f04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800949c:	4603      	mov	r3, r0
 800949e:	4619      	mov	r1, r3
 80094a0:	4847      	ldr	r0, [pc, #284]	@ (80095c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ec>)
 80094a2:	f001 fb01 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e07d      	b.n	80095a6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d2>
        }
        TF_LITE_ENSURE_STATUS(CallBuiltinParseFunction(
 80094aa:	f107 0308 	add.w	r3, r7, #8
 80094ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80094b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80094b2:	69f8      	ldr	r0, [r7, #28]
 80094b4:	f004 fa72 	bl	800d99c <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>
 80094b8:	4603      	mov	r3, r0
 80094ba:	76fb      	strb	r3, [r7, #27]
 80094bc:	7efb      	ldrb	r3, [r7, #27]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f2>
 80094c2:	7efb      	ldrb	r3, [r7, #27]
 80094c4:	e06f      	b.n	80095a6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d2>
            parser, op, builtin_data_allocator, (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array =
          FlatBufferVectorToTfLiteTypeArray(op->inputs());
 80094c6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80094c8:	f7fd f8ed 	bl	80066a6 <_ZNK6tflite8Operator6inputsEv>
 80094cc:	4603      	mov	r3, r0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fc fe54 	bl	800617c <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 80094d4:	6178      	str	r0, [r7, #20]
      TfLiteIntArray* outputs_array =
          FlatBufferVectorToTfLiteTypeArray(op->outputs());
 80094d6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80094d8:	f7fd f8f3 	bl	80066c2 <_ZNK6tflite8Operator7outputsEv>
 80094dc:	4603      	mov	r3, r0
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fc fe4c 	bl	800617c <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 80094e4:	6138      	str	r0, [r7, #16]

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	3370      	adds	r3, #112	@ 0x70
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff fdb6 	bl	800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 80094f0:	4602      	mov	r2, r0
 80094f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094f4:	00db      	lsls	r3, r3, #3
 80094f6:	4413      	add	r3, r2
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094fc:	212c      	movs	r1, #44	@ 0x2c
 80094fe:	fb01 f303 	mul.w	r3, r1, r3
 8009502:	4413      	add	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
      *node = {};
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4618      	mov	r0, r3
 800950a:	2328      	movs	r3, #40	@ 0x28
 800950c:	461a      	mov	r2, r3
 800950e:	2100      	movs	r1, #0
 8009510:	f005 fc0a 	bl	800ed28 <memset>
      node->inputs = inputs_array;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800952a:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 800952c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	61da      	str	r2, [r3, #28]

      if (op->intermediates() && (op->intermediates()->size() > 0)) {
 8009532:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009534:	f7fd f8d3 	bl	80066de <_ZNK6tflite8Operator13intermediatesEv>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00b      	beq.n	8009556 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x282>
 800953e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009540:	f7fd f8cd 	bl	80066de <_ZNK6tflite8Operator13intermediatesEv>
 8009544:	4603      	mov	r3, r0
 8009546:	4618      	mov	r0, r3
 8009548:	f7fa ff5c 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x282>
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x284>
 8009556:	2300      	movs	r3, #0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d009      	beq.n	8009570 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x29c>
        node->intermediates =
            FlatBufferVectorToTfLiteTypeArray(op->intermediates());
 800955c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800955e:	f7fd f8be 	bl	80066de <_ZNK6tflite8Operator13intermediatesEv>
 8009562:	4603      	mov	r3, r0
 8009564:	4618      	mov	r0, r3
 8009566:	f7fc fe09 	bl	800617c <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 800956a:	4602      	mov	r2, r0
        node->intermediates =
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < operators_size; ++i) {
 8009570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009572:	3301      	adds	r3, #1
 8009574:	653b      	str	r3, [r7, #80]	@ 0x50
 8009576:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957a:	429a      	cmp	r2, r3
 800957c:	f4ff aed5 	bcc.w	800932a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x56>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8009580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009582:	3301      	adds	r3, #1
 8009584:	657b      	str	r3, [r7, #84]	@ 0x54
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3370      	adds	r3, #112	@ 0x70
 800958a:	4618      	mov	r0, r3
 800958c:	f001 f873 	bl	800a676 <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv>
 8009590:	4602      	mov	r2, r0
 8009592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009594:	4293      	cmp	r3, r2
 8009596:	bfb4      	ite	lt
 8009598:	2301      	movlt	r3, #1
 800959a:	2300      	movge	r3, #0
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f47f ae9f 	bne.w	80092e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe>
      }
    }
  }
  return kTfLiteOk;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	375c      	adds	r7, #92	@ 0x5c
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd90      	pop	{r4, r7, pc}
 80095ae:	bf00      	nop
 80095b0:	08013884 	.word	0x08013884
 80095b4:	080138b0 	.word	0x080138b0
 80095b8:	080138e0 	.word	0x080138e0
 80095bc:	08013904 	.word	0x08013904
 80095c0:	0801394c 	.word	0x0801394c

080095c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 80095c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c8:	b08a      	sub	sp, #40	@ 0x28
 80095ca:	af02      	add	r7, sp, #8
 80095cc:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f7fe fd1d 	bl	8008018 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 80095de:	6178      	str	r0, [r7, #20]

  if (allocations == nullptr) {
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d108      	bne.n	80095f8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34>
    MicroPrintf("Failed starting model allocation.\n");
 80095e6:	48aa      	ldr	r0, [pc, #680]	@ (8009890 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 80095e8:	f001 fa5e 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    initialization_status_ = kTfLiteError;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    return kTfLiteError;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e145      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  }

  graph_.SetSubgraphAllocations(allocations);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3370      	adds	r3, #112	@ 0x70
 80095fc:	6979      	ldr	r1, [r7, #20]
 80095fe:	4618      	mov	r0, r3
 8009600:	f001 f84b 	bl	800a69a <_ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7ff fe65 	bl	80092d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 800960a:	4603      	mov	r3, r0
 800960c:	74fb      	strb	r3, [r7, #19]
 800960e:	7cfb      	ldrb	r3, [r7, #19]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x54>
 8009614:	7cfb      	ldrb	r3, [r7, #19]
 8009616:	e135      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>

  micro_context_.SetInterpreterState(
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	33a4      	adds	r3, #164	@ 0xa4
 800961c:	2100      	movs	r1, #0
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fb74 	bl	8009d0c <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kInit);
  TF_LITE_ENSURE_STATUS(graph_.InitSubgraphs());
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3370      	adds	r3, #112	@ 0x70
 8009628:	4618      	mov	r0, r3
 800962a:	f000 fcdf 	bl	8009fec <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv>
 800962e:	4603      	mov	r3, r0
 8009630:	74bb      	strb	r3, [r7, #18]
 8009632:	7cbb      	ldrb	r3, [r7, #18]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x78>
 8009638:	7cbb      	ldrb	r3, [r7, #18]
 800963a:	e123      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>

  micro_context_.SetInterpreterState(
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	33a4      	adds	r3, #164	@ 0xa4
 8009640:	2101      	movs	r1, #1
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fb62 	bl	8009d0c <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kPrepare);

  TF_LITE_ENSURE_STATUS(graph_.PrepareSubgraphs());
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3370      	adds	r3, #112	@ 0x70
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fd49 	bl	800a0e4 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv>
 8009652:	4603      	mov	r3, r0
 8009654:	747b      	strb	r3, [r7, #17]
 8009656:	7c7b      	ldrb	r3, [r7, #17]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9c>
 800965c:	7c7b      	ldrb	r3, [r7, #17]
 800965e:	e111      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>

  micro_context_.SetInterpreterState(
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	33a4      	adds	r3, #164	@ 0xa4
 8009664:	2102      	movs	r1, #2
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fb50 	bl	8009d0c <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kMemoryPlanning);

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681d      	ldr	r5, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3370      	adds	r3, #112	@ 0x70
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff fcef 	bl	800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800967e:	4602      	mov	r2, r0
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3398      	adds	r3, #152	@ 0x98
 8009684:	4629      	mov	r1, r5
 8009686:	4620      	mov	r0, r4
 8009688:	f7fe fd46 	bl	8008118 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 800968c:	4603      	mov	r3, r0
 800968e:	743b      	strb	r3, [r7, #16]
 8009690:	7c3b      	ldrb	r3, [r7, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd6>
 8009696:	7c3b      	ldrb	r3, [r7, #16]
 8009698:	e0f4      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
                                   model_, graph_.GetAllocations(),
                                   &scratch_buffer_handles_));

  micro_context_.SetScratchBufferHandles(scratch_buffer_handles_);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f103 02a4 	add.w	r2, r3, #164	@ 0xa4
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f000 faf2 	bl	8009c92 <_ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	331c      	adds	r3, #28
 80096ba:	681c      	ldr	r4, [r3, #0]
          sizeof(TfLiteTensor*) * inputs_size()));
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff fcd9 	bl	8009074 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 80096c2:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4619      	mov	r1, r3
 80096c8:	4628      	mov	r0, r5
 80096ca:	47a0      	blx	r4
 80096cc:	4602      	mov	r2, r0
  input_tensors_ =
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  if (input_tensors_ == nullptr) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x130>
    MicroPrintf(
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff fcc8 	bl	8009074 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 80096e4:	4603      	mov	r3, r0
    MicroPrintf(
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4619      	mov	r1, r3
 80096ea:	486a      	ldr	r0, [pc, #424]	@ (8009894 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 80096ec:	f001 f9dc 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e0c7      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 80096f4:	2300      	movs	r3, #0
 80096f6:	61fb      	str	r3, [r7, #28]
 80096f8:	e038      	b.n	800976c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681d      	ldr	r5, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3370      	adds	r3, #112	@ 0x70
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff fca3 	bl	800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 8009716:	4680      	mov	r8, r0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fcc6 	bl	80090aa <_ZNK6tflite16MicroInterpreter6inputsEv>
 800971e:	4603      	mov	r3, r0
 8009720:	69f9      	ldr	r1, [r7, #28]
 8009722:	4618      	mov	r0, r3
 8009724:	f7fa fe7c 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8009728:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	18d4      	adds	r4, r2, r3
 8009736:	2300      	movs	r3, #0
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	460b      	mov	r3, r1
 800973c:	4642      	mov	r2, r8
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	4630      	mov	r0, r6
 8009742:	47a8      	blx	r5
 8009744:	4603      	mov	r3, r0
 8009746:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d105      	bne.n	8009766 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a2>
      MicroPrintf("Failed to initialize input tensor %d", i);
 800975a:	69f9      	ldr	r1, [r7, #28]
 800975c:	484e      	ldr	r0, [pc, #312]	@ (8009898 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 800975e:	f001 f9a3 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8009762:	2301      	movs	r3, #1
 8009764:	e08e      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  for (size_t i = 0; i < inputs_size(); ++i) {
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	3301      	adds	r3, #1
 800976a:	61fb      	str	r3, [r7, #28]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff fc81 	bl	8009074 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009772:	4602      	mov	r2, r0
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	4293      	cmp	r3, r2
 8009778:	bf34      	ite	cc
 800977a:	2301      	movcc	r3, #1
 800977c:	2300      	movcs	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1ba      	bne.n	80096fa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x136>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	331c      	adds	r3, #28
 8009790:	681c      	ldr	r4, [r3, #0]
          sizeof(TfLiteTensor*) * outputs_size()));
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff fca0 	bl	80090d8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009798:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4619      	mov	r1, r3
 800979e:	4628      	mov	r0, r5
 80097a0:	47a0      	blx	r4
 80097a2:	4602      	mov	r2, r0
  output_tensors_ =
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  if (output_tensors_ == nullptr) {
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x206>
    MicroPrintf(
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fc8f 	bl	80090d8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 80097ba:	4603      	mov	r3, r0
    MicroPrintf(
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4619      	mov	r1, r3
 80097c0:	4836      	ldr	r0, [pc, #216]	@ (800989c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 80097c2:	f001 f971 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e05c      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 80097ca:	2300      	movs	r3, #0
 80097cc:	61bb      	str	r3, [r7, #24]
 80097ce:	e038      	b.n	8009842 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27e>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681d      	ldr	r5, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3370      	adds	r3, #112	@ 0x70
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7ff fc38 	bl	800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 80097ec:	4680      	mov	r8, r0
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fc8d 	bl	800910e <_ZNK6tflite16MicroInterpreter7outputsEv>
 80097f4:	4603      	mov	r3, r0
 80097f6:	69b9      	ldr	r1, [r7, #24]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fa fe11 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 80097fe:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	18d4      	adds	r4, r2, r3
 800980c:	2300      	movs	r3, #0
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	460b      	mov	r3, r1
 8009812:	4642      	mov	r2, r8
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	4630      	mov	r0, r6
 8009818:	47a8      	blx	r5
 800981a:	4603      	mov	r3, r0
 800981c:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d105      	bne.n	800983c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x278>
      MicroPrintf("Failed to initialize output tensor %d", i);
 8009830:	69b9      	ldr	r1, [r7, #24]
 8009832:	481b      	ldr	r0, [pc, #108]	@ (80098a0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2dc>)
 8009834:	f001 f938 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8009838:	2301      	movs	r3, #1
 800983a:	e023      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	3301      	adds	r3, #1
 8009840:	61bb      	str	r3, [r7, #24]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fc48 	bl	80090d8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009848:	4602      	mov	r2, r0
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	4293      	cmp	r3, r2
 800984e:	bf34      	ite	cc
 8009850:	2301      	movcc	r3, #1
 8009852:	2300      	movcs	r3, #0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1ba      	bne.n	80097d0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20c>
    }
  }

  TF_LITE_ENSURE_STATUS(Reset());
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f894 	bl	8009988 <_ZN6tflite16MicroInterpreter5ResetEv>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2aa>
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	e00a      	b.n	8009884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>

  tensors_allocated_ = true;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
  micro_context_.SetInterpreterState(
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	33a4      	adds	r3, #164	@ 0xa4
 800987a:	2103      	movs	r1, #3
 800987c:	4618      	mov	r0, r3
 800987e:	f000 fa45 	bl	8009d0c <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kInvoke);
  return kTfLiteOk;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3720      	adds	r7, #32
 8009888:	46bd      	mov	sp, r7
 800988a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800988e:	bf00      	nop
 8009890:	0801396c 	.word	0x0801396c
 8009894:	08013990 	.word	0x08013990
 8009898:	080139dc 	.word	0x080139dc
 800989c:	08013a04 	.word	0x08013a04
 80098a0:	08013a50 	.word	0x08013a50

080098a4 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d004      	beq.n	80098c0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1c>
    MicroPrintf("Invoke() called after initialization failed\n");
 80098b6:	4811      	ldr	r0, [pc, #68]	@ (80098fc <_ZN6tflite16MicroInterpreter6InvokeEv+0x58>)
 80098b8:	f001 f8f6 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 80098bc:	2301      	movs	r3, #1
 80098be:	e019      	b.n	80098f4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x50>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80098c6:	f083 0301 	eor.w	r3, r3, #1
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d009      	beq.n	80098e4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x40>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff fe77 	bl	80095c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x40>
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	e007      	b.n	80098f4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x50>
  }
  return graph_.InvokeSubgraph(0);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3370      	adds	r3, #112	@ 0x70
 80098e8:	2100      	movs	r1, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fd7a 	bl	800a3e4 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi>
 80098f0:	4603      	mov	r3, r0
 80098f2:	bf00      	nop
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	08013a78 	.word	0x08013a78

08009900 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff fbb2 	bl	8009074 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009910:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	429a      	cmp	r2, r3
 8009918:	d306      	bcc.n	8009928 <_ZN6tflite16MicroInterpreter5inputEj+0x28>
    MicroPrintf("Input index %d out of range (length is %d)", index, length);
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	4808      	ldr	r0, [pc, #32]	@ (8009940 <_ZN6tflite16MicroInterpreter5inputEj+0x40>)
 8009920:	f001 f8c2 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return nullptr;
 8009924:	2300      	movs	r3, #0
 8009926:	e006      	b.n	8009936 <_ZN6tflite16MicroInterpreter5inputEj+0x36>
  }
  return input_tensors_[index];
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	681b      	ldr	r3, [r3, #0]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	08013aa8 	.word	0x08013aa8

08009944 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff fbc2 	bl	80090d8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009954:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	429a      	cmp	r2, r3
 800995c:	d306      	bcc.n	800996c <_ZN6tflite16MicroInterpreter6outputEj+0x28>
    MicroPrintf("Output index %d out of range (length is %d)", index, length);
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	4808      	ldr	r0, [pc, #32]	@ (8009984 <_ZN6tflite16MicroInterpreter6outputEj+0x40>)
 8009964:	f001 f8a0 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return nullptr;
 8009968:	2300      	movs	r3, #0
 800996a:	e006      	b.n	800997a <_ZN6tflite16MicroInterpreter6outputEj+0x36>
  }
  return output_tensors_[index];
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	681b      	ldr	r3, [r3, #0]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	08013ad4 	.word	0x08013ad4

08009988 <_ZN6tflite16MicroInterpreter5ResetEv>:

TfLiteStatus MicroInterpreter::Reset() {
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  TfLiteStatus status = graph_.ResetSubgraphs();
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3370      	adds	r3, #112	@ 0x70
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fc4d 	bl	800a234 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv>
 800999a:	4603      	mov	r3, r0
 800999c:	73fb      	strb	r3, [r7, #15]
  if (status != kTfLiteOk) {
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <_ZN6tflite16MicroInterpreter5ResetEv+0x20>
    return status;
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	e006      	b.n	80099b6 <_ZN6tflite16MicroInterpreter5ResetEv+0x2e>
  }
  return graph_.ResetVariableTensors();
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3370      	adds	r3, #112	@ 0x70
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 fdc7 	bl	800a540 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv>
 80099b2:	4603      	mov	r3, r0
 80099b4:	bf00      	nop
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:

// Check 'v' is out of closed range [low; high].
// Workaround for GCC warning [-Werror=type-limits]:
// comparison is always true due to limited range of data type.
template<typename T>
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 80099be:	b480      	push	{r7}
 80099c0:	b085      	sub	sp, #20
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	60f8      	str	r0, [r7, #12]
 80099c6:	60b9      	str	r1, [r7, #8]
 80099c8:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	db05      	blt.n	80099e2 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	da01      	bge.n	80099e6 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e000      	b.n	80099e8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <_ZN6tflite21MicroInterpreterGraph23GetCurrentSubgraphIndexEv>:
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	4618      	mov	r0, r3
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <_ZN6tflite23MicroInterpreterContext16external_contextEv>:
  // Does not take ownership of the pointer and the pointer must refer to valid
  // an object that outlive this class instance.
  // This can only be called once to set one external context.
  TfLiteStatus set_external_context(void* external_context_payload) override;

  void* external_context() override { return external_context_payload_; }
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <_ZN6tflite23MicroInterpreterContext5graphEv>:

  MicroGraph& graph() override { return graph_; }
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE>:

#endif  // USE_TFLM_COMPRESSION

}  // namespace

MicroInterpreterContext::MicroInterpreterContext(MicroAllocator* allocator,
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
                                                 const Model* model,
                                                 MicroInterpreterGraph* graph)
    : allocator_(*allocator),
      graph_(*graph),
      model_(model),
      state_(InterpreterState::kInit) {}
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fc fb15 	bl	800607c <_ZN6tflite12MicroContextC1Ev>
 8009a52:	4a0e      	ldr	r2, [pc, #56]	@ (8009a8c <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE+0x50>)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	601a      	str	r2, [r3, #0]
    : allocator_(*allocator),
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	605a      	str	r2, [r3, #4]
      graph_(*graph),
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	609a      	str	r2, [r3, #8]
      model_(model),
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	60da      	str	r2, [r3, #12]
      state_(InterpreterState::kInit) {}
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	611a      	str	r2, [r3, #16]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	615a      	str	r2, [r3, #20]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	619a      	str	r2, [r3, #24]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	61da      	str	r2, [r3, #28]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	080164c4 	.word	0x080164c4

08009a90 <_ZN6tflite23MicroInterpreterContextD1Ev>:

MicroInterpreterContext::~MicroInterpreterContext() {}
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	4a05      	ldr	r2, [pc, #20]	@ (8009ab0 <_ZN6tflite23MicroInterpreterContextD1Ev+0x20>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fc fafb 	bl	800609c <_ZN6tflite12MicroContextD1Ev>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	080164c4 	.word	0x080164c4

08009ab4 <_ZN6tflite23MicroInterpreterContextD0Ev>:
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff ffe7 	bl	8009a90 <_ZN6tflite23MicroInterpreterContextD1Ev>
 8009ac2:	2120      	movs	r1, #32
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f003 ffc8 	bl	800da5a <_ZdlPvj>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj>:

void* MicroInterpreterContext::AllocatePersistentBuffer(size_t bytes) {
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare ||
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d005      	beq.n	8009af2 <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj+0x1e>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj+0x1e>
 8009aee:	f004 f865 	bl	800dbbc <abort>
                state_ == InterpreterState::kInit);
  return allocator_.AllocatePersistentBuffer(bytes);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	331c      	adds	r3, #28
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	4610      	mov	r0, r2
 8009b04:	4798      	blx	r3
 8009b06:	4603      	mov	r3, r0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <_ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroInterpreterContext::RequestScratchBufferInArena(
    size_t bytes, int* buffer_idx) {
 8009b10:	b590      	push	{r4, r7, lr}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d001      	beq.n	8009b28 <_ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi+0x18>
 8009b24:	f004 f84a 	bl	800dbbc <abort>
  return allocator_.RequestScratchBufferInArena(
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff ff5f 	bl	80099f4 <_ZN6tflite21MicroInterpreterGraph23GetCurrentSubgraphIndexEv>
 8009b36:	4602      	mov	r2, r0
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f7fe fb41 	bl	80081c4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 8009b42:	4603      	mov	r3, r0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd90      	pop	{r4, r7, pc}

08009b4c <_ZN6tflite23MicroInterpreterContext16GetScratchBufferEi>:

void* MicroInterpreterContext::GetScratchBuffer(int buffer_idx) {
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(state_ == InterpreterState::kInvoke);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d001      	beq.n	8009b62 <_ZN6tflite23MicroInterpreterContext16GetScratchBufferEi+0x16>
 8009b5e:	f004 f82d 	bl	800dbbc <abort>
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	695a      	ldr	r2, [r3, #20]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]
  return handle->data;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <_ZN6tflite23MicroInterpreterContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroInterpreterContext::AllocateTempTfLiteTensor(
    int tensor_idx) {
 8009b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685d      	ldr	r5, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3304      	adds	r3, #4
 8009b92:	681c      	ldr	r4, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68de      	ldr	r6, [r3, #12]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff fa5d 	bl	800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 8009ba2:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff ff23 	bl	80099f4 <_ZN6tflite21MicroInterpreterGraph23GetCurrentSubgraphIndexEv>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	4642      	mov	r2, r8
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47a0      	blx	r4
 8009bbc:	4603      	mov	r3, r0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bc8 <_ZN6tflite23MicroInterpreterContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroInterpreterContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3308      	adds	r3, #8
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	4610      	mov	r0, r2
 8009be4:	4798      	blx	r3
 8009be6:	bf00      	nop
}
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <_ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj>:

uint8_t* MicroInterpreterContext::AllocateTempBuffer(size_t size,
                                                     size_t alignment) {
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d001      	beq.n	8009c06 <_ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj+0x18>
 8009c02:	f003 ffdb 	bl	800dbbc <abort>
  return allocator_.AllocateTempBuffer(size, alignment);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6858      	ldr	r0, [r3, #4]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	330c      	adds	r3, #12
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	4798      	blx	r3
 8009c1a:	4603      	mov	r3, r0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <_ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh>:

void MicroInterpreterContext::DeallocateTempBuffer(uint8_t* buffer) {
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d001      	beq.n	8009c3a <_ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh+0x16>
 8009c36:	f003 ffc1 	bl	800dbbc <abort>
  allocator_.DeallocateTempBuffer(buffer);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3310      	adds	r3, #16
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	4798      	blx	r3
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <_ZN6tflite23MicroInterpreterContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroInterpreterContext::GetEvalTensor(int tensor_idx) {
 8009c56:	b590      	push	{r4, r7, lr}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff f9f9 	bl	800905c <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff febf 	bl	80099f4 <_ZN6tflite21MicroInterpreterGraph23GetCurrentSubgraphIndexEv>
 8009c76:	4603      	mov	r3, r0
 8009c78:	00db      	lsls	r3, r3, #3
 8009c7a:	4423      	add	r3, r4
              .tensors[tensor_idx];
 8009c7c:	6859      	ldr	r1, [r3, #4]
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	4613      	mov	r3, r2
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	4413      	add	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	440b      	add	r3, r1
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd90      	pop	{r4, r7, pc}

08009c92 <_ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:

void MicroInterpreterContext::SetScratchBufferHandles(
    ScratchBufferHandle* scratch_buffer_handles) {
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  scratch_buffer_handles_ = scratch_buffer_handles;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	615a      	str	r2, [r3, #20]
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
	...

08009cb0 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv>:

TfLiteStatus MicroInterpreterContext::set_external_context(
    void* external_context_payload) {
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(state_ == InterpreterState::kInit ||
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x26>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d005      	beq.n	8009cd6 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x26>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d001      	beq.n	8009cd6 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x26>
 8009cd2:	f003 ff73 	bl	800dbbc <abort>
                state_ == InterpreterState::kPrepare ||
                state_ == InterpreterState::kInvoke);
  if (external_context_payload == nullptr ||
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x34>
      external_context_payload_ != nullptr) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	699b      	ldr	r3, [r3, #24]
  if (external_context_payload == nullptr ||
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d008      	beq.n	8009cf6 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x46>
    MicroPrintf(
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	4806      	ldr	r0, [pc, #24]	@ (8009d08 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x58>)
 8009cee:	f000 fedb 	bl	800aaa8 <_Z11MicroPrintfPKcz>
        "Attempting to set external context to %x but it was %x already",
        external_context_payload, external_context_payload_);
    return kTfLiteError;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e003      	b.n	8009cfe <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x4e>
  }

  external_context_payload_ = external_context_payload;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	08013f10 	.word	0x08013f10

08009d0c <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>:

void MicroInterpreterContext::SetInterpreterState(InterpreterState state) {
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  state_ = state;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	611a      	str	r2, [r3, #16]
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <_ZN6tflite23MicroInterpreterContext20SetAlternateProfilerEPNS_22MicroProfilerInterfaceE>:
}

#endif  // USE_TFLM_COMPRESSION

TfLiteStatus MicroInterpreterContext::SetAlternateProfiler(
    tflite::MicroProfilerInterface* alt_profiler) {
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  alt_profiler_ = alt_profiler;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	61da      	str	r2, [r3, #28]
  return kTfLiteOk;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <_ZNK6tflite23MicroInterpreterContext20GetAlternateProfilerEv>:

MicroProfilerInterface* MicroInterpreterContext::GetAlternateProfiler() const {
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  return alt_profiler_;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	69db      	ldr	r3, [r3, #28]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <_ZN6tflite21MicroInterpreterGraph20GetResourceVariablesEv>:

  // Get the resource variables for this TFLM graph.
  MicroResourceVariables* GetResourceVariables() { return resource_variables_; }
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_22MicroProfilerInterfaceE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag,
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	607a      	str	r2, [r7, #4]
                               MicroProfilerInterface* profiler)
      : profiler_(profiler) {
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00c      	beq.n	8009db0 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_22MicroProfilerInterfaceE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3308      	adds	r3, #8
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	4610      	mov	r0, r2
 8009da8:	4798      	blx	r3
 8009daa:	4602      	mov	r2, r0
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	601a      	str	r2, [r3, #0]
    }
  }
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6858      	ldr	r0, [r3, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	330c      	adds	r3, #12
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6812      	ldr	r2, [r2, #0]
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4798      	blx	r3
    }
  }
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4618      	mov	r0, r3
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>:
#endif  // USE_TFLM_COMPRESSION

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TFLMRegistration* registration) {
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b082      	sub	sp, #8
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	2b20      	cmp	r3, #32
 8009df8:	d102      	bne.n	8009e00 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration+0x16>
    return registration->custom_name;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	e006      	b.n	8009e0e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration+0x24>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7ff f87d 	bl	8008f04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	bf00      	nop
  }
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <_ZZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorENKUliE_clEi>:
      // Legacy scalar shapes (dims->size == 1 && dims->data[0] == 0)
      continue;
    }
    // This code can handle scalar tensors (dims->size == 0)
    if (!std::all_of(tp->dims->data, tp->dims->data + tp->dims->size,
                     [](int dim) { return dim > 0; })) {
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bfcc      	ite	gt
 8009e26:	2301      	movgt	r3, #1
 8009e28:	2300      	movle	r3, #0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor>:
                        const TfLiteEvalTensor* const eval_tensors) {
 8009e38:	b590      	push	{r4, r7, lr}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  if (tensor_indices == nullptr) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x16>
    return -1;
 8009e48:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4c:	e042      	b.n	8009ed4 <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x9c>
  for (int i = 0; i < tensor_indices->size; i++) {
 8009e4e:	2300      	movs	r3, #0
 8009e50:	617b      	str	r3, [r7, #20]
 8009e52:	e038      	b.n	8009ec6 <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x8e>
    const int tensor_index = tensor_indices->data[i];
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	613b      	str	r3, [r7, #16]
    if (tensor_index < 0) {
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	db29      	blt.n	8009eba <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x82>
    const TfLiteEvalTensor* const tp = eval_tensors + tensor_index;
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	461a      	mov	r2, r3
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	4413      	add	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]
    if (tp->dims->size == 1 && tp->dims->data[0] == 0) {
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d104      	bne.n	8009e8c <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x54>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d018      	beq.n	8009ebe <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x86>
    if (!std::all_of(tp->dims->data, tp->dims->data + tp->dims->size,
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	1d18      	adds	r0, r3, #4
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	1d1a      	adds	r2, r3, #4
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f000 fcac 	bl	800a802 <_ZSt6all_ofIPiZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EbT_SA_T0_>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f083 0301 	eor.w	r3, r3, #1
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d004      	beq.n	8009ec0 <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x88>
      return tensor_index;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	e00c      	b.n	8009ed4 <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x9c>
      continue;
 8009eba:	bf00      	nop
 8009ebc:	e000      	b.n	8009ec0 <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x88>
      continue;
 8009ebe:	bf00      	nop
  for (int i = 0; i < tensor_indices->size; i++) {
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	dbc1      	blt.n	8009e54 <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor+0x1c>
    }
  }

  return -1;
 8009ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	371c      	adds	r7, #28
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd90      	pop	{r4, r7, pc}

08009edc <_ZN6tflite10MicroGraphC1Ev>:
namespace tflite {

// Abstracts the details of interacting with the graph from the kernels
//
// Provides methods to invoke any subgraph in the tflite::Graph.
class MicroGraph {
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	4a04      	ldr	r2, [pc, #16]	@ (8009ef8 <_ZN6tflite10MicroGraphC1Ev+0x1c>)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4618      	mov	r0, r3
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	08016548 	.word	0x08016548

08009efc <_ZN6tflite10MicroGraphD1Ev>:
 public:
  virtual ~MicroGraph() = default;
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	4a04      	ldr	r2, [pc, #16]	@ (8009f18 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	08016548 	.word	0x08016548

08009f1c <_ZN6tflite10MicroGraphD0Ev>:
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff ffe9 	bl	8009efc <_ZN6tflite10MicroGraphD1Ev>
 8009f2a:	2104      	movs	r1, #4
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f003 fd94 	bl	800da5a <_ZdlPvj>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>:

}  // namespace

MicroInterpreterGraph::MicroInterpreterGraph(
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0),
      current_operator_index_(0),
      resource_variables_(resource_variables) {
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff ffc5 	bl	8009edc <_ZN6tflite10MicroGraphC1Ev>
 8009f52:	4a14      	ldr	r2, [pc, #80]	@ (8009fa4 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x68>)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	601a      	str	r2, [r3, #0]
    : context_(context),
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	605a      	str	r2, [r3, #4]
      model_(model),
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	609a      	str	r2, [r3, #8]
      allocator_(allocator),
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	60da      	str	r2, [r3, #12]
      resource_variables_(resource_variables) {
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	611a      	str	r2, [r3, #16]
      current_subgraph_index_(0),
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	615a      	str	r2, [r3, #20]
      current_operator_index_(0),
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	619a      	str	r2, [r3, #24]
      resource_variables_(resource_variables) {
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	61da      	str	r2, [r3, #28]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	621a      	str	r2, [r3, #32]
  if (model != nullptr) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x5e>
    subgraphs_ = model->subgraphs();
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7fc f8b2 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 8009f94:	4602      	mov	r2, r0
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	621a      	str	r2, [r3, #32]
  }
}
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	08016508 	.word	0x08016508

08009fa8 <_ZN6tflite21MicroInterpreterGraphD1Ev>:

MicroInterpreterGraph::~MicroInterpreterGraph() {}
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	4a05      	ldr	r2, [pc, #20]	@ (8009fc8 <_ZN6tflite21MicroInterpreterGraphD1Ev+0x20>)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7ff ff9f 	bl	8009efc <_ZN6tflite10MicroGraphD1Ev>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	08016508 	.word	0x08016508

08009fcc <_ZN6tflite21MicroInterpreterGraphD0Ev>:
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff ffe7 	bl	8009fa8 <_ZN6tflite21MicroInterpreterGraphD1Ev>
 8009fda:	2124      	movs	r1, #36	@ 0x24
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f003 fd3c 	bl	800da5a <_ZdlPvj>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::InitSubgraphs() {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08a      	sub	sp, #40	@ 0x28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	61bb      	str	r3, [r7, #24]
  uint32_t previous_operator_idx = current_operator_index_;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a000:	2300      	movs	r3, #0
 800a002:	627b      	str	r3, [r7, #36]	@ 0x24
 800a004:	e054      	b.n	800a0b0 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0xc4>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800a006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f7fc f89a 	bl	800614e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800a01a:	6138      	str	r0, [r7, #16]
    for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	619a      	str	r2, [r3, #24]
 800a022:	e03d      	b.n	800a0a0 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0xb4>
         ++current_operator_index_) {
      TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	691a      	ldr	r2, [r3, #16]
 800a028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	4413      	add	r3, r2
                               .node_and_registrations[current_operator_index_]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	212c      	movs	r1, #44	@ 0x2c
 800a036:	fb01 f303 	mul.w	r3, r1, r3
 800a03a:	4413      	add	r3, r2
      TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a03c:	60fb      	str	r3, [r7, #12]
                               .node);
      const TFLMRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	691a      	ldr	r2, [r3, #16]
 800a042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	4413      	add	r3, r2
              .node_and_registrations[current_operator_index_]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	212c      	movs	r1, #44	@ 0x2c
 800a050:	fb01 f303 	mul.w	r3, r1, r3
 800a054:	4413      	add	r3, r2
      const TFLMRegistration* registration =
 800a056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a058:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	2b20      	cmp	r3, #32
 800a060:	d106      	bne.n	800a070 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x84>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	61fb      	str	r3, [r7, #28]
        init_data_size = node->custom_initial_data_size;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	623b      	str	r3, [r7, #32]
 800a06e:	e004      	b.n	800a07a <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x8e>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	61fb      	str	r3, [r7, #28]
        init_data_size = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	623b      	str	r3, [r7, #32]
      }
      if (registration->init) {
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0xaa>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6850      	ldr	r0, [r2, #4]
 800a08a:	6a3a      	ldr	r2, [r7, #32]
 800a08c:	69f9      	ldr	r1, [r7, #28]
 800a08e:	4798      	blx	r3
 800a090:	4602      	mov	r2, r0
        node->user_data =
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	611a      	str	r2, [r3, #16]
         ++current_operator_index_) {
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	699b      	ldr	r3, [r3, #24]
    for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	619a      	str	r2, [r3, #24]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d8bc      	bhi.n	800a024 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x38>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fc f8a5 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	bf34      	ite	cc
 800a0c2:	2301      	movcc	r3, #1
 800a0c4:	2300      	movcs	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d19c      	bne.n	800a006 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x1a>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	615a      	str	r2, [r3, #20]
  current_operator_index_ = previous_operator_idx;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3728      	adds	r7, #40	@ 0x28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::PrepareSubgraphs() {
 800a0e4:	b590      	push	{r4, r7, lr}
 800a0e6:	b08d      	sub	sp, #52	@ 0x34
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	623b      	str	r3, [r7, #32]
  uint32_t previous_operator_idx = current_operator_index_;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	61fb      	str	r3, [r7, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0fc:	e07c      	b.n	800a1f8 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x114>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800a0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a10a:	4611      	mov	r1, r2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fc f81e 	bl	800614e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800a112:	61b8      	str	r0, [r7, #24]
    for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	619a      	str	r2, [r3, #24]
 800a11a:	e065      	b.n	800a1e8 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x104>
         ++current_operator_index_) {
      TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	691a      	ldr	r2, [r3, #16]
 800a120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	4413      	add	r3, r2
                               .node_and_registrations[current_operator_index_]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	212c      	movs	r1, #44	@ 0x2c
 800a12e:	fb01 f303 	mul.w	r3, r1, r3
 800a132:	4413      	add	r3, r2
      TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a134:	617b      	str	r3, [r7, #20]
                               .node);
      const TFLMRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	691a      	ldr	r2, [r3, #16]
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	4413      	add	r3, r2
              .node_and_registrations[current_operator_index_]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	212c      	movs	r1, #44	@ 0x2c
 800a148:	fb01 f303 	mul.w	r3, r1, r3
 800a14c:	4413      	add	r3, r2
      const TFLMRegistration* registration =
 800a14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a150:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d017      	beq.n	800a18a <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0xa6>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	6852      	ldr	r2, [r2, #4]
 800a162:	6979      	ldr	r1, [r7, #20]
 800a164:	4610      	mov	r0, r2
 800a166:	4798      	blx	r3
 800a168:	4603      	mov	r3, r0
 800a16a:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00b      	beq.n	800a18a <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0xa6>
          MicroPrintf("Node %s (number %u) failed to prepare with status %d",
 800a172:	6938      	ldr	r0, [r7, #16]
 800a174:	f7ff fe39 	bl	8009dea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800a178:	4601      	mov	r1, r0
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	699a      	ldr	r2, [r3, #24]
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	482a      	ldr	r0, [pc, #168]	@ (800a22c <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x148>)
 800a182:	f000 fc91 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration),
                      current_operator_index_, prepare_status);
          return kTfLiteError;
 800a186:	2301      	movs	r3, #1
 800a188:	e04c      	b.n	800a224 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x140>
        GetMicroContext(context_)->ResetDecompressionMemoryAllocations();
#endif  // USE_TFLM_COMPRESSION
      }

      const int dynamic_tensor_index = CheckDynamicTensors(
          node->outputs, subgraph_allocations_[subgraph_idx].tensors);
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	6858      	ldr	r0, [r3, #4]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691a      	ldr	r2, [r3, #16]
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	00db      	lsls	r3, r3, #3
 800a196:	4413      	add	r3, r2
 800a198:	685b      	ldr	r3, [r3, #4]
      const int dynamic_tensor_index = CheckDynamicTensors(
 800a19a:	4619      	mov	r1, r3
 800a19c:	f7ff fe4c 	bl	8009e38 <_ZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensor>
 800a1a0:	60b8      	str	r0, [r7, #8]
      if (dynamic_tensor_index != -1) {
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a8:	d011      	beq.n	800a1ce <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0xea>
        MicroPrintf(
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	699c      	ldr	r4, [r3, #24]
 800a1ae:	6938      	ldr	r0, [r7, #16]
 800a1b0:	f7ff fe1b 	bl	8009dea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800a1b4:	4601      	mov	r1, r0
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	695a      	ldr	r2, [r3, #20]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	460a      	mov	r2, r1
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	481a      	ldr	r0, [pc, #104]	@ (800a230 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x14c>)
 800a1c6:	f000 fc6f 	bl	800aaa8 <_Z11MicroPrintfPKcz>
            "Op#%u (%s) of subgraph %u has dynamic tensor #%d\n"
            "Dynamic tensors are not supported",
            current_operator_index_, OpNameFromRegistration(registration),
            current_subgraph_index_, dynamic_tensor_index);
        return kTfLiteError;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e02a      	b.n	800a224 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x140>
      }

      allocator_->FinishPrepareNodeAllocations(
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68da      	ldr	r2, [r3, #12]
          /*node_id=*/current_operator_index_);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	699b      	ldr	r3, [r3, #24]
      allocator_->FinishPrepareNodeAllocations(
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	4610      	mov	r0, r2
 800a1da:	f7fe f84f 	bl	800827c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
         ++current_operator_index_) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	699b      	ldr	r3, [r3, #24]
    for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	619a      	str	r2, [r3, #24]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d894      	bhi.n	800a11c <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x38>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fc f801 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800a202:	4602      	mov	r2, r0
 800a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a206:	4293      	cmp	r3, r2
 800a208:	bf34      	ite	cc
 800a20a:	2301      	movcc	r3, #1
 800a20c:	2300      	movcs	r3, #0
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	f47f af74 	bne.w	800a0fe <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x1a>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a3a      	ldr	r2, [r7, #32]
 800a21a:	615a      	str	r2, [r3, #20]
  current_operator_index_ = previous_operator_idx;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	372c      	adds	r7, #44	@ 0x2c
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd90      	pop	{r4, r7, pc}
 800a22c:	08014ac8 	.word	0x08014ac8
 800a230:	08014b00 	.word	0x08014b00

0800a234 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::ResetSubgraphs() {
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	61bb      	str	r3, [r7, #24]
  uint32_t previous_operator_idx = current_operator_index_;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a248:	2300      	movs	r3, #0
 800a24a:	61fb      	str	r3, [r7, #28]
 800a24c:	e045      	b.n	800a2da <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0xa6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800a24e:	69fa      	ldr	r2, [r7, #28]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	69fa      	ldr	r2, [r7, #28]
 800a25a:	4611      	mov	r1, r2
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fb ff76 	bl	800614e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800a262:	6138      	str	r0, [r7, #16]
    for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	619a      	str	r2, [r3, #24]
 800a26a:	e02e      	b.n	800a2ca <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x96>
         ++current_operator_index_) {
      TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	691a      	ldr	r2, [r3, #16]
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	00db      	lsls	r3, r3, #3
 800a274:	4413      	add	r3, r2
                               .node_and_registrations[current_operator_index_]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	212c      	movs	r1, #44	@ 0x2c
 800a27e:	fb01 f303 	mul.w	r3, r1, r3
 800a282:	4413      	add	r3, r2
      TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a284:	60fb      	str	r3, [r7, #12]
                               .node);
      const TFLMRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	691a      	ldr	r2, [r3, #16]
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	00db      	lsls	r3, r3, #3
 800a28e:	4413      	add	r3, r2
              .node_and_registrations[current_operator_index_]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	212c      	movs	r1, #44	@ 0x2c
 800a298:	fb01 f303 	mul.w	r3, r1, r3
 800a29c:	4413      	add	r3, r2
      const TFLMRegistration* registration =
 800a29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a0:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->reset != nullptr) {
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00b      	beq.n	800a2c0 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x8c>
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d007      	beq.n	800a2c0 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x8c>
        registration->reset(context_, node->user_data);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6850      	ldr	r0, [r2, #4]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	6912      	ldr	r2, [r2, #16]
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4798      	blx	r3
         ++current_operator_index_) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	699b      	ldr	r3, [r3, #24]
    for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	619a      	str	r2, [r3, #24]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d8cb      	bhi.n	800a26c <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x38>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	61fb      	str	r3, [r7, #28]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fb ff90 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	bf34      	ite	cc
 800a2ec:	2301      	movcc	r3, #1
 800a2ee:	2300      	movcs	r3, #0
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1ab      	bne.n	800a24e <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x1a>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	615a      	str	r2, [r3, #20]
  current_operator_index_ = previous_operator_idx;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::FreeSubgraphs() {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b088      	sub	sp, #32
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	61bb      	str	r3, [r7, #24]
  uint32_t previous_operator_idx = current_operator_index_;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a320:	2300      	movs	r3, #0
 800a322:	61fb      	str	r3, [r7, #28]
 800a324:	e045      	b.n	800a3b2 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0xa6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800a326:	69fa      	ldr	r2, [r7, #28]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	69fa      	ldr	r2, [r7, #28]
 800a332:	4611      	mov	r1, r2
 800a334:	4618      	mov	r0, r3
 800a336:	f7fb ff0a 	bl	800614e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800a33a:	6138      	str	r0, [r7, #16]
    for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	619a      	str	r2, [r3, #24]
 800a342:	e02e      	b.n	800a3a2 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x96>
         ++current_operator_index_) {
      TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691a      	ldr	r2, [r3, #16]
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	4413      	add	r3, r2
                               .node_and_registrations[current_operator_index_]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	212c      	movs	r1, #44	@ 0x2c
 800a356:	fb01 f303 	mul.w	r3, r1, r3
 800a35a:	4413      	add	r3, r2
      TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a35c:	60fb      	str	r3, [r7, #12]
                               .node);
      const TFLMRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	691a      	ldr	r2, [r3, #16]
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	4413      	add	r3, r2
              .node_and_registrations[current_operator_index_]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	212c      	movs	r1, #44	@ 0x2c
 800a370:	fb01 f303 	mul.w	r3, r1, r3
 800a374:	4413      	add	r3, r2
      const TFLMRegistration* registration =
 800a376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a378:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x8c>
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d007      	beq.n	800a398 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x8c>
        registration->free(context_, node->user_data);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6850      	ldr	r0, [r2, #4]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	6912      	ldr	r2, [r2, #16]
 800a394:	4611      	mov	r1, r2
 800a396:	4798      	blx	r3
         ++current_operator_index_) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	699b      	ldr	r3, [r3, #24]
    for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	619a      	str	r2, [r3, #24]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d8cb      	bhi.n	800a344 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x38>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	61fb      	str	r3, [r7, #28]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fb ff24 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	bf34      	ite	cc
 800a3c4:	2301      	movcc	r3, #1
 800a3c6:	2300      	movcs	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1ab      	bne.n	800a326 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x1a>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	69ba      	ldr	r2, [r7, #24]
 800a3d2:	615a      	str	r2, [r3, #20]
  current_operator_index_ = previous_operator_idx;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi>:

TfLiteStatus MicroInterpreterGraph::InvokeSubgraph(int subgraph_idx) {
 800a3e4:	b590      	push	{r4, r7, lr}
 800a3e6:	b08b      	sub	sp, #44	@ 0x2c
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  int previous_subgraph_idx = current_subgraph_index_;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	623b      	str	r3, [r7, #32]
  uint32_t previous_operator_idx = current_operator_index_;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	61fb      	str	r3, [r7, #28]
  current_subgraph_index_ = subgraph_idx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a1b      	ldr	r3, [r3, #32]
 800a404:	4618      	mov	r0, r3
 800a406:	f7fb fefd 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800a40a:	4602      	mov	r2, r0
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	bf94      	ite	ls
 800a412:	2301      	movls	r3, #1
 800a414:	2300      	movhi	r3, #0
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00c      	beq.n	800a436 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x52>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800a420:	4618      	mov	r0, r3
 800a422:	f7fb feef 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800a426:	4603      	mov	r3, r0
 800a428:	461a      	mov	r2, r3
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	4842      	ldr	r0, [pc, #264]	@ (800a538 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x154>)
 800a42e:	f000 fb3b 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800a432:	2301      	movs	r3, #1
 800a434:	e07c      	b.n	800a530 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x14c>
  }
  TfLiteStatus invoke_status = kTfLiteOk;
 800a436:	2300      	movs	r3, #0
 800a438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	4618      	mov	r0, r3
 800a444:	f7fb fe83 	bl	800614e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800a448:	61b8      	str	r0, [r7, #24]
  for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	619a      	str	r2, [r3, #24]
 800a450:	e061      	b.n	800a516 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x132>
       ++current_operator_index_) {
    TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	691a      	ldr	r2, [r3, #16]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	4413      	add	r3, r2
                             .node_and_registrations[current_operator_index_]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	212c      	movs	r1, #44	@ 0x2c
 800a464:	fb01 f303 	mul.w	r3, r1, r3
 800a468:	4413      	add	r3, r2
    TfLiteNode* node = &(subgraph_allocations_[subgraph_idx]
 800a46a:	617b      	str	r3, [r7, #20]
                             .node);
    const TFLMRegistration* registration =
        subgraph_allocations_[subgraph_idx]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691a      	ldr	r2, [r3, #16]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	4413      	add	r3, r2
            .node_and_registrations[current_operator_index_]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	212c      	movs	r1, #44	@ 0x2c
 800a47e:	fb01 f303 	mul.w	r3, r1, r3
 800a482:	4413      	add	r3, r2
    const TFLMRegistration* registration =
 800a484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a486:	613b      	str	r3, [r7, #16]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfilerInterface*>(context_->profiler));
 800a488:	6938      	ldr	r0, [r7, #16]
 800a48a:	f7ff fcae 	bl	8009dea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800a48e:	4601      	mov	r1, r0
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a496:	f107 0308 	add.w	r3, r7, #8
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fc6b 	bl	8009d76 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_22MicroProfilerInterfaceE>
#endif

    TFLITE_DCHECK(registration->invoke);
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xc8>
 800a4a8:	f003 fb88 	bl	800dbbc <abort>
    invoke_status = registration->invoke(context_, node);
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	6852      	ldr	r2, [r2, #4]
 800a4b4:	6979      	ldr	r1, [r7, #20]
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	4798      	blx	r3
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68da      	ldr	r2, [r3, #12]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3314      	adds	r3, #20
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	4798      	blx	r3

    if (invoke_status != kTfLiteOk) {
 800a4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d010      	beq.n	800a4fc <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x118>
      if (invoke_status != kTfLiteAbort) {
 800a4da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4de:	2b0f      	cmp	r3, #15
 800a4e0:	d00a      	beq.n	800a4f8 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x114>
        MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 800a4e2:	6938      	ldr	r0, [r7, #16]
 800a4e4:	f7ff fc81 	bl	8009dea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800a4e8:	4601      	mov	r1, r0
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699a      	ldr	r2, [r3, #24]
 800a4ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4f2:	4812      	ldr	r0, [pc, #72]	@ (800a53c <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x158>)
 800a4f4:	f000 fad8 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                    OpNameFromRegistration(registration),
                    current_operator_index_, invoke_status);
      }
      // make sure to restore subgraph and operator indices
      break;
 800a4f8:	2400      	movs	r4, #0
 800a4fa:	e000      	b.n	800a4fe <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x11a>
    }
  }
 800a4fc:	2401      	movs	r4, #1
 800a4fe:	f107 0308 	add.w	r3, r7, #8
 800a502:	4618      	mov	r0, r3
 800a504:	f7ff fc59 	bl	8009dba <_ZN6tflite19ScopedMicroProfilerD1Ev>
 800a508:	2c01      	cmp	r4, #1
 800a50a:	d109      	bne.n	800a520 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x13c>
       ++current_operator_index_) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	699b      	ldr	r3, [r3, #24]
  for (current_operator_index_ = 0; current_operator_index_ < operators_size;
 800a510:	1c5a      	adds	r2, r3, #1
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	619a      	str	r2, [r3, #24]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d898      	bhi.n	800a452 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x6e>

  current_subgraph_index_ = previous_subgraph_idx;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a3a      	ldr	r2, [r7, #32]
 800a524:	615a      	str	r2, [r3, #20]
  current_operator_index_ = previous_operator_idx;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	69fa      	ldr	r2, [r7, #28]
 800a52a:	619a      	str	r2, [r3, #24]

  return invoke_status;
 800a52c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a530:	4618      	mov	r0, r3
 800a532:	372c      	adds	r7, #44	@ 0x2c
 800a534:	46bd      	mov	sp, r7
 800a536:	bd90      	pop	{r4, r7, pc}
 800a538:	08014b54 	.word	0x08014b54
 800a53c:	08014b88 	.word	0x08014b88

0800a540 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreterGraph::ResetVariableTensors() {
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	@ 0x28
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a548:	2300      	movs	r3, #0
 800a54a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54c:	e076      	b.n	800a63c <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xfc>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a554:	4618      	mov	r0, r3
 800a556:	f000 f96a 	bl	800a82e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmEixEm>
 800a55a:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800a55c:	2300      	movs	r3, #0
 800a55e:	623b      	str	r3, [r7, #32]
 800a560:	e059      	b.n	800a616 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xd6>
      auto* tensor = subgraph->tensors()->Get(i);
 800a562:	69b8      	ldr	r0, [r7, #24]
 800a564:	f7fc f8c9 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 800a568:	4603      	mov	r3, r0
 800a56a:	6a39      	ldr	r1, [r7, #32]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fc fef7 	bl	8007360 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 800a572:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 800a574:	6978      	ldr	r0, [r7, #20]
 800a576:	f7fc f873 	bl	8006660 <_ZNK6tflite6Tensor11is_variableEv>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d047      	beq.n	800a610 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xd0>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691a      	ldr	r2, [r3, #16]
 800a584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	4413      	add	r3, r2
 800a58a:	6859      	ldr	r1, [r3, #4]
 800a58c:	6a3a      	ldr	r2, [r7, #32]
 800a58e:	4613      	mov	r3, r2
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	440b      	add	r3, r1
 800a598:	f107 020c 	add.w	r2, r7, #12
 800a59c:	4611      	mov	r1, r2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fc f81e 	bl	80065e0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	74fb      	strb	r3, [r7, #19]
 800a5a8:	7cfb      	ldrb	r3, [r7, #19]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x72>
 800a5ae:	7cfb      	ldrb	r3, [r7, #19]
 800a5b0:	e05d      	b.n	800a66e <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x12e>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 800a5b6:	6978      	ldr	r0, [r7, #20]
 800a5b8:	f7fb feda 	bl	8006370 <_ZNK6tflite6Tensor4typeEv>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b09      	cmp	r3, #9
 800a5c0:	bf0c      	ite	eq
 800a5c2:	2301      	moveq	r3, #1
 800a5c4:	2300      	movne	r3, #0
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00f      	beq.n	800a5ec <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xac>
          value = tensor->quantization()->zero_point()->Get(0);
 800a5cc:	6978      	ldr	r0, [r7, #20]
 800a5ce:	f7fd f917 	bl	8007800 <_ZNK6tflite6Tensor12quantizationEv>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fd f8e7 	bl	80077a8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f9 fee8 	bl	80043b4 <_ZNK11flatbuffers6VectorIxmE3GetEm>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691a      	ldr	r2, [r3, #16]
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	00db      	lsls	r3, r3, #3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	6859      	ldr	r1, [r3, #4]
 800a5f8:	6a3a      	ldr	r2, [r7, #32]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	440b      	add	r3, r1
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	69f9      	ldr	r1, [r7, #28]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f004 fb8c 	bl	800ed28 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	3301      	adds	r3, #1
 800a614:	623b      	str	r3, [r7, #32]
 800a616:	69b8      	ldr	r0, [r7, #24]
 800a618:	f7fc f86f 	bl	80066fa <_ZNK6tflite8SubGraph7tensorsEv>
 800a61c:	4603      	mov	r3, r0
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fc fe90 	bl	8007344 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 800a624:	4602      	mov	r2, r0
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	4293      	cmp	r3, r2
 800a62a:	bf34      	ite	cc
 800a62c:	2301      	movcc	r3, #1
 800a62e:	2300      	movcs	r3, #0
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d195      	bne.n	800a562 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x22>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	3301      	adds	r3, #1
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	4618      	mov	r0, r3
 800a642:	f7fb fddf 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800a646:	4602      	mov	r2, r0
 800a648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64a:	4293      	cmp	r3, r2
 800a64c:	bf34      	ite	cc
 800a64e:	2301      	movcc	r3, #1
 800a650:	2300      	movcs	r3, #0
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	f47f af7a 	bne.w	800a54e <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xe>
               buffer_size);
      }
    }
  }
  if (resource_variables_ != nullptr) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d004      	beq.n	800a66c <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x12c>
    resource_variables_->ResetAll();
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	4618      	mov	r0, r3
 800a668:	f000 faa6 	bl	800abb8 <_ZN6tflite22MicroResourceVariables8ResetAllEv>
  }

  return kTfLiteOk;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3728      	adds	r7, #40	@ 0x28
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv>:

int MicroInterpreterGraph::NumSubgraphs() {
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  return model_->subgraphs()->size();
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	4618      	mov	r0, r3
 800a684:	f7fb fd38 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800a688:	4603      	mov	r3, r0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fb fdba 	bl	8006204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800a690:	4603      	mov	r3, r0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <_ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroInterpreterGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	611a      	str	r2, [r3, #16]
}
 800a6aa:	bf00      	nop
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi>:

size_t MicroInterpreterGraph::NumSubgraphInputs(int subgraph_idx) {
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fb fd17 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f7fb fda5 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fc f81c 	bl	8006716 <_ZNK6tflite8SubGraph6inputsEv>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7f9 fe8f 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800a6e6:	4603      	mov	r3, r0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroInterpreterGraph::GetSubgraphInput(int subgraph_idx,
                                                          int input_idx) {
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	4618      	mov	r0, r3
 800a702:	f7fb fcf9 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800a706:	4602      	mov	r2, r0
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4619      	mov	r1, r3
 800a70c:	4610      	mov	r0, r2
 800a70e:	f7fb fd87 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a712:	4603      	mov	r3, r0
 800a714:	4618      	mov	r0, r3
 800a716:	f7fb fffe 	bl	8006716 <_ZNK6tflite8SubGraph6inputsEv>
 800a71a:	4602      	mov	r2, r0
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f7f9 fe7d 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 800a726:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	691a      	ldr	r2, [r3, #16]
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	4413      	add	r3, r2
 800a732:	6859      	ldr	r1, [r3, #4]
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	4613      	mov	r3, r2
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	4413      	add	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi>:

size_t MicroInterpreterGraph::NumSubgraphOutputs(int subgraph_idx) {
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs() == nullptr
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	4618      	mov	r0, r3
 800a758:	f7fb fcce 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800a75c:	4602      	mov	r2, r0
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	4619      	mov	r1, r3
 800a762:	4610      	mov	r0, r2
 800a764:	f7fb fd5c 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a768:	4603      	mov	r3, r0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fb ffe1 	bl	8006732 <_ZNK6tflite8SubGraph7outputsEv>
 800a770:	4603      	mov	r3, r0
             ? 0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d014      	beq.n	800a7a0 <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x58>
             : model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fb fcbc 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800a780:	4602      	mov	r2, r0
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	4619      	mov	r1, r3
 800a786:	4610      	mov	r0, r2
 800a788:	f7fb fd4a 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a78c:	4603      	mov	r3, r0
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fb ffcf 	bl	8006732 <_ZNK6tflite8SubGraph7outputsEv>
 800a794:	4603      	mov	r3, r0
 800a796:	4618      	mov	r0, r3
 800a798:	f7f9 fe34 	bl	8004404 <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800a79c:	4603      	mov	r3, r0
 800a79e:	e000      	b.n	800a7a2 <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x5a>
             ? 0
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroInterpreterGraph::GetSubgraphOutput(int subgraph_idx,
                                                           int output_idx) {
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fb fc9c 	bl	80060f8 <_ZNK6tflite5Model9subgraphsEv>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	f7fb fd2a 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fb ffaf 	bl	8006732 <_ZNK6tflite8SubGraph7outputsEv>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	4610      	mov	r0, r2
 800a7dc:	f7f9 fe20 	bl	8004420 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 800a7e0:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	691a      	ldr	r2, [r3, #16]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	00db      	lsls	r3, r3, #3
 800a7ea:	4413      	add	r3, r2
 800a7ec:	6859      	ldr	r1, [r3, #4]
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	4413      	add	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	440b      	add	r3, r1
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3718      	adds	r7, #24
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <_ZSt6all_ofIPiZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EbT_SA_T0_>:
   *  @p [__first,__last), and false otherwise.
  */
  template<typename _InputIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800a802:	b580      	push	{r7, lr}
 800a804:	b084      	sub	sp, #16
 800a806:	af00      	add	r7, sp, #0
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	60b9      	str	r1, [r7, #8]
 800a80c:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800a80e:	461a      	mov	r2, r3
 800a810:	68b9      	ldr	r1, [r7, #8]
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f000 f819 	bl	800a84a <_ZSt11find_if_notIPiZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_ET_SA_SA_T0_>
 800a818:	4602      	mov	r2, r0
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	4293      	cmp	r3, r2
 800a81e:	bf0c      	ite	eq
 800a820:	2301      	moveq	r3, #1
 800a822:	2300      	movne	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmEixEm>:
  return_type operator[](SizeT i) const { return Get(i); }
 800a82e:	b580      	push	{r7, lr}
 800a830:	b082      	sub	sp, #8
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7fb fcf0 	bl	8006220 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a840:	4603      	mov	r3, r0
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <_ZSt11find_if_notIPiZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_ET_SA_SA_T0_>:
   *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
 800a84a:	b590      	push	{r4, r7, lr}
 800a84c:	b085      	sub	sp, #20
 800a84e:	af00      	add	r7, sp, #0
 800a850:	60f8      	str	r0, [r7, #12]
 800a852:	60b9      	str	r1, [r7, #8]
 800a854:	713a      	strb	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	      typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if_not(__first, __last,
 800a856:	4618      	mov	r0, r3
 800a858:	f000 f80a 	bl	800a870 <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EENS0_10_Iter_predIT_EESC_>
 800a85c:	4622      	mov	r2, r4
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 f818 	bl	800a896 <_ZSt13__find_if_notIPiN9__gnu_cxx5__ops10_Iter_predIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_>
 800a866:	4603      	mov	r3, r0
				__gnu_cxx::__ops::__pred_iter(__pred));
    }
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd90      	pop	{r4, r7, pc}

0800a870 <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EENS0_10_Iter_predIT_EESC_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 800a870:	b5b0      	push	{r4, r5, r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800a878:	1d3b      	adds	r3, r7, #4
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f821 	bl	800a8c2 <_ZSt4moveIRZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EONSt16remove_referenceIT_E4typeEOSB_>
 800a880:	f107 030c 	add.w	r3, r7, #12
 800a884:	4629      	mov	r1, r5
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f826 	bl	800a8d8 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EC1ESA_>
 800a88c:	bf00      	nop
 800a88e:	4620      	mov	r0, r4
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bdb0      	pop	{r4, r5, r7, pc}

0800a896 <_ZSt13__find_if_notIPiN9__gnu_cxx5__ops10_Iter_predIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800a896:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a898:	b085      	sub	sp, #20
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800a8a2:	68fc      	ldr	r4, [r7, #12]
 800a8a4:	7938      	ldrb	r0, [r7, #4]
 800a8a6:	f000 f825 	bl	800a8f4 <_ZN9__gnu_cxx5__ops8__negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predISC_EE>
  template<typename _Iter>
    __attribute__((__always_inline__))
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800a8aa:	bf00      	nop
 800a8ac:	4633      	mov	r3, r6
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	68b9      	ldr	r1, [r7, #8]
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 f831 	bl	800a91a <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag>
 800a8b8:	4603      	mov	r3, r0
    }
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8c2 <_ZSt4moveIRZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800a8c2:	b480      	push	{r7}
 800a8c4:	b083      	sub	sp, #12
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EC1ESA_>:
      _Iter_pred(_Predicate __pred)
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7ff ffec 	bl	800a8c2 <_ZSt4moveIRZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <_ZN9__gnu_cxx5__ops8__negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predISC_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800a8f4:	b5b0      	push	{r4, r5, r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800a8fc:	1d3b      	adds	r3, r7, #4
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7ff ffdf 	bl	800a8c2 <_ZSt4moveIRZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EONSt16remove_referenceIT_E4typeEOSB_>
 800a904:	f107 030c 	add.w	r3, r7, #12
 800a908:	4629      	mov	r1, r5
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 f886 	bl	800aa1c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EC1ESA_>
 800a910:	bf00      	nop
 800a912:	4620      	mov	r0, r4
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bdb0      	pop	{r4, r5, r7, pc}

0800a91a <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag>:

  /// This is an overload used by find algos for the RAI case.
  template<typename _RandomAccessIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b086      	sub	sp, #24
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	60b9      	str	r1, [r7, #8]
 800a924:	713a      	strb	r2, [r7, #4]
 800a926:	703b      	strb	r3, [r7, #0]
	      _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	109b      	asrs	r3, r3, #2
 800a930:	109b      	asrs	r3, r3, #2
 800a932:	617b      	str	r3, [r7, #20]

      for (; __trip_count > 0; --__trip_count)
 800a934:	e036      	b.n	800a9a4 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0x8a>
	{
	  if (__pred(__first))
 800a936:	1d3b      	adds	r3, r7, #4
 800a938:	68f9      	ldr	r1, [r7, #12]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 f87c 	bl	800aa38 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EclIPiEEbT_>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0x30>
	    return __first;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	e064      	b.n	800aa14 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xfa>
	  ++__first;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3304      	adds	r3, #4
 800a94e:	60fb      	str	r3, [r7, #12]

	  if (__pred(__first))
 800a950:	1d3b      	adds	r3, r7, #4
 800a952:	68f9      	ldr	r1, [r7, #12]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f86f 	bl	800aa38 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EclIPiEEbT_>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0x4a>
	    return __first;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	e057      	b.n	800aa14 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xfa>
	  ++__first;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	3304      	adds	r3, #4
 800a968:	60fb      	str	r3, [r7, #12]

	  if (__pred(__first))
 800a96a:	1d3b      	adds	r3, r7, #4
 800a96c:	68f9      	ldr	r1, [r7, #12]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 f862 	bl	800aa38 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EclIPiEEbT_>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d001      	beq.n	800a97e <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0x64>
	    return __first;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	e04a      	b.n	800aa14 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xfa>
	  ++__first;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3304      	adds	r3, #4
 800a982:	60fb      	str	r3, [r7, #12]

	  if (__pred(__first))
 800a984:	1d3b      	adds	r3, r7, #4
 800a986:	68f9      	ldr	r1, [r7, #12]
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 f855 	bl	800aa38 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EclIPiEEbT_>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0x7e>
	    return __first;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	e03d      	b.n	800aa14 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xfa>
	  ++__first;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	3304      	adds	r3, #4
 800a99c:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	617b      	str	r3, [r7, #20]
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	dcc5      	bgt.n	800a936 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0x1c>
	}

      switch (__last - __first)
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	109b      	asrs	r3, r3, #2
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d006      	beq.n	800a9c4 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xaa>
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	dc2b      	bgt.n	800aa12 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xf8>
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d01c      	beq.n	800a9f8 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xde>
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d00d      	beq.n	800a9de <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xc4>
 800a9c2:	e026      	b.n	800aa12 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xf8>
	{
	case 3:
	  if (__pred(__first))
 800a9c4:	1d3b      	adds	r3, r7, #4
 800a9c6:	68f9      	ldr	r1, [r7, #12]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f835 	bl	800aa38 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EclIPiEEbT_>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d001      	beq.n	800a9d8 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xbe>
	    return __first;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	e01d      	b.n	800aa14 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xfa>
	  ++__first;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	60fb      	str	r3, [r7, #12]
	  // FALLTHRU
	case 2:
	  if (__pred(__first))
 800a9de:	1d3b      	adds	r3, r7, #4
 800a9e0:	68f9      	ldr	r1, [r7, #12]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 f828 	bl	800aa38 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EclIPiEEbT_>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xd8>
	    return __first;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	e010      	b.n	800aa14 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xfa>
	  ++__first;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	60fb      	str	r3, [r7, #12]
	  // FALLTHRU
	case 1:
	  if (__pred(__first))
 800a9f8:	1d3b      	adds	r3, r7, #4
 800a9fa:	68f9      	ldr	r1, [r7, #12]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 f81b 	bl	800aa38 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EclIPiEEbT_>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xf2>
	    return __first;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	e003      	b.n	800aa14 <_ZSt9__find_ifIPiN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EEET_SE_SE_T0_St26random_access_iterator_tag+0xfa>
	  ++__first;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	60fb      	str	r3, [r7, #12]
	  // FALLTHRU
	case 0:
	default:
	  return __last;
 800aa12:	68bb      	ldr	r3, [r7, #8]
	}
    }
 800aa14:	4618      	mov	r0, r3
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EC1ESA_>:
      _Iter_negate(_Predicate __pred)
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800aa26:	463b      	mov	r3, r7
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff ff4a 	bl	800a8c2 <_ZSt4moveIRZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4618      	mov	r0, r3
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorEUliE_EclIPiEEbT_>:
	operator()(_Iterator __it)
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f7ff f9e3 	bl	8009e16 <_ZZN6tflite12_GLOBAL__N_119CheckDynamicTensorsEPK14TfLiteIntArrayPK16TfLiteEvalTensorENKUliE_clEi>
 800aa50:	4603      	mov	r3, r0
 800aa52:	f083 0301 	eor.w	r3, r3, #1
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <_ZN12_GLOBAL__N_19VDebugLogEPKcz>:
#endif

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
namespace {

void VDebugLog(const char* format, ...) {
 800aa60:	b40f      	push	{r0, r1, r2, r3}
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800aa68:	f107 0314 	add.w	r3, r7, #20
 800aa6c:	607b      	str	r3, [r7, #4]
  DebugLog(format, args);
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	6938      	ldr	r0, [r7, #16]
 800aa72:	f7fb facf 	bl	8006014 <DebugLog>
  va_end(args);
}
 800aa76:	bf00      	nop
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa80:	b004      	add	sp, #16
 800aa82:	4770      	bx	lr

0800aa84 <_Z12VMicroPrintfPKcSt9__va_list>:

}  // namespace

void VMicroPrintf(const char* format, va_list args) {
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  DebugLog(format, args);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7fb fabf 	bl	8006014 <DebugLog>
  // TODO(b/290051015): remove "\r\n"
  VDebugLog("\r\n");
 800aa96:	4803      	ldr	r0, [pc, #12]	@ (800aaa4 <_Z12VMicroPrintfPKcSt9__va_list+0x20>)
 800aa98:	f7ff ffe2 	bl	800aa60 <_ZN12_GLOBAL__N_19VDebugLogEPKcz>
}
 800aa9c:	bf00      	nop
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	08014f6c 	.word	0x08014f6c

0800aaa8 <_Z11MicroPrintfPKcz>:

void MicroPrintf(const char* format, ...) {
 800aaa8:	b40f      	push	{r0, r1, r2, r3}
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800aab0:	f107 0314 	add.w	r3, r7, #20
 800aab4:	607b      	str	r3, [r7, #4]
  VMicroPrintf(format, args);
 800aab6:	6879      	ldr	r1, [r7, #4]
 800aab8:	6938      	ldr	r0, [r7, #16]
 800aaba:	f7ff ffe3 	bl	800aa84 <_Z12VMicroPrintfPKcSt9__va_list>
  va_end(args);
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aac8:	b004      	add	sp, #16
 800aaca:	4770      	bx	lr

0800aacc <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const ::flatbuffers::String *custom_code() const {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::String *>(VT_CUSTOM_CODE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2106      	movs	r1, #6
 800aad8:	4618      	mov	r0, r3
 800aada:	f7f9 fc30 	bl	800433e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>
 800aade:	4603      	mov	r3, r0
  }
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(const OperatorCode* opcode,
                                       const MicroOpResolver& op_resolver,
                                       const TFLMRegistration** registration) {
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b088      	sub	sp, #32
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
  TfLiteStatus status = kTfLiteOk;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f7f9 f82e 	bl	8003b60 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800ab04:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	2bd1      	cmp	r3, #209	@ 0xd1
 800ab0a:	dd06      	ble.n	800ab1a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x32>
    MicroPrintf("Op builtin_code out of range: %d.", builtin_code);
 800ab0c:	69b9      	ldr	r1, [r7, #24]
 800ab0e:	4827      	ldr	r0, [pc, #156]	@ (800abac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xc4>)
 800ab10:	f7ff ffca 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    status = kTfLiteError;
 800ab14:	2301      	movs	r3, #1
 800ab16:	77fb      	strb	r3, [r7, #31]
 800ab18:	e043      	b.n	800aba2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	2b20      	cmp	r3, #32
 800ab1e:	d017      	beq.n	800ab50 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x68>
    *registration = op_resolver.FindOp(builtin_code);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69b9      	ldr	r1, [r7, #24]
 800ab28:	68b8      	ldr	r0, [r7, #8]
 800ab2a:	4798      	blx	r3
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d133      	bne.n	800aba2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
      MicroPrintf("Didn't find op for builtin opcode '%s'",
 800ab3a:	69b8      	ldr	r0, [r7, #24]
 800ab3c:	f7fe f9e2 	bl	8008f04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800ab40:	4603      	mov	r3, r0
 800ab42:	4619      	mov	r1, r3
 800ab44:	481a      	ldr	r0, [pc, #104]	@ (800abb0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xc8>)
 800ab46:	f7ff ffaf 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                  EnumNameBuiltinOperator(builtin_code));
      status = kTfLiteError;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	77fb      	strb	r3, [r7, #31]
 800ab4e:	e028      	b.n	800aba2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
    }
  } else if (!opcode->custom_code()) {
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7ff ffbb 	bl	800aacc <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bf0c      	ite	eq
 800ab5c:	2301      	moveq	r3, #1
 800ab5e:	2300      	movne	r3, #0
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d005      	beq.n	800ab72 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x8a>
    MicroPrintf("Operator with CUSTOM builtin_code has no custom_code.\n");
 800ab66:	4813      	ldr	r0, [pc, #76]	@ (800abb4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xcc>)
 800ab68:	f7ff ff9e 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    status = kTfLiteError;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	77fb      	strb	r3, [r7, #31]
 800ab70:	e017      	b.n	800aba2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7ff ffaa 	bl	800aacc <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7f9 f86f 	bl	8003c5e <_ZNK11flatbuffers6String5c_strEv>
 800ab80:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name);
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3304      	adds	r3, #4
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6979      	ldr	r1, [r7, #20]
 800ab8c:	68b8      	ldr	r0, [r7, #8]
 800ab8e:	4798      	blx	r3
 800ab90:	4602      	mov	r2, r0
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800aba2:	7ffb      	ldrb	r3, [r7, #31]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3720      	adds	r7, #32
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	08015ae8 	.word	0x08015ae8
 800abb0:	08015b0c 	.word	0x08015b0c
 800abb4:	08015b34 	.word	0x08015b34

0800abb8 <_ZN6tflite22MicroResourceVariables8ResetAllEv>:
  TFLITE_DCHECK(input_buffer != nullptr);
  memcpy(variable.resource_buffer, input_buffer, variable.bytes);
  return kTfLiteOk;
}

TfLiteStatus MicroResourceVariables::ResetAll() {
 800abb8:	b5b0      	push	{r4, r5, r7, lr}
 800abba:	b088      	sub	sp, #32
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < num_resource_variables_; i++) {
 800abc0:	2300      	movs	r3, #0
 800abc2:	61fb      	str	r3, [r7, #28]
 800abc4:	e019      	b.n	800abfa <_ZN6tflite22MicroResourceVariables8ResetAllEv+0x42>
    MicroResourceVariable variable = resource_variables_[i];
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6819      	ldr	r1, [r3, #0]
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	4613      	mov	r3, r2
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	4413      	add	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	440b      	add	r3, r1
 800abd6:	f107 0408 	add.w	r4, r7, #8
 800abda:	461d      	mov	r5, r3
 800abdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	6023      	str	r3, [r4, #0]
    // TODO(b/269669735): Explains why casting zero_point to int8 and memset.
    memset(variable.resource_buffer, variable.default_value, variable.bytes);
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800abea:	4611      	mov	r1, r2
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	4618      	mov	r0, r3
 800abf0:	f004 f89a 	bl	800ed28 <memset>
  for (int i = 0; i < num_resource_variables_; i++) {
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	3301      	adds	r3, #1
 800abf8:	61fb      	str	r3, [r7, #28]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	69fa      	ldr	r2, [r7, #28]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	dbe0      	blt.n	800abc6 <_ZN6tflite22MicroResourceVariables8ResetAllEv+0xe>
  }
  return kTfLiteOk;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3720      	adds	r7, #32
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bdb0      	pop	{r4, r5, r7, pc}

0800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b082      	sub	sp, #8
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800ac1c:	f002 ffce 	bl	800dbbc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 800ac3a:	f002 ffbf 	bl	800dbbc <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
      break;
  }
}

template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	ed87 0a03 	vstr	s0, [r7, #12]
 800ac54:	edc7 0a02 	vstr	s1, [r7, #8]
 800ac58:	ed87 1a01 	vstr	s2, [r7, #4]
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
 800ac5c:	f107 0208 	add.w	r2, r7, #8
 800ac60:	f107 030c 	add.w	r3, r7, #12
 800ac64:	4611      	mov	r1, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fa faa4 	bl	80051b4 <_ZSt3maxIfERKT_S2_S2_>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	1d3b      	adds	r3, r7, #4
 800ac70:	4619      	mov	r1, r3
 800ac72:	4610      	mov	r0, r2
 800ac74:	f7fa fab7 	bl	80051e6 <_ZSt3minIfERKT_S2_S2_>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	ee07 3a90 	vmov	s15, r3
}
 800ac80:	eeb0 0a67 	vmov.f32	s0, s15
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	4b04      	ldr	r3, [pc, #16]	@ (800aca4 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eeb0 0a67 	vmov.f32	s0, s15
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	7f7fffff 	.word	0x7f7fffff

0800aca8 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800aca8:	b480      	push	{r7}
 800acaa:	af00      	add	r7, sp, #0
 800acac:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 800acb0:	ee07 3a90 	vmov	s15, r3
 800acb4:	eeb0 0a67 	vmov.f32	s0, s15
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	4603      	mov	r3, r0
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800acce:	7bfb      	ldrb	r3, [r7, #15]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d10b      	bne.n	800acec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	f04f 0200 	mov.w	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800acdc:	f7ff ffd6 	bl	800ac8c <_ZNSt14numeric_limitsIfE3maxEv>
 800ace0:	eef0 7a40 	vmov.f32	s15, s0
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800acea:	e023      	b.n	800ad34 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800acec:	7bfb      	ldrb	r3, [r7, #15]
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d107      	bne.n	800ad02 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f04f 0200 	mov.w	r2, #0
 800acf8:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a0f      	ldr	r2, [pc, #60]	@ (800ad3c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800acfe:	601a      	str	r2, [r3, #0]
}
 800ad00:	e018      	b.n	800ad34 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d107      	bne.n	800ad18 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	4a0d      	ldr	r2, [pc, #52]	@ (800ad40 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800ad0c:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ad14:	601a      	str	r2, [r3, #0]
}
 800ad16:	e00d      	b.n	800ad34 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800ad18:	f7ff ffc6 	bl	800aca8 <_ZNSt14numeric_limitsIfE6lowestEv>
 800ad1c:	eef0 7a40 	vmov.f32	s15, s0
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800ad26:	f7ff ffb1 	bl	800ac8c <_ZNSt14numeric_limitsIfE3maxEv>
 800ad2a:	eef0 7a40 	vmov.f32	s15, s0
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	edc3 7a00 	vstr	s15, [r3]
}
 800ad34:	bf00      	nop
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	40c00000 	.word	0x40c00000
 800ad40:	bf800000 	.word	0xbf800000

0800ad44 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 800ad44:	b590      	push	{r4, r7, lr}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7f8 fdce 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7f8 fdc9 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ad64:	4603      	mov	r3, r0
 800ad66:	429c      	cmp	r4, r3
 800ad68:	d001      	beq.n	800ad6e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800ad6a:	f002 ff27 	bl	800dbbc <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800ad6e:	68b9      	ldr	r1, [r7, #8]
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f7f8 fdc0 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ad76:	4603      	mov	r3, r0
 800ad78:	613b      	str	r3, [r7, #16]
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7f8 fdba 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ad82:	4603      	mov	r3, r0
 800ad84:	617b      	str	r3, [r7, #20]
 800ad86:	f107 0214 	add.w	r2, r7, #20
 800ad8a:	f107 0310 	add.w	r3, r7, #16
 800ad8e:	4611      	mov	r1, r2
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fa fb86 	bl	80054a2 <_ZSt3minIlERKT_S2_S2_>
 800ad96:	4603      	mov	r3, r0
 800ad98:	681b      	ldr	r3, [r3, #0]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd90      	pop	{r4, r7, pc}

0800ada2 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x14>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 800adb4:	e000      	b.n	800adb8 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x14>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 800add6:	e000      	b.n	800adda <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x14>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 800adf8:	e000      	b.n	800adfc <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7f8 fd63 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ae18:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	db03      	blt.n	800ae28 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	db01      	blt.n	800ae2c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800ae28:	f002 fec8 	bl	800dbbc <abort>
  const auto* dims_data = shape.DimsData();
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7f8 fd7c 	bl	800392a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800ae32:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800ae34:	2301      	movs	r3, #1
 800ae36:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800ae38:	2300      	movs	r3, #0
 800ae3a:	613b      	str	r3, [r7, #16]
 800ae3c:	e011      	b.n	800ae62 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d005      	beq.n	800ae52 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	e000      	b.n	800ae54 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 800ae52:	2301      	movs	r3, #1
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	fb02 f303 	mul.w	r3, r2, r3
 800ae5a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	613b      	str	r3, [r7, #16]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	dbe9      	blt.n	800ae3e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 800ae6a:	697b      	ldr	r3, [r7, #20]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800ae74:	b590      	push	{r4, r7, lr}
 800ae76:	b091      	sub	sp, #68	@ 0x44
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	62bb      	str	r3, [r7, #40]	@ 0x28
  const float output_activation_max = params.float_activation_max;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
 800ae8c:	627b      	str	r3, [r7, #36]	@ 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800ae8e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ae90:	f7f8 fd25 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ae94:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800ae96:	6838      	ldr	r0, [r7, #0]
 800ae98:	f7f8 fd21 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ae9c:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800ae9e:	6a3b      	ldr	r3, [r7, #32]
 800aea0:	3b01      	subs	r3, #1
 800aea2:	4619      	mov	r1, r3
 800aea4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800aea6:	f7ff ffaf 	bl	800ae08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800aeaa:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	1e99      	subs	r1, r3, #2
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aeb6:	6838      	ldr	r0, [r7, #0]
 800aeb8:	f7ff ff44 	bl	800ad44 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800aebc:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	4619      	mov	r1, r3
 800aec4:	6838      	ldr	r0, [r7, #0]
 800aec6:	f7f8 fd16 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800aeca:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800aecc:	2300      	movs	r3, #0
 800aece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aed0:	e05e      	b.n	800af90 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800aed2:	2300      	movs	r3, #0
 800aed4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aed6:	e054      	b.n	800af82 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 800aed8:	f04f 0300 	mov.w	r3, #0
 800aedc:	637b      	str	r3, [r7, #52]	@ 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800aede:	2300      	movs	r3, #0
 800aee0:	633b      	str	r3, [r7, #48]	@ 0x30
 800aee2:	e020      	b.n	800af26 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 800aee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	fb03 f202 	mul.w	r2, r3, r2
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	4413      	add	r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	4413      	add	r3, r2
 800aef6:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	fb03 f202 	mul.w	r2, r3, r2
 800af02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af0a:	4413      	add	r3, r2
 800af0c:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800af10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af14:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800af18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af1c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800af20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af22:	3301      	adds	r3, #1
 800af24:	633b      	str	r3, [r7, #48]	@ 0x30
 800af26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	dbda      	blt.n	800aee4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 800af2e:	f04f 0300 	mov.w	r3, #0
 800af32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (bias_data) {
 800af34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af36:	2b00      	cmp	r3, #0
 800af38:	d005      	beq.n	800af46 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 800af3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af40:	4413      	add	r3, r2
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800af46:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800af4a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800af4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800af56:	fb03 f202 	mul.w	r2, r3, r2
 800af5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5c:	4413      	add	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af62:	18d4      	adds	r4, r2, r3
 800af64:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 800af68:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 800af6c:	eeb0 0a67 	vmov.f32	s0, s15
 800af70:	f7ff fe6b 	bl	800ac4a <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800af74:	eef0 7a40 	vmov.f32	s15, s0
 800af78:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800af7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7e:	3301      	adds	r3, #1
 800af80:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	429a      	cmp	r2, r3
 800af88:	dba6      	blt.n	800aed8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 800af8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af8c:	3301      	adds	r3, #1
 800af8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	429a      	cmp	r2, r3
 800af96:	db9c      	blt.n	800aed2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800af98:	bf00      	nop
 800af9a:	bf00      	nop
 800af9c:	3744      	adds	r7, #68	@ 0x44
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd90      	pop	{r4, r7, pc}

0800afa2 <_ZN6tflite12_GLOBAL__N_118FullyConnectedInitEP13TfLiteContextPKcj>:

namespace tflite {
namespace {

void* FullyConnectedInit(TfLiteContext* context, const char* buffer,
                         size_t length) {
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <_ZN6tflite12_GLOBAL__N_118FullyConnectedInitEP13TfLiteContextPKcj+0x18>
 800afb6:	f002 fe01 	bl	800dbbc <abort>
  return context->AllocatePersistentBuffer(context,
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbe:	2130      	movs	r1, #48	@ 0x30
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	4798      	blx	r3
 800afc4:	4603      	mov	r3, r0
                                           sizeof(OpDataFullyConnected));
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
	...

0800afd0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus FullyConnectedPrepare(TfLiteContext* context, TfLiteNode* node) {
 800afd0:	b5b0      	push	{r4, r5, r7, lr}
 800afd2:	b096      	sub	sp, #88	@ 0x58
 800afd4:	af04      	add	r7, sp, #16
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7f8 fcd4 	bl	8003988 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800afe0:	6478      	str	r0, [r7, #68]	@ 0x44

  TFLITE_DCHECK(node->user_data != nullptr);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
 800afea:	f002 fde7 	bl	800dbbc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
 800aff6:	f002 fde1 	bl	800dbbc <abort>

  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	643b      	str	r3, [r7, #64]	@ 0x40
  const auto params =
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	63fb      	str	r3, [r7, #60]	@ 0x3c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 800b006:	4b7c      	ldr	r3, [pc, #496]	@ (800b1f8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b010:	f7fd ff15 	bl	8008e3e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800b014:	63b8      	str	r0, [r7, #56]	@ 0x38
  TF_LITE_ENSURE(context, input != nullptr);
 800b016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10a      	bne.n	800b032 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x62>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	695c      	ldr	r4, [r3, #20]
 800b020:	4b76      	ldr	r3, [pc, #472]	@ (800b1fc <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	2330      	movs	r3, #48	@ 0x30
 800b026:	4a76      	ldr	r2, [pc, #472]	@ (800b200 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800b028:	4976      	ldr	r1, [pc, #472]	@ (800b204 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	47a0      	blx	r4
 800b02e:	2301      	movs	r3, #1
 800b030:	e0de      	b.n	800b1f0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 800b032:	4b75      	ldr	r3, [pc, #468]	@ (800b208 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b03c:	f7fd feff 	bl	8008e3e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800b040:	6378      	str	r0, [r7, #52]	@ 0x34
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 800b042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10a      	bne.n	800b05e <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	695c      	ldr	r4, [r3, #20]
 800b04c:	4b6f      	ldr	r3, [pc, #444]	@ (800b20c <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	2333      	movs	r3, #51	@ 0x33
 800b052:	4a6b      	ldr	r2, [pc, #428]	@ (800b200 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800b054:	496b      	ldr	r1, [pc, #428]	@ (800b204 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	47a0      	blx	r4
 800b05a:	2301      	movs	r3, #1
 800b05c:	e0c8      	b.n	800b1f0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 800b05e:	4b6c      	ldr	r3, [pc, #432]	@ (800b210 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	461a      	mov	r2, r3
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b068:	f7fd fee9 	bl	8008e3e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800b06c:	6338      	str	r0, [r7, #48]	@ 0x30
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 800b06e:	4b69      	ldr	r3, [pc, #420]	@ (800b214 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	461a      	mov	r2, r3
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b078:	f7fd ff04 	bl	8008e84 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 800b07c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 800b07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10a      	bne.n	800b09a <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0xca>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	695c      	ldr	r4, [r3, #20]
 800b088:	4b63      	ldr	r3, [pc, #396]	@ (800b218 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	2338      	movs	r3, #56	@ 0x38
 800b08e:	4a5c      	ldr	r2, [pc, #368]	@ (800b200 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800b090:	495c      	ldr	r1, [pc, #368]	@ (800b204 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	47a0      	blx	r4
 800b096:	2301      	movs	r3, #1
 800b098:	e0aa      	b.n	800b1f0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d01a      	beq.n	800b0dc <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x10c>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	695c      	ldr	r4, [r3, #20]
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7f9 fd5e 	bl	8004b70 <TfLiteTypeGetName>
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7f9 fd58 	bl	8004b70 <TfLiteTypeGetName>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	9303      	str	r3, [sp, #12]
 800b0c4:	9502      	str	r5, [sp, #8]
 800b0c6:	4b55      	ldr	r3, [pc, #340]	@ (800b21c <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	4b55      	ldr	r3, [pc, #340]	@ (800b220 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	2339      	movs	r3, #57	@ 0x39
 800b0d0:	4a4b      	ldr	r2, [pc, #300]	@ (800b200 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800b0d2:	4954      	ldr	r1, [pc, #336]	@ (800b224 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	47a0      	blx	r4
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e089      	b.n	800b1f0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>

  if ((input->type == kTfLiteFloat32 && filter->type != kTfLiteFloat32) ||
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d103      	bne.n	800b0ec <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x11c>
 800b0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d113      	bne.n	800b114 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x144>
      (input->type == kTfLiteInt8 &&
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ee:	781b      	ldrb	r3, [r3, #0]
  if ((input->type == kTfLiteFloat32 && filter->type != kTfLiteFloat32) ||
 800b0f0:	2b09      	cmp	r3, #9
 800b0f2:	d107      	bne.n	800b104 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x134>
       (filter->type != kTfLiteInt8 && filter->type != kTfLiteInt4)) ||
 800b0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0f6:	781b      	ldrb	r3, [r3, #0]
      (input->type == kTfLiteInt8 &&
 800b0f8:	2b09      	cmp	r3, #9
 800b0fa:	d003      	beq.n	800b104 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x134>
       (filter->type != kTfLiteInt8 && filter->type != kTfLiteInt4)) ||
 800b0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b12      	cmp	r3, #18
 800b102:	d107      	bne.n	800b114 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x144>
      (input->type == kTfLiteInt16 && filter->type != kTfLiteInt8)) {
 800b104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b106:	781b      	ldrb	r3, [r3, #0]
       (filter->type != kTfLiteInt8 && filter->type != kTfLiteInt4)) ||
 800b108:	2b07      	cmp	r3, #7
 800b10a:	d116      	bne.n	800b13a <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
      (input->type == kTfLiteInt16 && filter->type != kTfLiteInt8)) {
 800b10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b09      	cmp	r3, #9
 800b112:	d012      	beq.n	800b13a <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    MicroPrintf("Input type: %s with filter type: %s not supported.",
 800b114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	4618      	mov	r0, r3
 800b11a:	f7f9 fd29 	bl	8004b70 <TfLiteTypeGetName>
 800b11e:	4604      	mov	r4, r0
 800b120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	4618      	mov	r0, r3
 800b126:	f7f9 fd23 	bl	8004b70 <TfLiteTypeGetName>
 800b12a:	4603      	mov	r3, r0
 800b12c:	461a      	mov	r2, r3
 800b12e:	4621      	mov	r1, r4
 800b130:	483d      	ldr	r0, [pc, #244]	@ (800b228 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800b132:	f7ff fcb9 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                TfLiteTypeGetName(input->type),
                TfLiteTypeGetName(filter->type));
    return kTfLiteError;
 800b136:	2301      	movs	r3, #1
 800b138:	e05a      	b.n	800b1f0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
  }

  if (filter->type == kTfLiteInt4) {
 800b13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b12      	cmp	r3, #18
 800b140:	d11c      	bne.n	800b17c <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>
    int filter_size =
        RuntimeShape(filter->dims->size,
 800b142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 800b148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 800b14e:	f107 0308 	add.w	r3, r7, #8
 800b152:	4618      	mov	r0, r3
 800b154:	f7fa f92e 	bl	80053b4 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 800b158:	f107 0308 	add.w	r3, r7, #8
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7f8 fbf0 	bl	8003942 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800b162:	62b8      	str	r0, [r7, #40]	@ 0x28
        RuntimeShape(filter->dims->size,
 800b164:	f107 0308 	add.w	r3, r7, #8
 800b168:	4618      	mov	r0, r3
 800b16a:	f7f8 fbad 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(context, filter_size,
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b172:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b174:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b176:	3220      	adds	r2, #32
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	4798      	blx	r3
                                         &data->filter_buffer_index);
  }

  TF_LITE_ENSURE_OK(context, CalculateOpDataFullyConnected(
 800b17c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b17e:	7819      	ldrb	r1, [r3, #0]
 800b180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b182:	781a      	ldrb	r2, [r3, #0]
 800b184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b186:	9303      	str	r3, [sp, #12]
 800b188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18a:	9302      	str	r3, [sp, #8]
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	9301      	str	r3, [sp, #4]
 800b190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f001 fb30 	bl	800c7fc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x1e0>
 800b1aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1ae:	e01f      	b.n	800b1f0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
  data->bias_scratch_index = micro_context->AllocateDecompressionScratchBuffer(
      node, kFullyConnectedBiasTensor);

#endif  // USE_TFLM_COMPRESSION

  micro_context->DeallocateTempTfLiteTensor(input);
 800b1b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	3318      	adds	r3, #24
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b1bc:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800b1be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3318      	adds	r3, #24
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b1c8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b1ca:	4798      	blx	r3
  if (bias != nullptr) {
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d006      	beq.n	800b1e0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x210>
    micro_context->DeallocateTempTfLiteTensor(bias);
 800b1d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3318      	adds	r3, #24
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b1dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b1de:	4798      	blx	r3
  }
  micro_context->DeallocateTempTfLiteTensor(output);
 800b1e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3318      	adds	r3, #24
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1ea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b1ec:	4798      	blx	r3
  return kTfLiteOk;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3748      	adds	r7, #72	@ 0x48
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bdb0      	pop	{r4, r5, r7, pc}
 800b1f8:	0801656c 	.word	0x0801656c
 800b1fc:	08015bc8 	.word	0x08015bc8
 800b200:	08015b6c 	.word	0x08015b6c
 800b204:	08015bb0 	.word	0x08015bb0
 800b208:	08016570 	.word	0x08016570
 800b20c:	08015bdc 	.word	0x08015bdc
 800b210:	08016574 	.word	0x08016574
 800b214:	08016578 	.word	0x08016578
 800b218:	08015bf0 	.word	0x08015bf0
 800b21c:	08015c20 	.word	0x08015c20
 800b220:	08015c30 	.word	0x08015c30
 800b224:	08015c04 	.word	0x08015c04
 800b228:	08015c3c 	.word	0x08015c3c

0800b22c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus FullyConnectedEval(TfLiteContext* context, TfLiteNode* node) {
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	f2ad 5d3c 	subw	sp, sp, #1340	@ 0x53c
 800b234:	af08      	add	r7, sp, #32
 800b236:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b23a:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800b23e:	6018      	str	r0, [r3, #0]
 800b240:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b244:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 800b248:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b24a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b24e:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x32>
 800b25a:	f002 fcaf 	bl	800dbbc <abort>
  const auto* params =
 800b25e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b262:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800b26e:	4bb6      	ldr	r3, [pc, #728]	@ (800b548 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x31c>)
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b276:	f5a3 61a0 	sub.w	r1, r3, #1280	@ 0x500
 800b27a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b27e:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800b282:	6809      	ldr	r1, [r1, #0]
 800b284:	6818      	ldr	r0, [r3, #0]
 800b286:	f001 fc9e 	bl	800cbc6 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b28a:	f8c7 0510 	str.w	r0, [r7, #1296]	@ 0x510
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800b28e:	4baf      	ldr	r3, [pc, #700]	@ (800b54c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x320>)
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b296:	f5a3 61a0 	sub.w	r1, r3, #1280	@ 0x500
 800b29a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b29e:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800b2a2:	6809      	ldr	r1, [r1, #0]
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f001 fc8e 	bl	800cbc6 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b2aa:	f8c7 050c 	str.w	r0, [r7, #1292]	@ 0x50c
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800b2ae:	4ba8      	ldr	r3, [pc, #672]	@ (800b550 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x324>)
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b2b6:	f5a3 61a0 	sub.w	r1, r3, #1280	@ 0x500
 800b2ba:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b2be:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800b2c2:	6809      	ldr	r1, [r1, #0]
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	f001 fc7e 	bl	800cbc6 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b2ca:	f8c7 0508 	str.w	r0, [r7, #1288]	@ 0x508
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800b2ce:	4ba1      	ldr	r3, [pc, #644]	@ (800b554 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x328>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b2d6:	f5a3 61a0 	sub.w	r1, r3, #1280	@ 0x500
 800b2da:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b2de:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800b2e2:	6809      	ldr	r1, [r1, #0]
 800b2e4:	6818      	ldr	r0, [r3, #0]
 800b2e6:	f001 fc7e 	bl	800cbe6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800b2ea:	f8c7 0504 	str.w	r0, [r7, #1284]	@ 0x504
  const CompressionTensorData* bias_comp_td =
      micro_context->GetTensorCompressionData(node, kFullyConnectedBiasTensor);

#endif  // USE_TFLM_COMPRESSION

  TFLITE_DCHECK(node->user_data != nullptr);
 800b2ee:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b2f2:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xd6>
 800b2fe:	f002 fc5d 	bl	800dbbc <abort>
  const auto& data =
 800b302:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b306:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800b312:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800b316:	7a1b      	ldrb	r3, [r3, #8]
 800b318:	2b09      	cmp	r3, #9
 800b31a:	d075      	beq.n	800b408 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
 800b31c:	2b09      	cmp	r3, #9
 800b31e:	f300 849e 	bgt.w	800bc5e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa32>
 800b322:	2b01      	cmp	r3, #1
 800b324:	d004      	beq.n	800b330 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x104>
 800b326:	2b07      	cmp	r3, #7
 800b328:	f000 8243 	beq.w	800b7b2 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x586>
 800b32c:	f000 bc97 	b.w	800bc5e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa32>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 800b330:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b334:	781a      	ldrb	r2, [r3, #0]
 800b336:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b33a:	f5a3 639f 	sub.w	r3, r3, #1272	@ 0x4f8
 800b33e:	4611      	mov	r1, r2
 800b340:	4618      	mov	r0, r3
 800b342:	f001 fa45 	bl	800c7d0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 800b346:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b34a:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 800b34e:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 800b352:	4618      	mov	r0, r3
 800b354:	f001 fc67 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800b358:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 800b35c:	f7f8 fba0 	bl	8003aa0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800b360:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800b362:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b366:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b36a:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 800b36e:	4618      	mov	r0, r3
 800b370:	f001 fc59 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800b374:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800b378:	f7f8 fb92 	bl	8003aa0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800b37c:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(bias),
          tflite::micro::GetOptionalTensorData<float>(
              micro_context, bias, bias_comp_td, data.bias_scratch_index),
#else   // USE_TFLM_COMPRESSION
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800b37e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b382:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800b386:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 800b38a:	4618      	mov	r0, r3
 800b38c:	f001 fc4b 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800b390:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 800b394:	f7ff fd05 	bl	800ada2 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800b398:	4605      	mov	r5, r0
          tflite::micro::GetOptionalTensorData<float>(bias),
#endif  // USE_TFLM_COMPRESSION
          tflite::micro::GetTensorShape(output),
 800b39a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b39e:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800b3a2:	f8d7 1504 	ldr.w	r1, [r7, #1284]	@ 0x504
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f001 fc3d 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800b3ac:	f8d7 0504 	ldr.w	r0, [r7, #1284]	@ 0x504
 800b3b0:	f7f8 fb5a 	bl	8003a68 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800b3ba:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800b3be:	f107 0020 	add.w	r0, r7, #32
 800b3c2:	9304      	str	r3, [sp, #16]
 800b3c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	9502      	str	r5, [sp, #8]
 800b3cc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	9400      	str	r4, [sp, #0]
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	f7ff fd4c 	bl	800ae74 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800b3dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7f8 fa71 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800b3e6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f8 fa6c 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800b3f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7f8 fa67 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800b3fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7f8 fa62 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800b404:	f000 bc3b 	b.w	800bc7e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa52>
    }

    case kTfLiteInt8: {
      switch (filter->type) {
 800b408:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 800b40c:	7a1b      	ldrb	r3, [r3, #8]
 800b40e:	2b09      	cmp	r3, #9
 800b410:	f000 80a2 	beq.w	800b558 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x32c>
 800b414:	2b12      	cmp	r3, #18
 800b416:	f040 81ba 	bne.w	800b78e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x562>
        case kTfLiteInt4: {
          int8_t* unpacked_filter_data = static_cast<int8_t*>(
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800b41a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b41e:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b426:	f8d7 2500 	ldr.w	r2, [r7, #1280]	@ 0x500
 800b42a:	6a11      	ldr	r1, [r2, #32]
 800b42c:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 800b430:	f2a2 42fc 	subw	r2, r2, #1276	@ 0x4fc
 800b434:	6810      	ldr	r0, [r2, #0]
 800b436:	4798      	blx	r3
 800b438:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800b43c:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800b440:	f7ff fbe5 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b444:	4604      	mov	r4, r0
              tflite::micro::GetTensorData<int8_t>(filter),
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800b446:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b44a:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 800b44e:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 800b452:	4618      	mov	r0, r3
 800b454:	f001 fbe7 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800b458:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7f8 fa70 	bl	8003942 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800b462:	4603      	mov	r3, r0
 800b464:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	@ 0x4fc
 800b468:	4619      	mov	r1, r3
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7f9 fe55 	bl	800511a <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800b470:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800b474:	4618      	mov	r0, r3
 800b476:	f7f8 fa27 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
              unpacked_filter_data);
          tflite::reference_integer_ops::FullyConnected(
              FullyConnectedParamsQuantized(data),
 800b47a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b47e:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 800b482:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 800b486:	4618      	mov	r0, r3
 800b488:	f001 f978 	bl	800c77c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
              tflite::micro::GetTensorShape(input),
 800b48c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b490:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800b494:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 800b498:	4618      	mov	r0, r3
 800b49a:	f001 fbc4 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 800b49e:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 800b4a2:	f7ff fbb4 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b4a6:	4605      	mov	r5, r0
              tflite::micro::GetTensorData<int8_t>(input),
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800b4a8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b4ac:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800b4b0:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f001 fbb6 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(bias),
 800b4ba:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b4be:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 800b4c2:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f001 fbad 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 800b4cc:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 800b4d0:	f7ff fc78 	bl	800adc4 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b4d4:	4604      	mov	r4, r0
              tflite::micro::GetOptionalTensorData<int32_t>(bias),
              tflite::micro::GetTensorShape(output),
 800b4d6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b4da:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800b4de:	f8d7 1504 	ldr.w	r1, [r7, #1284]	@ 0x504
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f001 fb9f 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 800b4e8:	f8d7 0504 	ldr.w	r0, [r7, #1284]	@ 0x504
 800b4ec:	f7ff fb9e 	bl	800ac2c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800b4f6:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 800b4fa:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 800b4fe:	9304      	str	r3, [sp, #16]
 800b500:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b504:	9303      	str	r3, [sp, #12]
 800b506:	9402      	str	r4, [sp, #8]
 800b508:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	4613      	mov	r3, r2
 800b516:	462a      	mov	r2, r5
 800b518:	f000 fbd6 	bl	800bcc8 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>
              tflite::micro::GetTensorShape(output),
 800b51c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b520:	4618      	mov	r0, r3
 800b522:	f7f8 f9d1 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(bias),
 800b526:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7f8 f9cc 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800b530:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b534:	4618      	mov	r0, r3
 800b536:	f7f8 f9c7 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(input),
 800b53a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800b53e:	4618      	mov	r0, r3
 800b540:	f7f8 f9c2 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorData<int8_t>(output));
          break;
 800b544:	e134      	b.n	800b7b0 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x584>
 800b546:	bf00      	nop
 800b548:	0801656c 	.word	0x0801656c
 800b54c:	08016570 	.word	0x08016570
 800b550:	08016574 	.word	0x08016574
 800b554:	08016578 	.word	0x08016578
        }
        case kTfLiteInt8: {
          data.is_per_channel
 800b558:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800b55c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
              ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b560:	f04f 0b00 	mov.w	fp, #0
 800b564:	2200      	movs	r2, #0
 800b566:	617a      	str	r2, [r7, #20]
 800b568:	f04f 0900 	mov.w	r9, #0
 800b56c:	f04f 0800 	mov.w	r8, #0
 800b570:	2200      	movs	r2, #0
 800b572:	613a      	str	r2, [r7, #16]
 800b574:	2200      	movs	r2, #0
 800b576:	60fa      	str	r2, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	60ba      	str	r2, [r7, #8]
 800b57c:	f04f 0a00 	mov.w	sl, #0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d067      	beq.n	800b654 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x428>
                    FullyConnectedParamsQuantized(data),
 800b584:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b588:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 800b58c:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 800b590:	4618      	mov	r0, r3
 800b592:	f001 f8f3 	bl	800c77c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
                    data.per_channel_output_multiplier,
 800b596:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800b59a:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
                    reinterpret_cast<const int*>(data.per_channel_output_shift),
 800b59c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800b5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a2:	607b      	str	r3, [r7, #4]
                    tflite::micro::GetTensorShape(input),
 800b5a4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b5a8:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 800b5ac:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f001 fb38 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b5b6:	f04f 0b01 	mov.w	fp, #1
 800b5ba:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 800b5be:	f7ff fb26 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b5c2:	6038      	str	r0, [r7, #0]
                    tflite::micro::GetTensorData<int8_t>(input),
                    tflite::micro::GetTensorShape(filter),
 800b5c4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b5c8:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800b5cc:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f001 fb28 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	6179      	str	r1, [r7, #20]
 800b5da:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800b5de:	f7ff fb16 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b5e2:	4605      	mov	r5, r0
                    tflite::micro::GetOptionalTensorData<int32_t>(
                        micro_context, bias, bias_comp_td,
                        data.bias_scratch_index),
#else   // USE_TFLM_COMPRESSION
                    tflite::micro::GetTensorData<int8_t>(filter),
                    tflite::micro::GetTensorShape(bias),
 800b5e4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b5e8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b5ec:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f001 fb18 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b5f6:	f04f 0901 	mov.w	r9, #1
 800b5fa:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 800b5fe:	f7ff fbe1 	bl	800adc4 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b602:	4604      	mov	r4, r0
                    tflite::micro::GetOptionalTensorData<int32_t>(bias),
#endif  // USE_TFLM_COMPRESSION
                    tflite::micro::GetTensorShape(output),
 800b604:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b608:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 800b60c:	f8d7 1504 	ldr.w	r1, [r7, #1284]	@ 0x504
 800b610:	4618      	mov	r0, r3
 800b612:	f001 fb08 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b616:	f04f 0801 	mov.w	r8, #1
 800b61a:	f8d7 0504 	ldr.w	r0, [r7, #1284]	@ 0x504
 800b61e:	f7ff fb05 	bl	800ac2c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800b622:	4603      	mov	r3, r0
 800b624:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 800b628:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 800b62c:	9306      	str	r3, [sp, #24]
 800b62e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800b632:	9305      	str	r3, [sp, #20]
 800b634:	9404      	str	r4, [sp, #16]
 800b636:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 800b63a:	9303      	str	r3, [sp, #12]
 800b63c:	9502      	str	r5, [sp, #8]
 800b63e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	6839      	ldr	r1, [r7, #0]
 800b646:	9100      	str	r1, [sp, #0]
 800b648:	4613      	mov	r3, r2
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	4631      	mov	r1, r6
 800b64e:	f000 fc16 	bl	800be7e <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_>
 800b652:	e05b      	b.n	800b70c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x4e0>
                    tflite::micro::GetTensorData<int8_t>(output))
              : tflite::reference_integer_ops::FullyConnected(
                    FullyConnectedParamsQuantized(data),
 800b654:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b658:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b65c:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 800b660:	4618      	mov	r0, r3
 800b662:	f001 f88b 	bl	800c77c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
                    tflite::micro::GetTensorShape(input),
 800b666:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b66a:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 800b66e:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 800b672:	4618      	mov	r0, r3
 800b674:	f001 fad7 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              : tflite::reference_integer_ops::FullyConnected(
 800b678:	2301      	movs	r3, #1
 800b67a:	613b      	str	r3, [r7, #16]
 800b67c:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 800b680:	f7ff fac5 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b684:	4606      	mov	r6, r0
                    tflite::micro::GetTensorData<int8_t>(input),
                    tflite::micro::GetTensorShape(filter),
 800b686:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b68a:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800b68e:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 800b692:	4618      	mov	r0, r3
 800b694:	f001 fac7 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              : tflite::reference_integer_ops::FullyConnected(
 800b698:	2301      	movs	r3, #1
 800b69a:	60fb      	str	r3, [r7, #12]
 800b69c:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800b6a0:	f7ff fab5 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b6a4:	4605      	mov	r5, r0
                    tflite::micro::GetOptionalTensorData<int32_t>(
                        micro_context, bias, bias_comp_td,
                        data.bias_scratch_index),
#else   // USE_TFLM_COMPRESSION
                    tflite::micro::GetTensorData<int8_t>(filter),
                    tflite::micro::GetTensorShape(bias),
 800b6a6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b6aa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800b6ae:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f001 fab7 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              : tflite::reference_integer_ops::FullyConnected(
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	60bb      	str	r3, [r7, #8]
 800b6bc:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 800b6c0:	f7ff fb80 	bl	800adc4 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b6c4:	4604      	mov	r4, r0
                    tflite::micro::GetOptionalTensorData<int32_t>(bias),
#endif  // USE_TFLM_COMPRESSION
                    tflite::micro::GetTensorShape(output),
 800b6c6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b6ca:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800b6ce:	f8d7 1504 	ldr.w	r1, [r7, #1284]	@ 0x504
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 faa7 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              : tflite::reference_integer_ops::FullyConnected(
 800b6d8:	f04f 0a01 	mov.w	sl, #1
 800b6dc:	f8d7 0504 	ldr.w	r0, [r7, #1284]	@ 0x504
 800b6e0:	f7ff faa4 	bl	800ac2c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 800b6ea:	f507 710b 	add.w	r1, r7, #556	@ 0x22c
 800b6ee:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 800b6f2:	9304      	str	r3, [sp, #16]
 800b6f4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800b6f8:	9303      	str	r3, [sp, #12]
 800b6fa:	9402      	str	r4, [sp, #8]
 800b6fc:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	9500      	str	r5, [sp, #0]
 800b704:	4613      	mov	r3, r2
 800b706:	4632      	mov	r2, r6
 800b708:	f000 fade 	bl	800bcc8 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>
                    tflite::micro::GetTensorShape(output),
 800b70c:	f1ba 0f00 	cmp.w	sl, #0
 800b710:	d004      	beq.n	800b71c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x4f0>
 800b712:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800b716:	4618      	mov	r0, r3
 800b718:	f7f8 f8d6 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                    tflite::micro::GetTensorShape(bias),
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d004      	beq.n	800b72c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x500>
 800b722:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 800b726:	4618      	mov	r0, r3
 800b728:	f7f8 f8ce 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                    tflite::micro::GetTensorShape(filter),
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d004      	beq.n	800b73c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x510>
 800b732:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800b736:	4618      	mov	r0, r3
 800b738:	f7f8 f8c6 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                    tflite::micro::GetTensorShape(input),
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d004      	beq.n	800b74c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x520>
 800b742:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 800b746:	4618      	mov	r0, r3
 800b748:	f7f8 f8be 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                    tflite::micro::GetTensorShape(output),
 800b74c:	f1b8 0f00 	cmp.w	r8, #0
 800b750:	d004      	beq.n	800b75c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x530>
 800b752:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800b756:	4618      	mov	r0, r3
 800b758:	f7f8 f8b6 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                    tflite::micro::GetTensorShape(bias),
 800b75c:	f1b9 0f00 	cmp.w	r9, #0
 800b760:	d004      	beq.n	800b76c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x540>
 800b762:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 800b766:	4618      	mov	r0, r3
 800b768:	f7f8 f8ae 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                    tflite::micro::GetTensorShape(filter),
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d004      	beq.n	800b77c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x550>
 800b772:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800b776:	4618      	mov	r0, r3
 800b778:	f7f8 f8a6 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                    tflite::micro::GetTensorShape(input),
 800b77c:	f1bb 0f00 	cmp.w	fp, #0
 800b780:	d015      	beq.n	800b7ae <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x582>
 800b782:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800b786:	4618      	mov	r0, r3
 800b788:	f7f8 f89e 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                    tflite::micro::GetTensorData<int8_t>(output));
          break;
 800b78c:	e00f      	b.n	800b7ae <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x582>
        }
        default: {
          MicroPrintf("Filter type %s (%d) not supported.",
                      TfLiteTypeGetName(filter->type), input->type);
 800b78e:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 800b792:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) not supported.",
 800b794:	4618      	mov	r0, r3
 800b796:	f7f9 f9eb 	bl	8004b70 <TfLiteTypeGetName>
 800b79a:	4601      	mov	r1, r0
                      TfLiteTypeGetName(filter->type), input->type);
 800b79c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800b7a0:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) not supported.",
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4899      	ldr	r0, [pc, #612]	@ (800ba0c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x7e0>)
 800b7a6:	f7ff f97f 	bl	800aaa8 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e268      	b.n	800bc80 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa54>
          break;
 800b7ae:	bf00      	nop
        }
      }
      break;
 800b7b0:	e265      	b.n	800bc7e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa52>
    }

    case kTfLiteInt16: {
      switch (filter->type) {
 800b7b2:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 800b7b6:	7a1b      	ldrb	r3, [r3, #8]
 800b7b8:	2b09      	cmp	r3, #9
 800b7ba:	f040 823e 	bne.w	800bc3a <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa0e>
        case kTfLiteInt8: {
          if (bias == nullptr || bias->type == kTfLiteInt32) {
 800b7be:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d005      	beq.n	800b7d2 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x5a6>
 800b7c6:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 800b7ca:	7a1b      	ldrb	r3, [r3, #8]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	f040 811f 	bne.w	800ba10 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x7e4>
            data.is_per_channel
 800b7d2:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800b7d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b7da:	f04f 0b00 	mov.w	fp, #0
 800b7de:	2200      	movs	r2, #0
 800b7e0:	617a      	str	r2, [r7, #20]
 800b7e2:	f04f 0900 	mov.w	r9, #0
 800b7e6:	f04f 0800 	mov.w	r8, #0
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	613a      	str	r2, [r7, #16]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	60fa      	str	r2, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	60ba      	str	r2, [r7, #8]
 800b7f6:	f04f 0a00 	mov.w	sl, #0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d067      	beq.n	800b8ce <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x6a2>
                      FullyConnectedParamsQuantized(data),
 800b7fe:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b802:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b806:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 ffb6 	bl	800c77c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
                      data.per_channel_output_multiplier,
 800b810:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800b814:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
                      reinterpret_cast<const int*>(
                          data.per_channel_output_shift),
 800b816:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800b81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b81c:	607b      	str	r3, [r7, #4]
                      tflite::micro::GetTensorShape(input),
 800b81e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b822:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800b826:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 f9fb 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b830:	f04f 0b01 	mov.w	fp, #1
 800b834:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 800b838:	f7f8 f8b2 	bl	80039a0 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800b83c:	6038      	str	r0, [r7, #0]
                      tflite::micro::GetTensorData<int16_t>(input),
                      tflite::micro::GetTensorShape(filter),
 800b83e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b842:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800b846:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 800b84a:	4618      	mov	r0, r3
 800b84c:	f001 f9eb 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b850:	2101      	movs	r1, #1
 800b852:	6179      	str	r1, [r7, #20]
 800b854:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800b858:	f7ff f9d9 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b85c:	4605      	mov	r5, r0
                      tflite::micro::GetOptionalTensorData<int32_t>(
                          micro_context, bias, bias_comp_td,
                          data.bias_scratch_index),
#else   // USE_TFLM_COMPRESSION
                      tflite::micro::GetTensorData<int8_t>(filter),
                      tflite::micro::GetTensorShape(bias),
 800b85e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b862:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800b866:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 800b86a:	4618      	mov	r0, r3
 800b86c:	f001 f9db 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b870:	f04f 0901 	mov.w	r9, #1
 800b874:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 800b878:	f7ff faa4 	bl	800adc4 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b87c:	4604      	mov	r4, r0
                      tflite::micro::GetOptionalTensorData<int32_t>(bias),
#endif  // USE_TFLM_COMPRESSION
                      tflite::micro::GetTensorShape(output),
 800b87e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b882:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b886:	f8d7 1504 	ldr.w	r1, [r7, #1284]	@ 0x504
 800b88a:	4618      	mov	r0, r3
 800b88c:	f001 f9cb 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800b890:	f04f 0801 	mov.w	r8, #1
 800b894:	f8d7 0504 	ldr.w	r0, [r7, #1284]	@ 0x504
 800b898:	f7f8 f891 	bl	80039be <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f507 7231 	add.w	r2, r7, #708	@ 0x2c4
 800b8a2:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 800b8a6:	9306      	str	r3, [sp, #24]
 800b8a8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800b8ac:	9305      	str	r3, [sp, #20]
 800b8ae:	9404      	str	r4, [sp, #16]
 800b8b0:	f507 733f 	add.w	r3, r7, #764	@ 0x2fc
 800b8b4:	9303      	str	r3, [sp, #12]
 800b8b6:	9502      	str	r5, [sp, #8]
 800b8b8:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	9100      	str	r1, [sp, #0]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	4631      	mov	r1, r6
 800b8c8:	f000 fbb2 	bl	800c030 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_>
 800b8cc:	e05b      	b.n	800b986 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x75a>
                      tflite::micro::GetTensorData<int16_t>(output))
                : tflite::reference_integer_ops::FullyConnected(
                      FullyConnectedParamsQuantized(data),
 800b8ce:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b8d2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800b8d6:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 ff4e 	bl	800c77c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
                      tflite::micro::GetTensorShape(input),
 800b8e0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b8e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800b8e8:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 f99a 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                : tflite::reference_integer_ops::FullyConnected(
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	613b      	str	r3, [r7, #16]
 800b8f6:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 800b8fa:	f7f8 f851 	bl	80039a0 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800b8fe:	4606      	mov	r6, r0
                      tflite::micro::GetTensorData<int16_t>(input),
                      tflite::micro::GetTensorShape(filter),
 800b900:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b904:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800b908:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 800b90c:	4618      	mov	r0, r3
 800b90e:	f001 f98a 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                : tflite::reference_integer_ops::FullyConnected(
 800b912:	2301      	movs	r3, #1
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800b91a:	f7ff f978 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b91e:	4605      	mov	r5, r0
                      tflite::micro::GetOptionalTensorData<int32_t>(
                          micro_context, bias, bias_comp_td,
                          data.bias_scratch_index),
#else   // USE_TFLM_COMPRESSION
                      tflite::micro::GetTensorData<int8_t>(filter),
                      tflite::micro::GetTensorShape(bias),
 800b920:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b924:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800b928:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 800b92c:	4618      	mov	r0, r3
 800b92e:	f001 f97a 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                : tflite::reference_integer_ops::FullyConnected(
 800b932:	2301      	movs	r3, #1
 800b934:	60bb      	str	r3, [r7, #8]
 800b936:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 800b93a:	f7ff fa43 	bl	800adc4 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b93e:	4604      	mov	r4, r0
                      tflite::micro::GetOptionalTensorData<int32_t>(bias),
#endif  // USE_TFLM_COMPRESSION
                      tflite::micro::GetTensorShape(output),
 800b940:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b944:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800b948:	f8d7 1504 	ldr.w	r1, [r7, #1284]	@ 0x504
 800b94c:	4618      	mov	r0, r3
 800b94e:	f001 f96a 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                : tflite::reference_integer_ops::FullyConnected(
 800b952:	f04f 0a01 	mov.w	sl, #1
 800b956:	f8d7 0504 	ldr.w	r0, [r7, #1284]	@ 0x504
 800b95a:	f7f8 f830 	bl	80039be <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800b95e:	4603      	mov	r3, r0
 800b960:	f507 725e 	add.w	r2, r7, #888	@ 0x378
 800b964:	f507 7157 	add.w	r1, r7, #860	@ 0x35c
 800b968:	f507 704d 	add.w	r0, r7, #820	@ 0x334
 800b96c:	9304      	str	r3, [sp, #16]
 800b96e:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 800b972:	9303      	str	r3, [sp, #12]
 800b974:	9402      	str	r4, [sp, #8]
 800b976:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	9500      	str	r5, [sp, #0]
 800b97e:	4613      	mov	r3, r2
 800b980:	4632      	mov	r2, r6
 800b982:	f000 fc2e 	bl	800c1e2 <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>
                      tflite::micro::GetTensorShape(output),
 800b986:	f1ba 0f00 	cmp.w	sl, #0
 800b98a:	d004      	beq.n	800b996 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x76a>
 800b98c:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 800b990:	4618      	mov	r0, r3
 800b992:	f7f7 ff99 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(bias),
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d004      	beq.n	800b9a6 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x77a>
 800b99c:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7f7 ff91 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(filter),
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d004      	beq.n	800b9b6 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x78a>
 800b9ac:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7f7 ff89 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(input),
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x79a>
 800b9bc:	f507 7357 	add.w	r3, r7, #860	@ 0x35c
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7f7 ff81 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(output),
 800b9c6:	f1b8 0f00 	cmp.w	r8, #0
 800b9ca:	d004      	beq.n	800b9d6 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x7aa>
 800b9cc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7f7 ff79 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(bias),
 800b9d6:	f1b9 0f00 	cmp.w	r9, #0
 800b9da:	d004      	beq.n	800b9e6 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x7ba>
 800b9dc:	f507 733f 	add.w	r3, r7, #764	@ 0x2fc
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7f7 ff71 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(filter),
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d004      	beq.n	800b9f6 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x7ca>
 800b9ec:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7f7 ff69 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(input),
 800b9f6:	f1bb 0f00 	cmp.w	fp, #0
 800b9fa:	f000 811c 	beq.w	800bc36 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa0a>
 800b9fe:	f507 7331 	add.w	r3, r7, #708	@ 0x2c4
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f7 ff60 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800ba08:	e115      	b.n	800bc36 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa0a>
 800ba0a:	bf00      	nop
 800ba0c:	08015c70 	.word	0x08015c70
                      tflite::micro::GetTensorData<int16_t>(output));
          } else if (bias->type == kTfLiteInt64) {
 800ba10:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 800ba14:	7a1b      	ldrb	r3, [r3, #8]
 800ba16:	2b04      	cmp	r3, #4
 800ba18:	f040 811f 	bne.w	800bc5a <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa2e>
            data.is_per_channel
 800ba1c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800ba20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800ba24:	f04f 0b00 	mov.w	fp, #0
 800ba28:	2200      	movs	r2, #0
 800ba2a:	617a      	str	r2, [r7, #20]
 800ba2c:	f04f 0900 	mov.w	r9, #0
 800ba30:	f04f 0800 	mov.w	r8, #0
 800ba34:	2200      	movs	r2, #0
 800ba36:	613a      	str	r2, [r7, #16]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	60fa      	str	r2, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	60ba      	str	r2, [r7, #8]
 800ba40:	f04f 0a00 	mov.w	sl, #0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d063      	beq.n	800bb10 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x8e4>
                      FullyConnectedParamsQuantized(data),
 800ba48:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800ba4c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ba50:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 800ba54:	4618      	mov	r0, r3
 800ba56:	f000 fe91 	bl	800c77c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
                      data.per_channel_output_multiplier,
 800ba5a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800ba5e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
                      reinterpret_cast<const int*>(
                          data.per_channel_output_shift),
 800ba60:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800ba64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba66:	607b      	str	r3, [r7, #4]
                      tflite::micro::GetTensorShape(input),
 800ba68:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800ba6c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800ba70:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 800ba74:	4618      	mov	r0, r3
 800ba76:	f001 f8d6 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800ba7a:	f04f 0b01 	mov.w	fp, #1
 800ba7e:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 800ba82:	f7f7 ff8d 	bl	80039a0 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800ba86:	6038      	str	r0, [r7, #0]
                      tflite::micro::GetTensorData<int16_t>(input),
                      tflite::micro::GetTensorShape(filter),
 800ba88:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800ba8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba90:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 800ba94:	4618      	mov	r0, r3
 800ba96:	f001 f8c6 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	6179      	str	r1, [r7, #20]
 800ba9e:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800baa2:	f7ff f8b4 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800baa6:	4605      	mov	r5, r0
                      tflite::micro::GetOptionalTensorData<int64_t>(
                          micro_context, bias, bias_comp_td,
                          data.bias_scratch_index),
#else   // USE_TFLM_COMPRESSION
                      tflite::micro::GetTensorData<int8_t>(filter),
                      tflite::micro::GetTensorShape(bias),
 800baa8:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 800baac:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 800bab0:	4618      	mov	r0, r3
 800bab2:	f001 f8b8 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800bab6:	f04f 0901 	mov.w	r9, #1
 800baba:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 800babe:	f7ff f992 	bl	800ade6 <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 800bac2:	4604      	mov	r4, r0
                      tflite::micro::GetOptionalTensorData<int64_t>(bias),
#endif  // USE_TFLM_COMPRESSION
                      tflite::micro::GetTensorShape(output),
 800bac4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800bac8:	f8d7 1504 	ldr.w	r1, [r7, #1284]	@ 0x504
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 f8aa 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800bad2:	f04f 0801 	mov.w	r8, #1
 800bad6:	f8d7 0504 	ldr.w	r0, [r7, #1284]	@ 0x504
 800bada:	f7f7 ff70 	bl	80039be <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800bade:	4603      	mov	r3, r0
 800bae0:	f507 727d 	add.w	r2, r7, #1012	@ 0x3f4
 800bae4:	f507 7073 	add.w	r0, r7, #972	@ 0x3cc
 800bae8:	9306      	str	r3, [sp, #24]
 800baea:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800baee:	9305      	str	r3, [sp, #20]
 800baf0:	9404      	str	r4, [sp, #16]
 800baf2:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 800baf6:	9303      	str	r3, [sp, #12]
 800baf8:	9502      	str	r5, [sp, #8]
 800bafa:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	9100      	str	r1, [sp, #0]
 800bb04:	4613      	mov	r3, r2
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	4631      	mov	r1, r6
 800bb0a:	f000 fc45 	bl	800c398 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_>
 800bb0e:	e051      	b.n	800bbb4 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x988>
                      tflite::micro::GetTensorData<int16_t>(output))
                : tflite::reference_integer_ops::FullyConnected(
                      FullyConnectedParamsQuantized(data),
 800bb10:	f207 4364 	addw	r3, r7, #1124	@ 0x464
 800bb14:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 fe2f 	bl	800c77c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
                      tflite::micro::GetTensorShape(input),
 800bb1e:	f207 438c 	addw	r3, r7, #1164	@ 0x48c
 800bb22:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 800bb26:	4618      	mov	r0, r3
 800bb28:	f001 f87d 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                : tflite::reference_integer_ops::FullyConnected(
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	613b      	str	r3, [r7, #16]
 800bb30:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 800bb34:	f7f7 ff34 	bl	80039a0 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800bb38:	4606      	mov	r6, r0
                      tflite::micro::GetTensorData<int16_t>(input),
                      tflite::micro::GetTensorShape(filter),
 800bb3a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800bb3e:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 800bb42:	4618      	mov	r0, r3
 800bb44:	f001 f86f 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                : tflite::reference_integer_ops::FullyConnected(
 800bb48:	2301      	movs	r3, #1
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800bb50:	f7ff f85d 	bl	800ac0e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800bb54:	4605      	mov	r5, r0
                      tflite::micro::GetOptionalTensorData<int64_t>(
                          micro_context, bias, bias_comp_td,
                          data.bias_scratch_index),
#else   // USE_TFLM_COMPRESSION
                      tflite::micro::GetTensorData<int8_t>(filter),
                      tflite::micro::GetTensorShape(bias),
 800bb56:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 800bb5a:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f001 f861 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                : tflite::reference_integer_ops::FullyConnected(
 800bb64:	2301      	movs	r3, #1
 800bb66:	60bb      	str	r3, [r7, #8]
 800bb68:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 800bb6c:	f7ff f93b 	bl	800ade6 <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 800bb70:	4604      	mov	r4, r0
                      tflite::micro::GetOptionalTensorData<int64_t>(bias),
#endif  // USE_TFLM_COMPRESSION
                      tflite::micro::GetTensorShape(output),
 800bb72:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800bb76:	f8d7 1504 	ldr.w	r1, [r7, #1284]	@ 0x504
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f001 f853 	bl	800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                : tflite::reference_integer_ops::FullyConnected(
 800bb80:	f04f 0a01 	mov.w	sl, #1
 800bb84:	f8d7 0504 	ldr.w	r0, [r7, #1284]	@ 0x504
 800bb88:	f7f7 ff19 	bl	80039be <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	f507 6295 	add.w	r2, r7, #1192	@ 0x4a8
 800bb92:	f207 418c 	addw	r1, r7, #1164	@ 0x48c
 800bb96:	f207 4064 	addw	r0, r7, #1124	@ 0x464
 800bb9a:	9304      	str	r3, [sp, #16]
 800bb9c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800bba0:	9303      	str	r3, [sp, #12]
 800bba2:	9402      	str	r4, [sp, #8]
 800bba4:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 800bba8:	9301      	str	r3, [sp, #4]
 800bbaa:	9500      	str	r5, [sp, #0]
 800bbac:	4613      	mov	r3, r2
 800bbae:	4632      	mov	r2, r6
 800bbb0:	f000 fcea 	bl	800c588 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>
                      tflite::micro::GetTensorShape(output),
 800bbb4:	f1ba 0f00 	cmp.w	sl, #0
 800bbb8:	d004      	beq.n	800bbc4 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x998>
 800bbba:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7f7 fe82 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(bias),
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d004      	beq.n	800bbd4 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x9a8>
 800bbca:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7f7 fe7a 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(filter),
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d004      	beq.n	800bbe4 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x9b8>
 800bbda:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7f7 fe72 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(input),
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d004      	beq.n	800bbf4 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x9c8>
 800bbea:	f207 438c 	addw	r3, r7, #1164	@ 0x48c
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7f7 fe6a 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(output),
 800bbf4:	f1b8 0f00 	cmp.w	r8, #0
 800bbf8:	d004      	beq.n	800bc04 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x9d8>
 800bbfa:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7f7 fe62 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(bias),
 800bc04:	f1b9 0f00 	cmp.w	r9, #0
 800bc08:	d004      	beq.n	800bc14 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x9e8>
 800bc0a:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7f7 fe5a 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(filter),
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d004      	beq.n	800bc24 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x9f8>
 800bc1a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7f7 fe52 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorShape(input),
 800bc24:	f1bb 0f00 	cmp.w	fp, #0
 800bc28:	d017      	beq.n	800bc5a <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa2e>
 800bc2a:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7f7 fe4a 	bl	80038c8 <_ZN6tflite12RuntimeShapeD1Ev>
                      tflite::micro::GetTensorData<int16_t>(output));
          }
          break;
 800bc34:	e011      	b.n	800bc5a <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa2e>
                ? tflite::reference_integer_ops::FullyConnectedPerChannel(
 800bc36:	bf00      	nop
          break;
 800bc38:	e00f      	b.n	800bc5a <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa2e>
        }
        default: {
          MicroPrintf("Filter type %s (%d) not supported.",
                      TfLiteTypeGetName(filter->type), input->type);
 800bc3a:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 800bc3e:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) not supported.",
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7f8 ff95 	bl	8004b70 <TfLiteTypeGetName>
 800bc46:	4601      	mov	r1, r0
                      TfLiteTypeGetName(filter->type), input->type);
 800bc48:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800bc4c:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) not supported.",
 800bc4e:	461a      	mov	r2, r3
 800bc50:	480e      	ldr	r0, [pc, #56]	@ (800bc8c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa60>)
 800bc52:	f7fe ff29 	bl	800aaa8 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e012      	b.n	800bc80 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa54>
          break;
 800bc5a:	bf00      	nop
        }
      }
      break;
 800bc5c:	e00f      	b.n	800bc7e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa52>
    }

    default: {
      MicroPrintf("Input type %s (%d) not supported.",
                  TfLiteTypeGetName(input->type), input->type);
 800bc5e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800bc62:	7a1b      	ldrb	r3, [r3, #8]
      MicroPrintf("Input type %s (%d) not supported.",
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7f8 ff83 	bl	8004b70 <TfLiteTypeGetName>
 800bc6a:	4601      	mov	r1, r0
                  TfLiteTypeGetName(input->type), input->type);
 800bc6c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800bc70:	7a1b      	ldrb	r3, [r3, #8]
      MicroPrintf("Input type %s (%d) not supported.",
 800bc72:	461a      	mov	r2, r3
 800bc74:	4806      	ldr	r0, [pc, #24]	@ (800bc90 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa64>)
 800bc76:	f7fe ff17 	bl	800aaa8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e000      	b.n	800bc80 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xa54>
    }
  }
  return kTfLiteOk;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	f207 571c 	addw	r7, r7, #1308	@ 0x51c
 800bc86:	46bd      	mov	sp, r7
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8c:	08015c70 	.word	0x08015c70
 800bc90:	08015c94 	.word	0x08015c94

0800bc94 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TFLMRegistration Register_FULLY_CONNECTED() {
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af02      	add	r7, sp, #8
 800bc9a:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(FullyConnectedInit, FullyConnectedPrepare,
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	2300      	movs	r3, #0
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	2300      	movs	r3, #0
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	4b05      	ldr	r3, [pc, #20]	@ (800bcbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 800bca8:	4a05      	ldr	r2, [pc, #20]	@ (800bcc0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 800bcaa:	4906      	ldr	r1, [pc, #24]	@ (800bcc4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x30>)
 800bcac:	f000 ff38 	bl	800cb20 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
                                   FullyConnectedEval);
 800bcb0:	bf00      	nop
}
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	0800b22d 	.word	0x0800b22d
 800bcc0:	0800afd1 	.word	0x0800afd1
 800bcc4:	0800afa3 	.word	0x0800afa3

0800bcc8 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>:
  }
}

template <typename InputType, typename WeightType, typename OutputType,
          typename BiasType>
void FullyConnected(const FullyConnectedParams& params,
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b098      	sub	sp, #96	@ 0x60
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	603b      	str	r3, [r7, #0]
                    const InputType* input_data,
                    const RuntimeShape& filter_shape,
                    const WeightType* filter_data,
                    const RuntimeShape& bias_shape, const BiasType* bias_data,
                    const RuntimeShape& output_shape, OutputType* output_data) {
  const int32_t input_offset = params.input_offset;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const int32_t filter_offset = params.weights_offset;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  const int32_t output_offset = params.output_offset;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	647b      	str	r3, [r7, #68]	@ 0x44
  const int32_t output_multiplier = params.output_multiplier;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	643b      	str	r3, [r7, #64]	@ 0x40
  const int output_shift = params.output_shift;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const int32_t output_activation_min = params.quantized_activation_min;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	695b      	ldr	r3, [r3, #20]
 800bcf8:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	699b      	ldr	r3, [r3, #24]
 800bcfe:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800bd00:	6838      	ldr	r0, [r7, #0]
 800bd02:	f7f7 fdec 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	dc01      	bgt.n	800bd10 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x48>
 800bd0c:	f001 ff56 	bl	800dbbc <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800bd10:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800bd12:	f7f7 fde4 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	dc01      	bgt.n	800bd20 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x58>
 800bd1c:	f001 ff4e 	bl	800dbbc <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800bd20:	69fa      	ldr	r2, [r7, #28]
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	dd01      	ble.n	800bd2c <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x64>
 800bd28:	f001 ff48 	bl	800dbbc <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800bd2c:	6838      	ldr	r0, [r7, #0]
 800bd2e:	f7f7 fdd6 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bd32:	63b8      	str	r0, [r7, #56]	@ 0x38
  const int output_dim_count = output_shape.DimensionsCount();
 800bd34:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800bd36:	f7f7 fdd2 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bd3a:	6378      	str	r0, [r7, #52]	@ 0x34
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800bd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	4619      	mov	r1, r3
 800bd42:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800bd44:	f7ff f860 	bl	800ae08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800bd48:	6338      	str	r0, [r7, #48]	@ 0x30
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800bd4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800bd52:	f7f7 fdd0 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bd56:	62f8      	str	r0, [r7, #44]	@ 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800bd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5a:	3b02      	subs	r3, #2
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6838      	ldr	r0, [r7, #0]
 800bd60:	f7f7 fdc9 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bd64:	4602      	mov	r2, r0
 800bd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	dd01      	ble.n	800bd70 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xa8>
 800bd6c:	f001 ff26 	bl	800dbbc <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800bd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd72:	3b01      	subs	r3, #1
 800bd74:	4619      	mov	r1, r3
 800bd76:	6838      	ldr	r0, [r7, #0]
 800bd78:	f7f7 fdbd 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bd7c:	62b8      	str	r0, [r7, #40]	@ 0x28
  for (int b = 0; b < batches; ++b) {
 800bd7e:	2300      	movs	r3, #0
 800bd80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd82:	e073      	b.n	800be6c <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x1a4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800bd84:	2300      	movs	r3, #0
 800bd86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd88:	e069      	b.n	800be5e <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x196>
      BiasType acc = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	657b      	str	r3, [r7, #84]	@ 0x54
      for (int d = 0; d < accum_depth; ++d) {
 800bd8e:	2300      	movs	r3, #0
 800bd90:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd92:	e025      	b.n	800bde0 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x118>
        int32_t input_val = input_data[b * accum_depth + d];
 800bd94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd98:	fb03 f202 	mul.w	r2, r3, r2
 800bd9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd9e:	4413      	add	r3, r2
 800bda0:	461a      	mov	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4413      	add	r3, r2
 800bda6:	f993 3000 	ldrsb.w	r3, [r3]
 800bdaa:	627b      	str	r3, [r7, #36]	@ 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800bdac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdb0:	fb03 f202 	mul.w	r2, r3, r2
 800bdb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdb6:	4413      	add	r3, r2
 800bdb8:	461a      	mov	r2, r3
 800bdba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdbc:	4413      	add	r3, r2
 800bdbe:	f993 3000 	ldrsb.w	r3, [r3]
 800bdc2:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800bdc4:	6a3a      	ldr	r2, [r7, #32]
 800bdc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdc8:	4413      	add	r3, r2
 800bdca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bdce:	440a      	add	r2, r1
 800bdd0:	fb02 f303 	mul.w	r3, r2, r3
 800bdd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bdd6:	4413      	add	r3, r2
 800bdd8:	657b      	str	r3, [r7, #84]	@ 0x54
      for (int d = 0; d < accum_depth; ++d) {
 800bdda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bddc:	3301      	adds	r3, #1
 800bdde:	653b      	str	r3, [r7, #80]	@ 0x50
 800bde0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde4:	429a      	cmp	r2, r3
 800bde6:	dbd5      	blt.n	800bd94 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xcc>
      }
      if (bias_data) {
 800bde8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d007      	beq.n	800bdfe <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x136>
        acc += bias_data[out_c];
 800bdee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bdf4:	4413      	add	r3, r2
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bdfa:	4413      	add	r3, r2
 800bdfc:	657b      	str	r3, [r7, #84]	@ 0x54
      }
      int32_t acc_scaled =
          MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800bdfe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800be00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be02:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800be04:	f7f8 ffdc 	bl	8004dc0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800be08:	4603      	mov	r3, r0
      int32_t acc_scaled =
 800be0a:	617b      	str	r3, [r7, #20]
      acc_scaled += output_offset;
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be10:	4413      	add	r3, r2
 800be12:	617b      	str	r3, [r7, #20]
      acc_scaled = std::max(acc_scaled, output_activation_min);
 800be14:	f107 021c 	add.w	r2, r7, #28
 800be18:	f107 0314 	add.w	r3, r7, #20
 800be1c:	4611      	mov	r1, r2
 800be1e:	4618      	mov	r0, r3
 800be20:	f7f9 fb2b 	bl	800547a <_ZSt3maxIlERKT_S2_S2_>
 800be24:	4603      	mov	r3, r0
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	617b      	str	r3, [r7, #20]
      acc_scaled = std::min(acc_scaled, output_activation_max);
 800be2a:	f107 0218 	add.w	r2, r7, #24
 800be2e:	f107 0314 	add.w	r3, r7, #20
 800be32:	4611      	mov	r1, r2
 800be34:	4618      	mov	r0, r3
 800be36:	f7f9 fb34 	bl	80054a2 <_ZSt3minIlERKT_S2_S2_>
 800be3a:	4603      	mov	r3, r0
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] =
 800be40:	6979      	ldr	r1, [r7, #20]
 800be42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800be46:	fb03 f202 	mul.w	r2, r3, r2
 800be4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be4c:	4413      	add	r3, r2
 800be4e:	461a      	mov	r2, r3
 800be50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be52:	4413      	add	r3, r2
 800be54:	b24a      	sxtb	r2, r1
 800be56:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800be58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be5a:	3301      	adds	r3, #1
 800be5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be62:	429a      	cmp	r2, r3
 800be64:	db91      	blt.n	800bd8a <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xc2>
  for (int b = 0; b < batches; ++b) {
 800be66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be68:	3301      	adds	r3, #1
 800be6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800be6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be70:	429a      	cmp	r2, r3
 800be72:	db87      	blt.n	800bd84 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xbc>
          static_cast<OutputType>(acc_scaled);
    }
  }
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop
 800be78:	3760      	adds	r7, #96	@ 0x60
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_>:
void FullyConnectedPerChannel(
 800be7e:	b580      	push	{r7, lr}
 800be80:	b094      	sub	sp, #80	@ 0x50
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
 800be8a:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const int32_t output_offset = params.output_offset;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	63bb      	str	r3, [r7, #56]	@ 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	699b      	ldr	r3, [r3, #24]
 800bea2:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800bea4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800bea6:	f7f7 fd1a 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b01      	cmp	r3, #1
 800beae:	dc01      	bgt.n	800beb4 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x36>
 800beb0:	f001 fe84 	bl	800dbbc <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800beb4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800beb6:	f7f7 fd12 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	dc01      	bgt.n	800bec4 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x46>
 800bec0:	f001 fe7c 	bl	800dbbc <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800bec4:	69ba      	ldr	r2, [r7, #24]
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	429a      	cmp	r2, r3
 800beca:	dd01      	ble.n	800bed0 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x52>
 800becc:	f001 fe76 	bl	800dbbc <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800bed0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800bed2:	f7f7 fd04 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bed6:	6378      	str	r0, [r7, #52]	@ 0x34
  const int output_dim_count = output_shape.DimensionsCount();
 800bed8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800beda:	f7f7 fd00 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bede:	6338      	str	r0, [r7, #48]	@ 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800bee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee2:	3b01      	subs	r3, #1
 800bee4:	4619      	mov	r1, r3
 800bee6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bee8:	f7fe ff8e 	bl	800ae08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800beec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800beee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef0:	3b01      	subs	r3, #1
 800bef2:	4619      	mov	r1, r3
 800bef4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bef6:	f7f7 fcfe 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800befa:	62b8      	str	r0, [r7, #40]	@ 0x28
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800befc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800befe:	3b02      	subs	r3, #2
 800bf00:	4619      	mov	r1, r3
 800bf02:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800bf04:	f7f7 fcf7 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	dd01      	ble.n	800bf14 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x96>
 800bf10:	f001 fe54 	bl	800dbbc <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800bf14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf16:	3b01      	subs	r3, #1
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800bf1c:	f7f7 fceb 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf20:	6278      	str	r0, [r7, #36]	@ 0x24
  for (int b = 0; b < batches; ++b) {
 800bf22:	2300      	movs	r3, #0
 800bf24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf26:	e07a      	b.n	800c01e <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800bf28:	2300      	movs	r3, #0
 800bf2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf2c:	e070      	b.n	800c010 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x192>
      BiasType acc = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	647b      	str	r3, [r7, #68]	@ 0x44
      for (int d = 0; d < accum_depth; ++d) {
 800bf32:	2300      	movs	r3, #0
 800bf34:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf36:	e023      	b.n	800bf80 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x102>
        int32_t input_val = input_data[b * accum_depth + d];
 800bf38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf3c:	fb03 f202 	mul.w	r2, r3, r2
 800bf40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf42:	4413      	add	r3, r2
 800bf44:	461a      	mov	r2, r3
 800bf46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf48:	4413      	add	r3, r2
 800bf4a:	f993 3000 	ldrsb.w	r3, [r3]
 800bf4e:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800bf50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf54:	fb03 f202 	mul.w	r2, r3, r2
 800bf58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf5a:	4413      	add	r3, r2
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf60:	4413      	add	r3, r2
 800bf62:	f993 3000 	ldrsb.w	r3, [r3]
 800bf66:	61fb      	str	r3, [r7, #28]
        acc += filter_val * (input_val + input_offset);
 800bf68:	6a3a      	ldr	r2, [r7, #32]
 800bf6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf6c:	4413      	add	r3, r2
 800bf6e:	69fa      	ldr	r2, [r7, #28]
 800bf70:	fb02 f303 	mul.w	r3, r2, r3
 800bf74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf76:	4413      	add	r3, r2
 800bf78:	647b      	str	r3, [r7, #68]	@ 0x44
      for (int d = 0; d < accum_depth; ++d) {
 800bf7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf84:	429a      	cmp	r2, r3
 800bf86:	dbd7      	blt.n	800bf38 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xba>
      if (bias_data) {
 800bf88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x120>
        acc += bias_data[out_c];
 800bf8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bf94:	4413      	add	r3, r2
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf9a:	4413      	add	r3, r2
 800bf9c:	647b      	str	r3, [r7, #68]	@ 0x44
          acc, output_multiplier[out_c], output_shift[out_c]);
 800bf9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	4413      	add	r3, r2
      int32_t acc_scaled = MultiplyByQuantizedMultiplier(
 800bfa6:	6819      	ldr	r1, [r3, #0]
          acc, output_multiplier[out_c], output_shift[out_c]);
 800bfa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	4413      	add	r3, r2
      int32_t acc_scaled = MultiplyByQuantizedMultiplier(
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bfb6:	f7f8 ff03 	bl	8004dc0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	613b      	str	r3, [r7, #16]
      acc_scaled += output_offset;
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc2:	4413      	add	r3, r2
 800bfc4:	613b      	str	r3, [r7, #16]
      acc_scaled = std::max(acc_scaled, output_activation_min);
 800bfc6:	f107 0218 	add.w	r2, r7, #24
 800bfca:	f107 0310 	add.w	r3, r7, #16
 800bfce:	4611      	mov	r1, r2
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7f9 fa52 	bl	800547a <_ZSt3maxIlERKT_S2_S2_>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	613b      	str	r3, [r7, #16]
      acc_scaled = std::min(acc_scaled, output_activation_max);
 800bfdc:	f107 0214 	add.w	r2, r7, #20
 800bfe0:	f107 0310 	add.w	r3, r7, #16
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7f9 fa5b 	bl	80054a2 <_ZSt3minIlERKT_S2_S2_>
 800bfec:	4603      	mov	r3, r0
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] =
 800bff2:	6939      	ldr	r1, [r7, #16]
 800bff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bff8:	fb03 f202 	mul.w	r2, r3, r2
 800bffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bffe:	4413      	add	r3, r2
 800c000:	461a      	mov	r2, r3
 800c002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c004:	4413      	add	r3, r2
 800c006:	b24a      	sxtb	r2, r1
 800c008:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c00a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c00c:	3301      	adds	r3, #1
 800c00e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c014:	429a      	cmp	r2, r3
 800c016:	db8a      	blt.n	800bf2e <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xb0>
  for (int b = 0; b < batches; ++b) {
 800c018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c01a:	3301      	adds	r3, #1
 800c01c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c01e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c022:	429a      	cmp	r2, r3
 800c024:	db80      	blt.n	800bf28 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIaaalEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xaa>
}
 800c026:	bf00      	nop
 800c028:	bf00      	nop
 800c02a:	3750      	adds	r7, #80	@ 0x50
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_>:
void FullyConnectedPerChannel(
 800c030:	b580      	push	{r7, lr}
 800c032:	b094      	sub	sp, #80	@ 0x50
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
 800c03c:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const int32_t output_offset = params.output_offset;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	63bb      	str	r3, [r7, #56]	@ 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	699b      	ldr	r3, [r3, #24]
 800c054:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800c056:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800c058:	f7f7 fc41 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b01      	cmp	r3, #1
 800c060:	dc01      	bgt.n	800c066 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x36>
 800c062:	f001 fdab 	bl	800dbbc <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800c066:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c068:	f7f7 fc39 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	dc01      	bgt.n	800c076 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x46>
 800c072:	f001 fda3 	bl	800dbbc <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800c076:	69ba      	ldr	r2, [r7, #24]
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	dd01      	ble.n	800c082 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x52>
 800c07e:	f001 fd9d 	bl	800dbbc <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800c082:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800c084:	f7f7 fc2b 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c088:	6378      	str	r0, [r7, #52]	@ 0x34
  const int output_dim_count = output_shape.DimensionsCount();
 800c08a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c08c:	f7f7 fc27 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c090:	6338      	str	r0, [r7, #48]	@ 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800c092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c094:	3b01      	subs	r3, #1
 800c096:	4619      	mov	r1, r3
 800c098:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c09a:	f7fe feb5 	bl	800ae08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800c09e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0a8:	f7f7 fc25 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c0ac:	62b8      	str	r0, [r7, #40]	@ 0x28
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800c0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0b0:	3b02      	subs	r3, #2
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800c0b6:	f7f7 fc1e 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	dd01      	ble.n	800c0c6 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x96>
 800c0c2:	f001 fd7b 	bl	800dbbc <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800c0c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800c0ce:	f7f7 fc12 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c0d2:	6278      	str	r0, [r7, #36]	@ 0x24
  for (int b = 0; b < batches; ++b) {
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0d8:	e07a      	b.n	800c1d0 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c0da:	2300      	movs	r3, #0
 800c0dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0de:	e070      	b.n	800c1c2 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x192>
      BiasType acc = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	647b      	str	r3, [r7, #68]	@ 0x44
      for (int d = 0; d < accum_depth; ++d) {
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0e8:	e023      	b.n	800c132 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x102>
        int32_t input_val = input_data[b * accum_depth + d];
 800c0ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0ee:	fb03 f202 	mul.w	r2, r3, r2
 800c0f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0f4:	4413      	add	r3, r2
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c100:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800c102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c106:	fb03 f202 	mul.w	r2, r3, r2
 800c10a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c10c:	4413      	add	r3, r2
 800c10e:	461a      	mov	r2, r3
 800c110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c112:	4413      	add	r3, r2
 800c114:	f993 3000 	ldrsb.w	r3, [r3]
 800c118:	61fb      	str	r3, [r7, #28]
        acc += filter_val * (input_val + input_offset);
 800c11a:	6a3a      	ldr	r2, [r7, #32]
 800c11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c11e:	4413      	add	r3, r2
 800c120:	69fa      	ldr	r2, [r7, #28]
 800c122:	fb02 f303 	mul.w	r3, r2, r3
 800c126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c128:	4413      	add	r3, r2
 800c12a:	647b      	str	r3, [r7, #68]	@ 0x44
      for (int d = 0; d < accum_depth; ++d) {
 800c12c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c12e:	3301      	adds	r3, #1
 800c130:	643b      	str	r3, [r7, #64]	@ 0x40
 800c132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c136:	429a      	cmp	r2, r3
 800c138:	dbd7      	blt.n	800c0ea <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xba>
      if (bias_data) {
 800c13a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d007      	beq.n	800c150 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x120>
        acc += bias_data[out_c];
 800c140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c146:	4413      	add	r3, r2
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c14c:	4413      	add	r3, r2
 800c14e:	647b      	str	r3, [r7, #68]	@ 0x44
          acc, output_multiplier[out_c], output_shift[out_c]);
 800c150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	4413      	add	r3, r2
      int32_t acc_scaled = MultiplyByQuantizedMultiplier(
 800c158:	6819      	ldr	r1, [r3, #0]
          acc, output_multiplier[out_c], output_shift[out_c]);
 800c15a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	4413      	add	r3, r2
      int32_t acc_scaled = MultiplyByQuantizedMultiplier(
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	461a      	mov	r2, r3
 800c166:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c168:	f7f8 fe2a 	bl	8004dc0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800c16c:	4603      	mov	r3, r0
 800c16e:	613b      	str	r3, [r7, #16]
      acc_scaled += output_offset;
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c174:	4413      	add	r3, r2
 800c176:	613b      	str	r3, [r7, #16]
      acc_scaled = std::max(acc_scaled, output_activation_min);
 800c178:	f107 0218 	add.w	r2, r7, #24
 800c17c:	f107 0310 	add.w	r3, r7, #16
 800c180:	4611      	mov	r1, r2
 800c182:	4618      	mov	r0, r3
 800c184:	f7f9 f979 	bl	800547a <_ZSt3maxIlERKT_S2_S2_>
 800c188:	4603      	mov	r3, r0
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	613b      	str	r3, [r7, #16]
      acc_scaled = std::min(acc_scaled, output_activation_max);
 800c18e:	f107 0214 	add.w	r2, r7, #20
 800c192:	f107 0310 	add.w	r3, r7, #16
 800c196:	4611      	mov	r1, r2
 800c198:	4618      	mov	r0, r3
 800c19a:	f7f9 f982 	bl	80054a2 <_ZSt3minIlERKT_S2_S2_>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] =
 800c1a4:	6939      	ldr	r1, [r7, #16]
 800c1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c1aa:	fb03 f202 	mul.w	r2, r3, r2
 800c1ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1b0:	4413      	add	r3, r2
 800c1b2:	005b      	lsls	r3, r3, #1
 800c1b4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c1b6:	4413      	add	r3, r2
 800c1b8:	b20a      	sxth	r2, r1
 800c1ba:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c1bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1be:	3301      	adds	r3, #1
 800c1c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	db8a      	blt.n	800c0e0 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xb0>
  for (int b = 0; b < batches; ++b) {
 800c1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	db80      	blt.n	800c0da <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsaslEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xaa>
}
 800c1d8:	bf00      	nop
 800c1da:	bf00      	nop
 800c1dc:	3750      	adds	r7, #80	@ 0x50
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>:
void FullyConnected(const FullyConnectedParams& params,
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b098      	sub	sp, #96	@ 0x60
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	60f8      	str	r0, [r7, #12]
 800c1ea:	60b9      	str	r1, [r7, #8]
 800c1ec:	607a      	str	r2, [r7, #4]
 800c1ee:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const int32_t filter_offset = params.weights_offset;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  const int32_t output_offset = params.output_offset;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	647b      	str	r3, [r7, #68]	@ 0x44
  const int32_t output_multiplier = params.output_multiplier;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	643b      	str	r3, [r7, #64]	@ 0x40
  const int output_shift = params.output_shift;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const int32_t output_activation_min = params.quantized_activation_min;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800c21a:	6838      	ldr	r0, [r7, #0]
 800c21c:	f7f7 fb5f 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c220:	4603      	mov	r3, r0
 800c222:	2b01      	cmp	r3, #1
 800c224:	dc01      	bgt.n	800c22a <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x48>
 800c226:	f001 fcc9 	bl	800dbbc <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800c22a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800c22c:	f7f7 fb57 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	dc01      	bgt.n	800c23a <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x58>
 800c236:	f001 fcc1 	bl	800dbbc <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800c23a:	69fa      	ldr	r2, [r7, #28]
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	429a      	cmp	r2, r3
 800c240:	dd01      	ble.n	800c246 <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x64>
 800c242:	f001 fcbb 	bl	800dbbc <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800c246:	6838      	ldr	r0, [r7, #0]
 800c248:	f7f7 fb49 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c24c:	63b8      	str	r0, [r7, #56]	@ 0x38
  const int output_dim_count = output_shape.DimensionsCount();
 800c24e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800c250:	f7f7 fb45 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c254:	6378      	str	r0, [r7, #52]	@ 0x34
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800c256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c258:	3b01      	subs	r3, #1
 800c25a:	4619      	mov	r1, r3
 800c25c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800c25e:	f7fe fdd3 	bl	800ae08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800c262:	6338      	str	r0, [r7, #48]	@ 0x30
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800c264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c266:	3b01      	subs	r3, #1
 800c268:	4619      	mov	r1, r3
 800c26a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800c26c:	f7f7 fb43 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c270:	62f8      	str	r0, [r7, #44]	@ 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800c272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c274:	3b02      	subs	r3, #2
 800c276:	4619      	mov	r1, r3
 800c278:	6838      	ldr	r0, [r7, #0]
 800c27a:	f7f7 fb3c 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c27e:	4602      	mov	r2, r0
 800c280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c282:	4293      	cmp	r3, r2
 800c284:	dd01      	ble.n	800c28a <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xa8>
 800c286:	f001 fc99 	bl	800dbbc <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800c28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c28c:	3b01      	subs	r3, #1
 800c28e:	4619      	mov	r1, r3
 800c290:	6838      	ldr	r0, [r7, #0]
 800c292:	f7f7 fb30 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c296:	62b8      	str	r0, [r7, #40]	@ 0x28
  for (int b = 0; b < batches; ++b) {
 800c298:	2300      	movs	r3, #0
 800c29a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c29c:	e073      	b.n	800c386 <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x1a4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c29e:	2300      	movs	r3, #0
 800c2a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2a2:	e069      	b.n	800c378 <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x196>
      BiasType acc = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	657b      	str	r3, [r7, #84]	@ 0x54
      for (int d = 0; d < accum_depth; ++d) {
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2ac:	e025      	b.n	800c2fa <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x118>
        int32_t input_val = input_data[b * accum_depth + d];
 800c2ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2b2:	fb03 f202 	mul.w	r2, r3, r2
 800c2b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2b8:	4413      	add	r3, r2
 800c2ba:	005b      	lsls	r3, r3, #1
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	4413      	add	r3, r2
 800c2c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2c4:	627b      	str	r3, [r7, #36]	@ 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800c2c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2ca:	fb03 f202 	mul.w	r2, r3, r2
 800c2ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2d0:	4413      	add	r3, r2
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f993 3000 	ldrsb.w	r3, [r3]
 800c2dc:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800c2de:	6a3a      	ldr	r2, [r7, #32]
 800c2e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2e2:	4413      	add	r3, r2
 800c2e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2e8:	440a      	add	r2, r1
 800c2ea:	fb02 f303 	mul.w	r3, r2, r3
 800c2ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c2f0:	4413      	add	r3, r2
 800c2f2:	657b      	str	r3, [r7, #84]	@ 0x54
      for (int d = 0; d < accum_depth; ++d) {
 800c2f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fe:	429a      	cmp	r2, r3
 800c300:	dbd5      	blt.n	800c2ae <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xcc>
      if (bias_data) {
 800c302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c304:	2b00      	cmp	r3, #0
 800c306:	d007      	beq.n	800c318 <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x136>
        acc += bias_data[out_c];
 800c308:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c30e:	4413      	add	r3, r2
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c314:	4413      	add	r3, r2
 800c316:	657b      	str	r3, [r7, #84]	@ 0x54
          MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800c318:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c31a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c31c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c31e:	f7f8 fd4f 	bl	8004dc0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800c322:	4603      	mov	r3, r0
      int32_t acc_scaled =
 800c324:	617b      	str	r3, [r7, #20]
      acc_scaled += output_offset;
 800c326:	697a      	ldr	r2, [r7, #20]
 800c328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c32a:	4413      	add	r3, r2
 800c32c:	617b      	str	r3, [r7, #20]
      acc_scaled = std::max(acc_scaled, output_activation_min);
 800c32e:	f107 021c 	add.w	r2, r7, #28
 800c332:	f107 0314 	add.w	r3, r7, #20
 800c336:	4611      	mov	r1, r2
 800c338:	4618      	mov	r0, r3
 800c33a:	f7f9 f89e 	bl	800547a <_ZSt3maxIlERKT_S2_S2_>
 800c33e:	4603      	mov	r3, r0
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	617b      	str	r3, [r7, #20]
      acc_scaled = std::min(acc_scaled, output_activation_max);
 800c344:	f107 0218 	add.w	r2, r7, #24
 800c348:	f107 0314 	add.w	r3, r7, #20
 800c34c:	4611      	mov	r1, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f7f9 f8a7 	bl	80054a2 <_ZSt3minIlERKT_S2_S2_>
 800c354:	4603      	mov	r3, r0
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] =
 800c35a:	6979      	ldr	r1, [r7, #20]
 800c35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c360:	fb03 f202 	mul.w	r2, r3, r2
 800c364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c366:	4413      	add	r3, r2
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c36c:	4413      	add	r3, r2
 800c36e:	b20a      	sxth	r2, r1
 800c370:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c372:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c374:	3301      	adds	r3, #1
 800c376:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c378:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37c:	429a      	cmp	r2, r3
 800c37e:	db91      	blt.n	800c2a4 <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xc2>
  for (int b = 0; b < batches; ++b) {
 800c380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c382:	3301      	adds	r3, #1
 800c384:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c386:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38a:	429a      	cmp	r2, r3
 800c38c:	db87      	blt.n	800c29e <_ZN6tflite21reference_integer_ops14FullyConnectedIsaslEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xbc>
}
 800c38e:	bf00      	nop
 800c390:	bf00      	nop
 800c392:	3760      	adds	r7, #96	@ 0x60
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_>:
void FullyConnectedPerChannel(
 800c398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c39c:	b096      	sub	sp, #88	@ 0x58
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	60f8      	str	r0, [r7, #12]
 800c3a2:	60b9      	str	r1, [r7, #8]
 800c3a4:	607a      	str	r2, [r7, #4]
 800c3a6:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	643b      	str	r3, [r7, #64]	@ 0x40
  const int32_t output_offset = params.output_offset;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const int32_t output_activation_min = params.quantized_activation_min;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800c3c0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800c3c2:	f7f7 fa8c 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	dc01      	bgt.n	800c3d0 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x38>
 800c3cc:	f001 fbf6 	bl	800dbbc <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800c3d0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c3d4:	f7f7 fa83 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	dc01      	bgt.n	800c3e2 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x4a>
 800c3de:	f001 fbed 	bl	800dbbc <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800c3e2:	69fa      	ldr	r2, [r7, #28]
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	dd01      	ble.n	800c3ee <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x56>
 800c3ea:	f001 fbe7 	bl	800dbbc <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800c3ee:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800c3f0:	f7f7 fa75 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c3f4:	63b8      	str	r0, [r7, #56]	@ 0x38
  const int output_dim_count = output_shape.DimensionsCount();
 800c3f6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c3fa:	f7f7 fa70 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c3fe:	6378      	str	r0, [r7, #52]	@ 0x34
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800c400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c402:	3b01      	subs	r3, #1
 800c404:	4619      	mov	r1, r3
 800c406:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c40a:	f7fe fcfd 	bl	800ae08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800c40e:	6338      	str	r0, [r7, #48]	@ 0x30
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800c410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c412:	3b01      	subs	r3, #1
 800c414:	4619      	mov	r1, r3
 800c416:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c41a:	f7f7 fa6c 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c41e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800c420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c422:	3b02      	subs	r3, #2
 800c424:	4619      	mov	r1, r3
 800c426:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800c428:	f7f7 fa65 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c42c:	4602      	mov	r2, r0
 800c42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c430:	4293      	cmp	r3, r2
 800c432:	dd01      	ble.n	800c438 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xa0>
 800c434:	f001 fbc2 	bl	800dbbc <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800c438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43a:	3b01      	subs	r3, #1
 800c43c:	4619      	mov	r1, r3
 800c43e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800c440:	f7f7 fa59 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c444:	62b8      	str	r0, [r7, #40]	@ 0x28
  for (int b = 0; b < batches; ++b) {
 800c446:	2300      	movs	r3, #0
 800c448:	657b      	str	r3, [r7, #84]	@ 0x54
 800c44a:	e092      	b.n	800c572 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x1da>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c44c:	2300      	movs	r3, #0
 800c44e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c450:	e087      	b.n	800c562 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x1ca>
      BiasType acc = 0;
 800c452:	f04f 0200 	mov.w	r2, #0
 800c456:	f04f 0300 	mov.w	r3, #0
 800c45a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
      for (int d = 0; d < accum_depth; ++d) {
 800c45e:	2300      	movs	r3, #0
 800c460:	647b      	str	r3, [r7, #68]	@ 0x44
 800c462:	e02c      	b.n	800c4be <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x126>
        int32_t input_val = input_data[b * accum_depth + d];
 800c464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c468:	fb03 f202 	mul.w	r2, r3, r2
 800c46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c46e:	4413      	add	r3, r2
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c474:	4413      	add	r3, r2
 800c476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c47a:	627b      	str	r3, [r7, #36]	@ 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800c47c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c47e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c480:	fb03 f202 	mul.w	r2, r3, r2
 800c484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c486:	4413      	add	r3, r2
 800c488:	461a      	mov	r2, r3
 800c48a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c48e:	4413      	add	r3, r2
 800c490:	f993 3000 	ldrsb.w	r3, [r3]
 800c494:	623b      	str	r3, [r7, #32]
        acc += filter_val * (input_val + input_offset);
 800c496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c49a:	4413      	add	r3, r2
 800c49c:	6a3a      	ldr	r2, [r7, #32]
 800c49e:	fb02 f303 	mul.w	r3, r2, r3
 800c4a2:	17da      	asrs	r2, r3, #31
 800c4a4:	461c      	mov	r4, r3
 800c4a6:	4615      	mov	r5, r2
 800c4a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c4ac:	eb12 0804 	adds.w	r8, r2, r4
 800c4b0:	eb43 0905 	adc.w	r9, r3, r5
 800c4b4:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
      for (int d = 0; d < accum_depth; ++d) {
 800c4b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	dbce      	blt.n	800c464 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xcc>
      if (bias_data) {
 800c4c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00e      	beq.n	800c4ec <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0x154>
        acc += bias_data[out_c];
 800c4ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c4d6:	4413      	add	r3, r2
 800c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c4e0:	eb10 0a02 	adds.w	sl, r0, r2
 800c4e4:	eb41 0b03 	adc.w	fp, r1, r3
 800c4e8:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
          acc, output_multiplier[out_c], output_shift[out_c]);
 800c4ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	4413      	add	r3, r2
      int32_t acc_scaled = MultiplyByQuantizedMultiplier(
 800c4f4:	6819      	ldr	r1, [r3, #0]
          acc, output_multiplier[out_c], output_shift[out_c]);
 800c4f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	4413      	add	r3, r2
      int32_t acc_scaled = MultiplyByQuantizedMultiplier(
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	460a      	mov	r2, r1
 800c502:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c506:	f7f8 fc7d 	bl	8004e04 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 800c50a:	4603      	mov	r3, r0
 800c50c:	617b      	str	r3, [r7, #20]
      acc_scaled += output_offset;
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c512:	4413      	add	r3, r2
 800c514:	617b      	str	r3, [r7, #20]
      acc_scaled = std::max(acc_scaled, output_activation_min);
 800c516:	f107 021c 	add.w	r2, r7, #28
 800c51a:	f107 0314 	add.w	r3, r7, #20
 800c51e:	4611      	mov	r1, r2
 800c520:	4618      	mov	r0, r3
 800c522:	f7f8 ffaa 	bl	800547a <_ZSt3maxIlERKT_S2_S2_>
 800c526:	4603      	mov	r3, r0
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	617b      	str	r3, [r7, #20]
      acc_scaled = std::min(acc_scaled, output_activation_max);
 800c52c:	f107 0218 	add.w	r2, r7, #24
 800c530:	f107 0314 	add.w	r3, r7, #20
 800c534:	4611      	mov	r1, r2
 800c536:	4618      	mov	r0, r3
 800c538:	f7f8 ffb3 	bl	80054a2 <_ZSt3minIlERKT_S2_S2_>
 800c53c:	4603      	mov	r3, r0
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] =
 800c542:	6979      	ldr	r1, [r7, #20]
 800c544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c546:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c548:	fb03 f202 	mul.w	r2, r3, r2
 800c54c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c54e:	4413      	add	r3, r2
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c556:	4413      	add	r3, r2
 800c558:	b20a      	sxth	r2, r1
 800c55a:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c55c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c55e:	3301      	adds	r3, #1
 800c560:	653b      	str	r3, [r7, #80]	@ 0x50
 800c562:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c566:	429a      	cmp	r2, r3
 800c568:	f6ff af73 	blt.w	800c452 <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xba>
  for (int b = 0; b < batches; ++b) {
 800c56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c56e:	3301      	adds	r3, #1
 800c570:	657b      	str	r3, [r7, #84]	@ 0x54
 800c572:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c576:	429a      	cmp	r2, r3
 800c578:	f6ff af68 	blt.w	800c44c <_ZN6tflite21reference_integer_ops24FullyConnectedPerChannelIsasxEEvRKNS_20FullyConnectedParamsEPKlPKiRKNS_12RuntimeShapeEPKT_SB_PKT0_SB_PKT2_SB_PT1_+0xb4>
}
 800c57c:	bf00      	nop
 800c57e:	bf00      	nop
 800c580:	3758      	adds	r7, #88	@ 0x58
 800c582:	46bd      	mov	sp, r7
 800c584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c588 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>:
void FullyConnected(const FullyConnectedParams& params,
 800c588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c58c:	b098      	sub	sp, #96	@ 0x60
 800c58e:	af00      	add	r7, sp, #0
 800c590:	60f8      	str	r0, [r7, #12]
 800c592:	60b9      	str	r1, [r7, #8]
 800c594:	607a      	str	r2, [r7, #4]
 800c596:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	64bb      	str	r3, [r7, #72]	@ 0x48
  const int32_t filter_offset = params.weights_offset;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	647b      	str	r3, [r7, #68]	@ 0x44
  const int32_t output_offset = params.output_offset;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	643b      	str	r3, [r7, #64]	@ 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const int output_shift = params.output_shift;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	691b      	ldr	r3, [r3, #16]
 800c5b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800c5c2:	6838      	ldr	r0, [r7, #0]
 800c5c4:	f7f7 f98b 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	dc01      	bgt.n	800c5d2 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x4a>
 800c5ce:	f001 faf5 	bl	800dbbc <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800c5d2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c5d6:	f7f7 f982 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	dc01      	bgt.n	800c5e4 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x5c>
 800c5e0:	f001 faec 	bl	800dbbc <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	dd01      	ble.n	800c5f0 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x68>
 800c5ec:	f001 fae6 	bl	800dbbc <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800c5f0:	6838      	ldr	r0, [r7, #0]
 800c5f2:	f7f7 f974 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c5f6:	6378      	str	r0, [r7, #52]	@ 0x34
  const int output_dim_count = output_shape.DimensionsCount();
 800c5f8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c5fc:	f7f7 f96f 	bl	80038de <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c600:	6338      	str	r0, [r7, #48]	@ 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800c602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c604:	3b01      	subs	r3, #1
 800c606:	4619      	mov	r1, r3
 800c608:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c60c:	f7fe fbfc 	bl	800ae08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800c610:	62f8      	str	r0, [r7, #44]	@ 0x2c
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800c612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c614:	3b01      	subs	r3, #1
 800c616:	4619      	mov	r1, r3
 800c618:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c61c:	f7f7 f96b 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c620:	62b8      	str	r0, [r7, #40]	@ 0x28
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800c622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c624:	3b02      	subs	r3, #2
 800c626:	4619      	mov	r1, r3
 800c628:	6838      	ldr	r0, [r7, #0]
 800c62a:	f7f7 f964 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c62e:	4602      	mov	r2, r0
 800c630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c632:	4293      	cmp	r3, r2
 800c634:	dd01      	ble.n	800c63a <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xb2>
 800c636:	f001 fac1 	bl	800dbbc <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800c63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c63c:	3b01      	subs	r3, #1
 800c63e:	4619      	mov	r1, r3
 800c640:	6838      	ldr	r0, [r7, #0]
 800c642:	f7f7 f958 	bl	80038f6 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c646:	6278      	str	r0, [r7, #36]	@ 0x24
  for (int b = 0; b < batches; ++b) {
 800c648:	2300      	movs	r3, #0
 800c64a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c64c:	e08b      	b.n	800c766 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x1de>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c64e:	2300      	movs	r3, #0
 800c650:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c652:	e080      	b.n	800c756 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x1ce>
      BiasType acc = 0;
 800c654:	f04f 0200 	mov.w	r2, #0
 800c658:	f04f 0300 	mov.w	r3, #0
 800c65c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
      for (int d = 0; d < accum_depth; ++d) {
 800c660:	2300      	movs	r3, #0
 800c662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c664:	e02e      	b.n	800c6c4 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x13c>
        int32_t input_val = input_data[b * accum_depth + d];
 800c666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c66a:	fb03 f202 	mul.w	r2, r3, r2
 800c66e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c670:	4413      	add	r3, r2
 800c672:	005b      	lsls	r3, r3, #1
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	4413      	add	r3, r2
 800c678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c67c:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800c67e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c682:	fb03 f202 	mul.w	r2, r3, r2
 800c686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c688:	4413      	add	r3, r2
 800c68a:	461a      	mov	r2, r3
 800c68c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c690:	4413      	add	r3, r2
 800c692:	f993 3000 	ldrsb.w	r3, [r3]
 800c696:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800c698:	69fa      	ldr	r2, [r7, #28]
 800c69a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c69c:	4413      	add	r3, r2
 800c69e:	6a39      	ldr	r1, [r7, #32]
 800c6a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6a2:	440a      	add	r2, r1
 800c6a4:	fb02 f303 	mul.w	r3, r2, r3
 800c6a8:	17da      	asrs	r2, r3, #31
 800c6aa:	461c      	mov	r4, r3
 800c6ac:	4615      	mov	r5, r2
 800c6ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c6b2:	eb12 0804 	adds.w	r8, r2, r4
 800c6b6:	eb43 0905 	adc.w	r9, r3, r5
 800c6ba:	e9c7 8914 	strd	r8, r9, [r7, #80]	@ 0x50
      for (int d = 0; d < accum_depth; ++d) {
 800c6be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	dbcc      	blt.n	800c666 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xde>
      if (bias_data) {
 800c6cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00e      	beq.n	800c6f2 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x16a>
        acc += bias_data[out_c];
 800c6d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6d6:	00db      	lsls	r3, r3, #3
 800c6d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c6dc:	4413      	add	r3, r2
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c6e6:	eb10 0a02 	adds.w	sl, r0, r2
 800c6ea:	eb41 0b03 	adc.w	fp, r1, r3
 800c6ee:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
          MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800c6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c6f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c6fa:	f7f8 fb83 	bl	8004e04 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 800c6fe:	4603      	mov	r3, r0
      int32_t acc_scaled =
 800c700:	613b      	str	r3, [r7, #16]
      acc_scaled += output_offset;
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c706:	4413      	add	r3, r2
 800c708:	613b      	str	r3, [r7, #16]
      acc_scaled = std::max(acc_scaled, output_activation_min);
 800c70a:	f107 0218 	add.w	r2, r7, #24
 800c70e:	f107 0310 	add.w	r3, r7, #16
 800c712:	4611      	mov	r1, r2
 800c714:	4618      	mov	r0, r3
 800c716:	f7f8 feb0 	bl	800547a <_ZSt3maxIlERKT_S2_S2_>
 800c71a:	4603      	mov	r3, r0
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	613b      	str	r3, [r7, #16]
      acc_scaled = std::min(acc_scaled, output_activation_max);
 800c720:	f107 0214 	add.w	r2, r7, #20
 800c724:	f107 0310 	add.w	r3, r7, #16
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f8 feb9 	bl	80054a2 <_ZSt3minIlERKT_S2_S2_>
 800c730:	4603      	mov	r3, r0
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] =
 800c736:	6939      	ldr	r1, [r7, #16]
 800c738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c73c:	fb03 f202 	mul.w	r2, r3, r2
 800c740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c742:	4413      	add	r3, r2
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c74a:	4413      	add	r3, r2
 800c74c:	b20a      	sxth	r2, r1
 800c74e:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c750:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c752:	3301      	adds	r3, #1
 800c754:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c756:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75a:	429a      	cmp	r2, r3
 800c75c:	f6ff af7a 	blt.w	800c654 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xcc>
  for (int b = 0; b < batches; ++b) {
 800c760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c762:	3301      	adds	r3, #1
 800c764:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c766:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c76a:	429a      	cmp	r2, r3
 800c76c:	f6ff af6f 	blt.w	800c64e <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xc6>
}
 800c770:	bf00      	nop
 800c772:	bf00      	nop
 800c774:	3760      	adds	r7, #96	@ 0x60
 800c776:	46bd      	mov	sp, r7
 800c778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c77c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	425a      	negs	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	425a      	negs	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	69da      	ldr	r2, [r3, #28]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	689a      	ldr	r2, [r3, #8]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	68da      	ldr	r2, [r3, #12]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	619a      	str	r2, [r3, #24]
  return op_params;
 800c7c2:	bf00      	nop
}
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f103 0220 	add.w	r2, r3, #32
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f103 011c 	add.w	r1, r3, #28
 800c7e8:	78fb      	ldrb	r3, [r7, #3]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fe fa68 	bl	800acc0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 800c7f0:	bf00      	nop
}
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 800c7fc:	b5b0      	push	{r4, r5, r7, lr}
 800c7fe:	b09a      	sub	sp, #104	@ 0x68
 800c800:	af04      	add	r7, sp, #16
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	607b      	str	r3, [r7, #4]
 800c806:	460b      	mov	r3, r1
 800c808:	72fb      	strb	r3, [r7, #11]
 800c80a:	4613      	mov	r3, r2
 800c80c:	72bb      	strb	r3, [r7, #10]
#ifndef HEXAGON
  data->is_per_channel = false;
 800c80e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c810:	2200      	movs	r2, #0
 800c812:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
#endif

  if (data_type == kTfLiteFloat32) {
 800c816:	7abb      	ldrb	r3, [r7, #10]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d101      	bne.n	800c820 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x24>
    return kTfLiteOk;
 800c81c:	2300      	movs	r3, #0
 800c81e:	e159      	b.n	800cad4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x2d8>
  }

  bool is_per_channel = false;
 800c820:	2300      	movs	r3, #0
 800c822:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if (filter->quantization.type == kTfLiteAffineQuantization &&
 800c826:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d12c      	bne.n	800c888 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x8c>
      filter->quantization.params != nullptr) {
 800c82e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if (filter->quantization.type == kTfLiteAffineQuantization &&
 800c832:	2b00      	cmp	r3, #0
 800c834:	d028      	beq.n	800c888 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x8c>
    const auto* affine_quantization =
 800c836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c83a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 800c83c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d10a      	bne.n	800c858 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x5c>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	695c      	ldr	r4, [r3, #20]
 800c846:	4b8d      	ldr	r3, [pc, #564]	@ (800ca7c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x280>)
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	234a      	movs	r3, #74	@ 0x4a
 800c84c:	4a8c      	ldr	r2, [pc, #560]	@ (800ca80 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x284>)
 800c84e:	498d      	ldr	r1, [pc, #564]	@ (800ca84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x288>)
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	47a0      	blx	r4
 800c854:	2301      	movs	r3, #1
 800c856:	e13d      	b.n	800cad4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x2d8>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 800c858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d10a      	bne.n	800c876 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x7a>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	695c      	ldr	r4, [r3, #20]
 800c864:	4b88      	ldr	r3, [pc, #544]	@ (800ca88 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x28c>)
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	234b      	movs	r3, #75	@ 0x4b
 800c86a:	4a85      	ldr	r2, [pc, #532]	@ (800ca80 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x284>)
 800c86c:	4985      	ldr	r1, [pc, #532]	@ (800ca84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x288>)
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	47a0      	blx	r4
 800c872:	2301      	movs	r3, #1
 800c874:	e12e      	b.n	800cad4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x2d8>
    is_per_channel = affine_quantization->scale->size > 1;
 800c876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	bfcc      	ite	gt
 800c880:	2301      	movgt	r3, #1
 800c882:	2300      	movle	r3, #0
 800c884:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  }

  if (is_per_channel) {
 800c888:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 80c7 	beq.w	800ca20 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x224>
        context, !is_per_channel,
        "FullyConnected per-channel quantization not yet supported on Hexagon. "
        "Please set converter._experimental_disable_per_channel_quantization_"
        "for_dense_layers = True.");
#else
    data->is_per_channel = is_per_channel;
 800c892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c894:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c898:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    const auto* affine_quantization =
 800c89c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a0:	647b      	str	r3, [r7, #68]	@ 0x44
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    const int per_channel_quantization_size = affine_quantization->scale->size;
 800c8a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	643b      	str	r3, [r7, #64]	@ 0x40

    //  Currently only Int8/Int16 are supported for per channel quantization.
    TF_LITE_ENSURE(
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	2b09      	cmp	r3, #9
 800c8b0:	d103      	bne.n	800c8ba <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xbe>
 800c8b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	2b12      	cmp	r3, #18
 800c8b8:	d112      	bne.n	800c8e0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xe4>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b07      	cmp	r3, #7
 800c8c0:	d103      	bne.n	800c8ca <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xce>
 800c8c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b12      	cmp	r3, #18
 800c8c8:	d10a      	bne.n	800c8e0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xe4>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	695c      	ldr	r4, [r3, #20]
 800c8ce:	4b6f      	ldr	r3, [pc, #444]	@ (800ca8c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x290>)
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	2363      	movs	r3, #99	@ 0x63
 800c8d4:	4a6a      	ldr	r2, [pc, #424]	@ (800ca80 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x284>)
 800c8d6:	496b      	ldr	r1, [pc, #428]	@ (800ca84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x288>)
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	47a0      	blx	r4
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e0f9      	b.n	800cad4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x2d8>
        context,
        (input->type == kTfLiteInt8 && filter->type != kTfLiteInt4) ||
            (input->type == kTfLiteInt16 && filter->type != kTfLiteInt4));

    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 800c8e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d012      	beq.n	800c912 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x116>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	695c      	ldr	r4, [r3, #20]
 800c8f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c8f8:	9203      	str	r2, [sp, #12]
 800c8fa:	9302      	str	r3, [sp, #8]
 800c8fc:	4b64      	ldr	r3, [pc, #400]	@ (800ca90 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x294>)
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	4b64      	ldr	r3, [pc, #400]	@ (800ca94 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x298>)
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	2368      	movs	r3, #104	@ 0x68
 800c906:	4a5e      	ldr	r2, [pc, #376]	@ (800ca80 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x284>)
 800c908:	4963      	ldr	r1, [pc, #396]	@ (800ca98 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x29c>)
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	47a0      	blx	r4
 800c90e:	2301      	movs	r3, #1
 800c910:	e0e0      	b.n	800cad4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x2d8>
                      per_channel_quantization_size);

    TF_LITE_ENSURE_EQ(
 800c912:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c914:	689a      	ldr	r2, [r3, #8]
 800c916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	4413      	add	r3, r2
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c922:	429a      	cmp	r2, r3
 800c924:	d016      	beq.n	800c954 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x158>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	695c      	ldr	r4, [r3, #20]
 800c92a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c92c:	689a      	ldr	r2, [r3, #8]
 800c92e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4413      	add	r3, r2
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	9303      	str	r3, [sp, #12]
 800c93a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c93c:	9302      	str	r3, [sp, #8]
 800c93e:	4b57      	ldr	r3, [pc, #348]	@ (800ca9c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x2a0>)
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	4b53      	ldr	r3, [pc, #332]	@ (800ca90 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x294>)
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	236b      	movs	r3, #107	@ 0x6b
 800c948:	4a4d      	ldr	r2, [pc, #308]	@ (800ca80 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x284>)
 800c94a:	4953      	ldr	r1, [pc, #332]	@ (800ca98 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x29c>)
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	47a0      	blx	r4
 800c950:	2301      	movs	r3, #1
 800c952:	e0bf      	b.n	800cad4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x2d8>
        context, per_channel_quantization_size,
        filter->dims->data[affine_quantization->quantized_dimension]);

    data->per_channel_output_multiplier =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            context, per_channel_quantization_size * sizeof(int32_t)));
 800c958:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800c95a:	0092      	lsls	r2, r2, #2
 800c95c:	4611      	mov	r1, r2
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	4798      	blx	r3
 800c962:	4602      	mov	r2, r0
    data->per_channel_output_multiplier =
 800c964:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c966:	625a      	str	r2, [r3, #36]	@ 0x24
    data->per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            context, per_channel_quantization_size * sizeof(int32_t)));
 800c96c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800c96e:	0092      	lsls	r2, r2, #2
 800c970:	4611      	mov	r1, r2
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	4798      	blx	r3
 800c976:	4602      	mov	r2, r0
    data->per_channel_output_shift =
 800c978:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c97a:	629a      	str	r2, [r3, #40]	@ 0x28

    // Populate multiplier and shift using affine quantization.
    const float input_scale = input->params.scale;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const float output_scale = output->params.scale;
 800c982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	63bb      	str	r3, [r7, #56]	@ 0x38
    const float* filter_scales = affine_quantization->scale->data;
 800c988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	3304      	adds	r3, #4
 800c98e:	637b      	str	r3, [r7, #52]	@ 0x34

    for (int i = 0; i < per_channel_quantization_size; ++i) {
 800c990:	2300      	movs	r3, #0
 800c992:	653b      	str	r3, [r7, #80]	@ 0x50
 800c994:	e03f      	b.n	800ca16 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x21a>
      const float scale = filter_scales[i];
 800c996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c99c:	4413      	add	r3, r2
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	633b      	str	r3, [r7, #48]	@ 0x30
      const double filter_scale = static_cast<double>(scale);
 800c9a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9a4:	f7f3 fde8 	bl	8000578 <__aeabi_f2d>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      const double effective_output_scale = static_cast<double>(input_scale) *
 800c9b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c9b2:	f7f3 fde1 	bl	8000578 <__aeabi_f2d>
 800c9b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c9ba:	f7f3 fe35 	bl	8000628 <__aeabi_dmul>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4614      	mov	r4, r2
 800c9c4:	461d      	mov	r5, r3
                                            filter_scale /
                                            static_cast<double>(output_scale);
 800c9c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c9c8:	f7f3 fdd6 	bl	8000578 <__aeabi_f2d>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
      const double effective_output_scale = static_cast<double>(input_scale) *
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	f7f3 ff52 	bl	800087c <__aeabi_ddiv>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      int32_t significand;
      int channel_shift;
      QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800c9e0:	f107 0218 	add.w	r2, r7, #24
 800c9e4:	f107 031c 	add.w	r3, r7, #28
 800c9e8:	4611      	mov	r1, r2
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	ed97 0b08 	vldr	d0, [r7, #32]
 800c9f0:	f7f8 fc22 	bl	8005238 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      data->per_channel_output_multiplier[i] = significand;
 800c9f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	69fa      	ldr	r2, [r7, #28]
 800ca00:	601a      	str	r2, [r3, #0]
      data->per_channel_output_shift[i] = channel_shift;
 800ca02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ca06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	69ba      	ldr	r2, [r7, #24]
 800ca0e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < per_channel_quantization_size; ++i) {
 800ca10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca12:	3301      	adds	r3, #1
 800ca14:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	dbbb      	blt.n	800c996 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x19a>
 800ca1e:	e027      	b.n	800ca70 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x274>
    }
#endif
  } else {
    double real_multiplier = 0.0;
 800ca20:	f04f 0200 	mov.w	r2, #0
 800ca24:	f04f 0300 	mov.w	r3, #0
 800ca28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800ca2c:	f107 0310 	add.w	r3, r7, #16
 800ca30:	9301      	str	r3, [sp, #4]
 800ca32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ca3a:	6879      	ldr	r1, [r7, #4]
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f7f8 fd67 	bl	8005510 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800ca42:	4603      	mov	r3, r0
 800ca44:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800ca48:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x25a>
 800ca50:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800ca54:	e03e      	b.n	800cad4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x2d8>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 800ca56:	ed97 7b04 	vldr	d7, [r7, #16]
 800ca5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ca5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca5e:	3304      	adds	r3, #4
 800ca60:	4619      	mov	r1, r3
 800ca62:	4610      	mov	r0, r2
 800ca64:	eeb0 0a47 	vmov.f32	s0, s14
 800ca68:	eef0 0a67 	vmov.f32	s1, s15
 800ca6c:	f7f8 fbe4 	bl	8005238 <_ZN6tflite18QuantizeMultiplierEdPlPi>

  // Filter weights will always be symmetric quantized since we only support
  // int8 quantization. See
  // https://github.com/tensorflow/tensorflow/issues/44912 for additional
  // context.
  TFLITE_DCHECK(filter->params.zero_point == 0);
 800ca70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d013      	beq.n	800caa0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x2a4>
 800ca78:	f001 f8a0 	bl	800dbbc <abort>
 800ca7c:	08015d1c 	.word	0x08015d1c
 800ca80:	08015cb8 	.word	0x08015cb8
 800ca84:	08015d04 	.word	0x08015d04
 800ca88:	08015d30 	.word	0x08015d30
 800ca8c:	08015d4c 	.word	0x08015d4c
 800ca90:	08015de4 	.word	0x08015de4
 800ca94:	08015e04 	.word	0x08015e04
 800ca98:	08015dc8 	.word	0x08015dc8
 800ca9c:	08015e28 	.word	0x08015e28

  data->input_zero_point = input->params.zero_point;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	691a      	ldr	r2, [r3, #16]
 800caa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800caa6:	615a      	str	r2, [r3, #20]
  data->filter_zero_point = filter->params.zero_point;
 800caa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800caaa:	691a      	ldr	r2, [r3, #16]
 800caac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800caae:	619a      	str	r2, [r3, #24]
  data->output_zero_point = output->params.zero_point;
 800cab0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cab2:	691a      	ldr	r2, [r3, #16]
 800cab4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cab6:	61da      	str	r2, [r3, #28]

  return CalculateActivationRangeQuantized(context, activation, output,
 800cab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800caba:	f103 0208 	add.w	r2, r3, #8
 800cabe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cac0:	330c      	adds	r3, #12
 800cac2:	7af9      	ldrb	r1, [r7, #11]
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	4613      	mov	r3, r2
 800cac8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800caca:	68f8      	ldr	r0, [r7, #12]
 800cacc:	f7f8 ff12 	bl	80058f4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800cad0:	4603      	mov	r3, r0
                                           &data->output_activation_min,
                                           &data->output_activation_max);
 800cad2:	bf00      	nop
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3758      	adds	r7, #88	@ 0x58
 800cad8:	46bd      	mov	sp, r7
 800cada:	bdb0      	pop	{r4, r5, r7, pc}

0800cadc <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 800cadc:	b480      	push	{r7}
 800cade:	b087      	sub	sp, #28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	db0f      	blt.n	800cb10 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	da0b      	bge.n	800cb10 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	4413      	add	r3, r2
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0a:	d001      	beq.n	800cb10 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	e001      	b.n	800cb14 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800cb10:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	371c      	adds	r7, #28
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>:
TFLMRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer),
    void (*reset)(TfLiteContext* context, void* buffer)) {
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	603b      	str	r3, [r7, #0]
          /*free=*/free,
          /*prepare=*/prepare,
          /*invoke=*/invoke,
          /*reset*/ reset,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr};
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	69ba      	ldr	r2, [r7, #24]
 800cb38:	605a      	str	r2, [r3, #4]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	609a      	str	r2, [r3, #8]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	60da      	str	r2, [r3, #12]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	69fa      	ldr	r2, [r7, #28]
 800cb4a:	611a      	str	r2, [r3, #16]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	615a      	str	r2, [r3, #20]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2200      	movs	r2, #0
 800cb56:	619a      	str	r2, [r3, #24]
}
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800cb76:	f001 f821 	bl	800dbbc <abort>
  TFLITE_DCHECK(node != nullptr);
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d101      	bne.n	800cb84 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800cb80:	f001 f81c 	bl	800dbbc <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800cb88:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800cb90:	6879      	ldr	r1, [r7, #4]
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f7ff ffa2 	bl	800cadc <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800cb98:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	da01      	bge.n	800cba4 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 800cba0:	2300      	movs	r3, #0
 800cba2:	e00c      	b.n	800cbbe <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	6819      	ldr	r1, [r3, #0]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	440b      	add	r3, r1
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	4790      	blx	r2
 800cbba:	4603      	mov	r3, r0
 800cbbc:	bf00      	nop
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3718      	adds	r7, #24
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b084      	sub	sp, #16
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	60f8      	str	r0, [r7, #12]
 800cbce:	60b9      	str	r1, [r7, #8]
 800cbd0:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	68b9      	ldr	r1, [r7, #8]
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff ffc4 	bl	800cb64 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800cbdc:	4603      	mov	r3, r0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b084      	sub	sp, #16
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	60f8      	str	r0, [r7, #12]
 800cbee:	60b9      	str	r1, [r7, #8]
 800cbf0:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800cbf8:	f000 ffe0 	bl	800dbbc <abort>
  TFLITE_DCHECK(node != nullptr);
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800cc02:	f000 ffdb 	bl	800dbbc <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	6859      	ldr	r1, [r3, #4]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	440b      	add	r3, r1
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	4619      	mov	r1, r3
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	4790      	blx	r2
 800cc1c:	4603      	mov	r3, r0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b086      	sub	sp, #24
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d103      	bne.n	800cc46 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7f8 fbaa 	bl	8005398 <_ZN6tflite12RuntimeShapeC1Ev>
 800cc44:	e00d      	b.n	800cc62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	3304      	adds	r3, #4
 800cc56:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	6939      	ldr	r1, [r7, #16]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7f8 fba9 	bl	80053b4 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	3718      	adds	r7, #24
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
	...

0800cc6c <_ZN6tflite18MicroMemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MicroMemoryPlanner {
 public:
  MicroMemoryPlanner() {}
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	4a04      	ldr	r2, [pc, #16]	@ (800cc88 <_ZN6tflite18MicroMemoryPlannerC1Ev+0x1c>)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	601a      	str	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr
 800cc88:	080165b4 	.word	0x080165b4

0800cc8c <_ZN6tflite18MicroMemoryPlannerD1Ev>:
  virtual ~MicroMemoryPlanner() {}
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	4a04      	ldr	r2, [pc, #16]	@ (800cca8 <_ZN6tflite18MicroMemoryPlannerD1Ev+0x1c>)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	601a      	str	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	080165b4 	.word	0x080165b4

0800ccac <_ZN6tflite18MicroMemoryPlannerD0Ev>:
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7ff ffe9 	bl	800cc8c <_ZN6tflite18MicroMemoryPlannerD1Ev>
 800ccba:	2104      	movs	r1, #4
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 fecc 	bl	800da5a <_ZdlPvj>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <_ZN6tflite18MicroMemoryPlanner9AddBufferEiiii>:

  // Record details of an offline planned buffer offset we want to place.
  // offline_offset is the buffer offset from the start of the arena.
  // This is to support offline memory planning from the flatbuffer metadata.
  // By default, it returns an error.
  virtual TfLiteStatus AddBuffer(int size, int first_time_used,
 800cccc:	b480      	push	{r7}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]
 800ccd8:	603b      	str	r3, [r7, #0]
                                 int last_time_used, int offline_offset) {
    return kTfLiteError;
 800ccda:	2301      	movs	r3, #1
  }
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <_ZN6tflite18MicroMemoryPlanner4InitEPhi>:
  // Provides the scratch buffer in case that the memory planner needs it.
  // The lifetime of scratch buffers lifetime lasts until the static memory plan
  // is committed.
  // The default implementation is for the memory planner that does not need
  // scratch buffer and simply returns ok.
  virtual TfLiteStatus Init(unsigned char* scratch_buffer,
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
                            int scratch_buffer_size) {
    return kTfLiteOk;
 800ccf4:	2300      	movs	r3, #0
  }
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <_ZN6tflite18MicroMemoryPlanner15PrintMemoryPlanEv>:

  // Method will return True if the MicroMemoryPlanner preserves all tensors
  // after invocation, and False if it doesn't.
  virtual bool preserves_all_tensors() const = 0;

  virtual void PrintMemoryPlan() {
 800cd02:	b480      	push	{r7}
 800cd04:	b083      	sub	sp, #12
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
    // Default does nothing.
  }
 800cd0a:	bf00      	nop
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 800cd1c:	2328      	movs	r3, #40	@ 0x28
 800cd1e:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 800cd20:	2328      	movs	r3, #40	@ 0x28
  }
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <_ZNK6tflite19GreedyMemoryPlanner21preserves_all_tensorsEv>:

  // Returns False because the GreedyMemoryPlanner doesn't preserves all tensors
  // after invocation. Do to the fact that tensors that tensor data for tensors
  // that aren't being used during a phase of invocation are overwritten.
  bool preserves_all_tensors() const override { return false; }
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	2300      	movs	r3, #0
 800cd38:	4618      	mov	r0, r3
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi>:

namespace {

// Returns a character representing a numbered buffer
// for GreedyMemoryPlanner::PrintMemoryPlan()
char GetOrdinalCharacter(int i) {
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  if (i < 10) {
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b09      	cmp	r3, #9
 800cd50:	dc04      	bgt.n	800cd5c <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x18>
    return '0' + i;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	3330      	adds	r3, #48	@ 0x30
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	e021      	b.n	800cda0 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x5c>
  } else if (i < 36) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b23      	cmp	r3, #35	@ 0x23
 800cd60:	dc04      	bgt.n	800cd6c <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x28>
    return 'a' + (i - 10);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	3357      	adds	r3, #87	@ 0x57
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	e019      	b.n	800cda0 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x5c>
  } else if (i < 62) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b3d      	cmp	r3, #61	@ 0x3d
 800cd70:	dc04      	bgt.n	800cd7c <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x38>
    return 'A' + (i - 36);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	331d      	adds	r3, #29
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	e011      	b.n	800cda0 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x5c>
  }
  return GetOrdinalCharacter(i % 62);
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	4b0a      	ldr	r3, [pc, #40]	@ (800cda8 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x64>)
 800cd80:	fb83 1302 	smull	r1, r3, r3, r2
 800cd84:	4413      	add	r3, r2
 800cd86:	1159      	asrs	r1, r3, #5
 800cd88:	17d3      	asrs	r3, r2, #31
 800cd8a:	1ac9      	subs	r1, r1, r3
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	015b      	lsls	r3, r3, #5
 800cd90:	1a5b      	subs	r3, r3, r1
 800cd92:	005b      	lsls	r3, r3, #1
 800cd94:	1ad1      	subs	r1, r2, r3
 800cd96:	4608      	mov	r0, r1
 800cd98:	f7ff ffd4 	bl	800cd44 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	bf00      	nop
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	84210843 	.word	0x84210843

0800cdac <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 800cdac:	b480      	push	{r7}
 800cdae:	b089      	sub	sp, #36	@ 0x24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	61bb      	str	r3, [r7, #24]
 800cdc0:	e04b      	b.n	800ce5a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
      if (values[i - 1] < values[i]) {
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	4413      	add	r3, r2
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	68f9      	ldr	r1, [r7, #12]
 800cdd8:	440b      	add	r3, r1
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	da39      	bge.n	800ce54 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa8>
        const int value_temp = values[i - 1];
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cde6:	3b01      	subs	r3, #1
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	4413      	add	r3, r2
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	441a      	add	r2, r3
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce00:	3b01      	subs	r3, #1
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	68f9      	ldr	r1, [r7, #12]
 800ce06:	440b      	add	r3, r1
 800ce08:	6812      	ldr	r2, [r2, #0]
 800ce0a:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	4413      	add	r3, r2
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	4413      	add	r3, r2
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	441a      	add	r2, r3
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	68b9      	ldr	r1, [r7, #8]
 800ce3e:	440b      	add	r3, r1
 800ce40:	6812      	ldr	r2, [r2, #0]
 800ce42:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	693a      	ldr	r2, [r7, #16]
 800ce4e:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 800ce50:	2301      	movs	r3, #1
 800ce52:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	3301      	adds	r3, #1
 800ce58:	61bb      	str	r3, [r7, #24]
 800ce5a:	69ba      	ldr	r2, [r7, #24]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	dbaf      	blt.n	800cdc2 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x16>
  do {
 800ce62:	7ffb      	ldrb	r3, [r7, #31]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1a7      	bne.n	800cdb8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 800ce68:	bf00      	nop
 800ce6a:	bf00      	nop
 800ce6c:	3724      	adds	r7, #36	@ 0x24
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
	...

0800ce78 <_ZN6tflite19GreedyMemoryPlannerC1Ev>:

GreedyMemoryPlanner::GreedyMemoryPlanner() {}
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7ff fef2 	bl	800cc6c <_ZN6tflite18MicroMemoryPlannerC1Ev>
 800ce88:	4a03      	ldr	r2, [pc, #12]	@ (800ce98 <_ZN6tflite19GreedyMemoryPlannerC1Ev+0x20>)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	601a      	str	r2, [r3, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	08016584 	.word	0x08016584

0800ce9c <_ZN6tflite19GreedyMemoryPlanner4InitEPhi>:

TfLiteStatus GreedyMemoryPlanner::Init(unsigned char* scratch_buffer,
                                       int scratch_buffer_size) {
 800ce9c:	b590      	push	{r4, r7, lr}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
  // Reset internal states
  buffer_count_ = 0;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800ceb6:	687c      	ldr	r4, [r7, #4]
 800ceb8:	f7ff ff2d 	bl	800cd16 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800cebc:	4603      	mov	r3, r0
 800cebe:	fbb4 f3f3 	udiv	r3, r4, r3
 800cec2:	461a      	mov	r2, r3
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	011b      	lsls	r3, r3, #4
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	4413      	add	r3, r2
 800cedc:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	697a      	ldr	r2, [r7, #20]
 800ceec:	4413      	add	r3, r2
 800ceee:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	697a      	ldr	r2, [r7, #20]
 800cef4:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	4413      	add	r3, r2
 800cf00:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	697a      	ldr	r2, [r7, #20]
 800cf06:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	4613      	mov	r3, r2
 800cf10:	005b      	lsls	r3, r3, #1
 800cf12:	4413      	add	r3, r2
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	461a      	mov	r2, r3
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	625a      	str	r2, [r3, #36]	@ 0x24
  return kTfLiteOk;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	371c      	adds	r7, #28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd90      	pop	{r4, r7, pc}
	...

0800cf30 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	4a05      	ldr	r2, [pc, #20]	@ (800cf50 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	601a      	str	r2, [r3, #0]
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7ff fea3 	bl	800cc8c <_ZN6tflite18MicroMemoryPlannerD1Ev>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	08016584 	.word	0x08016584

0800cf54 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
}
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7ff ffe7 	bl	800cf30 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800cf62:	212c      	movs	r1, #44	@ 0x2c
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fd78 	bl	800da5a <_ZdlPvj>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(int size, int first_time_used,
                                            int last_time_used) {
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b086      	sub	sp, #24
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	689a      	ldr	r2, [r3, #8]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	db07      	blt.n	800cf9e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x2a>
    MicroPrintf("Too many buffers (max is %d)", max_buffer_count_);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	4619      	mov	r1, r3
 800cf94:	4813      	ldr	r0, [pc, #76]	@ (800cfe4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x70>)
 800cf96:	f7fd fd87 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e01d      	b.n	800cfda <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x66>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	68da      	ldr	r2, [r3, #12]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	011b      	lsls	r3, r3, #4
 800cfa8:	4413      	add	r3, r2
 800cfaa:	617b      	str	r3, [r7, #20]
  current->size = size;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc4:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  return kTfLiteOk;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	08015e68 	.word	0x08015e68

0800cfe8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(int size, int first_time_used,
                                            int last_time_used,
                                            int offline_offset) {
 800cfe8:	b590      	push	{r4, r7, lr}
 800cfea:	b087      	sub	sp, #28
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
 800cff4:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	68da      	ldr	r2, [r3, #12]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	011b      	lsls	r3, r3, #4
 800d000:	4413      	add	r3, r2
 800d002:	617b      	str	r3, [r7, #20]
  if (AddBuffer(size, first_time_used, last_time_used) != kTfLiteOk) {
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3308      	adds	r3, #8
 800d00a:	681c      	ldr	r4, [r3, #0]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	68b9      	ldr	r1, [r7, #8]
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	47a0      	blx	r4
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	bf14      	ite	ne
 800d01c:	2301      	movne	r3, #1
 800d01e:	2300      	moveq	r3, #0
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x42>
    return kTfLiteError;
 800d026:	2301      	movs	r3, #1
 800d028:	e003      	b.n	800d032 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x4a>
  }
  current->offline_offset = offline_offset;
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d02e:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	371c      	adds	r7, #28
 800d036:	46bd      	mov	sp, r7
 800d038:	bd90      	pop	{r4, r7, pc}

0800d03a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800d03a:	b480      	push	{r7}
 800d03c:	b087      	sub	sp, #28
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	607a      	str	r2, [r7, #4]
 800d046:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	68da      	ldr	r2, [r3, #12]
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 800d052:	4413      	add	r3, r2
 800d054:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	da01      	bge.n	800d064 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 800d060:	2300      	movs	r3, #0
 800d062:	e007      	b.n	800d074 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	dd01      	ble.n	800d072 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 800d06e:	2300      	movs	r3, #0
 800d070:	e000      	b.n	800d074 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 800d072:	2301      	movs	r3, #1
}
 800d074:	4618      	mov	r0, r3
 800d076:	371c      	adds	r7, #28
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
 800d08c:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 800d08e:	2300      	movs	r3, #0
 800d090:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d10b      	bne.n	800d0b0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	699a      	ldr	r2, [r3, #24]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6a1b      	ldr	r3, [r3, #32]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	005b      	lsls	r3, r3, #1
 800d0a6:	440b      	add	r3, r1
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4413      	add	r3, r2
 800d0ac:	613b      	str	r3, [r7, #16]
 800d0ae:	e011      	b.n	800d0d4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b8:	d101      	bne.n	800d0be <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	e029      	b.n	800d112 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	699a      	ldr	r2, [r3, #24]
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	440b      	add	r3, r1
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	6939      	ldr	r1, [r7, #16]
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	f7ff ffad 	bl	800d03a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d002      	beq.n	800d0ec <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	617b      	str	r3, [r7, #20]
      break;
 800d0ea:	e011      	b.n	800d110 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f4:	d00b      	beq.n	800d10e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	699a      	ldr	r2, [r3, #24]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	4619      	mov	r1, r3
 800d100:	460b      	mov	r3, r1
 800d102:	005b      	lsls	r3, r3, #1
 800d104:	440b      	add	r3, r1
 800d106:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800d108:	4413      	add	r3, r2
 800d10a:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800d10c:	e7e2      	b.n	800d0d4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 800d10e:	bf00      	nop
  } while (true);
  return result;
 800d110:	697b      	ldr	r3, [r7, #20]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3718      	adds	r7, #24
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b098      	sub	sp, #96	@ 0x60
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d128:	f083 0301 	eor.w	r3, r3, #1
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f040 8160 	bne.w	800d3f4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f000 815b 	beq.w	800d3f4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    return;
  }
  need_to_calculate_offsets_ = false;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int idx_from_head = 0;
 800d14c:	2300      	movs	r3, #0
 800d14e:	65bb      	str	r3, [r7, #88]	@ 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800d150:	2300      	movs	r3, #0
 800d152:	657b      	str	r3, [r7, #84]	@ 0x54
 800d154:	e04c      	b.n	800d1f0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd6>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68da      	ldr	r2, [r3, #12]
 800d15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d15c:	011b      	lsls	r3, r3, #4
 800d15e:	4413      	add	r3, r2
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d166:	d11e      	bne.n	800d1a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8c>
      idx_from_tail--;
 800d168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d16a:	3b01      	subs	r3, #1
 800d16c:	65fb      	str	r3, [r7, #92]	@ 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	68da      	ldr	r2, [r3, #12]
 800d172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d174:	011b      	lsls	r3, r3, #4
 800d176:	441a      	add	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6919      	ldr	r1, [r3, #16]
 800d17c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	440b      	add	r3, r1
 800d182:	6812      	ldr	r2, [r2, #0]
 800d184:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	695a      	ldr	r2, [r3, #20]
 800d18a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d192:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	e021      	b.n	800d1ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd0>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	68da      	ldr	r2, [r3, #12]
 800d1aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1ac:	011b      	lsls	r3, r3, #4
 800d1ae:	441a      	add	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6919      	ldr	r1, [r3, #16]
 800d1b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	440b      	add	r3, r1
 800d1ba:	6812      	ldr	r2, [r2, #0]
 800d1bc:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	695a      	ldr	r2, [r3, #20]
 800d1c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1ca:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	68da      	ldr	r2, [r3, #12]
 800d1d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1d2:	011b      	lsls	r3, r3, #4
 800d1d4:	441a      	add	r2, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d1da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	440b      	add	r3, r1
 800d1e0:	6852      	ldr	r2, [r2, #4]
 800d1e2:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800d1e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800d1ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	dbad      	blt.n	800d156 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3c>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	691a      	ldr	r2, [r3, #16]
 800d1fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	695a      	ldr	r2, [r3, #20]
 800d208:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d20a:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800d20c:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800d212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d214:	1ad3      	subs	r3, r2, r3
 800d216:	461a      	mov	r2, r3
 800d218:	f7ff fdc8 	bl	800cdac <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	699a      	ldr	r2, [r3, #24]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a1b      	ldr	r3, [r3, #32]
 800d230:	4619      	mov	r1, r3
 800d232:	460b      	mov	r3, r1
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	440b      	add	r3, r1
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	653b      	str	r3, [r7, #80]	@ 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800d23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d240:	f04f 32ff 	mov.w	r2, #4294967295
 800d244:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  first_entry->requirements_index = buffer_id;
 800d24e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d250:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d252:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	68da      	ldr	r2, [r3, #12]
 800d258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d25a:	011b      	lsls	r3, r3, #4
 800d25c:	4413      	add	r3, r2
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d264:	d106      	bne.n	800d274 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	4413      	add	r3, r2
 800d270:	2200      	movs	r2, #0
 800d272:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	4413      	add	r3, r2
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d282:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 800d284:	2301      	movs	r3, #1
 800d286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d288:	e0ad      	b.n	800d3e6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2cc>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	695a      	ldr	r2, [r3, #20]
 800d28e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4413      	add	r3, r2
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d29e:	011b      	lsls	r3, r3, #4
 800d2a0:	4413      	add	r3, r2
 800d2a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int wanted_size = wanted_requirements->size;
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	637b      	str	r3, [r7, #52]	@ 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	633b      	str	r3, [r7, #48]	@ 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800d2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c2:	d12d      	bne.n	800d320 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x206>
      ListEntry* prior_entry = nullptr;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 800d2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7ff fed6 	bl	800d080 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800d2d4:	62b8      	str	r0, [r7, #40]	@ 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 800d2d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d012      	beq.n	800d302 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68da      	ldr	r2, [r3, #12]
 800d2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800d2e6:	4413      	add	r3, r2
 800d2e8:	627b      	str	r3, [r7, #36]	@ 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 800d2ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f0:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800d2f2:	4413      	add	r3, r2
 800d2f4:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800d2f6:	6a3a      	ldr	r2, [r7, #32]
 800d2f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	dd01      	ble.n	800d302 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
            candidate_offset = prior_entry_offset;
 800d2fe:	6a3b      	ldr	r3, [r7, #32]
 800d300:	64bb      	str	r3, [r7, #72]	@ 0x48
          }
        }
        if (next_entry == nullptr) {
 800d302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00f      	beq.n	800d328 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20e>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 800d308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 800d312:	69fa      	ldr	r2, [r7, #28]
 800d314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d316:	429a      	cmp	r2, r3
 800d318:	da08      	bge.n	800d32c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x212>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 800d31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
 800d31e:	e7d3      	b.n	800d2c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 800d320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d326:	e002      	b.n	800d32e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 800d328:	bf00      	nop
 800d32a:	e000      	b.n	800d32e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 800d32c:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4413      	add	r3, r2
 800d338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d33a:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	699a      	ldr	r2, [r3, #24]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	69db      	ldr	r3, [r3, #28]
 800d344:	4619      	mov	r1, r3
 800d346:	460b      	mov	r3, r1
 800d348:	005b      	lsls	r3, r3, #1
 800d34a:	440b      	add	r3, r1
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d356:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d35c:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	69db      	ldr	r3, [r3, #28]
 800d362:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	69db      	ldr	r3, [r3, #28]
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 800d36e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d374:	429a      	cmp	r2, r3
 800d376:	da09      	bge.n	800d38c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x272>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	653b      	str	r3, [r7, #80]	@ 0x50
      first_entry->next_entry_index = first_entry_index_;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a1a      	ldr	r2, [r3, #32]
 800d380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d382:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	697a      	ldr	r2, [r7, #20]
 800d388:	621a      	str	r2, [r3, #32]
 800d38a:	e029      	b.n	800d3e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
    } else {
      ListEntry* current_entry = first_entry;
 800d38c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d38e:	643b      	str	r3, [r7, #64]	@ 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 800d390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d39c:	d107      	bne.n	800d3ae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x294>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 800d39e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3a0:	697a      	ldr	r2, [r7, #20]
 800d3a2:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3aa:	609a      	str	r2, [r3, #8]
          break;
 800d3ac:	e018      	b.n	800d3e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6999      	ldr	r1, [r3, #24]
 800d3b2:	693a      	ldr	r2, [r7, #16]
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	005b      	lsls	r3, r3, #1
 800d3b8:	4413      	add	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	440b      	add	r3, r1
 800d3be:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	da07      	bge.n	800d3da <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c0>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 800d3ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3cc:	689a      	ldr	r2, [r3, #8]
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 800d3d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3d4:	697a      	ldr	r2, [r7, #20]
 800d3d6:	609a      	str	r2, [r3, #8]
          break;
 800d3d8:	e002      	b.n	800d3e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        current_entry = next_entry;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	643b      	str	r3, [r7, #64]	@ 0x40
      }
 800d3de:	e7d7      	b.n	800d390 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x276>
  for (int i = 1; i < buffer_count_; ++i) {
 800d3e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	f6ff af4c 	blt.w	800d28a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x170>
 800d3f2:	e000      	b.n	800d3f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2dc>
    return;
 800d3f4:	bf00      	nop
    }
  }
}
 800d3f6:	3760      	adds	r7, #96	@ 0x60
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7ff fe88 	bl	800d11a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d101      	bne.n	800d416 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 800d412:	2300      	movs	r3, #0
 800d414:	e036      	b.n	800d484 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x88>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	699a      	ldr	r2, [r3, #24]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	4619      	mov	r1, r3
 800d420:	460b      	mov	r3, r1
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	440b      	add	r3, r1
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	4413      	add	r3, r2
 800d42a:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	613b      	str	r3, [r7, #16]
  while (entry) {
 800d430:	e022      	b.n	800d478 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x7c>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	68da      	ldr	r2, [r3, #12]
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 800d43c:	4413      	add	r3, r2
 800d43e:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4413      	add	r3, r2
 800d44a:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	429a      	cmp	r2, r3
 800d452:	d901      	bls.n	800d458 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5c>
      max_size = current_size;
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d460:	d00e      	beq.n	800d480 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	699a      	ldr	r2, [r3, #24]
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	4619      	mov	r1, r3
 800d46c:	460b      	mov	r3, r1
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	440b      	add	r3, r1
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	617b      	str	r3, [r7, #20]
  while (entry) {
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1d9      	bne.n	800d432 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x36>
 800d47e:	e000      	b.n	800d482 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
      break;
 800d480:	bf00      	nop
  }
  return max_size;
 800d482:	693b      	ldr	r3, [r7, #16]
}
 800d484:	4618      	mov	r0, r3
 800d486:	3718      	adds	r7, #24
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv>:

void GreedyMemoryPlanner::PrintMemoryPlan() {
 800d48c:	b5b0      	push	{r4, r5, r7, lr}
 800d48e:	b0b0      	sub	sp, #192	@ 0xc0
 800d490:	af04      	add	r7, sp, #16
 800d492:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff fe40 	bl	800d11a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>

  for (int i = 0; i < buffer_count_; ++i) {
 800d49a:	2300      	movs	r3, #0
 800d49c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d4a0:	e046      	b.n	800d530 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xa4>
    char c = '*';
 800d4a2:	232a      	movs	r3, #42	@ 0x2a
 800d4a4:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
    if (requirements_[i].first_time_used != requirements_[i].last_time_used) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68da      	ldr	r2, [r3, #12]
 800d4ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4b0:	011b      	lsls	r3, r3, #4
 800d4b2:	4413      	add	r3, r2
 800d4b4:	689a      	ldr	r2, [r3, #8]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68d9      	ldr	r1, [r3, #12]
 800d4ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4be:	011b      	lsls	r3, r3, #4
 800d4c0:	440b      	add	r3, r1
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d006      	beq.n	800d4d6 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x4a>
      // not a scratch buffer nor subgraph output tensor
      c = GetOrdinalCharacter(i);
 800d4c8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800d4cc:	f7ff fc3a 	bl	800cd44 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
    }
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d", c,
 800d4d6:	f897 40ab 	ldrb.w	r4, [r7, #171]	@ 0xab
                i, requirements_[i].size, buffer_offsets_[i],
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	68da      	ldr	r2, [r3, #12]
 800d4de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4e2:	011b      	lsls	r3, r3, #4
 800d4e4:	4413      	add	r3, r2
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d", c,
 800d4e6:	681d      	ldr	r5, [r3, #0]
                i, requirements_[i].size, buffer_offsets_[i],
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4413      	add	r3, r2
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d", c,
 800d4f4:	681b      	ldr	r3, [r3, #0]
                requirements_[i].first_time_used,
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	68d1      	ldr	r1, [r2, #12]
 800d4fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d4fe:	0112      	lsls	r2, r2, #4
 800d500:	440a      	add	r2, r1
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d", c,
 800d502:	6892      	ldr	r2, [r2, #8]
                requirements_[i].last_time_used);
 800d504:	6879      	ldr	r1, [r7, #4]
 800d506:	68c8      	ldr	r0, [r1, #12]
 800d508:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800d50c:	0109      	lsls	r1, r1, #4
 800d50e:	4401      	add	r1, r0
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d", c,
 800d510:	68c9      	ldr	r1, [r1, #12]
 800d512:	9102      	str	r1, [sp, #8]
 800d514:	9201      	str	r2, [sp, #4]
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	462b      	mov	r3, r5
 800d51a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d51e:	4621      	mov	r1, r4
 800d520:	488f      	ldr	r0, [pc, #572]	@ (800d760 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x2d4>)
 800d522:	f7fd fac1 	bl	800aaa8 <_Z11MicroPrintfPKcz>
  for (int i = 0; i < buffer_count_; ++i) {
 800d526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d52a:	3301      	adds	r3, #1
 800d52c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d538:	429a      	cmp	r2, r3
 800d53a:	dbb2      	blt.n	800d4a2 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x16>
  }

  constexpr int kLineWidth = 80;
 800d53c:	2350      	movs	r3, #80	@ 0x50
 800d53e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int max_size = kLineWidth;
 800d542:	2350      	movs	r3, #80	@ 0x50
 800d544:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int max_time = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  for (int i = 0; i < buffer_count_; ++i) {
 800d54e:	2300      	movs	r3, #0
 800d550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d554:	e02b      	b.n	800d5ae <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x122>
    BufferRequirements* requirements = &requirements_[i];
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	68da      	ldr	r2, [r3, #12]
 800d55a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d55e:	011b      	lsls	r3, r3, #4
 800d560:	4413      	add	r3, r2
 800d562:	66fb      	str	r3, [r7, #108]	@ 0x6c
    const int offset = buffer_offsets_[i];
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d568:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	4413      	add	r3, r2
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	66bb      	str	r3, [r7, #104]	@ 0x68
    const int last_time_used = requirements->last_time_used;
 800d574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	667b      	str	r3, [r7, #100]	@ 0x64
    const int size = offset + requirements->size;
 800d57a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d580:	4413      	add	r3, r2
 800d582:	663b      	str	r3, [r7, #96]	@ 0x60
    if (size > max_size) {
 800d584:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d58a:	429a      	cmp	r2, r3
 800d58c:	dd02      	ble.n	800d594 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x108>
      max_size = size;
 800d58e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    }
    if (last_time_used > max_time) {
 800d594:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d59a:	429a      	cmp	r2, r3
 800d59c:	dd02      	ble.n	800d5a4 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x118>
      max_time = last_time_used;
 800d59e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  for (int i = 0; i < buffer_count_; ++i) {
 800d5a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	dbcd      	blt.n	800d556 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xca>
    }
  }

  char line[kLineWidth + 1];
  for (int t = 0; t <= max_time; ++t) {
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d5c0:	e0c1      	b.n	800d746 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x2ba>
    for (int c = 0; c < kLineWidth; ++c) {
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d5c8:	e00b      	b.n	800d5e2 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x156>
      line[c] = '.';
 800d5ca:	f107 020c 	add.w	r2, r7, #12
 800d5ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d5d2:	4413      	add	r3, r2
 800d5d4:	222e      	movs	r2, #46	@ 0x2e
 800d5d6:	701a      	strb	r2, [r3, #0]
    for (int c = 0; c < kLineWidth; ++c) {
 800d5d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d5dc:	3301      	adds	r3, #1
 800d5de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d5e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d5e6:	2b4f      	cmp	r3, #79	@ 0x4f
 800d5e8:	ddef      	ble.n	800d5ca <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x13e>
    }
    int memory_use = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    for (int i = 0; i < buffer_count_; ++i) {
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5f6:	e087      	b.n	800d708 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x27c>
      BufferRequirements* requirements = &requirements_[i];
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	68da      	ldr	r2, [r3, #12]
 800d5fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d600:	011b      	lsls	r3, r3, #4
 800d602:	4413      	add	r3, r2
 800d604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if ((t < requirements->first_time_used) ||
 800d608:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d612:	429a      	cmp	r2, r3
 800d614:	db70      	blt.n	800d6f8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x26c>
          (t > requirements->last_time_used)) {
 800d616:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d61a:	68db      	ldr	r3, [r3, #12]
      if ((t < requirements->first_time_used) ||
 800d61c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d620:	429a      	cmp	r2, r3
 800d622:	dc69      	bgt.n	800d6f8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x26c>
        continue;
      }
      const int offset = buffer_offsets_[i];
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	67fb      	str	r3, [r7, #124]	@ 0x7c
      if (offset == -1) {
 800d634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63a:	d05f      	beq.n	800d6fc <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x270>
        continue;
      }
      const int size = requirements->size;
 800d63c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	67bb      	str	r3, [r7, #120]	@ 0x78
      memory_use += size;
 800d644:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d64a:	4413      	add	r3, r2
 800d64c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      const int line_start = (offset * kLineWidth) / max_size;
 800d650:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d652:	4613      	mov	r3, r2
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	011b      	lsls	r3, r3, #4
 800d65a:	461a      	mov	r2, r3
 800d65c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d660:	fb92 f3f3 	sdiv	r3, r2, r3
 800d664:	677b      	str	r3, [r7, #116]	@ 0x74
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 800d666:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d66a:	441a      	add	r2, r3
 800d66c:	4613      	mov	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	4413      	add	r3, r2
 800d672:	011b      	lsls	r3, r3, #4
 800d674:	461a      	mov	r2, r3
 800d676:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d67a:	fb92 f3f3 	sdiv	r3, r2, r3
 800d67e:	673b      	str	r3, [r7, #112]	@ 0x70
      for (int n = line_start; n < line_end; ++n) {
 800d680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d686:	e031      	b.n	800d6ec <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x260>
        if (line[n] == '.') {
 800d688:	f107 020c 	add.w	r2, r7, #12
 800d68c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d690:	4413      	add	r3, r2
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	2b2e      	cmp	r3, #46	@ 0x2e
 800d696:	d11d      	bne.n	800d6d4 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x248>
          if (requirements->first_time_used == requirements->last_time_used) {
 800d698:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d69c:	689a      	ldr	r2, [r3, #8]
 800d69e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d107      	bne.n	800d6b8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x22c>
            // scratch buffer or subgraph output tensor
            line[n] = '*';
 800d6a8:	f107 020c 	add.w	r2, r7, #12
 800d6ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6b0:	4413      	add	r3, r2
 800d6b2:	222a      	movs	r2, #42	@ 0x2a
 800d6b4:	701a      	strb	r2, [r3, #0]
 800d6b6:	e014      	b.n	800d6e2 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x256>
          } else {
            line[n] = GetOrdinalCharacter(i);
 800d6b8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800d6bc:	f7ff fb42 	bl	800cd44 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	f107 020c 	add.w	r2, r7, #12
 800d6c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6cc:	4413      	add	r3, r2
 800d6ce:	460a      	mov	r2, r1
 800d6d0:	701a      	strb	r2, [r3, #0]
 800d6d2:	e006      	b.n	800d6e2 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x256>
          }
        } else {
          line[n] = '!';
 800d6d4:	f107 020c 	add.w	r2, r7, #12
 800d6d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6dc:	4413      	add	r3, r2
 800d6de:	2221      	movs	r2, #33	@ 0x21
 800d6e0:	701a      	strb	r2, [r3, #0]
      for (int n = line_start; n < line_end; ++n) {
 800d6e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d6f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	dbc8      	blt.n	800d688 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1fc>
 800d6f6:	e002      	b.n	800d6fe <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x272>
        continue;
 800d6f8:	bf00      	nop
 800d6fa:	e000      	b.n	800d6fe <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x272>
        continue;
 800d6fc:	bf00      	nop
    for (int i = 0; i < buffer_count_; ++i) {
 800d6fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d702:	3301      	adds	r3, #1
 800d704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d710:	429a      	cmp	r2, r3
 800d712:	f6ff af71 	blt.w	800d5f8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x16c>
        }
      }
    }
    line[kLineWidth] = 0;
 800d716:	2300      	movs	r3, #0
 800d718:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

    MicroPrintf("%4d: %s (%dk)", t, (const char*)line,
                (memory_use + 1023) / 1024);
 800d71c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d720:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
    MicroPrintf("%4d: %s (%dk)", t, (const char*)line,
 800d724:	2b00      	cmp	r3, #0
 800d726:	da01      	bge.n	800d72c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x2a0>
 800d728:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800d72c:	129b      	asrs	r3, r3, #10
 800d72e:	f107 020c 	add.w	r2, r7, #12
 800d732:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800d736:	480b      	ldr	r0, [pc, #44]	@ (800d764 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x2d8>)
 800d738:	f7fd f9b6 	bl	800aaa8 <_Z11MicroPrintfPKcz>
  for (int t = 0; t <= max_time; ++t) {
 800d73c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d740:	3301      	adds	r3, #1
 800d742:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d746:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d74a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d74e:	429a      	cmp	r2, r3
 800d750:	f77f af37 	ble.w	800d5c2 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x136>
  }
}
 800d754:	bf00      	nop
 800d756:	bf00      	nop
 800d758:	37b0      	adds	r7, #176	@ 0xb0
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bdb0      	pop	{r4, r5, r7, pc}
 800d75e:	bf00      	nop
 800d760:	08015e88 	.word	0x08015e88
 800d764:	08015ec4 	.word	0x08015ec4

0800d768 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	4618      	mov	r0, r3
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(int buffer_index,
                                                     int* offset) {
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
  CalculateOffsetsIfNeeded();
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f7ff fcc4 	bl	800d11a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	2b00      	cmp	r3, #0
 800d796:	db04      	blt.n	800d7a2 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x22>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	db08      	blt.n	800d7b4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x34>
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	68b9      	ldr	r1, [r7, #8]
 800d7aa:	4809      	ldr	r0, [pc, #36]	@ (800d7d0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x50>)
 800d7ac:	f7fd f97c 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                buffer_count_);
    return kTfLiteError;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e008      	b.n	800d7c6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x46>
  }
  *offset = buffer_offsets_[buffer_index];
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	08015ed4 	.word	0x08015ed4

0800d7d4 <_ZNK6tflite19LinearMemoryPlanner21preserves_all_tensorsEv>:
  int GetBufferCount() override;
  TfLiteStatus GetOffsetForBuffer(int buffer_index, int* offset) override;

  // Returns True because the LinearMemoryPlanner preserves all tensors after
  // invocation.
  bool preserves_all_tensors() const override { return true; }
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	2301      	movs	r3, #1
 800d7de:	4618      	mov	r0, r3
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr
	...

0800d7ec <_ZN6tflite19LinearMemoryPlannerC1Ev>:
namespace tflite {

// C++11 requires defining a constexpr static class member in a .cc file
constexpr int tflite::LinearMemoryPlanner::kMaxBufferCount;

LinearMemoryPlanner::LinearMemoryPlanner()
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
    : current_buffer_count_(0), next_free_offset_(0) {}
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7ff fa38 	bl	800cc6c <_ZN6tflite18MicroMemoryPlannerC1Ev>
 800d7fc:	4a09      	ldr	r2, [pc, #36]	@ (800d824 <_ZN6tflite19LinearMemoryPlannerC1Ev+0x38>)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d808:	461a      	mov	r2, r3
 800d80a:	2300      	movs	r3, #0
 800d80c:	6053      	str	r3, [r2, #4]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d814:	461a      	mov	r2, r3
 800d816:	2300      	movs	r3, #0
 800d818:	6093      	str	r3, [r2, #8]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4618      	mov	r0, r3
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	080165e4 	.word	0x080165e4

0800d828 <_ZN6tflite19LinearMemoryPlannerD1Ev>:
LinearMemoryPlanner::~LinearMemoryPlanner() {}
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	4a05      	ldr	r2, [pc, #20]	@ (800d848 <_ZN6tflite19LinearMemoryPlannerD1Ev+0x20>)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4618      	mov	r0, r3
 800d83a:	f7ff fa27 	bl	800cc8c <_ZN6tflite18MicroMemoryPlannerD1Ev>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4618      	mov	r0, r3
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	080165e4 	.word	0x080165e4

0800d84c <_ZN6tflite19LinearMemoryPlannerD0Ev>:
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff ffe7 	bl	800d828 <_ZN6tflite19LinearMemoryPlannerD1Ev>
 800d85a:	f241 010c 	movw	r1, #4108	@ 0x100c
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 f8fb 	bl	800da5a <_ZdlPvj>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii>:

TfLiteStatus LinearMemoryPlanner::AddBuffer(int size, int first_time_used,
                                            int last_time_used) {
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
 800d87c:	603b      	str	r3, [r7, #0]
  if (current_buffer_count_ >= kMaxBufferCount) {
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d88a:	db06      	blt.n	800d89a <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x2a>
    MicroPrintf("Too many buffers (max is %d)", kMaxBufferCount);
 800d88c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d890:	4814      	ldr	r0, [pc, #80]	@ (800d8e4 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x74>)
 800d892:	f7fd f909 	bl	800aaa8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800d896:	2301      	movs	r3, #1
 800d898:	e01f      	b.n	800d8da <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x6a>
  }
  buffer_offsets_[current_buffer_count_] = next_free_offset_;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d8a8:	6892      	ldr	r2, [r2, #8]
 800d8aa:	68f9      	ldr	r1, [r7, #12]
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	440b      	add	r3, r1
 800d8b0:	605a      	str	r2, [r3, #4]
  next_free_offset_ += size;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8b8:	689a      	ldr	r2, [r3, #8]
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	4413      	add	r3, r2
 800d8be:	68fa      	ldr	r2, [r7, #12]
 800d8c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d8c4:	6093      	str	r3, [r2, #8]
  ++current_buffer_count_;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d8d6:	6053      	str	r3, [r2, #4]
  return kTfLiteOk;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	08015f34 	.word	0x08015f34

0800d8e8 <_ZN6tflite19LinearMemoryPlanner20GetMaximumMemorySizeEv>:

size_t LinearMemoryPlanner::GetMaximumMemorySize() { return next_free_offset_; }
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <_ZN6tflite19LinearMemoryPlanner14GetBufferCountEv>:

int LinearMemoryPlanner::GetBufferCount() { return current_buffer_count_; }
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	4618      	mov	r0, r3
 800d916:	370c      	adds	r7, #12
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi>:

TfLiteStatus LinearMemoryPlanner::GetOffsetForBuffer(int buffer_index,
                                                     int* offset) {
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
  if ((buffer_index < 0) || (buffer_index >= current_buffer_count_)) {
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	db06      	blt.n	800d940 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x20>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	db0a      	blt.n	800d956 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x36>
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	461a      	mov	r2, r3
 800d94a:	68b9      	ldr	r1, [r7, #8]
 800d94c:	4808      	ldr	r0, [pc, #32]	@ (800d970 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x50>)
 800d94e:	f7fd f8ab 	bl	800aaa8 <_Z11MicroPrintfPKcz>
                current_buffer_count_);
    return kTfLiteError;
 800d952:	2301      	movs	r3, #1
 800d954:	e008      	b.n	800d968 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4413      	add	r3, r2
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	461a      	mov	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3710      	adds	r7, #16
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	08015f54 	.word	0x08015f54

0800d974 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>:
#include "tensorflow/lite/core/api/flatbuffer_conversions.h"
#include "tensorflow/lite/micro/tflite_bridge/micro_error_reporter.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type) {
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	6039      	str	r1, [r7, #0]
 800d97e:	71fb      	strb	r3, [r7, #7]
  return ConvertTensorType(tensor_type, type, tflite::GetMicroErrorReporter());
 800d980:	f000 f842 	bl	800da08 <_ZN6tflite21GetMicroErrorReporterEv>
 800d984:	4602      	mov	r2, r0
 800d986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7f6 fafd 	bl	8003f8c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800d992:	4603      	mov	r3, r0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>:

TfLiteStatus CallBuiltinParseFunction(TfLiteBridgeBuiltinParseFunction parser,
                                      const Operator* op,
                                      BuiltinDataAllocator* allocator,
                                      void** builtin_data) {
 800d99c:	b590      	push	{r4, r7, lr}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
 800d9a8:	603b      	str	r3, [r7, #0]
  return parser(op, tflite::GetMicroErrorReporter(), allocator, builtin_data);
 800d9aa:	f000 f82d 	bl	800da08 <_ZN6tflite21GetMicroErrorReporterEv>
 800d9ae:	4601      	mov	r1, r0
 800d9b0:	68fc      	ldr	r4, [r7, #12]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	68b8      	ldr	r0, [r7, #8]
 800d9b8:	47a0      	blx	r4
 800d9ba:	4603      	mov	r3, r0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3714      	adds	r7, #20
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd90      	pop	{r4, r7, pc}

0800d9c4 <_ZN6tflite13ErrorReporterC1Ev>:
class ErrorReporter {
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	4a04      	ldr	r2, [pc, #16]	@ (800d9e0 <_ZN6tflite13ErrorReporterC1Ev+0x1c>)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr
 800d9e0:	08015fc0 	.word	0x08015fc0

0800d9e4 <_ZN6tflite18MicroErrorReporterC1Ev>:
class MicroErrorReporter : public ErrorReporter {
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7ff ffe8 	bl	800d9c4 <_ZN6tflite13ErrorReporterC1Ev>
 800d9f4:	4a03      	ldr	r2, [pc, #12]	@ (800da04 <_ZN6tflite18MicroErrorReporterC1Ev+0x20>)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	601a      	str	r2, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	08016614 	.word	0x08016614

0800da08 <_ZN6tflite21GetMicroErrorReporterEv>:
tflite::MicroErrorReporter* error_reporter_ = nullptr;

}  // namespace

namespace tflite {
ErrorReporter* GetMicroErrorReporter() {
 800da08:	b598      	push	{r3, r4, r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  if (error_reporter_ == nullptr) {
 800da0c:	4b09      	ldr	r3, [pc, #36]	@ (800da34 <_ZN6tflite21GetMicroErrorReporterEv+0x2c>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10b      	bne.n	800da2c <_ZN6tflite21GetMicroErrorReporterEv+0x24>
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
 800da14:	4908      	ldr	r1, [pc, #32]	@ (800da38 <_ZN6tflite21GetMicroErrorReporterEv+0x30>)
 800da16:	2004      	movs	r0, #4
 800da18:	f7f6 f915 	bl	8003c46 <_ZnwjPv>
 800da1c:	4604      	mov	r4, r0
 800da1e:	2300      	movs	r3, #0
 800da20:	6023      	str	r3, [r4, #0]
 800da22:	4620      	mov	r0, r4
 800da24:	f7ff ffde 	bl	800d9e4 <_ZN6tflite18MicroErrorReporterC1Ev>
 800da28:	4b02      	ldr	r3, [pc, #8]	@ (800da34 <_ZN6tflite21GetMicroErrorReporterEv+0x2c>)
 800da2a:	601c      	str	r4, [r3, #0]
  }
  return error_reporter_;
 800da2c:	4b01      	ldr	r3, [pc, #4]	@ (800da34 <_ZN6tflite21GetMicroErrorReporterEv+0x2c>)
 800da2e:	681b      	ldr	r3, [r3, #0]
}
 800da30:	4618      	mov	r0, r3
 800da32:	bd98      	pop	{r3, r4, r7, pc}
 800da34:	2000184c 	.word	0x2000184c
 800da38:	20001848 	.word	0x20001848

0800da3c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:

int MicroErrorReporter::Report(const char* format, va_list args) {
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
  VMicroPrintf(format, args);
 800da48:	6879      	ldr	r1, [r7, #4]
 800da4a:	68b8      	ldr	r0, [r7, #8]
 800da4c:	f7fd f81a 	bl	800aa84 <_Z12VMicroPrintfPKcSt9__va_list>
  return 0;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <_ZdlPvj>:
 800da5a:	f000 b80f 	b.w	800da7c <_ZdlPv>

0800da5e <__cxa_guard_acquire>:
 800da5e:	6802      	ldr	r2, [r0, #0]
 800da60:	07d2      	lsls	r2, r2, #31
 800da62:	4603      	mov	r3, r0
 800da64:	d405      	bmi.n	800da72 <__cxa_guard_acquire+0x14>
 800da66:	7842      	ldrb	r2, [r0, #1]
 800da68:	b102      	cbz	r2, 800da6c <__cxa_guard_acquire+0xe>
 800da6a:	deff      	udf	#255	@ 0xff
 800da6c:	2001      	movs	r0, #1
 800da6e:	7058      	strb	r0, [r3, #1]
 800da70:	4770      	bx	lr
 800da72:	2000      	movs	r0, #0
 800da74:	4770      	bx	lr

0800da76 <__cxa_guard_release>:
 800da76:	2301      	movs	r3, #1
 800da78:	6003      	str	r3, [r0, #0]
 800da7a:	4770      	bx	lr

0800da7c <_ZdlPv>:
 800da7c:	f000 b8e6 	b.w	800dc4c <free>

0800da80 <frexp>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	2100      	movs	r1, #0
 800da84:	ec55 4b10 	vmov	r4, r5, d0
 800da88:	6001      	str	r1, [r0, #0]
 800da8a:	4914      	ldr	r1, [pc, #80]	@ (800dadc <frexp+0x5c>)
 800da8c:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800da90:	428b      	cmp	r3, r1
 800da92:	4606      	mov	r6, r0
 800da94:	462a      	mov	r2, r5
 800da96:	d81e      	bhi.n	800dad6 <frexp+0x56>
 800da98:	4621      	mov	r1, r4
 800da9a:	4319      	orrs	r1, r3
 800da9c:	d01b      	beq.n	800dad6 <frexp+0x56>
 800da9e:	4910      	ldr	r1, [pc, #64]	@ (800dae0 <frexp+0x60>)
 800daa0:	4029      	ands	r1, r5
 800daa2:	b961      	cbnz	r1, 800dabe <frexp+0x3e>
 800daa4:	4b0f      	ldr	r3, [pc, #60]	@ (800dae4 <frexp+0x64>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	4620      	mov	r0, r4
 800daaa:	4629      	mov	r1, r5
 800daac:	f7f2 fdbc 	bl	8000628 <__aeabi_dmul>
 800dab0:	460a      	mov	r2, r1
 800dab2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dab6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800daba:	4604      	mov	r4, r0
 800dabc:	6031      	str	r1, [r6, #0]
 800dabe:	6831      	ldr	r1, [r6, #0]
 800dac0:	151b      	asrs	r3, r3, #20
 800dac2:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800dac6:	f36f 521e 	bfc	r2, #20, #11
 800daca:	4419      	add	r1, r3
 800dacc:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dad0:	6031      	str	r1, [r6, #0]
 800dad2:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800dad6:	ec45 4b10 	vmov	d0, r4, r5
 800dada:	bd70      	pop	{r4, r5, r6, pc}
 800dadc:	7fefffff 	.word	0x7fefffff
 800dae0:	7ff00000 	.word	0x7ff00000
 800dae4:	43500000 	.word	0x43500000

0800dae8 <round>:
 800dae8:	ec51 0b10 	vmov	r0, r1, d0
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800daf2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800daf6:	2a13      	cmp	r2, #19
 800daf8:	460b      	mov	r3, r1
 800dafa:	4605      	mov	r5, r0
 800dafc:	dc1b      	bgt.n	800db36 <round+0x4e>
 800dafe:	2a00      	cmp	r2, #0
 800db00:	da0b      	bge.n	800db1a <round+0x32>
 800db02:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800db06:	3201      	adds	r2, #1
 800db08:	bf04      	itt	eq
 800db0a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800db0e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800db12:	2200      	movs	r2, #0
 800db14:	4619      	mov	r1, r3
 800db16:	4610      	mov	r0, r2
 800db18:	e015      	b.n	800db46 <round+0x5e>
 800db1a:	4c15      	ldr	r4, [pc, #84]	@ (800db70 <round+0x88>)
 800db1c:	4114      	asrs	r4, r2
 800db1e:	ea04 0601 	and.w	r6, r4, r1
 800db22:	4306      	orrs	r6, r0
 800db24:	d00f      	beq.n	800db46 <round+0x5e>
 800db26:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800db2a:	fa41 f202 	asr.w	r2, r1, r2
 800db2e:	4413      	add	r3, r2
 800db30:	ea23 0304 	bic.w	r3, r3, r4
 800db34:	e7ed      	b.n	800db12 <round+0x2a>
 800db36:	2a33      	cmp	r2, #51	@ 0x33
 800db38:	dd08      	ble.n	800db4c <round+0x64>
 800db3a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800db3e:	d102      	bne.n	800db46 <round+0x5e>
 800db40:	4602      	mov	r2, r0
 800db42:	f7f2 fbbb 	bl	80002bc <__adddf3>
 800db46:	ec41 0b10 	vmov	d0, r0, r1
 800db4a:	bd70      	pop	{r4, r5, r6, pc}
 800db4c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800db50:	f04f 34ff 	mov.w	r4, #4294967295
 800db54:	40f4      	lsrs	r4, r6
 800db56:	4204      	tst	r4, r0
 800db58:	d0f5      	beq.n	800db46 <round+0x5e>
 800db5a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800db5e:	2201      	movs	r2, #1
 800db60:	408a      	lsls	r2, r1
 800db62:	1952      	adds	r2, r2, r5
 800db64:	bf28      	it	cs
 800db66:	3301      	addcs	r3, #1
 800db68:	ea22 0204 	bic.w	r2, r2, r4
 800db6c:	e7d2      	b.n	800db14 <round+0x2c>
 800db6e:	bf00      	nop
 800db70:	000fffff 	.word	0x000fffff

0800db74 <roundf>:
 800db74:	ee10 0a10 	vmov	r0, s0
 800db78:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800db7c:	3a7f      	subs	r2, #127	@ 0x7f
 800db7e:	2a16      	cmp	r2, #22
 800db80:	dc15      	bgt.n	800dbae <roundf+0x3a>
 800db82:	2a00      	cmp	r2, #0
 800db84:	da08      	bge.n	800db98 <roundf+0x24>
 800db86:	3201      	adds	r2, #1
 800db88:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800db8c:	d101      	bne.n	800db92 <roundf+0x1e>
 800db8e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800db92:	ee00 3a10 	vmov	s0, r3
 800db96:	4770      	bx	lr
 800db98:	4907      	ldr	r1, [pc, #28]	@ (800dbb8 <roundf+0x44>)
 800db9a:	4111      	asrs	r1, r2
 800db9c:	4201      	tst	r1, r0
 800db9e:	d0fa      	beq.n	800db96 <roundf+0x22>
 800dba0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800dba4:	4113      	asrs	r3, r2
 800dba6:	4403      	add	r3, r0
 800dba8:	ea23 0301 	bic.w	r3, r3, r1
 800dbac:	e7f1      	b.n	800db92 <roundf+0x1e>
 800dbae:	2a80      	cmp	r2, #128	@ 0x80
 800dbb0:	d1f1      	bne.n	800db96 <roundf+0x22>
 800dbb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dbb6:	4770      	bx	lr
 800dbb8:	007fffff 	.word	0x007fffff

0800dbbc <abort>:
 800dbbc:	b508      	push	{r3, lr}
 800dbbe:	2006      	movs	r0, #6
 800dbc0:	f001 f8f4 	bl	800edac <raise>
 800dbc4:	2001      	movs	r0, #1
 800dbc6:	f7f4 f88c 	bl	8001ce2 <_exit>
	...

0800dbcc <__assert_func>:
 800dbcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbce:	4614      	mov	r4, r2
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	4b09      	ldr	r3, [pc, #36]	@ (800dbf8 <__assert_func+0x2c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	68d8      	ldr	r0, [r3, #12]
 800dbda:	b14c      	cbz	r4, 800dbf0 <__assert_func+0x24>
 800dbdc:	4b07      	ldr	r3, [pc, #28]	@ (800dbfc <__assert_func+0x30>)
 800dbde:	9100      	str	r1, [sp, #0]
 800dbe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbe4:	4906      	ldr	r1, [pc, #24]	@ (800dc00 <__assert_func+0x34>)
 800dbe6:	462b      	mov	r3, r5
 800dbe8:	f000 ff5a 	bl	800eaa0 <fiprintf>
 800dbec:	f7ff ffe6 	bl	800dbbc <abort>
 800dbf0:	4b04      	ldr	r3, [pc, #16]	@ (800dc04 <__assert_func+0x38>)
 800dbf2:	461c      	mov	r4, r3
 800dbf4:	e7f3      	b.n	800dbde <__assert_func+0x12>
 800dbf6:	bf00      	nop
 800dbf8:	20000c80 	.word	0x20000c80
 800dbfc:	08016620 	.word	0x08016620
 800dc00:	0801662d 	.word	0x0801662d
 800dc04:	0801665b 	.word	0x0801665b

0800dc08 <atexit>:
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4601      	mov	r1, r0
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f001 b97e 	b.w	800ef10 <__register_exitproc>

0800dc14 <_calloc_r>:
 800dc14:	b570      	push	{r4, r5, r6, lr}
 800dc16:	fba1 5402 	umull	r5, r4, r1, r2
 800dc1a:	b934      	cbnz	r4, 800dc2a <_calloc_r+0x16>
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	f000 f83f 	bl	800dca0 <_malloc_r>
 800dc22:	4606      	mov	r6, r0
 800dc24:	b928      	cbnz	r0, 800dc32 <_calloc_r+0x1e>
 800dc26:	4630      	mov	r0, r6
 800dc28:	bd70      	pop	{r4, r5, r6, pc}
 800dc2a:	220c      	movs	r2, #12
 800dc2c:	6002      	str	r2, [r0, #0]
 800dc2e:	2600      	movs	r6, #0
 800dc30:	e7f9      	b.n	800dc26 <_calloc_r+0x12>
 800dc32:	462a      	mov	r2, r5
 800dc34:	4621      	mov	r1, r4
 800dc36:	f001 f877 	bl	800ed28 <memset>
 800dc3a:	e7f4      	b.n	800dc26 <_calloc_r+0x12>

0800dc3c <malloc>:
 800dc3c:	4b02      	ldr	r3, [pc, #8]	@ (800dc48 <malloc+0xc>)
 800dc3e:	4601      	mov	r1, r0
 800dc40:	6818      	ldr	r0, [r3, #0]
 800dc42:	f000 b82d 	b.w	800dca0 <_malloc_r>
 800dc46:	bf00      	nop
 800dc48:	20000c80 	.word	0x20000c80

0800dc4c <free>:
 800dc4c:	4b02      	ldr	r3, [pc, #8]	@ (800dc58 <free+0xc>)
 800dc4e:	4601      	mov	r1, r0
 800dc50:	6818      	ldr	r0, [r3, #0]
 800dc52:	f002 b811 	b.w	800fc78 <_free_r>
 800dc56:	bf00      	nop
 800dc58:	20000c80 	.word	0x20000c80

0800dc5c <sbrk_aligned>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	4e0f      	ldr	r6, [pc, #60]	@ (800dc9c <sbrk_aligned+0x40>)
 800dc60:	460c      	mov	r4, r1
 800dc62:	6831      	ldr	r1, [r6, #0]
 800dc64:	4605      	mov	r5, r0
 800dc66:	b911      	cbnz	r1, 800dc6e <sbrk_aligned+0x12>
 800dc68:	f001 f8f4 	bl	800ee54 <_sbrk_r>
 800dc6c:	6030      	str	r0, [r6, #0]
 800dc6e:	4621      	mov	r1, r4
 800dc70:	4628      	mov	r0, r5
 800dc72:	f001 f8ef 	bl	800ee54 <_sbrk_r>
 800dc76:	1c43      	adds	r3, r0, #1
 800dc78:	d103      	bne.n	800dc82 <sbrk_aligned+0x26>
 800dc7a:	f04f 34ff 	mov.w	r4, #4294967295
 800dc7e:	4620      	mov	r0, r4
 800dc80:	bd70      	pop	{r4, r5, r6, pc}
 800dc82:	1cc4      	adds	r4, r0, #3
 800dc84:	f024 0403 	bic.w	r4, r4, #3
 800dc88:	42a0      	cmp	r0, r4
 800dc8a:	d0f8      	beq.n	800dc7e <sbrk_aligned+0x22>
 800dc8c:	1a21      	subs	r1, r4, r0
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f001 f8e0 	bl	800ee54 <_sbrk_r>
 800dc94:	3001      	adds	r0, #1
 800dc96:	d1f2      	bne.n	800dc7e <sbrk_aligned+0x22>
 800dc98:	e7ef      	b.n	800dc7a <sbrk_aligned+0x1e>
 800dc9a:	bf00      	nop
 800dc9c:	20001850 	.word	0x20001850

0800dca0 <_malloc_r>:
 800dca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dca4:	1ccd      	adds	r5, r1, #3
 800dca6:	f025 0503 	bic.w	r5, r5, #3
 800dcaa:	3508      	adds	r5, #8
 800dcac:	2d0c      	cmp	r5, #12
 800dcae:	bf38      	it	cc
 800dcb0:	250c      	movcc	r5, #12
 800dcb2:	2d00      	cmp	r5, #0
 800dcb4:	4606      	mov	r6, r0
 800dcb6:	db01      	blt.n	800dcbc <_malloc_r+0x1c>
 800dcb8:	42a9      	cmp	r1, r5
 800dcba:	d904      	bls.n	800dcc6 <_malloc_r+0x26>
 800dcbc:	230c      	movs	r3, #12
 800dcbe:	6033      	str	r3, [r6, #0]
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd9c <_malloc_r+0xfc>
 800dcca:	f000 f869 	bl	800dda0 <__malloc_lock>
 800dcce:	f8d8 3000 	ldr.w	r3, [r8]
 800dcd2:	461c      	mov	r4, r3
 800dcd4:	bb44      	cbnz	r4, 800dd28 <_malloc_r+0x88>
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	4630      	mov	r0, r6
 800dcda:	f7ff ffbf 	bl	800dc5c <sbrk_aligned>
 800dcde:	1c43      	adds	r3, r0, #1
 800dce0:	4604      	mov	r4, r0
 800dce2:	d158      	bne.n	800dd96 <_malloc_r+0xf6>
 800dce4:	f8d8 4000 	ldr.w	r4, [r8]
 800dce8:	4627      	mov	r7, r4
 800dcea:	2f00      	cmp	r7, #0
 800dcec:	d143      	bne.n	800dd76 <_malloc_r+0xd6>
 800dcee:	2c00      	cmp	r4, #0
 800dcf0:	d04b      	beq.n	800dd8a <_malloc_r+0xea>
 800dcf2:	6823      	ldr	r3, [r4, #0]
 800dcf4:	4639      	mov	r1, r7
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	eb04 0903 	add.w	r9, r4, r3
 800dcfc:	f001 f8aa 	bl	800ee54 <_sbrk_r>
 800dd00:	4581      	cmp	r9, r0
 800dd02:	d142      	bne.n	800dd8a <_malloc_r+0xea>
 800dd04:	6821      	ldr	r1, [r4, #0]
 800dd06:	1a6d      	subs	r5, r5, r1
 800dd08:	4629      	mov	r1, r5
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f7ff ffa6 	bl	800dc5c <sbrk_aligned>
 800dd10:	3001      	adds	r0, #1
 800dd12:	d03a      	beq.n	800dd8a <_malloc_r+0xea>
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	442b      	add	r3, r5
 800dd18:	6023      	str	r3, [r4, #0]
 800dd1a:	f8d8 3000 	ldr.w	r3, [r8]
 800dd1e:	685a      	ldr	r2, [r3, #4]
 800dd20:	bb62      	cbnz	r2, 800dd7c <_malloc_r+0xdc>
 800dd22:	f8c8 7000 	str.w	r7, [r8]
 800dd26:	e00f      	b.n	800dd48 <_malloc_r+0xa8>
 800dd28:	6822      	ldr	r2, [r4, #0]
 800dd2a:	1b52      	subs	r2, r2, r5
 800dd2c:	d420      	bmi.n	800dd70 <_malloc_r+0xd0>
 800dd2e:	2a0b      	cmp	r2, #11
 800dd30:	d917      	bls.n	800dd62 <_malloc_r+0xc2>
 800dd32:	1961      	adds	r1, r4, r5
 800dd34:	42a3      	cmp	r3, r4
 800dd36:	6025      	str	r5, [r4, #0]
 800dd38:	bf18      	it	ne
 800dd3a:	6059      	strne	r1, [r3, #4]
 800dd3c:	6863      	ldr	r3, [r4, #4]
 800dd3e:	bf08      	it	eq
 800dd40:	f8c8 1000 	streq.w	r1, [r8]
 800dd44:	5162      	str	r2, [r4, r5]
 800dd46:	604b      	str	r3, [r1, #4]
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f000 f82f 	bl	800ddac <__malloc_unlock>
 800dd4e:	f104 000b 	add.w	r0, r4, #11
 800dd52:	1d23      	adds	r3, r4, #4
 800dd54:	f020 0007 	bic.w	r0, r0, #7
 800dd58:	1ac2      	subs	r2, r0, r3
 800dd5a:	bf1c      	itt	ne
 800dd5c:	1a1b      	subne	r3, r3, r0
 800dd5e:	50a3      	strne	r3, [r4, r2]
 800dd60:	e7af      	b.n	800dcc2 <_malloc_r+0x22>
 800dd62:	6862      	ldr	r2, [r4, #4]
 800dd64:	42a3      	cmp	r3, r4
 800dd66:	bf0c      	ite	eq
 800dd68:	f8c8 2000 	streq.w	r2, [r8]
 800dd6c:	605a      	strne	r2, [r3, #4]
 800dd6e:	e7eb      	b.n	800dd48 <_malloc_r+0xa8>
 800dd70:	4623      	mov	r3, r4
 800dd72:	6864      	ldr	r4, [r4, #4]
 800dd74:	e7ae      	b.n	800dcd4 <_malloc_r+0x34>
 800dd76:	463c      	mov	r4, r7
 800dd78:	687f      	ldr	r7, [r7, #4]
 800dd7a:	e7b6      	b.n	800dcea <_malloc_r+0x4a>
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	42a3      	cmp	r3, r4
 800dd82:	d1fb      	bne.n	800dd7c <_malloc_r+0xdc>
 800dd84:	2300      	movs	r3, #0
 800dd86:	6053      	str	r3, [r2, #4]
 800dd88:	e7de      	b.n	800dd48 <_malloc_r+0xa8>
 800dd8a:	230c      	movs	r3, #12
 800dd8c:	6033      	str	r3, [r6, #0]
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f000 f80c 	bl	800ddac <__malloc_unlock>
 800dd94:	e794      	b.n	800dcc0 <_malloc_r+0x20>
 800dd96:	6005      	str	r5, [r0, #0]
 800dd98:	e7d6      	b.n	800dd48 <_malloc_r+0xa8>
 800dd9a:	bf00      	nop
 800dd9c:	20001854 	.word	0x20001854

0800dda0 <__malloc_lock>:
 800dda0:	4801      	ldr	r0, [pc, #4]	@ (800dda8 <__malloc_lock+0x8>)
 800dda2:	f001 b8a4 	b.w	800eeee <__retarget_lock_acquire_recursive>
 800dda6:	bf00      	nop
 800dda8:	20001998 	.word	0x20001998

0800ddac <__malloc_unlock>:
 800ddac:	4801      	ldr	r0, [pc, #4]	@ (800ddb4 <__malloc_unlock+0x8>)
 800ddae:	f001 b89f 	b.w	800eef0 <__retarget_lock_release_recursive>
 800ddb2:	bf00      	nop
 800ddb4:	20001998 	.word	0x20001998

0800ddb8 <_realloc_r>:
 800ddb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddbc:	4607      	mov	r7, r0
 800ddbe:	4614      	mov	r4, r2
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	b921      	cbnz	r1, 800ddce <_realloc_r+0x16>
 800ddc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc8:	4611      	mov	r1, r2
 800ddca:	f7ff bf69 	b.w	800dca0 <_malloc_r>
 800ddce:	b92a      	cbnz	r2, 800dddc <_realloc_r+0x24>
 800ddd0:	f001 ff52 	bl	800fc78 <_free_r>
 800ddd4:	4625      	mov	r5, r4
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dddc:	f002 fb10 	bl	8010400 <_malloc_usable_size_r>
 800dde0:	4284      	cmp	r4, r0
 800dde2:	4606      	mov	r6, r0
 800dde4:	d802      	bhi.n	800ddec <_realloc_r+0x34>
 800dde6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddea:	d8f4      	bhi.n	800ddd6 <_realloc_r+0x1e>
 800ddec:	4621      	mov	r1, r4
 800ddee:	4638      	mov	r0, r7
 800ddf0:	f7ff ff56 	bl	800dca0 <_malloc_r>
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	b908      	cbnz	r0, 800ddfc <_realloc_r+0x44>
 800ddf8:	4645      	mov	r5, r8
 800ddfa:	e7ec      	b.n	800ddd6 <_realloc_r+0x1e>
 800ddfc:	42b4      	cmp	r4, r6
 800ddfe:	4622      	mov	r2, r4
 800de00:	4629      	mov	r1, r5
 800de02:	bf28      	it	cs
 800de04:	4632      	movcs	r2, r6
 800de06:	f001 f874 	bl	800eef2 <memcpy>
 800de0a:	4629      	mov	r1, r5
 800de0c:	4638      	mov	r0, r7
 800de0e:	f001 ff33 	bl	800fc78 <_free_r>
 800de12:	e7f1      	b.n	800ddf8 <_realloc_r+0x40>

0800de14 <__cvt>:
 800de14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de18:	ec57 6b10 	vmov	r6, r7, d0
 800de1c:	2f00      	cmp	r7, #0
 800de1e:	460c      	mov	r4, r1
 800de20:	4619      	mov	r1, r3
 800de22:	463b      	mov	r3, r7
 800de24:	bfbb      	ittet	lt
 800de26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800de2a:	461f      	movlt	r7, r3
 800de2c:	2300      	movge	r3, #0
 800de2e:	232d      	movlt	r3, #45	@ 0x2d
 800de30:	700b      	strb	r3, [r1, #0]
 800de32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800de38:	4691      	mov	r9, r2
 800de3a:	f023 0820 	bic.w	r8, r3, #32
 800de3e:	bfbc      	itt	lt
 800de40:	4632      	movlt	r2, r6
 800de42:	4616      	movlt	r6, r2
 800de44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800de48:	d005      	beq.n	800de56 <__cvt+0x42>
 800de4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800de4e:	d100      	bne.n	800de52 <__cvt+0x3e>
 800de50:	3401      	adds	r4, #1
 800de52:	2102      	movs	r1, #2
 800de54:	e000      	b.n	800de58 <__cvt+0x44>
 800de56:	2103      	movs	r1, #3
 800de58:	ab03      	add	r3, sp, #12
 800de5a:	9301      	str	r3, [sp, #4]
 800de5c:	ab02      	add	r3, sp, #8
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	ec47 6b10 	vmov	d0, r6, r7
 800de64:	4653      	mov	r3, sl
 800de66:	4622      	mov	r2, r4
 800de68:	f001 f936 	bl	800f0d8 <_dtoa_r>
 800de6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800de70:	4605      	mov	r5, r0
 800de72:	d119      	bne.n	800dea8 <__cvt+0x94>
 800de74:	f019 0f01 	tst.w	r9, #1
 800de78:	d00e      	beq.n	800de98 <__cvt+0x84>
 800de7a:	eb00 0904 	add.w	r9, r0, r4
 800de7e:	2200      	movs	r2, #0
 800de80:	2300      	movs	r3, #0
 800de82:	4630      	mov	r0, r6
 800de84:	4639      	mov	r1, r7
 800de86:	f7f2 fe37 	bl	8000af8 <__aeabi_dcmpeq>
 800de8a:	b108      	cbz	r0, 800de90 <__cvt+0x7c>
 800de8c:	f8cd 900c 	str.w	r9, [sp, #12]
 800de90:	2230      	movs	r2, #48	@ 0x30
 800de92:	9b03      	ldr	r3, [sp, #12]
 800de94:	454b      	cmp	r3, r9
 800de96:	d31e      	bcc.n	800ded6 <__cvt+0xc2>
 800de98:	9b03      	ldr	r3, [sp, #12]
 800de9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de9c:	1b5b      	subs	r3, r3, r5
 800de9e:	4628      	mov	r0, r5
 800dea0:	6013      	str	r3, [r2, #0]
 800dea2:	b004      	add	sp, #16
 800dea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800deac:	eb00 0904 	add.w	r9, r0, r4
 800deb0:	d1e5      	bne.n	800de7e <__cvt+0x6a>
 800deb2:	7803      	ldrb	r3, [r0, #0]
 800deb4:	2b30      	cmp	r3, #48	@ 0x30
 800deb6:	d10a      	bne.n	800dece <__cvt+0xba>
 800deb8:	2200      	movs	r2, #0
 800deba:	2300      	movs	r3, #0
 800debc:	4630      	mov	r0, r6
 800debe:	4639      	mov	r1, r7
 800dec0:	f7f2 fe1a 	bl	8000af8 <__aeabi_dcmpeq>
 800dec4:	b918      	cbnz	r0, 800dece <__cvt+0xba>
 800dec6:	f1c4 0401 	rsb	r4, r4, #1
 800deca:	f8ca 4000 	str.w	r4, [sl]
 800dece:	f8da 3000 	ldr.w	r3, [sl]
 800ded2:	4499      	add	r9, r3
 800ded4:	e7d3      	b.n	800de7e <__cvt+0x6a>
 800ded6:	1c59      	adds	r1, r3, #1
 800ded8:	9103      	str	r1, [sp, #12]
 800deda:	701a      	strb	r2, [r3, #0]
 800dedc:	e7d9      	b.n	800de92 <__cvt+0x7e>

0800dede <__exponent>:
 800dede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dee0:	2900      	cmp	r1, #0
 800dee2:	bfba      	itte	lt
 800dee4:	4249      	neglt	r1, r1
 800dee6:	232d      	movlt	r3, #45	@ 0x2d
 800dee8:	232b      	movge	r3, #43	@ 0x2b
 800deea:	2909      	cmp	r1, #9
 800deec:	7002      	strb	r2, [r0, #0]
 800deee:	7043      	strb	r3, [r0, #1]
 800def0:	dd29      	ble.n	800df46 <__exponent+0x68>
 800def2:	f10d 0307 	add.w	r3, sp, #7
 800def6:	461d      	mov	r5, r3
 800def8:	270a      	movs	r7, #10
 800defa:	461a      	mov	r2, r3
 800defc:	fbb1 f6f7 	udiv	r6, r1, r7
 800df00:	fb07 1416 	mls	r4, r7, r6, r1
 800df04:	3430      	adds	r4, #48	@ 0x30
 800df06:	f802 4c01 	strb.w	r4, [r2, #-1]
 800df0a:	460c      	mov	r4, r1
 800df0c:	2c63      	cmp	r4, #99	@ 0x63
 800df0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800df12:	4631      	mov	r1, r6
 800df14:	dcf1      	bgt.n	800defa <__exponent+0x1c>
 800df16:	3130      	adds	r1, #48	@ 0x30
 800df18:	1e94      	subs	r4, r2, #2
 800df1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800df1e:	1c41      	adds	r1, r0, #1
 800df20:	4623      	mov	r3, r4
 800df22:	42ab      	cmp	r3, r5
 800df24:	d30a      	bcc.n	800df3c <__exponent+0x5e>
 800df26:	f10d 0309 	add.w	r3, sp, #9
 800df2a:	1a9b      	subs	r3, r3, r2
 800df2c:	42ac      	cmp	r4, r5
 800df2e:	bf88      	it	hi
 800df30:	2300      	movhi	r3, #0
 800df32:	3302      	adds	r3, #2
 800df34:	4403      	add	r3, r0
 800df36:	1a18      	subs	r0, r3, r0
 800df38:	b003      	add	sp, #12
 800df3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800df40:	f801 6f01 	strb.w	r6, [r1, #1]!
 800df44:	e7ed      	b.n	800df22 <__exponent+0x44>
 800df46:	2330      	movs	r3, #48	@ 0x30
 800df48:	3130      	adds	r1, #48	@ 0x30
 800df4a:	7083      	strb	r3, [r0, #2]
 800df4c:	70c1      	strb	r1, [r0, #3]
 800df4e:	1d03      	adds	r3, r0, #4
 800df50:	e7f1      	b.n	800df36 <__exponent+0x58>
	...

0800df54 <_printf_float>:
 800df54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df58:	b08d      	sub	sp, #52	@ 0x34
 800df5a:	460c      	mov	r4, r1
 800df5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800df60:	4616      	mov	r6, r2
 800df62:	461f      	mov	r7, r3
 800df64:	4605      	mov	r5, r0
 800df66:	f000 ff29 	bl	800edbc <_localeconv_r>
 800df6a:	6803      	ldr	r3, [r0, #0]
 800df6c:	9304      	str	r3, [sp, #16]
 800df6e:	4618      	mov	r0, r3
 800df70:	f7f2 f996 	bl	80002a0 <strlen>
 800df74:	2300      	movs	r3, #0
 800df76:	930a      	str	r3, [sp, #40]	@ 0x28
 800df78:	f8d8 3000 	ldr.w	r3, [r8]
 800df7c:	9005      	str	r0, [sp, #20]
 800df7e:	3307      	adds	r3, #7
 800df80:	f023 0307 	bic.w	r3, r3, #7
 800df84:	f103 0208 	add.w	r2, r3, #8
 800df88:	f894 a018 	ldrb.w	sl, [r4, #24]
 800df8c:	f8d4 b000 	ldr.w	fp, [r4]
 800df90:	f8c8 2000 	str.w	r2, [r8]
 800df94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800df9c:	9307      	str	r3, [sp, #28]
 800df9e:	f8cd 8018 	str.w	r8, [sp, #24]
 800dfa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dfa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfaa:	4b9c      	ldr	r3, [pc, #624]	@ (800e21c <_printf_float+0x2c8>)
 800dfac:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb0:	f7f2 fdd4 	bl	8000b5c <__aeabi_dcmpun>
 800dfb4:	bb70      	cbnz	r0, 800e014 <_printf_float+0xc0>
 800dfb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfba:	4b98      	ldr	r3, [pc, #608]	@ (800e21c <_printf_float+0x2c8>)
 800dfbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc0:	f7f2 fdae 	bl	8000b20 <__aeabi_dcmple>
 800dfc4:	bb30      	cbnz	r0, 800e014 <_printf_float+0xc0>
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4640      	mov	r0, r8
 800dfcc:	4649      	mov	r1, r9
 800dfce:	f7f2 fd9d 	bl	8000b0c <__aeabi_dcmplt>
 800dfd2:	b110      	cbz	r0, 800dfda <_printf_float+0x86>
 800dfd4:	232d      	movs	r3, #45	@ 0x2d
 800dfd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfda:	4a91      	ldr	r2, [pc, #580]	@ (800e220 <_printf_float+0x2cc>)
 800dfdc:	4b91      	ldr	r3, [pc, #580]	@ (800e224 <_printf_float+0x2d0>)
 800dfde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dfe2:	bf8c      	ite	hi
 800dfe4:	4690      	movhi	r8, r2
 800dfe6:	4698      	movls	r8, r3
 800dfe8:	2303      	movs	r3, #3
 800dfea:	6123      	str	r3, [r4, #16]
 800dfec:	f02b 0304 	bic.w	r3, fp, #4
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	f04f 0900 	mov.w	r9, #0
 800dff6:	9700      	str	r7, [sp, #0]
 800dff8:	4633      	mov	r3, r6
 800dffa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dffc:	4621      	mov	r1, r4
 800dffe:	4628      	mov	r0, r5
 800e000:	f000 fb1e 	bl	800e640 <_printf_common>
 800e004:	3001      	adds	r0, #1
 800e006:	f040 808d 	bne.w	800e124 <_printf_float+0x1d0>
 800e00a:	f04f 30ff 	mov.w	r0, #4294967295
 800e00e:	b00d      	add	sp, #52	@ 0x34
 800e010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e014:	4642      	mov	r2, r8
 800e016:	464b      	mov	r3, r9
 800e018:	4640      	mov	r0, r8
 800e01a:	4649      	mov	r1, r9
 800e01c:	f7f2 fd9e 	bl	8000b5c <__aeabi_dcmpun>
 800e020:	b140      	cbz	r0, 800e034 <_printf_float+0xe0>
 800e022:	464b      	mov	r3, r9
 800e024:	2b00      	cmp	r3, #0
 800e026:	bfbc      	itt	lt
 800e028:	232d      	movlt	r3, #45	@ 0x2d
 800e02a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e02e:	4a7e      	ldr	r2, [pc, #504]	@ (800e228 <_printf_float+0x2d4>)
 800e030:	4b7e      	ldr	r3, [pc, #504]	@ (800e22c <_printf_float+0x2d8>)
 800e032:	e7d4      	b.n	800dfde <_printf_float+0x8a>
 800e034:	6863      	ldr	r3, [r4, #4]
 800e036:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e03a:	9206      	str	r2, [sp, #24]
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	d13b      	bne.n	800e0b8 <_printf_float+0x164>
 800e040:	2306      	movs	r3, #6
 800e042:	6063      	str	r3, [r4, #4]
 800e044:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e048:	2300      	movs	r3, #0
 800e04a:	6022      	str	r2, [r4, #0]
 800e04c:	9303      	str	r3, [sp, #12]
 800e04e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e050:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e054:	ab09      	add	r3, sp, #36	@ 0x24
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	6861      	ldr	r1, [r4, #4]
 800e05a:	ec49 8b10 	vmov	d0, r8, r9
 800e05e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e062:	4628      	mov	r0, r5
 800e064:	f7ff fed6 	bl	800de14 <__cvt>
 800e068:	9b06      	ldr	r3, [sp, #24]
 800e06a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e06c:	2b47      	cmp	r3, #71	@ 0x47
 800e06e:	4680      	mov	r8, r0
 800e070:	d129      	bne.n	800e0c6 <_printf_float+0x172>
 800e072:	1cc8      	adds	r0, r1, #3
 800e074:	db02      	blt.n	800e07c <_printf_float+0x128>
 800e076:	6863      	ldr	r3, [r4, #4]
 800e078:	4299      	cmp	r1, r3
 800e07a:	dd41      	ble.n	800e100 <_printf_float+0x1ac>
 800e07c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e080:	fa5f fa8a 	uxtb.w	sl, sl
 800e084:	3901      	subs	r1, #1
 800e086:	4652      	mov	r2, sl
 800e088:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e08c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e08e:	f7ff ff26 	bl	800dede <__exponent>
 800e092:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e094:	1813      	adds	r3, r2, r0
 800e096:	2a01      	cmp	r2, #1
 800e098:	4681      	mov	r9, r0
 800e09a:	6123      	str	r3, [r4, #16]
 800e09c:	dc02      	bgt.n	800e0a4 <_printf_float+0x150>
 800e09e:	6822      	ldr	r2, [r4, #0]
 800e0a0:	07d2      	lsls	r2, r2, #31
 800e0a2:	d501      	bpl.n	800e0a8 <_printf_float+0x154>
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	6123      	str	r3, [r4, #16]
 800e0a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d0a2      	beq.n	800dff6 <_printf_float+0xa2>
 800e0b0:	232d      	movs	r3, #45	@ 0x2d
 800e0b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0b6:	e79e      	b.n	800dff6 <_printf_float+0xa2>
 800e0b8:	9a06      	ldr	r2, [sp, #24]
 800e0ba:	2a47      	cmp	r2, #71	@ 0x47
 800e0bc:	d1c2      	bne.n	800e044 <_printf_float+0xf0>
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d1c0      	bne.n	800e044 <_printf_float+0xf0>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e7bd      	b.n	800e042 <_printf_float+0xee>
 800e0c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e0ca:	d9db      	bls.n	800e084 <_printf_float+0x130>
 800e0cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e0d0:	d118      	bne.n	800e104 <_printf_float+0x1b0>
 800e0d2:	2900      	cmp	r1, #0
 800e0d4:	6863      	ldr	r3, [r4, #4]
 800e0d6:	dd0b      	ble.n	800e0f0 <_printf_float+0x19c>
 800e0d8:	6121      	str	r1, [r4, #16]
 800e0da:	b913      	cbnz	r3, 800e0e2 <_printf_float+0x18e>
 800e0dc:	6822      	ldr	r2, [r4, #0]
 800e0de:	07d0      	lsls	r0, r2, #31
 800e0e0:	d502      	bpl.n	800e0e8 <_printf_float+0x194>
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	440b      	add	r3, r1
 800e0e6:	6123      	str	r3, [r4, #16]
 800e0e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e0ea:	f04f 0900 	mov.w	r9, #0
 800e0ee:	e7db      	b.n	800e0a8 <_printf_float+0x154>
 800e0f0:	b913      	cbnz	r3, 800e0f8 <_printf_float+0x1a4>
 800e0f2:	6822      	ldr	r2, [r4, #0]
 800e0f4:	07d2      	lsls	r2, r2, #31
 800e0f6:	d501      	bpl.n	800e0fc <_printf_float+0x1a8>
 800e0f8:	3302      	adds	r3, #2
 800e0fa:	e7f4      	b.n	800e0e6 <_printf_float+0x192>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e7f2      	b.n	800e0e6 <_printf_float+0x192>
 800e100:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e106:	4299      	cmp	r1, r3
 800e108:	db05      	blt.n	800e116 <_printf_float+0x1c2>
 800e10a:	6823      	ldr	r3, [r4, #0]
 800e10c:	6121      	str	r1, [r4, #16]
 800e10e:	07d8      	lsls	r0, r3, #31
 800e110:	d5ea      	bpl.n	800e0e8 <_printf_float+0x194>
 800e112:	1c4b      	adds	r3, r1, #1
 800e114:	e7e7      	b.n	800e0e6 <_printf_float+0x192>
 800e116:	2900      	cmp	r1, #0
 800e118:	bfd4      	ite	le
 800e11a:	f1c1 0202 	rsble	r2, r1, #2
 800e11e:	2201      	movgt	r2, #1
 800e120:	4413      	add	r3, r2
 800e122:	e7e0      	b.n	800e0e6 <_printf_float+0x192>
 800e124:	6823      	ldr	r3, [r4, #0]
 800e126:	055a      	lsls	r2, r3, #21
 800e128:	d407      	bmi.n	800e13a <_printf_float+0x1e6>
 800e12a:	6923      	ldr	r3, [r4, #16]
 800e12c:	4642      	mov	r2, r8
 800e12e:	4631      	mov	r1, r6
 800e130:	4628      	mov	r0, r5
 800e132:	47b8      	blx	r7
 800e134:	3001      	adds	r0, #1
 800e136:	d12b      	bne.n	800e190 <_printf_float+0x23c>
 800e138:	e767      	b.n	800e00a <_printf_float+0xb6>
 800e13a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e13e:	f240 80dd 	bls.w	800e2fc <_printf_float+0x3a8>
 800e142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e146:	2200      	movs	r2, #0
 800e148:	2300      	movs	r3, #0
 800e14a:	f7f2 fcd5 	bl	8000af8 <__aeabi_dcmpeq>
 800e14e:	2800      	cmp	r0, #0
 800e150:	d033      	beq.n	800e1ba <_printf_float+0x266>
 800e152:	4a37      	ldr	r2, [pc, #220]	@ (800e230 <_printf_float+0x2dc>)
 800e154:	2301      	movs	r3, #1
 800e156:	4631      	mov	r1, r6
 800e158:	4628      	mov	r0, r5
 800e15a:	47b8      	blx	r7
 800e15c:	3001      	adds	r0, #1
 800e15e:	f43f af54 	beq.w	800e00a <_printf_float+0xb6>
 800e162:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e166:	4543      	cmp	r3, r8
 800e168:	db02      	blt.n	800e170 <_printf_float+0x21c>
 800e16a:	6823      	ldr	r3, [r4, #0]
 800e16c:	07d8      	lsls	r0, r3, #31
 800e16e:	d50f      	bpl.n	800e190 <_printf_float+0x23c>
 800e170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e174:	4631      	mov	r1, r6
 800e176:	4628      	mov	r0, r5
 800e178:	47b8      	blx	r7
 800e17a:	3001      	adds	r0, #1
 800e17c:	f43f af45 	beq.w	800e00a <_printf_float+0xb6>
 800e180:	f04f 0900 	mov.w	r9, #0
 800e184:	f108 38ff 	add.w	r8, r8, #4294967295
 800e188:	f104 0a1a 	add.w	sl, r4, #26
 800e18c:	45c8      	cmp	r8, r9
 800e18e:	dc09      	bgt.n	800e1a4 <_printf_float+0x250>
 800e190:	6823      	ldr	r3, [r4, #0]
 800e192:	079b      	lsls	r3, r3, #30
 800e194:	f100 8103 	bmi.w	800e39e <_printf_float+0x44a>
 800e198:	68e0      	ldr	r0, [r4, #12]
 800e19a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e19c:	4298      	cmp	r0, r3
 800e19e:	bfb8      	it	lt
 800e1a0:	4618      	movlt	r0, r3
 800e1a2:	e734      	b.n	800e00e <_printf_float+0xba>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	4652      	mov	r2, sl
 800e1a8:	4631      	mov	r1, r6
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	47b8      	blx	r7
 800e1ae:	3001      	adds	r0, #1
 800e1b0:	f43f af2b 	beq.w	800e00a <_printf_float+0xb6>
 800e1b4:	f109 0901 	add.w	r9, r9, #1
 800e1b8:	e7e8      	b.n	800e18c <_printf_float+0x238>
 800e1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	dc39      	bgt.n	800e234 <_printf_float+0x2e0>
 800e1c0:	4a1b      	ldr	r2, [pc, #108]	@ (800e230 <_printf_float+0x2dc>)
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	4631      	mov	r1, r6
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	47b8      	blx	r7
 800e1ca:	3001      	adds	r0, #1
 800e1cc:	f43f af1d 	beq.w	800e00a <_printf_float+0xb6>
 800e1d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e1d4:	ea59 0303 	orrs.w	r3, r9, r3
 800e1d8:	d102      	bne.n	800e1e0 <_printf_float+0x28c>
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	07d9      	lsls	r1, r3, #31
 800e1de:	d5d7      	bpl.n	800e190 <_printf_float+0x23c>
 800e1e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1e4:	4631      	mov	r1, r6
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	47b8      	blx	r7
 800e1ea:	3001      	adds	r0, #1
 800e1ec:	f43f af0d 	beq.w	800e00a <_printf_float+0xb6>
 800e1f0:	f04f 0a00 	mov.w	sl, #0
 800e1f4:	f104 0b1a 	add.w	fp, r4, #26
 800e1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1fa:	425b      	negs	r3, r3
 800e1fc:	4553      	cmp	r3, sl
 800e1fe:	dc01      	bgt.n	800e204 <_printf_float+0x2b0>
 800e200:	464b      	mov	r3, r9
 800e202:	e793      	b.n	800e12c <_printf_float+0x1d8>
 800e204:	2301      	movs	r3, #1
 800e206:	465a      	mov	r2, fp
 800e208:	4631      	mov	r1, r6
 800e20a:	4628      	mov	r0, r5
 800e20c:	47b8      	blx	r7
 800e20e:	3001      	adds	r0, #1
 800e210:	f43f aefb 	beq.w	800e00a <_printf_float+0xb6>
 800e214:	f10a 0a01 	add.w	sl, sl, #1
 800e218:	e7ee      	b.n	800e1f8 <_printf_float+0x2a4>
 800e21a:	bf00      	nop
 800e21c:	7fefffff 	.word	0x7fefffff
 800e220:	08016660 	.word	0x08016660
 800e224:	0801665c 	.word	0x0801665c
 800e228:	08016668 	.word	0x08016668
 800e22c:	08016664 	.word	0x08016664
 800e230:	0801666c 	.word	0x0801666c
 800e234:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e236:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e23a:	4553      	cmp	r3, sl
 800e23c:	bfa8      	it	ge
 800e23e:	4653      	movge	r3, sl
 800e240:	2b00      	cmp	r3, #0
 800e242:	4699      	mov	r9, r3
 800e244:	dc36      	bgt.n	800e2b4 <_printf_float+0x360>
 800e246:	f04f 0b00 	mov.w	fp, #0
 800e24a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e24e:	f104 021a 	add.w	r2, r4, #26
 800e252:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e254:	9306      	str	r3, [sp, #24]
 800e256:	eba3 0309 	sub.w	r3, r3, r9
 800e25a:	455b      	cmp	r3, fp
 800e25c:	dc31      	bgt.n	800e2c2 <_printf_float+0x36e>
 800e25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e260:	459a      	cmp	sl, r3
 800e262:	dc3a      	bgt.n	800e2da <_printf_float+0x386>
 800e264:	6823      	ldr	r3, [r4, #0]
 800e266:	07da      	lsls	r2, r3, #31
 800e268:	d437      	bmi.n	800e2da <_printf_float+0x386>
 800e26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e26c:	ebaa 0903 	sub.w	r9, sl, r3
 800e270:	9b06      	ldr	r3, [sp, #24]
 800e272:	ebaa 0303 	sub.w	r3, sl, r3
 800e276:	4599      	cmp	r9, r3
 800e278:	bfa8      	it	ge
 800e27a:	4699      	movge	r9, r3
 800e27c:	f1b9 0f00 	cmp.w	r9, #0
 800e280:	dc33      	bgt.n	800e2ea <_printf_float+0x396>
 800e282:	f04f 0800 	mov.w	r8, #0
 800e286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e28a:	f104 0b1a 	add.w	fp, r4, #26
 800e28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e290:	ebaa 0303 	sub.w	r3, sl, r3
 800e294:	eba3 0309 	sub.w	r3, r3, r9
 800e298:	4543      	cmp	r3, r8
 800e29a:	f77f af79 	ble.w	800e190 <_printf_float+0x23c>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	465a      	mov	r2, fp
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	47b8      	blx	r7
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	f43f aeae 	beq.w	800e00a <_printf_float+0xb6>
 800e2ae:	f108 0801 	add.w	r8, r8, #1
 800e2b2:	e7ec      	b.n	800e28e <_printf_float+0x33a>
 800e2b4:	4642      	mov	r2, r8
 800e2b6:	4631      	mov	r1, r6
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	47b8      	blx	r7
 800e2bc:	3001      	adds	r0, #1
 800e2be:	d1c2      	bne.n	800e246 <_printf_float+0x2f2>
 800e2c0:	e6a3      	b.n	800e00a <_printf_float+0xb6>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	9206      	str	r2, [sp, #24]
 800e2ca:	47b8      	blx	r7
 800e2cc:	3001      	adds	r0, #1
 800e2ce:	f43f ae9c 	beq.w	800e00a <_printf_float+0xb6>
 800e2d2:	9a06      	ldr	r2, [sp, #24]
 800e2d4:	f10b 0b01 	add.w	fp, fp, #1
 800e2d8:	e7bb      	b.n	800e252 <_printf_float+0x2fe>
 800e2da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2de:	4631      	mov	r1, r6
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	47b8      	blx	r7
 800e2e4:	3001      	adds	r0, #1
 800e2e6:	d1c0      	bne.n	800e26a <_printf_float+0x316>
 800e2e8:	e68f      	b.n	800e00a <_printf_float+0xb6>
 800e2ea:	9a06      	ldr	r2, [sp, #24]
 800e2ec:	464b      	mov	r3, r9
 800e2ee:	4442      	add	r2, r8
 800e2f0:	4631      	mov	r1, r6
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	47b8      	blx	r7
 800e2f6:	3001      	adds	r0, #1
 800e2f8:	d1c3      	bne.n	800e282 <_printf_float+0x32e>
 800e2fa:	e686      	b.n	800e00a <_printf_float+0xb6>
 800e2fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e300:	f1ba 0f01 	cmp.w	sl, #1
 800e304:	dc01      	bgt.n	800e30a <_printf_float+0x3b6>
 800e306:	07db      	lsls	r3, r3, #31
 800e308:	d536      	bpl.n	800e378 <_printf_float+0x424>
 800e30a:	2301      	movs	r3, #1
 800e30c:	4642      	mov	r2, r8
 800e30e:	4631      	mov	r1, r6
 800e310:	4628      	mov	r0, r5
 800e312:	47b8      	blx	r7
 800e314:	3001      	adds	r0, #1
 800e316:	f43f ae78 	beq.w	800e00a <_printf_float+0xb6>
 800e31a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e31e:	4631      	mov	r1, r6
 800e320:	4628      	mov	r0, r5
 800e322:	47b8      	blx	r7
 800e324:	3001      	adds	r0, #1
 800e326:	f43f ae70 	beq.w	800e00a <_printf_float+0xb6>
 800e32a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e32e:	2200      	movs	r2, #0
 800e330:	2300      	movs	r3, #0
 800e332:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e336:	f7f2 fbdf 	bl	8000af8 <__aeabi_dcmpeq>
 800e33a:	b9c0      	cbnz	r0, 800e36e <_printf_float+0x41a>
 800e33c:	4653      	mov	r3, sl
 800e33e:	f108 0201 	add.w	r2, r8, #1
 800e342:	4631      	mov	r1, r6
 800e344:	4628      	mov	r0, r5
 800e346:	47b8      	blx	r7
 800e348:	3001      	adds	r0, #1
 800e34a:	d10c      	bne.n	800e366 <_printf_float+0x412>
 800e34c:	e65d      	b.n	800e00a <_printf_float+0xb6>
 800e34e:	2301      	movs	r3, #1
 800e350:	465a      	mov	r2, fp
 800e352:	4631      	mov	r1, r6
 800e354:	4628      	mov	r0, r5
 800e356:	47b8      	blx	r7
 800e358:	3001      	adds	r0, #1
 800e35a:	f43f ae56 	beq.w	800e00a <_printf_float+0xb6>
 800e35e:	f108 0801 	add.w	r8, r8, #1
 800e362:	45d0      	cmp	r8, sl
 800e364:	dbf3      	blt.n	800e34e <_printf_float+0x3fa>
 800e366:	464b      	mov	r3, r9
 800e368:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e36c:	e6df      	b.n	800e12e <_printf_float+0x1da>
 800e36e:	f04f 0800 	mov.w	r8, #0
 800e372:	f104 0b1a 	add.w	fp, r4, #26
 800e376:	e7f4      	b.n	800e362 <_printf_float+0x40e>
 800e378:	2301      	movs	r3, #1
 800e37a:	4642      	mov	r2, r8
 800e37c:	e7e1      	b.n	800e342 <_printf_float+0x3ee>
 800e37e:	2301      	movs	r3, #1
 800e380:	464a      	mov	r2, r9
 800e382:	4631      	mov	r1, r6
 800e384:	4628      	mov	r0, r5
 800e386:	47b8      	blx	r7
 800e388:	3001      	adds	r0, #1
 800e38a:	f43f ae3e 	beq.w	800e00a <_printf_float+0xb6>
 800e38e:	f108 0801 	add.w	r8, r8, #1
 800e392:	68e3      	ldr	r3, [r4, #12]
 800e394:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e396:	1a5b      	subs	r3, r3, r1
 800e398:	4543      	cmp	r3, r8
 800e39a:	dcf0      	bgt.n	800e37e <_printf_float+0x42a>
 800e39c:	e6fc      	b.n	800e198 <_printf_float+0x244>
 800e39e:	f04f 0800 	mov.w	r8, #0
 800e3a2:	f104 0919 	add.w	r9, r4, #25
 800e3a6:	e7f4      	b.n	800e392 <_printf_float+0x43e>

0800e3a8 <__sfputc_r>:
 800e3a8:	6893      	ldr	r3, [r2, #8]
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	b410      	push	{r4}
 800e3b0:	6093      	str	r3, [r2, #8]
 800e3b2:	da08      	bge.n	800e3c6 <__sfputc_r+0x1e>
 800e3b4:	6994      	ldr	r4, [r2, #24]
 800e3b6:	42a3      	cmp	r3, r4
 800e3b8:	db01      	blt.n	800e3be <__sfputc_r+0x16>
 800e3ba:	290a      	cmp	r1, #10
 800e3bc:	d103      	bne.n	800e3c6 <__sfputc_r+0x1e>
 800e3be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3c2:	f000 bc02 	b.w	800ebca <__swbuf_r>
 800e3c6:	6813      	ldr	r3, [r2, #0]
 800e3c8:	1c58      	adds	r0, r3, #1
 800e3ca:	6010      	str	r0, [r2, #0]
 800e3cc:	7019      	strb	r1, [r3, #0]
 800e3ce:	4608      	mov	r0, r1
 800e3d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3d4:	4770      	bx	lr

0800e3d6 <__sfputs_r>:
 800e3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d8:	4606      	mov	r6, r0
 800e3da:	460f      	mov	r7, r1
 800e3dc:	4614      	mov	r4, r2
 800e3de:	18d5      	adds	r5, r2, r3
 800e3e0:	42ac      	cmp	r4, r5
 800e3e2:	d101      	bne.n	800e3e8 <__sfputs_r+0x12>
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	e007      	b.n	800e3f8 <__sfputs_r+0x22>
 800e3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ec:	463a      	mov	r2, r7
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	f7ff ffda 	bl	800e3a8 <__sfputc_r>
 800e3f4:	1c43      	adds	r3, r0, #1
 800e3f6:	d1f3      	bne.n	800e3e0 <__sfputs_r+0xa>
 800e3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3fc <_vfiprintf_r>:
 800e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e400:	460d      	mov	r5, r1
 800e402:	b09d      	sub	sp, #116	@ 0x74
 800e404:	4614      	mov	r4, r2
 800e406:	4698      	mov	r8, r3
 800e408:	4606      	mov	r6, r0
 800e40a:	b118      	cbz	r0, 800e414 <_vfiprintf_r+0x18>
 800e40c:	6a03      	ldr	r3, [r0, #32]
 800e40e:	b90b      	cbnz	r3, 800e414 <_vfiprintf_r+0x18>
 800e410:	f000 fb2e 	bl	800ea70 <__sinit>
 800e414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e416:	07d9      	lsls	r1, r3, #31
 800e418:	d405      	bmi.n	800e426 <_vfiprintf_r+0x2a>
 800e41a:	89ab      	ldrh	r3, [r5, #12]
 800e41c:	059a      	lsls	r2, r3, #22
 800e41e:	d402      	bmi.n	800e426 <_vfiprintf_r+0x2a>
 800e420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e422:	f000 fd64 	bl	800eeee <__retarget_lock_acquire_recursive>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	071b      	lsls	r3, r3, #28
 800e42a:	d501      	bpl.n	800e430 <_vfiprintf_r+0x34>
 800e42c:	692b      	ldr	r3, [r5, #16]
 800e42e:	b99b      	cbnz	r3, 800e458 <_vfiprintf_r+0x5c>
 800e430:	4629      	mov	r1, r5
 800e432:	4630      	mov	r0, r6
 800e434:	f000 fc08 	bl	800ec48 <__swsetup_r>
 800e438:	b170      	cbz	r0, 800e458 <_vfiprintf_r+0x5c>
 800e43a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e43c:	07dc      	lsls	r4, r3, #31
 800e43e:	d504      	bpl.n	800e44a <_vfiprintf_r+0x4e>
 800e440:	f04f 30ff 	mov.w	r0, #4294967295
 800e444:	b01d      	add	sp, #116	@ 0x74
 800e446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44a:	89ab      	ldrh	r3, [r5, #12]
 800e44c:	0598      	lsls	r0, r3, #22
 800e44e:	d4f7      	bmi.n	800e440 <_vfiprintf_r+0x44>
 800e450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e452:	f000 fd4d 	bl	800eef0 <__retarget_lock_release_recursive>
 800e456:	e7f3      	b.n	800e440 <_vfiprintf_r+0x44>
 800e458:	2300      	movs	r3, #0
 800e45a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e45c:	2320      	movs	r3, #32
 800e45e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e462:	f8cd 800c 	str.w	r8, [sp, #12]
 800e466:	2330      	movs	r3, #48	@ 0x30
 800e468:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e618 <_vfiprintf_r+0x21c>
 800e46c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e470:	f04f 0901 	mov.w	r9, #1
 800e474:	4623      	mov	r3, r4
 800e476:	469a      	mov	sl, r3
 800e478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e47c:	b10a      	cbz	r2, 800e482 <_vfiprintf_r+0x86>
 800e47e:	2a25      	cmp	r2, #37	@ 0x25
 800e480:	d1f9      	bne.n	800e476 <_vfiprintf_r+0x7a>
 800e482:	ebba 0b04 	subs.w	fp, sl, r4
 800e486:	d00b      	beq.n	800e4a0 <_vfiprintf_r+0xa4>
 800e488:	465b      	mov	r3, fp
 800e48a:	4622      	mov	r2, r4
 800e48c:	4629      	mov	r1, r5
 800e48e:	4630      	mov	r0, r6
 800e490:	f7ff ffa1 	bl	800e3d6 <__sfputs_r>
 800e494:	3001      	adds	r0, #1
 800e496:	f000 80a7 	beq.w	800e5e8 <_vfiprintf_r+0x1ec>
 800e49a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e49c:	445a      	add	r2, fp
 800e49e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 809f 	beq.w	800e5e8 <_vfiprintf_r+0x1ec>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4b4:	f10a 0a01 	add.w	sl, sl, #1
 800e4b8:	9304      	str	r3, [sp, #16]
 800e4ba:	9307      	str	r3, [sp, #28]
 800e4bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4c2:	4654      	mov	r4, sl
 800e4c4:	2205      	movs	r2, #5
 800e4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ca:	4853      	ldr	r0, [pc, #332]	@ (800e618 <_vfiprintf_r+0x21c>)
 800e4cc:	f7f1 fe98 	bl	8000200 <memchr>
 800e4d0:	9a04      	ldr	r2, [sp, #16]
 800e4d2:	b9d8      	cbnz	r0, 800e50c <_vfiprintf_r+0x110>
 800e4d4:	06d1      	lsls	r1, r2, #27
 800e4d6:	bf44      	itt	mi
 800e4d8:	2320      	movmi	r3, #32
 800e4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4de:	0713      	lsls	r3, r2, #28
 800e4e0:	bf44      	itt	mi
 800e4e2:	232b      	movmi	r3, #43	@ 0x2b
 800e4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4ee:	d015      	beq.n	800e51c <_vfiprintf_r+0x120>
 800e4f0:	9a07      	ldr	r2, [sp, #28]
 800e4f2:	4654      	mov	r4, sl
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	f04f 0c0a 	mov.w	ip, #10
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e500:	3b30      	subs	r3, #48	@ 0x30
 800e502:	2b09      	cmp	r3, #9
 800e504:	d94b      	bls.n	800e59e <_vfiprintf_r+0x1a2>
 800e506:	b1b0      	cbz	r0, 800e536 <_vfiprintf_r+0x13a>
 800e508:	9207      	str	r2, [sp, #28]
 800e50a:	e014      	b.n	800e536 <_vfiprintf_r+0x13a>
 800e50c:	eba0 0308 	sub.w	r3, r0, r8
 800e510:	fa09 f303 	lsl.w	r3, r9, r3
 800e514:	4313      	orrs	r3, r2
 800e516:	9304      	str	r3, [sp, #16]
 800e518:	46a2      	mov	sl, r4
 800e51a:	e7d2      	b.n	800e4c2 <_vfiprintf_r+0xc6>
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	1d19      	adds	r1, r3, #4
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	9103      	str	r1, [sp, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	bfbb      	ittet	lt
 800e528:	425b      	neglt	r3, r3
 800e52a:	f042 0202 	orrlt.w	r2, r2, #2
 800e52e:	9307      	strge	r3, [sp, #28]
 800e530:	9307      	strlt	r3, [sp, #28]
 800e532:	bfb8      	it	lt
 800e534:	9204      	strlt	r2, [sp, #16]
 800e536:	7823      	ldrb	r3, [r4, #0]
 800e538:	2b2e      	cmp	r3, #46	@ 0x2e
 800e53a:	d10a      	bne.n	800e552 <_vfiprintf_r+0x156>
 800e53c:	7863      	ldrb	r3, [r4, #1]
 800e53e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e540:	d132      	bne.n	800e5a8 <_vfiprintf_r+0x1ac>
 800e542:	9b03      	ldr	r3, [sp, #12]
 800e544:	1d1a      	adds	r2, r3, #4
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	9203      	str	r2, [sp, #12]
 800e54a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e54e:	3402      	adds	r4, #2
 800e550:	9305      	str	r3, [sp, #20]
 800e552:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e628 <_vfiprintf_r+0x22c>
 800e556:	7821      	ldrb	r1, [r4, #0]
 800e558:	2203      	movs	r2, #3
 800e55a:	4650      	mov	r0, sl
 800e55c:	f7f1 fe50 	bl	8000200 <memchr>
 800e560:	b138      	cbz	r0, 800e572 <_vfiprintf_r+0x176>
 800e562:	9b04      	ldr	r3, [sp, #16]
 800e564:	eba0 000a 	sub.w	r0, r0, sl
 800e568:	2240      	movs	r2, #64	@ 0x40
 800e56a:	4082      	lsls	r2, r0
 800e56c:	4313      	orrs	r3, r2
 800e56e:	3401      	adds	r4, #1
 800e570:	9304      	str	r3, [sp, #16]
 800e572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e576:	4829      	ldr	r0, [pc, #164]	@ (800e61c <_vfiprintf_r+0x220>)
 800e578:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e57c:	2206      	movs	r2, #6
 800e57e:	f7f1 fe3f 	bl	8000200 <memchr>
 800e582:	2800      	cmp	r0, #0
 800e584:	d03f      	beq.n	800e606 <_vfiprintf_r+0x20a>
 800e586:	4b26      	ldr	r3, [pc, #152]	@ (800e620 <_vfiprintf_r+0x224>)
 800e588:	bb1b      	cbnz	r3, 800e5d2 <_vfiprintf_r+0x1d6>
 800e58a:	9b03      	ldr	r3, [sp, #12]
 800e58c:	3307      	adds	r3, #7
 800e58e:	f023 0307 	bic.w	r3, r3, #7
 800e592:	3308      	adds	r3, #8
 800e594:	9303      	str	r3, [sp, #12]
 800e596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e598:	443b      	add	r3, r7
 800e59a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e59c:	e76a      	b.n	800e474 <_vfiprintf_r+0x78>
 800e59e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	e7a8      	b.n	800e4fa <_vfiprintf_r+0xfe>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	3401      	adds	r4, #1
 800e5ac:	9305      	str	r3, [sp, #20]
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	f04f 0c0a 	mov.w	ip, #10
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5ba:	3a30      	subs	r2, #48	@ 0x30
 800e5bc:	2a09      	cmp	r2, #9
 800e5be:	d903      	bls.n	800e5c8 <_vfiprintf_r+0x1cc>
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d0c6      	beq.n	800e552 <_vfiprintf_r+0x156>
 800e5c4:	9105      	str	r1, [sp, #20]
 800e5c6:	e7c4      	b.n	800e552 <_vfiprintf_r+0x156>
 800e5c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e7f0      	b.n	800e5b4 <_vfiprintf_r+0x1b8>
 800e5d2:	ab03      	add	r3, sp, #12
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	4b12      	ldr	r3, [pc, #72]	@ (800e624 <_vfiprintf_r+0x228>)
 800e5da:	a904      	add	r1, sp, #16
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f7ff fcb9 	bl	800df54 <_printf_float>
 800e5e2:	4607      	mov	r7, r0
 800e5e4:	1c78      	adds	r0, r7, #1
 800e5e6:	d1d6      	bne.n	800e596 <_vfiprintf_r+0x19a>
 800e5e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ea:	07d9      	lsls	r1, r3, #31
 800e5ec:	d405      	bmi.n	800e5fa <_vfiprintf_r+0x1fe>
 800e5ee:	89ab      	ldrh	r3, [r5, #12]
 800e5f0:	059a      	lsls	r2, r3, #22
 800e5f2:	d402      	bmi.n	800e5fa <_vfiprintf_r+0x1fe>
 800e5f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5f6:	f000 fc7b 	bl	800eef0 <__retarget_lock_release_recursive>
 800e5fa:	89ab      	ldrh	r3, [r5, #12]
 800e5fc:	065b      	lsls	r3, r3, #25
 800e5fe:	f53f af1f 	bmi.w	800e440 <_vfiprintf_r+0x44>
 800e602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e604:	e71e      	b.n	800e444 <_vfiprintf_r+0x48>
 800e606:	ab03      	add	r3, sp, #12
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	462a      	mov	r2, r5
 800e60c:	4b05      	ldr	r3, [pc, #20]	@ (800e624 <_vfiprintf_r+0x228>)
 800e60e:	a904      	add	r1, sp, #16
 800e610:	4630      	mov	r0, r6
 800e612:	f000 f883 	bl	800e71c <_printf_i>
 800e616:	e7e4      	b.n	800e5e2 <_vfiprintf_r+0x1e6>
 800e618:	0801666e 	.word	0x0801666e
 800e61c:	08016678 	.word	0x08016678
 800e620:	0800df55 	.word	0x0800df55
 800e624:	0800e3d7 	.word	0x0800e3d7
 800e628:	08016674 	.word	0x08016674

0800e62c <vfiprintf>:
 800e62c:	4613      	mov	r3, r2
 800e62e:	460a      	mov	r2, r1
 800e630:	4601      	mov	r1, r0
 800e632:	4802      	ldr	r0, [pc, #8]	@ (800e63c <vfiprintf+0x10>)
 800e634:	6800      	ldr	r0, [r0, #0]
 800e636:	f7ff bee1 	b.w	800e3fc <_vfiprintf_r>
 800e63a:	bf00      	nop
 800e63c:	20000c80 	.word	0x20000c80

0800e640 <_printf_common>:
 800e640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e644:	4616      	mov	r6, r2
 800e646:	4698      	mov	r8, r3
 800e648:	688a      	ldr	r2, [r1, #8]
 800e64a:	690b      	ldr	r3, [r1, #16]
 800e64c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e650:	4293      	cmp	r3, r2
 800e652:	bfb8      	it	lt
 800e654:	4613      	movlt	r3, r2
 800e656:	6033      	str	r3, [r6, #0]
 800e658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e65c:	4607      	mov	r7, r0
 800e65e:	460c      	mov	r4, r1
 800e660:	b10a      	cbz	r2, 800e666 <_printf_common+0x26>
 800e662:	3301      	adds	r3, #1
 800e664:	6033      	str	r3, [r6, #0]
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	0699      	lsls	r1, r3, #26
 800e66a:	bf42      	ittt	mi
 800e66c:	6833      	ldrmi	r3, [r6, #0]
 800e66e:	3302      	addmi	r3, #2
 800e670:	6033      	strmi	r3, [r6, #0]
 800e672:	6825      	ldr	r5, [r4, #0]
 800e674:	f015 0506 	ands.w	r5, r5, #6
 800e678:	d106      	bne.n	800e688 <_printf_common+0x48>
 800e67a:	f104 0a19 	add.w	sl, r4, #25
 800e67e:	68e3      	ldr	r3, [r4, #12]
 800e680:	6832      	ldr	r2, [r6, #0]
 800e682:	1a9b      	subs	r3, r3, r2
 800e684:	42ab      	cmp	r3, r5
 800e686:	dc26      	bgt.n	800e6d6 <_printf_common+0x96>
 800e688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e68c:	6822      	ldr	r2, [r4, #0]
 800e68e:	3b00      	subs	r3, #0
 800e690:	bf18      	it	ne
 800e692:	2301      	movne	r3, #1
 800e694:	0692      	lsls	r2, r2, #26
 800e696:	d42b      	bmi.n	800e6f0 <_printf_common+0xb0>
 800e698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e69c:	4641      	mov	r1, r8
 800e69e:	4638      	mov	r0, r7
 800e6a0:	47c8      	blx	r9
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	d01e      	beq.n	800e6e4 <_printf_common+0xa4>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	6922      	ldr	r2, [r4, #16]
 800e6aa:	f003 0306 	and.w	r3, r3, #6
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	bf02      	ittt	eq
 800e6b2:	68e5      	ldreq	r5, [r4, #12]
 800e6b4:	6833      	ldreq	r3, [r6, #0]
 800e6b6:	1aed      	subeq	r5, r5, r3
 800e6b8:	68a3      	ldr	r3, [r4, #8]
 800e6ba:	bf0c      	ite	eq
 800e6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6c0:	2500      	movne	r5, #0
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	bfc4      	itt	gt
 800e6c6:	1a9b      	subgt	r3, r3, r2
 800e6c8:	18ed      	addgt	r5, r5, r3
 800e6ca:	2600      	movs	r6, #0
 800e6cc:	341a      	adds	r4, #26
 800e6ce:	42b5      	cmp	r5, r6
 800e6d0:	d11a      	bne.n	800e708 <_printf_common+0xc8>
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	e008      	b.n	800e6e8 <_printf_common+0xa8>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	4652      	mov	r2, sl
 800e6da:	4641      	mov	r1, r8
 800e6dc:	4638      	mov	r0, r7
 800e6de:	47c8      	blx	r9
 800e6e0:	3001      	adds	r0, #1
 800e6e2:	d103      	bne.n	800e6ec <_printf_common+0xac>
 800e6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ec:	3501      	adds	r5, #1
 800e6ee:	e7c6      	b.n	800e67e <_printf_common+0x3e>
 800e6f0:	18e1      	adds	r1, r4, r3
 800e6f2:	1c5a      	adds	r2, r3, #1
 800e6f4:	2030      	movs	r0, #48	@ 0x30
 800e6f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6fa:	4422      	add	r2, r4
 800e6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e704:	3302      	adds	r3, #2
 800e706:	e7c7      	b.n	800e698 <_printf_common+0x58>
 800e708:	2301      	movs	r3, #1
 800e70a:	4622      	mov	r2, r4
 800e70c:	4641      	mov	r1, r8
 800e70e:	4638      	mov	r0, r7
 800e710:	47c8      	blx	r9
 800e712:	3001      	adds	r0, #1
 800e714:	d0e6      	beq.n	800e6e4 <_printf_common+0xa4>
 800e716:	3601      	adds	r6, #1
 800e718:	e7d9      	b.n	800e6ce <_printf_common+0x8e>
	...

0800e71c <_printf_i>:
 800e71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e720:	7e0f      	ldrb	r7, [r1, #24]
 800e722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e724:	2f78      	cmp	r7, #120	@ 0x78
 800e726:	4691      	mov	r9, r2
 800e728:	4680      	mov	r8, r0
 800e72a:	460c      	mov	r4, r1
 800e72c:	469a      	mov	sl, r3
 800e72e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e732:	d807      	bhi.n	800e744 <_printf_i+0x28>
 800e734:	2f62      	cmp	r7, #98	@ 0x62
 800e736:	d80a      	bhi.n	800e74e <_printf_i+0x32>
 800e738:	2f00      	cmp	r7, #0
 800e73a:	f000 80d1 	beq.w	800e8e0 <_printf_i+0x1c4>
 800e73e:	2f58      	cmp	r7, #88	@ 0x58
 800e740:	f000 80b8 	beq.w	800e8b4 <_printf_i+0x198>
 800e744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e74c:	e03a      	b.n	800e7c4 <_printf_i+0xa8>
 800e74e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e752:	2b15      	cmp	r3, #21
 800e754:	d8f6      	bhi.n	800e744 <_printf_i+0x28>
 800e756:	a101      	add	r1, pc, #4	@ (adr r1, 800e75c <_printf_i+0x40>)
 800e758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e75c:	0800e7b5 	.word	0x0800e7b5
 800e760:	0800e7c9 	.word	0x0800e7c9
 800e764:	0800e745 	.word	0x0800e745
 800e768:	0800e745 	.word	0x0800e745
 800e76c:	0800e745 	.word	0x0800e745
 800e770:	0800e745 	.word	0x0800e745
 800e774:	0800e7c9 	.word	0x0800e7c9
 800e778:	0800e745 	.word	0x0800e745
 800e77c:	0800e745 	.word	0x0800e745
 800e780:	0800e745 	.word	0x0800e745
 800e784:	0800e745 	.word	0x0800e745
 800e788:	0800e8c7 	.word	0x0800e8c7
 800e78c:	0800e7f3 	.word	0x0800e7f3
 800e790:	0800e881 	.word	0x0800e881
 800e794:	0800e745 	.word	0x0800e745
 800e798:	0800e745 	.word	0x0800e745
 800e79c:	0800e8e9 	.word	0x0800e8e9
 800e7a0:	0800e745 	.word	0x0800e745
 800e7a4:	0800e7f3 	.word	0x0800e7f3
 800e7a8:	0800e745 	.word	0x0800e745
 800e7ac:	0800e745 	.word	0x0800e745
 800e7b0:	0800e889 	.word	0x0800e889
 800e7b4:	6833      	ldr	r3, [r6, #0]
 800e7b6:	1d1a      	adds	r2, r3, #4
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	6032      	str	r2, [r6, #0]
 800e7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e09c      	b.n	800e902 <_printf_i+0x1e6>
 800e7c8:	6833      	ldr	r3, [r6, #0]
 800e7ca:	6820      	ldr	r0, [r4, #0]
 800e7cc:	1d19      	adds	r1, r3, #4
 800e7ce:	6031      	str	r1, [r6, #0]
 800e7d0:	0606      	lsls	r6, r0, #24
 800e7d2:	d501      	bpl.n	800e7d8 <_printf_i+0xbc>
 800e7d4:	681d      	ldr	r5, [r3, #0]
 800e7d6:	e003      	b.n	800e7e0 <_printf_i+0xc4>
 800e7d8:	0645      	lsls	r5, r0, #25
 800e7da:	d5fb      	bpl.n	800e7d4 <_printf_i+0xb8>
 800e7dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7e0:	2d00      	cmp	r5, #0
 800e7e2:	da03      	bge.n	800e7ec <_printf_i+0xd0>
 800e7e4:	232d      	movs	r3, #45	@ 0x2d
 800e7e6:	426d      	negs	r5, r5
 800e7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7ec:	4858      	ldr	r0, [pc, #352]	@ (800e950 <_printf_i+0x234>)
 800e7ee:	230a      	movs	r3, #10
 800e7f0:	e011      	b.n	800e816 <_printf_i+0xfa>
 800e7f2:	6821      	ldr	r1, [r4, #0]
 800e7f4:	6833      	ldr	r3, [r6, #0]
 800e7f6:	0608      	lsls	r0, r1, #24
 800e7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7fc:	d402      	bmi.n	800e804 <_printf_i+0xe8>
 800e7fe:	0649      	lsls	r1, r1, #25
 800e800:	bf48      	it	mi
 800e802:	b2ad      	uxthmi	r5, r5
 800e804:	2f6f      	cmp	r7, #111	@ 0x6f
 800e806:	4852      	ldr	r0, [pc, #328]	@ (800e950 <_printf_i+0x234>)
 800e808:	6033      	str	r3, [r6, #0]
 800e80a:	bf14      	ite	ne
 800e80c:	230a      	movne	r3, #10
 800e80e:	2308      	moveq	r3, #8
 800e810:	2100      	movs	r1, #0
 800e812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e816:	6866      	ldr	r6, [r4, #4]
 800e818:	60a6      	str	r6, [r4, #8]
 800e81a:	2e00      	cmp	r6, #0
 800e81c:	db05      	blt.n	800e82a <_printf_i+0x10e>
 800e81e:	6821      	ldr	r1, [r4, #0]
 800e820:	432e      	orrs	r6, r5
 800e822:	f021 0104 	bic.w	r1, r1, #4
 800e826:	6021      	str	r1, [r4, #0]
 800e828:	d04b      	beq.n	800e8c2 <_printf_i+0x1a6>
 800e82a:	4616      	mov	r6, r2
 800e82c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e830:	fb03 5711 	mls	r7, r3, r1, r5
 800e834:	5dc7      	ldrb	r7, [r0, r7]
 800e836:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e83a:	462f      	mov	r7, r5
 800e83c:	42bb      	cmp	r3, r7
 800e83e:	460d      	mov	r5, r1
 800e840:	d9f4      	bls.n	800e82c <_printf_i+0x110>
 800e842:	2b08      	cmp	r3, #8
 800e844:	d10b      	bne.n	800e85e <_printf_i+0x142>
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	07df      	lsls	r7, r3, #31
 800e84a:	d508      	bpl.n	800e85e <_printf_i+0x142>
 800e84c:	6923      	ldr	r3, [r4, #16]
 800e84e:	6861      	ldr	r1, [r4, #4]
 800e850:	4299      	cmp	r1, r3
 800e852:	bfde      	ittt	le
 800e854:	2330      	movle	r3, #48	@ 0x30
 800e856:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e85a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e85e:	1b92      	subs	r2, r2, r6
 800e860:	6122      	str	r2, [r4, #16]
 800e862:	f8cd a000 	str.w	sl, [sp]
 800e866:	464b      	mov	r3, r9
 800e868:	aa03      	add	r2, sp, #12
 800e86a:	4621      	mov	r1, r4
 800e86c:	4640      	mov	r0, r8
 800e86e:	f7ff fee7 	bl	800e640 <_printf_common>
 800e872:	3001      	adds	r0, #1
 800e874:	d14a      	bne.n	800e90c <_printf_i+0x1f0>
 800e876:	f04f 30ff 	mov.w	r0, #4294967295
 800e87a:	b004      	add	sp, #16
 800e87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e880:	6823      	ldr	r3, [r4, #0]
 800e882:	f043 0320 	orr.w	r3, r3, #32
 800e886:	6023      	str	r3, [r4, #0]
 800e888:	4832      	ldr	r0, [pc, #200]	@ (800e954 <_printf_i+0x238>)
 800e88a:	2778      	movs	r7, #120	@ 0x78
 800e88c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e890:	6823      	ldr	r3, [r4, #0]
 800e892:	6831      	ldr	r1, [r6, #0]
 800e894:	061f      	lsls	r7, r3, #24
 800e896:	f851 5b04 	ldr.w	r5, [r1], #4
 800e89a:	d402      	bmi.n	800e8a2 <_printf_i+0x186>
 800e89c:	065f      	lsls	r7, r3, #25
 800e89e:	bf48      	it	mi
 800e8a0:	b2ad      	uxthmi	r5, r5
 800e8a2:	6031      	str	r1, [r6, #0]
 800e8a4:	07d9      	lsls	r1, r3, #31
 800e8a6:	bf44      	itt	mi
 800e8a8:	f043 0320 	orrmi.w	r3, r3, #32
 800e8ac:	6023      	strmi	r3, [r4, #0]
 800e8ae:	b11d      	cbz	r5, 800e8b8 <_printf_i+0x19c>
 800e8b0:	2310      	movs	r3, #16
 800e8b2:	e7ad      	b.n	800e810 <_printf_i+0xf4>
 800e8b4:	4826      	ldr	r0, [pc, #152]	@ (800e950 <_printf_i+0x234>)
 800e8b6:	e7e9      	b.n	800e88c <_printf_i+0x170>
 800e8b8:	6823      	ldr	r3, [r4, #0]
 800e8ba:	f023 0320 	bic.w	r3, r3, #32
 800e8be:	6023      	str	r3, [r4, #0]
 800e8c0:	e7f6      	b.n	800e8b0 <_printf_i+0x194>
 800e8c2:	4616      	mov	r6, r2
 800e8c4:	e7bd      	b.n	800e842 <_printf_i+0x126>
 800e8c6:	6833      	ldr	r3, [r6, #0]
 800e8c8:	6825      	ldr	r5, [r4, #0]
 800e8ca:	6961      	ldr	r1, [r4, #20]
 800e8cc:	1d18      	adds	r0, r3, #4
 800e8ce:	6030      	str	r0, [r6, #0]
 800e8d0:	062e      	lsls	r6, r5, #24
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	d501      	bpl.n	800e8da <_printf_i+0x1be>
 800e8d6:	6019      	str	r1, [r3, #0]
 800e8d8:	e002      	b.n	800e8e0 <_printf_i+0x1c4>
 800e8da:	0668      	lsls	r0, r5, #25
 800e8dc:	d5fb      	bpl.n	800e8d6 <_printf_i+0x1ba>
 800e8de:	8019      	strh	r1, [r3, #0]
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	6123      	str	r3, [r4, #16]
 800e8e4:	4616      	mov	r6, r2
 800e8e6:	e7bc      	b.n	800e862 <_printf_i+0x146>
 800e8e8:	6833      	ldr	r3, [r6, #0]
 800e8ea:	1d1a      	adds	r2, r3, #4
 800e8ec:	6032      	str	r2, [r6, #0]
 800e8ee:	681e      	ldr	r6, [r3, #0]
 800e8f0:	6862      	ldr	r2, [r4, #4]
 800e8f2:	2100      	movs	r1, #0
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7f1 fc83 	bl	8000200 <memchr>
 800e8fa:	b108      	cbz	r0, 800e900 <_printf_i+0x1e4>
 800e8fc:	1b80      	subs	r0, r0, r6
 800e8fe:	6060      	str	r0, [r4, #4]
 800e900:	6863      	ldr	r3, [r4, #4]
 800e902:	6123      	str	r3, [r4, #16]
 800e904:	2300      	movs	r3, #0
 800e906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e90a:	e7aa      	b.n	800e862 <_printf_i+0x146>
 800e90c:	6923      	ldr	r3, [r4, #16]
 800e90e:	4632      	mov	r2, r6
 800e910:	4649      	mov	r1, r9
 800e912:	4640      	mov	r0, r8
 800e914:	47d0      	blx	sl
 800e916:	3001      	adds	r0, #1
 800e918:	d0ad      	beq.n	800e876 <_printf_i+0x15a>
 800e91a:	6823      	ldr	r3, [r4, #0]
 800e91c:	079b      	lsls	r3, r3, #30
 800e91e:	d413      	bmi.n	800e948 <_printf_i+0x22c>
 800e920:	68e0      	ldr	r0, [r4, #12]
 800e922:	9b03      	ldr	r3, [sp, #12]
 800e924:	4298      	cmp	r0, r3
 800e926:	bfb8      	it	lt
 800e928:	4618      	movlt	r0, r3
 800e92a:	e7a6      	b.n	800e87a <_printf_i+0x15e>
 800e92c:	2301      	movs	r3, #1
 800e92e:	4632      	mov	r2, r6
 800e930:	4649      	mov	r1, r9
 800e932:	4640      	mov	r0, r8
 800e934:	47d0      	blx	sl
 800e936:	3001      	adds	r0, #1
 800e938:	d09d      	beq.n	800e876 <_printf_i+0x15a>
 800e93a:	3501      	adds	r5, #1
 800e93c:	68e3      	ldr	r3, [r4, #12]
 800e93e:	9903      	ldr	r1, [sp, #12]
 800e940:	1a5b      	subs	r3, r3, r1
 800e942:	42ab      	cmp	r3, r5
 800e944:	dcf2      	bgt.n	800e92c <_printf_i+0x210>
 800e946:	e7eb      	b.n	800e920 <_printf_i+0x204>
 800e948:	2500      	movs	r5, #0
 800e94a:	f104 0619 	add.w	r6, r4, #25
 800e94e:	e7f5      	b.n	800e93c <_printf_i+0x220>
 800e950:	0801667f 	.word	0x0801667f
 800e954:	08016690 	.word	0x08016690

0800e958 <std>:
 800e958:	2300      	movs	r3, #0
 800e95a:	b510      	push	{r4, lr}
 800e95c:	4604      	mov	r4, r0
 800e95e:	e9c0 3300 	strd	r3, r3, [r0]
 800e962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e966:	6083      	str	r3, [r0, #8]
 800e968:	8181      	strh	r1, [r0, #12]
 800e96a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e96c:	81c2      	strh	r2, [r0, #14]
 800e96e:	6183      	str	r3, [r0, #24]
 800e970:	4619      	mov	r1, r3
 800e972:	2208      	movs	r2, #8
 800e974:	305c      	adds	r0, #92	@ 0x5c
 800e976:	f000 f9d7 	bl	800ed28 <memset>
 800e97a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9b0 <std+0x58>)
 800e97c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e97e:	4b0d      	ldr	r3, [pc, #52]	@ (800e9b4 <std+0x5c>)
 800e980:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e982:	4b0d      	ldr	r3, [pc, #52]	@ (800e9b8 <std+0x60>)
 800e984:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e986:	4b0d      	ldr	r3, [pc, #52]	@ (800e9bc <std+0x64>)
 800e988:	6323      	str	r3, [r4, #48]	@ 0x30
 800e98a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c0 <std+0x68>)
 800e98c:	6224      	str	r4, [r4, #32]
 800e98e:	429c      	cmp	r4, r3
 800e990:	d006      	beq.n	800e9a0 <std+0x48>
 800e992:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e996:	4294      	cmp	r4, r2
 800e998:	d002      	beq.n	800e9a0 <std+0x48>
 800e99a:	33d0      	adds	r3, #208	@ 0xd0
 800e99c:	429c      	cmp	r4, r3
 800e99e:	d105      	bne.n	800e9ac <std+0x54>
 800e9a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9a8:	f000 baa0 	b.w	800eeec <__retarget_lock_init_recursive>
 800e9ac:	bd10      	pop	{r4, pc}
 800e9ae:	bf00      	nop
 800e9b0:	0800eb45 	.word	0x0800eb45
 800e9b4:	0800eb67 	.word	0x0800eb67
 800e9b8:	0800eb9f 	.word	0x0800eb9f
 800e9bc:	0800ebc3 	.word	0x0800ebc3
 800e9c0:	20001858 	.word	0x20001858

0800e9c4 <stdio_exit_handler>:
 800e9c4:	4a02      	ldr	r2, [pc, #8]	@ (800e9d0 <stdio_exit_handler+0xc>)
 800e9c6:	4903      	ldr	r1, [pc, #12]	@ (800e9d4 <stdio_exit_handler+0x10>)
 800e9c8:	4803      	ldr	r0, [pc, #12]	@ (800e9d8 <stdio_exit_handler+0x14>)
 800e9ca:	f000 b87b 	b.w	800eac4 <_fwalk_sglue>
 800e9ce:	bf00      	nop
 800e9d0:	20000c74 	.word	0x20000c74
 800e9d4:	080107c9 	.word	0x080107c9
 800e9d8:	20000c84 	.word	0x20000c84

0800e9dc <cleanup_stdio>:
 800e9dc:	6841      	ldr	r1, [r0, #4]
 800e9de:	4b0c      	ldr	r3, [pc, #48]	@ (800ea10 <cleanup_stdio+0x34>)
 800e9e0:	4299      	cmp	r1, r3
 800e9e2:	b510      	push	{r4, lr}
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	d001      	beq.n	800e9ec <cleanup_stdio+0x10>
 800e9e8:	f001 feee 	bl	80107c8 <_fflush_r>
 800e9ec:	68a1      	ldr	r1, [r4, #8]
 800e9ee:	4b09      	ldr	r3, [pc, #36]	@ (800ea14 <cleanup_stdio+0x38>)
 800e9f0:	4299      	cmp	r1, r3
 800e9f2:	d002      	beq.n	800e9fa <cleanup_stdio+0x1e>
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f001 fee7 	bl	80107c8 <_fflush_r>
 800e9fa:	68e1      	ldr	r1, [r4, #12]
 800e9fc:	4b06      	ldr	r3, [pc, #24]	@ (800ea18 <cleanup_stdio+0x3c>)
 800e9fe:	4299      	cmp	r1, r3
 800ea00:	d004      	beq.n	800ea0c <cleanup_stdio+0x30>
 800ea02:	4620      	mov	r0, r4
 800ea04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea08:	f001 bede 	b.w	80107c8 <_fflush_r>
 800ea0c:	bd10      	pop	{r4, pc}
 800ea0e:	bf00      	nop
 800ea10:	20001858 	.word	0x20001858
 800ea14:	200018c0 	.word	0x200018c0
 800ea18:	20001928 	.word	0x20001928

0800ea1c <global_stdio_init.part.0>:
 800ea1c:	b510      	push	{r4, lr}
 800ea1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea4c <global_stdio_init.part.0+0x30>)
 800ea20:	4c0b      	ldr	r4, [pc, #44]	@ (800ea50 <global_stdio_init.part.0+0x34>)
 800ea22:	4a0c      	ldr	r2, [pc, #48]	@ (800ea54 <global_stdio_init.part.0+0x38>)
 800ea24:	601a      	str	r2, [r3, #0]
 800ea26:	4620      	mov	r0, r4
 800ea28:	2200      	movs	r2, #0
 800ea2a:	2104      	movs	r1, #4
 800ea2c:	f7ff ff94 	bl	800e958 <std>
 800ea30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea34:	2201      	movs	r2, #1
 800ea36:	2109      	movs	r1, #9
 800ea38:	f7ff ff8e 	bl	800e958 <std>
 800ea3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea40:	2202      	movs	r2, #2
 800ea42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea46:	2112      	movs	r1, #18
 800ea48:	f7ff bf86 	b.w	800e958 <std>
 800ea4c:	20001990 	.word	0x20001990
 800ea50:	20001858 	.word	0x20001858
 800ea54:	0800e9c5 	.word	0x0800e9c5

0800ea58 <__sfp_lock_acquire>:
 800ea58:	4801      	ldr	r0, [pc, #4]	@ (800ea60 <__sfp_lock_acquire+0x8>)
 800ea5a:	f000 ba48 	b.w	800eeee <__retarget_lock_acquire_recursive>
 800ea5e:	bf00      	nop
 800ea60:	2000199a 	.word	0x2000199a

0800ea64 <__sfp_lock_release>:
 800ea64:	4801      	ldr	r0, [pc, #4]	@ (800ea6c <__sfp_lock_release+0x8>)
 800ea66:	f000 ba43 	b.w	800eef0 <__retarget_lock_release_recursive>
 800ea6a:	bf00      	nop
 800ea6c:	2000199a 	.word	0x2000199a

0800ea70 <__sinit>:
 800ea70:	b510      	push	{r4, lr}
 800ea72:	4604      	mov	r4, r0
 800ea74:	f7ff fff0 	bl	800ea58 <__sfp_lock_acquire>
 800ea78:	6a23      	ldr	r3, [r4, #32]
 800ea7a:	b11b      	cbz	r3, 800ea84 <__sinit+0x14>
 800ea7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea80:	f7ff bff0 	b.w	800ea64 <__sfp_lock_release>
 800ea84:	4b04      	ldr	r3, [pc, #16]	@ (800ea98 <__sinit+0x28>)
 800ea86:	6223      	str	r3, [r4, #32]
 800ea88:	4b04      	ldr	r3, [pc, #16]	@ (800ea9c <__sinit+0x2c>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1f5      	bne.n	800ea7c <__sinit+0xc>
 800ea90:	f7ff ffc4 	bl	800ea1c <global_stdio_init.part.0>
 800ea94:	e7f2      	b.n	800ea7c <__sinit+0xc>
 800ea96:	bf00      	nop
 800ea98:	0800e9dd 	.word	0x0800e9dd
 800ea9c:	20001990 	.word	0x20001990

0800eaa0 <fiprintf>:
 800eaa0:	b40e      	push	{r1, r2, r3}
 800eaa2:	b503      	push	{r0, r1, lr}
 800eaa4:	4601      	mov	r1, r0
 800eaa6:	ab03      	add	r3, sp, #12
 800eaa8:	4805      	ldr	r0, [pc, #20]	@ (800eac0 <fiprintf+0x20>)
 800eaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaae:	6800      	ldr	r0, [r0, #0]
 800eab0:	9301      	str	r3, [sp, #4]
 800eab2:	f7ff fca3 	bl	800e3fc <_vfiprintf_r>
 800eab6:	b002      	add	sp, #8
 800eab8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eabc:	b003      	add	sp, #12
 800eabe:	4770      	bx	lr
 800eac0:	20000c80 	.word	0x20000c80

0800eac4 <_fwalk_sglue>:
 800eac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eac8:	4607      	mov	r7, r0
 800eaca:	4688      	mov	r8, r1
 800eacc:	4614      	mov	r4, r2
 800eace:	2600      	movs	r6, #0
 800ead0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ead4:	f1b9 0901 	subs.w	r9, r9, #1
 800ead8:	d505      	bpl.n	800eae6 <_fwalk_sglue+0x22>
 800eada:	6824      	ldr	r4, [r4, #0]
 800eadc:	2c00      	cmp	r4, #0
 800eade:	d1f7      	bne.n	800ead0 <_fwalk_sglue+0xc>
 800eae0:	4630      	mov	r0, r6
 800eae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eae6:	89ab      	ldrh	r3, [r5, #12]
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d907      	bls.n	800eafc <_fwalk_sglue+0x38>
 800eaec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	d003      	beq.n	800eafc <_fwalk_sglue+0x38>
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	47c0      	blx	r8
 800eafa:	4306      	orrs	r6, r0
 800eafc:	3568      	adds	r5, #104	@ 0x68
 800eafe:	e7e9      	b.n	800ead4 <_fwalk_sglue+0x10>

0800eb00 <siprintf>:
 800eb00:	b40e      	push	{r1, r2, r3}
 800eb02:	b510      	push	{r4, lr}
 800eb04:	b09d      	sub	sp, #116	@ 0x74
 800eb06:	ab1f      	add	r3, sp, #124	@ 0x7c
 800eb08:	9002      	str	r0, [sp, #8]
 800eb0a:	9006      	str	r0, [sp, #24]
 800eb0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb10:	480a      	ldr	r0, [pc, #40]	@ (800eb3c <siprintf+0x3c>)
 800eb12:	9107      	str	r1, [sp, #28]
 800eb14:	9104      	str	r1, [sp, #16]
 800eb16:	490a      	ldr	r1, [pc, #40]	@ (800eb40 <siprintf+0x40>)
 800eb18:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb1c:	9105      	str	r1, [sp, #20]
 800eb1e:	2400      	movs	r4, #0
 800eb20:	a902      	add	r1, sp, #8
 800eb22:	6800      	ldr	r0, [r0, #0]
 800eb24:	9301      	str	r3, [sp, #4]
 800eb26:	941b      	str	r4, [sp, #108]	@ 0x6c
 800eb28:	f001 fcce 	bl	80104c8 <_svfiprintf_r>
 800eb2c:	9b02      	ldr	r3, [sp, #8]
 800eb2e:	701c      	strb	r4, [r3, #0]
 800eb30:	b01d      	add	sp, #116	@ 0x74
 800eb32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb36:	b003      	add	sp, #12
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	20000c80 	.word	0x20000c80
 800eb40:	ffff0208 	.word	0xffff0208

0800eb44 <__sread>:
 800eb44:	b510      	push	{r4, lr}
 800eb46:	460c      	mov	r4, r1
 800eb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb4c:	f000 f95c 	bl	800ee08 <_read_r>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	bfab      	itete	ge
 800eb54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb56:	89a3      	ldrhlt	r3, [r4, #12]
 800eb58:	181b      	addge	r3, r3, r0
 800eb5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb5e:	bfac      	ite	ge
 800eb60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb62:	81a3      	strhlt	r3, [r4, #12]
 800eb64:	bd10      	pop	{r4, pc}

0800eb66 <__swrite>:
 800eb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6a:	461f      	mov	r7, r3
 800eb6c:	898b      	ldrh	r3, [r1, #12]
 800eb6e:	05db      	lsls	r3, r3, #23
 800eb70:	4605      	mov	r5, r0
 800eb72:	460c      	mov	r4, r1
 800eb74:	4616      	mov	r6, r2
 800eb76:	d505      	bpl.n	800eb84 <__swrite+0x1e>
 800eb78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb7c:	2302      	movs	r3, #2
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f000 f930 	bl	800ede4 <_lseek_r>
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb8e:	81a3      	strh	r3, [r4, #12]
 800eb90:	4632      	mov	r2, r6
 800eb92:	463b      	mov	r3, r7
 800eb94:	4628      	mov	r0, r5
 800eb96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9a:	f000 b96b 	b.w	800ee74 <_write_r>

0800eb9e <__sseek>:
 800eb9e:	b510      	push	{r4, lr}
 800eba0:	460c      	mov	r4, r1
 800eba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba6:	f000 f91d 	bl	800ede4 <_lseek_r>
 800ebaa:	1c43      	adds	r3, r0, #1
 800ebac:	89a3      	ldrh	r3, [r4, #12]
 800ebae:	bf15      	itete	ne
 800ebb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ebb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ebb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ebba:	81a3      	strheq	r3, [r4, #12]
 800ebbc:	bf18      	it	ne
 800ebbe:	81a3      	strhne	r3, [r4, #12]
 800ebc0:	bd10      	pop	{r4, pc}

0800ebc2 <__sclose>:
 800ebc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc6:	f000 b8fd 	b.w	800edc4 <_close_r>

0800ebca <__swbuf_r>:
 800ebca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebcc:	460e      	mov	r6, r1
 800ebce:	4614      	mov	r4, r2
 800ebd0:	4605      	mov	r5, r0
 800ebd2:	b118      	cbz	r0, 800ebdc <__swbuf_r+0x12>
 800ebd4:	6a03      	ldr	r3, [r0, #32]
 800ebd6:	b90b      	cbnz	r3, 800ebdc <__swbuf_r+0x12>
 800ebd8:	f7ff ff4a 	bl	800ea70 <__sinit>
 800ebdc:	69a3      	ldr	r3, [r4, #24]
 800ebde:	60a3      	str	r3, [r4, #8]
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	071a      	lsls	r2, r3, #28
 800ebe4:	d501      	bpl.n	800ebea <__swbuf_r+0x20>
 800ebe6:	6923      	ldr	r3, [r4, #16]
 800ebe8:	b943      	cbnz	r3, 800ebfc <__swbuf_r+0x32>
 800ebea:	4621      	mov	r1, r4
 800ebec:	4628      	mov	r0, r5
 800ebee:	f000 f82b 	bl	800ec48 <__swsetup_r>
 800ebf2:	b118      	cbz	r0, 800ebfc <__swbuf_r+0x32>
 800ebf4:	f04f 37ff 	mov.w	r7, #4294967295
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebfc:	6823      	ldr	r3, [r4, #0]
 800ebfe:	6922      	ldr	r2, [r4, #16]
 800ec00:	1a98      	subs	r0, r3, r2
 800ec02:	6963      	ldr	r3, [r4, #20]
 800ec04:	b2f6      	uxtb	r6, r6
 800ec06:	4283      	cmp	r3, r0
 800ec08:	4637      	mov	r7, r6
 800ec0a:	dc05      	bgt.n	800ec18 <__swbuf_r+0x4e>
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	4628      	mov	r0, r5
 800ec10:	f001 fdda 	bl	80107c8 <_fflush_r>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d1ed      	bne.n	800ebf4 <__swbuf_r+0x2a>
 800ec18:	68a3      	ldr	r3, [r4, #8]
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	60a3      	str	r3, [r4, #8]
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	1c5a      	adds	r2, r3, #1
 800ec22:	6022      	str	r2, [r4, #0]
 800ec24:	701e      	strb	r6, [r3, #0]
 800ec26:	6962      	ldr	r2, [r4, #20]
 800ec28:	1c43      	adds	r3, r0, #1
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d004      	beq.n	800ec38 <__swbuf_r+0x6e>
 800ec2e:	89a3      	ldrh	r3, [r4, #12]
 800ec30:	07db      	lsls	r3, r3, #31
 800ec32:	d5e1      	bpl.n	800ebf8 <__swbuf_r+0x2e>
 800ec34:	2e0a      	cmp	r6, #10
 800ec36:	d1df      	bne.n	800ebf8 <__swbuf_r+0x2e>
 800ec38:	4621      	mov	r1, r4
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	f001 fdc4 	bl	80107c8 <_fflush_r>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d0d9      	beq.n	800ebf8 <__swbuf_r+0x2e>
 800ec44:	e7d6      	b.n	800ebf4 <__swbuf_r+0x2a>
	...

0800ec48 <__swsetup_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4b29      	ldr	r3, [pc, #164]	@ (800ecf0 <__swsetup_r+0xa8>)
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	6818      	ldr	r0, [r3, #0]
 800ec50:	460c      	mov	r4, r1
 800ec52:	b118      	cbz	r0, 800ec5c <__swsetup_r+0x14>
 800ec54:	6a03      	ldr	r3, [r0, #32]
 800ec56:	b90b      	cbnz	r3, 800ec5c <__swsetup_r+0x14>
 800ec58:	f7ff ff0a 	bl	800ea70 <__sinit>
 800ec5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec60:	0719      	lsls	r1, r3, #28
 800ec62:	d422      	bmi.n	800ecaa <__swsetup_r+0x62>
 800ec64:	06da      	lsls	r2, r3, #27
 800ec66:	d407      	bmi.n	800ec78 <__swsetup_r+0x30>
 800ec68:	2209      	movs	r2, #9
 800ec6a:	602a      	str	r2, [r5, #0]
 800ec6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec70:	81a3      	strh	r3, [r4, #12]
 800ec72:	f04f 30ff 	mov.w	r0, #4294967295
 800ec76:	e033      	b.n	800ece0 <__swsetup_r+0x98>
 800ec78:	0758      	lsls	r0, r3, #29
 800ec7a:	d512      	bpl.n	800eca2 <__swsetup_r+0x5a>
 800ec7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec7e:	b141      	cbz	r1, 800ec92 <__swsetup_r+0x4a>
 800ec80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec84:	4299      	cmp	r1, r3
 800ec86:	d002      	beq.n	800ec8e <__swsetup_r+0x46>
 800ec88:	4628      	mov	r0, r5
 800ec8a:	f000 fff5 	bl	800fc78 <_free_r>
 800ec8e:	2300      	movs	r3, #0
 800ec90:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec98:	81a3      	strh	r3, [r4, #12]
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	6063      	str	r3, [r4, #4]
 800ec9e:	6923      	ldr	r3, [r4, #16]
 800eca0:	6023      	str	r3, [r4, #0]
 800eca2:	89a3      	ldrh	r3, [r4, #12]
 800eca4:	f043 0308 	orr.w	r3, r3, #8
 800eca8:	81a3      	strh	r3, [r4, #12]
 800ecaa:	6923      	ldr	r3, [r4, #16]
 800ecac:	b94b      	cbnz	r3, 800ecc2 <__swsetup_r+0x7a>
 800ecae:	89a3      	ldrh	r3, [r4, #12]
 800ecb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ecb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecb8:	d003      	beq.n	800ecc2 <__swsetup_r+0x7a>
 800ecba:	4621      	mov	r1, r4
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	f001 fdd1 	bl	8010864 <__smakebuf_r>
 800ecc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecc6:	f013 0201 	ands.w	r2, r3, #1
 800ecca:	d00a      	beq.n	800ece2 <__swsetup_r+0x9a>
 800eccc:	2200      	movs	r2, #0
 800ecce:	60a2      	str	r2, [r4, #8]
 800ecd0:	6962      	ldr	r2, [r4, #20]
 800ecd2:	4252      	negs	r2, r2
 800ecd4:	61a2      	str	r2, [r4, #24]
 800ecd6:	6922      	ldr	r2, [r4, #16]
 800ecd8:	b942      	cbnz	r2, 800ecec <__swsetup_r+0xa4>
 800ecda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecde:	d1c5      	bne.n	800ec6c <__swsetup_r+0x24>
 800ece0:	bd38      	pop	{r3, r4, r5, pc}
 800ece2:	0799      	lsls	r1, r3, #30
 800ece4:	bf58      	it	pl
 800ece6:	6962      	ldrpl	r2, [r4, #20]
 800ece8:	60a2      	str	r2, [r4, #8]
 800ecea:	e7f4      	b.n	800ecd6 <__swsetup_r+0x8e>
 800ecec:	2000      	movs	r0, #0
 800ecee:	e7f7      	b.n	800ece0 <__swsetup_r+0x98>
 800ecf0:	20000c80 	.word	0x20000c80

0800ecf4 <memmove>:
 800ecf4:	4288      	cmp	r0, r1
 800ecf6:	b510      	push	{r4, lr}
 800ecf8:	eb01 0402 	add.w	r4, r1, r2
 800ecfc:	d902      	bls.n	800ed04 <memmove+0x10>
 800ecfe:	4284      	cmp	r4, r0
 800ed00:	4623      	mov	r3, r4
 800ed02:	d807      	bhi.n	800ed14 <memmove+0x20>
 800ed04:	1e43      	subs	r3, r0, #1
 800ed06:	42a1      	cmp	r1, r4
 800ed08:	d008      	beq.n	800ed1c <memmove+0x28>
 800ed0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed12:	e7f8      	b.n	800ed06 <memmove+0x12>
 800ed14:	4402      	add	r2, r0
 800ed16:	4601      	mov	r1, r0
 800ed18:	428a      	cmp	r2, r1
 800ed1a:	d100      	bne.n	800ed1e <memmove+0x2a>
 800ed1c:	bd10      	pop	{r4, pc}
 800ed1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed26:	e7f7      	b.n	800ed18 <memmove+0x24>

0800ed28 <memset>:
 800ed28:	4402      	add	r2, r0
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d100      	bne.n	800ed32 <memset+0xa>
 800ed30:	4770      	bx	lr
 800ed32:	f803 1b01 	strb.w	r1, [r3], #1
 800ed36:	e7f9      	b.n	800ed2c <memset+0x4>

0800ed38 <strncmp>:
 800ed38:	b510      	push	{r4, lr}
 800ed3a:	b16a      	cbz	r2, 800ed58 <strncmp+0x20>
 800ed3c:	3901      	subs	r1, #1
 800ed3e:	1884      	adds	r4, r0, r2
 800ed40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d103      	bne.n	800ed54 <strncmp+0x1c>
 800ed4c:	42a0      	cmp	r0, r4
 800ed4e:	d001      	beq.n	800ed54 <strncmp+0x1c>
 800ed50:	2a00      	cmp	r2, #0
 800ed52:	d1f5      	bne.n	800ed40 <strncmp+0x8>
 800ed54:	1ad0      	subs	r0, r2, r3
 800ed56:	bd10      	pop	{r4, pc}
 800ed58:	4610      	mov	r0, r2
 800ed5a:	e7fc      	b.n	800ed56 <strncmp+0x1e>

0800ed5c <_raise_r>:
 800ed5c:	291f      	cmp	r1, #31
 800ed5e:	b538      	push	{r3, r4, r5, lr}
 800ed60:	4605      	mov	r5, r0
 800ed62:	460c      	mov	r4, r1
 800ed64:	d904      	bls.n	800ed70 <_raise_r+0x14>
 800ed66:	2316      	movs	r3, #22
 800ed68:	6003      	str	r3, [r0, #0]
 800ed6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed6e:	bd38      	pop	{r3, r4, r5, pc}
 800ed70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ed72:	b112      	cbz	r2, 800ed7a <_raise_r+0x1e>
 800ed74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed78:	b94b      	cbnz	r3, 800ed8e <_raise_r+0x32>
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	f000 f868 	bl	800ee50 <_getpid_r>
 800ed80:	4622      	mov	r2, r4
 800ed82:	4601      	mov	r1, r0
 800ed84:	4628      	mov	r0, r5
 800ed86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed8a:	f000 b84f 	b.w	800ee2c <_kill_r>
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d00a      	beq.n	800eda8 <_raise_r+0x4c>
 800ed92:	1c59      	adds	r1, r3, #1
 800ed94:	d103      	bne.n	800ed9e <_raise_r+0x42>
 800ed96:	2316      	movs	r3, #22
 800ed98:	6003      	str	r3, [r0, #0]
 800ed9a:	2001      	movs	r0, #1
 800ed9c:	e7e7      	b.n	800ed6e <_raise_r+0x12>
 800ed9e:	2100      	movs	r1, #0
 800eda0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eda4:	4620      	mov	r0, r4
 800eda6:	4798      	blx	r3
 800eda8:	2000      	movs	r0, #0
 800edaa:	e7e0      	b.n	800ed6e <_raise_r+0x12>

0800edac <raise>:
 800edac:	4b02      	ldr	r3, [pc, #8]	@ (800edb8 <raise+0xc>)
 800edae:	4601      	mov	r1, r0
 800edb0:	6818      	ldr	r0, [r3, #0]
 800edb2:	f7ff bfd3 	b.w	800ed5c <_raise_r>
 800edb6:	bf00      	nop
 800edb8:	20000c80 	.word	0x20000c80

0800edbc <_localeconv_r>:
 800edbc:	4800      	ldr	r0, [pc, #0]	@ (800edc0 <_localeconv_r+0x4>)
 800edbe:	4770      	bx	lr
 800edc0:	20000dc4 	.word	0x20000dc4

0800edc4 <_close_r>:
 800edc4:	b538      	push	{r3, r4, r5, lr}
 800edc6:	4d06      	ldr	r5, [pc, #24]	@ (800ede0 <_close_r+0x1c>)
 800edc8:	2300      	movs	r3, #0
 800edca:	4604      	mov	r4, r0
 800edcc:	4608      	mov	r0, r1
 800edce:	602b      	str	r3, [r5, #0]
 800edd0:	f7f2 ffcb 	bl	8001d6a <_close>
 800edd4:	1c43      	adds	r3, r0, #1
 800edd6:	d102      	bne.n	800edde <_close_r+0x1a>
 800edd8:	682b      	ldr	r3, [r5, #0]
 800edda:	b103      	cbz	r3, 800edde <_close_r+0x1a>
 800eddc:	6023      	str	r3, [r4, #0]
 800edde:	bd38      	pop	{r3, r4, r5, pc}
 800ede0:	20001994 	.word	0x20001994

0800ede4 <_lseek_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4d07      	ldr	r5, [pc, #28]	@ (800ee04 <_lseek_r+0x20>)
 800ede8:	4604      	mov	r4, r0
 800edea:	4608      	mov	r0, r1
 800edec:	4611      	mov	r1, r2
 800edee:	2200      	movs	r2, #0
 800edf0:	602a      	str	r2, [r5, #0]
 800edf2:	461a      	mov	r2, r3
 800edf4:	f7f2 ffe0 	bl	8001db8 <_lseek>
 800edf8:	1c43      	adds	r3, r0, #1
 800edfa:	d102      	bne.n	800ee02 <_lseek_r+0x1e>
 800edfc:	682b      	ldr	r3, [r5, #0]
 800edfe:	b103      	cbz	r3, 800ee02 <_lseek_r+0x1e>
 800ee00:	6023      	str	r3, [r4, #0]
 800ee02:	bd38      	pop	{r3, r4, r5, pc}
 800ee04:	20001994 	.word	0x20001994

0800ee08 <_read_r>:
 800ee08:	b538      	push	{r3, r4, r5, lr}
 800ee0a:	4d07      	ldr	r5, [pc, #28]	@ (800ee28 <_read_r+0x20>)
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	4608      	mov	r0, r1
 800ee10:	4611      	mov	r1, r2
 800ee12:	2200      	movs	r2, #0
 800ee14:	602a      	str	r2, [r5, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	f7f2 ff6e 	bl	8001cf8 <_read>
 800ee1c:	1c43      	adds	r3, r0, #1
 800ee1e:	d102      	bne.n	800ee26 <_read_r+0x1e>
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	b103      	cbz	r3, 800ee26 <_read_r+0x1e>
 800ee24:	6023      	str	r3, [r4, #0]
 800ee26:	bd38      	pop	{r3, r4, r5, pc}
 800ee28:	20001994 	.word	0x20001994

0800ee2c <_kill_r>:
 800ee2c:	b538      	push	{r3, r4, r5, lr}
 800ee2e:	4d07      	ldr	r5, [pc, #28]	@ (800ee4c <_kill_r+0x20>)
 800ee30:	2300      	movs	r3, #0
 800ee32:	4604      	mov	r4, r0
 800ee34:	4608      	mov	r0, r1
 800ee36:	4611      	mov	r1, r2
 800ee38:	602b      	str	r3, [r5, #0]
 800ee3a:	f7f2 ff42 	bl	8001cc2 <_kill>
 800ee3e:	1c43      	adds	r3, r0, #1
 800ee40:	d102      	bne.n	800ee48 <_kill_r+0x1c>
 800ee42:	682b      	ldr	r3, [r5, #0]
 800ee44:	b103      	cbz	r3, 800ee48 <_kill_r+0x1c>
 800ee46:	6023      	str	r3, [r4, #0]
 800ee48:	bd38      	pop	{r3, r4, r5, pc}
 800ee4a:	bf00      	nop
 800ee4c:	20001994 	.word	0x20001994

0800ee50 <_getpid_r>:
 800ee50:	f7f2 bf2f 	b.w	8001cb2 <_getpid>

0800ee54 <_sbrk_r>:
 800ee54:	b538      	push	{r3, r4, r5, lr}
 800ee56:	4d06      	ldr	r5, [pc, #24]	@ (800ee70 <_sbrk_r+0x1c>)
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	4608      	mov	r0, r1
 800ee5e:	602b      	str	r3, [r5, #0]
 800ee60:	f7f2 ffb8 	bl	8001dd4 <_sbrk>
 800ee64:	1c43      	adds	r3, r0, #1
 800ee66:	d102      	bne.n	800ee6e <_sbrk_r+0x1a>
 800ee68:	682b      	ldr	r3, [r5, #0]
 800ee6a:	b103      	cbz	r3, 800ee6e <_sbrk_r+0x1a>
 800ee6c:	6023      	str	r3, [r4, #0]
 800ee6e:	bd38      	pop	{r3, r4, r5, pc}
 800ee70:	20001994 	.word	0x20001994

0800ee74 <_write_r>:
 800ee74:	b538      	push	{r3, r4, r5, lr}
 800ee76:	4d07      	ldr	r5, [pc, #28]	@ (800ee94 <_write_r+0x20>)
 800ee78:	4604      	mov	r4, r0
 800ee7a:	4608      	mov	r0, r1
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	2200      	movs	r2, #0
 800ee80:	602a      	str	r2, [r5, #0]
 800ee82:	461a      	mov	r2, r3
 800ee84:	f7f2 ff55 	bl	8001d32 <_write>
 800ee88:	1c43      	adds	r3, r0, #1
 800ee8a:	d102      	bne.n	800ee92 <_write_r+0x1e>
 800ee8c:	682b      	ldr	r3, [r5, #0]
 800ee8e:	b103      	cbz	r3, 800ee92 <_write_r+0x1e>
 800ee90:	6023      	str	r3, [r4, #0]
 800ee92:	bd38      	pop	{r3, r4, r5, pc}
 800ee94:	20001994 	.word	0x20001994

0800ee98 <__errno>:
 800ee98:	4b01      	ldr	r3, [pc, #4]	@ (800eea0 <__errno+0x8>)
 800ee9a:	6818      	ldr	r0, [r3, #0]
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	20000c80 	.word	0x20000c80

0800eea4 <__libc_init_array>:
 800eea4:	b570      	push	{r4, r5, r6, lr}
 800eea6:	4d0d      	ldr	r5, [pc, #52]	@ (800eedc <__libc_init_array+0x38>)
 800eea8:	4c0d      	ldr	r4, [pc, #52]	@ (800eee0 <__libc_init_array+0x3c>)
 800eeaa:	1b64      	subs	r4, r4, r5
 800eeac:	10a4      	asrs	r4, r4, #2
 800eeae:	2600      	movs	r6, #0
 800eeb0:	42a6      	cmp	r6, r4
 800eeb2:	d109      	bne.n	800eec8 <__libc_init_array+0x24>
 800eeb4:	4d0b      	ldr	r5, [pc, #44]	@ (800eee4 <__libc_init_array+0x40>)
 800eeb6:	4c0c      	ldr	r4, [pc, #48]	@ (800eee8 <__libc_init_array+0x44>)
 800eeb8:	f001 fd52 	bl	8010960 <_init>
 800eebc:	1b64      	subs	r4, r4, r5
 800eebe:	10a4      	asrs	r4, r4, #2
 800eec0:	2600      	movs	r6, #0
 800eec2:	42a6      	cmp	r6, r4
 800eec4:	d105      	bne.n	800eed2 <__libc_init_array+0x2e>
 800eec6:	bd70      	pop	{r4, r5, r6, pc}
 800eec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eecc:	4798      	blx	r3
 800eece:	3601      	adds	r6, #1
 800eed0:	e7ee      	b.n	800eeb0 <__libc_init_array+0xc>
 800eed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eed6:	4798      	blx	r3
 800eed8:	3601      	adds	r6, #1
 800eeda:	e7f2      	b.n	800eec2 <__libc_init_array+0x1e>
 800eedc:	08016998 	.word	0x08016998
 800eee0:	08016998 	.word	0x08016998
 800eee4:	08016998 	.word	0x08016998
 800eee8:	0801699c 	.word	0x0801699c

0800eeec <__retarget_lock_init_recursive>:
 800eeec:	4770      	bx	lr

0800eeee <__retarget_lock_acquire_recursive>:
 800eeee:	4770      	bx	lr

0800eef0 <__retarget_lock_release_recursive>:
 800eef0:	4770      	bx	lr

0800eef2 <memcpy>:
 800eef2:	440a      	add	r2, r1
 800eef4:	4291      	cmp	r1, r2
 800eef6:	f100 33ff 	add.w	r3, r0, #4294967295
 800eefa:	d100      	bne.n	800eefe <memcpy+0xc>
 800eefc:	4770      	bx	lr
 800eefe:	b510      	push	{r4, lr}
 800ef00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef08:	4291      	cmp	r1, r2
 800ef0a:	d1f9      	bne.n	800ef00 <memcpy+0xe>
 800ef0c:	bd10      	pop	{r4, pc}
	...

0800ef10 <__register_exitproc>:
 800ef10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef14:	4d27      	ldr	r5, [pc, #156]	@ (800efb4 <__register_exitproc+0xa4>)
 800ef16:	4607      	mov	r7, r0
 800ef18:	6828      	ldr	r0, [r5, #0]
 800ef1a:	4691      	mov	r9, r2
 800ef1c:	460e      	mov	r6, r1
 800ef1e:	4698      	mov	r8, r3
 800ef20:	f7ff ffe5 	bl	800eeee <__retarget_lock_acquire_recursive>
 800ef24:	4a24      	ldr	r2, [pc, #144]	@ (800efb8 <__register_exitproc+0xa8>)
 800ef26:	6814      	ldr	r4, [r2, #0]
 800ef28:	b93c      	cbnz	r4, 800ef3a <__register_exitproc+0x2a>
 800ef2a:	4b24      	ldr	r3, [pc, #144]	@ (800efbc <__register_exitproc+0xac>)
 800ef2c:	6013      	str	r3, [r2, #0]
 800ef2e:	4a24      	ldr	r2, [pc, #144]	@ (800efc0 <__register_exitproc+0xb0>)
 800ef30:	b112      	cbz	r2, 800ef38 <__register_exitproc+0x28>
 800ef32:	6812      	ldr	r2, [r2, #0]
 800ef34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800ef38:	4c20      	ldr	r4, [pc, #128]	@ (800efbc <__register_exitproc+0xac>)
 800ef3a:	6863      	ldr	r3, [r4, #4]
 800ef3c:	2b1f      	cmp	r3, #31
 800ef3e:	dd06      	ble.n	800ef4e <__register_exitproc+0x3e>
 800ef40:	6828      	ldr	r0, [r5, #0]
 800ef42:	f7ff ffd5 	bl	800eef0 <__retarget_lock_release_recursive>
 800ef46:	f04f 30ff 	mov.w	r0, #4294967295
 800ef4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef4e:	b32f      	cbz	r7, 800ef9c <__register_exitproc+0x8c>
 800ef50:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800ef54:	b968      	cbnz	r0, 800ef72 <__register_exitproc+0x62>
 800ef56:	4b1b      	ldr	r3, [pc, #108]	@ (800efc4 <__register_exitproc+0xb4>)
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d0f1      	beq.n	800ef40 <__register_exitproc+0x30>
 800ef5c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800ef60:	f7fe fe6c 	bl	800dc3c <malloc>
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d0eb      	beq.n	800ef40 <__register_exitproc+0x30>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800ef6e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 800ef72:	6863      	ldr	r3, [r4, #4]
 800ef74:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	409a      	lsls	r2, r3
 800ef7c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800ef80:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 800ef84:	4313      	orrs	r3, r2
 800ef86:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800ef8a:	2f02      	cmp	r7, #2
 800ef8c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 800ef90:	bf02      	ittt	eq
 800ef92:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 800ef96:	4313      	orreq	r3, r2
 800ef98:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800ef9c:	6863      	ldr	r3, [r4, #4]
 800ef9e:	6828      	ldr	r0, [r5, #0]
 800efa0:	1c5a      	adds	r2, r3, #1
 800efa2:	3302      	adds	r3, #2
 800efa4:	6062      	str	r2, [r4, #4]
 800efa6:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800efaa:	f7ff ffa1 	bl	800eef0 <__retarget_lock_release_recursive>
 800efae:	2000      	movs	r0, #0
 800efb0:	e7cb      	b.n	800ef4a <__register_exitproc+0x3a>
 800efb2:	bf00      	nop
 800efb4:	20000cd0 	.word	0x20000cd0
 800efb8:	20001a28 	.word	0x20001a28
 800efbc:	2000199c 	.word	0x2000199c
 800efc0:	00000000 	.word	0x00000000
 800efc4:	0800dc3d 	.word	0x0800dc3d

0800efc8 <quorem>:
 800efc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	6903      	ldr	r3, [r0, #16]
 800efce:	690c      	ldr	r4, [r1, #16]
 800efd0:	42a3      	cmp	r3, r4
 800efd2:	4607      	mov	r7, r0
 800efd4:	db7e      	blt.n	800f0d4 <quorem+0x10c>
 800efd6:	3c01      	subs	r4, #1
 800efd8:	f101 0814 	add.w	r8, r1, #20
 800efdc:	00a3      	lsls	r3, r4, #2
 800efde:	f100 0514 	add.w	r5, r0, #20
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efe8:	9301      	str	r3, [sp, #4]
 800efea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eff2:	3301      	adds	r3, #1
 800eff4:	429a      	cmp	r2, r3
 800eff6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800effa:	fbb2 f6f3 	udiv	r6, r2, r3
 800effe:	d32e      	bcc.n	800f05e <quorem+0x96>
 800f000:	f04f 0a00 	mov.w	sl, #0
 800f004:	46c4      	mov	ip, r8
 800f006:	46ae      	mov	lr, r5
 800f008:	46d3      	mov	fp, sl
 800f00a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f00e:	b298      	uxth	r0, r3
 800f010:	fb06 a000 	mla	r0, r6, r0, sl
 800f014:	0c02      	lsrs	r2, r0, #16
 800f016:	0c1b      	lsrs	r3, r3, #16
 800f018:	fb06 2303 	mla	r3, r6, r3, r2
 800f01c:	f8de 2000 	ldr.w	r2, [lr]
 800f020:	b280      	uxth	r0, r0
 800f022:	b292      	uxth	r2, r2
 800f024:	1a12      	subs	r2, r2, r0
 800f026:	445a      	add	r2, fp
 800f028:	f8de 0000 	ldr.w	r0, [lr]
 800f02c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f030:	b29b      	uxth	r3, r3
 800f032:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f036:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f03a:	b292      	uxth	r2, r2
 800f03c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f040:	45e1      	cmp	r9, ip
 800f042:	f84e 2b04 	str.w	r2, [lr], #4
 800f046:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f04a:	d2de      	bcs.n	800f00a <quorem+0x42>
 800f04c:	9b00      	ldr	r3, [sp, #0]
 800f04e:	58eb      	ldr	r3, [r5, r3]
 800f050:	b92b      	cbnz	r3, 800f05e <quorem+0x96>
 800f052:	9b01      	ldr	r3, [sp, #4]
 800f054:	3b04      	subs	r3, #4
 800f056:	429d      	cmp	r5, r3
 800f058:	461a      	mov	r2, r3
 800f05a:	d32f      	bcc.n	800f0bc <quorem+0xf4>
 800f05c:	613c      	str	r4, [r7, #16]
 800f05e:	4638      	mov	r0, r7
 800f060:	f001 f8c6 	bl	80101f0 <__mcmp>
 800f064:	2800      	cmp	r0, #0
 800f066:	db25      	blt.n	800f0b4 <quorem+0xec>
 800f068:	4629      	mov	r1, r5
 800f06a:	2000      	movs	r0, #0
 800f06c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f070:	f8d1 c000 	ldr.w	ip, [r1]
 800f074:	fa1f fe82 	uxth.w	lr, r2
 800f078:	fa1f f38c 	uxth.w	r3, ip
 800f07c:	eba3 030e 	sub.w	r3, r3, lr
 800f080:	4403      	add	r3, r0
 800f082:	0c12      	lsrs	r2, r2, #16
 800f084:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f088:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f092:	45c1      	cmp	r9, r8
 800f094:	f841 3b04 	str.w	r3, [r1], #4
 800f098:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f09c:	d2e6      	bcs.n	800f06c <quorem+0xa4>
 800f09e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0a6:	b922      	cbnz	r2, 800f0b2 <quorem+0xea>
 800f0a8:	3b04      	subs	r3, #4
 800f0aa:	429d      	cmp	r5, r3
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	d30b      	bcc.n	800f0c8 <quorem+0x100>
 800f0b0:	613c      	str	r4, [r7, #16]
 800f0b2:	3601      	adds	r6, #1
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	b003      	add	sp, #12
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	6812      	ldr	r2, [r2, #0]
 800f0be:	3b04      	subs	r3, #4
 800f0c0:	2a00      	cmp	r2, #0
 800f0c2:	d1cb      	bne.n	800f05c <quorem+0x94>
 800f0c4:	3c01      	subs	r4, #1
 800f0c6:	e7c6      	b.n	800f056 <quorem+0x8e>
 800f0c8:	6812      	ldr	r2, [r2, #0]
 800f0ca:	3b04      	subs	r3, #4
 800f0cc:	2a00      	cmp	r2, #0
 800f0ce:	d1ef      	bne.n	800f0b0 <quorem+0xe8>
 800f0d0:	3c01      	subs	r4, #1
 800f0d2:	e7ea      	b.n	800f0aa <quorem+0xe2>
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	e7ee      	b.n	800f0b6 <quorem+0xee>

0800f0d8 <_dtoa_r>:
 800f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0dc:	69c7      	ldr	r7, [r0, #28]
 800f0de:	b097      	sub	sp, #92	@ 0x5c
 800f0e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f0e4:	ec55 4b10 	vmov	r4, r5, d0
 800f0e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f0ea:	9107      	str	r1, [sp, #28]
 800f0ec:	4681      	mov	r9, r0
 800f0ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800f0f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f0f2:	b97f      	cbnz	r7, 800f114 <_dtoa_r+0x3c>
 800f0f4:	2010      	movs	r0, #16
 800f0f6:	f7fe fda1 	bl	800dc3c <malloc>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	f8c9 001c 	str.w	r0, [r9, #28]
 800f100:	b920      	cbnz	r0, 800f10c <_dtoa_r+0x34>
 800f102:	4ba9      	ldr	r3, [pc, #676]	@ (800f3a8 <_dtoa_r+0x2d0>)
 800f104:	21ef      	movs	r1, #239	@ 0xef
 800f106:	48a9      	ldr	r0, [pc, #676]	@ (800f3ac <_dtoa_r+0x2d4>)
 800f108:	f7fe fd60 	bl	800dbcc <__assert_func>
 800f10c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f110:	6007      	str	r7, [r0, #0]
 800f112:	60c7      	str	r7, [r0, #12]
 800f114:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f118:	6819      	ldr	r1, [r3, #0]
 800f11a:	b159      	cbz	r1, 800f134 <_dtoa_r+0x5c>
 800f11c:	685a      	ldr	r2, [r3, #4]
 800f11e:	604a      	str	r2, [r1, #4]
 800f120:	2301      	movs	r3, #1
 800f122:	4093      	lsls	r3, r2
 800f124:	608b      	str	r3, [r1, #8]
 800f126:	4648      	mov	r0, r9
 800f128:	f000 fe30 	bl	800fd8c <_Bfree>
 800f12c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f130:	2200      	movs	r2, #0
 800f132:	601a      	str	r2, [r3, #0]
 800f134:	1e2b      	subs	r3, r5, #0
 800f136:	bfb9      	ittee	lt
 800f138:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f13c:	9305      	strlt	r3, [sp, #20]
 800f13e:	2300      	movge	r3, #0
 800f140:	6033      	strge	r3, [r6, #0]
 800f142:	9f05      	ldr	r7, [sp, #20]
 800f144:	4b9a      	ldr	r3, [pc, #616]	@ (800f3b0 <_dtoa_r+0x2d8>)
 800f146:	bfbc      	itt	lt
 800f148:	2201      	movlt	r2, #1
 800f14a:	6032      	strlt	r2, [r6, #0]
 800f14c:	43bb      	bics	r3, r7
 800f14e:	d112      	bne.n	800f176 <_dtoa_r+0x9e>
 800f150:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f152:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f156:	6013      	str	r3, [r2, #0]
 800f158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f15c:	4323      	orrs	r3, r4
 800f15e:	f000 855a 	beq.w	800fc16 <_dtoa_r+0xb3e>
 800f162:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f164:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f3c4 <_dtoa_r+0x2ec>
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f000 855c 	beq.w	800fc26 <_dtoa_r+0xb4e>
 800f16e:	f10a 0303 	add.w	r3, sl, #3
 800f172:	f000 bd56 	b.w	800fc22 <_dtoa_r+0xb4a>
 800f176:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f17a:	2200      	movs	r2, #0
 800f17c:	ec51 0b17 	vmov	r0, r1, d7
 800f180:	2300      	movs	r3, #0
 800f182:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f186:	f7f1 fcb7 	bl	8000af8 <__aeabi_dcmpeq>
 800f18a:	4680      	mov	r8, r0
 800f18c:	b158      	cbz	r0, 800f1a6 <_dtoa_r+0xce>
 800f18e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f190:	2301      	movs	r3, #1
 800f192:	6013      	str	r3, [r2, #0]
 800f194:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f196:	b113      	cbz	r3, 800f19e <_dtoa_r+0xc6>
 800f198:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f19a:	4b86      	ldr	r3, [pc, #536]	@ (800f3b4 <_dtoa_r+0x2dc>)
 800f19c:	6013      	str	r3, [r2, #0]
 800f19e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f3c8 <_dtoa_r+0x2f0>
 800f1a2:	f000 bd40 	b.w	800fc26 <_dtoa_r+0xb4e>
 800f1a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f1aa:	aa14      	add	r2, sp, #80	@ 0x50
 800f1ac:	a915      	add	r1, sp, #84	@ 0x54
 800f1ae:	4648      	mov	r0, r9
 800f1b0:	f001 f8ce 	bl	8010350 <__d2b>
 800f1b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f1b8:	9002      	str	r0, [sp, #8]
 800f1ba:	2e00      	cmp	r6, #0
 800f1bc:	d078      	beq.n	800f2b0 <_dtoa_r+0x1d8>
 800f1be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f1c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f1cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f1d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f1d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f1d8:	4619      	mov	r1, r3
 800f1da:	2200      	movs	r2, #0
 800f1dc:	4b76      	ldr	r3, [pc, #472]	@ (800f3b8 <_dtoa_r+0x2e0>)
 800f1de:	f7f1 f86b 	bl	80002b8 <__aeabi_dsub>
 800f1e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800f390 <_dtoa_r+0x2b8>)
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	f7f1 fa1e 	bl	8000628 <__aeabi_dmul>
 800f1ec:	a36a      	add	r3, pc, #424	@ (adr r3, 800f398 <_dtoa_r+0x2c0>)
 800f1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f2:	f7f1 f863 	bl	80002bc <__adddf3>
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	460d      	mov	r5, r1
 800f1fc:	f7f1 f9aa 	bl	8000554 <__aeabi_i2d>
 800f200:	a367      	add	r3, pc, #412	@ (adr r3, 800f3a0 <_dtoa_r+0x2c8>)
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	f7f1 fa0f 	bl	8000628 <__aeabi_dmul>
 800f20a:	4602      	mov	r2, r0
 800f20c:	460b      	mov	r3, r1
 800f20e:	4620      	mov	r0, r4
 800f210:	4629      	mov	r1, r5
 800f212:	f7f1 f853 	bl	80002bc <__adddf3>
 800f216:	4604      	mov	r4, r0
 800f218:	460d      	mov	r5, r1
 800f21a:	f7f1 fcb5 	bl	8000b88 <__aeabi_d2iz>
 800f21e:	2200      	movs	r2, #0
 800f220:	4607      	mov	r7, r0
 800f222:	2300      	movs	r3, #0
 800f224:	4620      	mov	r0, r4
 800f226:	4629      	mov	r1, r5
 800f228:	f7f1 fc70 	bl	8000b0c <__aeabi_dcmplt>
 800f22c:	b140      	cbz	r0, 800f240 <_dtoa_r+0x168>
 800f22e:	4638      	mov	r0, r7
 800f230:	f7f1 f990 	bl	8000554 <__aeabi_i2d>
 800f234:	4622      	mov	r2, r4
 800f236:	462b      	mov	r3, r5
 800f238:	f7f1 fc5e 	bl	8000af8 <__aeabi_dcmpeq>
 800f23c:	b900      	cbnz	r0, 800f240 <_dtoa_r+0x168>
 800f23e:	3f01      	subs	r7, #1
 800f240:	2f16      	cmp	r7, #22
 800f242:	d852      	bhi.n	800f2ea <_dtoa_r+0x212>
 800f244:	4b5d      	ldr	r3, [pc, #372]	@ (800f3bc <_dtoa_r+0x2e4>)
 800f246:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f252:	f7f1 fc5b 	bl	8000b0c <__aeabi_dcmplt>
 800f256:	2800      	cmp	r0, #0
 800f258:	d049      	beq.n	800f2ee <_dtoa_r+0x216>
 800f25a:	3f01      	subs	r7, #1
 800f25c:	2300      	movs	r3, #0
 800f25e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f260:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f262:	1b9b      	subs	r3, r3, r6
 800f264:	1e5a      	subs	r2, r3, #1
 800f266:	bf45      	ittet	mi
 800f268:	f1c3 0301 	rsbmi	r3, r3, #1
 800f26c:	9300      	strmi	r3, [sp, #0]
 800f26e:	2300      	movpl	r3, #0
 800f270:	2300      	movmi	r3, #0
 800f272:	9206      	str	r2, [sp, #24]
 800f274:	bf54      	ite	pl
 800f276:	9300      	strpl	r3, [sp, #0]
 800f278:	9306      	strmi	r3, [sp, #24]
 800f27a:	2f00      	cmp	r7, #0
 800f27c:	db39      	blt.n	800f2f2 <_dtoa_r+0x21a>
 800f27e:	9b06      	ldr	r3, [sp, #24]
 800f280:	970d      	str	r7, [sp, #52]	@ 0x34
 800f282:	443b      	add	r3, r7
 800f284:	9306      	str	r3, [sp, #24]
 800f286:	2300      	movs	r3, #0
 800f288:	9308      	str	r3, [sp, #32]
 800f28a:	9b07      	ldr	r3, [sp, #28]
 800f28c:	2b09      	cmp	r3, #9
 800f28e:	d863      	bhi.n	800f358 <_dtoa_r+0x280>
 800f290:	2b05      	cmp	r3, #5
 800f292:	bfc4      	itt	gt
 800f294:	3b04      	subgt	r3, #4
 800f296:	9307      	strgt	r3, [sp, #28]
 800f298:	9b07      	ldr	r3, [sp, #28]
 800f29a:	f1a3 0302 	sub.w	r3, r3, #2
 800f29e:	bfcc      	ite	gt
 800f2a0:	2400      	movgt	r4, #0
 800f2a2:	2401      	movle	r4, #1
 800f2a4:	2b03      	cmp	r3, #3
 800f2a6:	d863      	bhi.n	800f370 <_dtoa_r+0x298>
 800f2a8:	e8df f003 	tbb	[pc, r3]
 800f2ac:	2b375452 	.word	0x2b375452
 800f2b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f2b4:	441e      	add	r6, r3
 800f2b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f2ba:	2b20      	cmp	r3, #32
 800f2bc:	bfc1      	itttt	gt
 800f2be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f2c2:	409f      	lslgt	r7, r3
 800f2c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f2c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f2cc:	bfd6      	itet	le
 800f2ce:	f1c3 0320 	rsble	r3, r3, #32
 800f2d2:	ea47 0003 	orrgt.w	r0, r7, r3
 800f2d6:	fa04 f003 	lslle.w	r0, r4, r3
 800f2da:	f7f1 f92b 	bl	8000534 <__aeabi_ui2d>
 800f2de:	2201      	movs	r2, #1
 800f2e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f2e4:	3e01      	subs	r6, #1
 800f2e6:	9212      	str	r2, [sp, #72]	@ 0x48
 800f2e8:	e776      	b.n	800f1d8 <_dtoa_r+0x100>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e7b7      	b.n	800f25e <_dtoa_r+0x186>
 800f2ee:	9010      	str	r0, [sp, #64]	@ 0x40
 800f2f0:	e7b6      	b.n	800f260 <_dtoa_r+0x188>
 800f2f2:	9b00      	ldr	r3, [sp, #0]
 800f2f4:	1bdb      	subs	r3, r3, r7
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	427b      	negs	r3, r7
 800f2fa:	9308      	str	r3, [sp, #32]
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800f300:	e7c3      	b.n	800f28a <_dtoa_r+0x1b2>
 800f302:	2301      	movs	r3, #1
 800f304:	9309      	str	r3, [sp, #36]	@ 0x24
 800f306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f308:	eb07 0b03 	add.w	fp, r7, r3
 800f30c:	f10b 0301 	add.w	r3, fp, #1
 800f310:	2b01      	cmp	r3, #1
 800f312:	9303      	str	r3, [sp, #12]
 800f314:	bfb8      	it	lt
 800f316:	2301      	movlt	r3, #1
 800f318:	e006      	b.n	800f328 <_dtoa_r+0x250>
 800f31a:	2301      	movs	r3, #1
 800f31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f31e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f320:	2b00      	cmp	r3, #0
 800f322:	dd28      	ble.n	800f376 <_dtoa_r+0x29e>
 800f324:	469b      	mov	fp, r3
 800f326:	9303      	str	r3, [sp, #12]
 800f328:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f32c:	2100      	movs	r1, #0
 800f32e:	2204      	movs	r2, #4
 800f330:	f102 0514 	add.w	r5, r2, #20
 800f334:	429d      	cmp	r5, r3
 800f336:	d926      	bls.n	800f386 <_dtoa_r+0x2ae>
 800f338:	6041      	str	r1, [r0, #4]
 800f33a:	4648      	mov	r0, r9
 800f33c:	f000 fce6 	bl	800fd0c <_Balloc>
 800f340:	4682      	mov	sl, r0
 800f342:	2800      	cmp	r0, #0
 800f344:	d142      	bne.n	800f3cc <_dtoa_r+0x2f4>
 800f346:	4b1e      	ldr	r3, [pc, #120]	@ (800f3c0 <_dtoa_r+0x2e8>)
 800f348:	4602      	mov	r2, r0
 800f34a:	f240 11af 	movw	r1, #431	@ 0x1af
 800f34e:	e6da      	b.n	800f106 <_dtoa_r+0x2e>
 800f350:	2300      	movs	r3, #0
 800f352:	e7e3      	b.n	800f31c <_dtoa_r+0x244>
 800f354:	2300      	movs	r3, #0
 800f356:	e7d5      	b.n	800f304 <_dtoa_r+0x22c>
 800f358:	2401      	movs	r4, #1
 800f35a:	2300      	movs	r3, #0
 800f35c:	9307      	str	r3, [sp, #28]
 800f35e:	9409      	str	r4, [sp, #36]	@ 0x24
 800f360:	f04f 3bff 	mov.w	fp, #4294967295
 800f364:	2200      	movs	r2, #0
 800f366:	f8cd b00c 	str.w	fp, [sp, #12]
 800f36a:	2312      	movs	r3, #18
 800f36c:	920c      	str	r2, [sp, #48]	@ 0x30
 800f36e:	e7db      	b.n	800f328 <_dtoa_r+0x250>
 800f370:	2301      	movs	r3, #1
 800f372:	9309      	str	r3, [sp, #36]	@ 0x24
 800f374:	e7f4      	b.n	800f360 <_dtoa_r+0x288>
 800f376:	f04f 0b01 	mov.w	fp, #1
 800f37a:	f8cd b00c 	str.w	fp, [sp, #12]
 800f37e:	465b      	mov	r3, fp
 800f380:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f384:	e7d0      	b.n	800f328 <_dtoa_r+0x250>
 800f386:	3101      	adds	r1, #1
 800f388:	0052      	lsls	r2, r2, #1
 800f38a:	e7d1      	b.n	800f330 <_dtoa_r+0x258>
 800f38c:	f3af 8000 	nop.w
 800f390:	636f4361 	.word	0x636f4361
 800f394:	3fd287a7 	.word	0x3fd287a7
 800f398:	8b60c8b3 	.word	0x8b60c8b3
 800f39c:	3fc68a28 	.word	0x3fc68a28
 800f3a0:	509f79fb 	.word	0x509f79fb
 800f3a4:	3fd34413 	.word	0x3fd34413
 800f3a8:	080166ae 	.word	0x080166ae
 800f3ac:	080166c5 	.word	0x080166c5
 800f3b0:	7ff00000 	.word	0x7ff00000
 800f3b4:	0801666d 	.word	0x0801666d
 800f3b8:	3ff80000 	.word	0x3ff80000
 800f3bc:	080168c8 	.word	0x080168c8
 800f3c0:	0801671d 	.word	0x0801671d
 800f3c4:	080166aa 	.word	0x080166aa
 800f3c8:	0801666c 	.word	0x0801666c
 800f3cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f3d0:	6018      	str	r0, [r3, #0]
 800f3d2:	9b03      	ldr	r3, [sp, #12]
 800f3d4:	2b0e      	cmp	r3, #14
 800f3d6:	f200 80a1 	bhi.w	800f51c <_dtoa_r+0x444>
 800f3da:	2c00      	cmp	r4, #0
 800f3dc:	f000 809e 	beq.w	800f51c <_dtoa_r+0x444>
 800f3e0:	2f00      	cmp	r7, #0
 800f3e2:	dd33      	ble.n	800f44c <_dtoa_r+0x374>
 800f3e4:	4b9c      	ldr	r3, [pc, #624]	@ (800f658 <_dtoa_r+0x580>)
 800f3e6:	f007 020f 	and.w	r2, r7, #15
 800f3ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3ee:	ed93 7b00 	vldr	d7, [r3]
 800f3f2:	05f8      	lsls	r0, r7, #23
 800f3f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f3f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f3fc:	d516      	bpl.n	800f42c <_dtoa_r+0x354>
 800f3fe:	4b97      	ldr	r3, [pc, #604]	@ (800f65c <_dtoa_r+0x584>)
 800f400:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f408:	f7f1 fa38 	bl	800087c <__aeabi_ddiv>
 800f40c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f410:	f004 040f 	and.w	r4, r4, #15
 800f414:	2603      	movs	r6, #3
 800f416:	4d91      	ldr	r5, [pc, #580]	@ (800f65c <_dtoa_r+0x584>)
 800f418:	b954      	cbnz	r4, 800f430 <_dtoa_r+0x358>
 800f41a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f41e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f422:	f7f1 fa2b 	bl	800087c <__aeabi_ddiv>
 800f426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f42a:	e028      	b.n	800f47e <_dtoa_r+0x3a6>
 800f42c:	2602      	movs	r6, #2
 800f42e:	e7f2      	b.n	800f416 <_dtoa_r+0x33e>
 800f430:	07e1      	lsls	r1, r4, #31
 800f432:	d508      	bpl.n	800f446 <_dtoa_r+0x36e>
 800f434:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f438:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f43c:	f7f1 f8f4 	bl	8000628 <__aeabi_dmul>
 800f440:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f444:	3601      	adds	r6, #1
 800f446:	1064      	asrs	r4, r4, #1
 800f448:	3508      	adds	r5, #8
 800f44a:	e7e5      	b.n	800f418 <_dtoa_r+0x340>
 800f44c:	f000 80af 	beq.w	800f5ae <_dtoa_r+0x4d6>
 800f450:	427c      	negs	r4, r7
 800f452:	4b81      	ldr	r3, [pc, #516]	@ (800f658 <_dtoa_r+0x580>)
 800f454:	4d81      	ldr	r5, [pc, #516]	@ (800f65c <_dtoa_r+0x584>)
 800f456:	f004 020f 	and.w	r2, r4, #15
 800f45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f466:	f7f1 f8df 	bl	8000628 <__aeabi_dmul>
 800f46a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f46e:	1124      	asrs	r4, r4, #4
 800f470:	2300      	movs	r3, #0
 800f472:	2602      	movs	r6, #2
 800f474:	2c00      	cmp	r4, #0
 800f476:	f040 808f 	bne.w	800f598 <_dtoa_r+0x4c0>
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d1d3      	bne.n	800f426 <_dtoa_r+0x34e>
 800f47e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f480:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f484:	2b00      	cmp	r3, #0
 800f486:	f000 8094 	beq.w	800f5b2 <_dtoa_r+0x4da>
 800f48a:	4b75      	ldr	r3, [pc, #468]	@ (800f660 <_dtoa_r+0x588>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	4620      	mov	r0, r4
 800f490:	4629      	mov	r1, r5
 800f492:	f7f1 fb3b 	bl	8000b0c <__aeabi_dcmplt>
 800f496:	2800      	cmp	r0, #0
 800f498:	f000 808b 	beq.w	800f5b2 <_dtoa_r+0x4da>
 800f49c:	9b03      	ldr	r3, [sp, #12]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	f000 8087 	beq.w	800f5b2 <_dtoa_r+0x4da>
 800f4a4:	f1bb 0f00 	cmp.w	fp, #0
 800f4a8:	dd34      	ble.n	800f514 <_dtoa_r+0x43c>
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	4b6d      	ldr	r3, [pc, #436]	@ (800f664 <_dtoa_r+0x58c>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	f7f1 f8b9 	bl	8000628 <__aeabi_dmul>
 800f4b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800f4be:	3601      	adds	r6, #1
 800f4c0:	465c      	mov	r4, fp
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	f7f1 f846 	bl	8000554 <__aeabi_i2d>
 800f4c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4cc:	f7f1 f8ac 	bl	8000628 <__aeabi_dmul>
 800f4d0:	4b65      	ldr	r3, [pc, #404]	@ (800f668 <_dtoa_r+0x590>)
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	f7f0 fef2 	bl	80002bc <__adddf3>
 800f4d8:	4605      	mov	r5, r0
 800f4da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f4de:	2c00      	cmp	r4, #0
 800f4e0:	d16a      	bne.n	800f5b8 <_dtoa_r+0x4e0>
 800f4e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4e6:	4b61      	ldr	r3, [pc, #388]	@ (800f66c <_dtoa_r+0x594>)
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f7f0 fee5 	bl	80002b8 <__aeabi_dsub>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f4f6:	462a      	mov	r2, r5
 800f4f8:	4633      	mov	r3, r6
 800f4fa:	f7f1 fb25 	bl	8000b48 <__aeabi_dcmpgt>
 800f4fe:	2800      	cmp	r0, #0
 800f500:	f040 8298 	bne.w	800fa34 <_dtoa_r+0x95c>
 800f504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f508:	462a      	mov	r2, r5
 800f50a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f50e:	f7f1 fafd 	bl	8000b0c <__aeabi_dcmplt>
 800f512:	bb38      	cbnz	r0, 800f564 <_dtoa_r+0x48c>
 800f514:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f518:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f51c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f2c0 8157 	blt.w	800f7d2 <_dtoa_r+0x6fa>
 800f524:	2f0e      	cmp	r7, #14
 800f526:	f300 8154 	bgt.w	800f7d2 <_dtoa_r+0x6fa>
 800f52a:	4b4b      	ldr	r3, [pc, #300]	@ (800f658 <_dtoa_r+0x580>)
 800f52c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f530:	ed93 7b00 	vldr	d7, [r3]
 800f534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f536:	2b00      	cmp	r3, #0
 800f538:	ed8d 7b00 	vstr	d7, [sp]
 800f53c:	f280 80e5 	bge.w	800f70a <_dtoa_r+0x632>
 800f540:	9b03      	ldr	r3, [sp, #12]
 800f542:	2b00      	cmp	r3, #0
 800f544:	f300 80e1 	bgt.w	800f70a <_dtoa_r+0x632>
 800f548:	d10c      	bne.n	800f564 <_dtoa_r+0x48c>
 800f54a:	4b48      	ldr	r3, [pc, #288]	@ (800f66c <_dtoa_r+0x594>)
 800f54c:	2200      	movs	r2, #0
 800f54e:	ec51 0b17 	vmov	r0, r1, d7
 800f552:	f7f1 f869 	bl	8000628 <__aeabi_dmul>
 800f556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f55a:	f7f1 faeb 	bl	8000b34 <__aeabi_dcmpge>
 800f55e:	2800      	cmp	r0, #0
 800f560:	f000 8266 	beq.w	800fa30 <_dtoa_r+0x958>
 800f564:	2400      	movs	r4, #0
 800f566:	4625      	mov	r5, r4
 800f568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f56a:	4656      	mov	r6, sl
 800f56c:	ea6f 0803 	mvn.w	r8, r3
 800f570:	2700      	movs	r7, #0
 800f572:	4621      	mov	r1, r4
 800f574:	4648      	mov	r0, r9
 800f576:	f000 fc09 	bl	800fd8c <_Bfree>
 800f57a:	2d00      	cmp	r5, #0
 800f57c:	f000 80bd 	beq.w	800f6fa <_dtoa_r+0x622>
 800f580:	b12f      	cbz	r7, 800f58e <_dtoa_r+0x4b6>
 800f582:	42af      	cmp	r7, r5
 800f584:	d003      	beq.n	800f58e <_dtoa_r+0x4b6>
 800f586:	4639      	mov	r1, r7
 800f588:	4648      	mov	r0, r9
 800f58a:	f000 fbff 	bl	800fd8c <_Bfree>
 800f58e:	4629      	mov	r1, r5
 800f590:	4648      	mov	r0, r9
 800f592:	f000 fbfb 	bl	800fd8c <_Bfree>
 800f596:	e0b0      	b.n	800f6fa <_dtoa_r+0x622>
 800f598:	07e2      	lsls	r2, r4, #31
 800f59a:	d505      	bpl.n	800f5a8 <_dtoa_r+0x4d0>
 800f59c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5a0:	f7f1 f842 	bl	8000628 <__aeabi_dmul>
 800f5a4:	3601      	adds	r6, #1
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	1064      	asrs	r4, r4, #1
 800f5aa:	3508      	adds	r5, #8
 800f5ac:	e762      	b.n	800f474 <_dtoa_r+0x39c>
 800f5ae:	2602      	movs	r6, #2
 800f5b0:	e765      	b.n	800f47e <_dtoa_r+0x3a6>
 800f5b2:	9c03      	ldr	r4, [sp, #12]
 800f5b4:	46b8      	mov	r8, r7
 800f5b6:	e784      	b.n	800f4c2 <_dtoa_r+0x3ea>
 800f5b8:	4b27      	ldr	r3, [pc, #156]	@ (800f658 <_dtoa_r+0x580>)
 800f5ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f5bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5c4:	4454      	add	r4, sl
 800f5c6:	2900      	cmp	r1, #0
 800f5c8:	d054      	beq.n	800f674 <_dtoa_r+0x59c>
 800f5ca:	4929      	ldr	r1, [pc, #164]	@ (800f670 <_dtoa_r+0x598>)
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	f7f1 f955 	bl	800087c <__aeabi_ddiv>
 800f5d2:	4633      	mov	r3, r6
 800f5d4:	462a      	mov	r2, r5
 800f5d6:	f7f0 fe6f 	bl	80002b8 <__aeabi_dsub>
 800f5da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f5de:	4656      	mov	r6, sl
 800f5e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5e4:	f7f1 fad0 	bl	8000b88 <__aeabi_d2iz>
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	f7f0 ffb3 	bl	8000554 <__aeabi_i2d>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5f6:	f7f0 fe5f 	bl	80002b8 <__aeabi_dsub>
 800f5fa:	3530      	adds	r5, #48	@ 0x30
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	460b      	mov	r3, r1
 800f600:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f604:	f806 5b01 	strb.w	r5, [r6], #1
 800f608:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f60c:	f7f1 fa7e 	bl	8000b0c <__aeabi_dcmplt>
 800f610:	2800      	cmp	r0, #0
 800f612:	d172      	bne.n	800f6fa <_dtoa_r+0x622>
 800f614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f618:	4911      	ldr	r1, [pc, #68]	@ (800f660 <_dtoa_r+0x588>)
 800f61a:	2000      	movs	r0, #0
 800f61c:	f7f0 fe4c 	bl	80002b8 <__aeabi_dsub>
 800f620:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f624:	f7f1 fa72 	bl	8000b0c <__aeabi_dcmplt>
 800f628:	2800      	cmp	r0, #0
 800f62a:	f040 80b4 	bne.w	800f796 <_dtoa_r+0x6be>
 800f62e:	42a6      	cmp	r6, r4
 800f630:	f43f af70 	beq.w	800f514 <_dtoa_r+0x43c>
 800f634:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f638:	4b0a      	ldr	r3, [pc, #40]	@ (800f664 <_dtoa_r+0x58c>)
 800f63a:	2200      	movs	r2, #0
 800f63c:	f7f0 fff4 	bl	8000628 <__aeabi_dmul>
 800f640:	4b08      	ldr	r3, [pc, #32]	@ (800f664 <_dtoa_r+0x58c>)
 800f642:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f646:	2200      	movs	r2, #0
 800f648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f64c:	f7f0 ffec 	bl	8000628 <__aeabi_dmul>
 800f650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f654:	e7c4      	b.n	800f5e0 <_dtoa_r+0x508>
 800f656:	bf00      	nop
 800f658:	080168c8 	.word	0x080168c8
 800f65c:	080168a0 	.word	0x080168a0
 800f660:	3ff00000 	.word	0x3ff00000
 800f664:	40240000 	.word	0x40240000
 800f668:	401c0000 	.word	0x401c0000
 800f66c:	40140000 	.word	0x40140000
 800f670:	3fe00000 	.word	0x3fe00000
 800f674:	4631      	mov	r1, r6
 800f676:	4628      	mov	r0, r5
 800f678:	f7f0 ffd6 	bl	8000628 <__aeabi_dmul>
 800f67c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f680:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f682:	4656      	mov	r6, sl
 800f684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f688:	f7f1 fa7e 	bl	8000b88 <__aeabi_d2iz>
 800f68c:	4605      	mov	r5, r0
 800f68e:	f7f0 ff61 	bl	8000554 <__aeabi_i2d>
 800f692:	4602      	mov	r2, r0
 800f694:	460b      	mov	r3, r1
 800f696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f69a:	f7f0 fe0d 	bl	80002b8 <__aeabi_dsub>
 800f69e:	3530      	adds	r5, #48	@ 0x30
 800f6a0:	f806 5b01 	strb.w	r5, [r6], #1
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	42a6      	cmp	r6, r4
 800f6aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f6ae:	f04f 0200 	mov.w	r2, #0
 800f6b2:	d124      	bne.n	800f6fe <_dtoa_r+0x626>
 800f6b4:	4baf      	ldr	r3, [pc, #700]	@ (800f974 <_dtoa_r+0x89c>)
 800f6b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f6ba:	f7f0 fdff 	bl	80002bc <__adddf3>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6c6:	f7f1 fa3f 	bl	8000b48 <__aeabi_dcmpgt>
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	d163      	bne.n	800f796 <_dtoa_r+0x6be>
 800f6ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f6d2:	49a8      	ldr	r1, [pc, #672]	@ (800f974 <_dtoa_r+0x89c>)
 800f6d4:	2000      	movs	r0, #0
 800f6d6:	f7f0 fdef 	bl	80002b8 <__aeabi_dsub>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	460b      	mov	r3, r1
 800f6de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6e2:	f7f1 fa13 	bl	8000b0c <__aeabi_dcmplt>
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	f43f af14 	beq.w	800f514 <_dtoa_r+0x43c>
 800f6ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f6ee:	1e73      	subs	r3, r6, #1
 800f6f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f6f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f6f6:	2b30      	cmp	r3, #48	@ 0x30
 800f6f8:	d0f8      	beq.n	800f6ec <_dtoa_r+0x614>
 800f6fa:	4647      	mov	r7, r8
 800f6fc:	e03b      	b.n	800f776 <_dtoa_r+0x69e>
 800f6fe:	4b9e      	ldr	r3, [pc, #632]	@ (800f978 <_dtoa_r+0x8a0>)
 800f700:	f7f0 ff92 	bl	8000628 <__aeabi_dmul>
 800f704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f708:	e7bc      	b.n	800f684 <_dtoa_r+0x5ac>
 800f70a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f70e:	4656      	mov	r6, sl
 800f710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f714:	4620      	mov	r0, r4
 800f716:	4629      	mov	r1, r5
 800f718:	f7f1 f8b0 	bl	800087c <__aeabi_ddiv>
 800f71c:	f7f1 fa34 	bl	8000b88 <__aeabi_d2iz>
 800f720:	4680      	mov	r8, r0
 800f722:	f7f0 ff17 	bl	8000554 <__aeabi_i2d>
 800f726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f72a:	f7f0 ff7d 	bl	8000628 <__aeabi_dmul>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	4620      	mov	r0, r4
 800f734:	4629      	mov	r1, r5
 800f736:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f73a:	f7f0 fdbd 	bl	80002b8 <__aeabi_dsub>
 800f73e:	f806 4b01 	strb.w	r4, [r6], #1
 800f742:	9d03      	ldr	r5, [sp, #12]
 800f744:	eba6 040a 	sub.w	r4, r6, sl
 800f748:	42a5      	cmp	r5, r4
 800f74a:	4602      	mov	r2, r0
 800f74c:	460b      	mov	r3, r1
 800f74e:	d133      	bne.n	800f7b8 <_dtoa_r+0x6e0>
 800f750:	f7f0 fdb4 	bl	80002bc <__adddf3>
 800f754:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f758:	4604      	mov	r4, r0
 800f75a:	460d      	mov	r5, r1
 800f75c:	f7f1 f9f4 	bl	8000b48 <__aeabi_dcmpgt>
 800f760:	b9c0      	cbnz	r0, 800f794 <_dtoa_r+0x6bc>
 800f762:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f766:	4620      	mov	r0, r4
 800f768:	4629      	mov	r1, r5
 800f76a:	f7f1 f9c5 	bl	8000af8 <__aeabi_dcmpeq>
 800f76e:	b110      	cbz	r0, 800f776 <_dtoa_r+0x69e>
 800f770:	f018 0f01 	tst.w	r8, #1
 800f774:	d10e      	bne.n	800f794 <_dtoa_r+0x6bc>
 800f776:	9902      	ldr	r1, [sp, #8]
 800f778:	4648      	mov	r0, r9
 800f77a:	f000 fb07 	bl	800fd8c <_Bfree>
 800f77e:	2300      	movs	r3, #0
 800f780:	7033      	strb	r3, [r6, #0]
 800f782:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f784:	3701      	adds	r7, #1
 800f786:	601f      	str	r7, [r3, #0]
 800f788:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 824b 	beq.w	800fc26 <_dtoa_r+0xb4e>
 800f790:	601e      	str	r6, [r3, #0]
 800f792:	e248      	b.n	800fc26 <_dtoa_r+0xb4e>
 800f794:	46b8      	mov	r8, r7
 800f796:	4633      	mov	r3, r6
 800f798:	461e      	mov	r6, r3
 800f79a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f79e:	2a39      	cmp	r2, #57	@ 0x39
 800f7a0:	d106      	bne.n	800f7b0 <_dtoa_r+0x6d8>
 800f7a2:	459a      	cmp	sl, r3
 800f7a4:	d1f8      	bne.n	800f798 <_dtoa_r+0x6c0>
 800f7a6:	2230      	movs	r2, #48	@ 0x30
 800f7a8:	f108 0801 	add.w	r8, r8, #1
 800f7ac:	f88a 2000 	strb.w	r2, [sl]
 800f7b0:	781a      	ldrb	r2, [r3, #0]
 800f7b2:	3201      	adds	r2, #1
 800f7b4:	701a      	strb	r2, [r3, #0]
 800f7b6:	e7a0      	b.n	800f6fa <_dtoa_r+0x622>
 800f7b8:	4b6f      	ldr	r3, [pc, #444]	@ (800f978 <_dtoa_r+0x8a0>)
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f7f0 ff34 	bl	8000628 <__aeabi_dmul>
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	460d      	mov	r5, r1
 800f7c8:	f7f1 f996 	bl	8000af8 <__aeabi_dcmpeq>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d09f      	beq.n	800f710 <_dtoa_r+0x638>
 800f7d0:	e7d1      	b.n	800f776 <_dtoa_r+0x69e>
 800f7d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7d4:	2a00      	cmp	r2, #0
 800f7d6:	f000 80ea 	beq.w	800f9ae <_dtoa_r+0x8d6>
 800f7da:	9a07      	ldr	r2, [sp, #28]
 800f7dc:	2a01      	cmp	r2, #1
 800f7de:	f300 80cd 	bgt.w	800f97c <_dtoa_r+0x8a4>
 800f7e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f7e4:	2a00      	cmp	r2, #0
 800f7e6:	f000 80c1 	beq.w	800f96c <_dtoa_r+0x894>
 800f7ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f7ee:	9c08      	ldr	r4, [sp, #32]
 800f7f0:	9e00      	ldr	r6, [sp, #0]
 800f7f2:	9a00      	ldr	r2, [sp, #0]
 800f7f4:	441a      	add	r2, r3
 800f7f6:	9200      	str	r2, [sp, #0]
 800f7f8:	9a06      	ldr	r2, [sp, #24]
 800f7fa:	2101      	movs	r1, #1
 800f7fc:	441a      	add	r2, r3
 800f7fe:	4648      	mov	r0, r9
 800f800:	9206      	str	r2, [sp, #24]
 800f802:	f000 fb77 	bl	800fef4 <__i2b>
 800f806:	4605      	mov	r5, r0
 800f808:	b166      	cbz	r6, 800f824 <_dtoa_r+0x74c>
 800f80a:	9b06      	ldr	r3, [sp, #24]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	dd09      	ble.n	800f824 <_dtoa_r+0x74c>
 800f810:	42b3      	cmp	r3, r6
 800f812:	9a00      	ldr	r2, [sp, #0]
 800f814:	bfa8      	it	ge
 800f816:	4633      	movge	r3, r6
 800f818:	1ad2      	subs	r2, r2, r3
 800f81a:	9200      	str	r2, [sp, #0]
 800f81c:	9a06      	ldr	r2, [sp, #24]
 800f81e:	1af6      	subs	r6, r6, r3
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	9306      	str	r3, [sp, #24]
 800f824:	9b08      	ldr	r3, [sp, #32]
 800f826:	b30b      	cbz	r3, 800f86c <_dtoa_r+0x794>
 800f828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 80c6 	beq.w	800f9bc <_dtoa_r+0x8e4>
 800f830:	2c00      	cmp	r4, #0
 800f832:	f000 80c0 	beq.w	800f9b6 <_dtoa_r+0x8de>
 800f836:	4629      	mov	r1, r5
 800f838:	4622      	mov	r2, r4
 800f83a:	4648      	mov	r0, r9
 800f83c:	f000 fc12 	bl	8010064 <__pow5mult>
 800f840:	9a02      	ldr	r2, [sp, #8]
 800f842:	4601      	mov	r1, r0
 800f844:	4605      	mov	r5, r0
 800f846:	4648      	mov	r0, r9
 800f848:	f000 fb6a 	bl	800ff20 <__multiply>
 800f84c:	9902      	ldr	r1, [sp, #8]
 800f84e:	4680      	mov	r8, r0
 800f850:	4648      	mov	r0, r9
 800f852:	f000 fa9b 	bl	800fd8c <_Bfree>
 800f856:	9b08      	ldr	r3, [sp, #32]
 800f858:	1b1b      	subs	r3, r3, r4
 800f85a:	9308      	str	r3, [sp, #32]
 800f85c:	f000 80b1 	beq.w	800f9c2 <_dtoa_r+0x8ea>
 800f860:	9a08      	ldr	r2, [sp, #32]
 800f862:	4641      	mov	r1, r8
 800f864:	4648      	mov	r0, r9
 800f866:	f000 fbfd 	bl	8010064 <__pow5mult>
 800f86a:	9002      	str	r0, [sp, #8]
 800f86c:	2101      	movs	r1, #1
 800f86e:	4648      	mov	r0, r9
 800f870:	f000 fb40 	bl	800fef4 <__i2b>
 800f874:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f876:	4604      	mov	r4, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f000 81d8 	beq.w	800fc2e <_dtoa_r+0xb56>
 800f87e:	461a      	mov	r2, r3
 800f880:	4601      	mov	r1, r0
 800f882:	4648      	mov	r0, r9
 800f884:	f000 fbee 	bl	8010064 <__pow5mult>
 800f888:	9b07      	ldr	r3, [sp, #28]
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	4604      	mov	r4, r0
 800f88e:	f300 809f 	bgt.w	800f9d0 <_dtoa_r+0x8f8>
 800f892:	9b04      	ldr	r3, [sp, #16]
 800f894:	2b00      	cmp	r3, #0
 800f896:	f040 8097 	bne.w	800f9c8 <_dtoa_r+0x8f0>
 800f89a:	9b05      	ldr	r3, [sp, #20]
 800f89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	f040 8093 	bne.w	800f9cc <_dtoa_r+0x8f4>
 800f8a6:	9b05      	ldr	r3, [sp, #20]
 800f8a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f8ac:	0d1b      	lsrs	r3, r3, #20
 800f8ae:	051b      	lsls	r3, r3, #20
 800f8b0:	b133      	cbz	r3, 800f8c0 <_dtoa_r+0x7e8>
 800f8b2:	9b00      	ldr	r3, [sp, #0]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	9b06      	ldr	r3, [sp, #24]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	9306      	str	r3, [sp, #24]
 800f8be:	2301      	movs	r3, #1
 800f8c0:	9308      	str	r3, [sp, #32]
 800f8c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f000 81b8 	beq.w	800fc3a <_dtoa_r+0xb62>
 800f8ca:	6923      	ldr	r3, [r4, #16]
 800f8cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8d0:	6918      	ldr	r0, [r3, #16]
 800f8d2:	f000 fac3 	bl	800fe5c <__hi0bits>
 800f8d6:	f1c0 0020 	rsb	r0, r0, #32
 800f8da:	9b06      	ldr	r3, [sp, #24]
 800f8dc:	4418      	add	r0, r3
 800f8de:	f010 001f 	ands.w	r0, r0, #31
 800f8e2:	f000 8082 	beq.w	800f9ea <_dtoa_r+0x912>
 800f8e6:	f1c0 0320 	rsb	r3, r0, #32
 800f8ea:	2b04      	cmp	r3, #4
 800f8ec:	dd73      	ble.n	800f9d6 <_dtoa_r+0x8fe>
 800f8ee:	9b00      	ldr	r3, [sp, #0]
 800f8f0:	f1c0 001c 	rsb	r0, r0, #28
 800f8f4:	4403      	add	r3, r0
 800f8f6:	9300      	str	r3, [sp, #0]
 800f8f8:	9b06      	ldr	r3, [sp, #24]
 800f8fa:	4403      	add	r3, r0
 800f8fc:	4406      	add	r6, r0
 800f8fe:	9306      	str	r3, [sp, #24]
 800f900:	9b00      	ldr	r3, [sp, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	dd05      	ble.n	800f912 <_dtoa_r+0x83a>
 800f906:	9902      	ldr	r1, [sp, #8]
 800f908:	461a      	mov	r2, r3
 800f90a:	4648      	mov	r0, r9
 800f90c:	f000 fc04 	bl	8010118 <__lshift>
 800f910:	9002      	str	r0, [sp, #8]
 800f912:	9b06      	ldr	r3, [sp, #24]
 800f914:	2b00      	cmp	r3, #0
 800f916:	dd05      	ble.n	800f924 <_dtoa_r+0x84c>
 800f918:	4621      	mov	r1, r4
 800f91a:	461a      	mov	r2, r3
 800f91c:	4648      	mov	r0, r9
 800f91e:	f000 fbfb 	bl	8010118 <__lshift>
 800f922:	4604      	mov	r4, r0
 800f924:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f926:	2b00      	cmp	r3, #0
 800f928:	d061      	beq.n	800f9ee <_dtoa_r+0x916>
 800f92a:	9802      	ldr	r0, [sp, #8]
 800f92c:	4621      	mov	r1, r4
 800f92e:	f000 fc5f 	bl	80101f0 <__mcmp>
 800f932:	2800      	cmp	r0, #0
 800f934:	da5b      	bge.n	800f9ee <_dtoa_r+0x916>
 800f936:	2300      	movs	r3, #0
 800f938:	9902      	ldr	r1, [sp, #8]
 800f93a:	220a      	movs	r2, #10
 800f93c:	4648      	mov	r0, r9
 800f93e:	f000 fa47 	bl	800fdd0 <__multadd>
 800f942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f944:	9002      	str	r0, [sp, #8]
 800f946:	f107 38ff 	add.w	r8, r7, #4294967295
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f000 8177 	beq.w	800fc3e <_dtoa_r+0xb66>
 800f950:	4629      	mov	r1, r5
 800f952:	2300      	movs	r3, #0
 800f954:	220a      	movs	r2, #10
 800f956:	4648      	mov	r0, r9
 800f958:	f000 fa3a 	bl	800fdd0 <__multadd>
 800f95c:	f1bb 0f00 	cmp.w	fp, #0
 800f960:	4605      	mov	r5, r0
 800f962:	dc6f      	bgt.n	800fa44 <_dtoa_r+0x96c>
 800f964:	9b07      	ldr	r3, [sp, #28]
 800f966:	2b02      	cmp	r3, #2
 800f968:	dc49      	bgt.n	800f9fe <_dtoa_r+0x926>
 800f96a:	e06b      	b.n	800fa44 <_dtoa_r+0x96c>
 800f96c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f96e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f972:	e73c      	b.n	800f7ee <_dtoa_r+0x716>
 800f974:	3fe00000 	.word	0x3fe00000
 800f978:	40240000 	.word	0x40240000
 800f97c:	9b03      	ldr	r3, [sp, #12]
 800f97e:	1e5c      	subs	r4, r3, #1
 800f980:	9b08      	ldr	r3, [sp, #32]
 800f982:	42a3      	cmp	r3, r4
 800f984:	db09      	blt.n	800f99a <_dtoa_r+0x8c2>
 800f986:	1b1c      	subs	r4, r3, r4
 800f988:	9b03      	ldr	r3, [sp, #12]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f6bf af30 	bge.w	800f7f0 <_dtoa_r+0x718>
 800f990:	9b00      	ldr	r3, [sp, #0]
 800f992:	9a03      	ldr	r2, [sp, #12]
 800f994:	1a9e      	subs	r6, r3, r2
 800f996:	2300      	movs	r3, #0
 800f998:	e72b      	b.n	800f7f2 <_dtoa_r+0x71a>
 800f99a:	9b08      	ldr	r3, [sp, #32]
 800f99c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f99e:	9408      	str	r4, [sp, #32]
 800f9a0:	1ae3      	subs	r3, r4, r3
 800f9a2:	441a      	add	r2, r3
 800f9a4:	9e00      	ldr	r6, [sp, #0]
 800f9a6:	9b03      	ldr	r3, [sp, #12]
 800f9a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800f9aa:	2400      	movs	r4, #0
 800f9ac:	e721      	b.n	800f7f2 <_dtoa_r+0x71a>
 800f9ae:	9c08      	ldr	r4, [sp, #32]
 800f9b0:	9e00      	ldr	r6, [sp, #0]
 800f9b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f9b4:	e728      	b.n	800f808 <_dtoa_r+0x730>
 800f9b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f9ba:	e751      	b.n	800f860 <_dtoa_r+0x788>
 800f9bc:	9a08      	ldr	r2, [sp, #32]
 800f9be:	9902      	ldr	r1, [sp, #8]
 800f9c0:	e750      	b.n	800f864 <_dtoa_r+0x78c>
 800f9c2:	f8cd 8008 	str.w	r8, [sp, #8]
 800f9c6:	e751      	b.n	800f86c <_dtoa_r+0x794>
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	e779      	b.n	800f8c0 <_dtoa_r+0x7e8>
 800f9cc:	9b04      	ldr	r3, [sp, #16]
 800f9ce:	e777      	b.n	800f8c0 <_dtoa_r+0x7e8>
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	9308      	str	r3, [sp, #32]
 800f9d4:	e779      	b.n	800f8ca <_dtoa_r+0x7f2>
 800f9d6:	d093      	beq.n	800f900 <_dtoa_r+0x828>
 800f9d8:	9a00      	ldr	r2, [sp, #0]
 800f9da:	331c      	adds	r3, #28
 800f9dc:	441a      	add	r2, r3
 800f9de:	9200      	str	r2, [sp, #0]
 800f9e0:	9a06      	ldr	r2, [sp, #24]
 800f9e2:	441a      	add	r2, r3
 800f9e4:	441e      	add	r6, r3
 800f9e6:	9206      	str	r2, [sp, #24]
 800f9e8:	e78a      	b.n	800f900 <_dtoa_r+0x828>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	e7f4      	b.n	800f9d8 <_dtoa_r+0x900>
 800f9ee:	9b03      	ldr	r3, [sp, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	46b8      	mov	r8, r7
 800f9f4:	dc20      	bgt.n	800fa38 <_dtoa_r+0x960>
 800f9f6:	469b      	mov	fp, r3
 800f9f8:	9b07      	ldr	r3, [sp, #28]
 800f9fa:	2b02      	cmp	r3, #2
 800f9fc:	dd1e      	ble.n	800fa3c <_dtoa_r+0x964>
 800f9fe:	f1bb 0f00 	cmp.w	fp, #0
 800fa02:	f47f adb1 	bne.w	800f568 <_dtoa_r+0x490>
 800fa06:	4621      	mov	r1, r4
 800fa08:	465b      	mov	r3, fp
 800fa0a:	2205      	movs	r2, #5
 800fa0c:	4648      	mov	r0, r9
 800fa0e:	f000 f9df 	bl	800fdd0 <__multadd>
 800fa12:	4601      	mov	r1, r0
 800fa14:	4604      	mov	r4, r0
 800fa16:	9802      	ldr	r0, [sp, #8]
 800fa18:	f000 fbea 	bl	80101f0 <__mcmp>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	f77f ada3 	ble.w	800f568 <_dtoa_r+0x490>
 800fa22:	4656      	mov	r6, sl
 800fa24:	2331      	movs	r3, #49	@ 0x31
 800fa26:	f806 3b01 	strb.w	r3, [r6], #1
 800fa2a:	f108 0801 	add.w	r8, r8, #1
 800fa2e:	e59f      	b.n	800f570 <_dtoa_r+0x498>
 800fa30:	9c03      	ldr	r4, [sp, #12]
 800fa32:	46b8      	mov	r8, r7
 800fa34:	4625      	mov	r5, r4
 800fa36:	e7f4      	b.n	800fa22 <_dtoa_r+0x94a>
 800fa38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fa3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f000 8101 	beq.w	800fc46 <_dtoa_r+0xb6e>
 800fa44:	2e00      	cmp	r6, #0
 800fa46:	dd05      	ble.n	800fa54 <_dtoa_r+0x97c>
 800fa48:	4629      	mov	r1, r5
 800fa4a:	4632      	mov	r2, r6
 800fa4c:	4648      	mov	r0, r9
 800fa4e:	f000 fb63 	bl	8010118 <__lshift>
 800fa52:	4605      	mov	r5, r0
 800fa54:	9b08      	ldr	r3, [sp, #32]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d05c      	beq.n	800fb14 <_dtoa_r+0xa3c>
 800fa5a:	6869      	ldr	r1, [r5, #4]
 800fa5c:	4648      	mov	r0, r9
 800fa5e:	f000 f955 	bl	800fd0c <_Balloc>
 800fa62:	4606      	mov	r6, r0
 800fa64:	b928      	cbnz	r0, 800fa72 <_dtoa_r+0x99a>
 800fa66:	4b82      	ldr	r3, [pc, #520]	@ (800fc70 <_dtoa_r+0xb98>)
 800fa68:	4602      	mov	r2, r0
 800fa6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fa6e:	f7ff bb4a 	b.w	800f106 <_dtoa_r+0x2e>
 800fa72:	692a      	ldr	r2, [r5, #16]
 800fa74:	3202      	adds	r2, #2
 800fa76:	0092      	lsls	r2, r2, #2
 800fa78:	f105 010c 	add.w	r1, r5, #12
 800fa7c:	300c      	adds	r0, #12
 800fa7e:	f7ff fa38 	bl	800eef2 <memcpy>
 800fa82:	2201      	movs	r2, #1
 800fa84:	4631      	mov	r1, r6
 800fa86:	4648      	mov	r0, r9
 800fa88:	f000 fb46 	bl	8010118 <__lshift>
 800fa8c:	f10a 0301 	add.w	r3, sl, #1
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	eb0a 030b 	add.w	r3, sl, fp
 800fa96:	9308      	str	r3, [sp, #32]
 800fa98:	9b04      	ldr	r3, [sp, #16]
 800fa9a:	f003 0301 	and.w	r3, r3, #1
 800fa9e:	462f      	mov	r7, r5
 800faa0:	9306      	str	r3, [sp, #24]
 800faa2:	4605      	mov	r5, r0
 800faa4:	9b00      	ldr	r3, [sp, #0]
 800faa6:	9802      	ldr	r0, [sp, #8]
 800faa8:	4621      	mov	r1, r4
 800faaa:	f103 3bff 	add.w	fp, r3, #4294967295
 800faae:	f7ff fa8b 	bl	800efc8 <quorem>
 800fab2:	4603      	mov	r3, r0
 800fab4:	3330      	adds	r3, #48	@ 0x30
 800fab6:	9003      	str	r0, [sp, #12]
 800fab8:	4639      	mov	r1, r7
 800faba:	9802      	ldr	r0, [sp, #8]
 800fabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fabe:	f000 fb97 	bl	80101f0 <__mcmp>
 800fac2:	462a      	mov	r2, r5
 800fac4:	9004      	str	r0, [sp, #16]
 800fac6:	4621      	mov	r1, r4
 800fac8:	4648      	mov	r0, r9
 800faca:	f000 fbad 	bl	8010228 <__mdiff>
 800face:	68c2      	ldr	r2, [r0, #12]
 800fad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fad2:	4606      	mov	r6, r0
 800fad4:	bb02      	cbnz	r2, 800fb18 <_dtoa_r+0xa40>
 800fad6:	4601      	mov	r1, r0
 800fad8:	9802      	ldr	r0, [sp, #8]
 800fada:	f000 fb89 	bl	80101f0 <__mcmp>
 800fade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fae0:	4602      	mov	r2, r0
 800fae2:	4631      	mov	r1, r6
 800fae4:	4648      	mov	r0, r9
 800fae6:	920c      	str	r2, [sp, #48]	@ 0x30
 800fae8:	9309      	str	r3, [sp, #36]	@ 0x24
 800faea:	f000 f94f 	bl	800fd8c <_Bfree>
 800faee:	9b07      	ldr	r3, [sp, #28]
 800faf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800faf2:	9e00      	ldr	r6, [sp, #0]
 800faf4:	ea42 0103 	orr.w	r1, r2, r3
 800faf8:	9b06      	ldr	r3, [sp, #24]
 800fafa:	4319      	orrs	r1, r3
 800fafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fafe:	d10d      	bne.n	800fb1c <_dtoa_r+0xa44>
 800fb00:	2b39      	cmp	r3, #57	@ 0x39
 800fb02:	d027      	beq.n	800fb54 <_dtoa_r+0xa7c>
 800fb04:	9a04      	ldr	r2, [sp, #16]
 800fb06:	2a00      	cmp	r2, #0
 800fb08:	dd01      	ble.n	800fb0e <_dtoa_r+0xa36>
 800fb0a:	9b03      	ldr	r3, [sp, #12]
 800fb0c:	3331      	adds	r3, #49	@ 0x31
 800fb0e:	f88b 3000 	strb.w	r3, [fp]
 800fb12:	e52e      	b.n	800f572 <_dtoa_r+0x49a>
 800fb14:	4628      	mov	r0, r5
 800fb16:	e7b9      	b.n	800fa8c <_dtoa_r+0x9b4>
 800fb18:	2201      	movs	r2, #1
 800fb1a:	e7e2      	b.n	800fae2 <_dtoa_r+0xa0a>
 800fb1c:	9904      	ldr	r1, [sp, #16]
 800fb1e:	2900      	cmp	r1, #0
 800fb20:	db04      	blt.n	800fb2c <_dtoa_r+0xa54>
 800fb22:	9807      	ldr	r0, [sp, #28]
 800fb24:	4301      	orrs	r1, r0
 800fb26:	9806      	ldr	r0, [sp, #24]
 800fb28:	4301      	orrs	r1, r0
 800fb2a:	d120      	bne.n	800fb6e <_dtoa_r+0xa96>
 800fb2c:	2a00      	cmp	r2, #0
 800fb2e:	ddee      	ble.n	800fb0e <_dtoa_r+0xa36>
 800fb30:	9902      	ldr	r1, [sp, #8]
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	2201      	movs	r2, #1
 800fb36:	4648      	mov	r0, r9
 800fb38:	f000 faee 	bl	8010118 <__lshift>
 800fb3c:	4621      	mov	r1, r4
 800fb3e:	9002      	str	r0, [sp, #8]
 800fb40:	f000 fb56 	bl	80101f0 <__mcmp>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	9b00      	ldr	r3, [sp, #0]
 800fb48:	dc02      	bgt.n	800fb50 <_dtoa_r+0xa78>
 800fb4a:	d1e0      	bne.n	800fb0e <_dtoa_r+0xa36>
 800fb4c:	07da      	lsls	r2, r3, #31
 800fb4e:	d5de      	bpl.n	800fb0e <_dtoa_r+0xa36>
 800fb50:	2b39      	cmp	r3, #57	@ 0x39
 800fb52:	d1da      	bne.n	800fb0a <_dtoa_r+0xa32>
 800fb54:	2339      	movs	r3, #57	@ 0x39
 800fb56:	f88b 3000 	strb.w	r3, [fp]
 800fb5a:	4633      	mov	r3, r6
 800fb5c:	461e      	mov	r6, r3
 800fb5e:	3b01      	subs	r3, #1
 800fb60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fb64:	2a39      	cmp	r2, #57	@ 0x39
 800fb66:	d04e      	beq.n	800fc06 <_dtoa_r+0xb2e>
 800fb68:	3201      	adds	r2, #1
 800fb6a:	701a      	strb	r2, [r3, #0]
 800fb6c:	e501      	b.n	800f572 <_dtoa_r+0x49a>
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	dd03      	ble.n	800fb7a <_dtoa_r+0xaa2>
 800fb72:	2b39      	cmp	r3, #57	@ 0x39
 800fb74:	d0ee      	beq.n	800fb54 <_dtoa_r+0xa7c>
 800fb76:	3301      	adds	r3, #1
 800fb78:	e7c9      	b.n	800fb0e <_dtoa_r+0xa36>
 800fb7a:	9a00      	ldr	r2, [sp, #0]
 800fb7c:	9908      	ldr	r1, [sp, #32]
 800fb7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fb82:	428a      	cmp	r2, r1
 800fb84:	d028      	beq.n	800fbd8 <_dtoa_r+0xb00>
 800fb86:	9902      	ldr	r1, [sp, #8]
 800fb88:	2300      	movs	r3, #0
 800fb8a:	220a      	movs	r2, #10
 800fb8c:	4648      	mov	r0, r9
 800fb8e:	f000 f91f 	bl	800fdd0 <__multadd>
 800fb92:	42af      	cmp	r7, r5
 800fb94:	9002      	str	r0, [sp, #8]
 800fb96:	f04f 0300 	mov.w	r3, #0
 800fb9a:	f04f 020a 	mov.w	r2, #10
 800fb9e:	4639      	mov	r1, r7
 800fba0:	4648      	mov	r0, r9
 800fba2:	d107      	bne.n	800fbb4 <_dtoa_r+0xadc>
 800fba4:	f000 f914 	bl	800fdd0 <__multadd>
 800fba8:	4607      	mov	r7, r0
 800fbaa:	4605      	mov	r5, r0
 800fbac:	9b00      	ldr	r3, [sp, #0]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	e777      	b.n	800faa4 <_dtoa_r+0x9cc>
 800fbb4:	f000 f90c 	bl	800fdd0 <__multadd>
 800fbb8:	4629      	mov	r1, r5
 800fbba:	4607      	mov	r7, r0
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	220a      	movs	r2, #10
 800fbc0:	4648      	mov	r0, r9
 800fbc2:	f000 f905 	bl	800fdd0 <__multadd>
 800fbc6:	4605      	mov	r5, r0
 800fbc8:	e7f0      	b.n	800fbac <_dtoa_r+0xad4>
 800fbca:	f1bb 0f00 	cmp.w	fp, #0
 800fbce:	bfcc      	ite	gt
 800fbd0:	465e      	movgt	r6, fp
 800fbd2:	2601      	movle	r6, #1
 800fbd4:	4456      	add	r6, sl
 800fbd6:	2700      	movs	r7, #0
 800fbd8:	9902      	ldr	r1, [sp, #8]
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	4648      	mov	r0, r9
 800fbe0:	f000 fa9a 	bl	8010118 <__lshift>
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	9002      	str	r0, [sp, #8]
 800fbe8:	f000 fb02 	bl	80101f0 <__mcmp>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	dcb4      	bgt.n	800fb5a <_dtoa_r+0xa82>
 800fbf0:	d102      	bne.n	800fbf8 <_dtoa_r+0xb20>
 800fbf2:	9b00      	ldr	r3, [sp, #0]
 800fbf4:	07db      	lsls	r3, r3, #31
 800fbf6:	d4b0      	bmi.n	800fb5a <_dtoa_r+0xa82>
 800fbf8:	4633      	mov	r3, r6
 800fbfa:	461e      	mov	r6, r3
 800fbfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc00:	2a30      	cmp	r2, #48	@ 0x30
 800fc02:	d0fa      	beq.n	800fbfa <_dtoa_r+0xb22>
 800fc04:	e4b5      	b.n	800f572 <_dtoa_r+0x49a>
 800fc06:	459a      	cmp	sl, r3
 800fc08:	d1a8      	bne.n	800fb5c <_dtoa_r+0xa84>
 800fc0a:	2331      	movs	r3, #49	@ 0x31
 800fc0c:	f108 0801 	add.w	r8, r8, #1
 800fc10:	f88a 3000 	strb.w	r3, [sl]
 800fc14:	e4ad      	b.n	800f572 <_dtoa_r+0x49a>
 800fc16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fc18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800fc74 <_dtoa_r+0xb9c>
 800fc1c:	b11b      	cbz	r3, 800fc26 <_dtoa_r+0xb4e>
 800fc1e:	f10a 0308 	add.w	r3, sl, #8
 800fc22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fc24:	6013      	str	r3, [r2, #0]
 800fc26:	4650      	mov	r0, sl
 800fc28:	b017      	add	sp, #92	@ 0x5c
 800fc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc2e:	9b07      	ldr	r3, [sp, #28]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	f77f ae2e 	ble.w	800f892 <_dtoa_r+0x7ba>
 800fc36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc38:	9308      	str	r3, [sp, #32]
 800fc3a:	2001      	movs	r0, #1
 800fc3c:	e64d      	b.n	800f8da <_dtoa_r+0x802>
 800fc3e:	f1bb 0f00 	cmp.w	fp, #0
 800fc42:	f77f aed9 	ble.w	800f9f8 <_dtoa_r+0x920>
 800fc46:	4656      	mov	r6, sl
 800fc48:	9802      	ldr	r0, [sp, #8]
 800fc4a:	4621      	mov	r1, r4
 800fc4c:	f7ff f9bc 	bl	800efc8 <quorem>
 800fc50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800fc54:	f806 3b01 	strb.w	r3, [r6], #1
 800fc58:	eba6 020a 	sub.w	r2, r6, sl
 800fc5c:	4593      	cmp	fp, r2
 800fc5e:	ddb4      	ble.n	800fbca <_dtoa_r+0xaf2>
 800fc60:	9902      	ldr	r1, [sp, #8]
 800fc62:	2300      	movs	r3, #0
 800fc64:	220a      	movs	r2, #10
 800fc66:	4648      	mov	r0, r9
 800fc68:	f000 f8b2 	bl	800fdd0 <__multadd>
 800fc6c:	9002      	str	r0, [sp, #8]
 800fc6e:	e7eb      	b.n	800fc48 <_dtoa_r+0xb70>
 800fc70:	0801671d 	.word	0x0801671d
 800fc74:	080166a1 	.word	0x080166a1

0800fc78 <_free_r>:
 800fc78:	b538      	push	{r3, r4, r5, lr}
 800fc7a:	4605      	mov	r5, r0
 800fc7c:	2900      	cmp	r1, #0
 800fc7e:	d041      	beq.n	800fd04 <_free_r+0x8c>
 800fc80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc84:	1f0c      	subs	r4, r1, #4
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	bfb8      	it	lt
 800fc8a:	18e4      	addlt	r4, r4, r3
 800fc8c:	f7fe f888 	bl	800dda0 <__malloc_lock>
 800fc90:	4a1d      	ldr	r2, [pc, #116]	@ (800fd08 <_free_r+0x90>)
 800fc92:	6813      	ldr	r3, [r2, #0]
 800fc94:	b933      	cbnz	r3, 800fca4 <_free_r+0x2c>
 800fc96:	6063      	str	r3, [r4, #4]
 800fc98:	6014      	str	r4, [r2, #0]
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fca0:	f7fe b884 	b.w	800ddac <__malloc_unlock>
 800fca4:	42a3      	cmp	r3, r4
 800fca6:	d908      	bls.n	800fcba <_free_r+0x42>
 800fca8:	6820      	ldr	r0, [r4, #0]
 800fcaa:	1821      	adds	r1, r4, r0
 800fcac:	428b      	cmp	r3, r1
 800fcae:	bf01      	itttt	eq
 800fcb0:	6819      	ldreq	r1, [r3, #0]
 800fcb2:	685b      	ldreq	r3, [r3, #4]
 800fcb4:	1809      	addeq	r1, r1, r0
 800fcb6:	6021      	streq	r1, [r4, #0]
 800fcb8:	e7ed      	b.n	800fc96 <_free_r+0x1e>
 800fcba:	461a      	mov	r2, r3
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	b10b      	cbz	r3, 800fcc4 <_free_r+0x4c>
 800fcc0:	42a3      	cmp	r3, r4
 800fcc2:	d9fa      	bls.n	800fcba <_free_r+0x42>
 800fcc4:	6811      	ldr	r1, [r2, #0]
 800fcc6:	1850      	adds	r0, r2, r1
 800fcc8:	42a0      	cmp	r0, r4
 800fcca:	d10b      	bne.n	800fce4 <_free_r+0x6c>
 800fccc:	6820      	ldr	r0, [r4, #0]
 800fcce:	4401      	add	r1, r0
 800fcd0:	1850      	adds	r0, r2, r1
 800fcd2:	4283      	cmp	r3, r0
 800fcd4:	6011      	str	r1, [r2, #0]
 800fcd6:	d1e0      	bne.n	800fc9a <_free_r+0x22>
 800fcd8:	6818      	ldr	r0, [r3, #0]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	6053      	str	r3, [r2, #4]
 800fcde:	4408      	add	r0, r1
 800fce0:	6010      	str	r0, [r2, #0]
 800fce2:	e7da      	b.n	800fc9a <_free_r+0x22>
 800fce4:	d902      	bls.n	800fcec <_free_r+0x74>
 800fce6:	230c      	movs	r3, #12
 800fce8:	602b      	str	r3, [r5, #0]
 800fcea:	e7d6      	b.n	800fc9a <_free_r+0x22>
 800fcec:	6820      	ldr	r0, [r4, #0]
 800fcee:	1821      	adds	r1, r4, r0
 800fcf0:	428b      	cmp	r3, r1
 800fcf2:	bf04      	itt	eq
 800fcf4:	6819      	ldreq	r1, [r3, #0]
 800fcf6:	685b      	ldreq	r3, [r3, #4]
 800fcf8:	6063      	str	r3, [r4, #4]
 800fcfa:	bf04      	itt	eq
 800fcfc:	1809      	addeq	r1, r1, r0
 800fcfe:	6021      	streq	r1, [r4, #0]
 800fd00:	6054      	str	r4, [r2, #4]
 800fd02:	e7ca      	b.n	800fc9a <_free_r+0x22>
 800fd04:	bd38      	pop	{r3, r4, r5, pc}
 800fd06:	bf00      	nop
 800fd08:	20001854 	.word	0x20001854

0800fd0c <_Balloc>:
 800fd0c:	b570      	push	{r4, r5, r6, lr}
 800fd0e:	69c6      	ldr	r6, [r0, #28]
 800fd10:	4604      	mov	r4, r0
 800fd12:	460d      	mov	r5, r1
 800fd14:	b976      	cbnz	r6, 800fd34 <_Balloc+0x28>
 800fd16:	2010      	movs	r0, #16
 800fd18:	f7fd ff90 	bl	800dc3c <malloc>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	61e0      	str	r0, [r4, #28]
 800fd20:	b920      	cbnz	r0, 800fd2c <_Balloc+0x20>
 800fd22:	4b18      	ldr	r3, [pc, #96]	@ (800fd84 <_Balloc+0x78>)
 800fd24:	4818      	ldr	r0, [pc, #96]	@ (800fd88 <_Balloc+0x7c>)
 800fd26:	216b      	movs	r1, #107	@ 0x6b
 800fd28:	f7fd ff50 	bl	800dbcc <__assert_func>
 800fd2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd30:	6006      	str	r6, [r0, #0]
 800fd32:	60c6      	str	r6, [r0, #12]
 800fd34:	69e6      	ldr	r6, [r4, #28]
 800fd36:	68f3      	ldr	r3, [r6, #12]
 800fd38:	b183      	cbz	r3, 800fd5c <_Balloc+0x50>
 800fd3a:	69e3      	ldr	r3, [r4, #28]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd42:	b9b8      	cbnz	r0, 800fd74 <_Balloc+0x68>
 800fd44:	2101      	movs	r1, #1
 800fd46:	fa01 f605 	lsl.w	r6, r1, r5
 800fd4a:	1d72      	adds	r2, r6, #5
 800fd4c:	0092      	lsls	r2, r2, #2
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f7fd ff60 	bl	800dc14 <_calloc_r>
 800fd54:	b160      	cbz	r0, 800fd70 <_Balloc+0x64>
 800fd56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd5a:	e00e      	b.n	800fd7a <_Balloc+0x6e>
 800fd5c:	2221      	movs	r2, #33	@ 0x21
 800fd5e:	2104      	movs	r1, #4
 800fd60:	4620      	mov	r0, r4
 800fd62:	f7fd ff57 	bl	800dc14 <_calloc_r>
 800fd66:	69e3      	ldr	r3, [r4, #28]
 800fd68:	60f0      	str	r0, [r6, #12]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d1e4      	bne.n	800fd3a <_Balloc+0x2e>
 800fd70:	2000      	movs	r0, #0
 800fd72:	bd70      	pop	{r4, r5, r6, pc}
 800fd74:	6802      	ldr	r2, [r0, #0]
 800fd76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd80:	e7f7      	b.n	800fd72 <_Balloc+0x66>
 800fd82:	bf00      	nop
 800fd84:	080166ae 	.word	0x080166ae
 800fd88:	0801672e 	.word	0x0801672e

0800fd8c <_Bfree>:
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	69c6      	ldr	r6, [r0, #28]
 800fd90:	4605      	mov	r5, r0
 800fd92:	460c      	mov	r4, r1
 800fd94:	b976      	cbnz	r6, 800fdb4 <_Bfree+0x28>
 800fd96:	2010      	movs	r0, #16
 800fd98:	f7fd ff50 	bl	800dc3c <malloc>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	61e8      	str	r0, [r5, #28]
 800fda0:	b920      	cbnz	r0, 800fdac <_Bfree+0x20>
 800fda2:	4b09      	ldr	r3, [pc, #36]	@ (800fdc8 <_Bfree+0x3c>)
 800fda4:	4809      	ldr	r0, [pc, #36]	@ (800fdcc <_Bfree+0x40>)
 800fda6:	218f      	movs	r1, #143	@ 0x8f
 800fda8:	f7fd ff10 	bl	800dbcc <__assert_func>
 800fdac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdb0:	6006      	str	r6, [r0, #0]
 800fdb2:	60c6      	str	r6, [r0, #12]
 800fdb4:	b13c      	cbz	r4, 800fdc6 <_Bfree+0x3a>
 800fdb6:	69eb      	ldr	r3, [r5, #28]
 800fdb8:	6862      	ldr	r2, [r4, #4]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fdc0:	6021      	str	r1, [r4, #0]
 800fdc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdc6:	bd70      	pop	{r4, r5, r6, pc}
 800fdc8:	080166ae 	.word	0x080166ae
 800fdcc:	0801672e 	.word	0x0801672e

0800fdd0 <__multadd>:
 800fdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd4:	690d      	ldr	r5, [r1, #16]
 800fdd6:	4607      	mov	r7, r0
 800fdd8:	460c      	mov	r4, r1
 800fdda:	461e      	mov	r6, r3
 800fddc:	f101 0c14 	add.w	ip, r1, #20
 800fde0:	2000      	movs	r0, #0
 800fde2:	f8dc 3000 	ldr.w	r3, [ip]
 800fde6:	b299      	uxth	r1, r3
 800fde8:	fb02 6101 	mla	r1, r2, r1, r6
 800fdec:	0c1e      	lsrs	r6, r3, #16
 800fdee:	0c0b      	lsrs	r3, r1, #16
 800fdf0:	fb02 3306 	mla	r3, r2, r6, r3
 800fdf4:	b289      	uxth	r1, r1
 800fdf6:	3001      	adds	r0, #1
 800fdf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fdfc:	4285      	cmp	r5, r0
 800fdfe:	f84c 1b04 	str.w	r1, [ip], #4
 800fe02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe06:	dcec      	bgt.n	800fde2 <__multadd+0x12>
 800fe08:	b30e      	cbz	r6, 800fe4e <__multadd+0x7e>
 800fe0a:	68a3      	ldr	r3, [r4, #8]
 800fe0c:	42ab      	cmp	r3, r5
 800fe0e:	dc19      	bgt.n	800fe44 <__multadd+0x74>
 800fe10:	6861      	ldr	r1, [r4, #4]
 800fe12:	4638      	mov	r0, r7
 800fe14:	3101      	adds	r1, #1
 800fe16:	f7ff ff79 	bl	800fd0c <_Balloc>
 800fe1a:	4680      	mov	r8, r0
 800fe1c:	b928      	cbnz	r0, 800fe2a <__multadd+0x5a>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	4b0c      	ldr	r3, [pc, #48]	@ (800fe54 <__multadd+0x84>)
 800fe22:	480d      	ldr	r0, [pc, #52]	@ (800fe58 <__multadd+0x88>)
 800fe24:	21ba      	movs	r1, #186	@ 0xba
 800fe26:	f7fd fed1 	bl	800dbcc <__assert_func>
 800fe2a:	6922      	ldr	r2, [r4, #16]
 800fe2c:	3202      	adds	r2, #2
 800fe2e:	f104 010c 	add.w	r1, r4, #12
 800fe32:	0092      	lsls	r2, r2, #2
 800fe34:	300c      	adds	r0, #12
 800fe36:	f7ff f85c 	bl	800eef2 <memcpy>
 800fe3a:	4621      	mov	r1, r4
 800fe3c:	4638      	mov	r0, r7
 800fe3e:	f7ff ffa5 	bl	800fd8c <_Bfree>
 800fe42:	4644      	mov	r4, r8
 800fe44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe48:	3501      	adds	r5, #1
 800fe4a:	615e      	str	r6, [r3, #20]
 800fe4c:	6125      	str	r5, [r4, #16]
 800fe4e:	4620      	mov	r0, r4
 800fe50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe54:	0801671d 	.word	0x0801671d
 800fe58:	0801672e 	.word	0x0801672e

0800fe5c <__hi0bits>:
 800fe5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fe60:	4603      	mov	r3, r0
 800fe62:	bf36      	itet	cc
 800fe64:	0403      	lslcc	r3, r0, #16
 800fe66:	2000      	movcs	r0, #0
 800fe68:	2010      	movcc	r0, #16
 800fe6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe6e:	bf3c      	itt	cc
 800fe70:	021b      	lslcc	r3, r3, #8
 800fe72:	3008      	addcc	r0, #8
 800fe74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe78:	bf3c      	itt	cc
 800fe7a:	011b      	lslcc	r3, r3, #4
 800fe7c:	3004      	addcc	r0, #4
 800fe7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe82:	bf3c      	itt	cc
 800fe84:	009b      	lslcc	r3, r3, #2
 800fe86:	3002      	addcc	r0, #2
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	db05      	blt.n	800fe98 <__hi0bits+0x3c>
 800fe8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fe90:	f100 0001 	add.w	r0, r0, #1
 800fe94:	bf08      	it	eq
 800fe96:	2020      	moveq	r0, #32
 800fe98:	4770      	bx	lr

0800fe9a <__lo0bits>:
 800fe9a:	6803      	ldr	r3, [r0, #0]
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	f013 0007 	ands.w	r0, r3, #7
 800fea2:	d00b      	beq.n	800febc <__lo0bits+0x22>
 800fea4:	07d9      	lsls	r1, r3, #31
 800fea6:	d421      	bmi.n	800feec <__lo0bits+0x52>
 800fea8:	0798      	lsls	r0, r3, #30
 800feaa:	bf49      	itett	mi
 800feac:	085b      	lsrmi	r3, r3, #1
 800feae:	089b      	lsrpl	r3, r3, #2
 800feb0:	2001      	movmi	r0, #1
 800feb2:	6013      	strmi	r3, [r2, #0]
 800feb4:	bf5c      	itt	pl
 800feb6:	6013      	strpl	r3, [r2, #0]
 800feb8:	2002      	movpl	r0, #2
 800feba:	4770      	bx	lr
 800febc:	b299      	uxth	r1, r3
 800febe:	b909      	cbnz	r1, 800fec4 <__lo0bits+0x2a>
 800fec0:	0c1b      	lsrs	r3, r3, #16
 800fec2:	2010      	movs	r0, #16
 800fec4:	b2d9      	uxtb	r1, r3
 800fec6:	b909      	cbnz	r1, 800fecc <__lo0bits+0x32>
 800fec8:	3008      	adds	r0, #8
 800feca:	0a1b      	lsrs	r3, r3, #8
 800fecc:	0719      	lsls	r1, r3, #28
 800fece:	bf04      	itt	eq
 800fed0:	091b      	lsreq	r3, r3, #4
 800fed2:	3004      	addeq	r0, #4
 800fed4:	0799      	lsls	r1, r3, #30
 800fed6:	bf04      	itt	eq
 800fed8:	089b      	lsreq	r3, r3, #2
 800feda:	3002      	addeq	r0, #2
 800fedc:	07d9      	lsls	r1, r3, #31
 800fede:	d403      	bmi.n	800fee8 <__lo0bits+0x4e>
 800fee0:	085b      	lsrs	r3, r3, #1
 800fee2:	f100 0001 	add.w	r0, r0, #1
 800fee6:	d003      	beq.n	800fef0 <__lo0bits+0x56>
 800fee8:	6013      	str	r3, [r2, #0]
 800feea:	4770      	bx	lr
 800feec:	2000      	movs	r0, #0
 800feee:	4770      	bx	lr
 800fef0:	2020      	movs	r0, #32
 800fef2:	4770      	bx	lr

0800fef4 <__i2b>:
 800fef4:	b510      	push	{r4, lr}
 800fef6:	460c      	mov	r4, r1
 800fef8:	2101      	movs	r1, #1
 800fefa:	f7ff ff07 	bl	800fd0c <_Balloc>
 800fefe:	4602      	mov	r2, r0
 800ff00:	b928      	cbnz	r0, 800ff0e <__i2b+0x1a>
 800ff02:	4b05      	ldr	r3, [pc, #20]	@ (800ff18 <__i2b+0x24>)
 800ff04:	4805      	ldr	r0, [pc, #20]	@ (800ff1c <__i2b+0x28>)
 800ff06:	f240 1145 	movw	r1, #325	@ 0x145
 800ff0a:	f7fd fe5f 	bl	800dbcc <__assert_func>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	6144      	str	r4, [r0, #20]
 800ff12:	6103      	str	r3, [r0, #16]
 800ff14:	bd10      	pop	{r4, pc}
 800ff16:	bf00      	nop
 800ff18:	0801671d 	.word	0x0801671d
 800ff1c:	0801672e 	.word	0x0801672e

0800ff20 <__multiply>:
 800ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff24:	4617      	mov	r7, r2
 800ff26:	690a      	ldr	r2, [r1, #16]
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	bfa8      	it	ge
 800ff2e:	463b      	movge	r3, r7
 800ff30:	4689      	mov	r9, r1
 800ff32:	bfa4      	itt	ge
 800ff34:	460f      	movge	r7, r1
 800ff36:	4699      	movge	r9, r3
 800ff38:	693d      	ldr	r5, [r7, #16]
 800ff3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	6879      	ldr	r1, [r7, #4]
 800ff42:	eb05 060a 	add.w	r6, r5, sl
 800ff46:	42b3      	cmp	r3, r6
 800ff48:	b085      	sub	sp, #20
 800ff4a:	bfb8      	it	lt
 800ff4c:	3101      	addlt	r1, #1
 800ff4e:	f7ff fedd 	bl	800fd0c <_Balloc>
 800ff52:	b930      	cbnz	r0, 800ff62 <__multiply+0x42>
 800ff54:	4602      	mov	r2, r0
 800ff56:	4b41      	ldr	r3, [pc, #260]	@ (801005c <__multiply+0x13c>)
 800ff58:	4841      	ldr	r0, [pc, #260]	@ (8010060 <__multiply+0x140>)
 800ff5a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ff5e:	f7fd fe35 	bl	800dbcc <__assert_func>
 800ff62:	f100 0414 	add.w	r4, r0, #20
 800ff66:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ff6a:	4623      	mov	r3, r4
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	4573      	cmp	r3, lr
 800ff70:	d320      	bcc.n	800ffb4 <__multiply+0x94>
 800ff72:	f107 0814 	add.w	r8, r7, #20
 800ff76:	f109 0114 	add.w	r1, r9, #20
 800ff7a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ff7e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ff82:	9302      	str	r3, [sp, #8]
 800ff84:	1beb      	subs	r3, r5, r7
 800ff86:	3b15      	subs	r3, #21
 800ff88:	f023 0303 	bic.w	r3, r3, #3
 800ff8c:	3304      	adds	r3, #4
 800ff8e:	3715      	adds	r7, #21
 800ff90:	42bd      	cmp	r5, r7
 800ff92:	bf38      	it	cc
 800ff94:	2304      	movcc	r3, #4
 800ff96:	9301      	str	r3, [sp, #4]
 800ff98:	9b02      	ldr	r3, [sp, #8]
 800ff9a:	9103      	str	r1, [sp, #12]
 800ff9c:	428b      	cmp	r3, r1
 800ff9e:	d80c      	bhi.n	800ffba <__multiply+0x9a>
 800ffa0:	2e00      	cmp	r6, #0
 800ffa2:	dd03      	ble.n	800ffac <__multiply+0x8c>
 800ffa4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d055      	beq.n	8010058 <__multiply+0x138>
 800ffac:	6106      	str	r6, [r0, #16]
 800ffae:	b005      	add	sp, #20
 800ffb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb4:	f843 2b04 	str.w	r2, [r3], #4
 800ffb8:	e7d9      	b.n	800ff6e <__multiply+0x4e>
 800ffba:	f8b1 a000 	ldrh.w	sl, [r1]
 800ffbe:	f1ba 0f00 	cmp.w	sl, #0
 800ffc2:	d01f      	beq.n	8010004 <__multiply+0xe4>
 800ffc4:	46c4      	mov	ip, r8
 800ffc6:	46a1      	mov	r9, r4
 800ffc8:	2700      	movs	r7, #0
 800ffca:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ffce:	f8d9 3000 	ldr.w	r3, [r9]
 800ffd2:	fa1f fb82 	uxth.w	fp, r2
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ffdc:	443b      	add	r3, r7
 800ffde:	f8d9 7000 	ldr.w	r7, [r9]
 800ffe2:	0c12      	lsrs	r2, r2, #16
 800ffe4:	0c3f      	lsrs	r7, r7, #16
 800ffe6:	fb0a 7202 	mla	r2, sl, r2, r7
 800ffea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fff4:	4565      	cmp	r5, ip
 800fff6:	f849 3b04 	str.w	r3, [r9], #4
 800fffa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fffe:	d8e4      	bhi.n	800ffca <__multiply+0xaa>
 8010000:	9b01      	ldr	r3, [sp, #4]
 8010002:	50e7      	str	r7, [r4, r3]
 8010004:	9b03      	ldr	r3, [sp, #12]
 8010006:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801000a:	3104      	adds	r1, #4
 801000c:	f1b9 0f00 	cmp.w	r9, #0
 8010010:	d020      	beq.n	8010054 <__multiply+0x134>
 8010012:	6823      	ldr	r3, [r4, #0]
 8010014:	4647      	mov	r7, r8
 8010016:	46a4      	mov	ip, r4
 8010018:	f04f 0a00 	mov.w	sl, #0
 801001c:	f8b7 b000 	ldrh.w	fp, [r7]
 8010020:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010024:	fb09 220b 	mla	r2, r9, fp, r2
 8010028:	4452      	add	r2, sl
 801002a:	b29b      	uxth	r3, r3
 801002c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010030:	f84c 3b04 	str.w	r3, [ip], #4
 8010034:	f857 3b04 	ldr.w	r3, [r7], #4
 8010038:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801003c:	f8bc 3000 	ldrh.w	r3, [ip]
 8010040:	fb09 330a 	mla	r3, r9, sl, r3
 8010044:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010048:	42bd      	cmp	r5, r7
 801004a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801004e:	d8e5      	bhi.n	801001c <__multiply+0xfc>
 8010050:	9a01      	ldr	r2, [sp, #4]
 8010052:	50a3      	str	r3, [r4, r2]
 8010054:	3404      	adds	r4, #4
 8010056:	e79f      	b.n	800ff98 <__multiply+0x78>
 8010058:	3e01      	subs	r6, #1
 801005a:	e7a1      	b.n	800ffa0 <__multiply+0x80>
 801005c:	0801671d 	.word	0x0801671d
 8010060:	0801672e 	.word	0x0801672e

08010064 <__pow5mult>:
 8010064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010068:	4615      	mov	r5, r2
 801006a:	f012 0203 	ands.w	r2, r2, #3
 801006e:	4607      	mov	r7, r0
 8010070:	460e      	mov	r6, r1
 8010072:	d007      	beq.n	8010084 <__pow5mult+0x20>
 8010074:	4c25      	ldr	r4, [pc, #148]	@ (801010c <__pow5mult+0xa8>)
 8010076:	3a01      	subs	r2, #1
 8010078:	2300      	movs	r3, #0
 801007a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801007e:	f7ff fea7 	bl	800fdd0 <__multadd>
 8010082:	4606      	mov	r6, r0
 8010084:	10ad      	asrs	r5, r5, #2
 8010086:	d03d      	beq.n	8010104 <__pow5mult+0xa0>
 8010088:	69fc      	ldr	r4, [r7, #28]
 801008a:	b97c      	cbnz	r4, 80100ac <__pow5mult+0x48>
 801008c:	2010      	movs	r0, #16
 801008e:	f7fd fdd5 	bl	800dc3c <malloc>
 8010092:	4602      	mov	r2, r0
 8010094:	61f8      	str	r0, [r7, #28]
 8010096:	b928      	cbnz	r0, 80100a4 <__pow5mult+0x40>
 8010098:	4b1d      	ldr	r3, [pc, #116]	@ (8010110 <__pow5mult+0xac>)
 801009a:	481e      	ldr	r0, [pc, #120]	@ (8010114 <__pow5mult+0xb0>)
 801009c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80100a0:	f7fd fd94 	bl	800dbcc <__assert_func>
 80100a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100a8:	6004      	str	r4, [r0, #0]
 80100aa:	60c4      	str	r4, [r0, #12]
 80100ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80100b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100b4:	b94c      	cbnz	r4, 80100ca <__pow5mult+0x66>
 80100b6:	f240 2171 	movw	r1, #625	@ 0x271
 80100ba:	4638      	mov	r0, r7
 80100bc:	f7ff ff1a 	bl	800fef4 <__i2b>
 80100c0:	2300      	movs	r3, #0
 80100c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80100c6:	4604      	mov	r4, r0
 80100c8:	6003      	str	r3, [r0, #0]
 80100ca:	f04f 0900 	mov.w	r9, #0
 80100ce:	07eb      	lsls	r3, r5, #31
 80100d0:	d50a      	bpl.n	80100e8 <__pow5mult+0x84>
 80100d2:	4631      	mov	r1, r6
 80100d4:	4622      	mov	r2, r4
 80100d6:	4638      	mov	r0, r7
 80100d8:	f7ff ff22 	bl	800ff20 <__multiply>
 80100dc:	4631      	mov	r1, r6
 80100de:	4680      	mov	r8, r0
 80100e0:	4638      	mov	r0, r7
 80100e2:	f7ff fe53 	bl	800fd8c <_Bfree>
 80100e6:	4646      	mov	r6, r8
 80100e8:	106d      	asrs	r5, r5, #1
 80100ea:	d00b      	beq.n	8010104 <__pow5mult+0xa0>
 80100ec:	6820      	ldr	r0, [r4, #0]
 80100ee:	b938      	cbnz	r0, 8010100 <__pow5mult+0x9c>
 80100f0:	4622      	mov	r2, r4
 80100f2:	4621      	mov	r1, r4
 80100f4:	4638      	mov	r0, r7
 80100f6:	f7ff ff13 	bl	800ff20 <__multiply>
 80100fa:	6020      	str	r0, [r4, #0]
 80100fc:	f8c0 9000 	str.w	r9, [r0]
 8010100:	4604      	mov	r4, r0
 8010102:	e7e4      	b.n	80100ce <__pow5mult+0x6a>
 8010104:	4630      	mov	r0, r6
 8010106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801010a:	bf00      	nop
 801010c:	08016894 	.word	0x08016894
 8010110:	080166ae 	.word	0x080166ae
 8010114:	0801672e 	.word	0x0801672e

08010118 <__lshift>:
 8010118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801011c:	460c      	mov	r4, r1
 801011e:	6849      	ldr	r1, [r1, #4]
 8010120:	6923      	ldr	r3, [r4, #16]
 8010122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010126:	68a3      	ldr	r3, [r4, #8]
 8010128:	4607      	mov	r7, r0
 801012a:	4691      	mov	r9, r2
 801012c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010130:	f108 0601 	add.w	r6, r8, #1
 8010134:	42b3      	cmp	r3, r6
 8010136:	db0b      	blt.n	8010150 <__lshift+0x38>
 8010138:	4638      	mov	r0, r7
 801013a:	f7ff fde7 	bl	800fd0c <_Balloc>
 801013e:	4605      	mov	r5, r0
 8010140:	b948      	cbnz	r0, 8010156 <__lshift+0x3e>
 8010142:	4602      	mov	r2, r0
 8010144:	4b28      	ldr	r3, [pc, #160]	@ (80101e8 <__lshift+0xd0>)
 8010146:	4829      	ldr	r0, [pc, #164]	@ (80101ec <__lshift+0xd4>)
 8010148:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801014c:	f7fd fd3e 	bl	800dbcc <__assert_func>
 8010150:	3101      	adds	r1, #1
 8010152:	005b      	lsls	r3, r3, #1
 8010154:	e7ee      	b.n	8010134 <__lshift+0x1c>
 8010156:	2300      	movs	r3, #0
 8010158:	f100 0114 	add.w	r1, r0, #20
 801015c:	f100 0210 	add.w	r2, r0, #16
 8010160:	4618      	mov	r0, r3
 8010162:	4553      	cmp	r3, sl
 8010164:	db33      	blt.n	80101ce <__lshift+0xb6>
 8010166:	6920      	ldr	r0, [r4, #16]
 8010168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801016c:	f104 0314 	add.w	r3, r4, #20
 8010170:	f019 091f 	ands.w	r9, r9, #31
 8010174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010178:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801017c:	d02b      	beq.n	80101d6 <__lshift+0xbe>
 801017e:	f1c9 0e20 	rsb	lr, r9, #32
 8010182:	468a      	mov	sl, r1
 8010184:	2200      	movs	r2, #0
 8010186:	6818      	ldr	r0, [r3, #0]
 8010188:	fa00 f009 	lsl.w	r0, r0, r9
 801018c:	4310      	orrs	r0, r2
 801018e:	f84a 0b04 	str.w	r0, [sl], #4
 8010192:	f853 2b04 	ldr.w	r2, [r3], #4
 8010196:	459c      	cmp	ip, r3
 8010198:	fa22 f20e 	lsr.w	r2, r2, lr
 801019c:	d8f3      	bhi.n	8010186 <__lshift+0x6e>
 801019e:	ebac 0304 	sub.w	r3, ip, r4
 80101a2:	3b15      	subs	r3, #21
 80101a4:	f023 0303 	bic.w	r3, r3, #3
 80101a8:	3304      	adds	r3, #4
 80101aa:	f104 0015 	add.w	r0, r4, #21
 80101ae:	4560      	cmp	r0, ip
 80101b0:	bf88      	it	hi
 80101b2:	2304      	movhi	r3, #4
 80101b4:	50ca      	str	r2, [r1, r3]
 80101b6:	b10a      	cbz	r2, 80101bc <__lshift+0xa4>
 80101b8:	f108 0602 	add.w	r6, r8, #2
 80101bc:	3e01      	subs	r6, #1
 80101be:	4638      	mov	r0, r7
 80101c0:	612e      	str	r6, [r5, #16]
 80101c2:	4621      	mov	r1, r4
 80101c4:	f7ff fde2 	bl	800fd8c <_Bfree>
 80101c8:	4628      	mov	r0, r5
 80101ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80101d2:	3301      	adds	r3, #1
 80101d4:	e7c5      	b.n	8010162 <__lshift+0x4a>
 80101d6:	3904      	subs	r1, #4
 80101d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80101dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80101e0:	459c      	cmp	ip, r3
 80101e2:	d8f9      	bhi.n	80101d8 <__lshift+0xc0>
 80101e4:	e7ea      	b.n	80101bc <__lshift+0xa4>
 80101e6:	bf00      	nop
 80101e8:	0801671d 	.word	0x0801671d
 80101ec:	0801672e 	.word	0x0801672e

080101f0 <__mcmp>:
 80101f0:	690a      	ldr	r2, [r1, #16]
 80101f2:	4603      	mov	r3, r0
 80101f4:	6900      	ldr	r0, [r0, #16]
 80101f6:	1a80      	subs	r0, r0, r2
 80101f8:	b530      	push	{r4, r5, lr}
 80101fa:	d10e      	bne.n	801021a <__mcmp+0x2a>
 80101fc:	3314      	adds	r3, #20
 80101fe:	3114      	adds	r1, #20
 8010200:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010204:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010208:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801020c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010210:	4295      	cmp	r5, r2
 8010212:	d003      	beq.n	801021c <__mcmp+0x2c>
 8010214:	d205      	bcs.n	8010222 <__mcmp+0x32>
 8010216:	f04f 30ff 	mov.w	r0, #4294967295
 801021a:	bd30      	pop	{r4, r5, pc}
 801021c:	42a3      	cmp	r3, r4
 801021e:	d3f3      	bcc.n	8010208 <__mcmp+0x18>
 8010220:	e7fb      	b.n	801021a <__mcmp+0x2a>
 8010222:	2001      	movs	r0, #1
 8010224:	e7f9      	b.n	801021a <__mcmp+0x2a>
	...

08010228 <__mdiff>:
 8010228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022c:	4689      	mov	r9, r1
 801022e:	4606      	mov	r6, r0
 8010230:	4611      	mov	r1, r2
 8010232:	4648      	mov	r0, r9
 8010234:	4614      	mov	r4, r2
 8010236:	f7ff ffdb 	bl	80101f0 <__mcmp>
 801023a:	1e05      	subs	r5, r0, #0
 801023c:	d112      	bne.n	8010264 <__mdiff+0x3c>
 801023e:	4629      	mov	r1, r5
 8010240:	4630      	mov	r0, r6
 8010242:	f7ff fd63 	bl	800fd0c <_Balloc>
 8010246:	4602      	mov	r2, r0
 8010248:	b928      	cbnz	r0, 8010256 <__mdiff+0x2e>
 801024a:	4b3f      	ldr	r3, [pc, #252]	@ (8010348 <__mdiff+0x120>)
 801024c:	f240 2137 	movw	r1, #567	@ 0x237
 8010250:	483e      	ldr	r0, [pc, #248]	@ (801034c <__mdiff+0x124>)
 8010252:	f7fd fcbb 	bl	800dbcc <__assert_func>
 8010256:	2301      	movs	r3, #1
 8010258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801025c:	4610      	mov	r0, r2
 801025e:	b003      	add	sp, #12
 8010260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010264:	bfbc      	itt	lt
 8010266:	464b      	movlt	r3, r9
 8010268:	46a1      	movlt	r9, r4
 801026a:	4630      	mov	r0, r6
 801026c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010270:	bfba      	itte	lt
 8010272:	461c      	movlt	r4, r3
 8010274:	2501      	movlt	r5, #1
 8010276:	2500      	movge	r5, #0
 8010278:	f7ff fd48 	bl	800fd0c <_Balloc>
 801027c:	4602      	mov	r2, r0
 801027e:	b918      	cbnz	r0, 8010288 <__mdiff+0x60>
 8010280:	4b31      	ldr	r3, [pc, #196]	@ (8010348 <__mdiff+0x120>)
 8010282:	f240 2145 	movw	r1, #581	@ 0x245
 8010286:	e7e3      	b.n	8010250 <__mdiff+0x28>
 8010288:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801028c:	6926      	ldr	r6, [r4, #16]
 801028e:	60c5      	str	r5, [r0, #12]
 8010290:	f109 0310 	add.w	r3, r9, #16
 8010294:	f109 0514 	add.w	r5, r9, #20
 8010298:	f104 0e14 	add.w	lr, r4, #20
 801029c:	f100 0b14 	add.w	fp, r0, #20
 80102a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80102a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80102a8:	9301      	str	r3, [sp, #4]
 80102aa:	46d9      	mov	r9, fp
 80102ac:	f04f 0c00 	mov.w	ip, #0
 80102b0:	9b01      	ldr	r3, [sp, #4]
 80102b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80102b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80102ba:	9301      	str	r3, [sp, #4]
 80102bc:	fa1f f38a 	uxth.w	r3, sl
 80102c0:	4619      	mov	r1, r3
 80102c2:	b283      	uxth	r3, r0
 80102c4:	1acb      	subs	r3, r1, r3
 80102c6:	0c00      	lsrs	r0, r0, #16
 80102c8:	4463      	add	r3, ip
 80102ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80102ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80102d8:	4576      	cmp	r6, lr
 80102da:	f849 3b04 	str.w	r3, [r9], #4
 80102de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80102e2:	d8e5      	bhi.n	80102b0 <__mdiff+0x88>
 80102e4:	1b33      	subs	r3, r6, r4
 80102e6:	3b15      	subs	r3, #21
 80102e8:	f023 0303 	bic.w	r3, r3, #3
 80102ec:	3415      	adds	r4, #21
 80102ee:	3304      	adds	r3, #4
 80102f0:	42a6      	cmp	r6, r4
 80102f2:	bf38      	it	cc
 80102f4:	2304      	movcc	r3, #4
 80102f6:	441d      	add	r5, r3
 80102f8:	445b      	add	r3, fp
 80102fa:	461e      	mov	r6, r3
 80102fc:	462c      	mov	r4, r5
 80102fe:	4544      	cmp	r4, r8
 8010300:	d30e      	bcc.n	8010320 <__mdiff+0xf8>
 8010302:	f108 0103 	add.w	r1, r8, #3
 8010306:	1b49      	subs	r1, r1, r5
 8010308:	f021 0103 	bic.w	r1, r1, #3
 801030c:	3d03      	subs	r5, #3
 801030e:	45a8      	cmp	r8, r5
 8010310:	bf38      	it	cc
 8010312:	2100      	movcc	r1, #0
 8010314:	440b      	add	r3, r1
 8010316:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801031a:	b191      	cbz	r1, 8010342 <__mdiff+0x11a>
 801031c:	6117      	str	r7, [r2, #16]
 801031e:	e79d      	b.n	801025c <__mdiff+0x34>
 8010320:	f854 1b04 	ldr.w	r1, [r4], #4
 8010324:	46e6      	mov	lr, ip
 8010326:	0c08      	lsrs	r0, r1, #16
 8010328:	fa1c fc81 	uxtah	ip, ip, r1
 801032c:	4471      	add	r1, lr
 801032e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010332:	b289      	uxth	r1, r1
 8010334:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010338:	f846 1b04 	str.w	r1, [r6], #4
 801033c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010340:	e7dd      	b.n	80102fe <__mdiff+0xd6>
 8010342:	3f01      	subs	r7, #1
 8010344:	e7e7      	b.n	8010316 <__mdiff+0xee>
 8010346:	bf00      	nop
 8010348:	0801671d 	.word	0x0801671d
 801034c:	0801672e 	.word	0x0801672e

08010350 <__d2b>:
 8010350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010354:	460f      	mov	r7, r1
 8010356:	2101      	movs	r1, #1
 8010358:	ec59 8b10 	vmov	r8, r9, d0
 801035c:	4616      	mov	r6, r2
 801035e:	f7ff fcd5 	bl	800fd0c <_Balloc>
 8010362:	4604      	mov	r4, r0
 8010364:	b930      	cbnz	r0, 8010374 <__d2b+0x24>
 8010366:	4602      	mov	r2, r0
 8010368:	4b23      	ldr	r3, [pc, #140]	@ (80103f8 <__d2b+0xa8>)
 801036a:	4824      	ldr	r0, [pc, #144]	@ (80103fc <__d2b+0xac>)
 801036c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010370:	f7fd fc2c 	bl	800dbcc <__assert_func>
 8010374:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801037c:	b10d      	cbz	r5, 8010382 <__d2b+0x32>
 801037e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010382:	9301      	str	r3, [sp, #4]
 8010384:	f1b8 0300 	subs.w	r3, r8, #0
 8010388:	d023      	beq.n	80103d2 <__d2b+0x82>
 801038a:	4668      	mov	r0, sp
 801038c:	9300      	str	r3, [sp, #0]
 801038e:	f7ff fd84 	bl	800fe9a <__lo0bits>
 8010392:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010396:	b1d0      	cbz	r0, 80103ce <__d2b+0x7e>
 8010398:	f1c0 0320 	rsb	r3, r0, #32
 801039c:	fa02 f303 	lsl.w	r3, r2, r3
 80103a0:	430b      	orrs	r3, r1
 80103a2:	40c2      	lsrs	r2, r0
 80103a4:	6163      	str	r3, [r4, #20]
 80103a6:	9201      	str	r2, [sp, #4]
 80103a8:	9b01      	ldr	r3, [sp, #4]
 80103aa:	61a3      	str	r3, [r4, #24]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	bf0c      	ite	eq
 80103b0:	2201      	moveq	r2, #1
 80103b2:	2202      	movne	r2, #2
 80103b4:	6122      	str	r2, [r4, #16]
 80103b6:	b1a5      	cbz	r5, 80103e2 <__d2b+0x92>
 80103b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80103bc:	4405      	add	r5, r0
 80103be:	603d      	str	r5, [r7, #0]
 80103c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80103c4:	6030      	str	r0, [r6, #0]
 80103c6:	4620      	mov	r0, r4
 80103c8:	b003      	add	sp, #12
 80103ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103ce:	6161      	str	r1, [r4, #20]
 80103d0:	e7ea      	b.n	80103a8 <__d2b+0x58>
 80103d2:	a801      	add	r0, sp, #4
 80103d4:	f7ff fd61 	bl	800fe9a <__lo0bits>
 80103d8:	9b01      	ldr	r3, [sp, #4]
 80103da:	6163      	str	r3, [r4, #20]
 80103dc:	3020      	adds	r0, #32
 80103de:	2201      	movs	r2, #1
 80103e0:	e7e8      	b.n	80103b4 <__d2b+0x64>
 80103e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80103ea:	6038      	str	r0, [r7, #0]
 80103ec:	6918      	ldr	r0, [r3, #16]
 80103ee:	f7ff fd35 	bl	800fe5c <__hi0bits>
 80103f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103f6:	e7e5      	b.n	80103c4 <__d2b+0x74>
 80103f8:	0801671d 	.word	0x0801671d
 80103fc:	0801672e 	.word	0x0801672e

08010400 <_malloc_usable_size_r>:
 8010400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010404:	1f18      	subs	r0, r3, #4
 8010406:	2b00      	cmp	r3, #0
 8010408:	bfbc      	itt	lt
 801040a:	580b      	ldrlt	r3, [r1, r0]
 801040c:	18c0      	addlt	r0, r0, r3
 801040e:	4770      	bx	lr

08010410 <__ssputs_r>:
 8010410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010414:	688e      	ldr	r6, [r1, #8]
 8010416:	461f      	mov	r7, r3
 8010418:	42be      	cmp	r6, r7
 801041a:	680b      	ldr	r3, [r1, #0]
 801041c:	4682      	mov	sl, r0
 801041e:	460c      	mov	r4, r1
 8010420:	4690      	mov	r8, r2
 8010422:	d82d      	bhi.n	8010480 <__ssputs_r+0x70>
 8010424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010428:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801042c:	d026      	beq.n	801047c <__ssputs_r+0x6c>
 801042e:	6965      	ldr	r5, [r4, #20]
 8010430:	6909      	ldr	r1, [r1, #16]
 8010432:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010436:	eba3 0901 	sub.w	r9, r3, r1
 801043a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801043e:	1c7b      	adds	r3, r7, #1
 8010440:	444b      	add	r3, r9
 8010442:	106d      	asrs	r5, r5, #1
 8010444:	429d      	cmp	r5, r3
 8010446:	bf38      	it	cc
 8010448:	461d      	movcc	r5, r3
 801044a:	0553      	lsls	r3, r2, #21
 801044c:	d527      	bpl.n	801049e <__ssputs_r+0x8e>
 801044e:	4629      	mov	r1, r5
 8010450:	f7fd fc26 	bl	800dca0 <_malloc_r>
 8010454:	4606      	mov	r6, r0
 8010456:	b360      	cbz	r0, 80104b2 <__ssputs_r+0xa2>
 8010458:	6921      	ldr	r1, [r4, #16]
 801045a:	464a      	mov	r2, r9
 801045c:	f7fe fd49 	bl	800eef2 <memcpy>
 8010460:	89a3      	ldrh	r3, [r4, #12]
 8010462:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801046a:	81a3      	strh	r3, [r4, #12]
 801046c:	6126      	str	r6, [r4, #16]
 801046e:	6165      	str	r5, [r4, #20]
 8010470:	444e      	add	r6, r9
 8010472:	eba5 0509 	sub.w	r5, r5, r9
 8010476:	6026      	str	r6, [r4, #0]
 8010478:	60a5      	str	r5, [r4, #8]
 801047a:	463e      	mov	r6, r7
 801047c:	42be      	cmp	r6, r7
 801047e:	d900      	bls.n	8010482 <__ssputs_r+0x72>
 8010480:	463e      	mov	r6, r7
 8010482:	6820      	ldr	r0, [r4, #0]
 8010484:	4632      	mov	r2, r6
 8010486:	4641      	mov	r1, r8
 8010488:	f7fe fc34 	bl	800ecf4 <memmove>
 801048c:	68a3      	ldr	r3, [r4, #8]
 801048e:	1b9b      	subs	r3, r3, r6
 8010490:	60a3      	str	r3, [r4, #8]
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	4433      	add	r3, r6
 8010496:	6023      	str	r3, [r4, #0]
 8010498:	2000      	movs	r0, #0
 801049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801049e:	462a      	mov	r2, r5
 80104a0:	f7fd fc8a 	bl	800ddb8 <_realloc_r>
 80104a4:	4606      	mov	r6, r0
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d1e0      	bne.n	801046c <__ssputs_r+0x5c>
 80104aa:	6921      	ldr	r1, [r4, #16]
 80104ac:	4650      	mov	r0, sl
 80104ae:	f7ff fbe3 	bl	800fc78 <_free_r>
 80104b2:	230c      	movs	r3, #12
 80104b4:	f8ca 3000 	str.w	r3, [sl]
 80104b8:	89a3      	ldrh	r3, [r4, #12]
 80104ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104be:	81a3      	strh	r3, [r4, #12]
 80104c0:	f04f 30ff 	mov.w	r0, #4294967295
 80104c4:	e7e9      	b.n	801049a <__ssputs_r+0x8a>
	...

080104c8 <_svfiprintf_r>:
 80104c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104cc:	4698      	mov	r8, r3
 80104ce:	898b      	ldrh	r3, [r1, #12]
 80104d0:	061b      	lsls	r3, r3, #24
 80104d2:	b09d      	sub	sp, #116	@ 0x74
 80104d4:	4607      	mov	r7, r0
 80104d6:	460d      	mov	r5, r1
 80104d8:	4614      	mov	r4, r2
 80104da:	d510      	bpl.n	80104fe <_svfiprintf_r+0x36>
 80104dc:	690b      	ldr	r3, [r1, #16]
 80104de:	b973      	cbnz	r3, 80104fe <_svfiprintf_r+0x36>
 80104e0:	2140      	movs	r1, #64	@ 0x40
 80104e2:	f7fd fbdd 	bl	800dca0 <_malloc_r>
 80104e6:	6028      	str	r0, [r5, #0]
 80104e8:	6128      	str	r0, [r5, #16]
 80104ea:	b930      	cbnz	r0, 80104fa <_svfiprintf_r+0x32>
 80104ec:	230c      	movs	r3, #12
 80104ee:	603b      	str	r3, [r7, #0]
 80104f0:	f04f 30ff 	mov.w	r0, #4294967295
 80104f4:	b01d      	add	sp, #116	@ 0x74
 80104f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104fa:	2340      	movs	r3, #64	@ 0x40
 80104fc:	616b      	str	r3, [r5, #20]
 80104fe:	2300      	movs	r3, #0
 8010500:	9309      	str	r3, [sp, #36]	@ 0x24
 8010502:	2320      	movs	r3, #32
 8010504:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010508:	f8cd 800c 	str.w	r8, [sp, #12]
 801050c:	2330      	movs	r3, #48	@ 0x30
 801050e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80106ac <_svfiprintf_r+0x1e4>
 8010512:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010516:	f04f 0901 	mov.w	r9, #1
 801051a:	4623      	mov	r3, r4
 801051c:	469a      	mov	sl, r3
 801051e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010522:	b10a      	cbz	r2, 8010528 <_svfiprintf_r+0x60>
 8010524:	2a25      	cmp	r2, #37	@ 0x25
 8010526:	d1f9      	bne.n	801051c <_svfiprintf_r+0x54>
 8010528:	ebba 0b04 	subs.w	fp, sl, r4
 801052c:	d00b      	beq.n	8010546 <_svfiprintf_r+0x7e>
 801052e:	465b      	mov	r3, fp
 8010530:	4622      	mov	r2, r4
 8010532:	4629      	mov	r1, r5
 8010534:	4638      	mov	r0, r7
 8010536:	f7ff ff6b 	bl	8010410 <__ssputs_r>
 801053a:	3001      	adds	r0, #1
 801053c:	f000 80a7 	beq.w	801068e <_svfiprintf_r+0x1c6>
 8010540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010542:	445a      	add	r2, fp
 8010544:	9209      	str	r2, [sp, #36]	@ 0x24
 8010546:	f89a 3000 	ldrb.w	r3, [sl]
 801054a:	2b00      	cmp	r3, #0
 801054c:	f000 809f 	beq.w	801068e <_svfiprintf_r+0x1c6>
 8010550:	2300      	movs	r3, #0
 8010552:	f04f 32ff 	mov.w	r2, #4294967295
 8010556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801055a:	f10a 0a01 	add.w	sl, sl, #1
 801055e:	9304      	str	r3, [sp, #16]
 8010560:	9307      	str	r3, [sp, #28]
 8010562:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010566:	931a      	str	r3, [sp, #104]	@ 0x68
 8010568:	4654      	mov	r4, sl
 801056a:	2205      	movs	r2, #5
 801056c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010570:	484e      	ldr	r0, [pc, #312]	@ (80106ac <_svfiprintf_r+0x1e4>)
 8010572:	f7ef fe45 	bl	8000200 <memchr>
 8010576:	9a04      	ldr	r2, [sp, #16]
 8010578:	b9d8      	cbnz	r0, 80105b2 <_svfiprintf_r+0xea>
 801057a:	06d0      	lsls	r0, r2, #27
 801057c:	bf44      	itt	mi
 801057e:	2320      	movmi	r3, #32
 8010580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010584:	0711      	lsls	r1, r2, #28
 8010586:	bf44      	itt	mi
 8010588:	232b      	movmi	r3, #43	@ 0x2b
 801058a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801058e:	f89a 3000 	ldrb.w	r3, [sl]
 8010592:	2b2a      	cmp	r3, #42	@ 0x2a
 8010594:	d015      	beq.n	80105c2 <_svfiprintf_r+0xfa>
 8010596:	9a07      	ldr	r2, [sp, #28]
 8010598:	4654      	mov	r4, sl
 801059a:	2000      	movs	r0, #0
 801059c:	f04f 0c0a 	mov.w	ip, #10
 80105a0:	4621      	mov	r1, r4
 80105a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105a6:	3b30      	subs	r3, #48	@ 0x30
 80105a8:	2b09      	cmp	r3, #9
 80105aa:	d94b      	bls.n	8010644 <_svfiprintf_r+0x17c>
 80105ac:	b1b0      	cbz	r0, 80105dc <_svfiprintf_r+0x114>
 80105ae:	9207      	str	r2, [sp, #28]
 80105b0:	e014      	b.n	80105dc <_svfiprintf_r+0x114>
 80105b2:	eba0 0308 	sub.w	r3, r0, r8
 80105b6:	fa09 f303 	lsl.w	r3, r9, r3
 80105ba:	4313      	orrs	r3, r2
 80105bc:	9304      	str	r3, [sp, #16]
 80105be:	46a2      	mov	sl, r4
 80105c0:	e7d2      	b.n	8010568 <_svfiprintf_r+0xa0>
 80105c2:	9b03      	ldr	r3, [sp, #12]
 80105c4:	1d19      	adds	r1, r3, #4
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	9103      	str	r1, [sp, #12]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	bfbb      	ittet	lt
 80105ce:	425b      	neglt	r3, r3
 80105d0:	f042 0202 	orrlt.w	r2, r2, #2
 80105d4:	9307      	strge	r3, [sp, #28]
 80105d6:	9307      	strlt	r3, [sp, #28]
 80105d8:	bfb8      	it	lt
 80105da:	9204      	strlt	r2, [sp, #16]
 80105dc:	7823      	ldrb	r3, [r4, #0]
 80105de:	2b2e      	cmp	r3, #46	@ 0x2e
 80105e0:	d10a      	bne.n	80105f8 <_svfiprintf_r+0x130>
 80105e2:	7863      	ldrb	r3, [r4, #1]
 80105e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80105e6:	d132      	bne.n	801064e <_svfiprintf_r+0x186>
 80105e8:	9b03      	ldr	r3, [sp, #12]
 80105ea:	1d1a      	adds	r2, r3, #4
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	9203      	str	r2, [sp, #12]
 80105f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105f4:	3402      	adds	r4, #2
 80105f6:	9305      	str	r3, [sp, #20]
 80105f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80106bc <_svfiprintf_r+0x1f4>
 80105fc:	7821      	ldrb	r1, [r4, #0]
 80105fe:	2203      	movs	r2, #3
 8010600:	4650      	mov	r0, sl
 8010602:	f7ef fdfd 	bl	8000200 <memchr>
 8010606:	b138      	cbz	r0, 8010618 <_svfiprintf_r+0x150>
 8010608:	9b04      	ldr	r3, [sp, #16]
 801060a:	eba0 000a 	sub.w	r0, r0, sl
 801060e:	2240      	movs	r2, #64	@ 0x40
 8010610:	4082      	lsls	r2, r0
 8010612:	4313      	orrs	r3, r2
 8010614:	3401      	adds	r4, #1
 8010616:	9304      	str	r3, [sp, #16]
 8010618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801061c:	4824      	ldr	r0, [pc, #144]	@ (80106b0 <_svfiprintf_r+0x1e8>)
 801061e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010622:	2206      	movs	r2, #6
 8010624:	f7ef fdec 	bl	8000200 <memchr>
 8010628:	2800      	cmp	r0, #0
 801062a:	d036      	beq.n	801069a <_svfiprintf_r+0x1d2>
 801062c:	4b21      	ldr	r3, [pc, #132]	@ (80106b4 <_svfiprintf_r+0x1ec>)
 801062e:	bb1b      	cbnz	r3, 8010678 <_svfiprintf_r+0x1b0>
 8010630:	9b03      	ldr	r3, [sp, #12]
 8010632:	3307      	adds	r3, #7
 8010634:	f023 0307 	bic.w	r3, r3, #7
 8010638:	3308      	adds	r3, #8
 801063a:	9303      	str	r3, [sp, #12]
 801063c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801063e:	4433      	add	r3, r6
 8010640:	9309      	str	r3, [sp, #36]	@ 0x24
 8010642:	e76a      	b.n	801051a <_svfiprintf_r+0x52>
 8010644:	fb0c 3202 	mla	r2, ip, r2, r3
 8010648:	460c      	mov	r4, r1
 801064a:	2001      	movs	r0, #1
 801064c:	e7a8      	b.n	80105a0 <_svfiprintf_r+0xd8>
 801064e:	2300      	movs	r3, #0
 8010650:	3401      	adds	r4, #1
 8010652:	9305      	str	r3, [sp, #20]
 8010654:	4619      	mov	r1, r3
 8010656:	f04f 0c0a 	mov.w	ip, #10
 801065a:	4620      	mov	r0, r4
 801065c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010660:	3a30      	subs	r2, #48	@ 0x30
 8010662:	2a09      	cmp	r2, #9
 8010664:	d903      	bls.n	801066e <_svfiprintf_r+0x1a6>
 8010666:	2b00      	cmp	r3, #0
 8010668:	d0c6      	beq.n	80105f8 <_svfiprintf_r+0x130>
 801066a:	9105      	str	r1, [sp, #20]
 801066c:	e7c4      	b.n	80105f8 <_svfiprintf_r+0x130>
 801066e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010672:	4604      	mov	r4, r0
 8010674:	2301      	movs	r3, #1
 8010676:	e7f0      	b.n	801065a <_svfiprintf_r+0x192>
 8010678:	ab03      	add	r3, sp, #12
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	462a      	mov	r2, r5
 801067e:	4b0e      	ldr	r3, [pc, #56]	@ (80106b8 <_svfiprintf_r+0x1f0>)
 8010680:	a904      	add	r1, sp, #16
 8010682:	4638      	mov	r0, r7
 8010684:	f7fd fc66 	bl	800df54 <_printf_float>
 8010688:	1c42      	adds	r2, r0, #1
 801068a:	4606      	mov	r6, r0
 801068c:	d1d6      	bne.n	801063c <_svfiprintf_r+0x174>
 801068e:	89ab      	ldrh	r3, [r5, #12]
 8010690:	065b      	lsls	r3, r3, #25
 8010692:	f53f af2d 	bmi.w	80104f0 <_svfiprintf_r+0x28>
 8010696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010698:	e72c      	b.n	80104f4 <_svfiprintf_r+0x2c>
 801069a:	ab03      	add	r3, sp, #12
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	462a      	mov	r2, r5
 80106a0:	4b05      	ldr	r3, [pc, #20]	@ (80106b8 <_svfiprintf_r+0x1f0>)
 80106a2:	a904      	add	r1, sp, #16
 80106a4:	4638      	mov	r0, r7
 80106a6:	f7fe f839 	bl	800e71c <_printf_i>
 80106aa:	e7ed      	b.n	8010688 <_svfiprintf_r+0x1c0>
 80106ac:	0801666e 	.word	0x0801666e
 80106b0:	08016678 	.word	0x08016678
 80106b4:	0800df55 	.word	0x0800df55
 80106b8:	08010411 	.word	0x08010411
 80106bc:	08016674 	.word	0x08016674

080106c0 <__sflush_r>:
 80106c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80106c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c8:	0716      	lsls	r6, r2, #28
 80106ca:	4605      	mov	r5, r0
 80106cc:	460c      	mov	r4, r1
 80106ce:	d454      	bmi.n	801077a <__sflush_r+0xba>
 80106d0:	684b      	ldr	r3, [r1, #4]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	dc02      	bgt.n	80106dc <__sflush_r+0x1c>
 80106d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80106d8:	2b00      	cmp	r3, #0
 80106da:	dd48      	ble.n	801076e <__sflush_r+0xae>
 80106dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106de:	2e00      	cmp	r6, #0
 80106e0:	d045      	beq.n	801076e <__sflush_r+0xae>
 80106e2:	2300      	movs	r3, #0
 80106e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80106e8:	682f      	ldr	r7, [r5, #0]
 80106ea:	6a21      	ldr	r1, [r4, #32]
 80106ec:	602b      	str	r3, [r5, #0]
 80106ee:	d030      	beq.n	8010752 <__sflush_r+0x92>
 80106f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80106f2:	89a3      	ldrh	r3, [r4, #12]
 80106f4:	0759      	lsls	r1, r3, #29
 80106f6:	d505      	bpl.n	8010704 <__sflush_r+0x44>
 80106f8:	6863      	ldr	r3, [r4, #4]
 80106fa:	1ad2      	subs	r2, r2, r3
 80106fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80106fe:	b10b      	cbz	r3, 8010704 <__sflush_r+0x44>
 8010700:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010702:	1ad2      	subs	r2, r2, r3
 8010704:	2300      	movs	r3, #0
 8010706:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010708:	6a21      	ldr	r1, [r4, #32]
 801070a:	4628      	mov	r0, r5
 801070c:	47b0      	blx	r6
 801070e:	1c43      	adds	r3, r0, #1
 8010710:	89a3      	ldrh	r3, [r4, #12]
 8010712:	d106      	bne.n	8010722 <__sflush_r+0x62>
 8010714:	6829      	ldr	r1, [r5, #0]
 8010716:	291d      	cmp	r1, #29
 8010718:	d82b      	bhi.n	8010772 <__sflush_r+0xb2>
 801071a:	4a2a      	ldr	r2, [pc, #168]	@ (80107c4 <__sflush_r+0x104>)
 801071c:	40ca      	lsrs	r2, r1
 801071e:	07d6      	lsls	r6, r2, #31
 8010720:	d527      	bpl.n	8010772 <__sflush_r+0xb2>
 8010722:	2200      	movs	r2, #0
 8010724:	6062      	str	r2, [r4, #4]
 8010726:	04d9      	lsls	r1, r3, #19
 8010728:	6922      	ldr	r2, [r4, #16]
 801072a:	6022      	str	r2, [r4, #0]
 801072c:	d504      	bpl.n	8010738 <__sflush_r+0x78>
 801072e:	1c42      	adds	r2, r0, #1
 8010730:	d101      	bne.n	8010736 <__sflush_r+0x76>
 8010732:	682b      	ldr	r3, [r5, #0]
 8010734:	b903      	cbnz	r3, 8010738 <__sflush_r+0x78>
 8010736:	6560      	str	r0, [r4, #84]	@ 0x54
 8010738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801073a:	602f      	str	r7, [r5, #0]
 801073c:	b1b9      	cbz	r1, 801076e <__sflush_r+0xae>
 801073e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010742:	4299      	cmp	r1, r3
 8010744:	d002      	beq.n	801074c <__sflush_r+0x8c>
 8010746:	4628      	mov	r0, r5
 8010748:	f7ff fa96 	bl	800fc78 <_free_r>
 801074c:	2300      	movs	r3, #0
 801074e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010750:	e00d      	b.n	801076e <__sflush_r+0xae>
 8010752:	2301      	movs	r3, #1
 8010754:	4628      	mov	r0, r5
 8010756:	47b0      	blx	r6
 8010758:	4602      	mov	r2, r0
 801075a:	1c50      	adds	r0, r2, #1
 801075c:	d1c9      	bne.n	80106f2 <__sflush_r+0x32>
 801075e:	682b      	ldr	r3, [r5, #0]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d0c6      	beq.n	80106f2 <__sflush_r+0x32>
 8010764:	2b1d      	cmp	r3, #29
 8010766:	d001      	beq.n	801076c <__sflush_r+0xac>
 8010768:	2b16      	cmp	r3, #22
 801076a:	d11e      	bne.n	80107aa <__sflush_r+0xea>
 801076c:	602f      	str	r7, [r5, #0]
 801076e:	2000      	movs	r0, #0
 8010770:	e022      	b.n	80107b8 <__sflush_r+0xf8>
 8010772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010776:	b21b      	sxth	r3, r3
 8010778:	e01b      	b.n	80107b2 <__sflush_r+0xf2>
 801077a:	690f      	ldr	r7, [r1, #16]
 801077c:	2f00      	cmp	r7, #0
 801077e:	d0f6      	beq.n	801076e <__sflush_r+0xae>
 8010780:	0793      	lsls	r3, r2, #30
 8010782:	680e      	ldr	r6, [r1, #0]
 8010784:	bf08      	it	eq
 8010786:	694b      	ldreq	r3, [r1, #20]
 8010788:	600f      	str	r7, [r1, #0]
 801078a:	bf18      	it	ne
 801078c:	2300      	movne	r3, #0
 801078e:	eba6 0807 	sub.w	r8, r6, r7
 8010792:	608b      	str	r3, [r1, #8]
 8010794:	f1b8 0f00 	cmp.w	r8, #0
 8010798:	dde9      	ble.n	801076e <__sflush_r+0xae>
 801079a:	6a21      	ldr	r1, [r4, #32]
 801079c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801079e:	4643      	mov	r3, r8
 80107a0:	463a      	mov	r2, r7
 80107a2:	4628      	mov	r0, r5
 80107a4:	47b0      	blx	r6
 80107a6:	2800      	cmp	r0, #0
 80107a8:	dc08      	bgt.n	80107bc <__sflush_r+0xfc>
 80107aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107b2:	81a3      	strh	r3, [r4, #12]
 80107b4:	f04f 30ff 	mov.w	r0, #4294967295
 80107b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107bc:	4407      	add	r7, r0
 80107be:	eba8 0800 	sub.w	r8, r8, r0
 80107c2:	e7e7      	b.n	8010794 <__sflush_r+0xd4>
 80107c4:	20400001 	.word	0x20400001

080107c8 <_fflush_r>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	690b      	ldr	r3, [r1, #16]
 80107cc:	4605      	mov	r5, r0
 80107ce:	460c      	mov	r4, r1
 80107d0:	b913      	cbnz	r3, 80107d8 <_fflush_r+0x10>
 80107d2:	2500      	movs	r5, #0
 80107d4:	4628      	mov	r0, r5
 80107d6:	bd38      	pop	{r3, r4, r5, pc}
 80107d8:	b118      	cbz	r0, 80107e2 <_fflush_r+0x1a>
 80107da:	6a03      	ldr	r3, [r0, #32]
 80107dc:	b90b      	cbnz	r3, 80107e2 <_fflush_r+0x1a>
 80107de:	f7fe f947 	bl	800ea70 <__sinit>
 80107e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d0f3      	beq.n	80107d2 <_fflush_r+0xa>
 80107ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80107ec:	07d0      	lsls	r0, r2, #31
 80107ee:	d404      	bmi.n	80107fa <_fflush_r+0x32>
 80107f0:	0599      	lsls	r1, r3, #22
 80107f2:	d402      	bmi.n	80107fa <_fflush_r+0x32>
 80107f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107f6:	f7fe fb7a 	bl	800eeee <__retarget_lock_acquire_recursive>
 80107fa:	4628      	mov	r0, r5
 80107fc:	4621      	mov	r1, r4
 80107fe:	f7ff ff5f 	bl	80106c0 <__sflush_r>
 8010802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010804:	07da      	lsls	r2, r3, #31
 8010806:	4605      	mov	r5, r0
 8010808:	d4e4      	bmi.n	80107d4 <_fflush_r+0xc>
 801080a:	89a3      	ldrh	r3, [r4, #12]
 801080c:	059b      	lsls	r3, r3, #22
 801080e:	d4e1      	bmi.n	80107d4 <_fflush_r+0xc>
 8010810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010812:	f7fe fb6d 	bl	800eef0 <__retarget_lock_release_recursive>
 8010816:	e7dd      	b.n	80107d4 <_fflush_r+0xc>

08010818 <__swhatbuf_r>:
 8010818:	b570      	push	{r4, r5, r6, lr}
 801081a:	460c      	mov	r4, r1
 801081c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010820:	2900      	cmp	r1, #0
 8010822:	b096      	sub	sp, #88	@ 0x58
 8010824:	4615      	mov	r5, r2
 8010826:	461e      	mov	r6, r3
 8010828:	da0d      	bge.n	8010846 <__swhatbuf_r+0x2e>
 801082a:	89a3      	ldrh	r3, [r4, #12]
 801082c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010830:	f04f 0100 	mov.w	r1, #0
 8010834:	bf14      	ite	ne
 8010836:	2340      	movne	r3, #64	@ 0x40
 8010838:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801083c:	2000      	movs	r0, #0
 801083e:	6031      	str	r1, [r6, #0]
 8010840:	602b      	str	r3, [r5, #0]
 8010842:	b016      	add	sp, #88	@ 0x58
 8010844:	bd70      	pop	{r4, r5, r6, pc}
 8010846:	466a      	mov	r2, sp
 8010848:	f000 f848 	bl	80108dc <_fstat_r>
 801084c:	2800      	cmp	r0, #0
 801084e:	dbec      	blt.n	801082a <__swhatbuf_r+0x12>
 8010850:	9901      	ldr	r1, [sp, #4]
 8010852:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010856:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801085a:	4259      	negs	r1, r3
 801085c:	4159      	adcs	r1, r3
 801085e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010862:	e7eb      	b.n	801083c <__swhatbuf_r+0x24>

08010864 <__smakebuf_r>:
 8010864:	898b      	ldrh	r3, [r1, #12]
 8010866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010868:	079d      	lsls	r5, r3, #30
 801086a:	4606      	mov	r6, r0
 801086c:	460c      	mov	r4, r1
 801086e:	d507      	bpl.n	8010880 <__smakebuf_r+0x1c>
 8010870:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010874:	6023      	str	r3, [r4, #0]
 8010876:	6123      	str	r3, [r4, #16]
 8010878:	2301      	movs	r3, #1
 801087a:	6163      	str	r3, [r4, #20]
 801087c:	b003      	add	sp, #12
 801087e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010880:	ab01      	add	r3, sp, #4
 8010882:	466a      	mov	r2, sp
 8010884:	f7ff ffc8 	bl	8010818 <__swhatbuf_r>
 8010888:	9f00      	ldr	r7, [sp, #0]
 801088a:	4605      	mov	r5, r0
 801088c:	4639      	mov	r1, r7
 801088e:	4630      	mov	r0, r6
 8010890:	f7fd fa06 	bl	800dca0 <_malloc_r>
 8010894:	b948      	cbnz	r0, 80108aa <__smakebuf_r+0x46>
 8010896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801089a:	059a      	lsls	r2, r3, #22
 801089c:	d4ee      	bmi.n	801087c <__smakebuf_r+0x18>
 801089e:	f023 0303 	bic.w	r3, r3, #3
 80108a2:	f043 0302 	orr.w	r3, r3, #2
 80108a6:	81a3      	strh	r3, [r4, #12]
 80108a8:	e7e2      	b.n	8010870 <__smakebuf_r+0xc>
 80108aa:	89a3      	ldrh	r3, [r4, #12]
 80108ac:	6020      	str	r0, [r4, #0]
 80108ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108b2:	81a3      	strh	r3, [r4, #12]
 80108b4:	9b01      	ldr	r3, [sp, #4]
 80108b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80108ba:	b15b      	cbz	r3, 80108d4 <__smakebuf_r+0x70>
 80108bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108c0:	4630      	mov	r0, r6
 80108c2:	f000 f81d 	bl	8010900 <_isatty_r>
 80108c6:	b128      	cbz	r0, 80108d4 <__smakebuf_r+0x70>
 80108c8:	89a3      	ldrh	r3, [r4, #12]
 80108ca:	f023 0303 	bic.w	r3, r3, #3
 80108ce:	f043 0301 	orr.w	r3, r3, #1
 80108d2:	81a3      	strh	r3, [r4, #12]
 80108d4:	89a3      	ldrh	r3, [r4, #12]
 80108d6:	431d      	orrs	r5, r3
 80108d8:	81a5      	strh	r5, [r4, #12]
 80108da:	e7cf      	b.n	801087c <__smakebuf_r+0x18>

080108dc <_fstat_r>:
 80108dc:	b538      	push	{r3, r4, r5, lr}
 80108de:	4d07      	ldr	r5, [pc, #28]	@ (80108fc <_fstat_r+0x20>)
 80108e0:	2300      	movs	r3, #0
 80108e2:	4604      	mov	r4, r0
 80108e4:	4608      	mov	r0, r1
 80108e6:	4611      	mov	r1, r2
 80108e8:	602b      	str	r3, [r5, #0]
 80108ea:	f7f1 fa4a 	bl	8001d82 <_fstat>
 80108ee:	1c43      	adds	r3, r0, #1
 80108f0:	d102      	bne.n	80108f8 <_fstat_r+0x1c>
 80108f2:	682b      	ldr	r3, [r5, #0]
 80108f4:	b103      	cbz	r3, 80108f8 <_fstat_r+0x1c>
 80108f6:	6023      	str	r3, [r4, #0]
 80108f8:	bd38      	pop	{r3, r4, r5, pc}
 80108fa:	bf00      	nop
 80108fc:	20001994 	.word	0x20001994

08010900 <_isatty_r>:
 8010900:	b538      	push	{r3, r4, r5, lr}
 8010902:	4d06      	ldr	r5, [pc, #24]	@ (801091c <_isatty_r+0x1c>)
 8010904:	2300      	movs	r3, #0
 8010906:	4604      	mov	r4, r0
 8010908:	4608      	mov	r0, r1
 801090a:	602b      	str	r3, [r5, #0]
 801090c:	f7f1 fa49 	bl	8001da2 <_isatty>
 8010910:	1c43      	adds	r3, r0, #1
 8010912:	d102      	bne.n	801091a <_isatty_r+0x1a>
 8010914:	682b      	ldr	r3, [r5, #0]
 8010916:	b103      	cbz	r3, 801091a <_isatty_r+0x1a>
 8010918:	6023      	str	r3, [r4, #0]
 801091a:	bd38      	pop	{r3, r4, r5, pc}
 801091c:	20001994 	.word	0x20001994

08010920 <__ascii_mbtowc>:
 8010920:	b082      	sub	sp, #8
 8010922:	b901      	cbnz	r1, 8010926 <__ascii_mbtowc+0x6>
 8010924:	a901      	add	r1, sp, #4
 8010926:	b142      	cbz	r2, 801093a <__ascii_mbtowc+0x1a>
 8010928:	b14b      	cbz	r3, 801093e <__ascii_mbtowc+0x1e>
 801092a:	7813      	ldrb	r3, [r2, #0]
 801092c:	600b      	str	r3, [r1, #0]
 801092e:	7812      	ldrb	r2, [r2, #0]
 8010930:	1e10      	subs	r0, r2, #0
 8010932:	bf18      	it	ne
 8010934:	2001      	movne	r0, #1
 8010936:	b002      	add	sp, #8
 8010938:	4770      	bx	lr
 801093a:	4610      	mov	r0, r2
 801093c:	e7fb      	b.n	8010936 <__ascii_mbtowc+0x16>
 801093e:	f06f 0001 	mvn.w	r0, #1
 8010942:	e7f8      	b.n	8010936 <__ascii_mbtowc+0x16>

08010944 <__ascii_wctomb>:
 8010944:	4603      	mov	r3, r0
 8010946:	4608      	mov	r0, r1
 8010948:	b141      	cbz	r1, 801095c <__ascii_wctomb+0x18>
 801094a:	2aff      	cmp	r2, #255	@ 0xff
 801094c:	d904      	bls.n	8010958 <__ascii_wctomb+0x14>
 801094e:	228a      	movs	r2, #138	@ 0x8a
 8010950:	601a      	str	r2, [r3, #0]
 8010952:	f04f 30ff 	mov.w	r0, #4294967295
 8010956:	4770      	bx	lr
 8010958:	700a      	strb	r2, [r1, #0]
 801095a:	2001      	movs	r0, #1
 801095c:	4770      	bx	lr
	...

08010960 <_init>:
 8010960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010962:	bf00      	nop
 8010964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010966:	bc08      	pop	{r3}
 8010968:	469e      	mov	lr, r3
 801096a:	4770      	bx	lr

0801096c <_fini>:
 801096c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801096e:	bf00      	nop
 8010970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010972:	bc08      	pop	{r3}
 8010974:	469e      	mov	lr, r3
 8010976:	4770      	bx	lr
