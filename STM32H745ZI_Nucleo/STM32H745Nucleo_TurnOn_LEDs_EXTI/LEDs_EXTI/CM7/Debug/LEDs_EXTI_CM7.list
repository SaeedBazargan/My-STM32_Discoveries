
LEDs_EXTI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f98  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002230  08002230  00003230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002240  08002240  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002240  08002240  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002240  08002240  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002240  08002240  00003240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002244  08002244  00003244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08002248  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  24000010  08002258  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000034  08002258  00004034  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f51  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001519  00000000  00000000  0000bf8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000538  00000000  00000000  0000dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000379d8  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000834d  00000000  00000000  00045ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017033d  00000000  00000000  0004de1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001be15a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b30  00000000  00000000  001be1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  001bfcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002218 	.word	0x08002218

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002218 	.word	0x08002218

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800046a:	f000 f9dd 	bl	8000828 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000472:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <main+0x98>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d004      	beq.n	800048c <main+0x28>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x12>
  if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x32>
  {
  Error_Handler();
 8000492:	f000 f9f5 	bl	8000880 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000496:	f000 fa77 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049a:	f000 f831 	bl	8000500 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800049e:	4b17      	ldr	r3, [pc, #92]	@ (80004fc <main+0x98>)
 80004a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004a4:	4a15      	ldr	r2, [pc, #84]	@ (80004fc <main+0x98>)
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004ae:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <main+0x98>)
 80004b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 fe6d 	bl	800119c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004c2:	2100      	movs	r1, #0
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 fe83 	bl	80011d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004ce:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004d0:	bf00      	nop
 80004d2:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <main+0x98>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d104      	bne.n	80004e8 <main+0x84>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	1e5a      	subs	r2, r3, #1
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dcf4      	bgt.n	80004d2 <main+0x6e>
if ( timeout < 0 )
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	da01      	bge.n	80004f2 <main+0x8e>
{
Error_Handler();
 80004ee:	f000 f9c7 	bl	8000880 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f883 	bl	80005fc <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	bf00      	nop
 80004f8:	e7fd      	b.n	80004f6 <main+0x92>
 80004fa:	bf00      	nop
 80004fc:	58024400 	.word	0x58024400

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b09c      	sub	sp, #112	@ 0x70
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800050a:	224c      	movs	r2, #76	@ 0x4c
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fe56 	bl	80021c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2220      	movs	r2, #32
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fe50 	bl	80021c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000520:	2004      	movs	r0, #4
 8000522:	f000 fe69 	bl	80011f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4b32      	ldr	r3, [pc, #200]	@ (80005f4 <SystemClock_Config+0xf4>)
 800052c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800052e:	4a31      	ldr	r2, [pc, #196]	@ (80005f4 <SystemClock_Config+0xf4>)
 8000530:	f023 0301 	bic.w	r3, r3, #1
 8000534:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000536:	4b2f      	ldr	r3, [pc, #188]	@ (80005f4 <SystemClock_Config+0xf4>)
 8000538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	4b2d      	ldr	r3, [pc, #180]	@ (80005f8 <SystemClock_Config+0xf8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000548:	4a2b      	ldr	r2, [pc, #172]	@ (80005f8 <SystemClock_Config+0xf8>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b29      	ldr	r3, [pc, #164]	@ (80005f8 <SystemClock_Config+0xf8>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800055c:	bf00      	nop
 800055e:	4b26      	ldr	r3, [pc, #152]	@ (80005f8 <SystemClock_Config+0xf8>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800056a:	d1f8      	bne.n	800055e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000570:	2301      	movs	r3, #1
 8000572:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2340      	movs	r3, #64	@ 0x40
 8000576:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000584:	2319      	movs	r3, #25
 8000586:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000588:	2302      	movs	r3, #2
 800058a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000594:	230c      	movs	r3, #12
 8000596:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000598:	2300      	movs	r3, #0
 800059a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fe81 	bl	80012ac <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005b0:	f000 f966 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	233f      	movs	r3, #63	@ 0x3f
 80005b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2303      	movs	r3, #3
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005c4:	2340      	movs	r3, #64	@ 0x40
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005c8:	2340      	movs	r3, #64	@ 0x40
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005d2:	2340      	movs	r3, #64	@ 0x40
 80005d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fac0 	bl	8001b60 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005e6:	f000 f94b 	bl	8000880 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3770      	adds	r7, #112	@ 0x70
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	58000400 	.word	0x58000400
 80005f8:	58024800 	.word	0x58024800

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b3f      	ldr	r3, [pc, #252]	@ (8000710 <MX_GPIO_Init+0x114>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000618:	4a3d      	ldr	r2, [pc, #244]	@ (8000710 <MX_GPIO_Init+0x114>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000622:	4b3b      	ldr	r3, [pc, #236]	@ (8000710 <MX_GPIO_Init+0x114>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	4b37      	ldr	r3, [pc, #220]	@ (8000710 <MX_GPIO_Init+0x114>)
 8000632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000636:	4a36      	ldr	r2, [pc, #216]	@ (8000710 <MX_GPIO_Init+0x114>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000640:	4b33      	ldr	r3, [pc, #204]	@ (8000710 <MX_GPIO_Init+0x114>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b30      	ldr	r3, [pc, #192]	@ (8000710 <MX_GPIO_Init+0x114>)
 8000650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000654:	4a2e      	ldr	r2, [pc, #184]	@ (8000710 <MX_GPIO_Init+0x114>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <MX_GPIO_Init+0x114>)
 8000660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066c:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <MX_GPIO_Init+0x114>)
 800066e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000672:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <MX_GPIO_Init+0x114>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800067c:	4b24      	ldr	r3, [pc, #144]	@ (8000710 <MX_GPIO_Init+0x114>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000682:	f003 0310 	and.w	r3, r3, #16
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000690:	4820      	ldr	r0, [pc, #128]	@ (8000714 <MX_GPIO_Init+0x118>)
 8000692:	f000 fd4f 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2102      	movs	r1, #2
 800069a:	481f      	ldr	r0, [pc, #124]	@ (8000718 <MX_GPIO_Init+0x11c>)
 800069c:	f000 fd4a 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Pin */
  GPIO_InitStruct.Pin = Btn_Pin;
 80006a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4819      	ldr	r0, [pc, #100]	@ (800071c <MX_GPIO_Init+0x120>)
 80006b8:	f000 fb8c 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80006bc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	480f      	ldr	r0, [pc, #60]	@ (8000714 <MX_GPIO_Init+0x118>)
 80006d6:	f000 fb7d 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4809      	ldr	r0, [pc, #36]	@ (8000718 <MX_GPIO_Init+0x11c>)
 80006f2:	f000 fb6f 	bl	8000dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(Btn_EXTI_IRQn, 1, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	2028      	movs	r0, #40	@ 0x28
 80006fc:	f000 fabd 	bl	8000c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(Btn_EXTI_IRQn);
 8000700:	2028      	movs	r0, #40	@ 0x28
 8000702:	f000 fad4 	bl	8000cae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	@ 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	58024400 	.word	0x58024400
 8000714:	58020400 	.word	0x58020400
 8000718:	58021000 	.word	0x58021000
 800071c:	58020800 	.word	0x58020800

08000720 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Btn_Pin)
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000730:	d170      	bne.n	8000814 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		count++;
 8000732:	4b3a      	ldr	r3, [pc, #232]	@ (800081c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	3301      	adds	r3, #1
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b38      	ldr	r3, [pc, #224]	@ (800081c <HAL_GPIO_EXTI_Callback+0xfc>)
 800073c:	701a      	strb	r2, [r3, #0]

		if(count == 1)
 800073e:	4b37      	ldr	r3, [pc, #220]	@ (800081c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d110      	bne.n	8000768 <HAL_GPIO_EXTI_Callback+0x48>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	4835      	ldr	r0, [pc, #212]	@ (8000820 <HAL_GPIO_EXTI_Callback+0x100>)
 800074c:	f000 fcf2 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000756:	4833      	ldr	r0, [pc, #204]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 8000758:	f000 fcec 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2101      	movs	r1, #1
 8000760:	4830      	ldr	r0, [pc, #192]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 8000762:	f000 fce7 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000766:	e055      	b.n	8000814 <HAL_GPIO_EXTI_Callback+0xf4>
		else if(count == 2)
 8000768:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <HAL_GPIO_EXTI_Callback+0xfc>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d110      	bne.n	8000792 <HAL_GPIO_EXTI_Callback+0x72>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2102      	movs	r1, #2
 8000774:	482a      	ldr	r0, [pc, #168]	@ (8000820 <HAL_GPIO_EXTI_Callback+0x100>)
 8000776:	f000 fcdd 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000780:	4828      	ldr	r0, [pc, #160]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 8000782:	f000 fcd7 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2101      	movs	r1, #1
 800078a:	4826      	ldr	r0, [pc, #152]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 800078c:	f000 fcd2 	bl	8001134 <HAL_GPIO_WritePin>
}
 8000790:	e040      	b.n	8000814 <HAL_GPIO_EXTI_Callback+0xf4>
		else if(count == 3)
 8000792:	4b22      	ldr	r3, [pc, #136]	@ (800081c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b03      	cmp	r3, #3
 8000798:	d110      	bne.n	80007bc <HAL_GPIO_EXTI_Callback+0x9c>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2102      	movs	r1, #2
 800079e:	4820      	ldr	r0, [pc, #128]	@ (8000820 <HAL_GPIO_EXTI_Callback+0x100>)
 80007a0:	f000 fcc8 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007aa:	481e      	ldr	r0, [pc, #120]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 80007ac:	f000 fcc2 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	481b      	ldr	r0, [pc, #108]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 80007b6:	f000 fcbd 	bl	8001134 <HAL_GPIO_WritePin>
}
 80007ba:	e02b      	b.n	8000814 <HAL_GPIO_EXTI_Callback+0xf4>
		else if(count == 4)
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <HAL_GPIO_EXTI_Callback+0xfc>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d110      	bne.n	80007e6 <HAL_GPIO_EXTI_Callback+0xc6>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2102      	movs	r1, #2
 80007c8:	4815      	ldr	r0, [pc, #84]	@ (8000820 <HAL_GPIO_EXTI_Callback+0x100>)
 80007ca:	f000 fcb3 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007d4:	4813      	ldr	r0, [pc, #76]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 80007d6:	f000 fcad 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2101      	movs	r1, #1
 80007de:	4811      	ldr	r0, [pc, #68]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 80007e0:	f000 fca8 	bl	8001134 <HAL_GPIO_WritePin>
}
 80007e4:	e016      	b.n	8000814 <HAL_GPIO_EXTI_Callback+0xf4>
		else if(count == 5)
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_GPIO_EXTI_Callback+0xfc>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b05      	cmp	r3, #5
 80007ec:	d112      	bne.n	8000814 <HAL_GPIO_EXTI_Callback+0xf4>
			count = 0;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <HAL_GPIO_EXTI_Callback+0xfc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2102      	movs	r1, #2
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <HAL_GPIO_EXTI_Callback+0x100>)
 80007fa:	f000 fc9b 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000804:	4807      	ldr	r0, [pc, #28]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 8000806:	f000 fc95 	bl	8001134 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 8000810:	f000 fc90 	bl	8001134 <HAL_GPIO_WritePin>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2400002c 	.word	0x2400002c
 8000820:	58021000 	.word	0x58021000
 8000824:	58020400 	.word	0x58020400

08000828 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800082e:	463b      	mov	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800083a:	f000 fa53 	bl	8000ce4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800083e:	2301      	movs	r3, #1
 8000840:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000842:	2300      	movs	r3, #0
 8000844:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 800084a:	2304      	movs	r3, #4
 800084c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800084e:	2300      	movs	r3, #0
 8000850:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000852:	2300      	movs	r3, #0
 8000854:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000856:	2300      	movs	r3, #0
 8000858:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086a:	463b      	mov	r3, r7
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fa71 	bl	8000d54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000872:	2004      	movs	r0, #4
 8000874:	f000 fa4e 	bl	8000d14 <HAL_MPU_Enable>

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <Error_Handler+0x8>

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <HAL_MspInit+0x30>)
 8000894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000898:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <HAL_MspInit+0x30>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_MspInit+0x30>)
 80008a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008a8:	f003 0302 	and.w	r3, r3, #2
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	58024400 	.word	0x58024400

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f8a9 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}

0800091e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Pin);
 8000922:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000926:	f000 fc1e 	bl	8001166 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000930:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800096c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000934:	f7ff fd7e 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000938:	f7ff fcce 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	@ (8000974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	@ (8000980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f001 fc35 	bl	80021d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fd7d 	bl	8000464 <main>
  bx  lr
 800096a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800096c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000970:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000974:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000978:	08002248 	.word	0x08002248
  ldr r2, =_sbss
 800097c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000980:	24000034 	.word	0x24000034

08000984 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC3_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098e:	2003      	movs	r0, #3
 8000990:	f000 f968 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000994:	f001 fa9a 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8000998:	4602      	mov	r2, r0
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_Init+0x68>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	f003 030f 	and.w	r3, r3, #15
 80009a4:	4913      	ldr	r1, [pc, #76]	@ (80009f4 <HAL_Init+0x6c>)
 80009a6:	5ccb      	ldrb	r3, [r1, r3]
 80009a8:	f003 031f 	and.w	r3, r3, #31
 80009ac:	fa22 f303 	lsr.w	r3, r2, r3
 80009b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_Init+0x68>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <HAL_Init+0x6c>)
 80009bc:	5cd3      	ldrb	r3, [r2, r3]
 80009be:	f003 031f 	and.w	r3, r3, #31
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	fa22 f303 	lsr.w	r3, r2, r3
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <HAL_Init+0x70>)
 80009ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009cc:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <HAL_Init+0x74>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d2:	200f      	movs	r0, #15
 80009d4:	f000 f814 	bl	8000a00 <HAL_InitTick>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e002      	b.n	80009e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009e2:	f7ff ff53 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	58024400 	.word	0x58024400
 80009f4:	08002230 	.word	0x08002230
 80009f8:	24000004 	.word	0x24000004
 80009fc:	24000000 	.word	0x24000000

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_InitTick+0x60>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e021      	b.n	8000a58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <HAL_InitTick+0x64>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_InitTick+0x60>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f94d 	bl	8000cca <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f917 	bl	8000c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <HAL_InitTick+0x68>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2400000c 	.word	0x2400000c
 8000a64:	24000000 	.word	0x24000000
 8000a68:	24000008 	.word	0x24000008

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	2400000c 	.word	0x2400000c
 8000a90:	24000030 	.word	0x24000030

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	24000030 	.word	0x24000030

08000aac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <HAL_GetREVID+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	0c1b      	lsrs	r3, r3, #16
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	5c001000 	.word	0x5c001000

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	05fa0000 	.word	0x05fa0000

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	@ (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	@ (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	@ (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	@ 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	@ 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c30:	d301      	bcc.n	8000c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00f      	b.n	8000c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <SysTick_Config+0x40>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3e:	210f      	movs	r1, #15
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f7ff ff8e 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <SysTick_Config+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <SysTick_Config+0x40>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff29 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff40 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff90 	bl	8000bb8 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5f 	bl	8000b64 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff33 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffa4 	bl	8000c20 <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ce8:	f3bf 8f5f 	dmb	sy
}
 8000cec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <HAL_MPU_Disable+0x28>)
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf2:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_MPU_Disable+0x28>)
 8000cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_MPU_Disable+0x2c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00
 8000d10:	e000ed90 	.word	0xe000ed90

08000d14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <HAL_MPU_Enable+0x38>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <HAL_MPU_Enable+0x3c>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2a:	4a09      	ldr	r2, [pc, #36]	@ (8000d50 <HAL_MPU_Enable+0x3c>)
 8000d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d30:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d32:	f3bf 8f4f 	dsb	sy
}
 8000d36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d38:	f3bf 8f6f 	isb	sy
}
 8000d3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed90 	.word	0xe000ed90
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	785a      	ldrb	r2, [r3, #1]
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <HAL_MPU_ConfigRegion+0x7c>)
 8000d62:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <HAL_MPU_ConfigRegion+0x7c>)
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	4a19      	ldr	r2, [pc, #100]	@ (8000dd0 <HAL_MPU_ConfigRegion+0x7c>)
 8000d6a:	f023 0301 	bic.w	r3, r3, #1
 8000d6e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000d70:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <HAL_MPU_ConfigRegion+0x7c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	7b1b      	ldrb	r3, [r3, #12]
 8000d7c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7adb      	ldrb	r3, [r3, #11]
 8000d82:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7a9b      	ldrb	r3, [r3, #10]
 8000d8a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7b5b      	ldrb	r3, [r3, #13]
 8000d92:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7b9b      	ldrb	r3, [r3, #14]
 8000d9a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7bdb      	ldrb	r3, [r3, #15]
 8000da2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000da4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7a5b      	ldrb	r3, [r3, #9]
 8000daa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000dac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7a1b      	ldrb	r3, [r3, #8]
 8000db2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000db4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000dbc:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000dbe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000dc0:	6113      	str	r3, [r2, #16]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed90 	.word	0xe000ed90

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	@ 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000de2:	4b89      	ldr	r3, [pc, #548]	@ (8001008 <HAL_GPIO_Init+0x234>)
 8000de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000de6:	e194      	b.n	8001112 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 8186 	beq.w	800110c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d005      	beq.n	8000e18 <HAL_GPIO_Init+0x44>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d130      	bne.n	8000e7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e4e:	2201      	movs	r2, #1
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	f003 0201 	and.w	r2, r3, #1
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d017      	beq.n	8000eb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d123      	bne.n	8000f0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	69b9      	ldr	r1, [r7, #24]
 8000f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0203 	and.w	r2, r3, #3
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 80e0 	beq.w	800110c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800100c <HAL_GPIO_Init+0x238>)
 8000f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f52:	4a2e      	ldr	r2, [pc, #184]	@ (800100c <HAL_GPIO_Init+0x238>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800100c <HAL_GPIO_Init+0x238>)
 8000f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6a:	4a29      	ldr	r2, [pc, #164]	@ (8001010 <HAL_GPIO_Init+0x23c>)
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a20      	ldr	r2, [pc, #128]	@ (8001014 <HAL_GPIO_Init+0x240>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d052      	beq.n	800103c <HAL_GPIO_Init+0x268>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a1f      	ldr	r2, [pc, #124]	@ (8001018 <HAL_GPIO_Init+0x244>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d031      	beq.n	8001002 <HAL_GPIO_Init+0x22e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800101c <HAL_GPIO_Init+0x248>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d02b      	beq.n	8000ffe <HAL_GPIO_Init+0x22a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8001020 <HAL_GPIO_Init+0x24c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d025      	beq.n	8000ffa <HAL_GPIO_Init+0x226>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001024 <HAL_GPIO_Init+0x250>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d01f      	beq.n	8000ff6 <HAL_GPIO_Init+0x222>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001028 <HAL_GPIO_Init+0x254>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d019      	beq.n	8000ff2 <HAL_GPIO_Init+0x21e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800102c <HAL_GPIO_Init+0x258>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a19      	ldr	r2, [pc, #100]	@ (8001030 <HAL_GPIO_Init+0x25c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <HAL_GPIO_Init+0x216>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a18      	ldr	r2, [pc, #96]	@ (8001034 <HAL_GPIO_Init+0x260>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	@ (8001038 <HAL_GPIO_Init+0x264>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_GPIO_Init+0x20e>
 8000fde:	2309      	movs	r3, #9
 8000fe0:	e02d      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	e02b      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	e029      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8000fea:	2307      	movs	r3, #7
 8000fec:	e027      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e025      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e023      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e021      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e01f      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e01d      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8001002:	2301      	movs	r3, #1
 8001004:	e01b      	b.n	800103e <HAL_GPIO_Init+0x26a>
 8001006:	bf00      	nop
 8001008:	58000080 	.word	0x58000080
 800100c:	58024400 	.word	0x58024400
 8001010:	58000400 	.word	0x58000400
 8001014:	58020000 	.word	0x58020000
 8001018:	58020400 	.word	0x58020400
 800101c:	58020800 	.word	0x58020800
 8001020:	58020c00 	.word	0x58020c00
 8001024:	58021000 	.word	0x58021000
 8001028:	58021400 	.word	0x58021400
 800102c:	58021800 	.word	0x58021800
 8001030:	58021c00 	.word	0x58021c00
 8001034:	58022000 	.word	0x58022000
 8001038:	58022400 	.word	0x58022400
 800103c:	2300      	movs	r3, #0
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	f002 0203 	and.w	r2, r2, #3
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4093      	lsls	r3, r2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104e:	4938      	ldr	r1, [pc, #224]	@ (8001130 <HAL_GPIO_Init+0x35c>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800108a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3301      	adds	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa22 f303 	lsr.w	r3, r2, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	f47f ae63 	bne.w	8000de8 <HAL_GPIO_Init+0x14>
  }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3724      	adds	r7, #36	@ 0x24
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	58000400 	.word	0x58000400

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001150:	e003      	b.n	800115a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	619a      	str	r2, [r3, #24]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001174:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001180:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fac7 	bl	8000720 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80011a4:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <HAL_HSEM_FastTake+0x2c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3320      	adds	r3, #32
 80011aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ae:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_HSEM_FastTake+0x30>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e000      	b.n	80011ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	58026400 	.word	0x58026400
 80011cc:	80000300 	.word	0x80000300

080011d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80011da:	4906      	ldr	r1, [pc, #24]	@ (80011f4 <HAL_HSEM_Release+0x24>)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	58026400 	.word	0x58026400

080011f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001200:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	2b06      	cmp	r3, #6
 800120a:	d00a      	beq.n	8001222 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	d001      	beq.n	800121e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e040      	b.n	80012a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e03e      	b.n	80012a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800122a:	491f      	ldr	r1, [pc, #124]	@ (80012a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4313      	orrs	r3, r2
 8001230:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001232:	f7ff fc2f 	bl	8000a94 <HAL_GetTick>
 8001236:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001238:	e009      	b.n	800124e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800123a:	f7ff fc2b 	bl	8000a94 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001248:	d901      	bls.n	800124e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e028      	b.n	80012a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800125a:	d1ee      	bne.n	800123a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b1e      	cmp	r3, #30
 8001260:	d008      	beq.n	8001274 <HAL_PWREx_ConfigSupply+0x7c>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b2e      	cmp	r3, #46	@ 0x2e
 8001266:	d005      	beq.n	8001274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b1d      	cmp	r3, #29
 800126c:	d002      	beq.n	8001274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b2d      	cmp	r3, #45	@ 0x2d
 8001272:	d114      	bne.n	800129e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001274:	f7ff fc0e 	bl	8000a94 <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800127a:	e009      	b.n	8001290 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800127c:	f7ff fc0a 	bl	8000a94 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800128a:	d901      	bls.n	8001290 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e007      	b.n	80012a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800129c:	d1ee      	bne.n	800127c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58024800 	.word	0x58024800

080012ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	@ 0x30
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f000 bc48 	b.w	8001b50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 8088 	beq.w	80013de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ce:	4b99      	ldr	r3, [pc, #612]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012d8:	4b96      	ldr	r3, [pc, #600]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80012de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e0:	2b10      	cmp	r3, #16
 80012e2:	d007      	beq.n	80012f4 <HAL_RCC_OscConfig+0x48>
 80012e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e6:	2b18      	cmp	r3, #24
 80012e8:	d111      	bne.n	800130e <HAL_RCC_OscConfig+0x62>
 80012ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d10c      	bne.n	800130e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d06d      	beq.n	80013dc <HAL_RCC_OscConfig+0x130>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d169      	bne.n	80013dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	f000 bc21 	b.w	8001b50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x7a>
 8001318:	4b86      	ldr	r3, [pc, #536]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a85      	ldr	r2, [pc, #532]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800131e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e02e      	b.n	8001384 <HAL_RCC_OscConfig+0xd8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x9c>
 800132e:	4b81      	ldr	r3, [pc, #516]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a80      	ldr	r2, [pc, #512]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b7e      	ldr	r3, [pc, #504]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7d      	ldr	r2, [pc, #500]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xd8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0xc0>
 8001352:	4b78      	ldr	r3, [pc, #480]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a77      	ldr	r2, [pc, #476]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b75      	ldr	r3, [pc, #468]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a74      	ldr	r2, [pc, #464]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xd8>
 800136c:	4b71      	ldr	r3, [pc, #452]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a70      	ldr	r2, [pc, #448]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a6d      	ldr	r2, [pc, #436]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fb82 	bl	8000a94 <HAL_GetTick>
 8001390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fb7e 	bl	8000a94 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e3d4      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a6:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xe8>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fb6e 	bl	8000a94 <HAL_GetTick>
 80013b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb6a 	bl	8000a94 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	@ 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e3c0      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ce:	4b59      	ldr	r3, [pc, #356]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x110>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80ca 	beq.w	8001580 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ec:	4b51      	ldr	r3, [pc, #324]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80013f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_RCC_OscConfig+0x166>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b18      	cmp	r3, #24
 8001406:	d156      	bne.n	80014b6 <HAL_RCC_OscConfig+0x20a>
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d151      	bne.n	80014b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001412:	4b48      	ldr	r3, [pc, #288]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x17e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e392      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800142a:	4b42      	ldr	r3, [pc, #264]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 0219 	bic.w	r2, r3, #25
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	493f      	ldr	r1, [pc, #252]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fb2a 	bl	8000a94 <HAL_GetTick>
 8001440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001444:	f7ff fb26 	bl	8000a94 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e37c      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001456:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	f7ff fb23 	bl	8000aac <HAL_GetREVID>
 8001466:	4603      	mov	r3, r0
 8001468:	f241 0203 	movw	r2, #4099	@ 0x1003
 800146c:	4293      	cmp	r3, r2
 800146e:	d817      	bhi.n	80014a0 <HAL_RCC_OscConfig+0x1f4>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b40      	cmp	r3, #64	@ 0x40
 8001476:	d108      	bne.n	800148a <HAL_RCC_OscConfig+0x1de>
 8001478:	4b2e      	ldr	r3, [pc, #184]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001480:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001486:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001488:	e07a      	b.n	8001580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	031b      	lsls	r3, r3, #12
 8001498:	4926      	ldr	r1, [pc, #152]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800149e:	e06f      	b.n	8001580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	061b      	lsls	r3, r3, #24
 80014ae:	4921      	ldr	r1, [pc, #132]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b4:	e064      	b.n	8001580 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d047      	beq.n	800154e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014be:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0219 	bic.w	r2, r3, #25
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	491a      	ldr	r1, [pc, #104]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fae0 	bl	8000a94 <HAL_GetTick>
 80014d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fadc 	bl	8000a94 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e332      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	f7ff fad9 	bl	8000aac <HAL_GetREVID>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001500:	4293      	cmp	r3, r2
 8001502:	d819      	bhi.n	8001538 <HAL_RCC_OscConfig+0x28c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	2b40      	cmp	r3, #64	@ 0x40
 800150a:	d108      	bne.n	800151e <HAL_RCC_OscConfig+0x272>
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001514:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151a:	6053      	str	r3, [r2, #4]
 800151c:	e030      	b.n	8001580 <HAL_RCC_OscConfig+0x2d4>
 800151e:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	031b      	lsls	r3, r3, #12
 800152c:	4901      	ldr	r1, [pc, #4]	@ (8001534 <HAL_RCC_OscConfig+0x288>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
 8001532:	e025      	b.n	8001580 <HAL_RCC_OscConfig+0x2d4>
 8001534:	58024400 	.word	0x58024400
 8001538:	4b9a      	ldr	r3, [pc, #616]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	4997      	ldr	r1, [pc, #604]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
 800154c:	e018      	b.n	8001580 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b95      	ldr	r3, [pc, #596]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a94      	ldr	r2, [pc, #592]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fa9b 	bl	8000a94 <HAL_GetTick>
 800155e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff fa97 	bl	8000a94 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e2ed      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001574:	4b8b      	ldr	r3, [pc, #556]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a9 	beq.w	80016e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158e:	4b85      	ldr	r3, [pc, #532]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001596:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001598:	4b82      	ldr	r3, [pc, #520]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800159a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d007      	beq.n	80015b4 <HAL_RCC_OscConfig+0x308>
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b18      	cmp	r3, #24
 80015a8:	d13a      	bne.n	8001620 <HAL_RCC_OscConfig+0x374>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d135      	bne.n	8001620 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015b4:	4b7b      	ldr	r3, [pc, #492]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x320>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	2b80      	cmp	r3, #128	@ 0x80
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e2c1      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015cc:	f7ff fa6e 	bl	8000aac <HAL_GetREVID>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d817      	bhi.n	800160a <HAL_RCC_OscConfig+0x35e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d108      	bne.n	80015f4 <HAL_RCC_OscConfig+0x348>
 80015e2:	4b70      	ldr	r3, [pc, #448]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80015ea:	4a6e      	ldr	r2, [pc, #440]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80015ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015f2:	e075      	b.n	80016e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015f4:	4b6b      	ldr	r3, [pc, #428]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	069b      	lsls	r3, r3, #26
 8001602:	4968      	ldr	r1, [pc, #416]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001608:	e06a      	b.n	80016e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800160a:	4b66      	ldr	r3, [pc, #408]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	061b      	lsls	r3, r3, #24
 8001618:	4962      	ldr	r1, [pc, #392]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800161a:	4313      	orrs	r3, r2
 800161c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800161e:	e05f      	b.n	80016e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d042      	beq.n	80016ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001628:	4b5e      	ldr	r3, [pc, #376]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a5d      	ldr	r2, [pc, #372]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800162e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fa2e 	bl	8000a94 <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800163c:	f7ff fa2a 	bl	8000a94 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e280      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800164e:	4b55      	ldr	r3, [pc, #340]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800165a:	f7ff fa27 	bl	8000aac <HAL_GetREVID>
 800165e:	4603      	mov	r3, r0
 8001660:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001664:	4293      	cmp	r3, r2
 8001666:	d817      	bhi.n	8001698 <HAL_RCC_OscConfig+0x3ec>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	2b20      	cmp	r3, #32
 800166e:	d108      	bne.n	8001682 <HAL_RCC_OscConfig+0x3d6>
 8001670:	4b4c      	ldr	r3, [pc, #304]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001678:	4a4a      	ldr	r2, [pc, #296]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800167a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800167e:	6053      	str	r3, [r2, #4]
 8001680:	e02e      	b.n	80016e0 <HAL_RCC_OscConfig+0x434>
 8001682:	4b48      	ldr	r3, [pc, #288]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	069b      	lsls	r3, r3, #26
 8001690:	4944      	ldr	r1, [pc, #272]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
 8001696:	e023      	b.n	80016e0 <HAL_RCC_OscConfig+0x434>
 8001698:	4b42      	ldr	r3, [pc, #264]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	493f      	ldr	r1, [pc, #252]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60cb      	str	r3, [r1, #12]
 80016ac:	e018      	b.n	80016e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80016ae:	4b3d      	ldr	r3, [pc, #244]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a3c      	ldr	r2, [pc, #240]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80016b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff f9eb 	bl	8000a94 <HAL_GetTick>
 80016be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016c2:	f7ff f9e7 	bl	8000a94 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e23d      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016d4:	4b33      	ldr	r3, [pc, #204]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d036      	beq.n	800175a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d019      	beq.n	8001728 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f4:	4b2b      	ldr	r3, [pc, #172]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80016f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f8:	4a2a      	ldr	r2, [pc, #168]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff f9c8 	bl	8000a94 <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff f9c4 	bl	8000a94 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e21a      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800171c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x45c>
 8001726:	e018      	b.n	800175a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800172a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800172c:	4a1d      	ldr	r2, [pc, #116]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff f9ae 	bl	8000a94 <HAL_GetTick>
 8001738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff f9aa 	bl	8000a94 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e200      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b00      	cmp	r3, #0
 8001764:	d039      	beq.n	80017da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01c      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a0c      	ldr	r2, [pc, #48]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800177a:	f7ff f98b 	bl	8000a94 <HAL_GetTick>
 800177e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001782:	f7ff f987 	bl	8000a94 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e1dd      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <HAL_RCC_OscConfig+0x4f8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x4d6>
 80017a0:	e01b      	b.n	80017da <HAL_RCC_OscConfig+0x52e>
 80017a2:	bf00      	nop
 80017a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017a8:	4b9b      	ldr	r3, [pc, #620]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a9a      	ldr	r2, [pc, #616]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80017ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f96e 	bl	8000a94 <HAL_GetTick>
 80017b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017bc:	f7ff f96a 	bl	8000a94 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1c0      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017ce:	4b92      	ldr	r3, [pc, #584]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8081 	beq.w	80018ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80017e8:	4b8c      	ldr	r3, [pc, #560]	@ (8001a1c <HAL_RCC_OscConfig+0x770>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a8b      	ldr	r2, [pc, #556]	@ (8001a1c <HAL_RCC_OscConfig+0x770>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80017f4:	f7ff f94e 	bl	8000a94 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fc:	f7ff f94a 	bl	8000a94 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	@ 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e1a0      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800180e:	4b83      	ldr	r3, [pc, #524]	@ (8001a1c <HAL_RCC_OscConfig+0x770>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d106      	bne.n	8001830 <HAL_RCC_OscConfig+0x584>
 8001822:	4b7d      	ldr	r3, [pc, #500]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001826:	4a7c      	ldr	r2, [pc, #496]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6713      	str	r3, [r2, #112]	@ 0x70
 800182e:	e02d      	b.n	800188c <HAL_RCC_OscConfig+0x5e0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10c      	bne.n	8001852 <HAL_RCC_OscConfig+0x5a6>
 8001838:	4b77      	ldr	r3, [pc, #476]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183c:	4a76      	ldr	r2, [pc, #472]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	@ 0x70
 8001844:	4b74      	ldr	r3, [pc, #464]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001848:	4a73      	ldr	r2, [pc, #460]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 800184a:	f023 0304 	bic.w	r3, r3, #4
 800184e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001850:	e01c      	b.n	800188c <HAL_RCC_OscConfig+0x5e0>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b05      	cmp	r3, #5
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x5c8>
 800185a:	4b6f      	ldr	r3, [pc, #444]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185e:	4a6e      	ldr	r2, [pc, #440]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6713      	str	r3, [r2, #112]	@ 0x70
 8001866:	4b6c      	ldr	r3, [pc, #432]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186a:	4a6b      	ldr	r2, [pc, #428]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6713      	str	r3, [r2, #112]	@ 0x70
 8001872:	e00b      	b.n	800188c <HAL_RCC_OscConfig+0x5e0>
 8001874:	4b68      	ldr	r3, [pc, #416]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001878:	4a67      	ldr	r2, [pc, #412]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001880:	4b65      	ldr	r3, [pc, #404]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001884:	4a64      	ldr	r2, [pc, #400]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001886:	f023 0304 	bic.w	r3, r3, #4
 800188a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d015      	beq.n	80018c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff f8fe 	bl	8000a94 <HAL_GetTick>
 8001898:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff f8fa 	bl	8000a94 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e14e      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018b2:	4b59      	ldr	r3, [pc, #356]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0ee      	beq.n	800189c <HAL_RCC_OscConfig+0x5f0>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff f8e8 	bl	8000a94 <HAL_GetTick>
 80018c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018c6:	e00a      	b.n	80018de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff f8e4 	bl	8000a94 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e138      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018de:	4b4e      	ldr	r3, [pc, #312]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ee      	bne.n	80018c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 812d 	beq.w	8001b4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018f4:	4b48      	ldr	r3, [pc, #288]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018fc:	2b18      	cmp	r3, #24
 80018fe:	f000 80bd 	beq.w	8001a7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	2b02      	cmp	r3, #2
 8001908:	f040 809e 	bne.w	8001a48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190c:	4b42      	ldr	r3, [pc, #264]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a41      	ldr	r2, [pc, #260]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f8bc 	bl	8000a94 <HAL_GetTick>
 800191c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f8b8 	bl	8000a94 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e10e      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001932:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193e:	4b36      	ldr	r3, [pc, #216]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001942:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <HAL_RCC_OscConfig+0x774>)
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	430a      	orrs	r2, r1
 8001952:	4931      	ldr	r1, [pc, #196]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001954:	4313      	orrs	r3, r2
 8001956:	628b      	str	r3, [r1, #40]	@ 0x28
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	3b01      	subs	r3, #1
 800195e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001966:	3b01      	subs	r3, #1
 8001968:	025b      	lsls	r3, r3, #9
 800196a:	b29b      	uxth	r3, r3
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001972:	3b01      	subs	r3, #1
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001980:	3b01      	subs	r3, #1
 8001982:	061b      	lsls	r3, r3, #24
 8001984:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001988:	4923      	ldr	r1, [pc, #140]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 800198a:	4313      	orrs	r3, r2
 800198c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800198e:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001992:	4a21      	ldr	r2, [pc, #132]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800199a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199e:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <HAL_RCC_OscConfig+0x778>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019a6:	00d2      	lsls	r2, r2, #3
 80019a8:	491b      	ldr	r1, [pc, #108]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	f023 020c 	bic.w	r2, r3, #12
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4917      	ldr	r1, [pc, #92]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c4:	f023 0202 	bic.w	r2, r3, #2
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019cc:	4912      	ldr	r1, [pc, #72]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d6:	4a10      	ldr	r2, [pc, #64]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80019f6:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fa:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <HAL_RCC_OscConfig+0x76c>)
 8001a08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f841 	bl	8000a94 <HAL_GetTick>
 8001a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a14:	e011      	b.n	8001a3a <HAL_RCC_OscConfig+0x78e>
 8001a16:	bf00      	nop
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58024800 	.word	0x58024800
 8001a20:	fffffc0c 	.word	0xfffffc0c
 8001a24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f834 	bl	8000a94 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e08a      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a3a:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x77c>
 8001a46:	e082      	b.n	8001b4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b43      	ldr	r3, [pc, #268]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a42      	ldr	r2, [pc, #264]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f81e 	bl	8000a94 <HAL_GetTick>
 8001a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f81a 	bl	8000a94 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e070      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x7b0>
 8001a7a:	e068      	b.n	8001b4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a7c:	4b36      	ldr	r3, [pc, #216]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a82:	4b35      	ldr	r3, [pc, #212]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d031      	beq.n	8001af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0203 	and.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d12a      	bne.n	8001af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d122      	bne.n	8001af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d11a      	bne.n	8001af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	0a5b      	lsrs	r3, r3, #9
 8001ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d111      	bne.n	8001af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d108      	bne.n	8001af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	0e1b      	lsrs	r3, r3, #24
 8001ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e02b      	b.n	8001b50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001af8:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d01f      	beq.n	8001b4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b12:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b1a:	f7fe ffbb 	bl	8000a94 <HAL_GetTick>
 8001b1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001b20:	bf00      	nop
 8001b22:	f7fe ffb7 	bl	8000a94 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d0f9      	beq.n	8001b22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_RCC_OscConfig+0x8b0>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b3a:	00d2      	lsls	r2, r2, #3
 8001b3c:	4906      	ldr	r1, [pc, #24]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b46:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <HAL_RCC_OscConfig+0x8ac>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3730      	adds	r7, #48	@ 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	ffff0007 	.word	0xffff0007

08001b60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e19c      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b8a      	ldr	r3, [pc, #552]	@ (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d910      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b87      	ldr	r3, [pc, #540]	@ (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 020f 	bic.w	r2, r3, #15
 8001b8a:	4985      	ldr	r1, [pc, #532]	@ (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b83      	ldr	r3, [pc, #524]	@ (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e184      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d908      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bc0:	4b78      	ldr	r3, [pc, #480]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	4975      	ldr	r1, [pc, #468]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d010      	beq.n	8001c00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	4b70      	ldr	r3, [pc, #448]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bee:	4b6d      	ldr	r3, [pc, #436]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	496a      	ldr	r1, [pc, #424]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	4b64      	ldr	r3, [pc, #400]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d908      	bls.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c1c:	4b61      	ldr	r3, [pc, #388]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	495e      	ldr	r1, [pc, #376]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	4b59      	ldr	r3, [pc, #356]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d908      	bls.n	8001c5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c4a:	4b56      	ldr	r3, [pc, #344]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4953      	ldr	r1, [pc, #332]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d908      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b4a      	ldr	r3, [pc, #296]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f023 020f 	bic.w	r2, r3, #15
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4947      	ldr	r1, [pc, #284]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d055      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c96:	4b43      	ldr	r3, [pc, #268]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4940      	ldr	r1, [pc, #256]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d121      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0f6      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cc8:	4b36      	ldr	r3, [pc, #216]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d115      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0ea      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ce0:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0de      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0d6      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d00:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f023 0207 	bic.w	r2, r3, #7
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4925      	ldr	r1, [pc, #148]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d12:	f7fe febf 	bl	8000a94 <HAL_GetTick>
 8001d16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1a:	f7fe febb 	bl	8000a94 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0be      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d30:	4b1c      	ldr	r3, [pc, #112]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d1eb      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d208      	bcs.n	8001d70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5e:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f023 020f 	bic.w	r2, r3, #15
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	490e      	ldr	r1, [pc, #56]	@ (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d214      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 020f 	bic.w	r2, r3, #15
 8001d86:	4906      	ldr	r1, [pc, #24]	@ (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e086      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
 8001da0:	52002000 	.word	0x52002000
 8001da4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d010      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d208      	bcs.n	8001dd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	4939      	ldr	r1, [pc, #228]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	4b34      	ldr	r3, [pc, #208]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d208      	bcs.n	8001e04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001df2:	4b31      	ldr	r3, [pc, #196]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	492e      	ldr	r1, [pc, #184]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d010      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d208      	bcs.n	8001e32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e20:	4b25      	ldr	r3, [pc, #148]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4922      	ldr	r1, [pc, #136]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d010      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d208      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4917      	ldr	r1, [pc, #92]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e60:	f000 f834 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b14      	ldr	r3, [pc, #80]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	4912      	ldr	r1, [pc, #72]	@ (8001ebc <HAL_RCC_ClockConfig+0x35c>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	4a0d      	ldr	r2, [pc, #52]	@ (8001ebc <HAL_RCC_ClockConfig+0x35c>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_RCC_ClockConfig+0x360>)
 8001e96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <HAL_RCC_ClockConfig+0x364>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <HAL_RCC_ClockConfig+0x368>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fdac 	bl	8000a00 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	08002230 	.word	0x08002230
 8001ec0:	24000004 	.word	0x24000004
 8001ec4:	24000000 	.word	0x24000000
 8001ec8:	24000008 	.word	0x24000008

08001ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed2:	4bb3      	ldr	r3, [pc, #716]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eda:	2b18      	cmp	r3, #24
 8001edc:	f200 8155 	bhi.w	800218a <HAL_RCC_GetSysClockFreq+0x2be>
 8001ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001f4d 	.word	0x08001f4d
 8001eec:	0800218b 	.word	0x0800218b
 8001ef0:	0800218b 	.word	0x0800218b
 8001ef4:	0800218b 	.word	0x0800218b
 8001ef8:	0800218b 	.word	0x0800218b
 8001efc:	0800218b 	.word	0x0800218b
 8001f00:	0800218b 	.word	0x0800218b
 8001f04:	0800218b 	.word	0x0800218b
 8001f08:	08001f73 	.word	0x08001f73
 8001f0c:	0800218b 	.word	0x0800218b
 8001f10:	0800218b 	.word	0x0800218b
 8001f14:	0800218b 	.word	0x0800218b
 8001f18:	0800218b 	.word	0x0800218b
 8001f1c:	0800218b 	.word	0x0800218b
 8001f20:	0800218b 	.word	0x0800218b
 8001f24:	0800218b 	.word	0x0800218b
 8001f28:	08001f79 	.word	0x08001f79
 8001f2c:	0800218b 	.word	0x0800218b
 8001f30:	0800218b 	.word	0x0800218b
 8001f34:	0800218b 	.word	0x0800218b
 8001f38:	0800218b 	.word	0x0800218b
 8001f3c:	0800218b 	.word	0x0800218b
 8001f40:	0800218b 	.word	0x0800218b
 8001f44:	0800218b 	.word	0x0800218b
 8001f48:	08001f7f 	.word	0x08001f7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f4c:	4b94      	ldr	r3, [pc, #592]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d009      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f58:	4b91      	ldr	r3, [pc, #580]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	4a90      	ldr	r2, [pc, #576]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001f6a:	e111      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f6c:	4b8d      	ldr	r3, [pc, #564]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f6e:	61bb      	str	r3, [r7, #24]
      break;
 8001f70:	e10e      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001f72:	4b8d      	ldr	r3, [pc, #564]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f74:	61bb      	str	r3, [r7, #24]
      break;
 8001f76:	e10b      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001f78:	4b8c      	ldr	r3, [pc, #560]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f7a:	61bb      	str	r3, [r7, #24]
      break;
 8001f7c:	e108      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f7e:	4b88      	ldr	r3, [pc, #544]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f88:	4b85      	ldr	r3, [pc, #532]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f94:	4b82      	ldr	r3, [pc, #520]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001f9e:	4b80      	ldr	r3, [pc, #512]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa2:	08db      	lsrs	r3, r3, #3
 8001fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80e1 	beq.w	8002184 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	f000 8083 	beq.w	80020d0 <HAL_RCC_GetSysClockFreq+0x204>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	f200 80a1 	bhi.w	8002114 <HAL_RCC_GetSysClockFreq+0x248>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x114>
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d056      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001fde:	e099      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02d      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fec:	4b6c      	ldr	r3, [pc, #432]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	4a6b      	ldr	r2, [pc, #428]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002016:	4b62      	ldr	r3, [pc, #392]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002026:	ed97 6a02 	vldr	s12, [r7, #8]
 800202a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800202e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800203a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002046:	e087      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002052:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80021b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800205a:	4b51      	ldr	r3, [pc, #324]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800206a:	ed97 6a02 	vldr	s12, [r7, #8]
 800206e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800207a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800207e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800208a:	e065      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002096:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80021b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800209a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209e:	4b40      	ldr	r3, [pc, #256]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80020b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020ce:	e043      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80021bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80020de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020e2:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800210a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002112:	e021      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80021b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002126:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002136:	ed97 6a02 	vldr	s12, [r7, #8]
 800213a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800213e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800214a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002156:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	0a5b      	lsrs	r3, r3, #9
 800215e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002162:	3301      	adds	r3, #1
 8002164:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002170:	edd7 6a07 	vldr	s13, [r7, #28]
 8002174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800217c:	ee17 3a90 	vmov	r3, s15
 8002180:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
      break;
 8002188:	e002      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800218c:	61bb      	str	r3, [r7, #24]
      break;
 800218e:	bf00      	nop
  }

  return sysclockfreq;
 8002190:	69bb      	ldr	r3, [r7, #24]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	@ 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	58024400 	.word	0x58024400
 80021a4:	03d09000 	.word	0x03d09000
 80021a8:	003d0900 	.word	0x003d0900
 80021ac:	017d7840 	.word	0x017d7840
 80021b0:	46000000 	.word	0x46000000
 80021b4:	4c742400 	.word	0x4c742400
 80021b8:	4a742400 	.word	0x4a742400
 80021bc:	4bbebc20 	.word	0x4bbebc20

080021c0 <memset>:
 80021c0:	4402      	add	r2, r0
 80021c2:	4603      	mov	r3, r0
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d100      	bne.n	80021ca <memset+0xa>
 80021c8:	4770      	bx	lr
 80021ca:	f803 1b01 	strb.w	r1, [r3], #1
 80021ce:	e7f9      	b.n	80021c4 <memset+0x4>

080021d0 <__libc_init_array>:
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	4d0d      	ldr	r5, [pc, #52]	@ (8002208 <__libc_init_array+0x38>)
 80021d4:	4c0d      	ldr	r4, [pc, #52]	@ (800220c <__libc_init_array+0x3c>)
 80021d6:	1b64      	subs	r4, r4, r5
 80021d8:	10a4      	asrs	r4, r4, #2
 80021da:	2600      	movs	r6, #0
 80021dc:	42a6      	cmp	r6, r4
 80021de:	d109      	bne.n	80021f4 <__libc_init_array+0x24>
 80021e0:	4d0b      	ldr	r5, [pc, #44]	@ (8002210 <__libc_init_array+0x40>)
 80021e2:	4c0c      	ldr	r4, [pc, #48]	@ (8002214 <__libc_init_array+0x44>)
 80021e4:	f000 f818 	bl	8002218 <_init>
 80021e8:	1b64      	subs	r4, r4, r5
 80021ea:	10a4      	asrs	r4, r4, #2
 80021ec:	2600      	movs	r6, #0
 80021ee:	42a6      	cmp	r6, r4
 80021f0:	d105      	bne.n	80021fe <__libc_init_array+0x2e>
 80021f2:	bd70      	pop	{r4, r5, r6, pc}
 80021f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f8:	4798      	blx	r3
 80021fa:	3601      	adds	r6, #1
 80021fc:	e7ee      	b.n	80021dc <__libc_init_array+0xc>
 80021fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002202:	4798      	blx	r3
 8002204:	3601      	adds	r6, #1
 8002206:	e7f2      	b.n	80021ee <__libc_init_array+0x1e>
 8002208:	08002240 	.word	0x08002240
 800220c:	08002240 	.word	0x08002240
 8002210:	08002240 	.word	0x08002240
 8002214:	08002244 	.word	0x08002244

08002218 <_init>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	bf00      	nop
 800221c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221e:	bc08      	pop	{r3}
 8002220:	469e      	mov	lr, r3
 8002222:	4770      	bx	lr

08002224 <_fini>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr
