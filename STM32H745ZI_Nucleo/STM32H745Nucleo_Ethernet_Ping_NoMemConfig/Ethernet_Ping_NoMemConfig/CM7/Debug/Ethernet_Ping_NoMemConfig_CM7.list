
Ethernet_Ping_NoMemConfig_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f118  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003208  0800f3b8  0800f3b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125c0  080125c0  00018ad0  2**0
                  CONTENTS
  4 .ARM          00000008  080125c0  080125c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125c8  080125c8  00018ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125c8  080125c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080125cc  080125cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  24000000  080125d0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .Rx_PoolSection 00004983  2400008c  0801265c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDecripSection 00000060  24004a10  08016fdf  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDecripSection 00000060  24004a70  0801703f  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00003348  24004ad0  0801709f  00018ad0  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  24007e18  0801709f  00018e18  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00018ad0  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001d0a1  00000000  00000000  00018afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005124  00000000  00000000  00035b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000014b8  00000000  00000000  0003acc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000105a  00000000  00000000  0003c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000452db  00000000  00000000  0003d1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00025b7d  00000000  00000000  000824b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018acb2  00000000  00000000  000a8032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00232ce4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005b50  00000000  00000000  00232d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000a8  00000000  00000000  00238878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004ad0 	.word	0x24004ad0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f3a0 	.word	0x0800f3a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004ad4 	.word	0x24004ad4
 80002dc:	0800f3a0 	.word	0x0800f3a0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b49      	ldr	r3, [pc, #292]	@ (80004ac <SystemInit+0x12c>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a48      	ldr	r2, [pc, #288]	@ (80004ac <SystemInit+0x12c>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b45      	ldr	r3, [pc, #276]	@ (80004ac <SystemInit+0x12c>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a44      	ldr	r2, [pc, #272]	@ (80004ac <SystemInit+0x12c>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b43      	ldr	r3, [pc, #268]	@ (80004b0 <SystemInit+0x130>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b40      	ldr	r3, [pc, #256]	@ (80004b0 <SystemInit+0x130>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <SystemInit+0x130>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b3d      	ldr	r3, [pc, #244]	@ (80004b4 <SystemInit+0x134>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a3c      	ldr	r2, [pc, #240]	@ (80004b4 <SystemInit+0x134>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b3a      	ldr	r3, [pc, #232]	@ (80004b4 <SystemInit+0x134>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b39      	ldr	r3, [pc, #228]	@ (80004b4 <SystemInit+0x134>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4938      	ldr	r1, [pc, #224]	@ (80004b4 <SystemInit+0x134>)
 80003d4:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <SystemInit+0x138>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b35      	ldr	r3, [pc, #212]	@ (80004b0 <SystemInit+0x130>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b32      	ldr	r3, [pc, #200]	@ (80004b0 <SystemInit+0x130>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a30      	ldr	r2, [pc, #192]	@ (80004b0 <SystemInit+0x130>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b2f      	ldr	r3, [pc, #188]	@ (80004b4 <SystemInit+0x134>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <SystemInit+0x134>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b2c      	ldr	r3, [pc, #176]	@ (80004b4 <SystemInit+0x134>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <SystemInit+0x134>)
 800040a:	4a2c      	ldr	r2, [pc, #176]	@ (80004bc <SystemInit+0x13c>)
 800040c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b29      	ldr	r3, [pc, #164]	@ (80004b4 <SystemInit+0x134>)
 8000410:	4a2b      	ldr	r2, [pc, #172]	@ (80004c0 <SystemInit+0x140>)
 8000412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <SystemInit+0x134>)
 8000416:	4a2b      	ldr	r2, [pc, #172]	@ (80004c4 <SystemInit+0x144>)
 8000418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b26      	ldr	r3, [pc, #152]	@ (80004b4 <SystemInit+0x134>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b24      	ldr	r3, [pc, #144]	@ (80004b4 <SystemInit+0x134>)
 8000422:	4a28      	ldr	r2, [pc, #160]	@ (80004c4 <SystemInit+0x144>)
 8000424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <SystemInit+0x134>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <SystemInit+0x134>)
 800042e:	4a25      	ldr	r2, [pc, #148]	@ (80004c4 <SystemInit+0x144>)
 8000430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <SystemInit+0x134>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <SystemInit+0x134>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a1d      	ldr	r2, [pc, #116]	@ (80004b4 <SystemInit+0x134>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <SystemInit+0x134>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <SystemInit+0x148>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800044e:	4a1e      	ldr	r2, [pc, #120]	@ (80004c8 <SystemInit+0x148>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000454:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <SystemInit+0x14c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b1d      	ldr	r3, [pc, #116]	@ (80004d0 <SystemInit+0x150>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <SystemInit+0x154>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800046a:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <SystemInit+0x134>)
 800046c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000474:	2b00      	cmp	r3, #0
 8000476:	d113      	bne.n	80004a0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000478:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <SystemInit+0x134>)
 800047a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800047e:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <SystemInit+0x134>)
 8000480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000484:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <SystemInit+0x158>)
 800048a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800048e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000490:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <SystemInit+0x134>)
 8000492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000496:	4a07      	ldr	r2, [pc, #28]	@ (80004b4 <SystemInit+0x134>)
 8000498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800049c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	52002000 	.word	0x52002000
 80004b4:	58024400 	.word	0x58024400
 80004b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004bc:	02020200 	.word	0x02020200
 80004c0:	01ff0000 	.word	0x01ff0000
 80004c4:	01010280 	.word	0x01010280
 80004c8:	580000c0 	.word	0x580000c0
 80004cc:	5c001000 	.word	0x5c001000
 80004d0:	ffff0000 	.word	0xffff0000
 80004d4:	51008108 	.word	0x51008108
 80004d8:	52004000 	.word	0x52004000

080004dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a08      	ldr	r2, [pc, #32]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004e6:	f023 0302 	bic.w	r3, r3, #2
 80004ea:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80004ec:	bf00      	nop
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	58024800 	.word	0x58024800

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000512:	f000 f99f 	bl	8000854 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000516:	4b5a      	ldr	r3, [pc, #360]	@ (8000680 <main+0x174>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800051e:	2b00      	cmp	r3, #0
 8000520:	d11b      	bne.n	800055a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000522:	f3bf 8f4f 	dsb	sy
}
 8000526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000528:	f3bf 8f6f 	isb	sy
}
 800052c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800052e:	4b54      	ldr	r3, [pc, #336]	@ (8000680 <main+0x174>)
 8000530:	2200      	movs	r2, #0
 8000532:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000536:	f3bf 8f4f 	dsb	sy
}
 800053a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800053c:	f3bf 8f6f 	isb	sy
}
 8000540:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000542:	4b4f      	ldr	r3, [pc, #316]	@ (8000680 <main+0x174>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a4e      	ldr	r2, [pc, #312]	@ (8000680 <main+0x174>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800054c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800054e:	f3bf 8f4f 	dsb	sy
}
 8000552:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000554:	f3bf 8f6f 	isb	sy
}
 8000558:	e000      	b.n	800055c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800055a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800055c:	4b48      	ldr	r3, [pc, #288]	@ (8000680 <main+0x174>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000564:	2b00      	cmp	r3, #0
 8000566:	d138      	bne.n	80005da <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000568:	4b45      	ldr	r3, [pc, #276]	@ (8000680 <main+0x174>)
 800056a:	2200      	movs	r2, #0
 800056c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000570:	f3bf 8f4f 	dsb	sy
}
 8000574:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000576:	4b42      	ldr	r3, [pc, #264]	@ (8000680 <main+0x174>)
 8000578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800057c:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	0b5b      	lsrs	r3, r3, #13
 8000582:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000586:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	08db      	lsrs	r3, r3, #3
 800058c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000590:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	015a      	lsls	r2, r3, #5
 8000596:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800059a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a0:	4937      	ldr	r1, [pc, #220]	@ (8000680 <main+0x174>)
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	60ba      	str	r2, [r7, #8]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1ef      	bne.n	8000592 <main+0x86>
    } while(sets-- != 0U);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	1e5a      	subs	r2, r3, #1
 80005b6:	60fa      	str	r2, [r7, #12]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1e5      	bne.n	8000588 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80005bc:	f3bf 8f4f 	dsb	sy
}
 80005c0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <main+0x174>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000680 <main+0x174>)
 80005c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ce:	f3bf 8f4f 	dsb	sy
}
 80005d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d4:	f3bf 8f6f 	isb	sy
}
 80005d8:	e000      	b.n	80005dc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005da:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80005dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005e0:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80005e2:	bf00      	nop
 80005e4:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <main+0x178>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d004      	beq.n	80005fa <main+0xee>
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	1e5a      	subs	r2, r3, #1
 80005f4:	617a      	str	r2, [r7, #20]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	dcf4      	bgt.n	80005e4 <main+0xd8>
  if ( timeout < 0 )
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da01      	bge.n	8000604 <main+0xf8>
  {
  Error_Handler();
 8000600:	f000 f955 	bl	80008ae <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fba0 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f842 	bl	8000690 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <main+0x178>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	4a1c      	ldr	r2, [pc, #112]	@ (8000684 <main+0x178>)
 8000614:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800061c:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <main+0x178>)
 800061e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800062a:	2000      	movs	r0, #0
 800062c:	f002 fb64 	bl	8002cf8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f002 fb7a 	bl	8002d2c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800063c:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800063e:	bf00      	nop
 8000640:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <main+0x178>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d104      	bne.n	8000656 <main+0x14a>
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	1e5a      	subs	r2, r3, #1
 8000650:	617a      	str	r2, [r7, #20]
 8000652:	2b00      	cmp	r3, #0
 8000654:	dcf4      	bgt.n	8000640 <main+0x134>
if ( timeout < 0 )
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	2b00      	cmp	r3, #0
 800065a:	da01      	bge.n	8000660 <main+0x154>
{
Error_Handler();
 800065c:	f000 f927 	bl	80008ae <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 f894 	bl	800078c <MX_GPIO_Init>
  MX_LWIP_Init();
 8000664:	f003 fb8a 	bl	8003d7c <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8000668:	4807      	ldr	r0, [pc, #28]	@ (8000688 <main+0x17c>)
 800066a:	f003 fdf3 	bl	8004254 <ethernetif_input>

	  sys_check_timeouts();
 800066e:	f00d fc91 	bl	800df94 <sys_check_timeouts>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000672:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <main+0x180>)
 8000678:	f002 fb23 	bl	8002cc2 <HAL_GPIO_TogglePin>
	  ethernetif_input(&gnetif);
 800067c:	bf00      	nop
 800067e:	e7f3      	b.n	8000668 <main+0x15c>
 8000680:	e000ed00 	.word	0xe000ed00
 8000684:	58024400 	.word	0x58024400
 8000688:	24004af4 	.word	0x24004af4
 800068c:	58020400 	.word	0x58020400

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	@ 0x70
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069a:	224c      	movs	r2, #76	@ 0x4c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00d ffd9 	bl	800e656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2220      	movs	r2, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f00d ffd3 	bl	800e656 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006b0:	2004      	movs	r0, #4
 80006b2:	f002 fb4f 	bl	8002d54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b32      	ldr	r3, [pc, #200]	@ (8000784 <SystemClock_Config+0xf4>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006be:	4a31      	ldr	r2, [pc, #196]	@ (8000784 <SystemClock_Config+0xf4>)
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000784 <SystemClock_Config+0xf4>)
 80006c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <SystemClock_Config+0xf8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000788 <SystemClock_Config+0xf8>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <SystemClock_Config+0xf8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ec:	bf00      	nop
 80006ee:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <SystemClock_Config+0xf8>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006fa:	d1f8      	bne.n	80006ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000700:	2301      	movs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2340      	movs	r3, #64	@ 0x40
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000714:	2319      	movs	r3, #25
 8000716:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000724:	230c      	movs	r3, #12
 8000726:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000728:	2300      	movs	r3, #0
 800072a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fb67 	bl	8002e08 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000740:	f000 f8b5 	bl	80008ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	233f      	movs	r3, #63	@ 0x3f
 8000746:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2303      	movs	r3, #3
 800074a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000754:	2340      	movs	r3, #64	@ 0x40
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000758:	2340      	movs	r3, #64	@ 0x40
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800075c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000760:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000762:	2340      	movs	r3, #64	@ 0x40
 8000764:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2104      	movs	r1, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f002 ffa6 	bl	80036bc <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000776:	f000 f89a 	bl	80008ae <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3770      	adds	r7, #112	@ 0x70
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58000400 	.word	0x58000400
 8000788:	58024800 	.word	0x58024800

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a8:	4a28      	ldr	r2, [pc, #160]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b2:	4b26      	ldr	r3, [pc, #152]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c6:	4a21      	ldr	r2, [pc, #132]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d0:	4b1e      	ldr	r3, [pc, #120]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e4:	4a19      	ldr	r2, [pc, #100]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_GPIO_Init+0xc0>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000802:	4a12      	ldr	r2, [pc, #72]	@ (800084c <MX_GPIO_Init+0xc0>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_GPIO_Init+0xc0>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000820:	480b      	ldr	r0, [pc, #44]	@ (8000850 <MX_GPIO_Init+0xc4>)
 8000822:	f002 fa35 	bl	8002c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000826:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_GPIO_Init+0xc4>)
 8000840:	f002 f876 	bl	8002930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	@ 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	58024400 	.word	0x58024400
 8000850:	58020400 	.word	0x58020400

08000854 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000866:	f000 fc05 	bl	8001074 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800086a:	2301      	movs	r3, #1
 800086c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800086e:	2300      	movs	r3, #0
 8000870:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000872:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000876:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000878:	230d      	movs	r3, #13
 800087a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800087c:	2300      	movs	r3, #0
 800087e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000880:	2301      	movs	r3, #1
 8000882:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000884:	2303      	movs	r3, #3
 8000886:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000888:	2301      	movs	r3, #1
 800088a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800088c:	2301      	movs	r3, #1
 800088e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000898:	463b      	mov	r3, r7
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fc22 	bl	80010e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008a0:	2004      	movs	r0, #4
 80008a2:	f000 fbff 	bl	80010a4 <HAL_MPU_Enable>

}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008b2:	b672      	cpsid	i
}
 80008b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b6:	bf00      	nop
 80008b8:	e7fd      	b.n	80008b6 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <HAL_MspInit+0x30>)
 80008c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008c8:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_MspInit+0x30>)
 80008ca:	f043 0302 	orr.w	r3, r3, #2
 80008ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_MspInit+0x30>)
 80008d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008d8:	f003 0302 	and.w	r3, r3, #2
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	58024400 	.word	0x58024400

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <NMI_Handler+0x4>

080008f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <MemManage_Handler+0x4>

08000908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <UsageFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000946:	f000 fa71 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}

0800094e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  return 1;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <_kill>:

int _kill(int pid, int sig)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800096a:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <_kill+0x20>)
 800096c:	2216      	movs	r2, #22
 800096e:	601a      	str	r2, [r3, #0]
  return -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	24007e08 	.word	0x24007e08

08000984 <_exit>:

void _exit (int status)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ffe5 	bl	8000960 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000996:	bf00      	nop
 8000998:	e7fd      	b.n	8000996 <_exit+0x12>

0800099a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e00a      	b.n	80009c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ac:	f3af 8000 	nop.w
 80009b0:	4601      	mov	r1, r0
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	60ba      	str	r2, [r7, #8]
 80009b8:	b2ca      	uxtb	r2, r1
 80009ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	3301      	adds	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	dbf0      	blt.n	80009ac <_read+0x12>
  }

  return len;
 80009ca:	687b      	ldr	r3, [r7, #4]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e009      	b.n	80009fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	60ba      	str	r2, [r7, #8]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	dbf1      	blt.n	80009e6 <_write+0x12>
  }
  return len;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_close>:

int _close(int file)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a34:	605a      	str	r2, [r3, #4]
  return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <_isatty>:

int _isatty(int file)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4c:	2301      	movs	r3, #1
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d205      	bcs.n	8000ab0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <_sbrk+0x6c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a06      	ldr	r2, [pc, #24]	@ (8000ad8 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	371c      	adds	r7, #28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	24080000 	.word	0x24080000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	24004aec 	.word	0x24004aec
 8000adc:	24007e18 	.word	0x24007e18
 8000ae0:	24007e08 	.word	0x24007e08

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000b20 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000ae8:	f7ff fcf8 	bl	80004dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aec:	f7ff fc48 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	@ (8000b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b16:	f00d fded 	bl	800e6f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fcf7 	bl	800050c <main>
  bx  lr
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b20:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b28:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8000b2c:	080125d0 	.word	0x080125d0
  ldr r2, =_sbss
 8000b30:	24004ad0 	.word	0x24004ad0
  ldr r4, =_ebss
 8000b34:	24007e18 	.word	0x24007e18

08000b38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC3_IRQHandler>

08000b3a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00b      	beq.n	8000b62 <LAN8742_RegisterBusIO+0x28>
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d007      	beq.n	8000b62 <LAN8742_RegisterBusIO+0x28>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <LAN8742_RegisterBusIO+0x28>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e014      	b.n	8000b92 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68da      	ldr	r2, [r3, #12]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	691a      	ldr	r2, [r3, #16]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d139      	bne.n	8000c2e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d002      	beq.n	8000bc8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2220      	movs	r2, #32
 8000bcc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e01c      	b.n	8000c0e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f107 020c 	add.w	r2, r7, #12
 8000bdc:	2112      	movs	r1, #18
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	4798      	blx	r3
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da03      	bge.n	8000bf0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000be8:	f06f 0304 	mvn.w	r3, #4
 8000bec:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000bee:	e00b      	b.n	8000c08 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 031f 	and.w	r3, r3, #31
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d105      	bne.n	8000c08 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
         break;
 8000c06:	e005      	b.n	8000c14 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	2b1f      	cmp	r3, #31
 8000c12:	d9df      	bls.n	8000bd4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	d902      	bls.n	8000c22 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c1c:	f06f 0302 	mvn.w	r3, #2
 8000c20:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000c2e:	693b      	ldr	r3, [r7, #16]
 }
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6810      	ldr	r0, [r2, #0]
 8000c4c:	f107 020c 	add.w	r2, r7, #12
 8000c50:	2101      	movs	r1, #1
 8000c52:	4798      	blx	r3
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	da02      	bge.n	8000c60 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000c5a:	f06f 0304 	mvn.w	r3, #4
 8000c5e:	e06e      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	6810      	ldr	r0, [r2, #0]
 8000c68:	f107 020c 	add.w	r2, r7, #12
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4798      	blx	r3
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	da02      	bge.n	8000c7c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000c76:	f06f 0304 	mvn.w	r3, #4
 8000c7a:	e060      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e059      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6810      	ldr	r0, [r2, #0]
 8000c92:	f107 020c 	add.w	r2, r7, #12
 8000c96:	2100      	movs	r1, #0
 8000c98:	4798      	blx	r3
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	da02      	bge.n	8000ca6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ca0:	f06f 0304 	mvn.w	r3, #4
 8000ca4:	e04b      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d11b      	bne.n	8000ce8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <LAN8742_GetLinkState+0x90>
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	e03a      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e033      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	e02c      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	e02a      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	6810      	ldr	r0, [r2, #0]
 8000cf0:	f107 020c 	add.w	r2, r7, #12
 8000cf4:	211f      	movs	r1, #31
 8000cf6:	4798      	blx	r3
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	da02      	bge.n	8000d04 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000cfe:	f06f 0304 	mvn.w	r3, #4
 8000d02:	e01c      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000d0e:	2306      	movs	r3, #6
 8000d10:	e015      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f003 031c 	and.w	r3, r3, #28
 8000d18:	2b18      	cmp	r3, #24
 8000d1a:	d101      	bne.n	8000d20 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e00e      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 031c 	and.w	r3, r3, #28
 8000d26:	2b08      	cmp	r3, #8
 8000d28:	d101      	bne.n	8000d2e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e007      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f003 031c 	and.w	r3, r3, #28
 8000d34:	2b14      	cmp	r3, #20
 8000d36:	d101      	bne.n	8000d3c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	e000      	b.n	8000d3e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d3c:	2305      	movs	r3, #5
    }
  }
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f000 f95e 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d54:	f002 fe68 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <HAL_Init+0x68>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	0a1b      	lsrs	r3, r3, #8
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	4913      	ldr	r1, [pc, #76]	@ (8000db4 <HAL_Init+0x6c>)
 8000d66:	5ccb      	ldrb	r3, [r1, r3]
 8000d68:	f003 031f 	and.w	r3, r3, #31
 8000d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_Init+0x68>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <HAL_Init+0x6c>)
 8000d7c:	5cd3      	ldrb	r3, [r2, r3]
 8000d7e:	f003 031f 	and.w	r3, r3, #31
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	fa22 f303 	lsr.w	r3, r2, r3
 8000d88:	4a0b      	ldr	r2, [pc, #44]	@ (8000db8 <HAL_Init+0x70>)
 8000d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dbc <HAL_Init+0x74>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d92:	200f      	movs	r0, #15
 8000d94:	f000 f814 	bl	8000dc0 <HAL_InitTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e002      	b.n	8000da8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000da2:	f7ff fd8b 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	58024400 	.word	0x58024400
 8000db4:	080123e0 	.word	0x080123e0
 8000db8:	24000004 	.word	0x24000004
 8000dbc:	24000000 	.word	0x24000000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <HAL_InitTick+0x60>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e021      	b.n	8000e18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_InitTick+0x64>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <HAL_InitTick+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f935 	bl	800105a <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00e      	b.n	8000e18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d80a      	bhi.n	8000e16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f000 f90d 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4a06      	ldr	r2, [pc, #24]	@ (8000e28 <HAL_InitTick+0x68>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2400000c 	.word	0x2400000c
 8000e24:	24000000 	.word	0x24000000
 8000e28:	24000008 	.word	0x24000008

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2400000c 	.word	0x2400000c
 8000e50:	24004af0 	.word	0x24004af0

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	24004af0 	.word	0x24004af0

08000e6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_GetREVID+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	0c1b      	lsrs	r3, r3, #16
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	5c001000 	.word	0x5c001000

08000e84 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8000e94:	4904      	ldr	r1, [pc, #16]	@ (8000ea8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	604b      	str	r3, [r1, #4]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	58000400 	.word	0x58000400

08000eac <__NVIC_SetPriorityGrouping>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <__NVIC_SetPriorityGrouping+0x40>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x40>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00
 8000ef0:	05fa0000 	.word	0x05fa0000

08000ef4 <__NVIC_GetPriorityGrouping>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_SetPriority>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	@ (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff47 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff5e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff90 	bl	8000f64 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5f 	bl	8000f10 <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb2 	bl	8000fcc <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001078:	f3bf 8f5f 	dmb	sy
}
 800107c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800107e:	4b07      	ldr	r3, [pc, #28]	@ (800109c <HAL_MPU_Disable+0x28>)
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001082:	4a06      	ldr	r2, [pc, #24]	@ (800109c <HAL_MPU_Disable+0x28>)
 8001084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001088:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800108a:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <HAL_MPU_Disable+0x2c>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	e000ed90 	.word	0xe000ed90

080010a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010ac:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <HAL_MPU_Enable+0x38>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <HAL_MPU_Enable+0x3c>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ba:	4a09      	ldr	r2, [pc, #36]	@ (80010e0 <HAL_MPU_Enable+0x3c>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010c2:	f3bf 8f4f 	dsb	sy
}
 80010c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010c8:	f3bf 8f6f 	isb	sy
}
 80010cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed90 	.word	0xe000ed90
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <HAL_MPU_ConfigRegion+0x7c>)
 80010f2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80010f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <HAL_MPU_ConfigRegion+0x7c>)
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <HAL_MPU_ConfigRegion+0x7c>)
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001100:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <HAL_MPU_ConfigRegion+0x7c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7b1b      	ldrb	r3, [r3, #12]
 800110c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7adb      	ldrb	r3, [r3, #11]
 8001112:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001114:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7a9b      	ldrb	r3, [r3, #10]
 800111a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800111c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7b5b      	ldrb	r3, [r3, #13]
 8001122:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001124:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7b9b      	ldrb	r3, [r3, #14]
 800112a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800112c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7bdb      	ldrb	r3, [r3, #15]
 8001132:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001134:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7a5b      	ldrb	r3, [r3, #9]
 800113a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800113c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7a1b      	ldrb	r3, [r3, #8]
 8001142:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001144:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800114e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001150:	6113      	str	r3, [r2, #16]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed90 	.word	0xe000ed90

08001164 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e0e3      	b.n	800133e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800117c:	2b00      	cmp	r3, #0
 800117e:	d106      	bne.n	800118e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2220      	movs	r2, #32
 8001184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f003 f8d3 	bl	8004334 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b6e      	ldr	r3, [pc, #440]	@ (8001348 <HAL_ETH_Init+0x1e4>)
 8001190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001194:	4a6c      	ldr	r2, [pc, #432]	@ (8001348 <HAL_ETH_Init+0x1e4>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800119e:	4b6a      	ldr	r3, [pc, #424]	@ (8001348 <HAL_ETH_Init+0x1e4>)
 80011a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7a1b      	ldrb	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d103      	bne.n	80011bc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fe65 	bl	8000e84 <HAL_SYSCFG_ETHInterfaceSelect>
 80011ba:	e003      	b.n	80011c4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80011bc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80011c0:	f7ff fe60 	bl	8000e84 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80011c4:	4b61      	ldr	r3, [pc, #388]	@ (800134c <HAL_ETH_Init+0x1e8>)
 80011c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e0:	f7ff fe38 	bl	8000e54 <HAL_GetTick>
 80011e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80011e6:	e011      	b.n	800120c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011e8:	f7ff fe34 	bl	8000e54 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011f6:	d909      	bls.n	800120c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2204      	movs	r2, #4
 80011fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	22e0      	movs	r2, #224	@ 0xe0
 8001204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e098      	b.n	800133e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1e4      	bne.n	80011e8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fdb4 	bl	8001d8c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001224:	f002 fd7a 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8001228:	4603      	mov	r3, r0
 800122a:	4a49      	ldr	r2, [pc, #292]	@ (8001350 <HAL_ETH_Init+0x1ec>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	0c9a      	lsrs	r2, r3, #18
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3a01      	subs	r2, #1
 8001238:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 ff97 	bl	8002170 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800124a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800124e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800125a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800125e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	22e0      	movs	r2, #224	@ 0xe0
 800127a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e05d      	b.n	800133e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800128a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <HAL_ETH_Init+0x1f0>)
 8001290:	4013      	ands	r3, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6952      	ldr	r2, [r2, #20]
 8001296:	0051      	lsls	r1, r2, #1
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	430b      	orrs	r3, r1
 800129e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012a2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 ffff 	bl	80022aa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 f845 	bl	800233c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	3305      	adds	r3, #5
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	021a      	lsls	r2, r3, #8
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	3304      	adds	r3, #4
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	3303      	adds	r3, #3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	061a      	lsls	r2, r3, #24
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	3302      	adds	r3, #2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	041b      	lsls	r3, r3, #16
 80012e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	3301      	adds	r3, #1
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80012f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80012fe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001300:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_ETH_Init+0x1f4>)
 8001312:	430b      	orrs	r3, r1
 8001314:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <HAL_ETH_Init+0x1f8>)
 8001326:	430b      	orrs	r3, r1
 8001328:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2210      	movs	r2, #16
 8001338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	58024400 	.word	0x58024400
 800134c:	58000400 	.word	0x58000400
 8001350:	431bde83 	.word	0x431bde83
 8001354:	ffff8001 	.word	0xffff8001
 8001358:	0c020060 	.word	0x0c020060
 800135c:	0c20c000 	.word	0x0c20c000

08001360 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800136e:	2b10      	cmp	r3, #16
 8001370:	d153      	bne.n	800141a <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2220      	movs	r2, #32
 8001376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2204      	movs	r2, #4
 800137e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f9f3 	bl	800176c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0202 	orr.w	r2, r2, #2
 8001394:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013d2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013fa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001406:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800140a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2240      	movs	r2, #64	@ 0x40
 8001412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
  }
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001432:	2b40      	cmp	r3, #64	@ 0x40
 8001434:	d13f      	bne.n	80014b6 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2220      	movs	r2, #32
 800143a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001446:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001456:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001462:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001472:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0201 	bic.w	r2, r2, #1
 8001484:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0202 	bic.w	r2, r2, #2
 80014a8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2210      	movs	r2, #16
 80014ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
  }
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07f      	b.n	80015ea <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014f0:	2b40      	cmp	r3, #64	@ 0x40
 80014f2:	d179      	bne.n	80015e8 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80014f4:	2200      	movs	r2, #0
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 ff7d 	bl	80023f8 <ETH_Prepare_Tx_Descriptors>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d009      	beq.n	8001518 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150a:	f043 0202 	orr.w	r2, r3, #2
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e068      	b.n	80015ea <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001518:	f3bf 8f4f 	dsb	sy
}
 800151c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3206      	adds	r2, #6
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	629a      	str	r2, [r3, #40]	@ 0x28
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	2b03      	cmp	r3, #3
 800153c:	d904      	bls.n	8001548 <HAL_ETH_Transmit+0x84>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001542:	1f1a      	subs	r2, r3, #4
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3106      	adds	r1, #6
 8001554:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001558:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800155c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 8001560:	f7ff fc78 	bl	8000e54 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001566:	e039      	b.n	80015dc <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001570:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d012      	beq.n	80015a2 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	f043 0208 	orr.w	r2, r3, #8
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001594:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e023      	b.n	80015ea <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d018      	beq.n	80015dc <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015aa:	f7ff fc53 	bl	8000e54 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d302      	bcc.n	80015c0 <HAL_ETH_Transmit+0xfc>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10d      	bne.n	80015dc <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c6:	f043 0204 	orr.w	r2, r3, #4
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80015d6:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e006      	b.n	80015ea <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dbc1      	blt.n	8001568 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e000      	b.n	80015ea <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b088      	sub	sp, #32
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001610:	f043 0201 	orr.w	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0a2      	b.n	8001764 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001624:	2b40      	cmp	r3, #64	@ 0x40
 8001626:	d001      	beq.n	800162c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e09b      	b.n	8001764 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001630:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	3212      	adds	r2, #18
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001642:	f1c3 0304 	rsb	r3, r3, #4
 8001646:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001648:	e064      	b.n	8001714 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <HAL_ETH_ReadData+0x88>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001676:	2b00      	cmp	r3, #0
 8001678:	d03a      	beq.n	80016f0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016ca:	461a      	mov	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	f003 f808 	bl	80046e4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	441a      	add	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	3301      	adds	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d902      	bls.n	8001702 <HAL_ETH_ReadData+0x110>
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	3b04      	subs	r3, #4
 8001700:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	3212      	adds	r2, #18
 8001708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001718:	2b00      	cmp	r3, #0
 800171a:	db06      	blt.n	800172a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d202      	bcs.n	800172a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001724:	7cfb      	ldrb	r3, [r7, #19]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d08f      	beq.n	800164a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	441a      	add	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f814 	bl	800176c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001778:	2301      	movs	r3, #1
 800177a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001780:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	3212      	adds	r2, #18
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001792:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001794:	e038      	b.n	8001808 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d112      	bne.n	80017c4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 ff6e 	bl	8004684 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	74fb      	strb	r3, [r7, #19]
 80017b2:	e007      	b.n	80017c4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	461a      	mov	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	461a      	mov	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80017c4:	7cfb      	ldrb	r3, [r7, #19]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d01e      	beq.n	8001808 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	e003      	b.n	80017e4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80017e2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	3301      	adds	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d902      	bls.n	80017f6 <ETH_UpdateDescriptor+0x8a>
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	3b04      	subs	r3, #4
 80017f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	3212      	adds	r2, #18
 80017fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001800:	617b      	str	r3, [r7, #20]
      desccount--;
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	3b01      	subs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <ETH_UpdateDescriptor+0xa8>
 800180e:	7cfb      	ldrb	r3, [r7, #19]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1c0      	bne.n	8001796 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	429a      	cmp	r2, r3
 800181c:	d01b      	beq.n	8001856 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3303      	adds	r3, #3
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001828:	f3bf 8f5f 	dmb	sy
}
 800182c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6919      	ldr	r1, [r3, #16]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	18ca      	adds	r2, r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001846:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e03e      	b.n	80018fe <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001888:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	055b      	lsls	r3, r3, #21
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f043 030c 	orr.w	r3, r3, #12
 80018ac:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80018c0:	f7ff fac8 	bl	8000e54 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80018c6:	e009      	b.n	80018dc <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80018c8:	f7ff fac4 	bl	8000e54 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018d6:	d901      	bls.n	80018dc <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e010      	b.n	80018fe <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ed      	bne.n	80018c8 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e03c      	b.n	80019a4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001932:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	055b      	lsls	r3, r3, #21
 800193e:	4313      	orrs	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f023 030c 	bic.w	r3, r3, #12
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <HAL_ETH_WritePHYRegister+0xa4>)
 800196a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800196e:	4a0f      	ldr	r2, [pc, #60]	@ (80019ac <HAL_ETH_WritePHYRegister+0xa4>)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001976:	f7ff fa6d 	bl	8000e54 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800197c:	e009      	b.n	8001992 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800197e:	f7ff fa69 	bl	8000e54 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800198c:	d901      	bls.n	8001992 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e008      	b.n	80019a4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ed      	bne.n	800197e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40028000 	.word	0x40028000

080019b0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e1c3      	b.n	8001d4c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 020c 	and.w	r2, r3, #12
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf0c      	ite	eq
 8001a0a:	2301      	moveq	r3, #1
 8001a0c:	2300      	movne	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bf14      	ite	ne
 8001aaa:	2301      	movne	r3, #1
 8001aac:	2300      	moveq	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001b3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf14      	ite	ne
 8001b6e:	2301      	movne	r3, #1
 8001b70:	2300      	moveq	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001bd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf14      	ite	ne
 8001bf8:	2301      	movne	r3, #1
 8001bfa:	2300      	moveq	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	0e5b      	lsrs	r3, r3, #25
 8001c0e:	f003 021f 	and.w	r2, r3, #31
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 020f 	and.w	r2, r3, #15
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cba:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bf14      	ite	ne
 8001cc2:	2301      	movne	r3, #1
 8001cc4:	2300      	moveq	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001cd8:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ce8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf14      	ite	ne
 8001d00:	2301      	movne	r3, #1
 8001d02:	2300      	moveq	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf14      	ite	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2300      	moveq	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e00b      	b.n	8001d84 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d105      	bne.n	8001d82 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f857 	bl	8001e2c <ETH_SetMACConfig>

    return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
  }
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001da6:	f001 ffb9 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8001daa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4a1a      	ldr	r2, [pc, #104]	@ (8001e18 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d804      	bhi.n	8001dbe <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e022      	b.n	8001e04 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	4a16      	ldr	r2, [pc, #88]	@ (8001e1c <HAL_ETH_SetMDIOClockRange+0x90>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d204      	bcs.n	8001dd0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e019      	b.n	8001e04 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d915      	bls.n	8001e04 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4a12      	ldr	r2, [pc, #72]	@ (8001e24 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d804      	bhi.n	8001dea <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e00c      	b.n	8001e04 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d804      	bhi.n	8001dfc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e003      	b.n	8001e04 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001e02:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	02160ebf 	.word	0x02160ebf
 8001e1c:	03938700 	.word	0x03938700
 8001e20:	05f5e0ff 	.word	0x05f5e0ff
 8001e24:	08f0d17f 	.word	0x08f0d17f
 8001e28:	0ee6b27f 	.word	0x0ee6b27f

08001e2c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001e3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	791b      	ldrb	r3, [r3, #4]
 8001e44:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001e46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	7b1b      	ldrb	r3, [r3, #12]
 8001e4c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001e4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	7b5b      	ldrb	r3, [r3, #13]
 8001e54:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001e56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	7b9b      	ldrb	r3, [r3, #14]
 8001e5c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001e5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	7bdb      	ldrb	r3, [r3, #15]
 8001e64:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001e66:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	7c12      	ldrb	r2, [r2, #16]
 8001e6c:	2a00      	cmp	r2, #0
 8001e6e:	d102      	bne.n	8001e76 <ETH_SetMACConfig+0x4a>
 8001e70:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e74:	e000      	b.n	8001e78 <ETH_SetMACConfig+0x4c>
 8001e76:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e78:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	7c52      	ldrb	r2, [r2, #17]
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	d102      	bne.n	8001e88 <ETH_SetMACConfig+0x5c>
 8001e82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e86:	e000      	b.n	8001e8a <ETH_SetMACConfig+0x5e>
 8001e88:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	7c9b      	ldrb	r3, [r3, #18]
 8001e90:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e92:	431a      	orrs	r2, r3
               macconf->Speed |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001e98:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001e9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	7f1b      	ldrb	r3, [r3, #28]
 8001ea4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001ea6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	7f5b      	ldrb	r3, [r3, #29]
 8001eac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001eae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	7f92      	ldrb	r2, [r2, #30]
 8001eb4:	2a00      	cmp	r2, #0
 8001eb6:	d102      	bne.n	8001ebe <ETH_SetMACConfig+0x92>
 8001eb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ebc:	e000      	b.n	8001ec0 <ETH_SetMACConfig+0x94>
 8001ebe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ec0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	7fdb      	ldrb	r3, [r3, #31]
 8001ec6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001ec8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ed0:	2a00      	cmp	r2, #0
 8001ed2:	d102      	bne.n	8001eda <ETH_SetMACConfig+0xae>
 8001ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed8:	e000      	b.n	8001edc <ETH_SetMACConfig+0xb0>
 8001eda:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001edc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001ee2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001eea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001eec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b56      	ldr	r3, [pc, #344]	@ (8002058 <ETH_SetMACConfig+0x22c>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	430b      	orrs	r3, r1
 8001f08:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f16:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001f18:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f20:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001f22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001f2a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001f2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001f34:	2a00      	cmp	r2, #0
 8001f36:	d102      	bne.n	8001f3e <ETH_SetMACConfig+0x112>
 8001f38:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f3c:	e000      	b.n	8001f40 <ETH_SetMACConfig+0x114>
 8001f3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001f40:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4b42      	ldr	r3, [pc, #264]	@ (800205c <ETH_SetMACConfig+0x230>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	68f9      	ldr	r1, [r7, #12]
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f64:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <ETH_SetMACConfig+0x234>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	68f9      	ldr	r1, [r7, #12]
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f88:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	d101      	bne.n	8001f9e <ETH_SetMACConfig+0x172>
 8001f9a:	2280      	movs	r2, #128	@ 0x80
 8001f9c:	e000      	b.n	8001fa0 <ETH_SetMACConfig+0x174>
 8001f9e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001fa0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fb2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001fc8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001fd0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fde:	f023 0103 	bic.w	r1, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001ff6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002012:	2a00      	cmp	r2, #0
 8002014:	d101      	bne.n	800201a <ETH_SetMACConfig+0x1ee>
 8002016:	2240      	movs	r2, #64	@ 0x40
 8002018:	e000      	b.n	800201c <ETH_SetMACConfig+0x1f0>
 800201a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800201c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002024:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002026:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800202e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800203c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	430a      	orrs	r2, r1
 8002048:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	00048083 	.word	0x00048083
 800205c:	c0f88000 	.word	0xc0f88000
 8002060:	fffffef0 	.word	0xfffffef0

08002064 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b38      	ldr	r3, [pc, #224]	@ (800215c <ETH_SetDMAConfig+0xf8>)
 800207a:	4013      	ands	r3, r2
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	6811      	ldr	r1, [r2, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800208a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	791b      	ldrb	r3, [r3, #4]
 8002090:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002096:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	7b1b      	ldrb	r3, [r3, #12]
 800209c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002160 <ETH_SetDMAConfig+0xfc>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	430b      	orrs	r3, r1
 80020b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7b5b      	ldrb	r3, [r3, #13]
 80020c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80020d8:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <ETH_SetDMAConfig+0x100>)
 80020da:	4013      	ands	r3, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	430b      	orrs	r3, r1
 80020e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020e8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	7d1b      	ldrb	r3, [r3, #20]
 80020f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80020f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	7f5b      	ldrb	r3, [r3, #29]
 80020fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800210a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <ETH_SetDMAConfig+0x104>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	430b      	orrs	r3, r1
 800211a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800211e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	7f1b      	ldrb	r3, [r3, #28]
 8002126:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002138:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <ETH_SetDMAConfig+0x108>)
 800213e:	4013      	ands	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	68f9      	ldr	r1, [r7, #12]
 8002146:	430b      	orrs	r3, r1
 8002148:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800214c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	ffff87fd 	.word	0xffff87fd
 8002160:	ffff2ffe 	.word	0xffff2ffe
 8002164:	fffec000 	.word	0xfffec000
 8002168:	ffc0efef 	.word	0xffc0efef
 800216c:	7fc0ffff 	.word	0x7fc0ffff

08002170 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0a4      	sub	sp, #144	@ 0x90
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800217e:	2300      	movs	r3, #0
 8002180:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80021ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021b0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80021c8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80021cc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80021d8:	2301      	movs	r3, #1
 80021da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80021ea:	2300      	movs	r3, #0
 80021ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80021f2:	2300      	movs	r3, #0
 80021f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002208:	2320      	movs	r3, #32
 800220a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800221a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002220:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002224:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800222c:	2302      	movs	r3, #2
 800222e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002244:	2301      	movs	r3, #1
 8002246:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800224a:	2300      	movs	r3, #0
 800224c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002254:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002258:	4619      	mov	r1, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fde6 	bl	8001e2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002260:	2301      	movs	r3, #1
 8002262:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002264:	2301      	movs	r3, #1
 8002266:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800227a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800227e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002284:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002288:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002290:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fee1 	bl	8002064 <ETH_SetDMAConfig>
}
 80022a2:	bf00      	nop
 80022a4:	3790      	adds	r7, #144	@ 0x90
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e01d      	b.n	80022f4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68d9      	ldr	r1, [r3, #12]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2200      	movs	r2, #0
 80022d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	3206      	adds	r2, #6
 80022ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d9de      	bls.n	80022b8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002308:	461a      	mov	r2, r3
 800230a:	2303      	movs	r3, #3
 800230c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800231c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800232c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e023      	b.n	8002392 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6919      	ldr	r1, [r3, #16]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2200      	movs	r2, #0
 8002366:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	3212      	adds	r2, #18
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3301      	adds	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d9d8      	bls.n	800234a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023be:	461a      	mov	r2, r3
 80023c0:	2303      	movs	r3, #3
 80023c2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b091      	sub	sp, #68	@ 0x44
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3318      	adds	r3, #24
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800241e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002422:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800243a:	d007      	beq.n	800244c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800243c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002440:	3304      	adds	r3, #4
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	e266      	b.n	800291e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d044      	beq.n	80024e6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	4b75      	ldr	r3, [pc, #468]	@ (8002638 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002462:	4013      	ands	r3, r2
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002468:	431a      	orrs	r2, r3
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002478:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002488:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d027      	beq.n	80024e6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	b29a      	uxth	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	431a      	orrs	r2, r3
 80024a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80024a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80024b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	431a      	orrs	r2, r3
 80024c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80024d4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80024e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00e      	beq.n	8002510 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	4b51      	ldr	r3, [pc, #324]	@ (800263c <ETH_Prepare_Tx_Descriptors+0x244>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	6992      	ldr	r2, [r2, #24]
 80024fe:	431a      	orrs	r2, r3
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800250c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d036      	beq.n	8002596 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002532:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002534:	f3bf 8f5f 	dmb	sy
}
 8002538:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800253a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002544:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002548:	3301      	adds	r3, #1
 800254a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800254c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254e:	2b03      	cmp	r3, #3
 8002550:	d902      	bls.n	8002558 <ETH_Prepare_Tx_Descriptors+0x160>
 8002552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002554:	3b04      	subs	r3, #4
 8002556:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002564:	3301      	adds	r3, #1
 8002566:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002574:	d10f      	bne.n	8002596 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	6a3a      	ldr	r2, [r7, #32]
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002580:	f3bf 8f5f 	dmb	sy
}
 8002584:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800258e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002590:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002592:	2302      	movs	r3, #2
 8002594:	e1c3      	b.n	800291e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	3301      	adds	r3, #1
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800259c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	4b24      	ldr	r3, [pc, #144]	@ (800263c <ETH_Prepare_Tx_Descriptors+0x244>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025b0:	6852      	ldr	r2, [r2, #4]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80025b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d012      	beq.n	80025e6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80025c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80025c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ce:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80025d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <ETH_Prepare_Tx_Descriptors+0x248>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025da:	6852      	ldr	r2, [r2, #4]
 80025dc:	0412      	lsls	r2, r2, #16
 80025de:	431a      	orrs	r2, r3
 80025e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	e008      	b.n	80025f8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	2200      	movs	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <ETH_Prepare_Tx_Descriptors+0x248>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025f6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	2b00      	cmp	r3, #0
 8002602:	d021      	beq.n	8002648 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	04db      	lsls	r3, r3, #19
 8002612:	431a      	orrs	r2, r3
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800261e:	4013      	ands	r3, r2
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	69d2      	ldr	r2, [r2, #28]
 8002624:	431a      	orrs	r2, r3
 8002626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002628:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800262a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	e02e      	b.n	8002696 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002638:	ffff0000 	.word	0xffff0000
 800263c:	ffffc000 	.word	0xffffc000
 8002640:	c000ffff 	.word	0xc000ffff
 8002644:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	4b7b      	ldr	r3, [pc, #492]	@ (800283c <ETH_Prepare_Tx_Descriptors+0x444>)
 800264e:	4013      	ands	r3, r2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	6852      	ldr	r2, [r2, #4]
 8002654:	431a      	orrs	r2, r3
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	431a      	orrs	r2, r3
 8002674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002676:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	431a      	orrs	r2, r3
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80026a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ae:	431a      	orrs	r2, r3
 80026b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80026b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80026bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026be:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80026c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80026cc:	f3bf 8f5f 	dmb	sy
}
 80026d0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80026d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026dc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80da 	beq.w	80028a0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80026ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80026fe:	e0cf      	b.n	80028a0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800270c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270e:	3301      	adds	r3, #1
 8002710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002714:	2b03      	cmp	r3, #3
 8002716:	d902      	bls.n	800271e <ETH_Prepare_Tx_Descriptors+0x326>
 8002718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271a:	3b04      	subs	r3, #4
 800271c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002732:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800273c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002740:	d007      	beq.n	8002752 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002746:	3304      	adds	r3, #4
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d029      	beq.n	80027a6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800275a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002760:	2300      	movs	r3, #0
 8002762:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002764:	e019      	b.n	800279a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002766:	f3bf 8f5f 	dmb	sy
}
 800276a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002776:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800277a:	3301      	adds	r3, #1
 800277c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800277e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002780:	2b03      	cmp	r3, #3
 8002782:	d902      	bls.n	800278a <ETH_Prepare_Tx_Descriptors+0x392>
 8002784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002786:	3b04      	subs	r3, #4
 8002788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800278e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002796:	3301      	adds	r3, #1
 8002798:	63bb      	str	r3, [r7, #56]	@ 0x38
 800279a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800279c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279e:	429a      	cmp	r2, r3
 80027a0:	d3e1      	bcc.n	8002766 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80027a2:	2302      	movs	r3, #2
 80027a4:	e0bb      	b.n	800291e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80027a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a8:	3301      	adds	r3, #1
 80027aa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80027ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80027b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80027bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002840 <ETH_Prepare_Tx_Descriptors+0x448>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027c6:	6852      	ldr	r2, [r2, #4]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027cc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80027ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d012      	beq.n	80027fc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80027d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80027dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80027e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f0:	6852      	ldr	r2, [r2, #4]
 80027f2:	0412      	lsls	r2, r2, #16
 80027f4:	431a      	orrs	r2, r3
 80027f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	e008      	b.n	800280e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80027fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fe:	2200      	movs	r2, #0
 8002800:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002808:	4013      	ands	r3, r2
 800280a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800280c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d018      	beq.n	800284c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800281a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002820:	4013      	ands	r3, r2
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	69d2      	ldr	r2, [r2, #28]
 8002826:	431a      	orrs	r2, r3
 8002828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800282c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	e020      	b.n	800287c <ETH_Prepare_Tx_Descriptors+0x484>
 800283a:	bf00      	nop
 800283c:	ffff8000 	.word	0xffff8000
 8002840:	ffffc000 	.word	0xffffc000
 8002844:	c000ffff 	.word	0xc000ffff
 8002848:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800284c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	4b36      	ldr	r3, [pc, #216]	@ (800292c <ETH_Prepare_Tx_Descriptors+0x534>)
 8002852:	4013      	ands	r3, r2
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	6852      	ldr	r2, [r2, #4]
 8002858:	431a      	orrs	r2, r3
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800286a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	431a      	orrs	r2, r3
 8002878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800287c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287e:	3301      	adds	r3, #1
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002882:	f3bf 8f5f 	dmb	sy
}
 8002886:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002892:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800289c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80028a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f47f af2b 	bne.w	8002700 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80028b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	e005      	b.n	80028ca <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80028be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80028ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028de:	3304      	adds	r3, #4
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ea:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ec:	f3ef 8310 	mrs	r3, PRIMASK
 80028f0:	613b      	str	r3, [r7, #16]
  return(result);
 80028f2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	2301      	movs	r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f383 8810 	msr	PRIMASK, r3
}
 8002900:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	4413      	add	r3, r2
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f383 8810 	msr	PRIMASK, r3
}
 800291a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3744      	adds	r7, #68	@ 0x44
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	ffff8000 	.word	0xffff8000

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800293e:	4b89      	ldr	r3, [pc, #548]	@ (8002b64 <HAL_GPIO_Init+0x234>)
 8002940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002942:	e194      	b.n	8002c6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8186 	beq.w	8002c68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d005      	beq.n	8002974 <HAL_GPIO_Init+0x44>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d130      	bne.n	80029d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029aa:	2201      	movs	r2, #1
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 0201 	and.w	r2, r3, #1
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d017      	beq.n	8002a12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d123      	bne.n	8002a66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	08da      	lsrs	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	220f      	movs	r2, #15
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	69b9      	ldr	r1, [r7, #24]
 8002a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0203 	and.w	r2, r3, #3
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80e0 	beq.w	8002c68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b68 <HAL_GPIO_Init+0x238>)
 8002aaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002aae:	4a2e      	ldr	r2, [pc, #184]	@ (8002b68 <HAL_GPIO_Init+0x238>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b68 <HAL_GPIO_Init+0x238>)
 8002aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac6:	4a29      	ldr	r2, [pc, #164]	@ (8002b6c <HAL_GPIO_Init+0x23c>)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	3302      	adds	r3, #2
 8002ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	220f      	movs	r2, #15
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a20      	ldr	r2, [pc, #128]	@ (8002b70 <HAL_GPIO_Init+0x240>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d052      	beq.n	8002b98 <HAL_GPIO_Init+0x268>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b74 <HAL_GPIO_Init+0x244>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d031      	beq.n	8002b5e <HAL_GPIO_Init+0x22e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b78 <HAL_GPIO_Init+0x248>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d02b      	beq.n	8002b5a <HAL_GPIO_Init+0x22a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <HAL_GPIO_Init+0x24c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d025      	beq.n	8002b56 <HAL_GPIO_Init+0x226>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <HAL_GPIO_Init+0x250>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01f      	beq.n	8002b52 <HAL_GPIO_Init+0x222>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1b      	ldr	r2, [pc, #108]	@ (8002b84 <HAL_GPIO_Init+0x254>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d019      	beq.n	8002b4e <HAL_GPIO_Init+0x21e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8002b88 <HAL_GPIO_Init+0x258>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_GPIO_Init+0x21a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a19      	ldr	r2, [pc, #100]	@ (8002b8c <HAL_GPIO_Init+0x25c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00d      	beq.n	8002b46 <HAL_GPIO_Init+0x216>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a18      	ldr	r2, [pc, #96]	@ (8002b90 <HAL_GPIO_Init+0x260>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d007      	beq.n	8002b42 <HAL_GPIO_Init+0x212>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <HAL_GPIO_Init+0x264>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_GPIO_Init+0x20e>
 8002b3a:	2309      	movs	r3, #9
 8002b3c:	e02d      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b3e:	230a      	movs	r3, #10
 8002b40:	e02b      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b42:	2308      	movs	r3, #8
 8002b44:	e029      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b46:	2307      	movs	r3, #7
 8002b48:	e027      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b4a:	2306      	movs	r3, #6
 8002b4c:	e025      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e023      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e021      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e01f      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e01d      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e01b      	b.n	8002b9a <HAL_GPIO_Init+0x26a>
 8002b62:	bf00      	nop
 8002b64:	58000080 	.word	0x58000080
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	58000400 	.word	0x58000400
 8002b70:	58020000 	.word	0x58020000
 8002b74:	58020400 	.word	0x58020400
 8002b78:	58020800 	.word	0x58020800
 8002b7c:	58020c00 	.word	0x58020c00
 8002b80:	58021000 	.word	0x58021000
 8002b84:	58021400 	.word	0x58021400
 8002b88:	58021800 	.word	0x58021800
 8002b8c:	58021c00 	.word	0x58021c00
 8002b90:	58022000 	.word	0x58022000
 8002b94:	58022400 	.word	0x58022400
 8002b98:	2300      	movs	r3, #0
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	f002 0203 	and.w	r2, r2, #3
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	4093      	lsls	r3, r2
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002baa:	4938      	ldr	r1, [pc, #224]	@ (8002c8c <HAL_GPIO_Init+0x35c>)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002bde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f47f ae63 	bne.w	8002944 <HAL_GPIO_Init+0x14>
  }
}
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
 8002c82:	3724      	adds	r7, #36	@ 0x24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	58000400 	.word	0x58000400

08002c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ca0:	787b      	ldrb	r3, [r7, #1]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002cac:	e003      	b.n	8002cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	041a      	lsls	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	619a      	str	r2, [r3, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cd4:	887a      	ldrh	r2, [r7, #2]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	041a      	lsls	r2, r3, #16
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	43d9      	mvns	r1, r3
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	619a      	str	r2, [r3, #24]
}
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002d00:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <HAL_HSEM_FastTake+0x2c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3320      	adds	r3, #32
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	4a07      	ldr	r2, [pc, #28]	@ (8002d28 <HAL_HSEM_FastTake+0x30>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	58026400 	.word	0x58026400
 8002d28:	80000300 	.word	0x80000300

08002d2c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002d36:	4906      	ldr	r1, [pc, #24]	@ (8002d50 <HAL_HSEM_Release+0x24>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	58026400 	.word	0x58026400

08002d54 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d5c:	4b29      	ldr	r3, [pc, #164]	@ (8002e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d00a      	beq.n	8002d7e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d68:	4b26      	ldr	r3, [pc, #152]	@ (8002e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e040      	b.n	8002dfc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e03e      	b.n	8002dfc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d7e:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002d86:	491f      	ldr	r1, [pc, #124]	@ (8002e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d8e:	f7fe f861 	bl	8000e54 <HAL_GetTick>
 8002d92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d94:	e009      	b.n	8002daa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d96:	f7fe f85d 	bl	8000e54 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002da4:	d901      	bls.n	8002daa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e028      	b.n	8002dfc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002daa:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db6:	d1ee      	bne.n	8002d96 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b1e      	cmp	r3, #30
 8002dbc:	d008      	beq.n	8002dd0 <HAL_PWREx_ConfigSupply+0x7c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002dc2:	d005      	beq.n	8002dd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b1d      	cmp	r3, #29
 8002dc8:	d002      	beq.n	8002dd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b2d      	cmp	r3, #45	@ 0x2d
 8002dce:	d114      	bne.n	8002dfa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002dd0:	f7fe f840 	bl	8000e54 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002dd6:	e009      	b.n	8002dec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dd8:	f7fe f83c 	bl	8000e54 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002de6:	d901      	bls.n	8002dec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e007      	b.n	8002dfc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df8:	d1ee      	bne.n	8002dd8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	58024800 	.word	0x58024800

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	@ 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f000 bc48 	b.w	80036ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8088 	beq.w	8002f3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2a:	4b99      	ldr	r3, [pc, #612]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e34:	4b96      	ldr	r3, [pc, #600]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d007      	beq.n	8002e50 <HAL_RCC_OscConfig+0x48>
 8002e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e42:	2b18      	cmp	r3, #24
 8002e44:	d111      	bne.n	8002e6a <HAL_RCC_OscConfig+0x62>
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	4b8f      	ldr	r3, [pc, #572]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d06d      	beq.n	8002f38 <HAL_RCC_OscConfig+0x130>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d169      	bne.n	8002f38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f000 bc21 	b.w	80036ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x7a>
 8002e74:	4b86      	ldr	r3, [pc, #536]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a85      	ldr	r2, [pc, #532]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	e02e      	b.n	8002ee0 <HAL_RCC_OscConfig+0xd8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x9c>
 8002e8a:	4b81      	ldr	r3, [pc, #516]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a80      	ldr	r2, [pc, #512]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b7e      	ldr	r3, [pc, #504]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7d      	ldr	r2, [pc, #500]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002e9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e01d      	b.n	8002ee0 <HAL_RCC_OscConfig+0xd8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0xc0>
 8002eae:	4b78      	ldr	r3, [pc, #480]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a77      	ldr	r2, [pc, #476]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	4b75      	ldr	r3, [pc, #468]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a74      	ldr	r2, [pc, #464]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCC_OscConfig+0xd8>
 8002ec8:	4b71      	ldr	r3, [pc, #452]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a70      	ldr	r2, [pc, #448]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b6e      	ldr	r3, [pc, #440]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a6d      	ldr	r2, [pc, #436]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fd ffb4 	bl	8000e54 <HAL_GetTick>
 8002eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fd ffb0 	bl	8000e54 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	@ 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e3d4      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f02:	4b63      	ldr	r3, [pc, #396]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xe8>
 8002f0e:	e014      	b.n	8002f3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fd ffa0 	bl	8000e54 <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fd ff9c 	bl	8000e54 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	@ 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e3c0      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f2a:	4b59      	ldr	r3, [pc, #356]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x110>
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80ca 	beq.w	80030dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f48:	4b51      	ldr	r3, [pc, #324]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f52:	4b4f      	ldr	r3, [pc, #316]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_RCC_OscConfig+0x166>
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	2b18      	cmp	r3, #24
 8002f62:	d156      	bne.n	8003012 <HAL_RCC_OscConfig+0x20a>
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d151      	bne.n	8003012 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f6e:	4b48      	ldr	r3, [pc, #288]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x17e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e392      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f86:	4b42      	ldr	r3, [pc, #264]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 0219 	bic.w	r2, r3, #25
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	493f      	ldr	r1, [pc, #252]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd ff5c 	bl	8000e54 <HAL_GetTick>
 8002f9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fd ff58 	bl	8000e54 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e37c      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fb2:	4b37      	ldr	r3, [pc, #220]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	f7fd ff55 	bl	8000e6c <HAL_GetREVID>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d817      	bhi.n	8002ffc <HAL_RCC_OscConfig+0x1f4>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b40      	cmp	r3, #64	@ 0x40
 8002fd2:	d108      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe4:	e07a      	b.n	80030dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	031b      	lsls	r3, r3, #12
 8002ff4:	4926      	ldr	r1, [pc, #152]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ffa:	e06f      	b.n	80030dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b24      	ldr	r3, [pc, #144]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	4921      	ldr	r1, [pc, #132]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003010:	e064      	b.n	80030dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d047      	beq.n	80030aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 0219 	bic.w	r2, r3, #25
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	491a      	ldr	r1, [pc, #104]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fd ff12 	bl	8000e54 <HAL_GetTick>
 8003030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003034:	f7fd ff0e 	bl	8000e54 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e332      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003046:	4b12      	ldr	r3, [pc, #72]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003052:	f7fd ff0b 	bl	8000e6c <HAL_GetREVID>
 8003056:	4603      	mov	r3, r0
 8003058:	f241 0203 	movw	r2, #4099	@ 0x1003
 800305c:	4293      	cmp	r3, r2
 800305e:	d819      	bhi.n	8003094 <HAL_RCC_OscConfig+0x28c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b40      	cmp	r3, #64	@ 0x40
 8003066:	d108      	bne.n	800307a <HAL_RCC_OscConfig+0x272>
 8003068:	4b09      	ldr	r3, [pc, #36]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003070:	4a07      	ldr	r2, [pc, #28]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 8003072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003076:	6053      	str	r3, [r2, #4]
 8003078:	e030      	b.n	80030dc <HAL_RCC_OscConfig+0x2d4>
 800307a:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	031b      	lsls	r3, r3, #12
 8003088:	4901      	ldr	r1, [pc, #4]	@ (8003090 <HAL_RCC_OscConfig+0x288>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
 800308e:	e025      	b.n	80030dc <HAL_RCC_OscConfig+0x2d4>
 8003090:	58024400 	.word	0x58024400
 8003094:	4b9a      	ldr	r3, [pc, #616]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	4997      	ldr	r1, [pc, #604]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e018      	b.n	80030dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	4b95      	ldr	r3, [pc, #596]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a94      	ldr	r2, [pc, #592]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fd fecd 	bl	8000e54 <HAL_GetTick>
 80030ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030be:	f7fd fec9 	bl	8000e54 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e2ed      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030d0:	4b8b      	ldr	r3, [pc, #556]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80a9 	beq.w	800323c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ea:	4b85      	ldr	r3, [pc, #532]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030f4:	4b82      	ldr	r3, [pc, #520]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d007      	beq.n	8003110 <HAL_RCC_OscConfig+0x308>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b18      	cmp	r3, #24
 8003104:	d13a      	bne.n	800317c <HAL_RCC_OscConfig+0x374>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d135      	bne.n	800317c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003110:	4b7b      	ldr	r3, [pc, #492]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_OscConfig+0x320>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	2b80      	cmp	r3, #128	@ 0x80
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e2c1      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003128:	f7fd fea0 	bl	8000e6c <HAL_GetREVID>
 800312c:	4603      	mov	r3, r0
 800312e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003132:	4293      	cmp	r3, r2
 8003134:	d817      	bhi.n	8003166 <HAL_RCC_OscConfig+0x35e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	2b20      	cmp	r3, #32
 800313c:	d108      	bne.n	8003150 <HAL_RCC_OscConfig+0x348>
 800313e:	4b70      	ldr	r3, [pc, #448]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003146:	4a6e      	ldr	r2, [pc, #440]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003148:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800314c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800314e:	e075      	b.n	800323c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003150:	4b6b      	ldr	r3, [pc, #428]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	069b      	lsls	r3, r3, #26
 800315e:	4968      	ldr	r1, [pc, #416]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003164:	e06a      	b.n	800323c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003166:	4b66      	ldr	r3, [pc, #408]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	061b      	lsls	r3, r3, #24
 8003174:	4962      	ldr	r1, [pc, #392]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800317a:	e05f      	b.n	800323c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d042      	beq.n	800320a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003184:	4b5e      	ldr	r3, [pc, #376]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a5d      	ldr	r2, [pc, #372]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 800318a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800318e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fd fe60 	bl	8000e54 <HAL_GetTick>
 8003194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003198:	f7fd fe5c 	bl	8000e54 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e280      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031aa:	4b55      	ldr	r3, [pc, #340]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031b6:	f7fd fe59 	bl	8000e6c <HAL_GetREVID>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d817      	bhi.n	80031f4 <HAL_RCC_OscConfig+0x3ec>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d108      	bne.n	80031de <HAL_RCC_OscConfig+0x3d6>
 80031cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80031d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80031d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031da:	6053      	str	r3, [r2, #4]
 80031dc:	e02e      	b.n	800323c <HAL_RCC_OscConfig+0x434>
 80031de:	4b48      	ldr	r3, [pc, #288]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	069b      	lsls	r3, r3, #26
 80031ec:	4944      	ldr	r1, [pc, #272]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
 80031f2:	e023      	b.n	800323c <HAL_RCC_OscConfig+0x434>
 80031f4:	4b42      	ldr	r3, [pc, #264]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	493f      	ldr	r1, [pc, #252]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
 8003208:	e018      	b.n	800323c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800320a:	4b3d      	ldr	r3, [pc, #244]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3c      	ldr	r2, [pc, #240]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fd fe1d 	bl	8000e54 <HAL_GetTick>
 800321a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800321e:	f7fd fe19 	bl	8000e54 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e23d      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003230:	4b33      	ldr	r3, [pc, #204]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f0      	bne.n	800321e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d036      	beq.n	80032b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d019      	beq.n	8003284 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003250:	4b2b      	ldr	r3, [pc, #172]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003254:	4a2a      	ldr	r2, [pc, #168]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325c:	f7fd fdfa 	bl	8000e54 <HAL_GetTick>
 8003260:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003264:	f7fd fdf6 	bl	8000e54 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e21a      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003276:	4b22      	ldr	r3, [pc, #136]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x45c>
 8003282:	e018      	b.n	80032b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003284:	4b1e      	ldr	r3, [pc, #120]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 8003286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003288:	4a1d      	ldr	r2, [pc, #116]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fd fde0 	bl	8000e54 <HAL_GetTick>
 8003294:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fd fddc 	bl	8000e54 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e200      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032aa:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d039      	beq.n	8003336 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01c      	beq.n	8003304 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80032d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032d6:	f7fd fdbd 	bl	8000e54 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032de:	f7fd fdb9 	bl	8000e54 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1dd      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HAL_RCC_OscConfig+0x4f8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x4d6>
 80032fc:	e01b      	b.n	8003336 <HAL_RCC_OscConfig+0x52e>
 80032fe:	bf00      	nop
 8003300:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003304:	4b9b      	ldr	r3, [pc, #620]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a9a      	ldr	r2, [pc, #616]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800330a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800330e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003310:	f7fd fda0 	bl	8000e54 <HAL_GetTick>
 8003314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003318:	f7fd fd9c 	bl	8000e54 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e1c0      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800332a:	4b92      	ldr	r3, [pc, #584]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8081 	beq.w	8003446 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003344:	4b8c      	ldr	r3, [pc, #560]	@ (8003578 <HAL_RCC_OscConfig+0x770>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a8b      	ldr	r2, [pc, #556]	@ (8003578 <HAL_RCC_OscConfig+0x770>)
 800334a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003350:	f7fd fd80 	bl	8000e54 <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7fd fd7c 	bl	8000e54 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	@ 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e1a0      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800336a:	4b83      	ldr	r3, [pc, #524]	@ (8003578 <HAL_RCC_OscConfig+0x770>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x584>
 800337e:	4b7d      	ldr	r3, [pc, #500]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	4a7c      	ldr	r2, [pc, #496]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	@ 0x70
 800338a:	e02d      	b.n	80033e8 <HAL_RCC_OscConfig+0x5e0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x5a6>
 8003394:	4b77      	ldr	r3, [pc, #476]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4a76      	ldr	r2, [pc, #472]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a0:	4b74      	ldr	r3, [pc, #464]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a73      	ldr	r2, [pc, #460]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ac:	e01c      	b.n	80033e8 <HAL_RCC_OscConfig+0x5e0>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c8>
 80033b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c6:	4a6b      	ldr	r2, [pc, #428]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0x5e0>
 80033d0:	4b68      	ldr	r3, [pc, #416]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d4:	4a67      	ldr	r2, [pc, #412]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	6713      	str	r3, [r2, #112]	@ 0x70
 80033dc:	4b65      	ldr	r3, [pc, #404]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e0:	4a64      	ldr	r2, [pc, #400]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80033e2:	f023 0304 	bic.w	r3, r3, #4
 80033e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fd fd30 	bl	8000e54 <HAL_GetTick>
 80033f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fd fd2c 	bl	8000e54 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e14e      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800340e:	4b59      	ldr	r3, [pc, #356]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ee      	beq.n	80033f8 <HAL_RCC_OscConfig+0x5f0>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fd fd1a 	bl	8000e54 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fd fd16 	bl	8000e54 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e138      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800343a:	4b4e      	ldr	r3, [pc, #312]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ee      	bne.n	8003424 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 812d 	beq.w	80036aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003450:	4b48      	ldr	r3, [pc, #288]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003458:	2b18      	cmp	r3, #24
 800345a:	f000 80bd 	beq.w	80035d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	2b02      	cmp	r3, #2
 8003464:	f040 809e 	bne.w	80035a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b42      	ldr	r3, [pc, #264]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a41      	ldr	r2, [pc, #260]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800346e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fd fcee 	bl	8000e54 <HAL_GetTick>
 8003478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd fcea 	bl	8000e54 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e10e      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348e:	4b39      	ldr	r3, [pc, #228]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349a:	4b36      	ldr	r3, [pc, #216]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800349c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800349e:	4b37      	ldr	r3, [pc, #220]	@ (800357c <HAL_RCC_OscConfig+0x774>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	430a      	orrs	r2, r1
 80034ae:	4931      	ldr	r1, [pc, #196]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b8:	3b01      	subs	r3, #1
 80034ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c2:	3b01      	subs	r3, #1
 80034c4:	025b      	lsls	r3, r3, #9
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	3b01      	subs	r3, #1
 80034de:	061b      	lsls	r3, r3, #24
 80034e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80034e4:	4923      	ldr	r1, [pc, #140]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034ea:	4b22      	ldr	r3, [pc, #136]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ee:	4a21      	ldr	r2, [pc, #132]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 80034f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034fa:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <HAL_RCC_OscConfig+0x778>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003502:	00d2      	lsls	r2, r2, #3
 8003504:	491b      	ldr	r1, [pc, #108]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003506:	4313      	orrs	r3, r2
 8003508:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800350a:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	f023 020c 	bic.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	4917      	ldr	r1, [pc, #92]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800351c:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800351e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003520:	f023 0202 	bic.w	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003528:	4912      	ldr	r1, [pc, #72]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800352a:	4313      	orrs	r3, r2
 800352c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800352e:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	4a10      	ldr	r2, [pc, #64]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003538:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800353a:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	4a0d      	ldr	r2, [pc, #52]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003546:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354a:	4a0a      	ldr	r2, [pc, #40]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003552:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	4a07      	ldr	r2, [pc, #28]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355e:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <HAL_RCC_OscConfig+0x76c>)
 8003564:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd fc73 	bl	8000e54 <HAL_GetTick>
 800356e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003570:	e011      	b.n	8003596 <HAL_RCC_OscConfig+0x78e>
 8003572:	bf00      	nop
 8003574:	58024400 	.word	0x58024400
 8003578:	58024800 	.word	0x58024800
 800357c:	fffffc0c 	.word	0xfffffc0c
 8003580:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fd fc66 	bl	8000e54 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e08a      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003596:	4b47      	ldr	r3, [pc, #284]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x77c>
 80035a2:	e082      	b.n	80036aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	4b43      	ldr	r3, [pc, #268]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a42      	ldr	r2, [pc, #264]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 80035aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd fc50 	bl	8000e54 <HAL_GetTick>
 80035b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fd fc4c 	bl	8000e54 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e070      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ca:	4b3a      	ldr	r3, [pc, #232]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x7b0>
 80035d6:	e068      	b.n	80036aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035d8:	4b36      	ldr	r3, [pc, #216]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035de:	4b35      	ldr	r3, [pc, #212]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d031      	beq.n	8003650 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f003 0203 	and.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d12a      	bne.n	8003650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d122      	bne.n	8003650 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003614:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d11a      	bne.n	8003650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	0a5b      	lsrs	r3, r3, #9
 800361e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003626:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d111      	bne.n	8003650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d108      	bne.n	8003650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	0e1b      	lsrs	r3, r3, #24
 8003642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e02b      	b.n	80036ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003654:	4b17      	ldr	r3, [pc, #92]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 8003656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800365e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	429a      	cmp	r2, r3
 8003668:	d01f      	beq.n	80036aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800366a:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	4a11      	ldr	r2, [pc, #68]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003676:	f7fd fbed 	bl	8000e54 <HAL_GetTick>
 800367a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800367c:	bf00      	nop
 800367e:	f7fd fbe9 	bl	8000e54 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	4293      	cmp	r3, r2
 8003688:	d0f9      	beq.n	800367e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800368a:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 800368c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800368e:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <HAL_RCC_OscConfig+0x8b0>)
 8003690:	4013      	ands	r3, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003696:	00d2      	lsls	r2, r2, #3
 8003698:	4906      	ldr	r1, [pc, #24]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 800369a:	4313      	orrs	r3, r2
 800369c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800369e:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	4a04      	ldr	r2, [pc, #16]	@ (80036b4 <HAL_RCC_OscConfig+0x8ac>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3730      	adds	r7, #48	@ 0x30
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	58024400 	.word	0x58024400
 80036b8:	ffff0007 	.word	0xffff0007

080036bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e19c      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b8a      	ldr	r3, [pc, #552]	@ (80038fc <HAL_RCC_ClockConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d910      	bls.n	8003700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b87      	ldr	r3, [pc, #540]	@ (80038fc <HAL_RCC_ClockConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	4985      	ldr	r1, [pc, #532]	@ (80038fc <HAL_RCC_ClockConfig+0x240>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b83      	ldr	r3, [pc, #524]	@ (80038fc <HAL_RCC_ClockConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e184      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	4b7b      	ldr	r3, [pc, #492]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003718:	429a      	cmp	r2, r3
 800371a:	d908      	bls.n	800372e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800371c:	4b78      	ldr	r3, [pc, #480]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4975      	ldr	r1, [pc, #468]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800372a:	4313      	orrs	r3, r2
 800372c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	4b70      	ldr	r3, [pc, #448]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003746:	429a      	cmp	r2, r3
 8003748:	d908      	bls.n	800375c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800374a:	4b6d      	ldr	r3, [pc, #436]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	496a      	ldr	r1, [pc, #424]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003758:	4313      	orrs	r3, r2
 800375a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d010      	beq.n	800378a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	4b64      	ldr	r3, [pc, #400]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003774:	429a      	cmp	r2, r3
 8003776:	d908      	bls.n	800378a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003778:	4b61      	ldr	r3, [pc, #388]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	495e      	ldr	r1, [pc, #376]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003786:	4313      	orrs	r3, r2
 8003788:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	4b59      	ldr	r3, [pc, #356]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d908      	bls.n	80037b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037a6:	4b56      	ldr	r3, [pc, #344]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	4953      	ldr	r1, [pc, #332]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d010      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d908      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f023 020f 	bic.w	r2, r3, #15
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4947      	ldr	r1, [pc, #284]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d055      	beq.n	800389e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037f2:	4b43      	ldr	r3, [pc, #268]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4940      	ldr	r1, [pc, #256]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003800:	4313      	orrs	r3, r2
 8003802:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d107      	bne.n	800381c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800380c:	4b3c      	ldr	r3, [pc, #240]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d121      	bne.n	800385c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0f6      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d107      	bne.n	8003834 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003824:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d115      	bne.n	800385c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0ea      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800383c:	4b30      	ldr	r3, [pc, #192]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0de      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800384c:	4b2c      	ldr	r3, [pc, #176]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0d6      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800385c:	4b28      	ldr	r3, [pc, #160]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f023 0207 	bic.w	r2, r3, #7
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4925      	ldr	r1, [pc, #148]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800386a:	4313      	orrs	r3, r2
 800386c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386e:	f7fd faf1 	bl	8000e54 <HAL_GetTick>
 8003872:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003874:	e00a      	b.n	800388c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003876:	f7fd faed 	bl	8000e54 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0be      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388c:	4b1c      	ldr	r3, [pc, #112]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	429a      	cmp	r2, r3
 800389c:	d1eb      	bne.n	8003876 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d010      	beq.n	80038cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d208      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ba:	4b11      	ldr	r3, [pc, #68]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f023 020f 	bic.w	r2, r3, #15
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	490e      	ldr	r1, [pc, #56]	@ (8003900 <HAL_RCC_ClockConfig+0x244>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_RCC_ClockConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d214      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <HAL_RCC_ClockConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 020f 	bic.w	r2, r3, #15
 80038e2:	4906      	ldr	r1, [pc, #24]	@ (80038fc <HAL_RCC_ClockConfig+0x240>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b04      	ldr	r3, [pc, #16]	@ (80038fc <HAL_RCC_ClockConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e086      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
 80038fc:	52002000 	.word	0x52002000
 8003900:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d010      	beq.n	8003932 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	4b3f      	ldr	r3, [pc, #252]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800391c:	429a      	cmp	r2, r3
 800391e:	d208      	bcs.n	8003932 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003920:	4b3c      	ldr	r3, [pc, #240]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	4939      	ldr	r1, [pc, #228]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 800392e:	4313      	orrs	r3, r2
 8003930:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d010      	beq.n	8003960 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	4b34      	ldr	r3, [pc, #208]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800394a:	429a      	cmp	r2, r3
 800394c:	d208      	bcs.n	8003960 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800394e:	4b31      	ldr	r3, [pc, #196]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	492e      	ldr	r1, [pc, #184]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 800395c:	4313      	orrs	r3, r2
 800395e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	d010      	beq.n	800398e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	4b28      	ldr	r3, [pc, #160]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003978:	429a      	cmp	r2, r3
 800397a:	d208      	bcs.n	800398e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800397c:	4b25      	ldr	r3, [pc, #148]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	4922      	ldr	r1, [pc, #136]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 800398a:	4313      	orrs	r3, r2
 800398c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d010      	beq.n	80039bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d208      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4917      	ldr	r1, [pc, #92]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039bc:	f000 f834 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	4912      	ldr	r1, [pc, #72]	@ (8003a18 <HAL_RCC_ClockConfig+0x35c>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
 80039d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039da:	4b0e      	ldr	r3, [pc, #56]	@ (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003a18 <HAL_RCC_ClockConfig+0x35c>)
 80039e4:	5cd3      	ldrb	r3, [r2, r3]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
 80039f0:	4a0a      	ldr	r2, [pc, #40]	@ (8003a1c <HAL_RCC_ClockConfig+0x360>)
 80039f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003a20 <HAL_RCC_ClockConfig+0x364>)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80039fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <HAL_RCC_ClockConfig+0x368>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd f9de 	bl	8000dc0 <HAL_InitTick>
 8003a04:	4603      	mov	r3, r0
 8003a06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	58024400 	.word	0x58024400
 8003a18:	080123e0 	.word	0x080123e0
 8003a1c:	24000004 	.word	0x24000004
 8003a20:	24000000 	.word	0x24000000
 8003a24:	24000008 	.word	0x24000008

08003a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	@ 0x24
 8003a2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a2e:	4bb3      	ldr	r3, [pc, #716]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a36:	2b18      	cmp	r3, #24
 8003a38:	f200 8155 	bhi.w	8003ce6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003aa9 	.word	0x08003aa9
 8003a48:	08003ce7 	.word	0x08003ce7
 8003a4c:	08003ce7 	.word	0x08003ce7
 8003a50:	08003ce7 	.word	0x08003ce7
 8003a54:	08003ce7 	.word	0x08003ce7
 8003a58:	08003ce7 	.word	0x08003ce7
 8003a5c:	08003ce7 	.word	0x08003ce7
 8003a60:	08003ce7 	.word	0x08003ce7
 8003a64:	08003acf 	.word	0x08003acf
 8003a68:	08003ce7 	.word	0x08003ce7
 8003a6c:	08003ce7 	.word	0x08003ce7
 8003a70:	08003ce7 	.word	0x08003ce7
 8003a74:	08003ce7 	.word	0x08003ce7
 8003a78:	08003ce7 	.word	0x08003ce7
 8003a7c:	08003ce7 	.word	0x08003ce7
 8003a80:	08003ce7 	.word	0x08003ce7
 8003a84:	08003ad5 	.word	0x08003ad5
 8003a88:	08003ce7 	.word	0x08003ce7
 8003a8c:	08003ce7 	.word	0x08003ce7
 8003a90:	08003ce7 	.word	0x08003ce7
 8003a94:	08003ce7 	.word	0x08003ce7
 8003a98:	08003ce7 	.word	0x08003ce7
 8003a9c:	08003ce7 	.word	0x08003ce7
 8003aa0:	08003ce7 	.word	0x08003ce7
 8003aa4:	08003adb 	.word	0x08003adb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aa8:	4b94      	ldr	r3, [pc, #592]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ab4:	4b91      	ldr	r3, [pc, #580]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	08db      	lsrs	r3, r3, #3
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	4a90      	ldr	r2, [pc, #576]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ac6:	e111      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ac8:	4b8d      	ldr	r3, [pc, #564]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003aca:	61bb      	str	r3, [r7, #24]
      break;
 8003acc:	e10e      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ace:	4b8d      	ldr	r3, [pc, #564]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ad0:	61bb      	str	r3, [r7, #24]
      break;
 8003ad2:	e10b      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ad4:	4b8c      	ldr	r3, [pc, #560]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ad6:	61bb      	str	r3, [r7, #24]
      break;
 8003ad8:	e108      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ada:	4b88      	ldr	r3, [pc, #544]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ae4:	4b85      	ldr	r3, [pc, #532]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003af0:	4b82      	ldr	r3, [pc, #520]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003afa:	4b80      	ldr	r3, [pc, #512]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afe:	08db      	lsrs	r3, r3, #3
 8003b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80e1 	beq.w	8003ce0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	f000 8083 	beq.w	8003c2c <HAL_RCC_GetSysClockFreq+0x204>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	f200 80a1 	bhi.w	8003c70 <HAL_RCC_GetSysClockFreq+0x248>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x114>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d056      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b3a:	e099      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02d      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b48:	4b6c      	ldr	r3, [pc, #432]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	4a6b      	ldr	r2, [pc, #428]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
 8003b58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b72:	4b62      	ldr	r3, [pc, #392]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b86:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ba2:	e087      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003d10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb6:	4b51      	ldr	r3, [pc, #324]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003be6:	e065      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003d14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfa:	4b40      	ldr	r3, [pc, #256]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c2a:	e043      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003d18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c6e:	e021      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003d14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c82:	4b1e      	ldr	r3, [pc, #120]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003cb4:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	0a5b      	lsrs	r3, r3, #9
 8003cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	ee07 3a90 	vmov	s15, r3
 8003cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd8:	ee17 3a90 	vmov	r3, s15
 8003cdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003cde:	e005      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
      break;
 8003ce4:	e002      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ce6:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ce8:	61bb      	str	r3, [r7, #24]
      break;
 8003cea:	bf00      	nop
  }

  return sysclockfreq;
 8003cec:	69bb      	ldr	r3, [r7, #24]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	@ 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	03d09000 	.word	0x03d09000
 8003d04:	003d0900 	.word	0x003d0900
 8003d08:	017d7840 	.word	0x017d7840
 8003d0c:	46000000 	.word	0x46000000
 8003d10:	4c742400 	.word	0x4c742400
 8003d14:	4a742400 	.word	0x4a742400
 8003d18:	4bbebc20 	.word	0x4bbebc20

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d22:	f7ff fe81 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b10      	ldr	r3, [pc, #64]	@ (8003d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	490f      	ldr	r1, [pc, #60]	@ (8003d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d40:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	4a09      	ldr	r2, [pc, #36]	@ (8003d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d4a:	5cd3      	ldrb	r3, [r2, r3]
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	fa22 f303 	lsr.w	r3, r2, r3
 8003d56:	4a07      	ldr	r2, [pc, #28]	@ (8003d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d5a:	4a07      	ldr	r2, [pc, #28]	@ (8003d78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d60:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	080123e0 	.word	0x080123e0
 8003d74:	24000004 	.word	0x24000004
 8003d78:	24000000 	.word	0x24000000

08003d7c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003d82:	4b87      	ldr	r3, [pc, #540]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003d84:	22c0      	movs	r2, #192	@ 0xc0
 8003d86:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003d88:	4b85      	ldr	r3, [pc, #532]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003d8a:	22a8      	movs	r2, #168	@ 0xa8
 8003d8c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003d8e:	4b84      	ldr	r3, [pc, #528]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8003d94:	4b82      	ldr	r3, [pc, #520]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003d96:	226f      	movs	r2, #111	@ 0x6f
 8003d98:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003d9a:	4b82      	ldr	r3, [pc, #520]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003d9c:	22ff      	movs	r2, #255	@ 0xff
 8003d9e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003da0:	4b80      	ldr	r3, [pc, #512]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003da2:	22ff      	movs	r2, #255	@ 0xff
 8003da4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003da6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003da8:	22ff      	movs	r2, #255	@ 0xff
 8003daa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003dac:	4b7d      	ldr	r3, [pc, #500]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003db2:	4b7d      	ldr	r3, [pc, #500]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003db4:	22c0      	movs	r2, #192	@ 0xc0
 8003db6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003db8:	4b7b      	ldr	r3, [pc, #492]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003dba:	22a8      	movs	r2, #168	@ 0xa8
 8003dbc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003dc4:	4b78      	ldr	r3, [pc, #480]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8003dca:	f001 ffb3 	bl	8005d34 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003dce:	4b74      	ldr	r3, [pc, #464]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	061a      	lsls	r2, r3, #24
 8003dd4:	4b72      	ldr	r3, [pc, #456]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	4b70      	ldr	r3, [pc, #448]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003dde:	789b      	ldrb	r3, [r3, #2]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	4313      	orrs	r3, r2
 8003de4:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003de6:	78d2      	ldrb	r2, [r2, #3]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	061a      	lsls	r2, r3, #24
 8003dec:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	0619      	lsls	r1, r3, #24
 8003df2:	4b6b      	ldr	r3, [pc, #428]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	4319      	orrs	r1, r3
 8003dfa:	4b69      	ldr	r3, [pc, #420]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003dfc:	789b      	ldrb	r3, [r3, #2]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	430b      	orrs	r3, r1
 8003e02:	4967      	ldr	r1, [pc, #412]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003e04:	78c9      	ldrb	r1, [r1, #3]
 8003e06:	430b      	orrs	r3, r1
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	4b63      	ldr	r3, [pc, #396]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	0619      	lsls	r1, r3, #24
 8003e16:	4b62      	ldr	r3, [pc, #392]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	4319      	orrs	r1, r3
 8003e1e:	4b60      	ldr	r3, [pc, #384]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003e20:	789b      	ldrb	r3, [r3, #2]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	430b      	orrs	r3, r1
 8003e26:	495e      	ldr	r1, [pc, #376]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003e28:	78c9      	ldrb	r1, [r1, #3]
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003e32:	431a      	orrs	r2, r3
 8003e34:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	0619      	lsls	r1, r3, #24
 8003e3a:	4b59      	ldr	r3, [pc, #356]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	4319      	orrs	r1, r3
 8003e42:	4b57      	ldr	r3, [pc, #348]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003e44:	789b      	ldrb	r3, [r3, #2]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	4955      	ldr	r1, [pc, #340]	@ (8003fa0 <MX_LWIP_Init+0x224>)
 8003e4c:	78c9      	ldrb	r1, [r1, #3]
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	0e1b      	lsrs	r3, r3, #24
 8003e52:	4313      	orrs	r3, r2
 8003e54:	4a55      	ldr	r2, [pc, #340]	@ (8003fac <MX_LWIP_Init+0x230>)
 8003e56:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003e58:	4b52      	ldr	r3, [pc, #328]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	061a      	lsls	r2, r3, #24
 8003e5e:	4b51      	ldr	r3, [pc, #324]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	431a      	orrs	r2, r3
 8003e66:	4b4f      	ldr	r3, [pc, #316]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003e68:	789b      	ldrb	r3, [r3, #2]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	4a4d      	ldr	r2, [pc, #308]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003e70:	78d2      	ldrb	r2, [r2, #3]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	061a      	lsls	r2, r3, #24
 8003e76:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	0619      	lsls	r1, r3, #24
 8003e7c:	4b49      	ldr	r3, [pc, #292]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	4319      	orrs	r1, r3
 8003e84:	4b47      	ldr	r3, [pc, #284]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003e86:	789b      	ldrb	r3, [r3, #2]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	4945      	ldr	r1, [pc, #276]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003e8e:	78c9      	ldrb	r1, [r1, #3]
 8003e90:	430b      	orrs	r3, r1
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	4b42      	ldr	r3, [pc, #264]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	0619      	lsls	r1, r3, #24
 8003ea0:	4b40      	ldr	r3, [pc, #256]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	4319      	orrs	r1, r3
 8003ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003eaa:	789b      	ldrb	r3, [r3, #2]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	493c      	ldr	r1, [pc, #240]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003eb2:	78c9      	ldrb	r1, [r1, #3]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	4b39      	ldr	r3, [pc, #228]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	0619      	lsls	r1, r3, #24
 8003ec4:	4b37      	ldr	r3, [pc, #220]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	4319      	orrs	r1, r3
 8003ecc:	4b35      	ldr	r3, [pc, #212]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003ece:	789b      	ldrb	r3, [r3, #2]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	4933      	ldr	r1, [pc, #204]	@ (8003fa4 <MX_LWIP_Init+0x228>)
 8003ed6:	78c9      	ldrb	r1, [r1, #3]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	0e1b      	lsrs	r3, r3, #24
 8003edc:	4313      	orrs	r3, r2
 8003ede:	4a34      	ldr	r2, [pc, #208]	@ (8003fb0 <MX_LWIP_Init+0x234>)
 8003ee0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003ee2:	4b31      	ldr	r3, [pc, #196]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	061a      	lsls	r2, r3, #24
 8003ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003ef2:	789b      	ldrb	r3, [r3, #2]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003efa:	78d2      	ldrb	r2, [r2, #3]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	061a      	lsls	r2, r3, #24
 8003f00:	4b29      	ldr	r3, [pc, #164]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	0619      	lsls	r1, r3, #24
 8003f06:	4b28      	ldr	r3, [pc, #160]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	4319      	orrs	r1, r3
 8003f0e:	4b26      	ldr	r3, [pc, #152]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f10:	789b      	ldrb	r3, [r3, #2]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	430b      	orrs	r3, r1
 8003f16:	4924      	ldr	r1, [pc, #144]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f18:	78c9      	ldrb	r1, [r1, #3]
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003f22:	431a      	orrs	r2, r3
 8003f24:	4b20      	ldr	r3, [pc, #128]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	0619      	lsls	r1, r3, #24
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	4319      	orrs	r1, r3
 8003f32:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f34:	789b      	ldrb	r3, [r3, #2]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	491b      	ldr	r1, [pc, #108]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f3c:	78c9      	ldrb	r1, [r1, #3]
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003f46:	431a      	orrs	r2, r3
 8003f48:	4b17      	ldr	r3, [pc, #92]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	0619      	lsls	r1, r3, #24
 8003f4e:	4b16      	ldr	r3, [pc, #88]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f50:	785b      	ldrb	r3, [r3, #1]
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	4319      	orrs	r1, r3
 8003f56:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f58:	789b      	ldrb	r3, [r3, #2]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	4912      	ldr	r1, [pc, #72]	@ (8003fa8 <MX_LWIP_Init+0x22c>)
 8003f60:	78c9      	ldrb	r1, [r1, #3]
 8003f62:	430b      	orrs	r3, r1
 8003f64:	0e1b      	lsrs	r3, r3, #24
 8003f66:	4313      	orrs	r3, r2
 8003f68:	4a12      	ldr	r2, [pc, #72]	@ (8003fb4 <MX_LWIP_Init+0x238>)
 8003f6a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003f6c:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <MX_LWIP_Init+0x23c>)
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <MX_LWIP_Init+0x240>)
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	2300      	movs	r3, #0
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb4 <MX_LWIP_Init+0x238>)
 8003f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb0 <MX_LWIP_Init+0x234>)
 8003f7c:	490b      	ldr	r1, [pc, #44]	@ (8003fac <MX_LWIP_Init+0x230>)
 8003f7e:	4810      	ldr	r0, [pc, #64]	@ (8003fc0 <MX_LWIP_Init+0x244>)
 8003f80:	f003 fcd6 	bl	8007930 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003f84:	480e      	ldr	r0, [pc, #56]	@ (8003fc0 <MX_LWIP_Init+0x244>)
 8003f86:	f003 fe85 	bl	8007c94 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003f8a:	480d      	ldr	r0, [pc, #52]	@ (8003fc0 <MX_LWIP_Init+0x244>)
 8003f8c:	f003 fe92 	bl	8007cb4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003f90:	490c      	ldr	r1, [pc, #48]	@ (8003fc4 <MX_LWIP_Init+0x248>)
 8003f92:	480b      	ldr	r0, [pc, #44]	@ (8003fc0 <MX_LWIP_Init+0x244>)
 8003f94:	f003 ff90 	bl	8007eb8 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	24004b34 	.word	0x24004b34
 8003fa4:	24004b38 	.word	0x24004b38
 8003fa8:	24004b3c 	.word	0x24004b3c
 8003fac:	24004b28 	.word	0x24004b28
 8003fb0:	24004b2c 	.word	0x24004b2c
 8003fb4:	24004b30 	.word	0x24004b30
 8003fb8:	080056a9 	.word	0x080056a9
 8003fbc:	08004295 	.word	0x08004295
 8003fc0:	24004af4 	.word	0x24004af4
 8003fc4:	08003fc9 	.word	0x08003fc9

08003fc8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003fe8:	4b44      	ldr	r3, [pc, #272]	@ (80040fc <low_level_init+0x120>)
 8003fea:	4a45      	ldr	r2, [pc, #276]	@ (8004100 <low_level_init+0x124>)
 8003fec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003ff2:	2380      	movs	r3, #128	@ 0x80
 8003ff4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003ff6:	23e1      	movs	r3, #225	@ 0xe1
 8003ff8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003ffe:	2300      	movs	r3, #0
 8004000:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004002:	2300      	movs	r3, #0
 8004004:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004006:	4a3d      	ldr	r2, [pc, #244]	@ (80040fc <low_level_init+0x120>)
 8004008:	f107 0308 	add.w	r3, r7, #8
 800400c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800400e:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <low_level_init+0x120>)
 8004010:	2201      	movs	r2, #1
 8004012:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004014:	4b39      	ldr	r3, [pc, #228]	@ (80040fc <low_level_init+0x120>)
 8004016:	4a3b      	ldr	r2, [pc, #236]	@ (8004104 <low_level_init+0x128>)
 8004018:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800401a:	4b38      	ldr	r3, [pc, #224]	@ (80040fc <low_level_init+0x120>)
 800401c:	4a3a      	ldr	r2, [pc, #232]	@ (8004108 <low_level_init+0x12c>)
 800401e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004020:	4b36      	ldr	r3, [pc, #216]	@ (80040fc <low_level_init+0x120>)
 8004022:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004026:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004028:	4834      	ldr	r0, [pc, #208]	@ (80040fc <low_level_init+0x120>)
 800402a:	f7fd f89b 	bl	8001164 <HAL_ETH_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004032:	2238      	movs	r2, #56	@ 0x38
 8004034:	2100      	movs	r1, #0
 8004036:	4835      	ldr	r0, [pc, #212]	@ (800410c <low_level_init+0x130>)
 8004038:	f00a fb0d 	bl	800e656 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800403c:	4b33      	ldr	r3, [pc, #204]	@ (800410c <low_level_init+0x130>)
 800403e:	2221      	movs	r2, #33	@ 0x21
 8004040:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004042:	4b32      	ldr	r3, [pc, #200]	@ (800410c <low_level_init+0x130>)
 8004044:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004048:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800404a:	4b30      	ldr	r3, [pc, #192]	@ (800410c <low_level_init+0x130>)
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004050:	482f      	ldr	r0, [pc, #188]	@ (8004110 <low_level_init+0x134>)
 8004052:	f003 fb35 	bl	80076c0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2206      	movs	r2, #6
 800405a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800405e:	4b27      	ldr	r3, [pc, #156]	@ (80040fc <low_level_init+0x120>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800406a:	4b24      	ldr	r3, [pc, #144]	@ (80040fc <low_level_init+0x120>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	785a      	ldrb	r2, [r3, #1]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004076:	4b21      	ldr	r3, [pc, #132]	@ (80040fc <low_level_init+0x120>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	789a      	ldrb	r2, [r3, #2]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004082:	4b1e      	ldr	r3, [pc, #120]	@ (80040fc <low_level_init+0x120>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	78da      	ldrb	r2, [r3, #3]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800408e:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <low_level_init+0x120>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	791a      	ldrb	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800409a:	4b18      	ldr	r3, [pc, #96]	@ (80040fc <low_level_init+0x120>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	795a      	ldrb	r2, [r3, #5]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80040ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80040b4:	f043 030a 	orr.w	r3, r3, #10
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80040c0:	4914      	ldr	r1, [pc, #80]	@ (8004114 <low_level_init+0x138>)
 80040c2:	4815      	ldr	r0, [pc, #84]	@ (8004118 <low_level_init+0x13c>)
 80040c4:	f7fc fd39 	bl	8000b3a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80040c8:	4813      	ldr	r0, [pc, #76]	@ (8004118 <low_level_init+0x13c>)
 80040ca:	f7fc fd68 	bl	8000b9e <LAN8742_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <low_level_init+0x106>
  {
    netif_set_link_down(netif);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f003 febf 	bl	8007e58 <netif_set_link_down>
    netif_set_down(netif);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f003 fe56 	bl	8007d8c <netif_set_down>
 80040e0:	e008      	b.n	80040f4 <low_level_init+0x118>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <low_level_init+0x114>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fa3f 	bl	800456c <ethernet_link_check_state>
 80040ee:	e001      	b.n	80040f4 <low_level_init+0x118>
  }
  else
  {
    Error_Handler();
 80040f0:	f7fc fbdd 	bl	80008ae <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	24004b48 	.word	0x24004b48
 8004100:	40028000 	.word	0x40028000
 8004104:	24004a70 	.word	0x24004a70
 8004108:	24004a10 	.word	0x24004a10
 800410c:	24004bf8 	.word	0x24004bf8
 8004110:	080123f0 	.word	0x080123f0
 8004114:	24000010 	.word	0x24000010
 8004118:	24004c30 	.word	0x24004c30

0800411c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b092      	sub	sp, #72	@ 0x48
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	2230      	movs	r2, #48	@ 0x30
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f00a fa8a 	bl	800e656 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004142:	f107 030c 	add.w	r3, r7, #12
 8004146:	2230      	movs	r2, #48	@ 0x30
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f00a fa83 	bl	800e656 <memset>

  for(q = p; q != NULL; q = q->next)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	643b      	str	r3, [r7, #64]	@ 0x40
 8004154:	e045      	b.n	80041e2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004158:	2b03      	cmp	r3, #3
 800415a:	d902      	bls.n	8004162 <low_level_output+0x46>
      return ERR_IF;
 800415c:	f06f 030b 	mvn.w	r3, #11
 8004160:	e055      	b.n	800420e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	3348      	adds	r3, #72	@ 0x48
 8004172:	443b      	add	r3, r7
 8004174:	3b3c      	subs	r3, #60	@ 0x3c
 8004176:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417a:	895b      	ldrh	r3, [r3, #10]
 800417c:	4619      	mov	r1, r3
 800417e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	3348      	adds	r3, #72	@ 0x48
 800418a:	443b      	add	r3, r7
 800418c:	3b38      	subs	r3, #56	@ 0x38
 800418e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004192:	2b00      	cmp	r3, #0
 8004194:	d011      	beq.n	80041ba <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004198:	1e5a      	subs	r2, r3, #1
 800419a:	f107 000c 	add.w	r0, r7, #12
 800419e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041a0:	460b      	mov	r3, r1
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	440b      	add	r3, r1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	18c1      	adds	r1, r0, r3
 80041aa:	4613      	mov	r3, r2
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	3348      	adds	r3, #72	@ 0x48
 80041b4:	443b      	add	r3, r7
 80041b6:	3b34      	subs	r3, #52	@ 0x34
 80041b8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80041ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80041c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c4:	4613      	mov	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	3348      	adds	r3, #72	@ 0x48
 80041ce:	443b      	add	r3, r7
 80041d0:	3b34      	subs	r3, #52	@ 0x34
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80041d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d8:	3301      	adds	r3, #1
 80041da:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80041dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1b6      	bne.n	8004156 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	891b      	ldrh	r3, [r3, #8]
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004218 <low_level_output+0xfc>)
 80041f0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80041f2:	4a09      	ldr	r2, [pc, #36]	@ (8004218 <low_level_output+0xfc>)
 80041f4:	f107 030c 	add.w	r3, r7, #12
 80041f8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80041fa:	4a07      	ldr	r2, [pc, #28]	@ (8004218 <low_level_output+0xfc>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004200:	2214      	movs	r2, #20
 8004202:	4905      	ldr	r1, [pc, #20]	@ (8004218 <low_level_output+0xfc>)
 8004204:	4805      	ldr	r0, [pc, #20]	@ (800421c <low_level_output+0x100>)
 8004206:	f7fd f95d 	bl	80014c4 <HAL_ETH_Transmit>

  return errval;
 800420a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800420e:	4618      	mov	r0, r3
 8004210:	3748      	adds	r7, #72	@ 0x48
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	24004bf8 	.word	0x24004bf8
 800421c:	24004b48 	.word	0x24004b48

08004220 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800422c:	4b07      	ldr	r3, [pc, #28]	@ (800424c <low_level_input+0x2c>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004234:	f107 030c 	add.w	r3, r7, #12
 8004238:	4619      	mov	r1, r3
 800423a:	4805      	ldr	r0, [pc, #20]	@ (8004250 <low_level_input+0x30>)
 800423c:	f7fd f9d9 	bl	80015f2 <HAL_ETH_ReadData>
  }

  return p;
 8004240:	68fb      	ldr	r3, [r7, #12]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	24004b44 	.word	0x24004b44
 8004250:	24004b48 	.word	0x24004b48

08004254 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ffdd 	bl	8004220 <low_level_input>
 8004266:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	4798      	blx	r3
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f004 f99a 	bl	80085b8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1ea      	bne.n	8004260 <ethernetif_input+0xc>
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <ethernetif_init+0x1c>
 80042a2:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <ethernetif_init+0x48>)
 80042a4:	f240 128b 	movw	r2, #395	@ 0x18b
 80042a8:	490d      	ldr	r1, [pc, #52]	@ (80042e0 <ethernetif_init+0x4c>)
 80042aa:	480e      	ldr	r0, [pc, #56]	@ (80042e4 <ethernetif_init+0x50>)
 80042ac:	f00a f96e 	bl	800e58c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2273      	movs	r2, #115	@ 0x73
 80042b4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2274      	movs	r2, #116	@ 0x74
 80042bc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a09      	ldr	r2, [pc, #36]	@ (80042e8 <ethernetif_init+0x54>)
 80042c4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a08      	ldr	r2, [pc, #32]	@ (80042ec <ethernetif_init+0x58>)
 80042ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fe85 	bl	8003fdc <low_level_init>

  return ERR_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	0800f3b8 	.word	0x0800f3b8
 80042e0:	0800f3d4 	.word	0x0800f3d4
 80042e4:	0800f3e4 	.word	0x0800f3e4
 80042e8:	080050a9 	.word	0x080050a9
 80042ec:	0800411d 	.word	0x0800411d

080042f0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	4807      	ldr	r0, [pc, #28]	@ (800431c <pbuf_free_custom+0x2c>)
 8004300:	f003 fac0 	bl	8007884 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004304:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <pbuf_free_custom+0x30>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d102      	bne.n	8004312 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800430c:	4b04      	ldr	r3, [pc, #16]	@ (8004320 <pbuf_free_custom+0x30>)
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
  }
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	080123f0 	.word	0x080123f0
 8004320:	24004b44 	.word	0x24004b44

08004324 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004328:	f7fc fd94 	bl	8000e54 <HAL_GetTick>
 800432c:	4603      	mov	r3, r0
}
 800432e:	4618      	mov	r0, r3
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08e      	sub	sp, #56	@ 0x38
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a59      	ldr	r2, [pc, #356]	@ (80044b8 <HAL_ETH_MspInit+0x184>)
 8004352:	4293      	cmp	r3, r2
 8004354:	f040 80ab 	bne.w	80044ae <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004358:	4b58      	ldr	r3, [pc, #352]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 800435a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800435e:	4a57      	ldr	r2, [pc, #348]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 8004360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004364:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004368:	4b54      	ldr	r3, [pc, #336]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 800436a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800436e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004376:	4b51      	ldr	r3, [pc, #324]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 8004378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800437c:	4a4f      	ldr	r2, [pc, #316]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 800437e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004382:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004386:	4b4d      	ldr	r3, [pc, #308]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 8004388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800438c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004394:	4b49      	ldr	r3, [pc, #292]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 8004396:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800439a:	4a48      	ldr	r2, [pc, #288]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 800439c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80043a4:	4b45      	ldr	r3, [pc, #276]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 80043a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b2:	4b42      	ldr	r3, [pc, #264]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 80043b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043b8:	4a40      	ldr	r2, [pc, #256]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 80043ba:	f043 0304 	orr.w	r3, r3, #4
 80043be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043c2:	4b3e      	ldr	r3, [pc, #248]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 80043c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d0:	4b3a      	ldr	r3, [pc, #232]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 80043d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043d6:	4a39      	ldr	r2, [pc, #228]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043e0:	4b36      	ldr	r3, [pc, #216]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 80043e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ee:	4b33      	ldr	r3, [pc, #204]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 80043f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043f4:	4a31      	ldr	r2, [pc, #196]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 80043f6:	f043 0302 	orr.w	r3, r3, #2
 80043fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043fe:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 8004400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800440c:	4b2b      	ldr	r3, [pc, #172]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 800440e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004412:	4a2a      	ldr	r2, [pc, #168]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 8004414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800441c:	4b27      	ldr	r3, [pc, #156]	@ (80044bc <HAL_ETH_MspInit+0x188>)
 800441e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800442a:	2332      	movs	r3, #50	@ 0x32
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442e:	2302      	movs	r3, #2
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004436:	2300      	movs	r3, #0
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800443a:	230b      	movs	r3, #11
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800443e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004442:	4619      	mov	r1, r3
 8004444:	481e      	ldr	r0, [pc, #120]	@ (80044c0 <HAL_ETH_MspInit+0x18c>)
 8004446:	f7fe fa73 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800444a:	2386      	movs	r3, #134	@ 0x86
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444e:	2302      	movs	r3, #2
 8004450:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004452:	2300      	movs	r3, #0
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004456:	2300      	movs	r3, #0
 8004458:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800445a:	230b      	movs	r3, #11
 800445c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004462:	4619      	mov	r1, r3
 8004464:	4817      	ldr	r0, [pc, #92]	@ (80044c4 <HAL_ETH_MspInit+0x190>)
 8004466:	f7fe fa63 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800446a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004478:	2300      	movs	r3, #0
 800447a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800447c:	230b      	movs	r3, #11
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004484:	4619      	mov	r1, r3
 8004486:	4810      	ldr	r0, [pc, #64]	@ (80044c8 <HAL_ETH_MspInit+0x194>)
 8004488:	f7fe fa52 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800448c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004492:	2302      	movs	r3, #2
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	2300      	movs	r3, #0
 8004498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449a:	2300      	movs	r3, #0
 800449c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800449e:	230b      	movs	r3, #11
 80044a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044a6:	4619      	mov	r1, r3
 80044a8:	4808      	ldr	r0, [pc, #32]	@ (80044cc <HAL_ETH_MspInit+0x198>)
 80044aa:	f7fe fa41 	bl	8002930 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80044ae:	bf00      	nop
 80044b0:	3738      	adds	r7, #56	@ 0x38
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40028000 	.word	0x40028000
 80044bc:	58024400 	.word	0x58024400
 80044c0:	58020800 	.word	0x58020800
 80044c4:	58020000 	.word	0x58020000
 80044c8:	58020400 	.word	0x58020400
 80044cc:	58021800 	.word	0x58021800

080044d0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80044d4:	4802      	ldr	r0, [pc, #8]	@ (80044e0 <ETH_PHY_IO_Init+0x10>)
 80044d6:	f7fd fc59 	bl	8001d8c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	24004b48 	.word	0x24004b48

080044e4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return 0;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	68f9      	ldr	r1, [r7, #12]
 8004506:	4807      	ldr	r0, [pc, #28]	@ (8004524 <ETH_PHY_IO_ReadReg+0x30>)
 8004508:	f7fd f9a9 	bl	800185e <HAL_ETH_ReadPHYRegister>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004512:	f04f 33ff 	mov.w	r3, #4294967295
 8004516:	e000      	b.n	800451a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	24004b48 	.word	0x24004b48

08004528 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	68f9      	ldr	r1, [r7, #12]
 800453a:	4807      	ldr	r0, [pc, #28]	@ (8004558 <ETH_PHY_IO_WriteReg+0x30>)
 800453c:	f7fd f9e4 	bl	8001908 <HAL_ETH_WritePHYRegister>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	e000      	b.n	800454e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	24004b48 	.word	0x24004b48

0800455c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004560:	f7fc fc78 	bl	8000e54 <HAL_GetTick>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b0a0      	sub	sp, #128	@ 0x80
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	2264      	movs	r2, #100	@ 0x64
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f00a f86a 	bl	800e656 <memset>
  int32_t PHYLinkState = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800458a:	2300      	movs	r3, #0
 800458c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800458e:	2300      	movs	r3, #0
 8004590:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004592:	483a      	ldr	r0, [pc, #232]	@ (800467c <ethernet_link_check_state+0x110>)
 8004594:	f7fc fb50 	bl	8000c38 <LAN8742_GetLinkState>
 8004598:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00c      	beq.n	80045c6 <ethernet_link_check_state+0x5a>
 80045ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	dc09      	bgt.n	80045c6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80045b2:	4833      	ldr	r0, [pc, #204]	@ (8004680 <ethernet_link_check_state+0x114>)
 80045b4:	f7fc ff36 	bl	8001424 <HAL_ETH_Stop>
    netif_set_down(netif);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f003 fbe7 	bl	8007d8c <netif_set_down>
    netif_set_link_down(netif);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f003 fc4a 	bl	8007e58 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80045c4:	e055      	b.n	8004672 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d14e      	bne.n	8004672 <ethernet_link_check_state+0x106>
 80045d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	dd4b      	ble.n	8004672 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80045da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045dc:	3b02      	subs	r3, #2
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d82a      	bhi.n	8004638 <ethernet_link_check_state+0xcc>
 80045e2:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <ethernet_link_check_state+0x7c>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	0800460b 	.word	0x0800460b
 80045f0:	0800461b 	.word	0x0800461b
 80045f4:	0800462b 	.word	0x0800462b
      duplex = ETH_FULLDUPLEX_MODE;
 80045f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045fc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80045fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004602:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004604:	2301      	movs	r3, #1
 8004606:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004608:	e017      	b.n	800463a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800460a:	2300      	movs	r3, #0
 800460c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800460e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004612:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004614:	2301      	movs	r3, #1
 8004616:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004618:	e00f      	b.n	800463a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800461a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800461e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004620:	2300      	movs	r3, #0
 8004622:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004624:	2301      	movs	r3, #1
 8004626:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004628:	e007      	b.n	800463a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800462a:	2300      	movs	r3, #0
 800462c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800462e:	2300      	movs	r3, #0
 8004630:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004636:	e000      	b.n	800463a <ethernet_link_check_state+0xce>
      break;
 8004638:	bf00      	nop
    if(linkchanged)
 800463a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d018      	beq.n	8004672 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	4619      	mov	r1, r3
 8004646:	480e      	ldr	r0, [pc, #56]	@ (8004680 <ethernet_link_check_state+0x114>)
 8004648:	f7fd f9b2 	bl	80019b0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800464c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8004650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004652:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004654:	f107 030c 	add.w	r3, r7, #12
 8004658:	4619      	mov	r1, r3
 800465a:	4809      	ldr	r0, [pc, #36]	@ (8004680 <ethernet_link_check_state+0x114>)
 800465c:	f7fd fb7c 	bl	8001d58 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004660:	4807      	ldr	r0, [pc, #28]	@ (8004680 <ethernet_link_check_state+0x114>)
 8004662:	f7fc fe7d 	bl	8001360 <HAL_ETH_Start>
      netif_set_up(netif);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f003 fb24 	bl	8007cb4 <netif_set_up>
      netif_set_link_up(netif);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f003 fbbf 	bl	8007df0 <netif_set_link_up>
}
 8004672:	bf00      	nop
 8004674:	3780      	adds	r7, #128	@ 0x80
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	24004c30 	.word	0x24004c30
 8004680:	24004b48 	.word	0x24004b48

08004684 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af02      	add	r7, sp, #8
 800468a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800468c:	4812      	ldr	r0, [pc, #72]	@ (80046d8 <HAL_ETH_RxAllocateCallback+0x54>)
 800468e:	f003 f88b 	bl	80077a8 <memp_malloc_pool>
 8004692:	60f8      	str	r0, [r7, #12]
  if (p)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d014      	beq.n	80046c4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f103 0220 	add.w	r2, r3, #32
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a0d      	ldr	r2, [pc, #52]	@ (80046dc <HAL_ETH_RxAllocateCallback+0x58>)
 80046a8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80046b2:	9201      	str	r2, [sp, #4]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2241      	movs	r2, #65	@ 0x41
 80046ba:	2100      	movs	r1, #0
 80046bc:	2000      	movs	r0, #0
 80046be:	f003 fdc1 	bl	8008244 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80046c2:	e005      	b.n	80046d0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80046c4:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	080123f0 	.word	0x080123f0
 80046dc:	080042f1 	.word	0x080042f1
 80046e0:	24004b44 	.word	0x24004b44

080046e4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b08d      	sub	sp, #52	@ 0x34
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3b20      	subs	r3, #32
 8004702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8004704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800470a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470c:	2200      	movs	r2, #0
 800470e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004712:	887a      	ldrh	r2, [r7, #2]
 8004714:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	e003      	b.n	800472e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800472c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004732:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473a:	e009      	b.n	8004750 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	891a      	ldrh	r2, [r3, #8]
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	4413      	add	r3, r2
 8004744:	b29a      	uxth	r2, r3
 8004746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004748:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800474a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f2      	bne.n	800473c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	623a      	str	r2, [r7, #32]
 800475c:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	dd1d      	ble.n	80047a0 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	f003 021f 	and.w	r2, r3, #31
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004774:	f3bf 8f4f 	dsb	sy
}
 8004778:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800477a:	4a0d      	ldr	r2, [pc, #52]	@ (80047b0 <HAL_ETH_RxLinkCallback+0xcc>)
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	3320      	adds	r3, #32
 8004786:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	3b20      	subs	r3, #32
 800478c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	dcf2      	bgt.n	800477a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8004794:	f3bf 8f4f 	dsb	sy
}
 8004798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800479a:	f3bf 8f6f 	isb	sy
}
 800479e:	bf00      	nop
}
 80047a0:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80047a2:	bf00      	nop
 80047a4:	3734      	adds	r7, #52	@ 0x34
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	b21a      	sxth	r2, r3
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	b21b      	sxth	r3, r3
 80047cc:	4313      	orrs	r3, r2
 80047ce:	b21b      	sxth	r3, r3
 80047d0:	b29b      	uxth	r3, r3
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	061a      	lsls	r2, r3, #24
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	021b      	lsls	r3, r3, #8
 80047ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0e1b      	lsrs	r3, r3, #24
 8004802:	4313      	orrs	r3, r2
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004818:	4915      	ldr	r1, [pc, #84]	@ (8004870 <etharp_free_entry+0x60>)
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4413      	add	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	440b      	add	r3, r1
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800482c:	4910      	ldr	r1, [pc, #64]	@ (8004870 <etharp_free_entry+0x60>)
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4413      	add	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	440b      	add	r3, r1
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f003 febb 	bl	80085b8 <pbuf_free>
    arp_table[i].q = NULL;
 8004842:	490b      	ldr	r1, [pc, #44]	@ (8004870 <etharp_free_entry+0x60>)
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	440b      	add	r3, r1
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004854:	4906      	ldr	r1, [pc, #24]	@ (8004870 <etharp_free_entry+0x60>)
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	4413      	add	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	440b      	add	r3, r1
 8004862:	3314      	adds	r3, #20
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	24004c50 	.word	0x24004c50

08004874 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800487a:	2300      	movs	r3, #0
 800487c:	607b      	str	r3, [r7, #4]
 800487e:	e096      	b.n	80049ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8004880:	494f      	ldr	r1, [pc, #316]	@ (80049c0 <etharp_tmr+0x14c>)
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	3314      	adds	r3, #20
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8086 	beq.w	80049a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800489c:	4948      	ldr	r1, [pc, #288]	@ (80049c0 <etharp_tmr+0x14c>)
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	440b      	add	r3, r1
 80048aa:	3312      	adds	r3, #18
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	b298      	uxth	r0, r3
 80048b2:	4943      	ldr	r1, [pc, #268]	@ (80049c0 <etharp_tmr+0x14c>)
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	440b      	add	r3, r1
 80048c0:	3312      	adds	r3, #18
 80048c2:	4602      	mov	r2, r0
 80048c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80048c6:	493e      	ldr	r1, [pc, #248]	@ (80049c0 <etharp_tmr+0x14c>)
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	3312      	adds	r3, #18
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80048dc:	d215      	bcs.n	800490a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80048de:	4938      	ldr	r1, [pc, #224]	@ (80049c0 <etharp_tmr+0x14c>)
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	440b      	add	r3, r1
 80048ec:	3314      	adds	r3, #20
 80048ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d10e      	bne.n	8004912 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80048f4:	4932      	ldr	r1, [pc, #200]	@ (80049c0 <etharp_tmr+0x14c>)
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	440b      	add	r3, r1
 8004902:	3312      	adds	r3, #18
 8004904:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004906:	2b04      	cmp	r3, #4
 8004908:	d903      	bls.n	8004912 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ff80 	bl	8004810 <etharp_free_entry>
 8004910:	e04a      	b.n	80049a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8004912:	492b      	ldr	r1, [pc, #172]	@ (80049c0 <etharp_tmr+0x14c>)
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	440b      	add	r3, r1
 8004920:	3314      	adds	r3, #20
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d10a      	bne.n	800493e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004928:	4925      	ldr	r1, [pc, #148]	@ (80049c0 <etharp_tmr+0x14c>)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	440b      	add	r3, r1
 8004936:	3314      	adds	r3, #20
 8004938:	2204      	movs	r2, #4
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	e034      	b.n	80049a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800493e:	4920      	ldr	r1, [pc, #128]	@ (80049c0 <etharp_tmr+0x14c>)
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4413      	add	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	440b      	add	r3, r1
 800494c:	3314      	adds	r3, #20
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d10a      	bne.n	800496a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004954:	491a      	ldr	r1, [pc, #104]	@ (80049c0 <etharp_tmr+0x14c>)
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4413      	add	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	440b      	add	r3, r1
 8004962:	3314      	adds	r3, #20
 8004964:	2202      	movs	r2, #2
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e01e      	b.n	80049a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800496a:	4915      	ldr	r1, [pc, #84]	@ (80049c0 <etharp_tmr+0x14c>)
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4413      	add	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	440b      	add	r3, r1
 8004978:	3314      	adds	r3, #20
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d113      	bne.n	80049a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8004980:	490f      	ldr	r1, [pc, #60]	@ (80049c0 <etharp_tmr+0x14c>)
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4613      	mov	r3, r2
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	4413      	add	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	440b      	add	r3, r1
 800498e:	3308      	adds	r3, #8
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	4413      	add	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4a08      	ldr	r2, [pc, #32]	@ (80049c0 <etharp_tmr+0x14c>)
 800499e:	4413      	add	r3, r2
 80049a0:	3304      	adds	r3, #4
 80049a2:	4619      	mov	r1, r3
 80049a4:	f000 fe6e 	bl	8005684 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3301      	adds	r3, #1
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b09      	cmp	r3, #9
 80049b2:	f77f af65 	ble.w	8004880 <etharp_tmr+0xc>
      }
    }
  }
}
 80049b6:	bf00      	nop
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	24004c50 	.word	0x24004c50

080049c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	@ 0x28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	460b      	mov	r3, r1
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80049d2:	230a      	movs	r3, #10
 80049d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80049d6:	230a      	movs	r3, #10
 80049d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80049da:	230a      	movs	r3, #10
 80049dc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80049e2:	230a      	movs	r3, #10
 80049e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	83bb      	strh	r3, [r7, #28]
 80049ea:	2300      	movs	r3, #0
 80049ec:	837b      	strh	r3, [r7, #26]
 80049ee:	2300      	movs	r3, #0
 80049f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80049f2:	2300      	movs	r3, #0
 80049f4:	843b      	strh	r3, [r7, #32]
 80049f6:	e0ae      	b.n	8004b56 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80049f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80049fc:	49a6      	ldr	r1, [pc, #664]	@ (8004c98 <etharp_find_entry+0x2d4>)
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	440b      	add	r3, r1
 8004a08:	3314      	adds	r3, #20
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004a0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004a12:	2b0a      	cmp	r3, #10
 8004a14:	d105      	bne.n	8004a22 <etharp_find_entry+0x5e>
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8004a1c:	8c3b      	ldrh	r3, [r7, #32]
 8004a1e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a20:	e095      	b.n	8004b4e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8092 	beq.w	8004b4e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d009      	beq.n	8004a44 <etharp_find_entry+0x80>
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d806      	bhi.n	8004a44 <etharp_find_entry+0x80>
 8004a36:	4b99      	ldr	r3, [pc, #612]	@ (8004c9c <etharp_find_entry+0x2d8>)
 8004a38:	f240 1223 	movw	r2, #291	@ 0x123
 8004a3c:	4998      	ldr	r1, [pc, #608]	@ (8004ca0 <etharp_find_entry+0x2dc>)
 8004a3e:	4899      	ldr	r0, [pc, #612]	@ (8004ca4 <etharp_find_entry+0x2e0>)
 8004a40:	f009 fda4 	bl	800e58c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d020      	beq.n	8004a8c <etharp_find_entry+0xc8>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6819      	ldr	r1, [r3, #0]
 8004a4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004a52:	4891      	ldr	r0, [pc, #580]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004a54:	4613      	mov	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4403      	add	r3, r0
 8004a5e:	3304      	adds	r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d112      	bne.n	8004a8c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00c      	beq.n	8004a86 <etharp_find_entry+0xc2>
 8004a6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004a70:	4989      	ldr	r1, [pc, #548]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004a72:	4613      	mov	r3, r2
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	4413      	add	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d102      	bne.n	8004a8c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8004a86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004a8a:	e100      	b.n	8004c8e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d140      	bne.n	8004b14 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8004a92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004a96:	4980      	ldr	r1, [pc, #512]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01a      	beq.n	8004ade <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8004aa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004aac:	497a      	ldr	r1, [pc, #488]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004aae:	4613      	mov	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3312      	adds	r3, #18
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	8bba      	ldrh	r2, [r7, #28]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d845      	bhi.n	8004b4e <etharp_find_entry+0x18a>
            old_queue = i;
 8004ac2:	8c3b      	ldrh	r3, [r7, #32]
 8004ac4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8004ac6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004aca:	4973      	ldr	r1, [pc, #460]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004acc:	4613      	mov	r3, r2
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	4413      	add	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3312      	adds	r3, #18
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	83bb      	strh	r3, [r7, #28]
 8004adc:	e037      	b.n	8004b4e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8004ade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ae2:	496d      	ldr	r1, [pc, #436]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	440b      	add	r3, r1
 8004aee:	3312      	adds	r3, #18
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	8b7a      	ldrh	r2, [r7, #26]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d82a      	bhi.n	8004b4e <etharp_find_entry+0x18a>
            old_pending = i;
 8004af8:	8c3b      	ldrh	r3, [r7, #32]
 8004afa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8004afc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b00:	4965      	ldr	r1, [pc, #404]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	440b      	add	r3, r1
 8004b0c:	3312      	adds	r3, #18
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	837b      	strh	r3, [r7, #26]
 8004b12:	e01c      	b.n	8004b4e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d919      	bls.n	8004b4e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8004b1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b1e:	495e      	ldr	r1, [pc, #376]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004b20:	4613      	mov	r3, r2
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	4413      	add	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	440b      	add	r3, r1
 8004b2a:	3312      	adds	r3, #18
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	8b3a      	ldrh	r2, [r7, #24]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d80c      	bhi.n	8004b4e <etharp_find_entry+0x18a>
            old_stable = i;
 8004b34:	8c3b      	ldrh	r3, [r7, #32]
 8004b36:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8004b38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b3c:	4956      	ldr	r1, [pc, #344]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	440b      	add	r3, r1
 8004b48:	3312      	adds	r3, #18
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004b4e:	8c3b      	ldrh	r3, [r7, #32]
 8004b50:	3301      	adds	r3, #1
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	843b      	strh	r3, [r7, #32]
 8004b56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004b5a:	2b09      	cmp	r3, #9
 8004b5c:	f77f af4c 	ble.w	80049f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004b60:	7afb      	ldrb	r3, [r7, #11]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <etharp_find_entry+0x1b8>
 8004b6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004b6e:	2b0a      	cmp	r3, #10
 8004b70:	d107      	bne.n	8004b82 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8004b72:	7afb      	ldrb	r3, [r7, #11]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b80:	e085      	b.n	8004c8e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8004b82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	dc02      	bgt.n	8004b90 <etharp_find_entry+0x1cc>
    i = empty;
 8004b8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b8c:	843b      	strh	r3, [r7, #32]
 8004b8e:	e039      	b.n	8004c04 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8004b90:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004b94:	2b09      	cmp	r3, #9
 8004b96:	dc14      	bgt.n	8004bc2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8004b98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b9a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8004b9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ba0:	493d      	ldr	r1, [pc, #244]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	440b      	add	r3, r1
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d018      	beq.n	8004be4 <etharp_find_entry+0x220>
 8004bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8004c9c <etharp_find_entry+0x2d8>)
 8004bb4:	f240 126d 	movw	r2, #365	@ 0x16d
 8004bb8:	493b      	ldr	r1, [pc, #236]	@ (8004ca8 <etharp_find_entry+0x2e4>)
 8004bba:	483a      	ldr	r0, [pc, #232]	@ (8004ca4 <etharp_find_entry+0x2e0>)
 8004bbc:	f009 fce6 	bl	800e58c <iprintf>
 8004bc0:	e010      	b.n	8004be4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004bc2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004bc6:	2b09      	cmp	r3, #9
 8004bc8:	dc02      	bgt.n	8004bd0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8004bca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004bcc:	843b      	strh	r3, [r7, #32]
 8004bce:	e009      	b.n	8004be4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004bd0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004bd4:	2b09      	cmp	r3, #9
 8004bd6:	dc02      	bgt.n	8004bde <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8004bd8:	8bfb      	ldrh	r3, [r7, #30]
 8004bda:	843b      	strh	r3, [r7, #32]
 8004bdc:	e002      	b.n	8004be4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295
 8004be2:	e054      	b.n	8004c8e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8004be4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	dd06      	ble.n	8004bfa <etharp_find_entry+0x236>
 8004bec:	4b2b      	ldr	r3, [pc, #172]	@ (8004c9c <etharp_find_entry+0x2d8>)
 8004bee:	f240 127f 	movw	r2, #383	@ 0x17f
 8004bf2:	492e      	ldr	r1, [pc, #184]	@ (8004cac <etharp_find_entry+0x2e8>)
 8004bf4:	482b      	ldr	r0, [pc, #172]	@ (8004ca4 <etharp_find_entry+0x2e0>)
 8004bf6:	f009 fcc9 	bl	800e58c <iprintf>
    etharp_free_entry(i);
 8004bfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff fe06 	bl	8004810 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8004c04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004c08:	2b09      	cmp	r3, #9
 8004c0a:	dd06      	ble.n	8004c1a <etharp_find_entry+0x256>
 8004c0c:	4b23      	ldr	r3, [pc, #140]	@ (8004c9c <etharp_find_entry+0x2d8>)
 8004c0e:	f240 1283 	movw	r2, #387	@ 0x183
 8004c12:	4926      	ldr	r1, [pc, #152]	@ (8004cac <etharp_find_entry+0x2e8>)
 8004c14:	4823      	ldr	r0, [pc, #140]	@ (8004ca4 <etharp_find_entry+0x2e0>)
 8004c16:	f009 fcb9 	bl	800e58c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8004c1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c1e:	491e      	ldr	r1, [pc, #120]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004c20:	4613      	mov	r3, r2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4413      	add	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	440b      	add	r3, r1
 8004c2a:	3314      	adds	r3, #20
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <etharp_find_entry+0x27c>
 8004c32:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <etharp_find_entry+0x2d8>)
 8004c34:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8004c38:	491d      	ldr	r1, [pc, #116]	@ (8004cb0 <etharp_find_entry+0x2ec>)
 8004c3a:	481a      	ldr	r0, [pc, #104]	@ (8004ca4 <etharp_find_entry+0x2e0>)
 8004c3c:	f009 fca6 	bl	800e58c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004c46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6819      	ldr	r1, [r3, #0]
 8004c4e:	4812      	ldr	r0, [pc, #72]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004c50:	4613      	mov	r3, r2
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4403      	add	r3, r0
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8004c5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c62:	490d      	ldr	r1, [pc, #52]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004c64:	4613      	mov	r3, r2
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4413      	add	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3312      	adds	r3, #18
 8004c70:	2200      	movs	r2, #0
 8004c72:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8004c74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c78:	4907      	ldr	r1, [pc, #28]	@ (8004c98 <etharp_find_entry+0x2d4>)
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	4413      	add	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	440b      	add	r3, r1
 8004c84:	3308      	adds	r3, #8
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8004c8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3728      	adds	r7, #40	@ 0x28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	24004c50 	.word	0x24004c50
 8004c9c:	0800f40c 	.word	0x0800f40c
 8004ca0:	0800f4b8 	.word	0x0800f4b8
 8004ca4:	0800f4f8 	.word	0x0800f4f8
 8004ca8:	0800f520 	.word	0x0800f520
 8004cac:	0800f538 	.word	0x0800f538
 8004cb0:	0800f54c 	.word	0x0800f54c

08004cb4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004cc8:	2b06      	cmp	r3, #6
 8004cca:	d006      	beq.n	8004cda <etharp_update_arp_entry+0x26>
 8004ccc:	4b48      	ldr	r3, [pc, #288]	@ (8004df0 <etharp_update_arp_entry+0x13c>)
 8004cce:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8004cd2:	4948      	ldr	r1, [pc, #288]	@ (8004df4 <etharp_update_arp_entry+0x140>)
 8004cd4:	4848      	ldr	r0, [pc, #288]	@ (8004df8 <etharp_update_arp_entry+0x144>)
 8004cd6:	f009 fc59 	bl	800e58c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d012      	beq.n	8004d06 <etharp_update_arp_entry+0x52>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00e      	beq.n	8004d06 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68f9      	ldr	r1, [r7, #12]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 facc 	bl	800628c <ip4_addr_isbroadcast_u32>
 8004cf4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d105      	bne.n	8004d06 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004d02:	2be0      	cmp	r3, #224	@ 0xe0
 8004d04:	d102      	bne.n	8004d0c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8004d06:	f06f 030f 	mvn.w	r3, #15
 8004d0a:	e06c      	b.n	8004de6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4619      	mov	r1, r3
 8004d12:	68b8      	ldr	r0, [r7, #8]
 8004d14:	f7ff fe56 	bl	80049c4 <etharp_find_entry>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8004d1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	da02      	bge.n	8004d2a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8004d24:	8afb      	ldrh	r3, [r7, #22]
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	e05d      	b.n	8004de6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8004d2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004d2e:	4933      	ldr	r1, [pc, #204]	@ (8004dfc <etharp_update_arp_entry+0x148>)
 8004d30:	4613      	mov	r3, r2
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	440b      	add	r3, r1
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8004d40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004d44:	492d      	ldr	r1, [pc, #180]	@ (8004dfc <etharp_update_arp_entry+0x148>)
 8004d46:	4613      	mov	r3, r2
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	440b      	add	r3, r1
 8004d50:	3308      	adds	r3, #8
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8004d56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	4413      	add	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	3308      	adds	r3, #8
 8004d64:	4a25      	ldr	r2, [pc, #148]	@ (8004dfc <etharp_update_arp_entry+0x148>)
 8004d66:	4413      	add	r3, r2
 8004d68:	3304      	adds	r3, #4
 8004d6a:	2206      	movs	r2, #6
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f009 fce7 	bl	800e742 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8004d74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004d78:	4920      	ldr	r1, [pc, #128]	@ (8004dfc <etharp_update_arp_entry+0x148>)
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	440b      	add	r3, r1
 8004d84:	3312      	adds	r3, #18
 8004d86:	2200      	movs	r2, #0
 8004d88:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8004d8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004d8e:	491b      	ldr	r1, [pc, #108]	@ (8004dfc <etharp_update_arp_entry+0x148>)
 8004d90:	4613      	mov	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4413      	add	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	440b      	add	r3, r1
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d021      	beq.n	8004de4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8004da0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004da4:	4915      	ldr	r1, [pc, #84]	@ (8004dfc <etharp_update_arp_entry+0x148>)
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8004db4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004db8:	4910      	ldr	r1, [pc, #64]	@ (8004dfc <etharp_update_arp_entry+0x148>)
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	440b      	add	r3, r1
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8004dce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6939      	ldr	r1, [r7, #16]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fcf3 	bl	80057c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8004dde:	6938      	ldr	r0, [r7, #16]
 8004de0:	f003 fbea 	bl	80085b8 <pbuf_free>
  }
  return ERR_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	0800f40c 	.word	0x0800f40c
 8004df4:	0800f578 	.word	0x0800f578
 8004df8:	0800f4f8 	.word	0x0800f4f8
 8004dfc:	24004c50 	.word	0x24004c50

08004e00 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	e01e      	b.n	8004e4c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8004e0e:	4913      	ldr	r1, [pc, #76]	@ (8004e5c <etharp_cleanup_netif+0x5c>)
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3314      	adds	r3, #20
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8004e22:	7afb      	ldrb	r3, [r7, #11]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00e      	beq.n	8004e46 <etharp_cleanup_netif+0x46>
 8004e28:	490c      	ldr	r1, [pc, #48]	@ (8004e5c <etharp_cleanup_netif+0x5c>)
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	440b      	add	r3, r1
 8004e36:	3308      	adds	r3, #8
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d102      	bne.n	8004e46 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fce5 	bl	8004810 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b09      	cmp	r3, #9
 8004e50:	dddd      	ble.n	8004e0e <etharp_cleanup_netif+0xe>
    }
  }
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	24004c50 	.word	0x24004c50

08004e60 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8004e60:	b5b0      	push	{r4, r5, r7, lr}
 8004e62:	b08a      	sub	sp, #40	@ 0x28
 8004e64:	af04      	add	r7, sp, #16
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d107      	bne.n	8004e80 <etharp_input+0x20>
 8004e70:	4b3d      	ldr	r3, [pc, #244]	@ (8004f68 <etharp_input+0x108>)
 8004e72:	f240 228a 	movw	r2, #650	@ 0x28a
 8004e76:	493d      	ldr	r1, [pc, #244]	@ (8004f6c <etharp_input+0x10c>)
 8004e78:	483d      	ldr	r0, [pc, #244]	@ (8004f70 <etharp_input+0x110>)
 8004e7a:	f009 fb87 	bl	800e58c <iprintf>
 8004e7e:	e06f      	b.n	8004f60 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e90:	d10c      	bne.n	8004eac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8004e96:	2b06      	cmp	r3, #6
 8004e98:	d108      	bne.n	8004eac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d104      	bne.n	8004eac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	885b      	ldrh	r3, [r3, #2]
 8004ea6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d003      	beq.n	8004eb4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f003 fb83 	bl	80085b8 <pbuf_free>
    return;
 8004eb2:	e055      	b.n	8004f60 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	330e      	adds	r3, #14
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	3318      	adds	r3, #24
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <etharp_input+0x74>
    for_us = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]
 8004ed2:	e009      	b.n	8004ee8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	bf0c      	ite	eq
 8004ee0:	2301      	moveq	r3, #1
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f103 0208 	add.w	r2, r3, #8
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <etharp_input+0x98>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <etharp_input+0x9a>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	f107 010c 	add.w	r1, r7, #12
 8004efe:	6838      	ldr	r0, [r7, #0]
 8004f00:	f7ff fed8 	bl	8004cb4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	88db      	ldrh	r3, [r3, #6]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f0e:	d003      	beq.n	8004f18 <etharp_input+0xb8>
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f14:	d01e      	beq.n	8004f54 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8004f16:	e020      	b.n	8004f5a <etharp_input+0xfa>
      if (for_us) {
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01c      	beq.n	8004f58 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	3208      	adds	r2, #8
        etharp_raw(netif,
 8004f38:	2102      	movs	r1, #2
 8004f3a:	9103      	str	r1, [sp, #12]
 8004f3c:	f107 010c 	add.w	r1, r7, #12
 8004f40:	9102      	str	r1, [sp, #8]
 8004f42:	9201      	str	r2, [sp, #4]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	462b      	mov	r3, r5
 8004f48:	4622      	mov	r2, r4
 8004f4a:	4601      	mov	r1, r0
 8004f4c:	6838      	ldr	r0, [r7, #0]
 8004f4e:	f000 faeb 	bl	8005528 <etharp_raw>
      break;
 8004f52:	e001      	b.n	8004f58 <etharp_input+0xf8>
      break;
 8004f54:	bf00      	nop
 8004f56:	e000      	b.n	8004f5a <etharp_input+0xfa>
      break;
 8004f58:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f003 fb2c 	bl	80085b8 <pbuf_free>
}
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bdb0      	pop	{r4, r5, r7, pc}
 8004f66:	bf00      	nop
 8004f68:	0800f40c 	.word	0x0800f40c
 8004f6c:	0800f5d0 	.word	0x0800f5d0
 8004f70:	0800f4f8 	.word	0x0800f4f8

08004f74 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004f82:	79fa      	ldrb	r2, [r7, #7]
 8004f84:	4944      	ldr	r1, [pc, #272]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	3314      	adds	r3, #20
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d806      	bhi.n	8004fa6 <etharp_output_to_arp_index+0x32>
 8004f98:	4b40      	ldr	r3, [pc, #256]	@ (800509c <etharp_output_to_arp_index+0x128>)
 8004f9a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8004f9e:	4940      	ldr	r1, [pc, #256]	@ (80050a0 <etharp_output_to_arp_index+0x12c>)
 8004fa0:	4840      	ldr	r0, [pc, #256]	@ (80050a4 <etharp_output_to_arp_index+0x130>)
 8004fa2:	f009 faf3 	bl	800e58c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8004fa6:	79fa      	ldrb	r2, [r7, #7]
 8004fa8:	493b      	ldr	r1, [pc, #236]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	440b      	add	r3, r1
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d153      	bne.n	8005064 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8004fbc:	79fa      	ldrb	r2, [r7, #7]
 8004fbe:	4936      	ldr	r1, [pc, #216]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	440b      	add	r3, r1
 8004fca:	3312      	adds	r3, #18
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8004fd2:	d919      	bls.n	8005008 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8004fd4:	79fa      	ldrb	r2, [r7, #7]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4a2e      	ldr	r2, [pc, #184]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fb4c 	bl	8005684 <etharp_request>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d138      	bne.n	8005064 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8004ff2:	79fa      	ldrb	r2, [r7, #7]
 8004ff4:	4928      	ldr	r1, [pc, #160]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	440b      	add	r3, r1
 8005000:	3314      	adds	r3, #20
 8005002:	2203      	movs	r2, #3
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	e02d      	b.n	8005064 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005008:	79fa      	ldrb	r2, [r7, #7]
 800500a:	4923      	ldr	r1, [pc, #140]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	440b      	add	r3, r1
 8005016:	3312      	adds	r3, #18
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800501e:	d321      	bcc.n	8005064 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005020:	79fa      	ldrb	r2, [r7, #7]
 8005022:	4613      	mov	r3, r2
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	4413      	add	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4a1b      	ldr	r2, [pc, #108]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 800502c:	4413      	add	r3, r2
 800502e:	1d19      	adds	r1, r3, #4
 8005030:	79fa      	ldrb	r2, [r7, #7]
 8005032:	4613      	mov	r3, r2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	3308      	adds	r3, #8
 800503c:	4a16      	ldr	r2, [pc, #88]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 800503e:	4413      	add	r3, r2
 8005040:	3304      	adds	r3, #4
 8005042:	461a      	mov	r2, r3
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fafb 	bl	8005640 <etharp_request_dst>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005050:	79fa      	ldrb	r2, [r7, #7]
 8005052:	4911      	ldr	r1, [pc, #68]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 8005054:	4613      	mov	r3, r2
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4413      	add	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	440b      	add	r3, r1
 800505e:	3314      	adds	r3, #20
 8005060:	2203      	movs	r2, #3
 8005062:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800506a:	79fa      	ldrb	r2, [r7, #7]
 800506c:	4613      	mov	r3, r2
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4413      	add	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3308      	adds	r3, #8
 8005076:	4a08      	ldr	r2, [pc, #32]	@ (8005098 <etharp_output_to_arp_index+0x124>)
 8005078:	4413      	add	r3, r2
 800507a:	3304      	adds	r3, #4
 800507c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005080:	9200      	str	r2, [sp, #0]
 8005082:	460a      	mov	r2, r1
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fb9c 	bl	80057c4 <ethernet_output>
 800508c:	4603      	mov	r3, r0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	24004c50 	.word	0x24004c50
 800509c:	0800f40c 	.word	0x0800f40c
 80050a0:	0800f5f0 	.word	0x0800f5f0
 80050a4:	0800f4f8 	.word	0x0800f4f8

080050a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	@ 0x28
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <etharp_output+0x24>
 80050be:	4b73      	ldr	r3, [pc, #460]	@ (800528c <etharp_output+0x1e4>)
 80050c0:	f240 321e 	movw	r2, #798	@ 0x31e
 80050c4:	4972      	ldr	r1, [pc, #456]	@ (8005290 <etharp_output+0x1e8>)
 80050c6:	4873      	ldr	r0, [pc, #460]	@ (8005294 <etharp_output+0x1ec>)
 80050c8:	f009 fa60 	bl	800e58c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <etharp_output+0x38>
 80050d2:	4b6e      	ldr	r3, [pc, #440]	@ (800528c <etharp_output+0x1e4>)
 80050d4:	f240 321f 	movw	r2, #799	@ 0x31f
 80050d8:	496f      	ldr	r1, [pc, #444]	@ (8005298 <etharp_output+0x1f0>)
 80050da:	486e      	ldr	r0, [pc, #440]	@ (8005294 <etharp_output+0x1ec>)
 80050dc:	f009 fa56 	bl	800e58c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <etharp_output+0x4c>
 80050e6:	4b69      	ldr	r3, [pc, #420]	@ (800528c <etharp_output+0x1e4>)
 80050e8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80050ec:	496b      	ldr	r1, [pc, #428]	@ (800529c <etharp_output+0x1f4>)
 80050ee:	4869      	ldr	r0, [pc, #420]	@ (8005294 <etharp_output+0x1ec>)
 80050f0:	f009 fa4c 	bl	800e58c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68f9      	ldr	r1, [r7, #12]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 f8c6 	bl	800628c <ip4_addr_isbroadcast_u32>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8005106:	4b66      	ldr	r3, [pc, #408]	@ (80052a0 <etharp_output+0x1f8>)
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	e0af      	b.n	800526c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005114:	2be0      	cmp	r3, #224	@ 0xe0
 8005116:	d118      	bne.n	800514a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005118:	2301      	movs	r3, #1
 800511a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800511c:	2300      	movs	r3, #0
 800511e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8005120:	235e      	movs	r3, #94	@ 0x5e
 8005122:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3301      	adds	r3, #1
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800512e:	b2db      	uxtb	r3, r3
 8005130:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3302      	adds	r3, #2
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3303      	adds	r3, #3
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8005142:	f107 0310 	add.w	r3, r7, #16
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e090      	b.n	800526c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3304      	adds	r3, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	405a      	eors	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3308      	adds	r3, #8
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d012      	beq.n	8005188 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005168:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	330c      	adds	r3, #12
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	330c      	adds	r3, #12
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e002      	b.n	8005188 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8005182:	f06f 0303 	mvn.w	r3, #3
 8005186:	e07d      	b.n	8005284 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005188:	4b46      	ldr	r3, [pc, #280]	@ (80052a4 <etharp_output+0x1fc>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	4619      	mov	r1, r3
 800518e:	4a46      	ldr	r2, [pc, #280]	@ (80052a8 <etharp_output+0x200>)
 8005190:	460b      	mov	r3, r1
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	440b      	add	r3, r1
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	3314      	adds	r3, #20
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d925      	bls.n	80051ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80051a2:	4b40      	ldr	r3, [pc, #256]	@ (80052a4 <etharp_output+0x1fc>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	4619      	mov	r1, r3
 80051a8:	4a3f      	ldr	r2, [pc, #252]	@ (80052a8 <etharp_output+0x200>)
 80051aa:	460b      	mov	r3, r1
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	440b      	add	r3, r1
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	3308      	adds	r3, #8
 80051b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d117      	bne.n	80051ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b38      	ldr	r3, [pc, #224]	@ (80052a4 <etharp_output+0x1fc>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	4937      	ldr	r1, [pc, #220]	@ (80052a8 <etharp_output+0x200>)
 80051ca:	4603      	mov	r3, r0
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4403      	add	r3, r0
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	440b      	add	r3, r1
 80051d4:	3304      	adds	r3, #4
 80051d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80051d8:	429a      	cmp	r2, r3
 80051da:	d108      	bne.n	80051ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80051dc:	4b31      	ldr	r3, [pc, #196]	@ (80052a4 <etharp_output+0x1fc>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff fec5 	bl	8004f74 <etharp_output_to_arp_index>
 80051ea:	4603      	mov	r3, r0
 80051ec:	e04a      	b.n	8005284 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
 80051f2:	e031      	b.n	8005258 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80051f4:	7dfa      	ldrb	r2, [r7, #23]
 80051f6:	492c      	ldr	r1, [pc, #176]	@ (80052a8 <etharp_output+0x200>)
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	440b      	add	r3, r1
 8005202:	3314      	adds	r3, #20
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d923      	bls.n	8005252 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800520a:	7dfa      	ldrb	r2, [r7, #23]
 800520c:	4926      	ldr	r1, [pc, #152]	@ (80052a8 <etharp_output+0x200>)
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	440b      	add	r3, r1
 8005218:	3308      	adds	r3, #8
 800521a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	429a      	cmp	r2, r3
 8005220:	d117      	bne.n	8005252 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	6819      	ldr	r1, [r3, #0]
 8005226:	7dfa      	ldrb	r2, [r7, #23]
 8005228:	481f      	ldr	r0, [pc, #124]	@ (80052a8 <etharp_output+0x200>)
 800522a:	4613      	mov	r3, r2
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4403      	add	r3, r0
 8005234:	3304      	adds	r3, #4
 8005236:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8005238:	4299      	cmp	r1, r3
 800523a:	d10a      	bne.n	8005252 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800523c:	4a19      	ldr	r2, [pc, #100]	@ (80052a4 <etharp_output+0x1fc>)
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8005242:	7dfb      	ldrb	r3, [r7, #23]
 8005244:	461a      	mov	r2, r3
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff fe93 	bl	8004f74 <etharp_output_to_arp_index>
 800524e:	4603      	mov	r3, r0
 8005250:	e018      	b.n	8005284 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	3301      	adds	r3, #1
 8005256:	75fb      	strb	r3, [r7, #23]
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b09      	cmp	r3, #9
 800525c:	d9ca      	bls.n	80051f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f822 	bl	80052ac <etharp_query>
 8005268:	4603      	mov	r3, r0
 800526a:	e00b      	b.n	8005284 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8005272:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 faa1 	bl	80057c4 <ethernet_output>
 8005282:	4603      	mov	r3, r0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	0800f40c 	.word	0x0800f40c
 8005290:	0800f5d0 	.word	0x0800f5d0
 8005294:	0800f4f8 	.word	0x0800f4f8
 8005298:	0800f620 	.word	0x0800f620
 800529c:	0800f5c0 	.word	0x0800f5c0
 80052a0:	080123fc 	.word	0x080123fc
 80052a4:	24004d40 	.word	0x24004d40
 80052a8:	24004c50 	.word	0x24004c50

080052ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	@ 0x30
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3326      	adds	r3, #38	@ 0x26
 80052bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80052be:	23ff      	movs	r3, #255	@ 0xff
 80052c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68f9      	ldr	r1, [r7, #12]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 ffdc 	bl	800628c <ip4_addr_isbroadcast_u32>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10c      	bne.n	80052f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80052e2:	2be0      	cmp	r3, #224	@ 0xe0
 80052e4:	d006      	beq.n	80052f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80052f4:	f06f 030f 	mvn.w	r3, #15
 80052f8:	e101      	b.n	80054fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	2101      	movs	r1, #1
 80052fe:	68b8      	ldr	r0, [r7, #8]
 8005300:	f7ff fb60 	bl	80049c4 <etharp_find_entry>
 8005304:	4603      	mov	r3, r0
 8005306:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8005308:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800530c:	2b00      	cmp	r3, #0
 800530e:	da02      	bge.n	8005316 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8005310:	8a7b      	ldrh	r3, [r7, #18]
 8005312:	b25b      	sxtb	r3, r3
 8005314:	e0f3      	b.n	80054fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8005316:	8a7b      	ldrh	r3, [r7, #18]
 8005318:	2b7e      	cmp	r3, #126	@ 0x7e
 800531a:	d906      	bls.n	800532a <etharp_query+0x7e>
 800531c:	4b7a      	ldr	r3, [pc, #488]	@ (8005508 <etharp_query+0x25c>)
 800531e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8005322:	497a      	ldr	r1, [pc, #488]	@ (800550c <etharp_query+0x260>)
 8005324:	487a      	ldr	r0, [pc, #488]	@ (8005510 <etharp_query+0x264>)
 8005326:	f009 f931 	bl	800e58c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800532a:	8a7b      	ldrh	r3, [r7, #18]
 800532c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800532e:	7c7a      	ldrb	r2, [r7, #17]
 8005330:	4978      	ldr	r1, [pc, #480]	@ (8005514 <etharp_query+0x268>)
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	440b      	add	r3, r1
 800533c:	3314      	adds	r3, #20
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d115      	bne.n	8005370 <etharp_query+0xc4>
    is_new_entry = 1;
 8005344:	2301      	movs	r3, #1
 8005346:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005348:	7c7a      	ldrb	r2, [r7, #17]
 800534a:	4972      	ldr	r1, [pc, #456]	@ (8005514 <etharp_query+0x268>)
 800534c:	4613      	mov	r3, r2
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	4413      	add	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	440b      	add	r3, r1
 8005356:	3314      	adds	r3, #20
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800535c:	7c7a      	ldrb	r2, [r7, #17]
 800535e:	496d      	ldr	r1, [pc, #436]	@ (8005514 <etharp_query+0x268>)
 8005360:	4613      	mov	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	3308      	adds	r3, #8
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005370:	7c7a      	ldrb	r2, [r7, #17]
 8005372:	4968      	ldr	r1, [pc, #416]	@ (8005514 <etharp_query+0x268>)
 8005374:	4613      	mov	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4413      	add	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	440b      	add	r3, r1
 800537e:	3314      	adds	r3, #20
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d011      	beq.n	80053aa <etharp_query+0xfe>
 8005386:	7c7a      	ldrb	r2, [r7, #17]
 8005388:	4962      	ldr	r1, [pc, #392]	@ (8005514 <etharp_query+0x268>)
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	3314      	adds	r3, #20
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d806      	bhi.n	80053aa <etharp_query+0xfe>
 800539c:	4b5a      	ldr	r3, [pc, #360]	@ (8005508 <etharp_query+0x25c>)
 800539e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80053a2:	495d      	ldr	r1, [pc, #372]	@ (8005518 <etharp_query+0x26c>)
 80053a4:	485a      	ldr	r0, [pc, #360]	@ (8005510 <etharp_query+0x264>)
 80053a6:	f009 f8f1 	bl	800e58c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <etharp_query+0x10a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10c      	bne.n	80053d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f963 	bl	8005684 <etharp_request>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d102      	bne.n	80053d0 <etharp_query+0x124>
      return result;
 80053ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053ce:	e096      	b.n	80054fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <etharp_query+0x138>
 80053d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005508 <etharp_query+0x25c>)
 80053d8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80053dc:	494f      	ldr	r1, [pc, #316]	@ (800551c <etharp_query+0x270>)
 80053de:	484c      	ldr	r0, [pc, #304]	@ (8005510 <etharp_query+0x264>)
 80053e0:	f009 f8d4 	bl	800e58c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80053e4:	7c7a      	ldrb	r2, [r7, #17]
 80053e6:	494b      	ldr	r1, [pc, #300]	@ (8005514 <etharp_query+0x268>)
 80053e8:	4613      	mov	r3, r2
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	4413      	add	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	440b      	add	r3, r1
 80053f2:	3314      	adds	r3, #20
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d917      	bls.n	800542a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80053fa:	4a49      	ldr	r2, [pc, #292]	@ (8005520 <etharp_query+0x274>)
 80053fc:	7c7b      	ldrb	r3, [r7, #17]
 80053fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005400:	7c7a      	ldrb	r2, [r7, #17]
 8005402:	4613      	mov	r3, r2
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	4413      	add	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	3308      	adds	r3, #8
 800540c:	4a41      	ldr	r2, [pc, #260]	@ (8005514 <etharp_query+0x268>)
 800540e:	4413      	add	r3, r2
 8005410:	3304      	adds	r3, #4
 8005412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005416:	9200      	str	r2, [sp, #0]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f9d1 	bl	80057c4 <ethernet_output>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005428:	e067      	b.n	80054fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800542a:	7c7a      	ldrb	r2, [r7, #17]
 800542c:	4939      	ldr	r1, [pc, #228]	@ (8005514 <etharp_query+0x268>)
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	440b      	add	r3, r1
 8005438:	3314      	adds	r3, #20
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d15c      	bne.n	80054fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	61fb      	str	r3, [r7, #28]
    while (p) {
 8005448:	e01c      	b.n	8005484 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	895a      	ldrh	r2, [r3, #10]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	891b      	ldrh	r3, [r3, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	d10a      	bne.n	800546c <etharp_query+0x1c0>
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <etharp_query+0x1c0>
 800545e:	4b2a      	ldr	r3, [pc, #168]	@ (8005508 <etharp_query+0x25c>)
 8005460:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8005464:	492f      	ldr	r1, [pc, #188]	@ (8005524 <etharp_query+0x278>)
 8005466:	482a      	ldr	r0, [pc, #168]	@ (8005510 <etharp_query+0x264>)
 8005468:	f009 f890 	bl	800e58c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	7b1b      	ldrb	r3, [r3, #12]
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <etharp_query+0x1d2>
        copy_needed = 1;
 8005478:	2301      	movs	r3, #1
 800547a:	61bb      	str	r3, [r7, #24]
        break;
 800547c:	e005      	b.n	800548a <etharp_query+0x1de>
      }
      p = p->next;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	61fb      	str	r3, [r7, #28]
    while (p) {
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1df      	bne.n	800544a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8005496:	200e      	movs	r0, #14
 8005498:	f003 faea 	bl	8008a70 <pbuf_clone>
 800549c:	61f8      	str	r0, [r7, #28]
 800549e:	e004      	b.n	80054aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80054a4:	69f8      	ldr	r0, [r7, #28]
 80054a6:	f003 f927 	bl	80086f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d021      	beq.n	80054f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80054b0:	7c7a      	ldrb	r2, [r7, #17]
 80054b2:	4918      	ldr	r1, [pc, #96]	@ (8005514 <etharp_query+0x268>)
 80054b4:	4613      	mov	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	440b      	add	r3, r1
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80054c4:	7c7a      	ldrb	r2, [r7, #17]
 80054c6:	4913      	ldr	r1, [pc, #76]	@ (8005514 <etharp_query+0x268>)
 80054c8:	4613      	mov	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	440b      	add	r3, r1
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f003 f86f 	bl	80085b8 <pbuf_free>
      }
      arp_table[i].q = p;
 80054da:	7c7a      	ldrb	r2, [r7, #17]
 80054dc:	490d      	ldr	r1, [pc, #52]	@ (8005514 <etharp_query+0x268>)
 80054de:	4613      	mov	r3, r2
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4413      	add	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	440b      	add	r3, r1
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80054f2:	e002      	b.n	80054fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80054f4:	23ff      	movs	r3, #255	@ 0xff
 80054f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80054fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	@ 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	0800f40c 	.word	0x0800f40c
 800550c:	0800f62c 	.word	0x0800f62c
 8005510:	0800f4f8 	.word	0x0800f4f8
 8005514:	24004c50 	.word	0x24004c50
 8005518:	0800f63c 	.word	0x0800f63c
 800551c:	0800f620 	.word	0x0800f620
 8005520:	24004d40 	.word	0x24004d40
 8005524:	0800f664 	.word	0x0800f664

08005528 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	@ 0x28
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <etharp_raw+0x26>
 8005540:	4b3a      	ldr	r3, [pc, #232]	@ (800562c <etharp_raw+0x104>)
 8005542:	f240 4257 	movw	r2, #1111	@ 0x457
 8005546:	493a      	ldr	r1, [pc, #232]	@ (8005630 <etharp_raw+0x108>)
 8005548:	483a      	ldr	r0, [pc, #232]	@ (8005634 <etharp_raw+0x10c>)
 800554a:	f009 f81f 	bl	800e58c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800554e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005552:	211c      	movs	r1, #28
 8005554:	200e      	movs	r0, #14
 8005556:	f002 fd4b 	bl	8007ff0 <pbuf_alloc>
 800555a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	e05d      	b.n	8005624 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	895b      	ldrh	r3, [r3, #10]
 800556c:	2b1b      	cmp	r3, #27
 800556e:	d806      	bhi.n	800557e <etharp_raw+0x56>
 8005570:	4b2e      	ldr	r3, [pc, #184]	@ (800562c <etharp_raw+0x104>)
 8005572:	f240 4262 	movw	r2, #1122	@ 0x462
 8005576:	4930      	ldr	r1, [pc, #192]	@ (8005638 <etharp_raw+0x110>)
 8005578:	482e      	ldr	r0, [pc, #184]	@ (8005634 <etharp_raw+0x10c>)
 800557a:	f009 f807 	bl	800e58c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005584:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff f914 	bl	80047b4 <lwip_htons>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800559a:	2b06      	cmp	r3, #6
 800559c:	d006      	beq.n	80055ac <etharp_raw+0x84>
 800559e:	4b23      	ldr	r3, [pc, #140]	@ (800562c <etharp_raw+0x104>)
 80055a0:	f240 4269 	movw	r2, #1129	@ 0x469
 80055a4:	4925      	ldr	r1, [pc, #148]	@ (800563c <etharp_raw+0x114>)
 80055a6:	4823      	ldr	r0, [pc, #140]	@ (8005634 <etharp_raw+0x10c>)
 80055a8:	f008 fff0 	bl	800e58c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	3308      	adds	r3, #8
 80055b0:	2206      	movs	r2, #6
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f009 f8c4 	bl	800e742 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	3312      	adds	r3, #18
 80055be:	2206      	movs	r2, #6
 80055c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055c2:	4618      	mov	r0, r3
 80055c4:	f009 f8bd 	bl	800e742 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	330e      	adds	r3, #14
 80055cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	3318      	adds	r3, #24
 80055d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f042 0208 	orr.w	r2, r2, #8
 80055f2:	709a      	strb	r2, [r3, #2]
 80055f4:	2200      	movs	r2, #0
 80055f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2206      	movs	r2, #6
 80055fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2204      	movs	r2, #4
 8005602:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005604:	f640 0306 	movw	r3, #2054	@ 0x806
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	69b9      	ldr	r1, [r7, #24]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f8d7 	bl	80057c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005616:	69b8      	ldr	r0, [r7, #24]
 8005618:	f002 ffce 	bl	80085b8 <pbuf_free>
  p = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8005620:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	0800f40c 	.word	0x0800f40c
 8005630:	0800f5d0 	.word	0x0800f5d0
 8005634:	0800f4f8 	.word	0x0800f4f8
 8005638:	0800f680 	.word	0x0800f680
 800563c:	0800f6b4 	.word	0x0800f6b4

08005640 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af04      	add	r7, sp, #16
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800565c:	2201      	movs	r2, #1
 800565e:	9203      	str	r2, [sp, #12]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	9202      	str	r2, [sp, #8]
 8005664:	4a06      	ldr	r2, [pc, #24]	@ (8005680 <etharp_request_dst+0x40>)
 8005666:	9201      	str	r2, [sp, #4]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	4603      	mov	r3, r0
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff ff5a 	bl	8005528 <etharp_raw>
 8005674:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	08012404 	.word	0x08012404

08005684 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800568e:	4a05      	ldr	r2, [pc, #20]	@ (80056a4 <etharp_request+0x20>)
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff ffd4 	bl	8005640 <etharp_request_dst>
 8005698:	4603      	mov	r3, r0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	080123fc 	.word	0x080123fc

080056a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80056b2:	230e      	movs	r3, #14
 80056b4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	895b      	ldrh	r3, [r3, #10]
 80056ba:	2b0e      	cmp	r3, #14
 80056bc:	d96e      	bls.n	800579c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	7bdb      	ldrb	r3, [r3, #15]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056cc:	3301      	adds	r3, #1
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	7b1a      	ldrb	r2, [r3, #12]
 80056de:	7b5b      	ldrb	r3, [r3, #13]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	4313      	orrs	r3, r2
 80056e4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d023      	beq.n	800573a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d10f      	bne.n	800571a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d11b      	bne.n	800573a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005706:	2b5e      	cmp	r3, #94	@ 0x5e
 8005708:	d117      	bne.n	800573a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7b5b      	ldrb	r3, [r3, #13]
 800570e:	f043 0310 	orr.w	r3, r3, #16
 8005712:	b2da      	uxtb	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	735a      	strb	r2, [r3, #13]
 8005718:	e00f      	b.n	800573a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2206      	movs	r2, #6
 800571e:	4928      	ldr	r1, [pc, #160]	@ (80057c0 <ethernet_input+0x118>)
 8005720:	4618      	mov	r0, r3
 8005722:	f008 ff88 	bl	800e636 <memcmp>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	7b5b      	ldrb	r3, [r3, #13]
 8005730:	f043 0308 	orr.w	r3, r3, #8
 8005734:	b2da      	uxtb	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800573a:	89fb      	ldrh	r3, [r7, #14]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d003      	beq.n	8005748 <ethernet_input+0xa0>
 8005740:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8005744:	d014      	beq.n	8005770 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8005746:	e032      	b.n	80057ae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d024      	beq.n	80057a0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8005756:	8afb      	ldrh	r3, [r7, #22]
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f002 fea6 	bl	80084ac <pbuf_remove_header>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d11e      	bne.n	80057a4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fb93 	bl	8005e94 <ip4_input>
      break;
 800576e:	e013      	b.n	8005798 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d014      	beq.n	80057a8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800577e:	8afb      	ldrh	r3, [r7, #22]
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f002 fe92 	bl	80084ac <pbuf_remove_header>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10e      	bne.n	80057ac <ethernet_input+0x104>
        etharp_input(p, netif);
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fb65 	bl	8004e60 <etharp_input>
      break;
 8005796:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e00c      	b.n	80057b6 <ethernet_input+0x10e>
    goto free_and_return;
 800579c:	bf00      	nop
 800579e:	e006      	b.n	80057ae <ethernet_input+0x106>
        goto free_and_return;
 80057a0:	bf00      	nop
 80057a2:	e004      	b.n	80057ae <ethernet_input+0x106>
        goto free_and_return;
 80057a4:	bf00      	nop
 80057a6:	e002      	b.n	80057ae <ethernet_input+0x106>
        goto free_and_return;
 80057a8:	bf00      	nop
 80057aa:	e000      	b.n	80057ae <ethernet_input+0x106>
        goto free_and_return;
 80057ac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f002 ff02 	bl	80085b8 <pbuf_free>
  return ERR_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	080123fc 	.word	0x080123fc

080057c4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80057d2:	8c3b      	ldrh	r3, [r7, #32]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe ffed 	bl	80047b4 <lwip_htons>
 80057da:	4603      	mov	r3, r0
 80057dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80057de:	210e      	movs	r1, #14
 80057e0:	68b8      	ldr	r0, [r7, #8]
 80057e2:	f002 fe53 	bl	800848c <pbuf_add_header>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d125      	bne.n	8005838 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	8afa      	ldrh	r2, [r7, #22]
 80057f6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2206      	movs	r2, #6
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f008 ff9f 	bl	800e742 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	3306      	adds	r3, #6
 8005808:	2206      	movs	r2, #6
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4618      	mov	r0, r3
 800580e:	f008 ff98 	bl	800e742 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005818:	2b06      	cmp	r3, #6
 800581a:	d006      	beq.n	800582a <ethernet_output+0x66>
 800581c:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <ethernet_output+0x84>)
 800581e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8005822:	490a      	ldr	r1, [pc, #40]	@ (800584c <ethernet_output+0x88>)
 8005824:	480a      	ldr	r0, [pc, #40]	@ (8005850 <ethernet_output+0x8c>)
 8005826:	f008 feb1 	bl	800e58c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	4798      	blx	r3
 8005834:	4603      	mov	r3, r0
 8005836:	e002      	b.n	800583e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8005838:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800583a:	f06f 0301 	mvn.w	r3, #1
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	0800f6f8 	.word	0x0800f6f8
 800584c:	0800f7a0 	.word	0x0800f7a0
 8005850:	0800f7d4 	.word	0x0800f7d4

08005854 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08e      	sub	sp, #56	@ 0x38
 8005858:	af04      	add	r7, sp, #16
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800585e:	4b87      	ldr	r3, [pc, #540]	@ (8005a7c <icmp_input+0x228>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	b2db      	uxtb	r3, r3
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	b2db      	uxtb	r3, r3
 8005872:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8005874:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005876:	2b13      	cmp	r3, #19
 8005878:	f240 80e8 	bls.w	8005a4c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	895b      	ldrh	r3, [r3, #10]
 8005880:	2b03      	cmp	r3, #3
 8005882:	f240 80e5 	bls.w	8005a50 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8005890:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80d2 	beq.w	8005a3e <icmp_input+0x1ea>
 800589a:	2b08      	cmp	r3, #8
 800589c:	f040 80d2 	bne.w	8005a44 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80058a0:	4b77      	ldr	r3, [pc, #476]	@ (8005a80 <icmp_input+0x22c>)
 80058a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80058a4:	4b75      	ldr	r3, [pc, #468]	@ (8005a7c <icmp_input+0x228>)
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058ac:	2be0      	cmp	r3, #224	@ 0xe0
 80058ae:	f000 80d6 	beq.w	8005a5e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80058b2:	4b72      	ldr	r3, [pc, #456]	@ (8005a7c <icmp_input+0x228>)
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	4a71      	ldr	r2, [pc, #452]	@ (8005a7c <icmp_input+0x228>)
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fce5 	bl	800628c <ip4_addr_isbroadcast_u32>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f040 80cc 	bne.w	8005a62 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	891b      	ldrh	r3, [r3, #8]
 80058ce:	2b07      	cmp	r3, #7
 80058d0:	f240 80c0 	bls.w	8005a54 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f9e0 	bl	8005c9a <inet_chksum_pbuf>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f002 fe69 	bl	80085b8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80058e6:	e0c5      	b.n	8005a74 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80058e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058ea:	330e      	adds	r3, #14
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f002 fdcc 	bl	800848c <pbuf_add_header>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d04b      	beq.n	8005992 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	891a      	ldrh	r2, [r3, #8]
 80058fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005900:	4413      	add	r3, r2
 8005902:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	891b      	ldrh	r3, [r3, #8]
 8005908:	8b7a      	ldrh	r2, [r7, #26]
 800590a:	429a      	cmp	r2, r3
 800590c:	f0c0 80ab 	bcc.w	8005a66 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8005910:	8b7b      	ldrh	r3, [r7, #26]
 8005912:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005916:	4619      	mov	r1, r3
 8005918:	200e      	movs	r0, #14
 800591a:	f002 fb69 	bl	8007ff0 <pbuf_alloc>
 800591e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80a1 	beq.w	8005a6a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	895b      	ldrh	r3, [r3, #10]
 800592c:	461a      	mov	r2, r3
 800592e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005930:	3308      	adds	r3, #8
 8005932:	429a      	cmp	r2, r3
 8005934:	d203      	bcs.n	800593e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8005936:	6978      	ldr	r0, [r7, #20]
 8005938:	f002 fe3e 	bl	80085b8 <pbuf_free>
          goto icmperr;
 800593c:	e096      	b.n	8005a6c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005944:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005946:	4618      	mov	r0, r3
 8005948:	f008 fefb 	bl	800e742 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800594c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800594e:	4619      	mov	r1, r3
 8005950:	6978      	ldr	r0, [r7, #20]
 8005952:	f002 fdab 	bl	80084ac <pbuf_remove_header>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800595c:	4b49      	ldr	r3, [pc, #292]	@ (8005a84 <icmp_input+0x230>)
 800595e:	22b6      	movs	r2, #182	@ 0xb6
 8005960:	4949      	ldr	r1, [pc, #292]	@ (8005a88 <icmp_input+0x234>)
 8005962:	484a      	ldr	r0, [pc, #296]	@ (8005a8c <icmp_input+0x238>)
 8005964:	f008 fe12 	bl	800e58c <iprintf>
          pbuf_free(r);
 8005968:	6978      	ldr	r0, [r7, #20]
 800596a:	f002 fe25 	bl	80085b8 <pbuf_free>
          goto icmperr;
 800596e:	e07d      	b.n	8005a6c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	6978      	ldr	r0, [r7, #20]
 8005974:	f002 ff38 	bl	80087e8 <pbuf_copy>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f002 fe1a 	bl	80085b8 <pbuf_free>
          goto icmperr;
 8005984:	e072      	b.n	8005a6c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f002 fe16 	bl	80085b8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	607b      	str	r3, [r7, #4]
 8005990:	e00f      	b.n	80059b2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005992:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005994:	330e      	adds	r3, #14
 8005996:	4619      	mov	r1, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f002 fd87 	bl	80084ac <pbuf_remove_header>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d006      	beq.n	80059b2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80059a4:	4b37      	ldr	r3, [pc, #220]	@ (8005a84 <icmp_input+0x230>)
 80059a6:	22c7      	movs	r2, #199	@ 0xc7
 80059a8:	4939      	ldr	r1, [pc, #228]	@ (8005a90 <icmp_input+0x23c>)
 80059aa:	4838      	ldr	r0, [pc, #224]	@ (8005a8c <icmp_input+0x238>)
 80059ac:	f008 fdee 	bl	800e58c <iprintf>
          goto icmperr;
 80059b0:	e05c      	b.n	8005a6c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80059b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f002 fd65 	bl	800848c <pbuf_add_header>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d13c      	bne.n	8005a42 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80059d6:	4b29      	ldr	r3, [pc, #164]	@ (8005a7c <icmp_input+0x228>)
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	885b      	ldrh	r3, [r3, #2]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d907      	bls.n	8005a02 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	885b      	ldrh	r3, [r3, #2]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3309      	adds	r3, #9
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	805a      	strh	r2, [r3, #2]
 8005a00:	e006      	b.n	8005a10 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	885b      	ldrh	r3, [r3, #2]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3308      	adds	r3, #8
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	22ff      	movs	r2, #255	@ 0xff
 8005a14:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	729a      	strb	r2, [r3, #10]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	9302      	str	r3, [sp, #8]
 8005a24:	2301      	movs	r3, #1
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	23ff      	movs	r3, #255	@ 0xff
 8005a2e:	2200      	movs	r2, #0
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fb52 	bl	80060dc <ip4_output_if>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8005a3c:	e001      	b.n	8005a42 <icmp_input+0x1ee>
      break;
 8005a3e:	bf00      	nop
 8005a40:	e000      	b.n	8005a44 <icmp_input+0x1f0>
      break;
 8005a42:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f002 fdb7 	bl	80085b8 <pbuf_free>
  return;
 8005a4a:	e013      	b.n	8005a74 <icmp_input+0x220>
    goto lenerr;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <icmp_input+0x202>
    goto lenerr;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <icmp_input+0x202>
        goto lenerr;
 8005a54:	bf00      	nop
lenerr:
  pbuf_free(p);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f002 fdae 	bl	80085b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005a5c:	e00a      	b.n	8005a74 <icmp_input+0x220>
        goto icmperr;
 8005a5e:	bf00      	nop
 8005a60:	e004      	b.n	8005a6c <icmp_input+0x218>
        goto icmperr;
 8005a62:	bf00      	nop
 8005a64:	e002      	b.n	8005a6c <icmp_input+0x218>
          goto icmperr;
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <icmp_input+0x218>
          goto icmperr;
 8005a6a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f002 fda3 	bl	80085b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005a72:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8005a74:	3728      	adds	r7, #40	@ 0x28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	24004d44 	.word	0x24004d44
 8005a80:	24004d58 	.word	0x24004d58
 8005a84:	0800f7fc 	.word	0x0800f7fc
 8005a88:	0800f8a4 	.word	0x0800f8a4
 8005a8c:	0800f8dc 	.word	0x0800f8dc
 8005a90:	0800f904 	.word	0x0800f904

08005a94 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2103      	movs	r1, #3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f814 	bl	8005ad4 <icmp_send_response>
}
 8005aac:	bf00      	nop
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	210b      	movs	r1, #11
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f804 	bl	8005ad4 <icmp_send_response>
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08c      	sub	sp, #48	@ 0x30
 8005ad8:	af04      	add	r7, sp, #16
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	70fb      	strb	r3, [r7, #3]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005ae4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005ae8:	2124      	movs	r1, #36	@ 0x24
 8005aea:	2022      	movs	r0, #34	@ 0x22
 8005aec:	f002 fa80 	bl	8007ff0 <pbuf_alloc>
 8005af0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d056      	beq.n	8005ba6 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	895b      	ldrh	r3, [r3, #10]
 8005afc:	2b23      	cmp	r3, #35	@ 0x23
 8005afe:	d806      	bhi.n	8005b0e <icmp_send_response+0x3a>
 8005b00:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb0 <icmp_send_response+0xdc>)
 8005b02:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8005b06:	492b      	ldr	r1, [pc, #172]	@ (8005bb4 <icmp_send_response+0xe0>)
 8005b08:	482b      	ldr	r0, [pc, #172]	@ (8005bb8 <icmp_send_response+0xe4>)
 8005b0a:	f008 fd3f 	bl	800e58c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	78ba      	ldrb	r2, [r7, #2]
 8005b24:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	711a      	strb	r2, [r3, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2200      	movs	r2, #0
 8005b34:	719a      	strb	r2, [r3, #6]
 8005b36:	2200      	movs	r2, #0
 8005b38:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f103 0008 	add.w	r0, r3, #8
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	221c      	movs	r2, #28
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f008 fdfa 	bl	800e742 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005b54:	f107 030c 	add.w	r3, r7, #12
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f901 	bl	8005d60 <ip4_route>
 8005b5e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01b      	beq.n	8005b9e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	709a      	strb	r2, [r3, #2]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	895b      	ldrh	r3, [r3, #10]
 8005b74:	4619      	mov	r1, r3
 8005b76:	6978      	ldr	r0, [r7, #20]
 8005b78:	f000 f87d 	bl	8005c76 <inet_chksum>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005b84:	f107 020c 	add.w	r2, r7, #12
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	9302      	str	r3, [sp, #8]
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	2300      	movs	r3, #0
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	23ff      	movs	r3, #255	@ 0xff
 8005b96:	2100      	movs	r1, #0
 8005b98:	69f8      	ldr	r0, [r7, #28]
 8005b9a:	f000 fa9f 	bl	80060dc <ip4_output_if>
  }
  pbuf_free(q);
 8005b9e:	69f8      	ldr	r0, [r7, #28]
 8005ba0:	f002 fd0a 	bl	80085b8 <pbuf_free>
 8005ba4:	e000      	b.n	8005ba8 <icmp_send_response+0xd4>
    return;
 8005ba6:	bf00      	nop
}
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	0800f7fc 	.word	0x0800f7fc
 8005bb4:	0800f938 	.word	0x0800f938
 8005bb8:	0800f8dc 	.word	0x0800f8dc

08005bbc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b089      	sub	sp, #36	@ 0x24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00d      	beq.n	8005bfc <lwip_standard_chksum+0x40>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dd0a      	ble.n	8005bfc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	1c53      	adds	r3, r2, #1
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	f107 030e 	add.w	r3, r7, #14
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	7812      	ldrb	r2, [r2, #0]
 8005bf4:	701a      	strb	r2, [r3, #0]
    len--;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8005c00:	e00a      	b.n	8005c18 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	1c9a      	adds	r2, r3, #2
 8005c06:	61ba      	str	r2, [r7, #24]
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	4413      	add	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
    len -= 2;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	3b02      	subs	r3, #2
 8005c16:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	dcf1      	bgt.n	8005c02 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dd04      	ble.n	8005c2e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8005c24:	f107 030e 	add.w	r3, r7, #14
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	7812      	ldrb	r2, [r2, #0]
 8005c2c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8005c2e:	89fb      	ldrh	r3, [r7, #14]
 8005c30:	461a      	mov	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	4413      	add	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	0c1a      	lsrs	r2, r3, #16
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	0c1a      	lsrs	r2, r3, #16
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	b29b      	uxth	r3, r3
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3724      	adds	r7, #36	@ 0x24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8005c82:	887b      	ldrh	r3, [r7, #2]
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ff98 	bl	8005bbc <lwip_standard_chksum>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	b29b      	uxth	r3, r3
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b086      	sub	sp, #24
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	e02b      	b.n	8005d08 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	895b      	ldrh	r3, [r3, #10]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f7ff ff7e 	bl	8005bbc <lwip_standard_chksum>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	0c1a      	lsrs	r2, r3, #16
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	895b      	ldrh	r3, [r3, #10]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00e      	beq.n	8005d02 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bf0c      	ite	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	2300      	movne	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1d0      	bne.n	8005cb0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	b29b      	uxth	r3, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005d3e:	f001 f9eb 	bl	8007118 <mem_init>
  memp_init();
 8005d42:	f001 fced 	bl	8007720 <memp_init>
  pbuf_init();
  netif_init();
 8005d46:	f001 fdeb 	bl	8007920 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005d4a:	f008 f965 	bl	800e018 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005d4e:	f002 fec1 	bl	8008ad4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005d52:	f008 f8d7 	bl	800df04 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8005d68:	4b33      	ldr	r3, [pc, #204]	@ (8005e38 <ip4_route+0xd8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e036      	b.n	8005dde <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02b      	beq.n	8005dd8 <ip4_route+0x78>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d86:	089b      	lsrs	r3, r3, #2
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d022      	beq.n	8005dd8 <ip4_route+0x78>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3304      	adds	r3, #4
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01d      	beq.n	8005dd8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3304      	adds	r3, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	405a      	eors	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3308      	adds	r3, #8
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	e038      	b.n	8005e2a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d108      	bne.n	8005dd8 <ip4_route+0x78>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d101      	bne.n	8005dd8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	e028      	b.n	8005e2a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1c5      	bne.n	8005d70 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005de4:	4b15      	ldr	r3, [pc, #84]	@ (8005e3c <ip4_route+0xdc>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01a      	beq.n	8005e22 <ip4_route+0xc2>
 8005dec:	4b13      	ldr	r3, [pc, #76]	@ (8005e3c <ip4_route+0xdc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d012      	beq.n	8005e22 <ip4_route+0xc2>
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e3c <ip4_route+0xdc>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <ip4_route+0xdc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3304      	adds	r3, #4
 8005e12:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d004      	beq.n	8005e22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e20:	d101      	bne.n	8005e26 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e001      	b.n	8005e2a <ip4_route+0xca>
  }

  return netif_default;
 8005e26:	4b05      	ldr	r3, [pc, #20]	@ (8005e3c <ip4_route+0xdc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	24007c60 	.word	0x24007c60
 8005e3c:	24007c64 	.word	0x24007c64

08005e40 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d016      	beq.n	8005e86 <ip4_input_accept+0x46>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d011      	beq.n	8005e86 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005e62:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <ip4_input_accept+0x50>)
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d008      	beq.n	8005e82 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005e70:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <ip4_input_accept+0x50>)
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fa08 	bl	800628c <ip4_addr_isbroadcast_u32>
 8005e7c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	24004d44 	.word	0x24004d44

08005e94 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d004      	beq.n	8005eba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f002 fb81 	bl	80085b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e107      	b.n	80060ca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	885b      	ldrh	r3, [r3, #2]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fc6f 	bl	80047b4 <lwip_htons>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	891b      	ldrh	r3, [r3, #8]
 8005ede:	89ba      	ldrh	r2, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d204      	bcs.n	8005eee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8005ee4:	89bb      	ldrh	r3, [r7, #12]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f002 f9df 	bl	80082ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	895b      	ldrh	r3, [r3, #10]
 8005ef2:	89fa      	ldrh	r2, [r7, #14]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d807      	bhi.n	8005f08 <ip4_input+0x74>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	891b      	ldrh	r3, [r3, #8]
 8005efc:	89ba      	ldrh	r2, [r7, #12]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d802      	bhi.n	8005f08 <ip4_input+0x74>
 8005f02:	89fb      	ldrh	r3, [r7, #14]
 8005f04:	2b13      	cmp	r3, #19
 8005f06:	d804      	bhi.n	8005f12 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f002 fb55 	bl	80085b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e0db      	b.n	80060ca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	4a6f      	ldr	r2, [pc, #444]	@ (80060d4 <ip4_input+0x240>)
 8005f18:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	4a6d      	ldr	r2, [pc, #436]	@ (80060d4 <ip4_input+0x240>)
 8005f20:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005f22:	4b6c      	ldr	r3, [pc, #432]	@ (80060d4 <ip4_input+0x240>)
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f2a:	2be0      	cmp	r3, #224	@ 0xe0
 8005f2c:	d112      	bne.n	8005f54 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <ip4_input+0xba>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	3304      	adds	r3, #4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <ip4_input+0xba>
      netif = inp;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	e02a      	b.n	8005fa4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	e027      	b.n	8005fa4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8005f54:	6838      	ldr	r0, [r7, #0]
 8005f56:	f7ff ff73 	bl	8005e40 <ip4_input_accept>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <ip4_input+0xd2>
      netif = inp;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	e01e      	b.n	8005fa4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8005f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80060d4 <ip4_input+0x240>)
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f72:	d017      	beq.n	8005fa4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8005f74:	4b58      	ldr	r3, [pc, #352]	@ (80060d8 <ip4_input+0x244>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e00e      	b.n	8005f9a <ip4_input+0x106>
          if (netif == inp) {
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d006      	beq.n	8005f92 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8005f84:	6938      	ldr	r0, [r7, #16]
 8005f86:	f7ff ff5b 	bl	8005e40 <ip4_input_accept>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d108      	bne.n	8005fa2 <ip4_input+0x10e>
 8005f90:	e000      	b.n	8005f94 <ip4_input+0x100>
            continue;
 8005f92:	bf00      	nop
        NETIF_FOREACH(netif) {
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1ed      	bne.n	8005f7c <ip4_input+0xe8>
 8005fa0:	e000      	b.n	8005fa4 <ip4_input+0x110>
            break;
 8005fa2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80060d4 <ip4_input+0x240>)
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f96e 	bl	800628c <ip4_addr_isbroadcast_u32>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8005fb6:	4b47      	ldr	r3, [pc, #284]	@ (80060d4 <ip4_input+0x240>)
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005fbe:	2be0      	cmp	r3, #224	@ 0xe0
 8005fc0:	d104      	bne.n	8005fcc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f002 faf8 	bl	80085b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e07e      	b.n	80060ca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f002 faf0 	bl	80085b8 <pbuf_free>
    return ERR_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e076      	b.n	80060ca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	88db      	ldrh	r3, [r3, #6]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fc92 	bl	8006918 <ip4_reass>
 8005ff4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <ip4_input+0x16c>
      return ERR_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e064      	b.n	80060ca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8006006:	4a33      	ldr	r2, [pc, #204]	@ (80060d4 <ip4_input+0x240>)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800600c:	4a31      	ldr	r2, [pc, #196]	@ (80060d4 <ip4_input+0x240>)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8006012:	4a30      	ldr	r2, [pc, #192]	@ (80060d4 <ip4_input+0x240>)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	b2db      	uxtb	r3, r3
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	4b2a      	ldr	r3, [pc, #168]	@ (80060d4 <ip4_input+0x240>)
 800602a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800602c:	89fb      	ldrh	r3, [r7, #14]
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f002 fa3b 	bl	80084ac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	7a5b      	ldrb	r3, [r3, #9]
 800603a:	2b11      	cmp	r3, #17
 800603c:	d006      	beq.n	800604c <ip4_input+0x1b8>
 800603e:	2b11      	cmp	r3, #17
 8006040:	dc13      	bgt.n	800606a <ip4_input+0x1d6>
 8006042:	2b01      	cmp	r3, #1
 8006044:	d00c      	beq.n	8006060 <ip4_input+0x1cc>
 8006046:	2b06      	cmp	r3, #6
 8006048:	d005      	beq.n	8006056 <ip4_input+0x1c2>
 800604a:	e00e      	b.n	800606a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f008 f858 	bl	800e104 <udp_input>
        break;
 8006054:	e026      	b.n	80060a4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f004 f8d7 	bl	800a20c <tcp_input>
        break;
 800605e:	e021      	b.n	80060a4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff fbf6 	bl	8005854 <icmp_input>
        break;
 8006068:	e01c      	b.n	80060a4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800606a:	4b1a      	ldr	r3, [pc, #104]	@ (80060d4 <ip4_input+0x240>)
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	6939      	ldr	r1, [r7, #16]
 8006070:	4618      	mov	r0, r3
 8006072:	f000 f90b 	bl	800628c <ip4_addr_isbroadcast_u32>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10f      	bne.n	800609c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800607c:	4b15      	ldr	r3, [pc, #84]	@ (80060d4 <ip4_input+0x240>)
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8006084:	2be0      	cmp	r3, #224	@ 0xe0
 8006086:	d009      	beq.n	800609c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8006088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f002 fa7f 	bl	8008592 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8006094:	2102      	movs	r1, #2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fcfc 	bl	8005a94 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f002 fa8b 	bl	80085b8 <pbuf_free>
        break;
 80060a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80060a4:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <ip4_input+0x240>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80060aa:	4b0a      	ldr	r3, [pc, #40]	@ (80060d4 <ip4_input+0x240>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80060b0:	4b08      	ldr	r3, [pc, #32]	@ (80060d4 <ip4_input+0x240>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80060b6:	4b07      	ldr	r3, [pc, #28]	@ (80060d4 <ip4_input+0x240>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80060bc:	4b05      	ldr	r3, [pc, #20]	@ (80060d4 <ip4_input+0x240>)
 80060be:	2200      	movs	r2, #0
 80060c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80060c2:	4b04      	ldr	r3, [pc, #16]	@ (80060d4 <ip4_input+0x240>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	24004d44 	.word	0x24004d44
 80060d8:	24007c60 	.word	0x24007c60

080060dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	@ 0x28
 80060e0:	af04      	add	r7, sp, #16
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <ip4_output_if+0x26>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d102      	bne.n	8006108 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8006102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006104:	3304      	adds	r3, #4
 8006106:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006108:	78fa      	ldrb	r2, [r7, #3]
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	9302      	str	r3, [sp, #8]
 800610e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6979      	ldr	r1, [r7, #20]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f805 	bl	8006130 <ip4_output_if_src>
 8006126:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	7b9b      	ldrb	r3, [r3, #14]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d006      	beq.n	8006154 <ip4_output_if_src+0x24>
 8006146:	4b4b      	ldr	r3, [pc, #300]	@ (8006274 <ip4_output_if_src+0x144>)
 8006148:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800614c:	494a      	ldr	r1, [pc, #296]	@ (8006278 <ip4_output_if_src+0x148>)
 800614e:	484b      	ldr	r0, [pc, #300]	@ (800627c <ip4_output_if_src+0x14c>)
 8006150:	f008 fa1c 	bl	800e58c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d060      	beq.n	800621c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800615a:	2314      	movs	r3, #20
 800615c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800615e:	2114      	movs	r1, #20
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f002 f993 	bl	800848c <pbuf_add_header>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800616c:	f06f 0301 	mvn.w	r3, #1
 8006170:	e07c      	b.n	800626c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	895b      	ldrh	r3, [r3, #10]
 800617c:	2b13      	cmp	r3, #19
 800617e:	d806      	bhi.n	800618e <ip4_output_if_src+0x5e>
 8006180:	4b3c      	ldr	r3, [pc, #240]	@ (8006274 <ip4_output_if_src+0x144>)
 8006182:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8006186:	493e      	ldr	r1, [pc, #248]	@ (8006280 <ip4_output_if_src+0x150>)
 8006188:	483c      	ldr	r0, [pc, #240]	@ (800627c <ip4_output_if_src+0x14c>)
 800618a:	f008 f9ff 	bl	800e58c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800619a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80061a4:	8b7b      	ldrh	r3, [r7, #26]
 80061a6:	089b      	lsrs	r3, r3, #2
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80061bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	891b      	ldrh	r3, [r3, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe faf6 	bl	80047b4 <lwip_htons>
 80061c8:	4603      	mov	r3, r0
 80061ca:	461a      	mov	r2, r3
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2200      	movs	r2, #0
 80061d4:	719a      	strb	r2, [r3, #6]
 80061d6:	2200      	movs	r2, #0
 80061d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80061da:	4b2a      	ldr	r3, [pc, #168]	@ (8006284 <ip4_output_if_src+0x154>)
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe fae8 	bl	80047b4 <lwip_htons>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80061ec:	4b25      	ldr	r3, [pc, #148]	@ (8006284 <ip4_output_if_src+0x154>)
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	4b23      	ldr	r3, [pc, #140]	@ (8006284 <ip4_output_if_src+0x154>)
 80061f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80061fe:	4b22      	ldr	r3, [pc, #136]	@ (8006288 <ip4_output_if_src+0x158>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	60da      	str	r2, [r3, #12]
 8006206:	e003      	b.n	8006210 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2200      	movs	r2, #0
 8006214:	729a      	strb	r2, [r3, #10]
 8006216:	2200      	movs	r2, #0
 8006218:	72da      	strb	r2, [r3, #11]
 800621a:	e00f      	b.n	800623c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	895b      	ldrh	r3, [r3, #10]
 8006220:	2b13      	cmp	r3, #19
 8006222:	d802      	bhi.n	800622a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8006224:	f06f 0301 	mvn.w	r3, #1
 8006228:	e020      	b.n	800626c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8006236:	f107 0314 	add.w	r3, r7, #20
 800623a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00c      	beq.n	800625e <ip4_output_if_src+0x12e>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	891a      	ldrh	r2, [r3, #8]
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800624c:	429a      	cmp	r2, r3
 800624e:	d906      	bls.n	800625e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fd53 	bl	8006d00 <ip4_frag>
 800625a:	4603      	mov	r3, r0
 800625c:	e006      	b.n	800626c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	68f9      	ldr	r1, [r7, #12]
 8006266:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006268:	4798      	blx	r3
 800626a:	4603      	mov	r3, r0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	0800f964 	.word	0x0800f964
 8006278:	0800fa0c 	.word	0x0800fa0c
 800627c:	0800fa18 	.word	0x0800fa18
 8006280:	0800fa40 	.word	0x0800fa40
 8006284:	24004d5c 	.word	0x24004d5c
 8006288:	0801240c 	.word	0x0801240c

0800628c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d002      	beq.n	80062a8 <ip4_addr_isbroadcast_u32+0x1c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e02a      	b.n	8006302 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e021      	b.n	8006302 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	3304      	adds	r3, #4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d101      	bne.n	80062ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e019      	b.n	8006302 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	3304      	adds	r3, #4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	405a      	eors	r2, r3
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4013      	ands	r3, r2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10d      	bne.n	8006300 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	3308      	adds	r3, #8
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	43da      	mvns	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d101      	bne.n	8006300 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8006300:	2300      	movs	r3, #0
  }
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800631a:	4b12      	ldr	r3, [pc, #72]	@ (8006364 <ip_reass_tmr+0x54>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8006320:	e018      	b.n	8006354 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	7fdb      	ldrb	r3, [r3, #31]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <ip_reass_tmr+0x32>
      r->timer--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	7fdb      	ldrb	r3, [r3, #31]
 800632e:	3b01      	subs	r3, #1
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e008      	b.n	8006354 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f80a 	bl	8006368 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e3      	bne.n	8006322 <ip_reass_tmr+0x12>
    }
  }
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	24004d60 	.word	0x24004d60

08006368 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d105      	bne.n	800638a <ip_reass_free_complete_datagram+0x22>
 800637e:	4b45      	ldr	r3, [pc, #276]	@ (8006494 <ip_reass_free_complete_datagram+0x12c>)
 8006380:	22ab      	movs	r2, #171	@ 0xab
 8006382:	4945      	ldr	r1, [pc, #276]	@ (8006498 <ip_reass_free_complete_datagram+0x130>)
 8006384:	4845      	ldr	r0, [pc, #276]	@ (800649c <ip_reass_free_complete_datagram+0x134>)
 8006386:	f008 f901 	bl	800e58c <iprintf>
  if (prev != NULL) {
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	d005      	beq.n	80063a6 <ip_reass_free_complete_datagram+0x3e>
 800639a:	4b3e      	ldr	r3, [pc, #248]	@ (8006494 <ip_reass_free_complete_datagram+0x12c>)
 800639c:	22ad      	movs	r2, #173	@ 0xad
 800639e:	4940      	ldr	r1, [pc, #256]	@ (80064a0 <ip_reass_free_complete_datagram+0x138>)
 80063a0:	483e      	ldr	r0, [pc, #248]	@ (800649c <ip_reass_free_complete_datagram+0x134>)
 80063a2:	f008 f8f3 	bl	800e58c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	889b      	ldrh	r3, [r3, #4]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d12a      	bne.n	800640e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	6858      	ldr	r0, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3308      	adds	r3, #8
 80063ce:	2214      	movs	r2, #20
 80063d0:	4619      	mov	r1, r3
 80063d2:	f008 f9b6 	bl	800e742 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80063d6:	2101      	movs	r1, #1
 80063d8:	69b8      	ldr	r0, [r7, #24]
 80063da:	f7ff fb6b 	bl	8005ab4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80063de:	69b8      	ldr	r0, [r7, #24]
 80063e0:	f002 f972 	bl	80086c8 <pbuf_clen>
 80063e4:	4603      	mov	r3, r0
 80063e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80063e8:	8bfa      	ldrh	r2, [r7, #30]
 80063ea:	8a7b      	ldrh	r3, [r7, #18]
 80063ec:	4413      	add	r3, r2
 80063ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063f2:	db05      	blt.n	8006400 <ip_reass_free_complete_datagram+0x98>
 80063f4:	4b27      	ldr	r3, [pc, #156]	@ (8006494 <ip_reass_free_complete_datagram+0x12c>)
 80063f6:	22bc      	movs	r2, #188	@ 0xbc
 80063f8:	492a      	ldr	r1, [pc, #168]	@ (80064a4 <ip_reass_free_complete_datagram+0x13c>)
 80063fa:	4828      	ldr	r0, [pc, #160]	@ (800649c <ip_reass_free_complete_datagram+0x134>)
 80063fc:	f008 f8c6 	bl	800e58c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8006400:	8bfa      	ldrh	r2, [r7, #30]
 8006402:	8a7b      	ldrh	r3, [r7, #18]
 8006404:	4413      	add	r3, r2
 8006406:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8006408:	69b8      	ldr	r0, [r7, #24]
 800640a:	f002 f8d5 	bl	80085b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8006414:	e01f      	b.n	8006456 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f002 f94e 	bl	80086c8 <pbuf_clen>
 800642c:	4603      	mov	r3, r0
 800642e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006430:	8bfa      	ldrh	r2, [r7, #30]
 8006432:	8a7b      	ldrh	r3, [r7, #18]
 8006434:	4413      	add	r3, r2
 8006436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800643a:	db05      	blt.n	8006448 <ip_reass_free_complete_datagram+0xe0>
 800643c:	4b15      	ldr	r3, [pc, #84]	@ (8006494 <ip_reass_free_complete_datagram+0x12c>)
 800643e:	22cc      	movs	r2, #204	@ 0xcc
 8006440:	4918      	ldr	r1, [pc, #96]	@ (80064a4 <ip_reass_free_complete_datagram+0x13c>)
 8006442:	4816      	ldr	r0, [pc, #88]	@ (800649c <ip_reass_free_complete_datagram+0x134>)
 8006444:	f008 f8a2 	bl	800e58c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8006448:	8bfa      	ldrh	r2, [r7, #30]
 800644a:	8a7b      	ldrh	r3, [r7, #18]
 800644c:	4413      	add	r3, r2
 800644e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f002 f8b1 	bl	80085b8 <pbuf_free>
  while (p != NULL) {
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1dc      	bne.n	8006416 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f8c2 	bl	80065e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8006464:	4b10      	ldr	r3, [pc, #64]	@ (80064a8 <ip_reass_free_complete_datagram+0x140>)
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	8bfa      	ldrh	r2, [r7, #30]
 800646a:	429a      	cmp	r2, r3
 800646c:	d905      	bls.n	800647a <ip_reass_free_complete_datagram+0x112>
 800646e:	4b09      	ldr	r3, [pc, #36]	@ (8006494 <ip_reass_free_complete_datagram+0x12c>)
 8006470:	22d2      	movs	r2, #210	@ 0xd2
 8006472:	490e      	ldr	r1, [pc, #56]	@ (80064ac <ip_reass_free_complete_datagram+0x144>)
 8006474:	4809      	ldr	r0, [pc, #36]	@ (800649c <ip_reass_free_complete_datagram+0x134>)
 8006476:	f008 f889 	bl	800e58c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800647a:	4b0b      	ldr	r3, [pc, #44]	@ (80064a8 <ip_reass_free_complete_datagram+0x140>)
 800647c:	881a      	ldrh	r2, [r3, #0]
 800647e:	8bfb      	ldrh	r3, [r7, #30]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	b29a      	uxth	r2, r3
 8006484:	4b08      	ldr	r3, [pc, #32]	@ (80064a8 <ip_reass_free_complete_datagram+0x140>)
 8006486:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8006488:	8bfb      	ldrh	r3, [r7, #30]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	0800fa70 	.word	0x0800fa70
 8006498:	0800fb1c 	.word	0x0800fb1c
 800649c:	0800fb28 	.word	0x0800fb28
 80064a0:	0800fb50 	.word	0x0800fb50
 80064a4:	0800fb64 	.word	0x0800fb64
 80064a8:	24004d64 	.word	0x24004d64
 80064ac:	0800fb84 	.word	0x0800fb84

080064b0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	@ 0x28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80064ce:	4b28      	ldr	r3, [pc, #160]	@ (8006570 <ip_reass_remove_oldest_datagram+0xc0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80064d4:	e030      	b.n	8006538 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d10c      	bne.n	80064fc <ip_reass_remove_oldest_datagram+0x4c>
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	699a      	ldr	r2, [r3, #24]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d106      	bne.n	80064fc <ip_reass_remove_oldest_datagram+0x4c>
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	899a      	ldrh	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	889b      	ldrh	r3, [r3, #4]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d014      	beq.n	8006526 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	3301      	adds	r3, #1
 8006500:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	e009      	b.n	8006526 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	7fda      	ldrb	r2, [r3, #31]
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	7fdb      	ldrb	r3, [r3, #31]
 800651a:	429a      	cmp	r2, r3
 800651c:	d803      	bhi.n	8006526 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1cb      	bne.n	80064d6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8006544:	69b9      	ldr	r1, [r7, #24]
 8006546:	6a38      	ldr	r0, [r7, #32]
 8006548:	f7ff ff0e 	bl	8006368 <ip_reass_free_complete_datagram>
 800654c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	da02      	bge.n	8006564 <ip_reass_remove_oldest_datagram+0xb4>
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b01      	cmp	r3, #1
 8006562:	dcac      	bgt.n	80064be <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8006564:	697b      	ldr	r3, [r7, #20]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3728      	adds	r7, #40	@ 0x28
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	24004d60 	.word	0x24004d60

08006574 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800657e:	2004      	movs	r0, #4
 8006580:	f001 f934 	bl	80077ec <memp_malloc>
 8006584:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d110      	bne.n	80065ae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff ff8e 	bl	80064b0 <ip_reass_remove_oldest_datagram>
 8006594:	4602      	mov	r2, r0
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	4293      	cmp	r3, r2
 800659a:	dc03      	bgt.n	80065a4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800659c:	2004      	movs	r0, #4
 800659e:	f001 f925 	bl	80077ec <memp_malloc>
 80065a2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	e016      	b.n	80065dc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80065ae:	2220      	movs	r2, #32
 80065b0:	2100      	movs	r1, #0
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f008 f84f 	bl	800e656 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	220f      	movs	r2, #15
 80065bc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80065be:	4b09      	ldr	r3, [pc, #36]	@ (80065e4 <ip_reass_enqueue_new_datagram+0x70>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80065c6:	4a07      	ldr	r2, [pc, #28]	@ (80065e4 <ip_reass_enqueue_new_datagram+0x70>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3308      	adds	r3, #8
 80065d0:	2214      	movs	r2, #20
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f008 f8b4 	bl	800e742 <memcpy>
  return ipr;
 80065da:	68fb      	ldr	r3, [r7, #12]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	24004d60 	.word	0x24004d60

080065e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80065f2:	4b10      	ldr	r3, [pc, #64]	@ (8006634 <ip_reass_dequeue_datagram+0x4c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d104      	bne.n	8006606 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0c      	ldr	r2, [pc, #48]	@ (8006634 <ip_reass_dequeue_datagram+0x4c>)
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e00d      	b.n	8006622 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <ip_reass_dequeue_datagram+0x32>
 800660c:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <ip_reass_dequeue_datagram+0x50>)
 800660e:	f240 1245 	movw	r2, #325	@ 0x145
 8006612:	490a      	ldr	r1, [pc, #40]	@ (800663c <ip_reass_dequeue_datagram+0x54>)
 8006614:	480a      	ldr	r0, [pc, #40]	@ (8006640 <ip_reass_dequeue_datagram+0x58>)
 8006616:	f007 ffb9 	bl	800e58c <iprintf>
    prev->next = ipr->next;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	2004      	movs	r0, #4
 8006626:	f001 f951 	bl	80078cc <memp_free>
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	24004d60 	.word	0x24004d60
 8006638:	0800fa70 	.word	0x0800fa70
 800663c:	0800fba8 	.word	0x0800fba8
 8006640:	0800fb28 	.word	0x0800fb28

08006644 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	@ 0x30
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8006654:	2301      	movs	r3, #1
 8006656:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	885b      	ldrh	r3, [r3, #2]
 8006662:	b29b      	uxth	r3, r3
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe f8a5 	bl	80047b4 <lwip_htons>
 800666a:	4603      	mov	r3, r0
 800666c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	b2db      	uxtb	r3, r3
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800667c:	7e7b      	ldrb	r3, [r7, #25]
 800667e:	b29b      	uxth	r3, r3
 8006680:	8b7a      	ldrh	r2, [r7, #26]
 8006682:	429a      	cmp	r2, r3
 8006684:	d202      	bcs.n	800668c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006686:	f04f 33ff 	mov.w	r3, #4294967295
 800668a:	e135      	b.n	80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800668c:	7e7b      	ldrb	r3, [r7, #25]
 800668e:	b29b      	uxth	r3, r3
 8006690:	8b7a      	ldrh	r2, [r7, #26]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	88db      	ldrh	r3, [r3, #6]
 800669a:	b29b      	uxth	r3, r3
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe f889 	bl	80047b4 <lwip_htons>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80066b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	2200      	movs	r2, #0
 80066bc:	705a      	strb	r2, [r3, #1]
 80066be:	2200      	movs	r2, #0
 80066c0:	709a      	strb	r2, [r3, #2]
 80066c2:	2200      	movs	r2, #0
 80066c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80066c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c8:	8afa      	ldrh	r2, [r7, #22]
 80066ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80066cc:	8afa      	ldrh	r2, [r7, #22]
 80066ce:	8b7b      	ldrh	r3, [r7, #26]
 80066d0:	4413      	add	r3, r2
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80066d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066da:	88db      	ldrh	r3, [r3, #6]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8afa      	ldrh	r2, [r7, #22]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d902      	bls.n	80066ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	e106      	b.n	80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f0:	e068      	b.n	80067c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80066f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fa:	889b      	ldrh	r3, [r3, #4]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	889b      	ldrh	r3, [r3, #4]
 8006702:	b29b      	uxth	r3, r3
 8006704:	429a      	cmp	r2, r3
 8006706:	d235      	bcs.n	8006774 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8006708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800670c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	2b00      	cmp	r3, #0
 8006712:	d020      	beq.n	8006756 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	889b      	ldrh	r3, [r3, #4]
 8006718:	b29a      	uxth	r2, r3
 800671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671c:	88db      	ldrh	r3, [r3, #6]
 800671e:	b29b      	uxth	r3, r3
 8006720:	429a      	cmp	r2, r3
 8006722:	d307      	bcc.n	8006734 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	88db      	ldrh	r3, [r3, #6]
 8006728:	b29a      	uxth	r2, r3
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	889b      	ldrh	r3, [r3, #4]
 800672e:	b29b      	uxth	r3, r3
 8006730:	429a      	cmp	r2, r3
 8006732:	d902      	bls.n	800673a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006734:	f04f 33ff 	mov.w	r3, #4294967295
 8006738:	e0de      	b.n	80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	88db      	ldrh	r3, [r3, #6]
 8006744:	b29a      	uxth	r2, r3
 8006746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006748:	889b      	ldrh	r3, [r3, #4]
 800674a:	b29b      	uxth	r3, r3
 800674c:	429a      	cmp	r2, r3
 800674e:	d03d      	beq.n	80067cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8006754:	e03a      	b.n	80067cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	88db      	ldrh	r3, [r3, #6]
 800675a:	b29a      	uxth	r2, r3
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	889b      	ldrh	r3, [r3, #4]
 8006760:	b29b      	uxth	r3, r3
 8006762:	429a      	cmp	r2, r3
 8006764:	d902      	bls.n	800676c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006766:	f04f 33ff 	mov.w	r3, #4294967295
 800676a:	e0c5      	b.n	80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	605a      	str	r2, [r3, #4]
      break;
 8006772:	e02b      	b.n	80067cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8006774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006776:	889b      	ldrh	r3, [r3, #4]
 8006778:	b29a      	uxth	r2, r3
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	889b      	ldrh	r3, [r3, #4]
 800677e:	b29b      	uxth	r3, r3
 8006780:	429a      	cmp	r2, r3
 8006782:	d102      	bne.n	800678a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006784:	f04f 33ff 	mov.w	r3, #4294967295
 8006788:	e0b6      	b.n	80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800678a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678c:	889b      	ldrh	r3, [r3, #4]
 800678e:	b29a      	uxth	r2, r3
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	88db      	ldrh	r3, [r3, #6]
 8006794:	b29b      	uxth	r3, r3
 8006796:	429a      	cmp	r2, r3
 8006798:	d202      	bcs.n	80067a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800679a:	f04f 33ff 	mov.w	r3, #4294967295
 800679e:	e0ab      	b.n	80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80067a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a8:	88db      	ldrh	r3, [r3, #6]
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	889b      	ldrh	r3, [r3, #4]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d001      	beq.n	80067ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d193      	bne.n	80066f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80067ca:	e000      	b.n	80067ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80067cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d12d      	bne.n	8006830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80067d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d01c      	beq.n	8006814 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80067da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067dc:	88db      	ldrh	r3, [r3, #6]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e2:	889b      	ldrh	r3, [r3, #4]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d906      	bls.n	80067f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80067ea:	4b45      	ldr	r3, [pc, #276]	@ (8006900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80067ec:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80067f0:	4944      	ldr	r1, [pc, #272]	@ (8006904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80067f2:	4845      	ldr	r0, [pc, #276]	@ (8006908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80067f4:	f007 feca 	bl	800e58c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80067f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	88db      	ldrh	r3, [r3, #6]
 8006802:	b29a      	uxth	r2, r3
 8006804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006806:	889b      	ldrh	r3, [r3, #4]
 8006808:	b29b      	uxth	r3, r3
 800680a:	429a      	cmp	r2, r3
 800680c:	d010      	beq.n	8006830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	623b      	str	r3, [r7, #32]
 8006812:	e00d      	b.n	8006830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d006      	beq.n	800682a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800681c:	4b38      	ldr	r3, [pc, #224]	@ (8006900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800681e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8006822:	493a      	ldr	r1, [pc, #232]	@ (800690c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8006824:	4838      	ldr	r0, [pc, #224]	@ (8006908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006826:	f007 feb1 	bl	800e58c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d105      	bne.n	8006842 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	7f9b      	ldrb	r3, [r3, #30]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d059      	beq.n	80068f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d04f      	beq.n	80068e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d006      	beq.n	800685e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	889b      	ldrh	r3, [r3, #4]
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	623b      	str	r3, [r7, #32]
 8006862:	e041      	b.n	80068e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8006864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006866:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8006868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800686e:	e012      	b.n	8006896 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	88db      	ldrh	r3, [r3, #6]
 800687a:	b29a      	uxth	r2, r3
 800687c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687e:	889b      	ldrh	r3, [r3, #4]
 8006880:	b29b      	uxth	r3, r3
 8006882:	429a      	cmp	r2, r3
 8006884:	d002      	beq.n	800688c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	623b      	str	r3, [r7, #32]
            break;
 800688a:	e007      	b.n	800689c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800688c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8006890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e9      	bne.n	8006870 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d022      	beq.n	80068e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80068aa:	4b15      	ldr	r3, [pc, #84]	@ (8006900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80068ac:	f240 12df 	movw	r2, #479	@ 0x1df
 80068b0:	4917      	ldr	r1, [pc, #92]	@ (8006910 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80068b2:	4815      	ldr	r0, [pc, #84]	@ (8006908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80068b4:	f007 fe6a 	bl	800e58c <iprintf>
          LWIP_ASSERT("sanity check",
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d106      	bne.n	80068d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80068c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80068c6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80068ca:	4911      	ldr	r1, [pc, #68]	@ (8006910 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80068cc:	480e      	ldr	r0, [pc, #56]	@ (8006908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80068ce:	f007 fe5d 	bl	800e58c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80068d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d006      	beq.n	80068e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80068da:	4b09      	ldr	r3, [pc, #36]	@ (8006900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80068dc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80068e0:	490c      	ldr	r1, [pc, #48]	@ (8006914 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80068e2:	4809      	ldr	r0, [pc, #36]	@ (8006908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80068e4:	f007 fe52 	bl	800e58c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bf14      	ite	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	2300      	moveq	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	e000      	b.n	80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3730      	adds	r7, #48	@ 0x30
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	0800fa70 	.word	0x0800fa70
 8006904:	0800fbc4 	.word	0x0800fbc4
 8006908:	0800fb28 	.word	0x0800fb28
 800690c:	0800fbe4 	.word	0x0800fbe4
 8006910:	0800fc1c 	.word	0x0800fc1c
 8006914:	0800fc2c 	.word	0x0800fc2c

08006918 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08e      	sub	sp, #56	@ 0x38
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8006926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	b2db      	uxtb	r3, r3
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b14      	cmp	r3, #20
 8006936:	f040 8171 	bne.w	8006c1c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800693a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693c:	88db      	ldrh	r3, [r3, #6]
 800693e:	b29b      	uxth	r3, r3
 8006940:	4618      	mov	r0, r3
 8006942:	f7fd ff37 	bl	80047b4 <lwip_htons>
 8006946:	4603      	mov	r3, r0
 8006948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800694c:	b29b      	uxth	r3, r3
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8006952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006954:	885b      	ldrh	r3, [r3, #2]
 8006956:	b29b      	uxth	r3, r3
 8006958:	4618      	mov	r0, r3
 800695a:	f7fd ff2b 	bl	80047b4 <lwip_htons>
 800695e:	4603      	mov	r3, r0
 8006960:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	b2db      	uxtb	r3, r3
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8006972:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006976:	b29b      	uxth	r3, r3
 8006978:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800697a:	429a      	cmp	r2, r3
 800697c:	f0c0 8150 	bcc.w	8006c20 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8006980:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006984:	b29b      	uxth	r3, r3
 8006986:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fe9b 	bl	80086c8 <pbuf_clen>
 8006992:	4603      	mov	r3, r0
 8006994:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006996:	4b8c      	ldr	r3, [pc, #560]	@ (8006bc8 <ip4_reass+0x2b0>)
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	8c3b      	ldrh	r3, [r7, #32]
 800699e:	4413      	add	r3, r2
 80069a0:	2b0a      	cmp	r3, #10
 80069a2:	dd10      	ble.n	80069c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80069a4:	8c3b      	ldrh	r3, [r7, #32]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069aa:	f7ff fd81 	bl	80064b0 <ip_reass_remove_oldest_datagram>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8137 	beq.w	8006c24 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80069b6:	4b84      	ldr	r3, [pc, #528]	@ (8006bc8 <ip4_reass+0x2b0>)
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	8c3b      	ldrh	r3, [r7, #32]
 80069be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80069c0:	2b0a      	cmp	r3, #10
 80069c2:	f300 812f 	bgt.w	8006c24 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80069c6:	4b81      	ldr	r3, [pc, #516]	@ (8006bcc <ip4_reass+0x2b4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80069cc:	e015      	b.n	80069fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	695a      	ldr	r2, [r3, #20]
 80069d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d10c      	bne.n	80069f4 <ip4_reass+0xdc>
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d106      	bne.n	80069f4 <ip4_reass+0xdc>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	899a      	ldrh	r2, [r3, #12]
 80069ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ec:	889b      	ldrh	r3, [r3, #4]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d006      	beq.n	8006a02 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80069f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e6      	bne.n	80069ce <ip4_reass+0xb6>
 8006a00:	e000      	b.n	8006a04 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8006a02:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8006a0a:	8c3b      	ldrh	r3, [r7, #32]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a10:	f7ff fdb0 	bl	8006574 <ip_reass_enqueue_new_datagram>
 8006a14:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d11c      	bne.n	8006a56 <ip4_reass+0x13e>
      goto nullreturn;
 8006a1c:	e105      	b.n	8006c2a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	88db      	ldrh	r3, [r3, #6]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fd fec5 	bl	80047b4 <lwip_htons>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d110      	bne.n	8006a56 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	89db      	ldrh	r3, [r3, #14]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fd febb 	bl	80047b4 <lwip_htons>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d006      	beq.n	8006a56 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	2214      	movs	r2, #20
 8006a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a50:	4618      	mov	r0, r3
 8006a52:	f007 fe76 	bl	800e742 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	88db      	ldrh	r3, [r3, #6]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bf0c      	ite	eq
 8006a64:	2301      	moveq	r3, #1
 8006a66:	2300      	movne	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00e      	beq.n	8006a90 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8006a72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006a74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a76:	4413      	add	r3, r2
 8006a78:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006a7a:	8b7a      	ldrh	r2, [r7, #26]
 8006a7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	f0c0 80a0 	bcc.w	8006bc4 <ip4_reass+0x2ac>
 8006a84:	8b7b      	ldrh	r3, [r7, #26]
 8006a86:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	f200 809a 	bhi.w	8006bc4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a96:	f7ff fdd5 	bl	8006644 <ip_reass_chain_frag_into_datagram_and_validate>
 8006a9a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	f000 809b 	beq.w	8006bdc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006aa6:	4b48      	ldr	r3, [pc, #288]	@ (8006bc8 <ip4_reass+0x2b0>)
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	8c3b      	ldrh	r3, [r7, #32]
 8006aac:	4413      	add	r3, r2
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	4b45      	ldr	r3, [pc, #276]	@ (8006bc8 <ip4_reass+0x2b0>)
 8006ab2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00d      	beq.n	8006ad6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8006aba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006abc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006abe:	4413      	add	r3, r2
 8006ac0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	8a7a      	ldrh	r2, [r7, #18]
 8006ac6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aca:	7f9b      	ldrb	r3, [r3, #30]
 8006acc:	f043 0301 	orr.w	r3, r3, #1
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d171      	bne.n	8006bc0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	8b9b      	ldrh	r3, [r3, #28]
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	3308      	adds	r3, #8
 8006afa:	2214      	movs	r2, #20
 8006afc:	4619      	mov	r1, r3
 8006afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b00:	f007 fe1f 	bl	800e742 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8006b04:	8a3b      	ldrh	r3, [r7, #16]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fd fe54 	bl	80047b4 <lwip_htons>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b12:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	2200      	movs	r2, #0
 8006b18:	719a      	strb	r2, [r3, #6]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b20:	2200      	movs	r2, #0
 8006b22:	729a      	strb	r2, [r3, #10]
 8006b24:	2200      	movs	r2, #0
 8006b26:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8006b2e:	e00d      	b.n	8006b4c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8006b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8006b36:	2114      	movs	r1, #20
 8006b38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006b3a:	f001 fcb7 	bl	80084ac <pbuf_remove_header>
      pbuf_cat(p, r);
 8006b3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 fdfb 	bl	800873c <pbuf_cat>
      r = iprh->next_pbuf;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1ee      	bne.n	8006b30 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8006b52:	4b1e      	ldr	r3, [pc, #120]	@ (8006bcc <ip4_reass+0x2b4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d102      	bne.n	8006b62 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b60:	e010      	b.n	8006b84 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006b62:	4b1a      	ldr	r3, [pc, #104]	@ (8006bcc <ip4_reass+0x2b4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b68:	e007      	b.n	8006b7a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d006      	beq.n	8006b82 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f4      	bne.n	8006b6a <ip4_reass+0x252>
 8006b80:	e000      	b.n	8006b84 <ip4_reass+0x26c>
          break;
 8006b82:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006b84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b88:	f7ff fd2e 	bl	80065e8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fd9b 	bl	80086c8 <pbuf_clen>
 8006b92:	4603      	mov	r3, r0
 8006b94:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8006b96:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc8 <ip4_reass+0x2b0>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	8c3a      	ldrh	r2, [r7, #32]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d906      	bls.n	8006bae <ip4_reass+0x296>
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd0 <ip4_reass+0x2b8>)
 8006ba2:	f240 229b 	movw	r2, #667	@ 0x29b
 8006ba6:	490b      	ldr	r1, [pc, #44]	@ (8006bd4 <ip4_reass+0x2bc>)
 8006ba8:	480b      	ldr	r0, [pc, #44]	@ (8006bd8 <ip4_reass+0x2c0>)
 8006baa:	f007 fcef 	bl	800e58c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8006bae:	4b06      	ldr	r3, [pc, #24]	@ (8006bc8 <ip4_reass+0x2b0>)
 8006bb0:	881a      	ldrh	r2, [r3, #0]
 8006bb2:	8c3b      	ldrh	r3, [r7, #32]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	4b03      	ldr	r3, [pc, #12]	@ (8006bc8 <ip4_reass+0x2b0>)
 8006bba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	e038      	b.n	8006c32 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e036      	b.n	8006c32 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8006bc4:	bf00      	nop
 8006bc6:	e00a      	b.n	8006bde <ip4_reass+0x2c6>
 8006bc8:	24004d64 	.word	0x24004d64
 8006bcc:	24004d60 	.word	0x24004d60
 8006bd0:	0800fa70 	.word	0x0800fa70
 8006bd4:	0800fc50 	.word	0x0800fc50
 8006bd8:	0800fb28 	.word	0x0800fb28
    goto nullreturn_ipr;
 8006bdc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d106      	bne.n	8006bf2 <ip4_reass+0x2da>
 8006be4:	4b15      	ldr	r3, [pc, #84]	@ (8006c3c <ip4_reass+0x324>)
 8006be6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8006bea:	4915      	ldr	r1, [pc, #84]	@ (8006c40 <ip4_reass+0x328>)
 8006bec:	4815      	ldr	r0, [pc, #84]	@ (8006c44 <ip4_reass+0x32c>)
 8006bee:	f007 fccd 	bl	800e58c <iprintf>
  if (ipr->p == NULL) {
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d116      	bne.n	8006c28 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8006bfa:	4b13      	ldr	r3, [pc, #76]	@ (8006c48 <ip4_reass+0x330>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d006      	beq.n	8006c12 <ip4_reass+0x2fa>
 8006c04:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <ip4_reass+0x324>)
 8006c06:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8006c0a:	4910      	ldr	r1, [pc, #64]	@ (8006c4c <ip4_reass+0x334>)
 8006c0c:	480d      	ldr	r0, [pc, #52]	@ (8006c44 <ip4_reass+0x32c>)
 8006c0e:	f007 fcbd 	bl	800e58c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8006c12:	2100      	movs	r1, #0
 8006c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c16:	f7ff fce7 	bl	80065e8 <ip_reass_dequeue_datagram>
 8006c1a:	e006      	b.n	8006c2a <ip4_reass+0x312>
    goto nullreturn;
 8006c1c:	bf00      	nop
 8006c1e:	e004      	b.n	8006c2a <ip4_reass+0x312>
    goto nullreturn;
 8006c20:	bf00      	nop
 8006c22:	e002      	b.n	8006c2a <ip4_reass+0x312>
      goto nullreturn;
 8006c24:	bf00      	nop
 8006c26:	e000      	b.n	8006c2a <ip4_reass+0x312>
  }

nullreturn:
 8006c28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fcc4 	bl	80085b8 <pbuf_free>
  return NULL;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3738      	adds	r7, #56	@ 0x38
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	0800fa70 	.word	0x0800fa70
 8006c40:	0800fc6c 	.word	0x0800fc6c
 8006c44:	0800fb28 	.word	0x0800fb28
 8006c48:	24004d60 	.word	0x24004d60
 8006c4c:	0800fc78 	.word	0x0800fc78

08006c50 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8006c54:	2005      	movs	r0, #5
 8006c56:	f000 fdc9 	bl	80077ec <memp_malloc>
 8006c5a:	4603      	mov	r3, r0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <ip_frag_free_pbuf_custom_ref+0x1c>
 8006c6e:	4b07      	ldr	r3, [pc, #28]	@ (8006c8c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8006c70:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8006c74:	4906      	ldr	r1, [pc, #24]	@ (8006c90 <ip_frag_free_pbuf_custom_ref+0x30>)
 8006c76:	4807      	ldr	r0, [pc, #28]	@ (8006c94 <ip_frag_free_pbuf_custom_ref+0x34>)
 8006c78:	f007 fc88 	bl	800e58c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	2005      	movs	r0, #5
 8006c80:	f000 fe24 	bl	80078cc <memp_free>
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	0800fa70 	.word	0x0800fa70
 8006c90:	0800fc98 	.word	0x0800fc98
 8006c94:	0800fb28 	.word	0x0800fb28

08006c98 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <ipfrag_free_pbuf_custom+0x20>
 8006caa:	4b11      	ldr	r3, [pc, #68]	@ (8006cf0 <ipfrag_free_pbuf_custom+0x58>)
 8006cac:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8006cb0:	4910      	ldr	r1, [pc, #64]	@ (8006cf4 <ipfrag_free_pbuf_custom+0x5c>)
 8006cb2:	4811      	ldr	r0, [pc, #68]	@ (8006cf8 <ipfrag_free_pbuf_custom+0x60>)
 8006cb4:	f007 fc6a 	bl	800e58c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d006      	beq.n	8006cce <ipfrag_free_pbuf_custom+0x36>
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf0 <ipfrag_free_pbuf_custom+0x58>)
 8006cc2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8006cc6:	490d      	ldr	r1, [pc, #52]	@ (8006cfc <ipfrag_free_pbuf_custom+0x64>)
 8006cc8:	480b      	ldr	r0, [pc, #44]	@ (8006cf8 <ipfrag_free_pbuf_custom+0x60>)
 8006cca:	f007 fc5f 	bl	800e58c <iprintf>
  if (pcr->original != NULL) {
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fc6c 	bl	80085b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff ffbd 	bl	8006c60 <ip_frag_free_pbuf_custom_ref>
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	0800fa70 	.word	0x0800fa70
 8006cf4:	0800fca4 	.word	0x0800fca4
 8006cf8:	0800fb28 	.word	0x0800fb28
 8006cfc:	0800fcb0 	.word	0x0800fcb0

08006d00 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b094      	sub	sp, #80	@ 0x50
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006d16:	3b14      	subs	r3, #20
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da00      	bge.n	8006d1e <ip4_frag+0x1e>
 8006d1c:	3307      	adds	r3, #7
 8006d1e:	10db      	asrs	r3, r3, #3
 8006d20:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8006d22:	2314      	movs	r3, #20
 8006d24:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b14      	cmp	r3, #20
 8006d40:	d002      	beq.n	8006d48 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8006d42:	f06f 0305 	mvn.w	r3, #5
 8006d46:	e110      	b.n	8006f6a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	895b      	ldrh	r3, [r3, #10]
 8006d4c:	2b13      	cmp	r3, #19
 8006d4e:	d809      	bhi.n	8006d64 <ip4_frag+0x64>
 8006d50:	4b88      	ldr	r3, [pc, #544]	@ (8006f74 <ip4_frag+0x274>)
 8006d52:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8006d56:	4988      	ldr	r1, [pc, #544]	@ (8006f78 <ip4_frag+0x278>)
 8006d58:	4888      	ldr	r0, [pc, #544]	@ (8006f7c <ip4_frag+0x27c>)
 8006d5a:	f007 fc17 	bl	800e58c <iprintf>
 8006d5e:	f06f 0305 	mvn.w	r3, #5
 8006d62:	e102      	b.n	8006f6a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	88db      	ldrh	r3, [r3, #6]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fd fd22 	bl	80047b4 <lwip_htons>
 8006d70:	4603      	mov	r3, r0
 8006d72:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8006d74:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006d76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8006d7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006d80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d84:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	891b      	ldrh	r3, [r3, #8]
 8006d8a:	3b14      	subs	r3, #20
 8006d8c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8006d90:	e0e1      	b.n	8006f56 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006d92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	bf28      	it	cs
 8006da0:	4613      	movcs	r3, r2
 8006da2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006da4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006da8:	2114      	movs	r1, #20
 8006daa:	200e      	movs	r0, #14
 8006dac:	f001 f920 	bl	8007ff0 <pbuf_alloc>
 8006db0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80d5 	beq.w	8006f64 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	895b      	ldrh	r3, [r3, #10]
 8006dbe:	2b13      	cmp	r3, #19
 8006dc0:	d806      	bhi.n	8006dd0 <ip4_frag+0xd0>
 8006dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8006f74 <ip4_frag+0x274>)
 8006dc4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8006dc8:	496d      	ldr	r1, [pc, #436]	@ (8006f80 <ip4_frag+0x280>)
 8006dca:	486c      	ldr	r0, [pc, #432]	@ (8006f7c <ip4_frag+0x27c>)
 8006dcc:	f007 fbde 	bl	800e58c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2214      	movs	r2, #20
 8006dd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f007 fcb2 	bl	800e742 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8006de4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006de6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8006dea:	e064      	b.n	8006eb6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	895a      	ldrh	r2, [r3, #10]
 8006df0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	895b      	ldrh	r3, [r3, #10]
 8006dfa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d906      	bls.n	8006e0e <ip4_frag+0x10e>
 8006e00:	4b5c      	ldr	r3, [pc, #368]	@ (8006f74 <ip4_frag+0x274>)
 8006e02:	f240 322d 	movw	r2, #813	@ 0x32d
 8006e06:	495f      	ldr	r1, [pc, #380]	@ (8006f84 <ip4_frag+0x284>)
 8006e08:	485c      	ldr	r0, [pc, #368]	@ (8006f7c <ip4_frag+0x27c>)
 8006e0a:	f007 fbbf 	bl	800e58c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006e0e:	8bfa      	ldrh	r2, [r7, #30]
 8006e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006e14:	4293      	cmp	r3, r2
 8006e16:	bf28      	it	cs
 8006e18:	4613      	movcs	r3, r2
 8006e1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8006e1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d105      	bne.n	8006e32 <ip4_frag+0x132>
        poff = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]
        continue;
 8006e30:	e041      	b.n	8006eb6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8006e32:	f7ff ff0d 	bl	8006c50 <ip_frag_alloc_pbuf_custom_ref>
 8006e36:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8006e3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e40:	f001 fbba 	bl	80085b8 <pbuf_free>
        goto memerr;
 8006e44:	e08f      	b.n	8006f66 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006e46:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006e4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e4e:	4413      	add	r3, r2
 8006e50:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8006e54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006e58:	9201      	str	r2, [sp, #4]
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2241      	movs	r2, #65	@ 0x41
 8006e60:	2000      	movs	r0, #0
 8006e62:	f001 f9ef 	bl	8008244 <pbuf_alloced_custom>
 8006e66:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8006e6e:	69b8      	ldr	r0, [r7, #24]
 8006e70:	f7ff fef6 	bl	8006c60 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8006e74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e76:	f001 fb9f 	bl	80085b8 <pbuf_free>
        goto memerr;
 8006e7a:	e074      	b.n	8006f66 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f001 fc3b 	bl	80086f8 <pbuf_ref>
      pcr->original = p;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	4a3f      	ldr	r2, [pc, #252]	@ (8006f88 <ip4_frag+0x288>)
 8006e8c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8006e8e:	6979      	ldr	r1, [r7, #20]
 8006e90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e92:	f001 fc53 	bl	800873c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8006e96:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8006e9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8006ea4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d004      	beq.n	8006eb6 <ip4_frag+0x1b6>
        poff = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8006eb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d196      	bne.n	8006dec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8006ebe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006ec0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006ec4:	4413      	add	r3, r2
 8006ec6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ecc:	f1a3 0213 	sub.w	r2, r3, #19
 8006ed0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	bfcc      	ite	gt
 8006ed8:	2301      	movgt	r3, #1
 8006eda:	2300      	movle	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8006ee0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ee8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <ip4_frag+0x1f6>
 8006ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8006ef6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006ef8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006efc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006efe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fd fc57 	bl	80047b4 <lwip_htons>
 8006f06:	4603      	mov	r3, r0
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8006f0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f10:	3314      	adds	r3, #20
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fd fc4d 	bl	80047b4 <lwip_htons>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	2200      	movs	r2, #0
 8006f26:	729a      	strb	r2, [r3, #10]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f34:	68b8      	ldr	r0, [r7, #8]
 8006f36:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8006f38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f3a:	f001 fb3d 	bl	80085b8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8006f3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8006f42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8006f4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8006f4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006f50:	4413      	add	r3, r2
 8006f52:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8006f56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f47f af19 	bne.w	8006d92 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e002      	b.n	8006f6a <ip4_frag+0x26a>
      goto memerr;
 8006f64:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8006f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3748      	adds	r7, #72	@ 0x48
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	0800fa70 	.word	0x0800fa70
 8006f78:	0800fcbc 	.word	0x0800fcbc
 8006f7c:	0800fb28 	.word	0x0800fb28
 8006f80:	0800fcd8 	.word	0x0800fcd8
 8006f84:	0800fcf8 	.word	0x0800fcf8
 8006f88:	08006c99 	.word	0x08006c99

08006f8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006f96:	4b05      	ldr	r3, [pc, #20]	@ (8006fac <ptr_to_mem+0x20>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	4413      	add	r3, r2
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	24004d68 	.word	0x24004d68

08006fb0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006fb8:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <mem_to_ptr+0x20>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	b29b      	uxth	r3, r3
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	24004d68 	.word	0x24004d68

08006fd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006fd4:	b590      	push	{r4, r7, lr}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006fdc:	4b45      	ldr	r3, [pc, #276]	@ (80070f4 <plug_holes+0x120>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d206      	bcs.n	8006ff4 <plug_holes+0x20>
 8006fe6:	4b44      	ldr	r3, [pc, #272]	@ (80070f8 <plug_holes+0x124>)
 8006fe8:	f240 12df 	movw	r2, #479	@ 0x1df
 8006fec:	4943      	ldr	r1, [pc, #268]	@ (80070fc <plug_holes+0x128>)
 8006fee:	4844      	ldr	r0, [pc, #272]	@ (8007100 <plug_holes+0x12c>)
 8006ff0:	f007 facc 	bl	800e58c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006ff4:	4b43      	ldr	r3, [pc, #268]	@ (8007104 <plug_holes+0x130>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d306      	bcc.n	800700c <plug_holes+0x38>
 8006ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80070f8 <plug_holes+0x124>)
 8007000:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007004:	4940      	ldr	r1, [pc, #256]	@ (8007108 <plug_holes+0x134>)
 8007006:	483e      	ldr	r0, [pc, #248]	@ (8007100 <plug_holes+0x12c>)
 8007008:	f007 fac0 	bl	800e58c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	791b      	ldrb	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d006      	beq.n	8007022 <plug_holes+0x4e>
 8007014:	4b38      	ldr	r3, [pc, #224]	@ (80070f8 <plug_holes+0x124>)
 8007016:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800701a:	493c      	ldr	r1, [pc, #240]	@ (800710c <plug_holes+0x138>)
 800701c:	4838      	ldr	r0, [pc, #224]	@ (8007100 <plug_holes+0x12c>)
 800701e:	f007 fab5 	bl	800e58c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800702a:	d906      	bls.n	800703a <plug_holes+0x66>
 800702c:	4b32      	ldr	r3, [pc, #200]	@ (80070f8 <plug_holes+0x124>)
 800702e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8007032:	4937      	ldr	r1, [pc, #220]	@ (8007110 <plug_holes+0x13c>)
 8007034:	4832      	ldr	r0, [pc, #200]	@ (8007100 <plug_holes+0x12c>)
 8007036:	f007 faa9 	bl	800e58c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff ffa4 	bl	8006f8c <ptr_to_mem>
 8007044:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	429a      	cmp	r2, r3
 800704c:	d024      	beq.n	8007098 <plug_holes+0xc4>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	791b      	ldrb	r3, [r3, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d120      	bne.n	8007098 <plug_holes+0xc4>
 8007056:	4b2b      	ldr	r3, [pc, #172]	@ (8007104 <plug_holes+0x130>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	429a      	cmp	r2, r3
 800705e:	d01b      	beq.n	8007098 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007060:	4b2c      	ldr	r3, [pc, #176]	@ (8007114 <plug_holes+0x140>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	429a      	cmp	r2, r3
 8007068:	d102      	bne.n	8007070 <plug_holes+0x9c>
      lfree = mem;
 800706a:	4a2a      	ldr	r2, [pc, #168]	@ (8007114 <plug_holes+0x140>)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	881a      	ldrh	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007080:	d00a      	beq.n	8007098 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff ff80 	bl	8006f8c <ptr_to_mem>
 800708c:	4604      	mov	r4, r0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff ff8e 	bl	8006fb0 <mem_to_ptr>
 8007094:	4603      	mov	r3, r0
 8007096:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	885b      	ldrh	r3, [r3, #2]
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff ff75 	bl	8006f8c <ptr_to_mem>
 80070a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d01f      	beq.n	80070ec <plug_holes+0x118>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	791b      	ldrb	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d11b      	bne.n	80070ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80070b4:	4b17      	ldr	r3, [pc, #92]	@ (8007114 <plug_holes+0x140>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d102      	bne.n	80070c4 <plug_holes+0xf0>
      lfree = pmem;
 80070be:	4a15      	ldr	r2, [pc, #84]	@ (8007114 <plug_holes+0x140>)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	881a      	ldrh	r2, [r3, #0]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80070d4:	d00a      	beq.n	80070ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff ff56 	bl	8006f8c <ptr_to_mem>
 80070e0:	4604      	mov	r4, r0
 80070e2:	68b8      	ldr	r0, [r7, #8]
 80070e4:	f7ff ff64 	bl	8006fb0 <mem_to_ptr>
 80070e8:	4603      	mov	r3, r0
 80070ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd90      	pop	{r4, r7, pc}
 80070f4:	24004d68 	.word	0x24004d68
 80070f8:	0800fd08 	.word	0x0800fd08
 80070fc:	0800fdac 	.word	0x0800fdac
 8007100:	0800fdc4 	.word	0x0800fdc4
 8007104:	24004d6c 	.word	0x24004d6c
 8007108:	0800fdec 	.word	0x0800fdec
 800710c:	0800fe08 	.word	0x0800fe08
 8007110:	0800fe24 	.word	0x0800fe24
 8007114:	24004d70 	.word	0x24004d70

08007118 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800711e:	4b16      	ldr	r3, [pc, #88]	@ (8007178 <mem_init+0x60>)
 8007120:	4a16      	ldr	r2, [pc, #88]	@ (800717c <mem_init+0x64>)
 8007122:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007124:	4b14      	ldr	r3, [pc, #80]	@ (8007178 <mem_init+0x60>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8007130:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800713e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8007142:	f7ff ff23 	bl	8006f8c <ptr_to_mem>
 8007146:	4603      	mov	r3, r0
 8007148:	4a0d      	ldr	r2, [pc, #52]	@ (8007180 <mem_init+0x68>)
 800714a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800714c:	4b0c      	ldr	r3, [pc, #48]	@ (8007180 <mem_init+0x68>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2201      	movs	r2, #1
 8007152:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007154:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <mem_init+0x68>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800715c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800715e:	4b08      	ldr	r3, [pc, #32]	@ (8007180 <mem_init+0x68>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8007166:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007168:	4b03      	ldr	r3, [pc, #12]	@ (8007178 <mem_init+0x60>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a05      	ldr	r2, [pc, #20]	@ (8007184 <mem_init+0x6c>)
 800716e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	24004d68 	.word	0x24004d68
 800717c:	30004000 	.word	0x30004000
 8007180:	24004d6c 	.word	0x24004d6c
 8007184:	24004d70 	.word	0x24004d70

08007188 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff ff0d 	bl	8006fb0 <mem_to_ptr>
 8007196:	4603      	mov	r3, r0
 8007198:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fef4 	bl	8006f8c <ptr_to_mem>
 80071a4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	885b      	ldrh	r3, [r3, #2]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff feee 	bl	8006f8c <ptr_to_mem>
 80071b0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80071ba:	d818      	bhi.n	80071ee <mem_link_valid+0x66>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	885b      	ldrh	r3, [r3, #2]
 80071c0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80071c4:	d813      	bhi.n	80071ee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071ca:	8afa      	ldrh	r2, [r7, #22]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d004      	beq.n	80071da <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	8afa      	ldrh	r2, [r7, #22]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d109      	bne.n	80071ee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071da:	4b08      	ldr	r3, [pc, #32]	@ (80071fc <mem_link_valid+0x74>)
 80071dc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d006      	beq.n	80071f2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	885b      	ldrh	r3, [r3, #2]
 80071e8:	8afa      	ldrh	r2, [r7, #22]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d001      	beq.n	80071f2 <mem_link_valid+0x6a>
    return 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e000      	b.n	80071f4 <mem_link_valid+0x6c>
  }
  return 1;
 80071f2:	2301      	movs	r3, #1
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	24004d6c 	.word	0x24004d6c

08007200 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d04c      	beq.n	80072a8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007218:	4b25      	ldr	r3, [pc, #148]	@ (80072b0 <mem_free+0xb0>)
 800721a:	f240 2273 	movw	r2, #627	@ 0x273
 800721e:	4925      	ldr	r1, [pc, #148]	@ (80072b4 <mem_free+0xb4>)
 8007220:	4825      	ldr	r0, [pc, #148]	@ (80072b8 <mem_free+0xb8>)
 8007222:	f007 f9b3 	bl	800e58c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007226:	e040      	b.n	80072aa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3b08      	subs	r3, #8
 800722c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800722e:	4b23      	ldr	r3, [pc, #140]	@ (80072bc <mem_free+0xbc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	429a      	cmp	r2, r3
 8007236:	d306      	bcc.n	8007246 <mem_free+0x46>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f103 020c 	add.w	r2, r3, #12
 800723e:	4b20      	ldr	r3, [pc, #128]	@ (80072c0 <mem_free+0xc0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d907      	bls.n	8007256 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007246:	4b1a      	ldr	r3, [pc, #104]	@ (80072b0 <mem_free+0xb0>)
 8007248:	f240 227f 	movw	r2, #639	@ 0x27f
 800724c:	491d      	ldr	r1, [pc, #116]	@ (80072c4 <mem_free+0xc4>)
 800724e:	481a      	ldr	r0, [pc, #104]	@ (80072b8 <mem_free+0xb8>)
 8007250:	f007 f99c 	bl	800e58c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007254:	e029      	b.n	80072aa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	791b      	ldrb	r3, [r3, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d107      	bne.n	800726e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800725e:	4b14      	ldr	r3, [pc, #80]	@ (80072b0 <mem_free+0xb0>)
 8007260:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007264:	4918      	ldr	r1, [pc, #96]	@ (80072c8 <mem_free+0xc8>)
 8007266:	4814      	ldr	r0, [pc, #80]	@ (80072b8 <mem_free+0xb8>)
 8007268:	f007 f990 	bl	800e58c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800726c:	e01d      	b.n	80072aa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff ff8a 	bl	8007188 <mem_link_valid>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d107      	bne.n	800728a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800727a:	4b0d      	ldr	r3, [pc, #52]	@ (80072b0 <mem_free+0xb0>)
 800727c:	f240 2295 	movw	r2, #661	@ 0x295
 8007280:	4912      	ldr	r1, [pc, #72]	@ (80072cc <mem_free+0xcc>)
 8007282:	480d      	ldr	r0, [pc, #52]	@ (80072b8 <mem_free+0xb8>)
 8007284:	f007 f982 	bl	800e58c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007288:	e00f      	b.n	80072aa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007290:	4b0f      	ldr	r3, [pc, #60]	@ (80072d0 <mem_free+0xd0>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	429a      	cmp	r2, r3
 8007298:	d202      	bcs.n	80072a0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800729a:	4a0d      	ldr	r2, [pc, #52]	@ (80072d0 <mem_free+0xd0>)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff fe97 	bl	8006fd4 <plug_holes>
 80072a6:	e000      	b.n	80072aa <mem_free+0xaa>
    return;
 80072a8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	0800fd08 	.word	0x0800fd08
 80072b4:	0800fe50 	.word	0x0800fe50
 80072b8:	0800fdc4 	.word	0x0800fdc4
 80072bc:	24004d68 	.word	0x24004d68
 80072c0:	24004d6c 	.word	0x24004d6c
 80072c4:	0800fe74 	.word	0x0800fe74
 80072c8:	0800fe90 	.word	0x0800fe90
 80072cc:	0800feb8 	.word	0x0800feb8
 80072d0:	24004d70 	.word	0x24004d70

080072d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80072e0:	887b      	ldrh	r3, [r7, #2]
 80072e2:	3303      	adds	r3, #3
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80072ec:	8bfb      	ldrh	r3, [r7, #30]
 80072ee:	2b0b      	cmp	r3, #11
 80072f0:	d801      	bhi.n	80072f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80072f2:	230c      	movs	r3, #12
 80072f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80072f6:	8bfb      	ldrh	r3, [r7, #30]
 80072f8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80072fc:	d803      	bhi.n	8007306 <mem_trim+0x32>
 80072fe:	8bfa      	ldrh	r2, [r7, #30]
 8007300:	887b      	ldrh	r3, [r7, #2]
 8007302:	429a      	cmp	r2, r3
 8007304:	d201      	bcs.n	800730a <mem_trim+0x36>
    return NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	e0cc      	b.n	80074a4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800730a:	4b68      	ldr	r3, [pc, #416]	@ (80074ac <mem_trim+0x1d8>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d304      	bcc.n	800731e <mem_trim+0x4a>
 8007314:	4b66      	ldr	r3, [pc, #408]	@ (80074b0 <mem_trim+0x1dc>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d306      	bcc.n	800732c <mem_trim+0x58>
 800731e:	4b65      	ldr	r3, [pc, #404]	@ (80074b4 <mem_trim+0x1e0>)
 8007320:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007324:	4964      	ldr	r1, [pc, #400]	@ (80074b8 <mem_trim+0x1e4>)
 8007326:	4865      	ldr	r0, [pc, #404]	@ (80074bc <mem_trim+0x1e8>)
 8007328:	f007 f930 	bl	800e58c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800732c:	4b5f      	ldr	r3, [pc, #380]	@ (80074ac <mem_trim+0x1d8>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	429a      	cmp	r2, r3
 8007334:	d304      	bcc.n	8007340 <mem_trim+0x6c>
 8007336:	4b5e      	ldr	r3, [pc, #376]	@ (80074b0 <mem_trim+0x1dc>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d301      	bcc.n	8007344 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	e0af      	b.n	80074a4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3b08      	subs	r3, #8
 8007348:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800734a:	69b8      	ldr	r0, [r7, #24]
 800734c:	f7ff fe30 	bl	8006fb0 <mem_to_ptr>
 8007350:	4603      	mov	r3, r0
 8007352:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	881a      	ldrh	r2, [r3, #0]
 8007358:	8afb      	ldrh	r3, [r7, #22]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b08      	subs	r3, #8
 8007360:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007362:	8bfa      	ldrh	r2, [r7, #30]
 8007364:	8abb      	ldrh	r3, [r7, #20]
 8007366:	429a      	cmp	r2, r3
 8007368:	d906      	bls.n	8007378 <mem_trim+0xa4>
 800736a:	4b52      	ldr	r3, [pc, #328]	@ (80074b4 <mem_trim+0x1e0>)
 800736c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007370:	4953      	ldr	r1, [pc, #332]	@ (80074c0 <mem_trim+0x1ec>)
 8007372:	4852      	ldr	r0, [pc, #328]	@ (80074bc <mem_trim+0x1e8>)
 8007374:	f007 f90a 	bl	800e58c <iprintf>
  if (newsize > size) {
 8007378:	8bfa      	ldrh	r2, [r7, #30]
 800737a:	8abb      	ldrh	r3, [r7, #20]
 800737c:	429a      	cmp	r2, r3
 800737e:	d901      	bls.n	8007384 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007380:	2300      	movs	r3, #0
 8007382:	e08f      	b.n	80074a4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007384:	8bfa      	ldrh	r2, [r7, #30]
 8007386:	8abb      	ldrh	r3, [r7, #20]
 8007388:	429a      	cmp	r2, r3
 800738a:	d101      	bne.n	8007390 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	e089      	b.n	80074a4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff fdf9 	bl	8006f8c <ptr_to_mem>
 800739a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	791b      	ldrb	r3, [r3, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d13f      	bne.n	8007424 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80073ac:	d106      	bne.n	80073bc <mem_trim+0xe8>
 80073ae:	4b41      	ldr	r3, [pc, #260]	@ (80074b4 <mem_trim+0x1e0>)
 80073b0:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80073b4:	4943      	ldr	r1, [pc, #268]	@ (80074c4 <mem_trim+0x1f0>)
 80073b6:	4841      	ldr	r0, [pc, #260]	@ (80074bc <mem_trim+0x1e8>)
 80073b8:	f007 f8e8 	bl	800e58c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80073c2:	8afa      	ldrh	r2, [r7, #22]
 80073c4:	8bfb      	ldrh	r3, [r7, #30]
 80073c6:	4413      	add	r3, r2
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3308      	adds	r3, #8
 80073cc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80073ce:	4b3e      	ldr	r3, [pc, #248]	@ (80074c8 <mem_trim+0x1f4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d106      	bne.n	80073e6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80073d8:	89fb      	ldrh	r3, [r7, #14]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff fdd6 	bl	8006f8c <ptr_to_mem>
 80073e0:	4603      	mov	r3, r0
 80073e2:	4a39      	ldr	r2, [pc, #228]	@ (80074c8 <mem_trim+0x1f4>)
 80073e4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80073e6:	89fb      	ldrh	r3, [r7, #14]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff fdcf 	bl	8006f8c <ptr_to_mem>
 80073ee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2200      	movs	r2, #0
 80073f4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	89ba      	ldrh	r2, [r7, #12]
 80073fa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	8afa      	ldrh	r2, [r7, #22]
 8007400:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	89fa      	ldrh	r2, [r7, #14]
 8007406:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007410:	d047      	beq.n	80074a2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff fdb8 	bl	8006f8c <ptr_to_mem>
 800741c:	4602      	mov	r2, r0
 800741e:	89fb      	ldrh	r3, [r7, #14]
 8007420:	8053      	strh	r3, [r2, #2]
 8007422:	e03e      	b.n	80074a2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007424:	8bfb      	ldrh	r3, [r7, #30]
 8007426:	f103 0214 	add.w	r2, r3, #20
 800742a:	8abb      	ldrh	r3, [r7, #20]
 800742c:	429a      	cmp	r2, r3
 800742e:	d838      	bhi.n	80074a2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007430:	8afa      	ldrh	r2, [r7, #22]
 8007432:	8bfb      	ldrh	r3, [r7, #30]
 8007434:	4413      	add	r3, r2
 8007436:	b29b      	uxth	r3, r3
 8007438:	3308      	adds	r3, #8
 800743a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007444:	d106      	bne.n	8007454 <mem_trim+0x180>
 8007446:	4b1b      	ldr	r3, [pc, #108]	@ (80074b4 <mem_trim+0x1e0>)
 8007448:	f240 3216 	movw	r2, #790	@ 0x316
 800744c:	491d      	ldr	r1, [pc, #116]	@ (80074c4 <mem_trim+0x1f0>)
 800744e:	481b      	ldr	r0, [pc, #108]	@ (80074bc <mem_trim+0x1e8>)
 8007450:	f007 f89c 	bl	800e58c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007454:	89fb      	ldrh	r3, [r7, #14]
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff fd98 	bl	8006f8c <ptr_to_mem>
 800745c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800745e:	4b1a      	ldr	r3, [pc, #104]	@ (80074c8 <mem_trim+0x1f4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d202      	bcs.n	800746e <mem_trim+0x19a>
      lfree = mem2;
 8007468:	4a17      	ldr	r2, [pc, #92]	@ (80074c8 <mem_trim+0x1f4>)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2200      	movs	r2, #0
 8007472:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	881a      	ldrh	r2, [r3, #0]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	8afa      	ldrh	r2, [r7, #22]
 8007480:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	89fa      	ldrh	r2, [r7, #14]
 8007486:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007490:	d007      	beq.n	80074a2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fd78 	bl	8006f8c <ptr_to_mem>
 800749c:	4602      	mov	r2, r0
 800749e:	89fb      	ldrh	r3, [r7, #14]
 80074a0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80074a2:	687b      	ldr	r3, [r7, #4]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3720      	adds	r7, #32
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	24004d68 	.word	0x24004d68
 80074b0:	24004d6c 	.word	0x24004d6c
 80074b4:	0800fd08 	.word	0x0800fd08
 80074b8:	0800feec 	.word	0x0800feec
 80074bc:	0800fdc4 	.word	0x0800fdc4
 80074c0:	0800ff04 	.word	0x0800ff04
 80074c4:	0800ff24 	.word	0x0800ff24
 80074c8:	24004d70 	.word	0x24004d70

080074cc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <mem_malloc+0x14>
    return NULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	e0d9      	b.n	8007694 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	3303      	adds	r3, #3
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80074ec:	8bbb      	ldrh	r3, [r7, #28]
 80074ee:	2b0b      	cmp	r3, #11
 80074f0:	d801      	bhi.n	80074f6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80074f2:	230c      	movs	r3, #12
 80074f4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80074f6:	8bbb      	ldrh	r3, [r7, #28]
 80074f8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80074fc:	d803      	bhi.n	8007506 <mem_malloc+0x3a>
 80074fe:	8bba      	ldrh	r2, [r7, #28]
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	429a      	cmp	r2, r3
 8007504:	d201      	bcs.n	800750a <mem_malloc+0x3e>
    return NULL;
 8007506:	2300      	movs	r3, #0
 8007508:	e0c4      	b.n	8007694 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800750a:	4b64      	ldr	r3, [pc, #400]	@ (800769c <mem_malloc+0x1d0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff fd4e 	bl	8006fb0 <mem_to_ptr>
 8007514:	4603      	mov	r3, r0
 8007516:	83fb      	strh	r3, [r7, #30]
 8007518:	e0b4      	b.n	8007684 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800751a:	8bfb      	ldrh	r3, [r7, #30]
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff fd35 	bl	8006f8c <ptr_to_mem>
 8007522:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	791b      	ldrb	r3, [r3, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f040 80a4 	bne.w	8007676 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	8bfb      	ldrh	r3, [r7, #30]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	f1a3 0208 	sub.w	r2, r3, #8
 800753c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800753e:	429a      	cmp	r2, r3
 8007540:	f0c0 8099 	bcc.w	8007676 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	8bfb      	ldrh	r3, [r7, #30]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	f1a3 0208 	sub.w	r2, r3, #8
 8007552:	8bbb      	ldrh	r3, [r7, #28]
 8007554:	3314      	adds	r3, #20
 8007556:	429a      	cmp	r2, r3
 8007558:	d333      	bcc.n	80075c2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800755a:	8bfa      	ldrh	r2, [r7, #30]
 800755c:	8bbb      	ldrh	r3, [r7, #28]
 800755e:	4413      	add	r3, r2
 8007560:	b29b      	uxth	r3, r3
 8007562:	3308      	adds	r3, #8
 8007564:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007566:	8a7b      	ldrh	r3, [r7, #18]
 8007568:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800756c:	d106      	bne.n	800757c <mem_malloc+0xb0>
 800756e:	4b4c      	ldr	r3, [pc, #304]	@ (80076a0 <mem_malloc+0x1d4>)
 8007570:	f240 3287 	movw	r2, #903	@ 0x387
 8007574:	494b      	ldr	r1, [pc, #300]	@ (80076a4 <mem_malloc+0x1d8>)
 8007576:	484c      	ldr	r0, [pc, #304]	@ (80076a8 <mem_malloc+0x1dc>)
 8007578:	f007 f808 	bl	800e58c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800757c:	8a7b      	ldrh	r3, [r7, #18]
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fd04 	bl	8006f8c <ptr_to_mem>
 8007584:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	881a      	ldrh	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8bfa      	ldrh	r2, [r7, #30]
 8007598:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	8a7a      	ldrh	r2, [r7, #18]
 800759e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2201      	movs	r2, #1
 80075a4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80075ae:	d00b      	beq.n	80075c8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff fce9 	bl	8006f8c <ptr_to_mem>
 80075ba:	4602      	mov	r2, r0
 80075bc:	8a7b      	ldrh	r3, [r7, #18]
 80075be:	8053      	strh	r3, [r2, #2]
 80075c0:	e002      	b.n	80075c8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2201      	movs	r2, #1
 80075c6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80075c8:	4b34      	ldr	r3, [pc, #208]	@ (800769c <mem_malloc+0x1d0>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d127      	bne.n	8007622 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80075d2:	4b32      	ldr	r3, [pc, #200]	@ (800769c <mem_malloc+0x1d0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80075d8:	e005      	b.n	80075e6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff fcd4 	bl	8006f8c <ptr_to_mem>
 80075e4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	791b      	ldrb	r3, [r3, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <mem_malloc+0x12c>
 80075ee:	4b2f      	ldr	r3, [pc, #188]	@ (80076ac <mem_malloc+0x1e0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d1f0      	bne.n	80075da <mem_malloc+0x10e>
          }
          lfree = cur;
 80075f8:	4a28      	ldr	r2, [pc, #160]	@ (800769c <mem_malloc+0x1d0>)
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80075fe:	4b27      	ldr	r3, [pc, #156]	@ (800769c <mem_malloc+0x1d0>)
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <mem_malloc+0x1e0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d00b      	beq.n	8007622 <mem_malloc+0x156>
 800760a:	4b24      	ldr	r3, [pc, #144]	@ (800769c <mem_malloc+0x1d0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	791b      	ldrb	r3, [r3, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d006      	beq.n	8007622 <mem_malloc+0x156>
 8007614:	4b22      	ldr	r3, [pc, #136]	@ (80076a0 <mem_malloc+0x1d4>)
 8007616:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800761a:	4925      	ldr	r1, [pc, #148]	@ (80076b0 <mem_malloc+0x1e4>)
 800761c:	4822      	ldr	r0, [pc, #136]	@ (80076a8 <mem_malloc+0x1dc>)
 800761e:	f006 ffb5 	bl	800e58c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007622:	8bba      	ldrh	r2, [r7, #28]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	4413      	add	r3, r2
 8007628:	3308      	adds	r3, #8
 800762a:	4a20      	ldr	r2, [pc, #128]	@ (80076ac <mem_malloc+0x1e0>)
 800762c:	6812      	ldr	r2, [r2, #0]
 800762e:	4293      	cmp	r3, r2
 8007630:	d906      	bls.n	8007640 <mem_malloc+0x174>
 8007632:	4b1b      	ldr	r3, [pc, #108]	@ (80076a0 <mem_malloc+0x1d4>)
 8007634:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8007638:	491e      	ldr	r1, [pc, #120]	@ (80076b4 <mem_malloc+0x1e8>)
 800763a:	481b      	ldr	r0, [pc, #108]	@ (80076a8 <mem_malloc+0x1dc>)
 800763c:	f006 ffa6 	bl	800e58c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d006      	beq.n	8007658 <mem_malloc+0x18c>
 800764a:	4b15      	ldr	r3, [pc, #84]	@ (80076a0 <mem_malloc+0x1d4>)
 800764c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8007650:	4919      	ldr	r1, [pc, #100]	@ (80076b8 <mem_malloc+0x1ec>)
 8007652:	4815      	ldr	r0, [pc, #84]	@ (80076a8 <mem_malloc+0x1dc>)
 8007654:	f006 ff9a 	bl	800e58c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d006      	beq.n	8007670 <mem_malloc+0x1a4>
 8007662:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <mem_malloc+0x1d4>)
 8007664:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007668:	4914      	ldr	r1, [pc, #80]	@ (80076bc <mem_malloc+0x1f0>)
 800766a:	480f      	ldr	r0, [pc, #60]	@ (80076a8 <mem_malloc+0x1dc>)
 800766c:	f006 ff8e 	bl	800e58c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	3308      	adds	r3, #8
 8007674:	e00e      	b.n	8007694 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007676:	8bfb      	ldrh	r3, [r7, #30]
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff fc87 	bl	8006f8c <ptr_to_mem>
 800767e:	4603      	mov	r3, r0
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007684:	8bfa      	ldrh	r2, [r7, #30]
 8007686:	8bbb      	ldrh	r3, [r7, #28]
 8007688:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800768c:	429a      	cmp	r2, r3
 800768e:	f4ff af44 	bcc.w	800751a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3720      	adds	r7, #32
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	24004d70 	.word	0x24004d70
 80076a0:	0800fd08 	.word	0x0800fd08
 80076a4:	0800ff24 	.word	0x0800ff24
 80076a8:	0800fdc4 	.word	0x0800fdc4
 80076ac:	24004d6c 	.word	0x24004d6c
 80076b0:	0800ff38 	.word	0x0800ff38
 80076b4:	0800ff54 	.word	0x0800ff54
 80076b8:	0800ff84 	.word	0x0800ff84
 80076bc:	0800ffb4 	.word	0x0800ffb4

080076c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	3303      	adds	r3, #3
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e011      	b.n	8007706 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	4413      	add	r3, r2
 80076fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3301      	adds	r3, #1
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	885b      	ldrh	r3, [r3, #2]
 800770a:	461a      	mov	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4293      	cmp	r3, r2
 8007710:	dbe7      	blt.n	80076e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007712:	bf00      	nop
 8007714:	bf00      	nop
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007726:	2300      	movs	r3, #0
 8007728:	80fb      	strh	r3, [r7, #6]
 800772a:	e009      	b.n	8007740 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	4a08      	ldr	r2, [pc, #32]	@ (8007750 <memp_init+0x30>)
 8007730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff ffc3 	bl	80076c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	3301      	adds	r3, #1
 800773e:	80fb      	strh	r3, [r7, #6]
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	2b08      	cmp	r3, #8
 8007744:	d9f2      	bls.n	800772c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	0801247c 	.word	0x0801247c

08007754 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d012      	beq.n	8007790 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d006      	beq.n	800778c <do_memp_malloc_pool+0x38>
 800777e:	4b07      	ldr	r3, [pc, #28]	@ (800779c <do_memp_malloc_pool+0x48>)
 8007780:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007784:	4906      	ldr	r1, [pc, #24]	@ (80077a0 <do_memp_malloc_pool+0x4c>)
 8007786:	4807      	ldr	r0, [pc, #28]	@ (80077a4 <do_memp_malloc_pool+0x50>)
 8007788:	f006 ff00 	bl	800e58c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	e000      	b.n	8007792 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	0800ffd8 	.word	0x0800ffd8
 80077a0:	0801007c 	.word	0x0801007c
 80077a4:	080100a0 	.word	0x080100a0

080077a8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <memp_malloc_pool+0x1c>
 80077b6:	4b0a      	ldr	r3, [pc, #40]	@ (80077e0 <memp_malloc_pool+0x38>)
 80077b8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80077bc:	4909      	ldr	r1, [pc, #36]	@ (80077e4 <memp_malloc_pool+0x3c>)
 80077be:	480a      	ldr	r0, [pc, #40]	@ (80077e8 <memp_malloc_pool+0x40>)
 80077c0:	f006 fee4 	bl	800e58c <iprintf>
  if (desc == NULL) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <memp_malloc_pool+0x26>
    return NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	e003      	b.n	80077d6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff ffc0 	bl	8007754 <do_memp_malloc_pool>
 80077d4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	0800ffd8 	.word	0x0800ffd8
 80077e4:	080100c8 	.word	0x080100c8
 80077e8:	080100a0 	.word	0x080100a0

080077ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d908      	bls.n	800780e <memp_malloc+0x22>
 80077fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <memp_malloc+0x3c>)
 80077fe:	f240 1257 	movw	r2, #343	@ 0x157
 8007802:	490a      	ldr	r1, [pc, #40]	@ (800782c <memp_malloc+0x40>)
 8007804:	480a      	ldr	r0, [pc, #40]	@ (8007830 <memp_malloc+0x44>)
 8007806:	f006 fec1 	bl	800e58c <iprintf>
 800780a:	2300      	movs	r3, #0
 800780c:	e008      	b.n	8007820 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	4a08      	ldr	r2, [pc, #32]	@ (8007834 <memp_malloc+0x48>)
 8007812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff ff9c 	bl	8007754 <do_memp_malloc_pool>
 800781c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800781e:	68fb      	ldr	r3, [r7, #12]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	0800ffd8 	.word	0x0800ffd8
 800782c:	080100dc 	.word	0x080100dc
 8007830:	080100a0 	.word	0x080100a0
 8007834:	0801247c 	.word	0x0801247c

08007838 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	f003 0303 	and.w	r3, r3, #3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d006      	beq.n	800785a <do_memp_free_pool+0x22>
 800784c:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <do_memp_free_pool+0x40>)
 800784e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8007852:	490a      	ldr	r1, [pc, #40]	@ (800787c <do_memp_free_pool+0x44>)
 8007854:	480a      	ldr	r0, [pc, #40]	@ (8007880 <do_memp_free_pool+0x48>)
 8007856:	f006 fe99 	bl	800e58c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007870:	bf00      	nop
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	0800ffd8 	.word	0x0800ffd8
 800787c:	080100fc 	.word	0x080100fc
 8007880:	080100a0 	.word	0x080100a0

08007884 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <memp_free_pool+0x1e>
 8007894:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <memp_free_pool+0x3c>)
 8007896:	f240 1295 	movw	r2, #405	@ 0x195
 800789a:	490a      	ldr	r1, [pc, #40]	@ (80078c4 <memp_free_pool+0x40>)
 800789c:	480a      	ldr	r0, [pc, #40]	@ (80078c8 <memp_free_pool+0x44>)
 800789e:	f006 fe75 	bl	800e58c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <memp_free_pool+0x34>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff ffc1 	bl	8007838 <do_memp_free_pool>
 80078b6:	e000      	b.n	80078ba <memp_free_pool+0x36>
    return;
 80078b8:	bf00      	nop
}
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	0800ffd8 	.word	0x0800ffd8
 80078c4:	080100c8 	.word	0x080100c8
 80078c8:	080100a0 	.word	0x080100a0

080078cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d907      	bls.n	80078ee <memp_free+0x22>
 80078de:	4b0c      	ldr	r3, [pc, #48]	@ (8007910 <memp_free+0x44>)
 80078e0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80078e4:	490b      	ldr	r1, [pc, #44]	@ (8007914 <memp_free+0x48>)
 80078e6:	480c      	ldr	r0, [pc, #48]	@ (8007918 <memp_free+0x4c>)
 80078e8:	f006 fe50 	bl	800e58c <iprintf>
 80078ec:	e00c      	b.n	8007908 <memp_free+0x3c>

  if (mem == NULL) {
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	4a09      	ldr	r2, [pc, #36]	@ (800791c <memp_free+0x50>)
 80078f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff ff9a 	bl	8007838 <do_memp_free_pool>
 8007904:	e000      	b.n	8007908 <memp_free+0x3c>
    return;
 8007906:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	0800ffd8 	.word	0x0800ffd8
 8007914:	0801011c 	.word	0x0801011c
 8007918:	080100a0 	.word	0x080100a0
 800791c:	0801247c 	.word	0x0801247c

08007920 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007924:	bf00      	nop
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
	...

08007930 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d108      	bne.n	8007956 <netif_add+0x26>
 8007944:	4b57      	ldr	r3, [pc, #348]	@ (8007aa4 <netif_add+0x174>)
 8007946:	f240 1227 	movw	r2, #295	@ 0x127
 800794a:	4957      	ldr	r1, [pc, #348]	@ (8007aa8 <netif_add+0x178>)
 800794c:	4857      	ldr	r0, [pc, #348]	@ (8007aac <netif_add+0x17c>)
 800794e:	f006 fe1d 	bl	800e58c <iprintf>
 8007952:	2300      	movs	r3, #0
 8007954:	e0a2      	b.n	8007a9c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	d108      	bne.n	800796e <netif_add+0x3e>
 800795c:	4b51      	ldr	r3, [pc, #324]	@ (8007aa4 <netif_add+0x174>)
 800795e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007962:	4953      	ldr	r1, [pc, #332]	@ (8007ab0 <netif_add+0x180>)
 8007964:	4851      	ldr	r0, [pc, #324]	@ (8007aac <netif_add+0x17c>)
 8007966:	f006 fe11 	bl	800e58c <iprintf>
 800796a:	2300      	movs	r3, #0
 800796c:	e096      	b.n	8007a9c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007974:	4b4f      	ldr	r3, [pc, #316]	@ (8007ab4 <netif_add+0x184>)
 8007976:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800797e:	4b4d      	ldr	r3, [pc, #308]	@ (8007ab4 <netif_add+0x184>)
 8007980:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007988:	4b4a      	ldr	r3, [pc, #296]	@ (8007ab4 <netif_add+0x184>)
 800798a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4a45      	ldr	r2, [pc, #276]	@ (8007ab8 <netif_add+0x188>)
 80079a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a3a      	ldr	r2, [r7, #32]
 80079bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80079be:	4b3f      	ldr	r3, [pc, #252]	@ (8007abc <netif_add+0x18c>)
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f913 	bl	8007c00 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	4798      	blx	r3
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <netif_add+0xba>
    return NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e058      	b.n	8007a9c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079f0:	2bff      	cmp	r3, #255	@ 0xff
 80079f2:	d103      	bne.n	80079fc <netif_add+0xcc>
        netif->num = 0;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007a00:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac0 <netif_add+0x190>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	e02b      	b.n	8007a60 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d106      	bne.n	8007a1e <netif_add+0xee>
 8007a10:	4b24      	ldr	r3, [pc, #144]	@ (8007aa4 <netif_add+0x174>)
 8007a12:	f240 128b 	movw	r2, #395	@ 0x18b
 8007a16:	492b      	ldr	r1, [pc, #172]	@ (8007ac4 <netif_add+0x194>)
 8007a18:	4824      	ldr	r0, [pc, #144]	@ (8007aac <netif_add+0x17c>)
 8007a1a:	f006 fdb7 	bl	800e58c <iprintf>
        num_netifs++;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3301      	adds	r3, #1
 8007a22:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2bff      	cmp	r3, #255	@ 0xff
 8007a28:	dd06      	ble.n	8007a38 <netif_add+0x108>
 8007a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa4 <netif_add+0x174>)
 8007a2c:	f240 128d 	movw	r2, #397	@ 0x18d
 8007a30:	4925      	ldr	r1, [pc, #148]	@ (8007ac8 <netif_add+0x198>)
 8007a32:	481e      	ldr	r0, [pc, #120]	@ (8007aac <netif_add+0x17c>)
 8007a34:	f006 fdaa 	bl	800e58c <iprintf>
        if (netif2->num == netif->num) {
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d108      	bne.n	8007a5a <netif_add+0x12a>
          netif->num++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a4e:	3301      	adds	r3, #1
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007a58:	e005      	b.n	8007a66 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1d0      	bne.n	8007a08 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1be      	bne.n	80079ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a72:	2bfe      	cmp	r3, #254	@ 0xfe
 8007a74:	d103      	bne.n	8007a7e <netif_add+0x14e>
    netif_num = 0;
 8007a76:	4b11      	ldr	r3, [pc, #68]	@ (8007abc <netif_add+0x18c>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e006      	b.n	8007a8c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a84:	3301      	adds	r3, #1
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	4b0c      	ldr	r3, [pc, #48]	@ (8007abc <netif_add+0x18c>)
 8007a8a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac0 <netif_add+0x190>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007a94:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac0 <netif_add+0x190>)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	08010138 	.word	0x08010138
 8007aa8:	0801023c 	.word	0x0801023c
 8007aac:	080101f8 	.word	0x080101f8
 8007ab0:	08010258 	.word	0x08010258
 8007ab4:	0801240c 	.word	0x0801240c
 8007ab8:	08007edb 	.word	0x08007edb
 8007abc:	24007c68 	.word	0x24007c68
 8007ac0:	24007c60 	.word	0x24007c60
 8007ac4:	0801027c 	.word	0x0801027c
 8007ac8:	08010290 	.word	0x08010290

08007acc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f002 fb45 	bl	800a168 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f006 fc23 	bl	800e32c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <netif_do_set_ipaddr+0x20>
 8007b02:	4b1d      	ldr	r3, [pc, #116]	@ (8007b78 <netif_do_set_ipaddr+0x88>)
 8007b04:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007b08:	491c      	ldr	r1, [pc, #112]	@ (8007b7c <netif_do_set_ipaddr+0x8c>)
 8007b0a:	481d      	ldr	r0, [pc, #116]	@ (8007b80 <netif_do_set_ipaddr+0x90>)
 8007b0c:	f006 fd3e 	bl	800e58c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <netif_do_set_ipaddr+0x34>
 8007b16:	4b18      	ldr	r3, [pc, #96]	@ (8007b78 <netif_do_set_ipaddr+0x88>)
 8007b18:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007b1c:	4917      	ldr	r1, [pc, #92]	@ (8007b7c <netif_do_set_ipaddr+0x8c>)
 8007b1e:	4818      	ldr	r0, [pc, #96]	@ (8007b80 <netif_do_set_ipaddr+0x90>)
 8007b20:	f006 fd34 	bl	800e58c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d01c      	beq.n	8007b6c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007b42:	f107 0314 	add.w	r3, r7, #20
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff ffbf 	bl	8007acc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <netif_do_set_ipaddr+0x6a>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	e000      	b.n	8007b5c <netif_do_set_ipaddr+0x6c>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007b60:	2101      	movs	r1, #1
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f8d2 	bl	8007d0c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e000      	b.n	8007b6e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	08010138 	.word	0x08010138
 8007b7c:	080102c0 	.word	0x080102c0
 8007b80:	080101f8 	.word	0x080101f8

08007b84 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3308      	adds	r3, #8
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d00a      	beq.n	8007bb4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <netif_do_set_netmask+0x26>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	e000      	b.n	8007bac <netif_do_set_netmask+0x28>
 8007baa:	2300      	movs	r3, #0
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e000      	b.n	8007bb6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	330c      	adds	r3, #12
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d00a      	beq.n	8007bf2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <netif_do_set_gw+0x26>
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	e000      	b.n	8007bea <netif_do_set_gw+0x28>
 8007be8:	2300      	movs	r3, #0
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e000      	b.n	8007bf4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c90 <netif_set_addr+0x90>)
 8007c1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007c26:	4b1a      	ldr	r3, [pc, #104]	@ (8007c90 <netif_set_addr+0x90>)
 8007c28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007c30:	4b17      	ldr	r3, [pc, #92]	@ (8007c90 <netif_set_addr+0x90>)
 8007c32:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <netif_set_addr+0x42>
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <netif_set_addr+0x46>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <netif_set_addr+0x48>
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d006      	beq.n	8007c5e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007c50:	f107 0310 	add.w	r3, r7, #16
 8007c54:	461a      	mov	r2, r3
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7ff ff49 	bl	8007af0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff ff8e 	bl	8007b84 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff ffa8 	bl	8007bc2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007c78:	f107 0310 	add.w	r3, r7, #16
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff ff35 	bl	8007af0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007c86:	bf00      	nop
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	0801240c 	.word	0x0801240c

08007c94 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007c9c:	4a04      	ldr	r2, [pc, #16]	@ (8007cb0 <netif_set_default+0x1c>)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	24007c64 	.word	0x24007c64

08007cb4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d107      	bne.n	8007cd2 <netif_set_up+0x1e>
 8007cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8007d00 <netif_set_up+0x4c>)
 8007cc4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007cc8:	490e      	ldr	r1, [pc, #56]	@ (8007d04 <netif_set_up+0x50>)
 8007cca:	480f      	ldr	r0, [pc, #60]	@ (8007d08 <netif_set_up+0x54>)
 8007ccc:	f006 fc5e 	bl	800e58c <iprintf>
 8007cd0:	e013      	b.n	8007cfa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10c      	bne.n	8007cfa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ce6:	f043 0301 	orr.w	r3, r3, #1
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007cf2:	2103      	movs	r1, #3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f809 	bl	8007d0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	08010138 	.word	0x08010138
 8007d04:	08010330 	.word	0x08010330
 8007d08:	080101f8 	.word	0x080101f8

08007d0c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d106      	bne.n	8007d2c <netif_issue_reports+0x20>
 8007d1e:	4b18      	ldr	r3, [pc, #96]	@ (8007d80 <netif_issue_reports+0x74>)
 8007d20:	f240 326d 	movw	r2, #877	@ 0x36d
 8007d24:	4917      	ldr	r1, [pc, #92]	@ (8007d84 <netif_issue_reports+0x78>)
 8007d26:	4818      	ldr	r0, [pc, #96]	@ (8007d88 <netif_issue_reports+0x7c>)
 8007d28:	f006 fc30 	bl	800e58c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d32:	f003 0304 	and.w	r3, r3, #4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01e      	beq.n	8007d78 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d40:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d017      	beq.n	8007d78 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d013      	beq.n	8007d7a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00e      	beq.n	8007d7a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d007      	beq.n	8007d7a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7fd fc87 	bl	8005684 <etharp_request>
 8007d76:	e000      	b.n	8007d7a <netif_issue_reports+0x6e>
    return;
 8007d78:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	08010138 	.word	0x08010138
 8007d84:	0801034c 	.word	0x0801034c
 8007d88:	080101f8 	.word	0x080101f8

08007d8c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d107      	bne.n	8007daa <netif_set_down+0x1e>
 8007d9a:	4b12      	ldr	r3, [pc, #72]	@ (8007de4 <netif_set_down+0x58>)
 8007d9c:	f240 329b 	movw	r2, #923	@ 0x39b
 8007da0:	4911      	ldr	r1, [pc, #68]	@ (8007de8 <netif_set_down+0x5c>)
 8007da2:	4812      	ldr	r0, [pc, #72]	@ (8007dec <netif_set_down+0x60>)
 8007da4:	f006 fbf2 	bl	800e58c <iprintf>
 8007da8:	e019      	b.n	8007dde <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d012      	beq.n	8007dde <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007dbe:	f023 0301 	bic.w	r3, r3, #1
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fd f811 	bl	8004e00 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	08010138 	.word	0x08010138
 8007de8:	08010370 	.word	0x08010370
 8007dec:	080101f8 	.word	0x080101f8

08007df0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d107      	bne.n	8007e0e <netif_set_link_up+0x1e>
 8007dfe:	4b13      	ldr	r3, [pc, #76]	@ (8007e4c <netif_set_link_up+0x5c>)
 8007e00:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007e04:	4912      	ldr	r1, [pc, #72]	@ (8007e50 <netif_set_link_up+0x60>)
 8007e06:	4813      	ldr	r0, [pc, #76]	@ (8007e54 <netif_set_link_up+0x64>)
 8007e08:	f006 fbc0 	bl	800e58c <iprintf>
 8007e0c:	e01b      	b.n	8007e46 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d114      	bne.n	8007e46 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e22:	f043 0304 	orr.w	r3, r3, #4
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007e2e:	2103      	movs	r1, #3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ff6b 	bl	8007d0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <netif_set_link_up+0x56>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	08010138 	.word	0x08010138
 8007e50:	08010390 	.word	0x08010390
 8007e54:	080101f8 	.word	0x080101f8

08007e58 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d107      	bne.n	8007e76 <netif_set_link_down+0x1e>
 8007e66:	4b11      	ldr	r3, [pc, #68]	@ (8007eac <netif_set_link_down+0x54>)
 8007e68:	f240 4206 	movw	r2, #1030	@ 0x406
 8007e6c:	4910      	ldr	r1, [pc, #64]	@ (8007eb0 <netif_set_link_down+0x58>)
 8007e6e:	4811      	ldr	r0, [pc, #68]	@ (8007eb4 <netif_set_link_down+0x5c>)
 8007e70:	f006 fb8c 	bl	800e58c <iprintf>
 8007e74:	e017      	b.n	8007ea6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d010      	beq.n	8007ea6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e8a:	f023 0304 	bic.w	r3, r3, #4
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <netif_set_link_down+0x4e>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	08010138 	.word	0x08010138
 8007eb0:	080103b4 	.word	0x080103b4
 8007eb4:	080101f8 	.word	0x080101f8

08007eb8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	61da      	str	r2, [r3, #28]
  }
}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b085      	sub	sp, #20
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007ee6:	f06f 030b 	mvn.w	r3, #11
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	4603      	mov	r3, r0
 8007f00:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d013      	beq.n	8007f30 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007f08:	4b0d      	ldr	r3, [pc, #52]	@ (8007f40 <netif_get_by_index+0x48>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	e00c      	b.n	8007f2a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f16:	3301      	adds	r3, #1
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	79fa      	ldrb	r2, [r7, #7]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d101      	bne.n	8007f24 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	e006      	b.n	8007f32 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1ef      	bne.n	8007f10 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	24007c60 	.word	0x24007c60

08007f44 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f7c <pbuf_free_ooseq+0x38>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007f50:	4b0b      	ldr	r3, [pc, #44]	@ (8007f80 <pbuf_free_ooseq+0x3c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	607b      	str	r3, [r7, #4]
 8007f56:	e00a      	b.n	8007f6e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f002 f93f 	bl	800a1e4 <tcp_free_ooseq>
      return;
 8007f66:	e005      	b.n	8007f74 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	607b      	str	r3, [r7, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f1      	bne.n	8007f58 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	24007c69 	.word	0x24007c69
 8007f80:	24007c78 	.word	0x24007c78

08007f84 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007f84:	b480      	push	{r7}
 8007f86:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007f88:	4b03      	ldr	r3, [pc, #12]	@ (8007f98 <pbuf_pool_is_empty+0x14>)
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007f8e:	bf00      	nop
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	24007c69 	.word	0x24007c69

08007f9c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	461a      	mov	r2, r3
 8007faa:	460b      	mov	r3, r1
 8007fac:	80fb      	strh	r3, [r7, #6]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	88ba      	ldrh	r2, [r7, #4]
 8007fc8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007fca:	8b3b      	ldrh	r3, [r7, #24]
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	7f3a      	ldrb	r2, [r7, #28]
 8007fd6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	73da      	strb	r2, [r3, #15]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08c      	sub	sp, #48	@ 0x30
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	80bb      	strh	r3, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008006:	887b      	ldrh	r3, [r7, #2]
 8008008:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800800c:	d07f      	beq.n	800810e <pbuf_alloc+0x11e>
 800800e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008012:	f300 80c8 	bgt.w	80081a6 <pbuf_alloc+0x1b6>
 8008016:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800801a:	d010      	beq.n	800803e <pbuf_alloc+0x4e>
 800801c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008020:	f300 80c1 	bgt.w	80081a6 <pbuf_alloc+0x1b6>
 8008024:	2b01      	cmp	r3, #1
 8008026:	d002      	beq.n	800802e <pbuf_alloc+0x3e>
 8008028:	2b41      	cmp	r3, #65	@ 0x41
 800802a:	f040 80bc 	bne.w	80081a6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800802e:	887a      	ldrh	r2, [r7, #2]
 8008030:	88bb      	ldrh	r3, [r7, #4]
 8008032:	4619      	mov	r1, r3
 8008034:	2000      	movs	r0, #0
 8008036:	f000 f8d1 	bl	80081dc <pbuf_alloc_reference>
 800803a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800803c:	e0bd      	b.n	80081ba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8008042:	2300      	movs	r3, #0
 8008044:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008046:	88bb      	ldrh	r3, [r7, #4]
 8008048:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800804a:	2008      	movs	r0, #8
 800804c:	f7ff fbce 	bl	80077ec <memp_malloc>
 8008050:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d109      	bne.n	800806c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008058:	f7ff ff94 	bl	8007f84 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <pbuf_alloc+0x78>
            pbuf_free(p);
 8008062:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008064:	f000 faa8 	bl	80085b8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008068:	2300      	movs	r3, #0
 800806a:	e0a7      	b.n	80081bc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800806c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800806e:	3303      	adds	r3, #3
 8008070:	b29b      	uxth	r3, r3
 8008072:	f023 0303 	bic.w	r3, r3, #3
 8008076:	b29b      	uxth	r3, r3
 8008078:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800807c:	b29b      	uxth	r3, r3
 800807e:	8b7a      	ldrh	r2, [r7, #26]
 8008080:	4293      	cmp	r3, r2
 8008082:	bf28      	it	cs
 8008084:	4613      	movcs	r3, r2
 8008086:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008088:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800808a:	3310      	adds	r3, #16
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4413      	add	r3, r2
 8008090:	3303      	adds	r3, #3
 8008092:	f023 0303 	bic.w	r3, r3, #3
 8008096:	4618      	mov	r0, r3
 8008098:	89f9      	ldrh	r1, [r7, #14]
 800809a:	8b7a      	ldrh	r2, [r7, #26]
 800809c:	2300      	movs	r3, #0
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	887b      	ldrh	r3, [r7, #2]
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	460b      	mov	r3, r1
 80080a6:	4601      	mov	r1, r0
 80080a8:	6938      	ldr	r0, [r7, #16]
 80080aa:	f7ff ff77 	bl	8007f9c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d006      	beq.n	80080c8 <pbuf_alloc+0xd8>
 80080ba:	4b42      	ldr	r3, [pc, #264]	@ (80081c4 <pbuf_alloc+0x1d4>)
 80080bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080c0:	4941      	ldr	r1, [pc, #260]	@ (80081c8 <pbuf_alloc+0x1d8>)
 80080c2:	4842      	ldr	r0, [pc, #264]	@ (80081cc <pbuf_alloc+0x1dc>)
 80080c4:	f006 fa62 	bl	800e58c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80080c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080ca:	3303      	adds	r3, #3
 80080cc:	f023 0303 	bic.w	r3, r3, #3
 80080d0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80080d4:	d106      	bne.n	80080e4 <pbuf_alloc+0xf4>
 80080d6:	4b3b      	ldr	r3, [pc, #236]	@ (80081c4 <pbuf_alloc+0x1d4>)
 80080d8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80080dc:	493c      	ldr	r1, [pc, #240]	@ (80081d0 <pbuf_alloc+0x1e0>)
 80080de:	483b      	ldr	r0, [pc, #236]	@ (80081cc <pbuf_alloc+0x1dc>)
 80080e0:	f006 fa54 	bl	800e58c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80080ee:	e002      	b.n	80080f6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80080fa:	8b7a      	ldrh	r2, [r7, #26]
 80080fc:	89fb      	ldrh	r3, [r7, #14]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8008106:	8b7b      	ldrh	r3, [r7, #26]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d19e      	bne.n	800804a <pbuf_alloc+0x5a>
      break;
 800810c:	e055      	b.n	80081ba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800810e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008110:	3303      	adds	r3, #3
 8008112:	b29b      	uxth	r3, r3
 8008114:	f023 0303 	bic.w	r3, r3, #3
 8008118:	b29a      	uxth	r2, r3
 800811a:	88bb      	ldrh	r3, [r7, #4]
 800811c:	3303      	adds	r3, #3
 800811e:	b29b      	uxth	r3, r3
 8008120:	f023 0303 	bic.w	r3, r3, #3
 8008124:	b29b      	uxth	r3, r3
 8008126:	4413      	add	r3, r2
 8008128:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800812a:	8b3b      	ldrh	r3, [r7, #24]
 800812c:	3310      	adds	r3, #16
 800812e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008130:	8b3a      	ldrh	r2, [r7, #24]
 8008132:	88bb      	ldrh	r3, [r7, #4]
 8008134:	3303      	adds	r3, #3
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	429a      	cmp	r2, r3
 800813c:	d306      	bcc.n	800814c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800813e:	8afa      	ldrh	r2, [r7, #22]
 8008140:	88bb      	ldrh	r3, [r7, #4]
 8008142:	3303      	adds	r3, #3
 8008144:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008148:	429a      	cmp	r2, r3
 800814a:	d201      	bcs.n	8008150 <pbuf_alloc+0x160>
        return NULL;
 800814c:	2300      	movs	r3, #0
 800814e:	e035      	b.n	80081bc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008150:	8afb      	ldrh	r3, [r7, #22]
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff f9ba 	bl	80074cc <mem_malloc>
 8008158:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <pbuf_alloc+0x174>
        return NULL;
 8008160:	2300      	movs	r3, #0
 8008162:	e02b      	b.n	80081bc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008164:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008166:	3310      	adds	r3, #16
 8008168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800816a:	4413      	add	r3, r2
 800816c:	3303      	adds	r3, #3
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	4618      	mov	r0, r3
 8008174:	88b9      	ldrh	r1, [r7, #4]
 8008176:	88ba      	ldrh	r2, [r7, #4]
 8008178:	2300      	movs	r3, #0
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	887b      	ldrh	r3, [r7, #2]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	460b      	mov	r3, r1
 8008182:	4601      	mov	r1, r0
 8008184:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008186:	f7ff ff09 	bl	8007f9c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d010      	beq.n	80081b8 <pbuf_alloc+0x1c8>
 8008196:	4b0b      	ldr	r3, [pc, #44]	@ (80081c4 <pbuf_alloc+0x1d4>)
 8008198:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800819c:	490d      	ldr	r1, [pc, #52]	@ (80081d4 <pbuf_alloc+0x1e4>)
 800819e:	480b      	ldr	r0, [pc, #44]	@ (80081cc <pbuf_alloc+0x1dc>)
 80081a0:	f006 f9f4 	bl	800e58c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80081a4:	e008      	b.n	80081b8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80081a6:	4b07      	ldr	r3, [pc, #28]	@ (80081c4 <pbuf_alloc+0x1d4>)
 80081a8:	f240 1227 	movw	r2, #295	@ 0x127
 80081ac:	490a      	ldr	r1, [pc, #40]	@ (80081d8 <pbuf_alloc+0x1e8>)
 80081ae:	4807      	ldr	r0, [pc, #28]	@ (80081cc <pbuf_alloc+0x1dc>)
 80081b0:	f006 f9ec 	bl	800e58c <iprintf>
      return NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e001      	b.n	80081bc <pbuf_alloc+0x1cc>
      break;
 80081b8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3728      	adds	r7, #40	@ 0x28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	080103d8 	.word	0x080103d8
 80081c8:	0801047c 	.word	0x0801047c
 80081cc:	080104ac 	.word	0x080104ac
 80081d0:	080104d4 	.word	0x080104d4
 80081d4:	08010508 	.word	0x08010508
 80081d8:	08010534 	.word	0x08010534

080081dc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	807b      	strh	r3, [r7, #2]
 80081e8:	4613      	mov	r3, r2
 80081ea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80081ec:	883b      	ldrh	r3, [r7, #0]
 80081ee:	2b41      	cmp	r3, #65	@ 0x41
 80081f0:	d009      	beq.n	8008206 <pbuf_alloc_reference+0x2a>
 80081f2:	883b      	ldrh	r3, [r7, #0]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d006      	beq.n	8008206 <pbuf_alloc_reference+0x2a>
 80081f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008238 <pbuf_alloc_reference+0x5c>)
 80081fa:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80081fe:	490f      	ldr	r1, [pc, #60]	@ (800823c <pbuf_alloc_reference+0x60>)
 8008200:	480f      	ldr	r0, [pc, #60]	@ (8008240 <pbuf_alloc_reference+0x64>)
 8008202:	f006 f9c3 	bl	800e58c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008206:	2007      	movs	r0, #7
 8008208:	f7ff faf0 	bl	80077ec <memp_malloc>
 800820c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008214:	2300      	movs	r3, #0
 8008216:	e00b      	b.n	8008230 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008218:	8879      	ldrh	r1, [r7, #2]
 800821a:	887a      	ldrh	r2, [r7, #2]
 800821c:	2300      	movs	r3, #0
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	883b      	ldrh	r3, [r7, #0]
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	460b      	mov	r3, r1
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff feb7 	bl	8007f9c <pbuf_init_alloced_pbuf>
  return p;
 800822e:	68fb      	ldr	r3, [r7, #12]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	080103d8 	.word	0x080103d8
 800823c:	08010550 	.word	0x08010550
 8008240:	080104ac 	.word	0x080104ac

08008244 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af02      	add	r7, sp, #8
 800824a:	607b      	str	r3, [r7, #4]
 800824c:	4603      	mov	r3, r0
 800824e:	73fb      	strb	r3, [r7, #15]
 8008250:	460b      	mov	r3, r1
 8008252:	81bb      	strh	r3, [r7, #12]
 8008254:	4613      	mov	r3, r2
 8008256:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800825c:	8a7b      	ldrh	r3, [r7, #18]
 800825e:	3303      	adds	r3, #3
 8008260:	f023 0203 	bic.w	r2, r3, #3
 8008264:	89bb      	ldrh	r3, [r7, #12]
 8008266:	441a      	add	r2, r3
 8008268:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800826a:	429a      	cmp	r2, r3
 800826c:	d901      	bls.n	8008272 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800826e:	2300      	movs	r3, #0
 8008270:	e018      	b.n	80082a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d007      	beq.n	8008288 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008278:	8a7b      	ldrh	r3, [r7, #18]
 800827a:	3303      	adds	r3, #3
 800827c:	f023 0303 	bic.w	r3, r3, #3
 8008280:	6a3a      	ldr	r2, [r7, #32]
 8008282:	4413      	add	r3, r2
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	e001      	b.n	800828c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	89b9      	ldrh	r1, [r7, #12]
 8008290:	89ba      	ldrh	r2, [r7, #12]
 8008292:	2302      	movs	r3, #2
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	897b      	ldrh	r3, [r7, #10]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	460b      	mov	r3, r1
 800829c:	6979      	ldr	r1, [r7, #20]
 800829e:	f7ff fe7d 	bl	8007f9c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80082a2:	687b      	ldr	r3, [r7, #4]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <pbuf_realloc+0x20>
 80082be:	4b3a      	ldr	r3, [pc, #232]	@ (80083a8 <pbuf_realloc+0xfc>)
 80082c0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80082c4:	4939      	ldr	r1, [pc, #228]	@ (80083ac <pbuf_realloc+0x100>)
 80082c6:	483a      	ldr	r0, [pc, #232]	@ (80083b0 <pbuf_realloc+0x104>)
 80082c8:	f006 f960 	bl	800e58c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	891b      	ldrh	r3, [r3, #8]
 80082d0:	887a      	ldrh	r2, [r7, #2]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d263      	bcs.n	800839e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	891a      	ldrh	r2, [r3, #8]
 80082da:	887b      	ldrh	r3, [r7, #2]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80082e0:	887b      	ldrh	r3, [r7, #2]
 80082e2:	817b      	strh	r3, [r7, #10]
  q = p;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80082e8:	e018      	b.n	800831c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	895b      	ldrh	r3, [r3, #10]
 80082ee:	897a      	ldrh	r2, [r7, #10]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	891a      	ldrh	r2, [r3, #8]
 80082f8:	893b      	ldrh	r3, [r7, #8]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <pbuf_realloc+0x70>
 800830e:	4b26      	ldr	r3, [pc, #152]	@ (80083a8 <pbuf_realloc+0xfc>)
 8008310:	f240 12af 	movw	r2, #431	@ 0x1af
 8008314:	4927      	ldr	r1, [pc, #156]	@ (80083b4 <pbuf_realloc+0x108>)
 8008316:	4826      	ldr	r0, [pc, #152]	@ (80083b0 <pbuf_realloc+0x104>)
 8008318:	f006 f938 	bl	800e58c <iprintf>
  while (rem_len > q->len) {
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	895b      	ldrh	r3, [r3, #10]
 8008320:	897a      	ldrh	r2, [r7, #10]
 8008322:	429a      	cmp	r2, r3
 8008324:	d8e1      	bhi.n	80082ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	7b1b      	ldrb	r3, [r3, #12]
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	2b00      	cmp	r3, #0
 8008330:	d121      	bne.n	8008376 <pbuf_realloc+0xca>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	895b      	ldrh	r3, [r3, #10]
 8008336:	897a      	ldrh	r2, [r7, #10]
 8008338:	429a      	cmp	r2, r3
 800833a:	d01c      	beq.n	8008376 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	7b5b      	ldrb	r3, [r3, #13]
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d116      	bne.n	8008376 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	b29a      	uxth	r2, r3
 8008352:	897b      	ldrh	r3, [r7, #10]
 8008354:	4413      	add	r3, r2
 8008356:	b29b      	uxth	r3, r3
 8008358:	4619      	mov	r1, r3
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7fe ffba 	bl	80072d4 <mem_trim>
 8008360:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <pbuf_realloc+0xca>
 8008368:	4b0f      	ldr	r3, [pc, #60]	@ (80083a8 <pbuf_realloc+0xfc>)
 800836a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800836e:	4912      	ldr	r1, [pc, #72]	@ (80083b8 <pbuf_realloc+0x10c>)
 8008370:	480f      	ldr	r0, [pc, #60]	@ (80083b0 <pbuf_realloc+0x104>)
 8008372:	f006 f90b 	bl	800e58c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	897a      	ldrh	r2, [r7, #10]
 800837a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	895a      	ldrh	r2, [r3, #10]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d004      	beq.n	8008396 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f000 f911 	bl	80085b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	e000      	b.n	80083a0 <pbuf_realloc+0xf4>
    return;
 800839e:	bf00      	nop

}
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	080103d8 	.word	0x080103d8
 80083ac:	08010564 	.word	0x08010564
 80083b0:	080104ac 	.word	0x080104ac
 80083b4:	0801057c 	.word	0x0801057c
 80083b8:	08010594 	.word	0x08010594

080083bc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <pbuf_add_header_impl+0x22>
 80083d0:	4b2b      	ldr	r3, [pc, #172]	@ (8008480 <pbuf_add_header_impl+0xc4>)
 80083d2:	f240 12df 	movw	r2, #479	@ 0x1df
 80083d6:	492b      	ldr	r1, [pc, #172]	@ (8008484 <pbuf_add_header_impl+0xc8>)
 80083d8:	482b      	ldr	r0, [pc, #172]	@ (8008488 <pbuf_add_header_impl+0xcc>)
 80083da:	f006 f8d7 	bl	800e58c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <pbuf_add_header_impl+0x30>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ea:	d301      	bcc.n	80083f0 <pbuf_add_header_impl+0x34>
    return 1;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e043      	b.n	8008478 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <pbuf_add_header_impl+0x3e>
    return 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e03e      	b.n	8008478 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	891a      	ldrh	r2, [r3, #8]
 8008402:	8a7b      	ldrh	r3, [r7, #18]
 8008404:	4413      	add	r3, r2
 8008406:	b29b      	uxth	r3, r3
 8008408:	8a7a      	ldrh	r2, [r7, #18]
 800840a:	429a      	cmp	r2, r3
 800840c:	d901      	bls.n	8008412 <pbuf_add_header_impl+0x56>
    return 1;
 800840e:	2301      	movs	r3, #1
 8008410:	e032      	b.n	8008478 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	7b1b      	ldrb	r3, [r3, #12]
 8008416:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008418:	8a3b      	ldrh	r3, [r7, #16]
 800841a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00c      	beq.n	800843c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	425b      	negs	r3, r3
 800842a:	4413      	add	r3, r2
 800842c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3310      	adds	r3, #16
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	429a      	cmp	r2, r3
 8008436:	d20d      	bcs.n	8008454 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008438:	2301      	movs	r3, #1
 800843a:	e01d      	b.n	8008478 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d006      	beq.n	8008450 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	425b      	negs	r3, r3
 800844a:	4413      	add	r3, r2
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e001      	b.n	8008454 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008450:	2301      	movs	r3, #1
 8008452:	e011      	b.n	8008478 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	895a      	ldrh	r2, [r3, #10]
 800845e:	8a7b      	ldrh	r3, [r7, #18]
 8008460:	4413      	add	r3, r2
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	891a      	ldrh	r2, [r3, #8]
 800846c:	8a7b      	ldrh	r3, [r7, #18]
 800846e:	4413      	add	r3, r2
 8008470:	b29a      	uxth	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	811a      	strh	r2, [r3, #8]


  return 0;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	080103d8 	.word	0x080103d8
 8008484:	080105b0 	.word	0x080105b0
 8008488:	080104ac 	.word	0x080104ac

0800848c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008496:	2200      	movs	r2, #0
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff ff8e 	bl	80083bc <pbuf_add_header_impl>
 80084a0:	4603      	mov	r3, r0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d106      	bne.n	80084ca <pbuf_remove_header+0x1e>
 80084bc:	4b20      	ldr	r3, [pc, #128]	@ (8008540 <pbuf_remove_header+0x94>)
 80084be:	f240 224b 	movw	r2, #587	@ 0x24b
 80084c2:	4920      	ldr	r1, [pc, #128]	@ (8008544 <pbuf_remove_header+0x98>)
 80084c4:	4820      	ldr	r0, [pc, #128]	@ (8008548 <pbuf_remove_header+0x9c>)
 80084c6:	f006 f861 	bl	800e58c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <pbuf_remove_header+0x2c>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084d6:	d301      	bcc.n	80084dc <pbuf_remove_header+0x30>
    return 1;
 80084d8:	2301      	movs	r3, #1
 80084da:	e02c      	b.n	8008536 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <pbuf_remove_header+0x3a>
    return 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e027      	b.n	8008536 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	895b      	ldrh	r3, [r3, #10]
 80084ee:	89fa      	ldrh	r2, [r7, #14]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d908      	bls.n	8008506 <pbuf_remove_header+0x5a>
 80084f4:	4b12      	ldr	r3, [pc, #72]	@ (8008540 <pbuf_remove_header+0x94>)
 80084f6:	f240 2255 	movw	r2, #597	@ 0x255
 80084fa:	4914      	ldr	r1, [pc, #80]	@ (800854c <pbuf_remove_header+0xa0>)
 80084fc:	4812      	ldr	r0, [pc, #72]	@ (8008548 <pbuf_remove_header+0x9c>)
 80084fe:	f006 f845 	bl	800e58c <iprintf>
 8008502:	2301      	movs	r3, #1
 8008504:	e017      	b.n	8008536 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	441a      	add	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	895a      	ldrh	r2, [r3, #10]
 800851c:	89fb      	ldrh	r3, [r7, #14]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	891a      	ldrh	r2, [r3, #8]
 800852a:	89fb      	ldrh	r3, [r7, #14]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	b29a      	uxth	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	080103d8 	.word	0x080103d8
 8008544:	080105b0 	.word	0x080105b0
 8008548:	080104ac 	.word	0x080104ac
 800854c:	080105bc 	.word	0x080105bc

08008550 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	807b      	strh	r3, [r7, #2]
 800855c:	4613      	mov	r3, r2
 800855e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008560:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008564:	2b00      	cmp	r3, #0
 8008566:	da08      	bge.n	800857a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008568:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800856c:	425b      	negs	r3, r3
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff ff9b 	bl	80084ac <pbuf_remove_header>
 8008576:	4603      	mov	r3, r0
 8008578:	e007      	b.n	800858a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800857a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800857e:	787a      	ldrb	r2, [r7, #1]
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff ff1a 	bl	80083bc <pbuf_add_header_impl>
 8008588:	4603      	mov	r3, r0
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800859e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085a2:	2201      	movs	r2, #1
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff ffd2 	bl	8008550 <pbuf_header_impl>
 80085ac:	4603      	mov	r3, r0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <pbuf_free+0x22>
 80085cc:	4b38      	ldr	r3, [pc, #224]	@ (80086b0 <pbuf_free+0xf8>)
 80085ce:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80085d2:	4938      	ldr	r1, [pc, #224]	@ (80086b4 <pbuf_free+0xfc>)
 80085d4:	4838      	ldr	r0, [pc, #224]	@ (80086b8 <pbuf_free+0x100>)
 80085d6:	f005 ffd9 	bl	800e58c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	e063      	b.n	80086a6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80085e2:	e05c      	b.n	800869e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7b9b      	ldrb	r3, [r3, #14]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <pbuf_free+0x42>
 80085ec:	4b30      	ldr	r3, [pc, #192]	@ (80086b0 <pbuf_free+0xf8>)
 80085ee:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80085f2:	4932      	ldr	r1, [pc, #200]	@ (80086bc <pbuf_free+0x104>)
 80085f4:	4830      	ldr	r0, [pc, #192]	@ (80086b8 <pbuf_free+0x100>)
 80085f6:	f005 ffc9 	bl	800e58c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7b9b      	ldrb	r3, [r3, #14]
 80085fe:	3b01      	subs	r3, #1
 8008600:	b2da      	uxtb	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	739a      	strb	r2, [r3, #14]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	7b9b      	ldrb	r3, [r3, #14]
 800860a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800860c:	7dbb      	ldrb	r3, [r7, #22]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d143      	bne.n	800869a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	7b1b      	ldrb	r3, [r3, #12]
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7b5b      	ldrb	r3, [r3, #13]
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d011      	beq.n	8008652 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <pbuf_free+0x90>
 800863a:	4b1d      	ldr	r3, [pc, #116]	@ (80086b0 <pbuf_free+0xf8>)
 800863c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008640:	491f      	ldr	r1, [pc, #124]	@ (80086c0 <pbuf_free+0x108>)
 8008642:	481d      	ldr	r0, [pc, #116]	@ (80086b8 <pbuf_free+0x100>)
 8008644:	f005 ffa2 	bl	800e58c <iprintf>
        pc->custom_free_function(p);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	4798      	blx	r3
 8008650:	e01d      	b.n	800868e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008652:	7bfb      	ldrb	r3, [r7, #15]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d104      	bne.n	8008662 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	2008      	movs	r0, #8
 800865c:	f7ff f936 	bl	80078cc <memp_free>
 8008660:	e015      	b.n	800868e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d104      	bne.n	8008672 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	2007      	movs	r0, #7
 800866c:	f7ff f92e 	bl	80078cc <memp_free>
 8008670:	e00d      	b.n	800868e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <pbuf_free+0xc8>
          mem_free(p);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7fe fdc1 	bl	8007200 <mem_free>
 800867e:	e006      	b.n	800868e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008680:	4b0b      	ldr	r3, [pc, #44]	@ (80086b0 <pbuf_free+0xf8>)
 8008682:	f240 320f 	movw	r2, #783	@ 0x30f
 8008686:	490f      	ldr	r1, [pc, #60]	@ (80086c4 <pbuf_free+0x10c>)
 8008688:	480b      	ldr	r0, [pc, #44]	@ (80086b8 <pbuf_free+0x100>)
 800868a:	f005 ff7f 	bl	800e58c <iprintf>
        }
      }
      count++;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	3301      	adds	r3, #1
 8008692:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	607b      	str	r3, [r7, #4]
 8008698:	e001      	b.n	800869e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d19f      	bne.n	80085e4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80086a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	080103d8 	.word	0x080103d8
 80086b4:	080105b0 	.word	0x080105b0
 80086b8:	080104ac 	.word	0x080104ac
 80086bc:	080105dc 	.word	0x080105dc
 80086c0:	080105f4 	.word	0x080105f4
 80086c4:	08010618 	.word	0x08010618

080086c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80086d4:	e005      	b.n	80086e2 <pbuf_clen+0x1a>
    ++len;
 80086d6:	89fb      	ldrh	r3, [r7, #14]
 80086d8:	3301      	adds	r3, #1
 80086da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f6      	bne.n	80086d6 <pbuf_clen+0xe>
  }
  return len;
 80086e8:	89fb      	ldrh	r3, [r7, #14]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d010      	beq.n	8008728 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	7b9b      	ldrb	r3, [r3, #14]
 800870a:	3301      	adds	r3, #1
 800870c:	b2da      	uxtb	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7b9b      	ldrb	r3, [r3, #14]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d106      	bne.n	8008728 <pbuf_ref+0x30>
 800871a:	4b05      	ldr	r3, [pc, #20]	@ (8008730 <pbuf_ref+0x38>)
 800871c:	f240 3242 	movw	r2, #834	@ 0x342
 8008720:	4904      	ldr	r1, [pc, #16]	@ (8008734 <pbuf_ref+0x3c>)
 8008722:	4805      	ldr	r0, [pc, #20]	@ (8008738 <pbuf_ref+0x40>)
 8008724:	f005 ff32 	bl	800e58c <iprintf>
  }
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	080103d8 	.word	0x080103d8
 8008734:	0801062c 	.word	0x0801062c
 8008738:	080104ac 	.word	0x080104ac

0800873c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <pbuf_cat+0x16>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d107      	bne.n	8008762 <pbuf_cat+0x26>
 8008752:	4b20      	ldr	r3, [pc, #128]	@ (80087d4 <pbuf_cat+0x98>)
 8008754:	f240 3259 	movw	r2, #857	@ 0x359
 8008758:	491f      	ldr	r1, [pc, #124]	@ (80087d8 <pbuf_cat+0x9c>)
 800875a:	4820      	ldr	r0, [pc, #128]	@ (80087dc <pbuf_cat+0xa0>)
 800875c:	f005 ff16 	bl	800e58c <iprintf>
 8008760:	e034      	b.n	80087cc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e00a      	b.n	800877e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	891a      	ldrh	r2, [r3, #8]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	891b      	ldrh	r3, [r3, #8]
 8008770:	4413      	add	r3, r2
 8008772:	b29a      	uxth	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f0      	bne.n	8008768 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	891a      	ldrh	r2, [r3, #8]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	895b      	ldrh	r3, [r3, #10]
 800878e:	429a      	cmp	r2, r3
 8008790:	d006      	beq.n	80087a0 <pbuf_cat+0x64>
 8008792:	4b10      	ldr	r3, [pc, #64]	@ (80087d4 <pbuf_cat+0x98>)
 8008794:	f240 3262 	movw	r2, #866	@ 0x362
 8008798:	4911      	ldr	r1, [pc, #68]	@ (80087e0 <pbuf_cat+0xa4>)
 800879a:	4810      	ldr	r0, [pc, #64]	@ (80087dc <pbuf_cat+0xa0>)
 800879c:	f005 fef6 	bl	800e58c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d006      	beq.n	80087b6 <pbuf_cat+0x7a>
 80087a8:	4b0a      	ldr	r3, [pc, #40]	@ (80087d4 <pbuf_cat+0x98>)
 80087aa:	f240 3263 	movw	r2, #867	@ 0x363
 80087ae:	490d      	ldr	r1, [pc, #52]	@ (80087e4 <pbuf_cat+0xa8>)
 80087b0:	480a      	ldr	r0, [pc, #40]	@ (80087dc <pbuf_cat+0xa0>)
 80087b2:	f005 feeb 	bl	800e58c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	891a      	ldrh	r2, [r3, #8]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	891b      	ldrh	r3, [r3, #8]
 80087be:	4413      	add	r3, r2
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	080103d8 	.word	0x080103d8
 80087d8:	08010640 	.word	0x08010640
 80087dc:	080104ac 	.word	0x080104ac
 80087e0:	08010678 	.word	0x08010678
 80087e4:	080106a8 	.word	0x080106a8

080087e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	2300      	movs	r3, #0
 80087f8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d008      	beq.n	8008812 <pbuf_copy+0x2a>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <pbuf_copy+0x2a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	891a      	ldrh	r2, [r3, #8]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	891b      	ldrh	r3, [r3, #8]
 800880e:	429a      	cmp	r2, r3
 8008810:	d209      	bcs.n	8008826 <pbuf_copy+0x3e>
 8008812:	4b57      	ldr	r3, [pc, #348]	@ (8008970 <pbuf_copy+0x188>)
 8008814:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8008818:	4956      	ldr	r1, [pc, #344]	@ (8008974 <pbuf_copy+0x18c>)
 800881a:	4857      	ldr	r0, [pc, #348]	@ (8008978 <pbuf_copy+0x190>)
 800881c:	f005 feb6 	bl	800e58c <iprintf>
 8008820:	f06f 030f 	mvn.w	r3, #15
 8008824:	e09f      	b.n	8008966 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	895b      	ldrh	r3, [r3, #10]
 800882a:	461a      	mov	r2, r3
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	1ad2      	subs	r2, r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	895b      	ldrh	r3, [r3, #10]
 8008834:	4619      	mov	r1, r3
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1acb      	subs	r3, r1, r3
 800883a:	429a      	cmp	r2, r3
 800883c:	d306      	bcc.n	800884c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	895b      	ldrh	r3, [r3, #10]
 8008842:	461a      	mov	r2, r3
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	e005      	b.n	8008858 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	895b      	ldrh	r3, [r3, #10]
 8008850:	461a      	mov	r2, r3
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	18d0      	adds	r0, r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	4413      	add	r3, r2
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4619      	mov	r1, r3
 800886c:	f005 ff69 	bl	800e742 <memcpy>
    offset_to += len;
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4413      	add	r3, r2
 800887e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	895b      	ldrh	r3, [r3, #10]
 8008884:	461a      	mov	r2, r3
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	4293      	cmp	r3, r2
 800888a:	d906      	bls.n	800889a <pbuf_copy+0xb2>
 800888c:	4b38      	ldr	r3, [pc, #224]	@ (8008970 <pbuf_copy+0x188>)
 800888e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8008892:	493a      	ldr	r1, [pc, #232]	@ (800897c <pbuf_copy+0x194>)
 8008894:	4838      	ldr	r0, [pc, #224]	@ (8008978 <pbuf_copy+0x190>)
 8008896:	f005 fe79 	bl	800e58c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	895b      	ldrh	r3, [r3, #10]
 800889e:	461a      	mov	r2, r3
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d906      	bls.n	80088b4 <pbuf_copy+0xcc>
 80088a6:	4b32      	ldr	r3, [pc, #200]	@ (8008970 <pbuf_copy+0x188>)
 80088a8:	f240 32da 	movw	r2, #986	@ 0x3da
 80088ac:	4934      	ldr	r1, [pc, #208]	@ (8008980 <pbuf_copy+0x198>)
 80088ae:	4832      	ldr	r0, [pc, #200]	@ (8008978 <pbuf_copy+0x190>)
 80088b0:	f005 fe6c 	bl	800e58c <iprintf>
    if (offset_from >= p_from->len) {
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	895b      	ldrh	r3, [r3, #10]
 80088b8:	461a      	mov	r2, r3
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4293      	cmp	r3, r2
 80088be:	d304      	bcc.n	80088ca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	895b      	ldrh	r3, [r3, #10]
 80088ce:	461a      	mov	r2, r3
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d114      	bne.n	8008900 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10c      	bne.n	8008900 <pbuf_copy+0x118>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <pbuf_copy+0x118>
 80088ec:	4b20      	ldr	r3, [pc, #128]	@ (8008970 <pbuf_copy+0x188>)
 80088ee:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80088f2:	4924      	ldr	r1, [pc, #144]	@ (8008984 <pbuf_copy+0x19c>)
 80088f4:	4820      	ldr	r0, [pc, #128]	@ (8008978 <pbuf_copy+0x190>)
 80088f6:	f005 fe49 	bl	800e58c <iprintf>
 80088fa:	f06f 030f 	mvn.w	r3, #15
 80088fe:	e032      	b.n	8008966 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d013      	beq.n	800892e <pbuf_copy+0x146>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	895a      	ldrh	r2, [r3, #10]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	891b      	ldrh	r3, [r3, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	d10d      	bne.n	800892e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <pbuf_copy+0x146>
 800891a:	4b15      	ldr	r3, [pc, #84]	@ (8008970 <pbuf_copy+0x188>)
 800891c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008920:	4919      	ldr	r1, [pc, #100]	@ (8008988 <pbuf_copy+0x1a0>)
 8008922:	4815      	ldr	r0, [pc, #84]	@ (8008978 <pbuf_copy+0x190>)
 8008924:	f005 fe32 	bl	800e58c <iprintf>
 8008928:	f06f 0305 	mvn.w	r3, #5
 800892c:	e01b      	b.n	8008966 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d013      	beq.n	800895c <pbuf_copy+0x174>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	895a      	ldrh	r2, [r3, #10]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	891b      	ldrh	r3, [r3, #8]
 800893c:	429a      	cmp	r2, r3
 800893e:	d10d      	bne.n	800895c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d009      	beq.n	800895c <pbuf_copy+0x174>
 8008948:	4b09      	ldr	r3, [pc, #36]	@ (8008970 <pbuf_copy+0x188>)
 800894a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800894e:	490e      	ldr	r1, [pc, #56]	@ (8008988 <pbuf_copy+0x1a0>)
 8008950:	4809      	ldr	r0, [pc, #36]	@ (8008978 <pbuf_copy+0x190>)
 8008952:	f005 fe1b 	bl	800e58c <iprintf>
 8008956:	f06f 0305 	mvn.w	r3, #5
 800895a:	e004      	b.n	8008966 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	f47f af61 	bne.w	8008826 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	080103d8 	.word	0x080103d8
 8008974:	080106f4 	.word	0x080106f4
 8008978:	080104ac 	.word	0x080104ac
 800897c:	08010724 	.word	0x08010724
 8008980:	0801073c 	.word	0x0801073c
 8008984:	08010758 	.word	0x08010758
 8008988:	08010768 	.word	0x08010768

0800898c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	4611      	mov	r1, r2
 8008998:	461a      	mov	r2, r3
 800899a:	460b      	mov	r3, r1
 800899c:	80fb      	strh	r3, [r7, #6]
 800899e:	4613      	mov	r3, r2
 80089a0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d108      	bne.n	80089c2 <pbuf_copy_partial+0x36>
 80089b0:	4b2b      	ldr	r3, [pc, #172]	@ (8008a60 <pbuf_copy_partial+0xd4>)
 80089b2:	f240 420a 	movw	r2, #1034	@ 0x40a
 80089b6:	492b      	ldr	r1, [pc, #172]	@ (8008a64 <pbuf_copy_partial+0xd8>)
 80089b8:	482b      	ldr	r0, [pc, #172]	@ (8008a68 <pbuf_copy_partial+0xdc>)
 80089ba:	f005 fde7 	bl	800e58c <iprintf>
 80089be:	2300      	movs	r3, #0
 80089c0:	e04a      	b.n	8008a58 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d108      	bne.n	80089da <pbuf_copy_partial+0x4e>
 80089c8:	4b25      	ldr	r3, [pc, #148]	@ (8008a60 <pbuf_copy_partial+0xd4>)
 80089ca:	f240 420b 	movw	r2, #1035	@ 0x40b
 80089ce:	4927      	ldr	r1, [pc, #156]	@ (8008a6c <pbuf_copy_partial+0xe0>)
 80089d0:	4825      	ldr	r0, [pc, #148]	@ (8008a68 <pbuf_copy_partial+0xdc>)
 80089d2:	f005 fddb 	bl	800e58c <iprintf>
 80089d6:	2300      	movs	r3, #0
 80089d8:	e03e      	b.n	8008a58 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	61fb      	str	r3, [r7, #28]
 80089de:	e034      	b.n	8008a4a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80089e0:	88bb      	ldrh	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00a      	beq.n	80089fc <pbuf_copy_partial+0x70>
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	895b      	ldrh	r3, [r3, #10]
 80089ea:	88ba      	ldrh	r2, [r7, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d305      	bcc.n	80089fc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	895b      	ldrh	r3, [r3, #10]
 80089f4:	88ba      	ldrh	r2, [r7, #4]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	80bb      	strh	r3, [r7, #4]
 80089fa:	e023      	b.n	8008a44 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	895a      	ldrh	r2, [r3, #10]
 8008a00:	88bb      	ldrh	r3, [r7, #4]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008a06:	8b3a      	ldrh	r2, [r7, #24]
 8008a08:	88fb      	ldrh	r3, [r7, #6]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d901      	bls.n	8008a12 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008a12:	8b7b      	ldrh	r3, [r7, #26]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	18d0      	adds	r0, r2, r3
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	88bb      	ldrh	r3, [r7, #4]
 8008a1e:	4413      	add	r3, r2
 8008a20:	8b3a      	ldrh	r2, [r7, #24]
 8008a22:	4619      	mov	r1, r3
 8008a24:	f005 fe8d 	bl	800e742 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008a28:	8afa      	ldrh	r2, [r7, #22]
 8008a2a:	8b3b      	ldrh	r3, [r7, #24]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008a30:	8b7a      	ldrh	r2, [r7, #26]
 8008a32:	8b3b      	ldrh	r3, [r7, #24]
 8008a34:	4413      	add	r3, r2
 8008a36:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008a38:	88fa      	ldrh	r2, [r7, #6]
 8008a3a:	8b3b      	ldrh	r3, [r7, #24]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <pbuf_copy_partial+0xca>
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1c4      	bne.n	80089e0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008a56:	8afb      	ldrh	r3, [r7, #22]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3720      	adds	r7, #32
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	080103d8 	.word	0x080103d8
 8008a64:	08010794 	.word	0x08010794
 8008a68:	080104ac 	.word	0x080104ac
 8008a6c:	080107b4 	.word	0x080107b4

08008a70 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	4603      	mov	r3, r0
 8008a78:	603a      	str	r2, [r7, #0]
 8008a7a:	71fb      	strb	r3, [r7, #7]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	8919      	ldrh	r1, [r3, #8]
 8008a84:	88ba      	ldrh	r2, [r7, #4]
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff fab1 	bl	8007ff0 <pbuf_alloc>
 8008a8e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <pbuf_clone+0x2a>
    return NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e011      	b.n	8008abe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff fea3 	bl	80087e8 <pbuf_copy>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008aa6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d006      	beq.n	8008abc <pbuf_clone+0x4c>
 8008aae:	4b06      	ldr	r3, [pc, #24]	@ (8008ac8 <pbuf_clone+0x58>)
 8008ab0:	f240 5224 	movw	r2, #1316	@ 0x524
 8008ab4:	4905      	ldr	r1, [pc, #20]	@ (8008acc <pbuf_clone+0x5c>)
 8008ab6:	4806      	ldr	r0, [pc, #24]	@ (8008ad0 <pbuf_clone+0x60>)
 8008ab8:	f005 fd68 	bl	800e58c <iprintf>
  return q;
 8008abc:	68fb      	ldr	r3, [r7, #12]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	080103d8 	.word	0x080103d8
 8008acc:	080108c0 	.word	0x080108c0
 8008ad0:	080104ac 	.word	0x080104ac

08008ad4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008ad8:	f005 fc58 	bl	800e38c <rand>
 8008adc:	4603      	mov	r3, r0
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	4b01      	ldr	r3, [pc, #4]	@ (8008af4 <tcp_init+0x20>)
 8008aee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008af0:	bf00      	nop
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	24000024 	.word	0x24000024

08008af8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7d1b      	ldrb	r3, [r3, #20]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d105      	bne.n	8008b14 <tcp_free+0x1c>
 8008b08:	4b06      	ldr	r3, [pc, #24]	@ (8008b24 <tcp_free+0x2c>)
 8008b0a:	22d4      	movs	r2, #212	@ 0xd4
 8008b0c:	4906      	ldr	r1, [pc, #24]	@ (8008b28 <tcp_free+0x30>)
 8008b0e:	4807      	ldr	r0, [pc, #28]	@ (8008b2c <tcp_free+0x34>)
 8008b10:	f005 fd3c 	bl	800e58c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008b14:	6879      	ldr	r1, [r7, #4]
 8008b16:	2001      	movs	r0, #1
 8008b18:	f7fe fed8 	bl	80078cc <memp_free>
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	0801094c 	.word	0x0801094c
 8008b28:	080109f0 	.word	0x080109f0
 8008b2c:	08010a04 	.word	0x08010a04

08008b30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7d1b      	ldrb	r3, [r3, #20]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d105      	bne.n	8008b4c <tcp_free_listen+0x1c>
 8008b40:	4b06      	ldr	r3, [pc, #24]	@ (8008b5c <tcp_free_listen+0x2c>)
 8008b42:	22df      	movs	r2, #223	@ 0xdf
 8008b44:	4906      	ldr	r1, [pc, #24]	@ (8008b60 <tcp_free_listen+0x30>)
 8008b46:	4807      	ldr	r0, [pc, #28]	@ (8008b64 <tcp_free_listen+0x34>)
 8008b48:	f005 fd20 	bl	800e58c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	2002      	movs	r0, #2
 8008b50:	f7fe febc 	bl	80078cc <memp_free>
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	0801094c 	.word	0x0801094c
 8008b60:	08010a2c 	.word	0x08010a2c
 8008b64:	08010a04 	.word	0x08010a04

08008b68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008b6c:	f000 fea4 	bl	80098b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008b70:	4b07      	ldr	r3, [pc, #28]	@ (8008b90 <tcp_tmr+0x28>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	4b05      	ldr	r3, [pc, #20]	@ (8008b90 <tcp_tmr+0x28>)
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	4b04      	ldr	r3, [pc, #16]	@ (8008b90 <tcp_tmr+0x28>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008b88:	f000 fb54 	bl	8009234 <tcp_slowtmr>
  }
}
 8008b8c:	bf00      	nop
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	24007c81 	.word	0x24007c81

08008b94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d105      	bne.n	8008bb0 <tcp_remove_listener+0x1c>
 8008ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <tcp_remove_listener+0x48>)
 8008ba6:	22ff      	movs	r2, #255	@ 0xff
 8008ba8:	490d      	ldr	r1, [pc, #52]	@ (8008be0 <tcp_remove_listener+0x4c>)
 8008baa:	480e      	ldr	r0, [pc, #56]	@ (8008be4 <tcp_remove_listener+0x50>)
 8008bac:	f005 fcee 	bl	800e58c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	e00a      	b.n	8008bcc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d102      	bne.n	8008bc6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f1      	bne.n	8008bb6 <tcp_remove_listener+0x22>
    }
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	0801094c 	.word	0x0801094c
 8008be0:	08010a48 	.word	0x08010a48
 8008be4:	08010a04 	.word	0x08010a04

08008be8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d106      	bne.n	8008c04 <tcp_listen_closed+0x1c>
 8008bf6:	4b14      	ldr	r3, [pc, #80]	@ (8008c48 <tcp_listen_closed+0x60>)
 8008bf8:	f240 1211 	movw	r2, #273	@ 0x111
 8008bfc:	4913      	ldr	r1, [pc, #76]	@ (8008c4c <tcp_listen_closed+0x64>)
 8008bfe:	4814      	ldr	r0, [pc, #80]	@ (8008c50 <tcp_listen_closed+0x68>)
 8008c00:	f005 fcc4 	bl	800e58c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7d1b      	ldrb	r3, [r3, #20]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d006      	beq.n	8008c1a <tcp_listen_closed+0x32>
 8008c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c48 <tcp_listen_closed+0x60>)
 8008c0e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008c12:	4910      	ldr	r1, [pc, #64]	@ (8008c54 <tcp_listen_closed+0x6c>)
 8008c14:	480e      	ldr	r0, [pc, #56]	@ (8008c50 <tcp_listen_closed+0x68>)
 8008c16:	f005 fcb9 	bl	800e58c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e00b      	b.n	8008c38 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008c20:	4a0d      	ldr	r2, [pc, #52]	@ (8008c58 <tcp_listen_closed+0x70>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff ffb1 	bl	8008b94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d9f0      	bls.n	8008c20 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008c3e:	bf00      	nop
 8008c40:	bf00      	nop
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	0801094c 	.word	0x0801094c
 8008c4c:	08010a70 	.word	0x08010a70
 8008c50:	08010a04 	.word	0x08010a04
 8008c54:	08010a7c 	.word	0x08010a7c
 8008c58:	080124b8 	.word	0x080124b8

08008c5c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008c5c:	b5b0      	push	{r4, r5, r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af04      	add	r7, sp, #16
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <tcp_close_shutdown+0x20>
 8008c6e:	4b63      	ldr	r3, [pc, #396]	@ (8008dfc <tcp_close_shutdown+0x1a0>)
 8008c70:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008c74:	4962      	ldr	r1, [pc, #392]	@ (8008e00 <tcp_close_shutdown+0x1a4>)
 8008c76:	4863      	ldr	r0, [pc, #396]	@ (8008e04 <tcp_close_shutdown+0x1a8>)
 8008c78:	f005 fc88 	bl	800e58c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d066      	beq.n	8008d50 <tcp_close_shutdown+0xf4>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	7d1b      	ldrb	r3, [r3, #20]
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d003      	beq.n	8008c92 <tcp_close_shutdown+0x36>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7d1b      	ldrb	r3, [r3, #20]
 8008c8e:	2b07      	cmp	r3, #7
 8008c90:	d15e      	bne.n	8008d50 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <tcp_close_shutdown+0x48>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c9e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008ca2:	d055      	beq.n	8008d50 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	8b5b      	ldrh	r3, [r3, #26]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d106      	bne.n	8008cbe <tcp_close_shutdown+0x62>
 8008cb0:	4b52      	ldr	r3, [pc, #328]	@ (8008dfc <tcp_close_shutdown+0x1a0>)
 8008cb2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008cb6:	4954      	ldr	r1, [pc, #336]	@ (8008e08 <tcp_close_shutdown+0x1ac>)
 8008cb8:	4852      	ldr	r0, [pc, #328]	@ (8008e04 <tcp_close_shutdown+0x1a8>)
 8008cba:	f005 fc67 	bl	800e58c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008cc6:	687d      	ldr	r5, [r7, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	8ad2      	ldrh	r2, [r2, #22]
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	8b09      	ldrh	r1, [r1, #24]
 8008cd4:	9102      	str	r1, [sp, #8]
 8008cd6:	9201      	str	r2, [sp, #4]
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462b      	mov	r3, r5
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4601      	mov	r1, r0
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f004 fe8d 	bl	800da00 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 f8c8 	bl	8009e7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008cec:	4b47      	ldr	r3, [pc, #284]	@ (8008e0c <tcp_close_shutdown+0x1b0>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d105      	bne.n	8008d02 <tcp_close_shutdown+0xa6>
 8008cf6:	4b45      	ldr	r3, [pc, #276]	@ (8008e0c <tcp_close_shutdown+0x1b0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	4a43      	ldr	r2, [pc, #268]	@ (8008e0c <tcp_close_shutdown+0x1b0>)
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	e013      	b.n	8008d2a <tcp_close_shutdown+0xce>
 8008d02:	4b42      	ldr	r3, [pc, #264]	@ (8008e0c <tcp_close_shutdown+0x1b0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	e00c      	b.n	8008d24 <tcp_close_shutdown+0xc8>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d104      	bne.n	8008d1e <tcp_close_shutdown+0xc2>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68da      	ldr	r2, [r3, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	60da      	str	r2, [r3, #12]
 8008d1c:	e005      	b.n	8008d2a <tcp_close_shutdown+0xce>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1ef      	bne.n	8008d0a <tcp_close_shutdown+0xae>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	60da      	str	r2, [r3, #12]
 8008d30:	4b37      	ldr	r3, [pc, #220]	@ (8008e10 <tcp_close_shutdown+0x1b4>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008d36:	4b37      	ldr	r3, [pc, #220]	@ (8008e14 <tcp_close_shutdown+0x1b8>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d102      	bne.n	8008d46 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008d40:	f003 fd5c 	bl	800c7fc <tcp_trigger_input_pcb_close>
 8008d44:	e002      	b.n	8008d4c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff fed6 	bl	8008af8 <tcp_free>
      }
      return ERR_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e050      	b.n	8008df2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	7d1b      	ldrb	r3, [r3, #20]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d03b      	beq.n	8008dd0 <tcp_close_shutdown+0x174>
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	dc44      	bgt.n	8008de6 <tcp_close_shutdown+0x18a>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <tcp_close_shutdown+0x10a>
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d02a      	beq.n	8008dba <tcp_close_shutdown+0x15e>
 8008d64:	e03f      	b.n	8008de6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	8adb      	ldrh	r3, [r3, #22]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d021      	beq.n	8008db2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8008e18 <tcp_close_shutdown+0x1bc>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d105      	bne.n	8008d84 <tcp_close_shutdown+0x128>
 8008d78:	4b27      	ldr	r3, [pc, #156]	@ (8008e18 <tcp_close_shutdown+0x1bc>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	4a26      	ldr	r2, [pc, #152]	@ (8008e18 <tcp_close_shutdown+0x1bc>)
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	e013      	b.n	8008dac <tcp_close_shutdown+0x150>
 8008d84:	4b24      	ldr	r3, [pc, #144]	@ (8008e18 <tcp_close_shutdown+0x1bc>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	e00c      	b.n	8008da6 <tcp_close_shutdown+0x14a>
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d104      	bne.n	8008da0 <tcp_close_shutdown+0x144>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	60da      	str	r2, [r3, #12]
 8008d9e:	e005      	b.n	8008dac <tcp_close_shutdown+0x150>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	60bb      	str	r3, [r7, #8]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1ef      	bne.n	8008d8c <tcp_close_shutdown+0x130>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff fea0 	bl	8008af8 <tcp_free>
      break;
 8008db8:	e01a      	b.n	8008df0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff ff14 	bl	8008be8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008dc0:	6879      	ldr	r1, [r7, #4]
 8008dc2:	4816      	ldr	r0, [pc, #88]	@ (8008e1c <tcp_close_shutdown+0x1c0>)
 8008dc4:	f001 f8aa 	bl	8009f1c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff feb1 	bl	8008b30 <tcp_free_listen>
      break;
 8008dce:	e00f      	b.n	8008df0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	480e      	ldr	r0, [pc, #56]	@ (8008e0c <tcp_close_shutdown+0x1b0>)
 8008dd4:	f001 f8a2 	bl	8009f1c <tcp_pcb_remove>
 8008dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8008e10 <tcp_close_shutdown+0x1b4>)
 8008dda:	2201      	movs	r2, #1
 8008ddc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff fe8a 	bl	8008af8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008de4:	e004      	b.n	8008df0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f81a 	bl	8008e20 <tcp_close_shutdown_fin>
 8008dec:	4603      	mov	r3, r0
 8008dee:	e000      	b.n	8008df2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bdb0      	pop	{r4, r5, r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	0801094c 	.word	0x0801094c
 8008e00:	08010a94 	.word	0x08010a94
 8008e04:	08010a04 	.word	0x08010a04
 8008e08:	08010ab4 	.word	0x08010ab4
 8008e0c:	24007c78 	.word	0x24007c78
 8008e10:	24007c80 	.word	0x24007c80
 8008e14:	24007cb8 	.word	0x24007cb8
 8008e18:	24007c70 	.word	0x24007c70
 8008e1c:	24007c74 	.word	0x24007c74

08008e20 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d106      	bne.n	8008e3c <tcp_close_shutdown_fin+0x1c>
 8008e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8008ee8 <tcp_close_shutdown_fin+0xc8>)
 8008e30:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008e34:	492d      	ldr	r1, [pc, #180]	@ (8008eec <tcp_close_shutdown_fin+0xcc>)
 8008e36:	482e      	ldr	r0, [pc, #184]	@ (8008ef0 <tcp_close_shutdown_fin+0xd0>)
 8008e38:	f005 fba8 	bl	800e58c <iprintf>

  switch (pcb->state) {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	7d1b      	ldrb	r3, [r3, #20]
 8008e40:	2b07      	cmp	r3, #7
 8008e42:	d020      	beq.n	8008e86 <tcp_close_shutdown_fin+0x66>
 8008e44:	2b07      	cmp	r3, #7
 8008e46:	dc2b      	bgt.n	8008ea0 <tcp_close_shutdown_fin+0x80>
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d002      	beq.n	8008e52 <tcp_close_shutdown_fin+0x32>
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d00d      	beq.n	8008e6c <tcp_close_shutdown_fin+0x4c>
 8008e50:	e026      	b.n	8008ea0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f003 fee2 	bl	800cc1c <tcp_send_fin>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d11f      	bne.n	8008ea4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2205      	movs	r2, #5
 8008e68:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008e6a:	e01b      	b.n	8008ea4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f003 fed5 	bl	800cc1c <tcp_send_fin>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d114      	bne.n	8008ea8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2205      	movs	r2, #5
 8008e82:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008e84:	e010      	b.n	8008ea8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f003 fec8 	bl	800cc1c <tcp_send_fin>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d109      	bne.n	8008eac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2209      	movs	r2, #9
 8008e9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008e9e:	e005      	b.n	8008eac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e01c      	b.n	8008ede <tcp_close_shutdown_fin+0xbe>
      break;
 8008ea4:	bf00      	nop
 8008ea6:	e002      	b.n	8008eae <tcp_close_shutdown_fin+0x8e>
      break;
 8008ea8:	bf00      	nop
 8008eaa:	e000      	b.n	8008eae <tcp_close_shutdown_fin+0x8e>
      break;
 8008eac:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d103      	bne.n	8008ebe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f003 ffee 	bl	800ce98 <tcp_output>
 8008ebc:	e00d      	b.n	8008eda <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec6:	d108      	bne.n	8008eda <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	8b5b      	ldrh	r3, [r3, #26]
 8008ecc:	f043 0308 	orr.w	r3, r3, #8
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e001      	b.n	8008ede <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	0801094c 	.word	0x0801094c
 8008eec:	08010a70 	.word	0x08010a70
 8008ef0:	08010a04 	.word	0x08010a04

08008ef4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <tcp_close+0x22>
 8008f02:	4b0f      	ldr	r3, [pc, #60]	@ (8008f40 <tcp_close+0x4c>)
 8008f04:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008f08:	490e      	ldr	r1, [pc, #56]	@ (8008f44 <tcp_close+0x50>)
 8008f0a:	480f      	ldr	r0, [pc, #60]	@ (8008f48 <tcp_close+0x54>)
 8008f0c:	f005 fb3e 	bl	800e58c <iprintf>
 8008f10:	f06f 030f 	mvn.w	r3, #15
 8008f14:	e00f      	b.n	8008f36 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	7d1b      	ldrb	r3, [r3, #20]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d006      	beq.n	8008f2c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	8b5b      	ldrh	r3, [r3, #26]
 8008f22:	f043 0310 	orr.w	r3, r3, #16
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff fe94 	bl	8008c5c <tcp_close_shutdown>
 8008f34:	4603      	mov	r3, r0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	0801094c 	.word	0x0801094c
 8008f44:	08010ad0 	.word	0x08010ad0
 8008f48:	08010a04 	.word	0x08010a04

08008f4c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08e      	sub	sp, #56	@ 0x38
 8008f50:	af04      	add	r7, sp, #16
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d107      	bne.n	8008f6c <tcp_abandon+0x20>
 8008f5c:	4b52      	ldr	r3, [pc, #328]	@ (80090a8 <tcp_abandon+0x15c>)
 8008f5e:	f240 223d 	movw	r2, #573	@ 0x23d
 8008f62:	4952      	ldr	r1, [pc, #328]	@ (80090ac <tcp_abandon+0x160>)
 8008f64:	4852      	ldr	r0, [pc, #328]	@ (80090b0 <tcp_abandon+0x164>)
 8008f66:	f005 fb11 	bl	800e58c <iprintf>
 8008f6a:	e099      	b.n	80090a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	7d1b      	ldrb	r3, [r3, #20]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d106      	bne.n	8008f82 <tcp_abandon+0x36>
 8008f74:	4b4c      	ldr	r3, [pc, #304]	@ (80090a8 <tcp_abandon+0x15c>)
 8008f76:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008f7a:	494e      	ldr	r1, [pc, #312]	@ (80090b4 <tcp_abandon+0x168>)
 8008f7c:	484c      	ldr	r0, [pc, #304]	@ (80090b0 <tcp_abandon+0x164>)
 8008f7e:	f005 fb05 	bl	800e58c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	7d1b      	ldrb	r3, [r3, #20]
 8008f86:	2b0a      	cmp	r3, #10
 8008f88:	d107      	bne.n	8008f9a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	484a      	ldr	r0, [pc, #296]	@ (80090b8 <tcp_abandon+0x16c>)
 8008f8e:	f000 ffc5 	bl	8009f1c <tcp_pcb_remove>
    tcp_free(pcb);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff fdb0 	bl	8008af8 <tcp_free>
 8008f98:	e082      	b.n	80090a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fb4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	7d1b      	ldrb	r3, [r3, #20]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d126      	bne.n	8009012 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	8adb      	ldrh	r3, [r3, #22]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d02e      	beq.n	800902a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80090bc <tcp_abandon+0x170>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d105      	bne.n	8008fe2 <tcp_abandon+0x96>
 8008fd6:	4b39      	ldr	r3, [pc, #228]	@ (80090bc <tcp_abandon+0x170>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	4a37      	ldr	r2, [pc, #220]	@ (80090bc <tcp_abandon+0x170>)
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	e013      	b.n	800900a <tcp_abandon+0xbe>
 8008fe2:	4b36      	ldr	r3, [pc, #216]	@ (80090bc <tcp_abandon+0x170>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	61fb      	str	r3, [r7, #28]
 8008fe8:	e00c      	b.n	8009004 <tcp_abandon+0xb8>
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d104      	bne.n	8008ffe <tcp_abandon+0xb2>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	60da      	str	r2, [r3, #12]
 8008ffc:	e005      	b.n	800900a <tcp_abandon+0xbe>
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1ef      	bne.n	8008fea <tcp_abandon+0x9e>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	60da      	str	r2, [r3, #12]
 8009010:	e00b      	b.n	800902a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	8adb      	ldrh	r3, [r3, #22]
 800901a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	4828      	ldr	r0, [pc, #160]	@ (80090c0 <tcp_abandon+0x174>)
 8009020:	f000 ff7c 	bl	8009f1c <tcp_pcb_remove>
 8009024:	4b27      	ldr	r3, [pc, #156]	@ (80090c4 <tcp_abandon+0x178>)
 8009026:	2201      	movs	r2, #1
 8009028:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800902e:	2b00      	cmp	r3, #0
 8009030:	d004      	beq.n	800903c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fd1e 	bl	8009a78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fd15 	bl	8009a78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009052:	2b00      	cmp	r3, #0
 8009054:	d004      	beq.n	8009060 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fd0c 	bl	8009a78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00e      	beq.n	8009084 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3304      	adds	r3, #4
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	8b12      	ldrh	r2, [r2, #24]
 8009070:	9202      	str	r2, [sp, #8]
 8009072:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009074:	9201      	str	r2, [sp, #4]
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	460b      	mov	r3, r1
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	69b9      	ldr	r1, [r7, #24]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f004 fcbe 	bl	800da00 <tcp_rst>
    }
    last_state = pcb->state;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	7d1b      	ldrb	r3, [r3, #20]
 8009088:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff fd34 	bl	8008af8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <tcp_abandon+0x154>
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f06f 010c 	mvn.w	r1, #12
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	4798      	blx	r3
  }
}
 80090a0:	3728      	adds	r7, #40	@ 0x28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	0801094c 	.word	0x0801094c
 80090ac:	08010b04 	.word	0x08010b04
 80090b0:	08010a04 	.word	0x08010a04
 80090b4:	08010b20 	.word	0x08010b20
 80090b8:	24007c7c 	.word	0x24007c7c
 80090bc:	24007c70 	.word	0x24007c70
 80090c0:	24007c78 	.word	0x24007c78
 80090c4:	24007c80 	.word	0x24007c80

080090c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80090d0:	2101      	movs	r1, #1
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7ff ff3a 	bl	8008f4c <tcp_abandon>
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <tcp_update_rcv_ann_wnd+0x1c>
 80090ee:	4b25      	ldr	r3, [pc, #148]	@ (8009184 <tcp_update_rcv_ann_wnd+0xa4>)
 80090f0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80090f4:	4924      	ldr	r1, [pc, #144]	@ (8009188 <tcp_update_rcv_ann_wnd+0xa8>)
 80090f6:	4825      	ldr	r0, [pc, #148]	@ (800918c <tcp_update_rcv_ann_wnd+0xac>)
 80090f8:	f005 fa48 	bl	800e58c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009104:	4413      	add	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009110:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8009114:	bf28      	it	cs
 8009116:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800911a:	b292      	uxth	r2, r2
 800911c:	4413      	add	r3, r2
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	db08      	blt.n	8009138 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	e020      	b.n	800917a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	dd03      	ble.n	800914e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800914c:	e014      	b.n	8009178 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009160:	d306      	bcc.n	8009170 <tcp_update_rcv_ann_wnd+0x90>
 8009162:	4b08      	ldr	r3, [pc, #32]	@ (8009184 <tcp_update_rcv_ann_wnd+0xa4>)
 8009164:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009168:	4909      	ldr	r1, [pc, #36]	@ (8009190 <tcp_update_rcv_ann_wnd+0xb0>)
 800916a:	4808      	ldr	r0, [pc, #32]	@ (800918c <tcp_update_rcv_ann_wnd+0xac>)
 800916c:	f005 fa0e 	bl	800e58c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	b29a      	uxth	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009178:	2300      	movs	r3, #0
  }
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	0801094c 	.word	0x0801094c
 8009188:	08010c1c 	.word	0x08010c1c
 800918c:	08010a04 	.word	0x08010a04
 8009190:	08010c40 	.word	0x08010c40

08009194 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d107      	bne.n	80091b6 <tcp_recved+0x22>
 80091a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009224 <tcp_recved+0x90>)
 80091a8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80091ac:	491e      	ldr	r1, [pc, #120]	@ (8009228 <tcp_recved+0x94>)
 80091ae:	481f      	ldr	r0, [pc, #124]	@ (800922c <tcp_recved+0x98>)
 80091b0:	f005 f9ec 	bl	800e58c <iprintf>
 80091b4:	e032      	b.n	800921c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	7d1b      	ldrb	r3, [r3, #20]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d106      	bne.n	80091cc <tcp_recved+0x38>
 80091be:	4b19      	ldr	r3, [pc, #100]	@ (8009224 <tcp_recved+0x90>)
 80091c0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80091c4:	491a      	ldr	r1, [pc, #104]	@ (8009230 <tcp_recved+0x9c>)
 80091c6:	4819      	ldr	r0, [pc, #100]	@ (800922c <tcp_recved+0x98>)
 80091c8:	f005 f9e0 	bl	800e58c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80091d0:	887b      	ldrh	r3, [r7, #2]
 80091d2:	4413      	add	r3, r2
 80091d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80091d6:	89fb      	ldrh	r3, [r7, #14]
 80091d8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80091dc:	d804      	bhi.n	80091e8 <tcp_recved+0x54>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091e2:	89fa      	ldrh	r2, [r7, #14]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d204      	bcs.n	80091f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80091ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 80091f0:	e002      	b.n	80091f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	89fa      	ldrh	r2, [r7, #14]
 80091f6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff ff71 	bl	80090e0 <tcp_update_rcv_ann_wnd>
 80091fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009206:	d309      	bcc.n	800921c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8b5b      	ldrh	r3, [r3, #26]
 800920c:	f043 0302 	orr.w	r3, r3, #2
 8009210:	b29a      	uxth	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f003 fe3e 	bl	800ce98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	0801094c 	.word	0x0801094c
 8009228:	08010c5c 	.word	0x08010c5c
 800922c:	08010a04 	.word	0x08010a04
 8009230:	08010c74 	.word	0x08010c74

08009234 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009234:	b5b0      	push	{r4, r5, r7, lr}
 8009236:	b090      	sub	sp, #64	@ 0x40
 8009238:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009240:	4b95      	ldr	r3, [pc, #596]	@ (8009498 <tcp_slowtmr+0x264>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	4a94      	ldr	r2, [pc, #592]	@ (8009498 <tcp_slowtmr+0x264>)
 8009248:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800924a:	4b94      	ldr	r3, [pc, #592]	@ (800949c <tcp_slowtmr+0x268>)
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	3301      	adds	r3, #1
 8009250:	b2da      	uxtb	r2, r3
 8009252:	4b92      	ldr	r3, [pc, #584]	@ (800949c <tcp_slowtmr+0x268>)
 8009254:	701a      	strb	r2, [r3, #0]
 8009256:	e000      	b.n	800925a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009258:	bf00      	nop
  prev = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800925e:	4b90      	ldr	r3, [pc, #576]	@ (80094a0 <tcp_slowtmr+0x26c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009264:	e29d      	b.n	80097a2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009268:	7d1b      	ldrb	r3, [r3, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d106      	bne.n	800927c <tcp_slowtmr+0x48>
 800926e:	4b8d      	ldr	r3, [pc, #564]	@ (80094a4 <tcp_slowtmr+0x270>)
 8009270:	f240 42be 	movw	r2, #1214	@ 0x4be
 8009274:	498c      	ldr	r1, [pc, #560]	@ (80094a8 <tcp_slowtmr+0x274>)
 8009276:	488d      	ldr	r0, [pc, #564]	@ (80094ac <tcp_slowtmr+0x278>)
 8009278:	f005 f988 	bl	800e58c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800927c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927e:	7d1b      	ldrb	r3, [r3, #20]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d106      	bne.n	8009292 <tcp_slowtmr+0x5e>
 8009284:	4b87      	ldr	r3, [pc, #540]	@ (80094a4 <tcp_slowtmr+0x270>)
 8009286:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800928a:	4989      	ldr	r1, [pc, #548]	@ (80094b0 <tcp_slowtmr+0x27c>)
 800928c:	4887      	ldr	r0, [pc, #540]	@ (80094ac <tcp_slowtmr+0x278>)
 800928e:	f005 f97d 	bl	800e58c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009294:	7d1b      	ldrb	r3, [r3, #20]
 8009296:	2b0a      	cmp	r3, #10
 8009298:	d106      	bne.n	80092a8 <tcp_slowtmr+0x74>
 800929a:	4b82      	ldr	r3, [pc, #520]	@ (80094a4 <tcp_slowtmr+0x270>)
 800929c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80092a0:	4984      	ldr	r1, [pc, #528]	@ (80094b4 <tcp_slowtmr+0x280>)
 80092a2:	4882      	ldr	r0, [pc, #520]	@ (80094ac <tcp_slowtmr+0x278>)
 80092a4:	f005 f972 	bl	800e58c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80092a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092aa:	7f9a      	ldrb	r2, [r3, #30]
 80092ac:	4b7b      	ldr	r3, [pc, #492]	@ (800949c <tcp_slowtmr+0x268>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d105      	bne.n	80092c0 <tcp_slowtmr+0x8c>
      prev = pcb;
 80092b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80092b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80092be:	e270      	b.n	80097a2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 80092c0:	4b76      	ldr	r3, [pc, #472]	@ (800949c <tcp_slowtmr+0x268>)
 80092c2:	781a      	ldrb	r2, [r3, #0]
 80092c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80092d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d6:	7d1b      	ldrb	r3, [r3, #20]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d10a      	bne.n	80092f2 <tcp_slowtmr+0xbe>
 80092dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d905      	bls.n	80092f2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80092e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092ea:	3301      	adds	r3, #1
 80092ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80092f0:	e11e      	b.n	8009530 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80092f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092f8:	2b0b      	cmp	r3, #11
 80092fa:	d905      	bls.n	8009308 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80092fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009300:	3301      	adds	r3, #1
 8009302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009306:	e113      	b.n	8009530 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800930e:	2b00      	cmp	r3, #0
 8009310:	d075      	beq.n	80093fe <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009316:	2b00      	cmp	r3, #0
 8009318:	d006      	beq.n	8009328 <tcp_slowtmr+0xf4>
 800931a:	4b62      	ldr	r3, [pc, #392]	@ (80094a4 <tcp_slowtmr+0x270>)
 800931c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009320:	4965      	ldr	r1, [pc, #404]	@ (80094b8 <tcp_slowtmr+0x284>)
 8009322:	4862      	ldr	r0, [pc, #392]	@ (80094ac <tcp_slowtmr+0x278>)
 8009324:	f005 f932 	bl	800e58c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800932c:	2b00      	cmp	r3, #0
 800932e:	d106      	bne.n	800933e <tcp_slowtmr+0x10a>
 8009330:	4b5c      	ldr	r3, [pc, #368]	@ (80094a4 <tcp_slowtmr+0x270>)
 8009332:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009336:	4961      	ldr	r1, [pc, #388]	@ (80094bc <tcp_slowtmr+0x288>)
 8009338:	485c      	ldr	r0, [pc, #368]	@ (80094ac <tcp_slowtmr+0x278>)
 800933a:	f005 f927 	bl	800e58c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800933e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009340:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009344:	2b0b      	cmp	r3, #11
 8009346:	d905      	bls.n	8009354 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800934c:	3301      	adds	r3, #1
 800934e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009352:	e0ed      	b.n	8009530 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009356:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800935a:	3b01      	subs	r3, #1
 800935c:	4a58      	ldr	r2, [pc, #352]	@ (80094c0 <tcp_slowtmr+0x28c>)
 800935e:	5cd3      	ldrb	r3, [r2, r3]
 8009360:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009364:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009368:	7c7a      	ldrb	r2, [r7, #17]
 800936a:	429a      	cmp	r2, r3
 800936c:	d907      	bls.n	800937e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800936e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009370:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009374:	3301      	adds	r3, #1
 8009376:	b2da      	uxtb	r2, r3
 8009378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800937e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009380:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009384:	7c7a      	ldrb	r2, [r7, #17]
 8009386:	429a      	cmp	r2, r3
 8009388:	f200 80d2 	bhi.w	8009530 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800938c:	2301      	movs	r3, #1
 800938e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009396:	2b00      	cmp	r3, #0
 8009398:	d108      	bne.n	80093ac <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800939a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800939c:	f004 fc24 	bl	800dbe8 <tcp_zero_window_probe>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d014      	beq.n	80093d0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80093a6:	2300      	movs	r3, #0
 80093a8:	623b      	str	r3, [r7, #32]
 80093aa:	e011      	b.n	80093d0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80093ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80093b2:	4619      	mov	r1, r3
 80093b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093b6:	f003 fae9 	bl	800c98c <tcp_split_unsent_seg>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d107      	bne.n	80093d0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80093c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093c2:	f003 fd69 	bl	800ce98 <tcp_output>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 80ac 	beq.w	8009530 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80093d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80093e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80093e6:	2b06      	cmp	r3, #6
 80093e8:	f200 80a2 	bhi.w	8009530 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80093ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80093f2:	3301      	adds	r3, #1
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80093fc:	e098      	b.n	8009530 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80093fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009400:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009404:	2b00      	cmp	r3, #0
 8009406:	db0f      	blt.n	8009428 <tcp_slowtmr+0x1f4>
 8009408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800940e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009412:	4293      	cmp	r3, r2
 8009414:	d008      	beq.n	8009428 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800941c:	b29b      	uxth	r3, r3
 800941e:	3301      	adds	r3, #1
 8009420:	b29b      	uxth	r3, r3
 8009422:	b21a      	sxth	r2, r3
 8009424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009426:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8009428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800942e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009430:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009434:	429a      	cmp	r2, r3
 8009436:	db7b      	blt.n	8009530 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009438:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800943a:	f004 f821 	bl	800d480 <tcp_rexmit_rto_prepare>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d007      	beq.n	8009454 <tcp_slowtmr+0x220>
 8009444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009448:	2b00      	cmp	r3, #0
 800944a:	d171      	bne.n	8009530 <tcp_slowtmr+0x2fc>
 800944c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d06d      	beq.n	8009530 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8009454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009456:	7d1b      	ldrb	r3, [r3, #20]
 8009458:	2b02      	cmp	r3, #2
 800945a:	d03a      	beq.n	80094d2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800945c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009462:	2b0c      	cmp	r3, #12
 8009464:	bf28      	it	cs
 8009466:	230c      	movcs	r3, #12
 8009468:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800946a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009470:	10db      	asrs	r3, r3, #3
 8009472:	b21b      	sxth	r3, r3
 8009474:	461a      	mov	r2, r3
 8009476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009478:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800947c:	4413      	add	r3, r2
 800947e:	7efa      	ldrb	r2, [r7, #27]
 8009480:	4910      	ldr	r1, [pc, #64]	@ (80094c4 <tcp_slowtmr+0x290>)
 8009482:	5c8a      	ldrb	r2, [r1, r2]
 8009484:	4093      	lsls	r3, r2
 8009486:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800948e:	4293      	cmp	r3, r2
 8009490:	dc1a      	bgt.n	80094c8 <tcp_slowtmr+0x294>
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	b21a      	sxth	r2, r3
 8009496:	e019      	b.n	80094cc <tcp_slowtmr+0x298>
 8009498:	24007c6c 	.word	0x24007c6c
 800949c:	24007c82 	.word	0x24007c82
 80094a0:	24007c78 	.word	0x24007c78
 80094a4:	0801094c 	.word	0x0801094c
 80094a8:	08010d04 	.word	0x08010d04
 80094ac:	08010a04 	.word	0x08010a04
 80094b0:	08010d30 	.word	0x08010d30
 80094b4:	08010d5c 	.word	0x08010d5c
 80094b8:	08010d8c 	.word	0x08010d8c
 80094bc:	08010dc0 	.word	0x08010dc0
 80094c0:	080124b0 	.word	0x080124b0
 80094c4:	080124a0 	.word	0x080124a0
 80094c8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80094cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80094d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d4:	2200      	movs	r2, #0
 80094d6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80094d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80094de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bf28      	it	cs
 80094e8:	4613      	movcs	r3, r2
 80094ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80094ec:	8a7b      	ldrh	r3, [r7, #18]
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80094f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80094fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	b29b      	uxth	r3, r3
 8009506:	429a      	cmp	r2, r3
 8009508:	d206      	bcs.n	8009518 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800950a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	b29a      	uxth	r2, r3
 8009512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009514:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800951c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	2200      	movs	r2, #0
 8009526:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800952a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800952c:	f004 f818 	bl	800d560 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8009530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009532:	7d1b      	ldrb	r3, [r3, #20]
 8009534:	2b06      	cmp	r3, #6
 8009536:	d111      	bne.n	800955c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953a:	8b5b      	ldrh	r3, [r3, #26]
 800953c:	f003 0310 	and.w	r3, r3, #16
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009544:	4b9c      	ldr	r3, [pc, #624]	@ (80097b8 <tcp_slowtmr+0x584>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b28      	cmp	r3, #40	@ 0x28
 8009550:	d904      	bls.n	800955c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8009552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009556:	3301      	adds	r3, #1
 8009558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800955c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800955e:	7a5b      	ldrb	r3, [r3, #9]
 8009560:	f003 0308 	and.w	r3, r3, #8
 8009564:	2b00      	cmp	r3, #0
 8009566:	d04a      	beq.n	80095fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800956c:	2b04      	cmp	r3, #4
 800956e:	d003      	beq.n	8009578 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8009570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009572:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009574:	2b07      	cmp	r3, #7
 8009576:	d142      	bne.n	80095fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009578:	4b8f      	ldr	r3, [pc, #572]	@ (80097b8 <tcp_slowtmr+0x584>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009584:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009588:	4b8c      	ldr	r3, [pc, #560]	@ (80097bc <tcp_slowtmr+0x588>)
 800958a:	440b      	add	r3, r1
 800958c:	498c      	ldr	r1, [pc, #560]	@ (80097c0 <tcp_slowtmr+0x58c>)
 800958e:	fba1 1303 	umull	r1, r3, r1, r3
 8009592:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009594:	429a      	cmp	r2, r3
 8009596:	d90a      	bls.n	80095ae <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8009598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800959c:	3301      	adds	r3, #1
 800959e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80095a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095a6:	3301      	adds	r3, #1
 80095a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80095ac:	e027      	b.n	80095fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095ae:	4b82      	ldr	r3, [pc, #520]	@ (80097b8 <tcp_slowtmr+0x584>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80095b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80095c4:	4618      	mov	r0, r3
 80095c6:	4b7f      	ldr	r3, [pc, #508]	@ (80097c4 <tcp_slowtmr+0x590>)
 80095c8:	fb00 f303 	mul.w	r3, r0, r3
 80095cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80095ce:	497c      	ldr	r1, [pc, #496]	@ (80097c0 <tcp_slowtmr+0x58c>)
 80095d0:	fba1 1303 	umull	r1, r3, r1, r3
 80095d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d911      	bls.n	80095fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80095da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095dc:	f004 fac4 	bl	800db68 <tcp_keepalive>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80095e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d107      	bne.n	80095fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80095ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80095f4:	3301      	adds	r3, #1
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80095fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009602:	2b00      	cmp	r3, #0
 8009604:	d011      	beq.n	800962a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009606:	4b6c      	ldr	r3, [pc, #432]	@ (80097b8 <tcp_slowtmr+0x584>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009612:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009616:	4619      	mov	r1, r3
 8009618:	460b      	mov	r3, r1
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	440b      	add	r3, r1
 800961e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009620:	429a      	cmp	r2, r3
 8009622:	d302      	bcc.n	800962a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8009624:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009626:	f000 fddd 	bl	800a1e4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	7d1b      	ldrb	r3, [r3, #20]
 800962e:	2b03      	cmp	r3, #3
 8009630:	d10b      	bne.n	800964a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009632:	4b61      	ldr	r3, [pc, #388]	@ (80097b8 <tcp_slowtmr+0x584>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b28      	cmp	r3, #40	@ 0x28
 800963e:	d904      	bls.n	800964a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8009640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009644:	3301      	adds	r3, #1
 8009646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800964a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964c:	7d1b      	ldrb	r3, [r3, #20]
 800964e:	2b09      	cmp	r3, #9
 8009650:	d10b      	bne.n	800966a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009652:	4b59      	ldr	r3, [pc, #356]	@ (80097b8 <tcp_slowtmr+0x584>)
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	2bf0      	cmp	r3, #240	@ 0xf0
 800965e:	d904      	bls.n	800966a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009664:	3301      	adds	r3, #1
 8009666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800966a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800966e:	2b00      	cmp	r3, #0
 8009670:	d060      	beq.n	8009734 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8009672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009678:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800967a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800967c:	f000 fbfe 	bl	8009e7c <tcp_pcb_purge>
      if (prev != NULL) {
 8009680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009682:	2b00      	cmp	r3, #0
 8009684:	d010      	beq.n	80096a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009686:	4b50      	ldr	r3, [pc, #320]	@ (80097c8 <tcp_slowtmr+0x594>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800968c:	429a      	cmp	r2, r3
 800968e:	d106      	bne.n	800969e <tcp_slowtmr+0x46a>
 8009690:	4b4e      	ldr	r3, [pc, #312]	@ (80097cc <tcp_slowtmr+0x598>)
 8009692:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009696:	494e      	ldr	r1, [pc, #312]	@ (80097d0 <tcp_slowtmr+0x59c>)
 8009698:	484e      	ldr	r0, [pc, #312]	@ (80097d4 <tcp_slowtmr+0x5a0>)
 800969a:	f004 ff77 	bl	800e58c <iprintf>
        prev->next = pcb->next;
 800969e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	60da      	str	r2, [r3, #12]
 80096a6:	e00f      	b.n	80096c8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80096a8:	4b47      	ldr	r3, [pc, #284]	@ (80097c8 <tcp_slowtmr+0x594>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d006      	beq.n	80096c0 <tcp_slowtmr+0x48c>
 80096b2:	4b46      	ldr	r3, [pc, #280]	@ (80097cc <tcp_slowtmr+0x598>)
 80096b4:	f240 5271 	movw	r2, #1393	@ 0x571
 80096b8:	4947      	ldr	r1, [pc, #284]	@ (80097d8 <tcp_slowtmr+0x5a4>)
 80096ba:	4846      	ldr	r0, [pc, #280]	@ (80097d4 <tcp_slowtmr+0x5a0>)
 80096bc:	f004 ff66 	bl	800e58c <iprintf>
        tcp_active_pcbs = pcb->next;
 80096c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	4a40      	ldr	r2, [pc, #256]	@ (80097c8 <tcp_slowtmr+0x594>)
 80096c6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80096c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d013      	beq.n	80096f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80096d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80096d8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80096da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096dc:	3304      	adds	r3, #4
 80096de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096e0:	8ad2      	ldrh	r2, [r2, #22]
 80096e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096e4:	8b09      	ldrh	r1, [r1, #24]
 80096e6:	9102      	str	r1, [sp, #8]
 80096e8:	9201      	str	r2, [sp, #4]
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	462b      	mov	r3, r5
 80096ee:	4622      	mov	r2, r4
 80096f0:	4601      	mov	r1, r0
 80096f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096f4:	f004 f984 	bl	800da00 <tcp_rst>
      err_arg = pcb->callback_arg;
 80096f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80096fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009700:	7d1b      	ldrb	r3, [r3, #20]
 8009702:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009706:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800970e:	6838      	ldr	r0, [r7, #0]
 8009710:	f7ff f9f2 	bl	8008af8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009714:	4b31      	ldr	r3, [pc, #196]	@ (80097dc <tcp_slowtmr+0x5a8>)
 8009716:	2200      	movs	r2, #0
 8009718:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d004      	beq.n	800972a <tcp_slowtmr+0x4f6>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f06f 010c 	mvn.w	r1, #12
 8009726:	68b8      	ldr	r0, [r7, #8]
 8009728:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800972a:	4b2c      	ldr	r3, [pc, #176]	@ (80097dc <tcp_slowtmr+0x5a8>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d037      	beq.n	80097a2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009732:	e592      	b.n	800925a <tcp_slowtmr+0x26>
      prev = pcb;
 8009734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009736:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800973e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009740:	7f1b      	ldrb	r3, [r3, #28]
 8009742:	3301      	adds	r3, #1
 8009744:	b2da      	uxtb	r2, r3
 8009746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009748:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800974a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974c:	7f1a      	ldrb	r2, [r3, #28]
 800974e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009750:	7f5b      	ldrb	r3, [r3, #29]
 8009752:	429a      	cmp	r2, r3
 8009754:	d325      	bcc.n	80097a2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009758:	2200      	movs	r2, #0
 800975a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800975c:	4b1f      	ldr	r3, [pc, #124]	@ (80097dc <tcp_slowtmr+0x5a8>)
 800975e:	2200      	movs	r2, #0
 8009760:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00b      	beq.n	8009784 <tcp_slowtmr+0x550>
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009774:	6912      	ldr	r2, [r2, #16]
 8009776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009778:	4610      	mov	r0, r2
 800977a:	4798      	blx	r3
 800977c:	4603      	mov	r3, r0
 800977e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009782:	e002      	b.n	800978a <tcp_slowtmr+0x556>
 8009784:	2300      	movs	r3, #0
 8009786:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800978a:	4b14      	ldr	r3, [pc, #80]	@ (80097dc <tcp_slowtmr+0x5a8>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f47f ad62 	bne.w	8009258 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009794:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009798:	2b00      	cmp	r3, #0
 800979a:	d102      	bne.n	80097a2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800979c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800979e:	f003 fb7b 	bl	800ce98 <tcp_output>
  while (pcb != NULL) {
 80097a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f47f ad5e 	bne.w	8009266 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80097ae:	4b0c      	ldr	r3, [pc, #48]	@ (80097e0 <tcp_slowtmr+0x5ac>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80097b4:	e069      	b.n	800988a <tcp_slowtmr+0x656>
 80097b6:	bf00      	nop
 80097b8:	24007c6c 	.word	0x24007c6c
 80097bc:	000a4cb8 	.word	0x000a4cb8
 80097c0:	10624dd3 	.word	0x10624dd3
 80097c4:	000124f8 	.word	0x000124f8
 80097c8:	24007c78 	.word	0x24007c78
 80097cc:	0801094c 	.word	0x0801094c
 80097d0:	08010df8 	.word	0x08010df8
 80097d4:	08010a04 	.word	0x08010a04
 80097d8:	08010e24 	.word	0x08010e24
 80097dc:	24007c80 	.word	0x24007c80
 80097e0:	24007c7c 	.word	0x24007c7c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80097e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e6:	7d1b      	ldrb	r3, [r3, #20]
 80097e8:	2b0a      	cmp	r3, #10
 80097ea:	d006      	beq.n	80097fa <tcp_slowtmr+0x5c6>
 80097ec:	4b2b      	ldr	r3, [pc, #172]	@ (800989c <tcp_slowtmr+0x668>)
 80097ee:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80097f2:	492b      	ldr	r1, [pc, #172]	@ (80098a0 <tcp_slowtmr+0x66c>)
 80097f4:	482b      	ldr	r0, [pc, #172]	@ (80098a4 <tcp_slowtmr+0x670>)
 80097f6:	f004 fec9 	bl	800e58c <iprintf>
    pcb_remove = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009800:	4b29      	ldr	r3, [pc, #164]	@ (80098a8 <tcp_slowtmr+0x674>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2bf0      	cmp	r3, #240	@ 0xf0
 800980c:	d904      	bls.n	8009818 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800980e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009812:	3301      	adds	r3, #1
 8009814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800981c:	2b00      	cmp	r3, #0
 800981e:	d02f      	beq.n	8009880 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009820:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009822:	f000 fb2b 	bl	8009e7c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009828:	2b00      	cmp	r3, #0
 800982a:	d010      	beq.n	800984e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800982c:	4b1f      	ldr	r3, [pc, #124]	@ (80098ac <tcp_slowtmr+0x678>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009832:	429a      	cmp	r2, r3
 8009834:	d106      	bne.n	8009844 <tcp_slowtmr+0x610>
 8009836:	4b19      	ldr	r3, [pc, #100]	@ (800989c <tcp_slowtmr+0x668>)
 8009838:	f240 52af 	movw	r2, #1455	@ 0x5af
 800983c:	491c      	ldr	r1, [pc, #112]	@ (80098b0 <tcp_slowtmr+0x67c>)
 800983e:	4819      	ldr	r0, [pc, #100]	@ (80098a4 <tcp_slowtmr+0x670>)
 8009840:	f004 fea4 	bl	800e58c <iprintf>
        prev->next = pcb->next;
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984a:	60da      	str	r2, [r3, #12]
 800984c:	e00f      	b.n	800986e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800984e:	4b17      	ldr	r3, [pc, #92]	@ (80098ac <tcp_slowtmr+0x678>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009854:	429a      	cmp	r2, r3
 8009856:	d006      	beq.n	8009866 <tcp_slowtmr+0x632>
 8009858:	4b10      	ldr	r3, [pc, #64]	@ (800989c <tcp_slowtmr+0x668>)
 800985a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800985e:	4915      	ldr	r1, [pc, #84]	@ (80098b4 <tcp_slowtmr+0x680>)
 8009860:	4810      	ldr	r0, [pc, #64]	@ (80098a4 <tcp_slowtmr+0x670>)
 8009862:	f004 fe93 	bl	800e58c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	4a10      	ldr	r2, [pc, #64]	@ (80098ac <tcp_slowtmr+0x678>)
 800986c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800986e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009870:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009878:	69f8      	ldr	r0, [r7, #28]
 800987a:	f7ff f93d 	bl	8008af8 <tcp_free>
 800987e:	e004      	b.n	800988a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8009880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009882:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800988a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1a9      	bne.n	80097e4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	3730      	adds	r7, #48	@ 0x30
 8009896:	46bd      	mov	sp, r7
 8009898:	bdb0      	pop	{r4, r5, r7, pc}
 800989a:	bf00      	nop
 800989c:	0801094c 	.word	0x0801094c
 80098a0:	08010e50 	.word	0x08010e50
 80098a4:	08010a04 	.word	0x08010a04
 80098a8:	24007c6c 	.word	0x24007c6c
 80098ac:	24007c7c 	.word	0x24007c7c
 80098b0:	08010e80 	.word	0x08010e80
 80098b4:	08010ea8 	.word	0x08010ea8

080098b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80098be:	4b2d      	ldr	r3, [pc, #180]	@ (8009974 <tcp_fasttmr+0xbc>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	3301      	adds	r3, #1
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	4b2b      	ldr	r3, [pc, #172]	@ (8009974 <tcp_fasttmr+0xbc>)
 80098c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80098ca:	4b2b      	ldr	r3, [pc, #172]	@ (8009978 <tcp_fasttmr+0xc0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80098d0:	e048      	b.n	8009964 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	7f9a      	ldrb	r2, [r3, #30]
 80098d6:	4b27      	ldr	r3, [pc, #156]	@ (8009974 <tcp_fasttmr+0xbc>)
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d03f      	beq.n	800995e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80098de:	4b25      	ldr	r3, [pc, #148]	@ (8009974 <tcp_fasttmr+0xbc>)
 80098e0:	781a      	ldrb	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	8b5b      	ldrh	r3, [r3, #26]
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d010      	beq.n	8009914 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	8b5b      	ldrh	r3, [r3, #26]
 80098f6:	f043 0302 	orr.w	r3, r3, #2
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f003 fac9 	bl	800ce98 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	8b5b      	ldrh	r3, [r3, #26]
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	b29a      	uxth	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	8b5b      	ldrh	r3, [r3, #26]
 8009918:	f003 0308 	and.w	r3, r3, #8
 800991c:	2b00      	cmp	r3, #0
 800991e:	d009      	beq.n	8009934 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	8b5b      	ldrh	r3, [r3, #26]
 8009924:	f023 0308 	bic.w	r3, r3, #8
 8009928:	b29a      	uxth	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7ff fa76 	bl	8008e20 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00a      	beq.n	8009958 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009942:	4b0e      	ldr	r3, [pc, #56]	@ (800997c <tcp_fasttmr+0xc4>)
 8009944:	2200      	movs	r2, #0
 8009946:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f819 	bl	8009980 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800994e:	4b0b      	ldr	r3, [pc, #44]	@ (800997c <tcp_fasttmr+0xc4>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d000      	beq.n	8009958 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009956:	e7b8      	b.n	80098ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	607b      	str	r3, [r7, #4]
 800995c:	e002      	b.n	8009964 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1b3      	bne.n	80098d2 <tcp_fasttmr+0x1a>
    }
  }
}
 800996a:	bf00      	nop
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	24007c82 	.word	0x24007c82
 8009978:	24007c78 	.word	0x24007c78
 800997c:	24007c80 	.word	0x24007c80

08009980 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009980:	b590      	push	{r4, r7, lr}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d109      	bne.n	80099a2 <tcp_process_refused_data+0x22>
 800998e:	4b37      	ldr	r3, [pc, #220]	@ (8009a6c <tcp_process_refused_data+0xec>)
 8009990:	f240 6209 	movw	r2, #1545	@ 0x609
 8009994:	4936      	ldr	r1, [pc, #216]	@ (8009a70 <tcp_process_refused_data+0xf0>)
 8009996:	4837      	ldr	r0, [pc, #220]	@ (8009a74 <tcp_process_refused_data+0xf4>)
 8009998:	f004 fdf8 	bl	800e58c <iprintf>
 800999c:	f06f 030f 	mvn.w	r3, #15
 80099a0:	e060      	b.n	8009a64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099a6:	7b5b      	ldrb	r3, [r3, #13]
 80099a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <tcp_process_refused_data+0x58>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6918      	ldr	r0, [r3, #16]
 80099ca:	2300      	movs	r3, #0
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	47a0      	blx	r4
 80099d2:	4603      	mov	r3, r0
 80099d4:	73fb      	strb	r3, [r7, #15]
 80099d6:	e007      	b.n	80099e8 <tcp_process_refused_data+0x68>
 80099d8:	2300      	movs	r3, #0
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	2000      	movs	r0, #0
 80099e0:	f000 f8a4 	bl	8009b2c <tcp_recv_null>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80099e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d12a      	bne.n	8009a46 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	f003 0320 	and.w	r3, r3, #32
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d033      	beq.n	8009a62 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099fe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009a02:	d005      	beq.n	8009a10 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a08:	3301      	adds	r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00b      	beq.n	8009a32 <tcp_process_refused_data+0xb2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6918      	ldr	r0, [r3, #16]
 8009a24:	2300      	movs	r3, #0
 8009a26:	2200      	movs	r2, #0
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	47a0      	blx	r4
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73fb      	strb	r3, [r7, #15]
 8009a30:	e001      	b.n	8009a36 <tcp_process_refused_data+0xb6>
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a3a:	f113 0f0d 	cmn.w	r3, #13
 8009a3e:	d110      	bne.n	8009a62 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009a40:	f06f 030c 	mvn.w	r3, #12
 8009a44:	e00e      	b.n	8009a64 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a4a:	f113 0f0d 	cmn.w	r3, #13
 8009a4e:	d102      	bne.n	8009a56 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009a50:	f06f 030c 	mvn.w	r3, #12
 8009a54:	e006      	b.n	8009a64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009a5c:	f06f 0304 	mvn.w	r3, #4
 8009a60:	e000      	b.n	8009a64 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd90      	pop	{r4, r7, pc}
 8009a6c:	0801094c 	.word	0x0801094c
 8009a70:	08010ed0 	.word	0x08010ed0
 8009a74:	08010a04 	.word	0x08010a04

08009a78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009a80:	e007      	b.n	8009a92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f80a 	bl	8009aa2 <tcp_seg_free>
    seg = next;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1f4      	bne.n	8009a82 <tcp_segs_free+0xa>
  }
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00c      	beq.n	8009aca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d004      	beq.n	8009ac2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fe fd7b 	bl	80085b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	2003      	movs	r0, #3
 8009ac6:	f7fd ff01 	bl	80078cc <memp_free>
  }
}
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
	...

08009ad4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <tcp_seg_copy+0x1c>
 8009ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8009b20 <tcp_seg_copy+0x4c>)
 8009ae4:	f240 6282 	movw	r2, #1666	@ 0x682
 8009ae8:	490e      	ldr	r1, [pc, #56]	@ (8009b24 <tcp_seg_copy+0x50>)
 8009aea:	480f      	ldr	r0, [pc, #60]	@ (8009b28 <tcp_seg_copy+0x54>)
 8009aec:	f004 fd4e 	bl	800e58c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009af0:	2003      	movs	r0, #3
 8009af2:	f7fd fe7b 	bl	80077ec <memp_malloc>
 8009af6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <tcp_seg_copy+0x2e>
    return NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e00a      	b.n	8009b18 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009b02:	2210      	movs	r2, #16
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f004 fe1b 	bl	800e742 <memcpy>
  pbuf_ref(cseg->p);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fe fdf1 	bl	80086f8 <pbuf_ref>
  return cseg;
 8009b16:	68fb      	ldr	r3, [r7, #12]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	0801094c 	.word	0x0801094c
 8009b24:	08010f14 	.word	0x08010f14
 8009b28:	08010a04 	.word	0x08010a04

08009b2c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d109      	bne.n	8009b54 <tcp_recv_null+0x28>
 8009b40:	4b12      	ldr	r3, [pc, #72]	@ (8009b8c <tcp_recv_null+0x60>)
 8009b42:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009b46:	4912      	ldr	r1, [pc, #72]	@ (8009b90 <tcp_recv_null+0x64>)
 8009b48:	4812      	ldr	r0, [pc, #72]	@ (8009b94 <tcp_recv_null+0x68>)
 8009b4a:	f004 fd1f 	bl	800e58c <iprintf>
 8009b4e:	f06f 030f 	mvn.w	r3, #15
 8009b52:	e016      	b.n	8009b82 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d009      	beq.n	8009b6e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	891b      	ldrh	r3, [r3, #8]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	68b8      	ldr	r0, [r7, #8]
 8009b62:	f7ff fb17 	bl	8009194 <tcp_recved>
    pbuf_free(p);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7fe fd26 	bl	80085b8 <pbuf_free>
 8009b6c:	e008      	b.n	8009b80 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d104      	bne.n	8009b80 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009b76:	68b8      	ldr	r0, [r7, #8]
 8009b78:	f7ff f9bc 	bl	8008ef4 <tcp_close>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	e000      	b.n	8009b82 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	0801094c 	.word	0x0801094c
 8009b90:	08010f30 	.word	0x08010f30
 8009b94:	08010a04 	.word	0x08010a04

08009b98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	db01      	blt.n	8009bae <tcp_kill_prio+0x16>
 8009baa:	79fb      	ldrb	r3, [r7, #7]
 8009bac:	e000      	b.n	8009bb0 <tcp_kill_prio+0x18>
 8009bae:	237f      	movs	r3, #127	@ 0x7f
 8009bb0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009bb2:	7afb      	ldrb	r3, [r7, #11]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d034      	beq.n	8009c22 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009bb8:	7afb      	ldrb	r3, [r7, #11]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bc6:	4b19      	ldr	r3, [pc, #100]	@ (8009c2c <tcp_kill_prio+0x94>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	e01f      	b.n	8009c0e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	7d5b      	ldrb	r3, [r3, #21]
 8009bd2:	7afa      	ldrb	r2, [r7, #11]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d80c      	bhi.n	8009bf2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009bdc:	7afa      	ldrb	r2, [r7, #11]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d112      	bne.n	8009c08 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009be2:	4b13      	ldr	r3, [pc, #76]	@ (8009c30 <tcp_kill_prio+0x98>)
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d80a      	bhi.n	8009c08 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c30 <tcp_kill_prio+0x98>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	7d5b      	ldrb	r3, [r3, #21]
 8009c06:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	617b      	str	r3, [r7, #20]
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1dc      	bne.n	8009bce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d004      	beq.n	8009c24 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009c1a:	6938      	ldr	r0, [r7, #16]
 8009c1c:	f7ff fa54 	bl	80090c8 <tcp_abort>
 8009c20:	e000      	b.n	8009c24 <tcp_kill_prio+0x8c>
    return;
 8009c22:	bf00      	nop
  }
}
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	24007c78 	.word	0x24007c78
 8009c30:	24007c6c 	.word	0x24007c6c

08009c34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d009      	beq.n	8009c58 <tcp_kill_state+0x24>
 8009c44:	79fb      	ldrb	r3, [r7, #7]
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	d006      	beq.n	8009c58 <tcp_kill_state+0x24>
 8009c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8009cb4 <tcp_kill_state+0x80>)
 8009c4c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009c50:	4919      	ldr	r1, [pc, #100]	@ (8009cb8 <tcp_kill_state+0x84>)
 8009c52:	481a      	ldr	r0, [pc, #104]	@ (8009cbc <tcp_kill_state+0x88>)
 8009c54:	f004 fc9a 	bl	800e58c <iprintf>

  inactivity = 0;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c60:	4b17      	ldr	r3, [pc, #92]	@ (8009cc0 <tcp_kill_state+0x8c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	617b      	str	r3, [r7, #20]
 8009c66:	e017      	b.n	8009c98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	7d1b      	ldrb	r3, [r3, #20]
 8009c6c:	79fa      	ldrb	r2, [r7, #7]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d10f      	bne.n	8009c92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c72:	4b14      	ldr	r3, [pc, #80]	@ (8009cc4 <tcp_kill_state+0x90>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d807      	bhi.n	8009c92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009c82:	4b10      	ldr	r3, [pc, #64]	@ (8009cc4 <tcp_kill_state+0x90>)
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1e4      	bne.n	8009c68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	6938      	ldr	r0, [r7, #16]
 8009ca8:	f7ff f950 	bl	8008f4c <tcp_abandon>
  }
}
 8009cac:	bf00      	nop
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	0801094c 	.word	0x0801094c
 8009cb8:	08010f4c 	.word	0x08010f4c
 8009cbc:	08010a04 	.word	0x08010a04
 8009cc0:	24007c78 	.word	0x24007c78
 8009cc4:	24007c6c 	.word	0x24007c6c

08009cc8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cd6:	4b12      	ldr	r3, [pc, #72]	@ (8009d20 <tcp_kill_timewait+0x58>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	e012      	b.n	8009d04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009cde:	4b11      	ldr	r3, [pc, #68]	@ (8009d24 <tcp_kill_timewait+0x5c>)
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d807      	bhi.n	8009cfe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009cee:	4b0d      	ldr	r3, [pc, #52]	@ (8009d24 <tcp_kill_timewait+0x5c>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e9      	bne.n	8009cde <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d10:	68b8      	ldr	r0, [r7, #8]
 8009d12:	f7ff f9d9 	bl	80090c8 <tcp_abort>
  }
}
 8009d16:	bf00      	nop
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	24007c7c 	.word	0x24007c7c
 8009d24:	24007c6c 	.word	0x24007c6c

08009d28 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009d2e:	4b10      	ldr	r3, [pc, #64]	@ (8009d70 <tcp_handle_closepend+0x48>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009d34:	e014      	b.n	8009d60 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	8b5b      	ldrh	r3, [r3, #26]
 8009d40:	f003 0308 	and.w	r3, r3, #8
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d009      	beq.n	8009d5c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	8b5b      	ldrh	r3, [r3, #26]
 8009d4c:	f023 0308 	bic.w	r3, r3, #8
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff f862 	bl	8008e20 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1e7      	bne.n	8009d36 <tcp_handle_closepend+0xe>
  }
}
 8009d66:	bf00      	nop
 8009d68:	bf00      	nop
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	24007c78 	.word	0x24007c78

08009d74 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d7e:	2001      	movs	r0, #1
 8009d80:	f7fd fd34 	bl	80077ec <memp_malloc>
 8009d84:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d126      	bne.n	8009dda <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009d8c:	f7ff ffcc 	bl	8009d28 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009d90:	f7ff ff9a 	bl	8009cc8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d94:	2001      	movs	r0, #1
 8009d96:	f7fd fd29 	bl	80077ec <memp_malloc>
 8009d9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d11b      	bne.n	8009dda <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009da2:	2009      	movs	r0, #9
 8009da4:	f7ff ff46 	bl	8009c34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009da8:	2001      	movs	r0, #1
 8009daa:	f7fd fd1f 	bl	80077ec <memp_malloc>
 8009dae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d111      	bne.n	8009dda <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009db6:	2008      	movs	r0, #8
 8009db8:	f7ff ff3c 	bl	8009c34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	f7fd fd15 	bl	80077ec <memp_malloc>
 8009dc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d107      	bne.n	8009dda <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009dca:	79fb      	ldrb	r3, [r7, #7]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff fee3 	bl	8009b98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	f7fd fd0a 	bl	80077ec <memp_malloc>
 8009dd8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d03f      	beq.n	8009e60 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009de0:	229c      	movs	r2, #156	@ 0x9c
 8009de2:	2100      	movs	r1, #0
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f004 fc36 	bl	800e656 <memset>
    pcb->prio = prio;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	79fa      	ldrb	r2, [r7, #7]
 8009dee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009df6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	22ff      	movs	r2, #255	@ 0xff
 8009e0e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009e16:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2206      	movs	r2, #6
 8009e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2206      	movs	r2, #6
 8009e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e2c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009e36:	4b0d      	ldr	r3, [pc, #52]	@ (8009e6c <tcp_alloc+0xf8>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e70 <tcp_alloc+0xfc>)
 8009e40:	781a      	ldrb	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009e4c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4a08      	ldr	r2, [pc, #32]	@ (8009e74 <tcp_alloc+0x100>)
 8009e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4a07      	ldr	r2, [pc, #28]	@ (8009e78 <tcp_alloc+0x104>)
 8009e5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009e60:	68fb      	ldr	r3, [r7, #12]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	24007c6c 	.word	0x24007c6c
 8009e70:	24007c82 	.word	0x24007c82
 8009e74:	08009b2d 	.word	0x08009b2d
 8009e78:	006ddd00 	.word	0x006ddd00

08009e7c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d107      	bne.n	8009e9a <tcp_pcb_purge+0x1e>
 8009e8a:	4b21      	ldr	r3, [pc, #132]	@ (8009f10 <tcp_pcb_purge+0x94>)
 8009e8c:	f640 0251 	movw	r2, #2129	@ 0x851
 8009e90:	4920      	ldr	r1, [pc, #128]	@ (8009f14 <tcp_pcb_purge+0x98>)
 8009e92:	4821      	ldr	r0, [pc, #132]	@ (8009f18 <tcp_pcb_purge+0x9c>)
 8009e94:	f004 fb7a 	bl	800e58c <iprintf>
 8009e98:	e037      	b.n	8009f0a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	7d1b      	ldrb	r3, [r3, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d033      	beq.n	8009f0a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009ea6:	2b0a      	cmp	r3, #10
 8009ea8:	d02f      	beq.n	8009f0a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d02b      	beq.n	8009f0a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d007      	beq.n	8009eca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fe fb7a 	bl	80085b8 <pbuf_free>
      pcb->refused_data = NULL;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f986 	bl	800a1e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ede:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff fdc7 	bl	8009a78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7ff fdc2 	bl	8009a78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	0801094c 	.word	0x0801094c
 8009f14:	0801100c 	.word	0x0801100c
 8009f18:	08010a04 	.word	0x08010a04

08009f1c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d106      	bne.n	8009f3a <tcp_pcb_remove+0x1e>
 8009f2c:	4b3e      	ldr	r3, [pc, #248]	@ (800a028 <tcp_pcb_remove+0x10c>)
 8009f2e:	f640 0283 	movw	r2, #2179	@ 0x883
 8009f32:	493e      	ldr	r1, [pc, #248]	@ (800a02c <tcp_pcb_remove+0x110>)
 8009f34:	483e      	ldr	r0, [pc, #248]	@ (800a030 <tcp_pcb_remove+0x114>)
 8009f36:	f004 fb29 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <tcp_pcb_remove+0x32>
 8009f40:	4b39      	ldr	r3, [pc, #228]	@ (800a028 <tcp_pcb_remove+0x10c>)
 8009f42:	f640 0284 	movw	r2, #2180	@ 0x884
 8009f46:	493b      	ldr	r1, [pc, #236]	@ (800a034 <tcp_pcb_remove+0x118>)
 8009f48:	4839      	ldr	r0, [pc, #228]	@ (800a030 <tcp_pcb_remove+0x114>)
 8009f4a:	f004 fb1f 	bl	800e58c <iprintf>

  TCP_RMV(pcblist, pcb);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d105      	bne.n	8009f64 <tcp_pcb_remove+0x48>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	e013      	b.n	8009f8c <tcp_pcb_remove+0x70>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	60fb      	str	r3, [r7, #12]
 8009f6a:	e00c      	b.n	8009f86 <tcp_pcb_remove+0x6a>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d104      	bne.n	8009f80 <tcp_pcb_remove+0x64>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	68da      	ldr	r2, [r3, #12]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	60da      	str	r2, [r3, #12]
 8009f7e:	e005      	b.n	8009f8c <tcp_pcb_remove+0x70>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	60fb      	str	r3, [r7, #12]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1ef      	bne.n	8009f6c <tcp_pcb_remove+0x50>
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009f92:	6838      	ldr	r0, [r7, #0]
 8009f94:	f7ff ff72 	bl	8009e7c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	7d1b      	ldrb	r3, [r3, #20]
 8009f9c:	2b0a      	cmp	r3, #10
 8009f9e:	d013      	beq.n	8009fc8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d00f      	beq.n	8009fc8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	8b5b      	ldrh	r3, [r3, #26]
 8009fac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d009      	beq.n	8009fc8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	8b5b      	ldrh	r3, [r3, #26]
 8009fb8:	f043 0302 	orr.w	r3, r3, #2
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009fc2:	6838      	ldr	r0, [r7, #0]
 8009fc4:	f002 ff68 	bl	800ce98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	7d1b      	ldrb	r3, [r3, #20]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d020      	beq.n	800a012 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d006      	beq.n	8009fe6 <tcp_pcb_remove+0xca>
 8009fd8:	4b13      	ldr	r3, [pc, #76]	@ (800a028 <tcp_pcb_remove+0x10c>)
 8009fda:	f640 0293 	movw	r2, #2195	@ 0x893
 8009fde:	4916      	ldr	r1, [pc, #88]	@ (800a038 <tcp_pcb_remove+0x11c>)
 8009fe0:	4813      	ldr	r0, [pc, #76]	@ (800a030 <tcp_pcb_remove+0x114>)
 8009fe2:	f004 fad3 	bl	800e58c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d006      	beq.n	8009ffc <tcp_pcb_remove+0xe0>
 8009fee:	4b0e      	ldr	r3, [pc, #56]	@ (800a028 <tcp_pcb_remove+0x10c>)
 8009ff0:	f640 0294 	movw	r2, #2196	@ 0x894
 8009ff4:	4911      	ldr	r1, [pc, #68]	@ (800a03c <tcp_pcb_remove+0x120>)
 8009ff6:	480e      	ldr	r0, [pc, #56]	@ (800a030 <tcp_pcb_remove+0x114>)
 8009ff8:	f004 fac8 	bl	800e58c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a000:	2b00      	cmp	r3, #0
 800a002:	d006      	beq.n	800a012 <tcp_pcb_remove+0xf6>
 800a004:	4b08      	ldr	r3, [pc, #32]	@ (800a028 <tcp_pcb_remove+0x10c>)
 800a006:	f640 0296 	movw	r2, #2198	@ 0x896
 800a00a:	490d      	ldr	r1, [pc, #52]	@ (800a040 <tcp_pcb_remove+0x124>)
 800a00c:	4808      	ldr	r0, [pc, #32]	@ (800a030 <tcp_pcb_remove+0x114>)
 800a00e:	f004 fabd 	bl	800e58c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2200      	movs	r2, #0
 800a016:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	0801094c 	.word	0x0801094c
 800a02c:	08011028 	.word	0x08011028
 800a030:	08010a04 	.word	0x08010a04
 800a034:	08011044 	.word	0x08011044
 800a038:	08011064 	.word	0x08011064
 800a03c:	0801107c 	.word	0x0801107c
 800a040:	08011098 	.word	0x08011098

0800a044 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <tcp_next_iss+0x1c>
 800a052:	4b0a      	ldr	r3, [pc, #40]	@ (800a07c <tcp_next_iss+0x38>)
 800a054:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a058:	4909      	ldr	r1, [pc, #36]	@ (800a080 <tcp_next_iss+0x3c>)
 800a05a:	480a      	ldr	r0, [pc, #40]	@ (800a084 <tcp_next_iss+0x40>)
 800a05c:	f004 fa96 	bl	800e58c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a060:	4b09      	ldr	r3, [pc, #36]	@ (800a088 <tcp_next_iss+0x44>)
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	4b09      	ldr	r3, [pc, #36]	@ (800a08c <tcp_next_iss+0x48>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4413      	add	r3, r2
 800a06a:	4a07      	ldr	r2, [pc, #28]	@ (800a088 <tcp_next_iss+0x44>)
 800a06c:	6013      	str	r3, [r2, #0]
  return iss;
 800a06e:	4b06      	ldr	r3, [pc, #24]	@ (800a088 <tcp_next_iss+0x44>)
 800a070:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	0801094c 	.word	0x0801094c
 800a080:	080110b0 	.word	0x080110b0
 800a084:	08010a04 	.word	0x08010a04
 800a088:	24000028 	.word	0x24000028
 800a08c:	24007c6c 	.word	0x24007c6c

0800a090 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d106      	bne.n	800a0b2 <tcp_eff_send_mss_netif+0x22>
 800a0a4:	4b14      	ldr	r3, [pc, #80]	@ (800a0f8 <tcp_eff_send_mss_netif+0x68>)
 800a0a6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a0aa:	4914      	ldr	r1, [pc, #80]	@ (800a0fc <tcp_eff_send_mss_netif+0x6c>)
 800a0ac:	4814      	ldr	r0, [pc, #80]	@ (800a100 <tcp_eff_send_mss_netif+0x70>)
 800a0ae:	f004 fa6d 	bl	800e58c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a0b8:	89fb      	ldrh	r3, [r7, #14]
 800a0ba:	e019      	b.n	800a0f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a0c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a0c2:	8afb      	ldrh	r3, [r7, #22]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d012      	beq.n	800a0ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a0c8:	2328      	movs	r3, #40	@ 0x28
 800a0ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a0cc:	8afa      	ldrh	r2, [r7, #22]
 800a0ce:	8abb      	ldrh	r3, [r7, #20]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d904      	bls.n	800a0de <tcp_eff_send_mss_netif+0x4e>
 800a0d4:	8afa      	ldrh	r2, [r7, #22]
 800a0d6:	8abb      	ldrh	r3, [r7, #20]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	e000      	b.n	800a0e0 <tcp_eff_send_mss_netif+0x50>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a0e2:	8a7a      	ldrh	r2, [r7, #18]
 800a0e4:	89fb      	ldrh	r3, [r7, #14]
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	bf28      	it	cs
 800a0ea:	4613      	movcs	r3, r2
 800a0ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a0ee:	89fb      	ldrh	r3, [r7, #14]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	0801094c 	.word	0x0801094c
 800a0fc:	080110cc 	.word	0x080110cc
 800a100:	08010a04 	.word	0x08010a04

0800a104 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d119      	bne.n	800a14c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a118:	4b10      	ldr	r3, [pc, #64]	@ (800a15c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a11a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a11e:	4910      	ldr	r1, [pc, #64]	@ (800a160 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a120:	4810      	ldr	r0, [pc, #64]	@ (800a164 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a122:	f004 fa33 	bl	800e58c <iprintf>

  while (pcb != NULL) {
 800a126:	e011      	b.n	800a14c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d108      	bne.n	800a146 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f7fe ffc4 	bl	80090c8 <tcp_abort>
      pcb = next;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	e002      	b.n	800a14c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1ea      	bne.n	800a128 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a152:	bf00      	nop
 800a154:	bf00      	nop
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	0801094c 	.word	0x0801094c
 800a160:	080110f4 	.word	0x080110f4
 800a164:	08010a04 	.word	0x08010a04

0800a168 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d02a      	beq.n	800a1ce <tcp_netif_ip_addr_changed+0x66>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d026      	beq.n	800a1ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a180:	4b15      	ldr	r3, [pc, #84]	@ (800a1d8 <tcp_netif_ip_addr_changed+0x70>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4619      	mov	r1, r3
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff ffbc 	bl	800a104 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a18c:	4b13      	ldr	r3, [pc, #76]	@ (800a1dc <tcp_netif_ip_addr_changed+0x74>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7ff ffb6 	bl	800a104 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d017      	beq.n	800a1ce <tcp_netif_ip_addr_changed+0x66>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d013      	beq.n	800a1ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a1a6:	4b0e      	ldr	r3, [pc, #56]	@ (800a1e0 <tcp_netif_ip_addr_changed+0x78>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	e00c      	b.n	800a1c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d103      	bne.n	800a1c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1ef      	bne.n	800a1ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a1ce:	bf00      	nop
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	24007c78 	.word	0x24007c78
 800a1dc:	24007c70 	.word	0x24007c70
 800a1e0:	24007c74 	.word	0x24007c74

0800a1e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d007      	beq.n	800a204 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff fc3d 	bl	8009a78 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a20c:	b590      	push	{r4, r7, lr}
 800a20e:	b08d      	sub	sp, #52	@ 0x34
 800a210:	af04      	add	r7, sp, #16
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d105      	bne.n	800a228 <tcp_input+0x1c>
 800a21c:	4b9b      	ldr	r3, [pc, #620]	@ (800a48c <tcp_input+0x280>)
 800a21e:	2283      	movs	r2, #131	@ 0x83
 800a220:	499b      	ldr	r1, [pc, #620]	@ (800a490 <tcp_input+0x284>)
 800a222:	489c      	ldr	r0, [pc, #624]	@ (800a494 <tcp_input+0x288>)
 800a224:	f004 f9b2 	bl	800e58c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	4a9a      	ldr	r2, [pc, #616]	@ (800a498 <tcp_input+0x28c>)
 800a22e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	895b      	ldrh	r3, [r3, #10]
 800a234:	2b13      	cmp	r3, #19
 800a236:	f240 83d1 	bls.w	800a9dc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a23a:	4b98      	ldr	r3, [pc, #608]	@ (800a49c <tcp_input+0x290>)
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	4a97      	ldr	r2, [pc, #604]	@ (800a49c <tcp_input+0x290>)
 800a240:	6812      	ldr	r2, [r2, #0]
 800a242:	4611      	mov	r1, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f7fc f821 	bl	800628c <ip4_addr_isbroadcast_u32>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f040 83c7 	bne.w	800a9e0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a252:	4b92      	ldr	r3, [pc, #584]	@ (800a49c <tcp_input+0x290>)
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a25a:	2be0      	cmp	r3, #224	@ 0xe0
 800a25c:	f000 83c0 	beq.w	800a9e0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a260:	4b8d      	ldr	r3, [pc, #564]	@ (800a498 <tcp_input+0x28c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	899b      	ldrh	r3, [r3, #12]
 800a266:	b29b      	uxth	r3, r3
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fa faa3 	bl	80047b4 <lwip_htons>
 800a26e:	4603      	mov	r3, r0
 800a270:	0b1b      	lsrs	r3, r3, #12
 800a272:	b29b      	uxth	r3, r3
 800a274:	b2db      	uxtb	r3, r3
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a27a:	7cbb      	ldrb	r3, [r7, #18]
 800a27c:	2b13      	cmp	r3, #19
 800a27e:	f240 83b1 	bls.w	800a9e4 <tcp_input+0x7d8>
 800a282:	7cbb      	ldrb	r3, [r7, #18]
 800a284:	b29a      	uxth	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	891b      	ldrh	r3, [r3, #8]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	f200 83aa 	bhi.w	800a9e4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a290:	7cbb      	ldrb	r3, [r7, #18]
 800a292:	b29b      	uxth	r3, r3
 800a294:	3b14      	subs	r3, #20
 800a296:	b29a      	uxth	r2, r3
 800a298:	4b81      	ldr	r3, [pc, #516]	@ (800a4a0 <tcp_input+0x294>)
 800a29a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a29c:	4b81      	ldr	r3, [pc, #516]	@ (800a4a4 <tcp_input+0x298>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	895a      	ldrh	r2, [r3, #10]
 800a2a6:	7cbb      	ldrb	r3, [r7, #18]
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d309      	bcc.n	800a2c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a2ae:	4b7c      	ldr	r3, [pc, #496]	@ (800a4a0 <tcp_input+0x294>)
 800a2b0:	881a      	ldrh	r2, [r3, #0]
 800a2b2:	4b7d      	ldr	r3, [pc, #500]	@ (800a4a8 <tcp_input+0x29c>)
 800a2b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a2b6:	7cbb      	ldrb	r3, [r7, #18]
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7fe f8f6 	bl	80084ac <pbuf_remove_header>
 800a2c0:	e04e      	b.n	800a360 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d105      	bne.n	800a2d6 <tcp_input+0xca>
 800a2ca:	4b70      	ldr	r3, [pc, #448]	@ (800a48c <tcp_input+0x280>)
 800a2cc:	22c2      	movs	r2, #194	@ 0xc2
 800a2ce:	4977      	ldr	r1, [pc, #476]	@ (800a4ac <tcp_input+0x2a0>)
 800a2d0:	4870      	ldr	r0, [pc, #448]	@ (800a494 <tcp_input+0x288>)
 800a2d2:	f004 f95b 	bl	800e58c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a2d6:	2114      	movs	r1, #20
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f7fe f8e7 	bl	80084ac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	895a      	ldrh	r2, [r3, #10]
 800a2e2:	4b71      	ldr	r3, [pc, #452]	@ (800a4a8 <tcp_input+0x29c>)
 800a2e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a2e6:	4b6e      	ldr	r3, [pc, #440]	@ (800a4a0 <tcp_input+0x294>)
 800a2e8:	881a      	ldrh	r2, [r3, #0]
 800a2ea:	4b6f      	ldr	r3, [pc, #444]	@ (800a4a8 <tcp_input+0x29c>)
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a2f2:	4b6d      	ldr	r3, [pc, #436]	@ (800a4a8 <tcp_input+0x29c>)
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7fe f8d7 	bl	80084ac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	895b      	ldrh	r3, [r3, #10]
 800a304:	8a3a      	ldrh	r2, [r7, #16]
 800a306:	429a      	cmp	r2, r3
 800a308:	f200 836e 	bhi.w	800a9e8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	4a64      	ldr	r2, [pc, #400]	@ (800a4a4 <tcp_input+0x298>)
 800a314:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	8a3a      	ldrh	r2, [r7, #16]
 800a31c:	4611      	mov	r1, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe f8c4 	bl	80084ac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	891a      	ldrh	r2, [r3, #8]
 800a328:	8a3b      	ldrh	r3, [r7, #16]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	895b      	ldrh	r3, [r3, #10]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d005      	beq.n	800a346 <tcp_input+0x13a>
 800a33a:	4b54      	ldr	r3, [pc, #336]	@ (800a48c <tcp_input+0x280>)
 800a33c:	22df      	movs	r2, #223	@ 0xdf
 800a33e:	495c      	ldr	r1, [pc, #368]	@ (800a4b0 <tcp_input+0x2a4>)
 800a340:	4854      	ldr	r0, [pc, #336]	@ (800a494 <tcp_input+0x288>)
 800a342:	f004 f923 	bl	800e58c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	891a      	ldrh	r2, [r3, #8]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	891b      	ldrh	r3, [r3, #8]
 800a350:	429a      	cmp	r2, r3
 800a352:	d005      	beq.n	800a360 <tcp_input+0x154>
 800a354:	4b4d      	ldr	r3, [pc, #308]	@ (800a48c <tcp_input+0x280>)
 800a356:	22e0      	movs	r2, #224	@ 0xe0
 800a358:	4956      	ldr	r1, [pc, #344]	@ (800a4b4 <tcp_input+0x2a8>)
 800a35a:	484e      	ldr	r0, [pc, #312]	@ (800a494 <tcp_input+0x288>)
 800a35c:	f004 f916 	bl	800e58c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a360:	4b4d      	ldr	r3, [pc, #308]	@ (800a498 <tcp_input+0x28c>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	b29b      	uxth	r3, r3
 800a368:	4a4b      	ldr	r2, [pc, #300]	@ (800a498 <tcp_input+0x28c>)
 800a36a:	6814      	ldr	r4, [r2, #0]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fa fa21 	bl	80047b4 <lwip_htons>
 800a372:	4603      	mov	r3, r0
 800a374:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a376:	4b48      	ldr	r3, [pc, #288]	@ (800a498 <tcp_input+0x28c>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	885b      	ldrh	r3, [r3, #2]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	4a46      	ldr	r2, [pc, #280]	@ (800a498 <tcp_input+0x28c>)
 800a380:	6814      	ldr	r4, [r2, #0]
 800a382:	4618      	mov	r0, r3
 800a384:	f7fa fa16 	bl	80047b4 <lwip_htons>
 800a388:	4603      	mov	r3, r0
 800a38a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a38c:	4b42      	ldr	r3, [pc, #264]	@ (800a498 <tcp_input+0x28c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	4a41      	ldr	r2, [pc, #260]	@ (800a498 <tcp_input+0x28c>)
 800a394:	6814      	ldr	r4, [r2, #0]
 800a396:	4618      	mov	r0, r3
 800a398:	f7fa fa21 	bl	80047de <lwip_htonl>
 800a39c:	4603      	mov	r3, r0
 800a39e:	6063      	str	r3, [r4, #4]
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	4a45      	ldr	r2, [pc, #276]	@ (800a4b8 <tcp_input+0x2ac>)
 800a3a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a3a6:	4b3c      	ldr	r3, [pc, #240]	@ (800a498 <tcp_input+0x28c>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	4a3a      	ldr	r2, [pc, #232]	@ (800a498 <tcp_input+0x28c>)
 800a3ae:	6814      	ldr	r4, [r2, #0]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fa fa14 	bl	80047de <lwip_htonl>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	60a3      	str	r3, [r4, #8]
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	4a3f      	ldr	r2, [pc, #252]	@ (800a4bc <tcp_input+0x2b0>)
 800a3be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a3c0:	4b35      	ldr	r3, [pc, #212]	@ (800a498 <tcp_input+0x28c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	89db      	ldrh	r3, [r3, #14]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	4a33      	ldr	r2, [pc, #204]	@ (800a498 <tcp_input+0x28c>)
 800a3ca:	6814      	ldr	r4, [r2, #0]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fa f9f1 	bl	80047b4 <lwip_htons>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a3d6:	4b30      	ldr	r3, [pc, #192]	@ (800a498 <tcp_input+0x28c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	899b      	ldrh	r3, [r3, #12]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fa f9e8 	bl	80047b4 <lwip_htons>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	4b34      	ldr	r3, [pc, #208]	@ (800a4c0 <tcp_input+0x2b4>)
 800a3f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	891a      	ldrh	r2, [r3, #8]
 800a3f6:	4b33      	ldr	r3, [pc, #204]	@ (800a4c4 <tcp_input+0x2b8>)
 800a3f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a3fa:	4b31      	ldr	r3, [pc, #196]	@ (800a4c0 <tcp_input+0x2b4>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	f003 0303 	and.w	r3, r3, #3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00c      	beq.n	800a420 <tcp_input+0x214>
    tcplen++;
 800a406:	4b2f      	ldr	r3, [pc, #188]	@ (800a4c4 <tcp_input+0x2b8>)
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	4b2d      	ldr	r3, [pc, #180]	@ (800a4c4 <tcp_input+0x2b8>)
 800a410:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	891a      	ldrh	r2, [r3, #8]
 800a416:	4b2b      	ldr	r3, [pc, #172]	@ (800a4c4 <tcp_input+0x2b8>)
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	f200 82e6 	bhi.w	800a9ec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a420:	2300      	movs	r3, #0
 800a422:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a424:	4b28      	ldr	r3, [pc, #160]	@ (800a4c8 <tcp_input+0x2bc>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	61fb      	str	r3, [r7, #28]
 800a42a:	e09d      	b.n	800a568 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	7d1b      	ldrb	r3, [r3, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d105      	bne.n	800a440 <tcp_input+0x234>
 800a434:	4b15      	ldr	r3, [pc, #84]	@ (800a48c <tcp_input+0x280>)
 800a436:	22fb      	movs	r2, #251	@ 0xfb
 800a438:	4924      	ldr	r1, [pc, #144]	@ (800a4cc <tcp_input+0x2c0>)
 800a43a:	4816      	ldr	r0, [pc, #88]	@ (800a494 <tcp_input+0x288>)
 800a43c:	f004 f8a6 	bl	800e58c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	7d1b      	ldrb	r3, [r3, #20]
 800a444:	2b0a      	cmp	r3, #10
 800a446:	d105      	bne.n	800a454 <tcp_input+0x248>
 800a448:	4b10      	ldr	r3, [pc, #64]	@ (800a48c <tcp_input+0x280>)
 800a44a:	22fc      	movs	r2, #252	@ 0xfc
 800a44c:	4920      	ldr	r1, [pc, #128]	@ (800a4d0 <tcp_input+0x2c4>)
 800a44e:	4811      	ldr	r0, [pc, #68]	@ (800a494 <tcp_input+0x288>)
 800a450:	f004 f89c 	bl	800e58c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	7d1b      	ldrb	r3, [r3, #20]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d105      	bne.n	800a468 <tcp_input+0x25c>
 800a45c:	4b0b      	ldr	r3, [pc, #44]	@ (800a48c <tcp_input+0x280>)
 800a45e:	22fd      	movs	r2, #253	@ 0xfd
 800a460:	491c      	ldr	r1, [pc, #112]	@ (800a4d4 <tcp_input+0x2c8>)
 800a462:	480c      	ldr	r0, [pc, #48]	@ (800a494 <tcp_input+0x288>)
 800a464:	f004 f892 	bl	800e58c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	7a1b      	ldrb	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d033      	beq.n	800a4d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	7a1a      	ldrb	r2, [r3, #8]
 800a474:	4b09      	ldr	r3, [pc, #36]	@ (800a49c <tcp_input+0x290>)
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a47c:	3301      	adds	r3, #1
 800a47e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a480:	429a      	cmp	r2, r3
 800a482:	d029      	beq.n	800a4d8 <tcp_input+0x2cc>
      prev = pcb;
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	61bb      	str	r3, [r7, #24]
      continue;
 800a488:	e06b      	b.n	800a562 <tcp_input+0x356>
 800a48a:	bf00      	nop
 800a48c:	08011128 	.word	0x08011128
 800a490:	080111d0 	.word	0x080111d0
 800a494:	080111e8 	.word	0x080111e8
 800a498:	24007c94 	.word	0x24007c94
 800a49c:	24004d44 	.word	0x24004d44
 800a4a0:	24007c98 	.word	0x24007c98
 800a4a4:	24007c9c 	.word	0x24007c9c
 800a4a8:	24007c9a 	.word	0x24007c9a
 800a4ac:	08011210 	.word	0x08011210
 800a4b0:	08011220 	.word	0x08011220
 800a4b4:	0801122c 	.word	0x0801122c
 800a4b8:	24007ca4 	.word	0x24007ca4
 800a4bc:	24007ca8 	.word	0x24007ca8
 800a4c0:	24007cb0 	.word	0x24007cb0
 800a4c4:	24007cae 	.word	0x24007cae
 800a4c8:	24007c78 	.word	0x24007c78
 800a4cc:	0801124c 	.word	0x0801124c
 800a4d0:	08011274 	.word	0x08011274
 800a4d4:	080112a0 	.word	0x080112a0
    }

    if (pcb->remote_port == tcphdr->src &&
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	8b1a      	ldrh	r2, [r3, #24]
 800a4dc:	4b72      	ldr	r3, [pc, #456]	@ (800a6a8 <tcp_input+0x49c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d13a      	bne.n	800a55e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	8ada      	ldrh	r2, [r3, #22]
 800a4ec:	4b6e      	ldr	r3, [pc, #440]	@ (800a6a8 <tcp_input+0x49c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	885b      	ldrh	r3, [r3, #2]
 800a4f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d132      	bne.n	800a55e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	4b6b      	ldr	r3, [pc, #428]	@ (800a6ac <tcp_input+0x4a0>)
 800a4fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a500:	429a      	cmp	r2, r3
 800a502:	d12c      	bne.n	800a55e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	4b68      	ldr	r3, [pc, #416]	@ (800a6ac <tcp_input+0x4a0>)
 800a50a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d126      	bne.n	800a55e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	69fa      	ldr	r2, [r7, #28]
 800a516:	429a      	cmp	r2, r3
 800a518:	d106      	bne.n	800a528 <tcp_input+0x31c>
 800a51a:	4b65      	ldr	r3, [pc, #404]	@ (800a6b0 <tcp_input+0x4a4>)
 800a51c:	f240 120d 	movw	r2, #269	@ 0x10d
 800a520:	4964      	ldr	r1, [pc, #400]	@ (800a6b4 <tcp_input+0x4a8>)
 800a522:	4865      	ldr	r0, [pc, #404]	@ (800a6b8 <tcp_input+0x4ac>)
 800a524:	f004 f832 	bl	800e58c <iprintf>
      if (prev != NULL) {
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <tcp_input+0x338>
        prev->next = pcb->next;
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a536:	4b61      	ldr	r3, [pc, #388]	@ (800a6bc <tcp_input+0x4b0>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a53e:	4a5f      	ldr	r2, [pc, #380]	@ (800a6bc <tcp_input+0x4b0>)
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	69fa      	ldr	r2, [r7, #28]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d111      	bne.n	800a572 <tcp_input+0x366>
 800a54e:	4b58      	ldr	r3, [pc, #352]	@ (800a6b0 <tcp_input+0x4a4>)
 800a550:	f240 1215 	movw	r2, #277	@ 0x115
 800a554:	495a      	ldr	r1, [pc, #360]	@ (800a6c0 <tcp_input+0x4b4>)
 800a556:	4858      	ldr	r0, [pc, #352]	@ (800a6b8 <tcp_input+0x4ac>)
 800a558:	f004 f818 	bl	800e58c <iprintf>
      break;
 800a55c:	e009      	b.n	800a572 <tcp_input+0x366>
    }
    prev = pcb;
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	61fb      	str	r3, [r7, #28]
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f47f af5e 	bne.w	800a42c <tcp_input+0x220>
 800a570:	e000      	b.n	800a574 <tcp_input+0x368>
      break;
 800a572:	bf00      	nop
  }

  if (pcb == NULL) {
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f040 80aa 	bne.w	800a6d0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a57c:	4b51      	ldr	r3, [pc, #324]	@ (800a6c4 <tcp_input+0x4b8>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	61fb      	str	r3, [r7, #28]
 800a582:	e03f      	b.n	800a604 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	7d1b      	ldrb	r3, [r3, #20]
 800a588:	2b0a      	cmp	r3, #10
 800a58a:	d006      	beq.n	800a59a <tcp_input+0x38e>
 800a58c:	4b48      	ldr	r3, [pc, #288]	@ (800a6b0 <tcp_input+0x4a4>)
 800a58e:	f240 121f 	movw	r2, #287	@ 0x11f
 800a592:	494d      	ldr	r1, [pc, #308]	@ (800a6c8 <tcp_input+0x4bc>)
 800a594:	4848      	ldr	r0, [pc, #288]	@ (800a6b8 <tcp_input+0x4ac>)
 800a596:	f003 fff9 	bl	800e58c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	7a1b      	ldrb	r3, [r3, #8]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d009      	beq.n	800a5b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	7a1a      	ldrb	r2, [r3, #8]
 800a5a6:	4b41      	ldr	r3, [pc, #260]	@ (800a6ac <tcp_input+0x4a0>)
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d122      	bne.n	800a5fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	8b1a      	ldrh	r2, [r3, #24]
 800a5ba:	4b3b      	ldr	r3, [pc, #236]	@ (800a6a8 <tcp_input+0x49c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d11b      	bne.n	800a5fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	8ada      	ldrh	r2, [r3, #22]
 800a5ca:	4b37      	ldr	r3, [pc, #220]	@ (800a6a8 <tcp_input+0x49c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	885b      	ldrh	r3, [r3, #2]
 800a5d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d113      	bne.n	800a5fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	4b34      	ldr	r3, [pc, #208]	@ (800a6ac <tcp_input+0x4a0>)
 800a5dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d10d      	bne.n	800a5fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	4b31      	ldr	r3, [pc, #196]	@ (800a6ac <tcp_input+0x4a0>)
 800a5e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d107      	bne.n	800a5fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a5ee:	69f8      	ldr	r0, [r7, #28]
 800a5f0:	f000 fb56 	bl	800aca0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7fd ffdf 	bl	80085b8 <pbuf_free>
        return;
 800a5fa:	e1fd      	b.n	800a9f8 <tcp_input+0x7ec>
        continue;
 800a5fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	61fb      	str	r3, [r7, #28]
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1bc      	bne.n	800a584 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a60e:	4b2f      	ldr	r3, [pc, #188]	@ (800a6cc <tcp_input+0x4c0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	617b      	str	r3, [r7, #20]
 800a614:	e02a      	b.n	800a66c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	7a1b      	ldrb	r3, [r3, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00c      	beq.n	800a638 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	7a1a      	ldrb	r2, [r3, #8]
 800a622:	4b22      	ldr	r3, [pc, #136]	@ (800a6ac <tcp_input+0x4a0>)
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a62a:	3301      	adds	r3, #1
 800a62c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a62e:	429a      	cmp	r2, r3
 800a630:	d002      	beq.n	800a638 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	61bb      	str	r3, [r7, #24]
        continue;
 800a636:	e016      	b.n	800a666 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	8ada      	ldrh	r2, [r3, #22]
 800a63c:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a8 <tcp_input+0x49c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	885b      	ldrh	r3, [r3, #2]
 800a642:	b29b      	uxth	r3, r3
 800a644:	429a      	cmp	r2, r3
 800a646:	d10c      	bne.n	800a662 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	4b17      	ldr	r3, [pc, #92]	@ (800a6ac <tcp_input+0x4a0>)
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	429a      	cmp	r2, r3
 800a652:	d00f      	beq.n	800a674 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00d      	beq.n	800a676 <tcp_input+0x46a>
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d009      	beq.n	800a676 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1d1      	bne.n	800a616 <tcp_input+0x40a>
 800a672:	e000      	b.n	800a676 <tcp_input+0x46a>
            break;
 800a674:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d029      	beq.n	800a6d0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	68da      	ldr	r2, [r3, #12]
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a68a:	4b10      	ldr	r3, [pc, #64]	@ (800a6cc <tcp_input+0x4c0>)
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a692:	4a0e      	ldr	r2, [pc, #56]	@ (800a6cc <tcp_input+0x4c0>)
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a698:	6978      	ldr	r0, [r7, #20]
 800a69a:	f000 fa03 	bl	800aaa4 <tcp_listen_input>
      }
      pbuf_free(p);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7fd ff8a 	bl	80085b8 <pbuf_free>
      return;
 800a6a4:	e1a8      	b.n	800a9f8 <tcp_input+0x7ec>
 800a6a6:	bf00      	nop
 800a6a8:	24007c94 	.word	0x24007c94
 800a6ac:	24004d44 	.word	0x24004d44
 800a6b0:	08011128 	.word	0x08011128
 800a6b4:	080112c8 	.word	0x080112c8
 800a6b8:	080111e8 	.word	0x080111e8
 800a6bc:	24007c78 	.word	0x24007c78
 800a6c0:	080112f4 	.word	0x080112f4
 800a6c4:	24007c7c 	.word	0x24007c7c
 800a6c8:	08011320 	.word	0x08011320
 800a6cc:	24007c74 	.word	0x24007c74
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 8158 	beq.w	800a988 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a6d8:	4b95      	ldr	r3, [pc, #596]	@ (800a930 <tcp_input+0x724>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	891a      	ldrh	r2, [r3, #8]
 800a6e2:	4b93      	ldr	r3, [pc, #588]	@ (800a930 <tcp_input+0x724>)
 800a6e4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a6e6:	4a92      	ldr	r2, [pc, #584]	@ (800a930 <tcp_input+0x724>)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a6ec:	4b91      	ldr	r3, [pc, #580]	@ (800a934 <tcp_input+0x728>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a8f      	ldr	r2, [pc, #572]	@ (800a930 <tcp_input+0x724>)
 800a6f2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a6f4:	4b90      	ldr	r3, [pc, #576]	@ (800a938 <tcp_input+0x72c>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a6fa:	4b90      	ldr	r3, [pc, #576]	@ (800a93c <tcp_input+0x730>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a700:	4b8f      	ldr	r3, [pc, #572]	@ (800a940 <tcp_input+0x734>)
 800a702:	2200      	movs	r2, #0
 800a704:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a706:	4b8f      	ldr	r3, [pc, #572]	@ (800a944 <tcp_input+0x738>)
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	f003 0308 	and.w	r3, r3, #8
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d006      	beq.n	800a720 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	7b5b      	ldrb	r3, [r3, #13]
 800a716:	f043 0301 	orr.w	r3, r3, #1
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a724:	2b00      	cmp	r3, #0
 800a726:	d017      	beq.n	800a758 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a728:	69f8      	ldr	r0, [r7, #28]
 800a72a:	f7ff f929 	bl	8009980 <tcp_process_refused_data>
 800a72e:	4603      	mov	r3, r0
 800a730:	f113 0f0d 	cmn.w	r3, #13
 800a734:	d007      	beq.n	800a746 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00c      	beq.n	800a758 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a73e:	4b82      	ldr	r3, [pc, #520]	@ (800a948 <tcp_input+0x73c>)
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d008      	beq.n	800a758 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f040 80e3 	bne.w	800a916 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a750:	69f8      	ldr	r0, [r7, #28]
 800a752:	f003 f9a7 	bl	800daa4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a756:	e0de      	b.n	800a916 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a758:	4a7c      	ldr	r2, [pc, #496]	@ (800a94c <tcp_input+0x740>)
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a75e:	69f8      	ldr	r0, [r7, #28]
 800a760:	f000 fb18 	bl	800ad94 <tcp_process>
 800a764:	4603      	mov	r3, r0
 800a766:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a768:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a76c:	f113 0f0d 	cmn.w	r3, #13
 800a770:	f000 80d3 	beq.w	800a91a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a774:	4b71      	ldr	r3, [pc, #452]	@ (800a93c <tcp_input+0x730>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	f003 0308 	and.w	r3, r3, #8
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d015      	beq.n	800a7ac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a786:	2b00      	cmp	r3, #0
 800a788:	d008      	beq.n	800a79c <tcp_input+0x590>
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a790:	69fa      	ldr	r2, [r7, #28]
 800a792:	6912      	ldr	r2, [r2, #16]
 800a794:	f06f 010d 	mvn.w	r1, #13
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a79c:	69f9      	ldr	r1, [r7, #28]
 800a79e:	486c      	ldr	r0, [pc, #432]	@ (800a950 <tcp_input+0x744>)
 800a7a0:	f7ff fbbc 	bl	8009f1c <tcp_pcb_remove>
        tcp_free(pcb);
 800a7a4:	69f8      	ldr	r0, [r7, #28]
 800a7a6:	f7fe f9a7 	bl	8008af8 <tcp_free>
 800a7aa:	e0da      	b.n	800a962 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a7b0:	4b63      	ldr	r3, [pc, #396]	@ (800a940 <tcp_input+0x734>)
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d01d      	beq.n	800a7f4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a7b8:	4b61      	ldr	r3, [pc, #388]	@ (800a940 <tcp_input+0x734>)
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00a      	beq.n	800a7de <tcp_input+0x5d2>
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7ce:	69fa      	ldr	r2, [r7, #28]
 800a7d0:	6910      	ldr	r0, [r2, #16]
 800a7d2:	89fa      	ldrh	r2, [r7, #14]
 800a7d4:	69f9      	ldr	r1, [r7, #28]
 800a7d6:	4798      	blx	r3
 800a7d8:	4603      	mov	r3, r0
 800a7da:	74fb      	strb	r3, [r7, #19]
 800a7dc:	e001      	b.n	800a7e2 <tcp_input+0x5d6>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a7e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7e6:	f113 0f0d 	cmn.w	r3, #13
 800a7ea:	f000 8098 	beq.w	800a91e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a7ee:	4b54      	ldr	r3, [pc, #336]	@ (800a940 <tcp_input+0x734>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a7f4:	69f8      	ldr	r0, [r7, #28]
 800a7f6:	f000 f915 	bl	800aa24 <tcp_input_delayed_close>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f040 8090 	bne.w	800a922 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a802:	4b4d      	ldr	r3, [pc, #308]	@ (800a938 <tcp_input+0x72c>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d041      	beq.n	800a88e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d006      	beq.n	800a820 <tcp_input+0x614>
 800a812:	4b50      	ldr	r3, [pc, #320]	@ (800a954 <tcp_input+0x748>)
 800a814:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a818:	494f      	ldr	r1, [pc, #316]	@ (800a958 <tcp_input+0x74c>)
 800a81a:	4850      	ldr	r0, [pc, #320]	@ (800a95c <tcp_input+0x750>)
 800a81c:	f003 feb6 	bl	800e58c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	8b5b      	ldrh	r3, [r3, #26]
 800a824:	f003 0310 	and.w	r3, r3, #16
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d008      	beq.n	800a83e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a82c:	4b42      	ldr	r3, [pc, #264]	@ (800a938 <tcp_input+0x72c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f7fd fec1 	bl	80085b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a836:	69f8      	ldr	r0, [r7, #28]
 800a838:	f7fe fc46 	bl	80090c8 <tcp_abort>
            goto aborted;
 800a83c:	e091      	b.n	800a962 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00c      	beq.n	800a862 <tcp_input+0x656>
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	6918      	ldr	r0, [r3, #16]
 800a852:	4b39      	ldr	r3, [pc, #228]	@ (800a938 <tcp_input+0x72c>)
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	2300      	movs	r3, #0
 800a858:	69f9      	ldr	r1, [r7, #28]
 800a85a:	47a0      	blx	r4
 800a85c:	4603      	mov	r3, r0
 800a85e:	74fb      	strb	r3, [r7, #19]
 800a860:	e008      	b.n	800a874 <tcp_input+0x668>
 800a862:	4b35      	ldr	r3, [pc, #212]	@ (800a938 <tcp_input+0x72c>)
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	2300      	movs	r3, #0
 800a868:	69f9      	ldr	r1, [r7, #28]
 800a86a:	2000      	movs	r0, #0
 800a86c:	f7ff f95e 	bl	8009b2c <tcp_recv_null>
 800a870:	4603      	mov	r3, r0
 800a872:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a874:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a878:	f113 0f0d 	cmn.w	r3, #13
 800a87c:	d053      	beq.n	800a926 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a87e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a886:	4b2c      	ldr	r3, [pc, #176]	@ (800a938 <tcp_input+0x72c>)
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a88e:	4b2b      	ldr	r3, [pc, #172]	@ (800a93c <tcp_input+0x730>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	f003 0320 	and.w	r3, r3, #32
 800a896:	2b00      	cmp	r3, #0
 800a898:	d030      	beq.n	800a8fc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8a6:	7b5a      	ldrb	r2, [r3, #13]
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8ac:	f042 0220 	orr.w	r2, r2, #32
 800a8b0:	b2d2      	uxtb	r2, r2
 800a8b2:	735a      	strb	r2, [r3, #13]
 800a8b4:	e022      	b.n	800a8fc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a8be:	d005      	beq.n	800a8cc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00b      	beq.n	800a8ee <tcp_input+0x6e2>
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	6918      	ldr	r0, [r3, #16]
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	69f9      	ldr	r1, [r7, #28]
 800a8e6:	47a0      	blx	r4
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	74fb      	strb	r3, [r7, #19]
 800a8ec:	e001      	b.n	800a8f2 <tcp_input+0x6e6>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a8f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8f6:	f113 0f0d 	cmn.w	r3, #13
 800a8fa:	d016      	beq.n	800a92a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a8fc:	4b13      	ldr	r3, [pc, #76]	@ (800a94c <tcp_input+0x740>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a902:	69f8      	ldr	r0, [r7, #28]
 800a904:	f000 f88e 	bl	800aa24 <tcp_input_delayed_close>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d128      	bne.n	800a960 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a90e:	69f8      	ldr	r0, [r7, #28]
 800a910:	f002 fac2 	bl	800ce98 <tcp_output>
 800a914:	e025      	b.n	800a962 <tcp_input+0x756>
        goto aborted;
 800a916:	bf00      	nop
 800a918:	e023      	b.n	800a962 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a91a:	bf00      	nop
 800a91c:	e021      	b.n	800a962 <tcp_input+0x756>
              goto aborted;
 800a91e:	bf00      	nop
 800a920:	e01f      	b.n	800a962 <tcp_input+0x756>
          goto aborted;
 800a922:	bf00      	nop
 800a924:	e01d      	b.n	800a962 <tcp_input+0x756>
            goto aborted;
 800a926:	bf00      	nop
 800a928:	e01b      	b.n	800a962 <tcp_input+0x756>
              goto aborted;
 800a92a:	bf00      	nop
 800a92c:	e019      	b.n	800a962 <tcp_input+0x756>
 800a92e:	bf00      	nop
 800a930:	24007c84 	.word	0x24007c84
 800a934:	24007c94 	.word	0x24007c94
 800a938:	24007cb4 	.word	0x24007cb4
 800a93c:	24007cb1 	.word	0x24007cb1
 800a940:	24007cac 	.word	0x24007cac
 800a944:	24007cb0 	.word	0x24007cb0
 800a948:	24007cae 	.word	0x24007cae
 800a94c:	24007cb8 	.word	0x24007cb8
 800a950:	24007c78 	.word	0x24007c78
 800a954:	08011128 	.word	0x08011128
 800a958:	08011350 	.word	0x08011350
 800a95c:	080111e8 	.word	0x080111e8
          goto aborted;
 800a960:	bf00      	nop
    tcp_input_pcb = NULL;
 800a962:	4b27      	ldr	r3, [pc, #156]	@ (800aa00 <tcp_input+0x7f4>)
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a968:	4b26      	ldr	r3, [pc, #152]	@ (800aa04 <tcp_input+0x7f8>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a96e:	4b26      	ldr	r3, [pc, #152]	@ (800aa08 <tcp_input+0x7fc>)
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d03f      	beq.n	800a9f6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a976:	4b24      	ldr	r3, [pc, #144]	@ (800aa08 <tcp_input+0x7fc>)
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fd fe1c 	bl	80085b8 <pbuf_free>
      inseg.p = NULL;
 800a980:	4b21      	ldr	r3, [pc, #132]	@ (800aa08 <tcp_input+0x7fc>)
 800a982:	2200      	movs	r2, #0
 800a984:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a986:	e036      	b.n	800a9f6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a988:	4b20      	ldr	r3, [pc, #128]	@ (800aa0c <tcp_input+0x800>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	899b      	ldrh	r3, [r3, #12]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	4618      	mov	r0, r3
 800a992:	f7f9 ff0f 	bl	80047b4 <lwip_htons>
 800a996:	4603      	mov	r3, r0
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	f003 0304 	and.w	r3, r3, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d118      	bne.n	800a9d4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9a2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa10 <tcp_input+0x804>)
 800a9a4:	6819      	ldr	r1, [r3, #0]
 800a9a6:	4b1b      	ldr	r3, [pc, #108]	@ (800aa14 <tcp_input+0x808>)
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	4b1a      	ldr	r3, [pc, #104]	@ (800aa18 <tcp_input+0x80c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9b2:	4b16      	ldr	r3, [pc, #88]	@ (800aa0c <tcp_input+0x800>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9b6:	885b      	ldrh	r3, [r3, #2]
 800a9b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9ba:	4a14      	ldr	r2, [pc, #80]	@ (800aa0c <tcp_input+0x800>)
 800a9bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9be:	8812      	ldrh	r2, [r2, #0]
 800a9c0:	b292      	uxth	r2, r2
 800a9c2:	9202      	str	r2, [sp, #8]
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	4b15      	ldr	r3, [pc, #84]	@ (800aa1c <tcp_input+0x810>)
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	4b15      	ldr	r3, [pc, #84]	@ (800aa20 <tcp_input+0x814>)
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	f003 f816 	bl	800da00 <tcp_rst>
    pbuf_free(p);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7fd fdef 	bl	80085b8 <pbuf_free>
  return;
 800a9da:	e00c      	b.n	800a9f6 <tcp_input+0x7ea>
    goto dropped;
 800a9dc:	bf00      	nop
 800a9de:	e006      	b.n	800a9ee <tcp_input+0x7e2>
    goto dropped;
 800a9e0:	bf00      	nop
 800a9e2:	e004      	b.n	800a9ee <tcp_input+0x7e2>
    goto dropped;
 800a9e4:	bf00      	nop
 800a9e6:	e002      	b.n	800a9ee <tcp_input+0x7e2>
      goto dropped;
 800a9e8:	bf00      	nop
 800a9ea:	e000      	b.n	800a9ee <tcp_input+0x7e2>
      goto dropped;
 800a9ec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7fd fde2 	bl	80085b8 <pbuf_free>
 800a9f4:	e000      	b.n	800a9f8 <tcp_input+0x7ec>
  return;
 800a9f6:	bf00      	nop
}
 800a9f8:	3724      	adds	r7, #36	@ 0x24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd90      	pop	{r4, r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	24007cb8 	.word	0x24007cb8
 800aa04:	24007cb4 	.word	0x24007cb4
 800aa08:	24007c84 	.word	0x24007c84
 800aa0c:	24007c94 	.word	0x24007c94
 800aa10:	24007ca8 	.word	0x24007ca8
 800aa14:	24007cae 	.word	0x24007cae
 800aa18:	24007ca4 	.word	0x24007ca4
 800aa1c:	24004d54 	.word	0x24004d54
 800aa20:	24004d58 	.word	0x24004d58

0800aa24 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d106      	bne.n	800aa40 <tcp_input_delayed_close+0x1c>
 800aa32:	4b17      	ldr	r3, [pc, #92]	@ (800aa90 <tcp_input_delayed_close+0x6c>)
 800aa34:	f240 225a 	movw	r2, #602	@ 0x25a
 800aa38:	4916      	ldr	r1, [pc, #88]	@ (800aa94 <tcp_input_delayed_close+0x70>)
 800aa3a:	4817      	ldr	r0, [pc, #92]	@ (800aa98 <tcp_input_delayed_close+0x74>)
 800aa3c:	f003 fda6 	bl	800e58c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800aa40:	4b16      	ldr	r3, [pc, #88]	@ (800aa9c <tcp_input_delayed_close+0x78>)
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	f003 0310 	and.w	r3, r3, #16
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01c      	beq.n	800aa86 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	8b5b      	ldrh	r3, [r3, #26]
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10d      	bne.n	800aa74 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d008      	beq.n	800aa74 <tcp_input_delayed_close+0x50>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6912      	ldr	r2, [r2, #16]
 800aa6c:	f06f 010e 	mvn.w	r1, #14
 800aa70:	4610      	mov	r0, r2
 800aa72:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aa74:	6879      	ldr	r1, [r7, #4]
 800aa76:	480a      	ldr	r0, [pc, #40]	@ (800aaa0 <tcp_input_delayed_close+0x7c>)
 800aa78:	f7ff fa50 	bl	8009f1c <tcp_pcb_remove>
    tcp_free(pcb);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7fe f83b 	bl	8008af8 <tcp_free>
    return 1;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e000      	b.n	800aa88 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	08011128 	.word	0x08011128
 800aa94:	0801136c 	.word	0x0801136c
 800aa98:	080111e8 	.word	0x080111e8
 800aa9c:	24007cb1 	.word	0x24007cb1
 800aaa0:	24007c78 	.word	0x24007c78

0800aaa4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800aaa4:	b590      	push	{r4, r7, lr}
 800aaa6:	b08b      	sub	sp, #44	@ 0x2c
 800aaa8:	af04      	add	r7, sp, #16
 800aaaa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800aaac:	4b6f      	ldr	r3, [pc, #444]	@ (800ac6c <tcp_listen_input+0x1c8>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f040 80d2 	bne.w	800ac5e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d106      	bne.n	800aace <tcp_listen_input+0x2a>
 800aac0:	4b6b      	ldr	r3, [pc, #428]	@ (800ac70 <tcp_listen_input+0x1cc>)
 800aac2:	f240 2281 	movw	r2, #641	@ 0x281
 800aac6:	496b      	ldr	r1, [pc, #428]	@ (800ac74 <tcp_listen_input+0x1d0>)
 800aac8:	486b      	ldr	r0, [pc, #428]	@ (800ac78 <tcp_listen_input+0x1d4>)
 800aaca:	f003 fd5f 	bl	800e58c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800aace:	4b67      	ldr	r3, [pc, #412]	@ (800ac6c <tcp_listen_input+0x1c8>)
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	f003 0310 	and.w	r3, r3, #16
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d019      	beq.n	800ab0e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aada:	4b68      	ldr	r3, [pc, #416]	@ (800ac7c <tcp_listen_input+0x1d8>)
 800aadc:	6819      	ldr	r1, [r3, #0]
 800aade:	4b68      	ldr	r3, [pc, #416]	@ (800ac80 <tcp_listen_input+0x1dc>)
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	461a      	mov	r2, r3
 800aae4:	4b67      	ldr	r3, [pc, #412]	@ (800ac84 <tcp_listen_input+0x1e0>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aaea:	4b67      	ldr	r3, [pc, #412]	@ (800ac88 <tcp_listen_input+0x1e4>)
 800aaec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aaee:	885b      	ldrh	r3, [r3, #2]
 800aaf0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aaf2:	4a65      	ldr	r2, [pc, #404]	@ (800ac88 <tcp_listen_input+0x1e4>)
 800aaf4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aaf6:	8812      	ldrh	r2, [r2, #0]
 800aaf8:	b292      	uxth	r2, r2
 800aafa:	9202      	str	r2, [sp, #8]
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	4b63      	ldr	r3, [pc, #396]	@ (800ac8c <tcp_listen_input+0x1e8>)
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	4b63      	ldr	r3, [pc, #396]	@ (800ac90 <tcp_listen_input+0x1ec>)
 800ab04:	4602      	mov	r2, r0
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f002 ff7a 	bl	800da00 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ab0c:	e0a9      	b.n	800ac62 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ab0e:	4b57      	ldr	r3, [pc, #348]	@ (800ac6c <tcp_listen_input+0x1c8>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80a3 	beq.w	800ac62 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	7d5b      	ldrb	r3, [r3, #21]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff f927 	bl	8009d74 <tcp_alloc>
 800ab26:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d111      	bne.n	800ab52 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00a      	beq.n	800ab4c <tcp_listen_input+0xa8>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	6910      	ldr	r0, [r2, #16]
 800ab3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab42:	2100      	movs	r1, #0
 800ab44:	4798      	blx	r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	73bb      	strb	r3, [r7, #14]
      return;
 800ab4a:	e08b      	b.n	800ac64 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ab4c:	23f0      	movs	r3, #240	@ 0xf0
 800ab4e:	73bb      	strb	r3, [r7, #14]
      return;
 800ab50:	e088      	b.n	800ac64 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ab52:	4b50      	ldr	r3, [pc, #320]	@ (800ac94 <tcp_listen_input+0x1f0>)
 800ab54:	695a      	ldr	r2, [r3, #20]
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ab5a:	4b4e      	ldr	r3, [pc, #312]	@ (800ac94 <tcp_listen_input+0x1f0>)
 800ab5c:	691a      	ldr	r2, [r3, #16]
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	8ada      	ldrh	r2, [r3, #22]
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ab6a:	4b47      	ldr	r3, [pc, #284]	@ (800ac88 <tcp_listen_input+0x1e4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2203      	movs	r2, #3
 800ab7a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ab7c:	4b41      	ldr	r3, [pc, #260]	@ (800ac84 <tcp_listen_input+0x1e0>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	1c5a      	adds	r2, r3, #1
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ab8e:	6978      	ldr	r0, [r7, #20]
 800ab90:	f7ff fa58 	bl	800a044 <tcp_next_iss>
 800ab94:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800abae:	4b35      	ldr	r3, [pc, #212]	@ (800ac84 <tcp_listen_input+0x1e0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	1e5a      	subs	r2, r3, #1
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691a      	ldr	r2, [r3, #16]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	7a5b      	ldrb	r3, [r3, #9]
 800abca:	f003 030c 	and.w	r3, r3, #12
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	7a1a      	ldrb	r2, [r3, #8]
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800abdc:	4b2e      	ldr	r3, [pc, #184]	@ (800ac98 <tcp_listen_input+0x1f4>)
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	60da      	str	r2, [r3, #12]
 800abe4:	4a2c      	ldr	r2, [pc, #176]	@ (800ac98 <tcp_listen_input+0x1f4>)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	f003 f8cb 	bl	800dd84 <tcp_timer_needed>
 800abee:	4b2b      	ldr	r3, [pc, #172]	@ (800ac9c <tcp_listen_input+0x1f8>)
 800abf0:	2201      	movs	r2, #1
 800abf2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800abf4:	6978      	ldr	r0, [r7, #20]
 800abf6:	f001 fd8b 	bl	800c710 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800abfa:	4b23      	ldr	r3, [pc, #140]	@ (800ac88 <tcp_listen_input+0x1e4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	89db      	ldrh	r3, [r3, #14]
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fb f89f 	bl	8005d60 <ip4_route>
 800ac22:	4601      	mov	r1, r0
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	3304      	adds	r3, #4
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f7ff fa30 	bl	800a090 <tcp_eff_send_mss_netif>
 800ac30:	4603      	mov	r3, r0
 800ac32:	461a      	mov	r2, r3
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ac38:	2112      	movs	r1, #18
 800ac3a:	6978      	ldr	r0, [r7, #20]
 800ac3c:	f002 f83e 	bl	800ccbc <tcp_enqueue_flags>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ac44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d004      	beq.n	800ac56 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	6978      	ldr	r0, [r7, #20]
 800ac50:	f7fe f97c 	bl	8008f4c <tcp_abandon>
      return;
 800ac54:	e006      	b.n	800ac64 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ac56:	6978      	ldr	r0, [r7, #20]
 800ac58:	f002 f91e 	bl	800ce98 <tcp_output>
  return;
 800ac5c:	e001      	b.n	800ac62 <tcp_listen_input+0x1be>
    return;
 800ac5e:	bf00      	nop
 800ac60:	e000      	b.n	800ac64 <tcp_listen_input+0x1c0>
  return;
 800ac62:	bf00      	nop
}
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd90      	pop	{r4, r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	24007cb0 	.word	0x24007cb0
 800ac70:	08011128 	.word	0x08011128
 800ac74:	08011394 	.word	0x08011394
 800ac78:	080111e8 	.word	0x080111e8
 800ac7c:	24007ca8 	.word	0x24007ca8
 800ac80:	24007cae 	.word	0x24007cae
 800ac84:	24007ca4 	.word	0x24007ca4
 800ac88:	24007c94 	.word	0x24007c94
 800ac8c:	24004d54 	.word	0x24004d54
 800ac90:	24004d58 	.word	0x24004d58
 800ac94:	24004d44 	.word	0x24004d44
 800ac98:	24007c78 	.word	0x24007c78
 800ac9c:	24007c80 	.word	0x24007c80

0800aca0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af04      	add	r7, sp, #16
 800aca6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800aca8:	4b2f      	ldr	r3, [pc, #188]	@ (800ad68 <tcp_timewait_input+0xc8>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	f003 0304 	and.w	r3, r3, #4
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d153      	bne.n	800ad5c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d106      	bne.n	800acc8 <tcp_timewait_input+0x28>
 800acba:	4b2c      	ldr	r3, [pc, #176]	@ (800ad6c <tcp_timewait_input+0xcc>)
 800acbc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800acc0:	492b      	ldr	r1, [pc, #172]	@ (800ad70 <tcp_timewait_input+0xd0>)
 800acc2:	482c      	ldr	r0, [pc, #176]	@ (800ad74 <tcp_timewait_input+0xd4>)
 800acc4:	f003 fc62 	bl	800e58c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800acc8:	4b27      	ldr	r3, [pc, #156]	@ (800ad68 <tcp_timewait_input+0xc8>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d02a      	beq.n	800ad2a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800acd4:	4b28      	ldr	r3, [pc, #160]	@ (800ad78 <tcp_timewait_input+0xd8>)
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	db2d      	blt.n	800ad3e <tcp_timewait_input+0x9e>
 800ace2:	4b25      	ldr	r3, [pc, #148]	@ (800ad78 <tcp_timewait_input+0xd8>)
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800acee:	440b      	add	r3, r1
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dc23      	bgt.n	800ad3e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acf6:	4b21      	ldr	r3, [pc, #132]	@ (800ad7c <tcp_timewait_input+0xdc>)
 800acf8:	6819      	ldr	r1, [r3, #0]
 800acfa:	4b21      	ldr	r3, [pc, #132]	@ (800ad80 <tcp_timewait_input+0xe0>)
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	4b1d      	ldr	r3, [pc, #116]	@ (800ad78 <tcp_timewait_input+0xd8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad06:	4b1f      	ldr	r3, [pc, #124]	@ (800ad84 <tcp_timewait_input+0xe4>)
 800ad08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad0a:	885b      	ldrh	r3, [r3, #2]
 800ad0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad0e:	4a1d      	ldr	r2, [pc, #116]	@ (800ad84 <tcp_timewait_input+0xe4>)
 800ad10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad12:	8812      	ldrh	r2, [r2, #0]
 800ad14:	b292      	uxth	r2, r2
 800ad16:	9202      	str	r2, [sp, #8]
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	4b1b      	ldr	r3, [pc, #108]	@ (800ad88 <tcp_timewait_input+0xe8>)
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	4b1b      	ldr	r3, [pc, #108]	@ (800ad8c <tcp_timewait_input+0xec>)
 800ad20:	4602      	mov	r2, r0
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f002 fe6c 	bl	800da00 <tcp_rst>
      return;
 800ad28:	e01b      	b.n	800ad62 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad68 <tcp_timewait_input+0xc8>)
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	f003 0301 	and.w	r3, r3, #1
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ad36:	4b16      	ldr	r3, [pc, #88]	@ (800ad90 <tcp_timewait_input+0xf0>)
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ad3e:	4b10      	ldr	r3, [pc, #64]	@ (800ad80 <tcp_timewait_input+0xe0>)
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00c      	beq.n	800ad60 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8b5b      	ldrh	r3, [r3, #26]
 800ad4a:	f043 0302 	orr.w	r3, r3, #2
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f002 f89f 	bl	800ce98 <tcp_output>
  }
  return;
 800ad5a:	e001      	b.n	800ad60 <tcp_timewait_input+0xc0>
    return;
 800ad5c:	bf00      	nop
 800ad5e:	e000      	b.n	800ad62 <tcp_timewait_input+0xc2>
  return;
 800ad60:	bf00      	nop
}
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	24007cb0 	.word	0x24007cb0
 800ad6c:	08011128 	.word	0x08011128
 800ad70:	080113b4 	.word	0x080113b4
 800ad74:	080111e8 	.word	0x080111e8
 800ad78:	24007ca4 	.word	0x24007ca4
 800ad7c:	24007ca8 	.word	0x24007ca8
 800ad80:	24007cae 	.word	0x24007cae
 800ad84:	24007c94 	.word	0x24007c94
 800ad88:	24004d54 	.word	0x24004d54
 800ad8c:	24004d58 	.word	0x24004d58
 800ad90:	24007c6c 	.word	0x24007c6c

0800ad94 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ad94:	b590      	push	{r4, r7, lr}
 800ad96:	b08d      	sub	sp, #52	@ 0x34
 800ad98:	af04      	add	r7, sp, #16
 800ad9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d106      	bne.n	800adb8 <tcp_process+0x24>
 800adaa:	4b9d      	ldr	r3, [pc, #628]	@ (800b020 <tcp_process+0x28c>)
 800adac:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800adb0:	499c      	ldr	r1, [pc, #624]	@ (800b024 <tcp_process+0x290>)
 800adb2:	489d      	ldr	r0, [pc, #628]	@ (800b028 <tcp_process+0x294>)
 800adb4:	f003 fbea 	bl	800e58c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800adb8:	4b9c      	ldr	r3, [pc, #624]	@ (800b02c <tcp_process+0x298>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d04e      	beq.n	800ae62 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	7d1b      	ldrb	r3, [r3, #20]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d108      	bne.n	800adde <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800add0:	4b97      	ldr	r3, [pc, #604]	@ (800b030 <tcp_process+0x29c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	429a      	cmp	r2, r3
 800add6:	d123      	bne.n	800ae20 <tcp_process+0x8c>
        acceptable = 1;
 800add8:	2301      	movs	r3, #1
 800adda:	76fb      	strb	r3, [r7, #27]
 800addc:	e020      	b.n	800ae20 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ade2:	4b94      	ldr	r3, [pc, #592]	@ (800b034 <tcp_process+0x2a0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d102      	bne.n	800adf0 <tcp_process+0x5c>
        acceptable = 1;
 800adea:	2301      	movs	r3, #1
 800adec:	76fb      	strb	r3, [r7, #27]
 800adee:	e017      	b.n	800ae20 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800adf0:	4b90      	ldr	r3, [pc, #576]	@ (800b034 <tcp_process+0x2a0>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	db10      	blt.n	800ae20 <tcp_process+0x8c>
 800adfe:	4b8d      	ldr	r3, [pc, #564]	@ (800b034 <tcp_process+0x2a0>)
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae06:	6879      	ldr	r1, [r7, #4]
 800ae08:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ae0a:	440b      	add	r3, r1
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	dc06      	bgt.n	800ae20 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	8b5b      	ldrh	r3, [r3, #26]
 800ae16:	f043 0302 	orr.w	r3, r3, #2
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ae20:	7efb      	ldrb	r3, [r7, #27]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d01b      	beq.n	800ae5e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	7d1b      	ldrb	r3, [r3, #20]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <tcp_process+0xa8>
 800ae2e:	4b7c      	ldr	r3, [pc, #496]	@ (800b020 <tcp_process+0x28c>)
 800ae30:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ae34:	4980      	ldr	r1, [pc, #512]	@ (800b038 <tcp_process+0x2a4>)
 800ae36:	487c      	ldr	r0, [pc, #496]	@ (800b028 <tcp_process+0x294>)
 800ae38:	f003 fba8 	bl	800e58c <iprintf>
      recv_flags |= TF_RESET;
 800ae3c:	4b7f      	ldr	r3, [pc, #508]	@ (800b03c <tcp_process+0x2a8>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f043 0308 	orr.w	r3, r3, #8
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	4b7d      	ldr	r3, [pc, #500]	@ (800b03c <tcp_process+0x2a8>)
 800ae48:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	8b5b      	ldrh	r3, [r3, #26]
 800ae4e:	f023 0301 	bic.w	r3, r3, #1
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ae58:	f06f 030d 	mvn.w	r3, #13
 800ae5c:	e37a      	b.n	800b554 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e378      	b.n	800b554 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ae62:	4b72      	ldr	r3, [pc, #456]	@ (800b02c <tcp_process+0x298>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	f003 0302 	and.w	r3, r3, #2
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d010      	beq.n	800ae90 <tcp_process+0xfc>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	7d1b      	ldrb	r3, [r3, #20]
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d00c      	beq.n	800ae90 <tcp_process+0xfc>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	7d1b      	ldrb	r3, [r3, #20]
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d008      	beq.n	800ae90 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	8b5b      	ldrh	r3, [r3, #26]
 800ae82:	f043 0302 	orr.w	r3, r3, #2
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e361      	b.n	800b554 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	8b5b      	ldrh	r3, [r3, #26]
 800ae94:	f003 0310 	and.w	r3, r3, #16
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ae9c:	4b68      	ldr	r3, [pc, #416]	@ (800b040 <tcp_process+0x2ac>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 fc2b 	bl	800c710 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	7d1b      	ldrb	r3, [r3, #20]
 800aebe:	3b02      	subs	r3, #2
 800aec0:	2b07      	cmp	r3, #7
 800aec2:	f200 8337 	bhi.w	800b534 <tcp_process+0x7a0>
 800aec6:	a201      	add	r2, pc, #4	@ (adr r2, 800aecc <tcp_process+0x138>)
 800aec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aecc:	0800aeed 	.word	0x0800aeed
 800aed0:	0800b11d 	.word	0x0800b11d
 800aed4:	0800b295 	.word	0x0800b295
 800aed8:	0800b2bf 	.word	0x0800b2bf
 800aedc:	0800b3e3 	.word	0x0800b3e3
 800aee0:	0800b295 	.word	0x0800b295
 800aee4:	0800b46f 	.word	0x0800b46f
 800aee8:	0800b4ff 	.word	0x0800b4ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800aeec:	4b4f      	ldr	r3, [pc, #316]	@ (800b02c <tcp_process+0x298>)
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	f003 0310 	and.w	r3, r3, #16
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 80e4 	beq.w	800b0c2 <tcp_process+0x32e>
 800aefa:	4b4c      	ldr	r3, [pc, #304]	@ (800b02c <tcp_process+0x298>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 80dd 	beq.w	800b0c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af0c:	1c5a      	adds	r2, r3, #1
 800af0e:	4b48      	ldr	r3, [pc, #288]	@ (800b030 <tcp_process+0x29c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	429a      	cmp	r2, r3
 800af14:	f040 80d5 	bne.w	800b0c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800af18:	4b46      	ldr	r3, [pc, #280]	@ (800b034 <tcp_process+0x2a0>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	1c5a      	adds	r2, r3, #1
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800af2a:	4b41      	ldr	r3, [pc, #260]	@ (800b030 <tcp_process+0x29c>)
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800af32:	4b44      	ldr	r3, [pc, #272]	@ (800b044 <tcp_process+0x2b0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	89db      	ldrh	r3, [r3, #14]
 800af38:	b29a      	uxth	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800af4c:	4b39      	ldr	r3, [pc, #228]	@ (800b034 <tcp_process+0x2a0>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	1e5a      	subs	r2, r3, #1
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2204      	movs	r2, #4
 800af5a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3304      	adds	r3, #4
 800af64:	4618      	mov	r0, r3
 800af66:	f7fa fefb 	bl	8005d60 <ip4_route>
 800af6a:	4601      	mov	r1, r0
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3304      	adds	r3, #4
 800af70:	461a      	mov	r2, r3
 800af72:	4620      	mov	r0, r4
 800af74:	f7ff f88c 	bl	800a090 <tcp_eff_send_mss_netif>
 800af78:	4603      	mov	r3, r0
 800af7a:	461a      	mov	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af84:	009a      	lsls	r2, r3, #2
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800af90:	428b      	cmp	r3, r1
 800af92:	bf38      	it	cc
 800af94:	460b      	movcc	r3, r1
 800af96:	429a      	cmp	r2, r3
 800af98:	d204      	bcs.n	800afa4 <tcp_process+0x210>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	e00d      	b.n	800afc0 <tcp_process+0x22c>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afa8:	005b      	lsls	r3, r3, #1
 800afaa:	f241 121c 	movw	r2, #4380	@ 0x111c
 800afae:	4293      	cmp	r3, r2
 800afb0:	d904      	bls.n	800afbc <tcp_process+0x228>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	b29b      	uxth	r3, r3
 800afba:	e001      	b.n	800afc0 <tcp_process+0x22c>
 800afbc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d106      	bne.n	800afde <tcp_process+0x24a>
 800afd0:	4b13      	ldr	r3, [pc, #76]	@ (800b020 <tcp_process+0x28c>)
 800afd2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800afd6:	491c      	ldr	r1, [pc, #112]	@ (800b048 <tcp_process+0x2b4>)
 800afd8:	4813      	ldr	r0, [pc, #76]	@ (800b028 <tcp_process+0x294>)
 800afda:	f003 fad7 	bl	800e58c <iprintf>
        --pcb->snd_queuelen;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800afe4:	3b01      	subs	r3, #1
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aff2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d12a      	bne.n	800b050 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800affe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d106      	bne.n	800b014 <tcp_process+0x280>
 800b006:	4b06      	ldr	r3, [pc, #24]	@ (800b020 <tcp_process+0x28c>)
 800b008:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b00c:	490f      	ldr	r1, [pc, #60]	@ (800b04c <tcp_process+0x2b8>)
 800b00e:	4806      	ldr	r0, [pc, #24]	@ (800b028 <tcp_process+0x294>)
 800b010:	f003 fabc 	bl	800e58c <iprintf>
          pcb->unsent = rseg->next;
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b01c:	e01c      	b.n	800b058 <tcp_process+0x2c4>
 800b01e:	bf00      	nop
 800b020:	08011128 	.word	0x08011128
 800b024:	080113d4 	.word	0x080113d4
 800b028:	080111e8 	.word	0x080111e8
 800b02c:	24007cb0 	.word	0x24007cb0
 800b030:	24007ca8 	.word	0x24007ca8
 800b034:	24007ca4 	.word	0x24007ca4
 800b038:	080113f0 	.word	0x080113f0
 800b03c:	24007cb1 	.word	0x24007cb1
 800b040:	24007c6c 	.word	0x24007c6c
 800b044:	24007c94 	.word	0x24007c94
 800b048:	08011410 	.word	0x08011410
 800b04c:	08011428 	.word	0x08011428
        } else {
          pcb->unacked = rseg->next;
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b058:	69f8      	ldr	r0, [r7, #28]
 800b05a:	f7fe fd22 	bl	8009aa2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b062:	2b00      	cmp	r3, #0
 800b064:	d104      	bne.n	800b070 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b06c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b06e:	e006      	b.n	800b07e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <tcp_process+0x30a>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	6910      	ldr	r0, [r2, #16]
 800b092:	2200      	movs	r2, #0
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4798      	blx	r3
 800b098:	4603      	mov	r3, r0
 800b09a:	76bb      	strb	r3, [r7, #26]
 800b09c:	e001      	b.n	800b0a2 <tcp_process+0x30e>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b0a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b0a6:	f113 0f0d 	cmn.w	r3, #13
 800b0aa:	d102      	bne.n	800b0b2 <tcp_process+0x31e>
          return ERR_ABRT;
 800b0ac:	f06f 030c 	mvn.w	r3, #12
 800b0b0:	e250      	b.n	800b554 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	8b5b      	ldrh	r3, [r3, #26]
 800b0b6:	f043 0302 	orr.w	r3, r3, #2
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b0c0:	e23a      	b.n	800b538 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b0c2:	4b98      	ldr	r3, [pc, #608]	@ (800b324 <tcp_process+0x590>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	f003 0310 	and.w	r3, r3, #16
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 8234 	beq.w	800b538 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0d0:	4b95      	ldr	r3, [pc, #596]	@ (800b328 <tcp_process+0x594>)
 800b0d2:	6819      	ldr	r1, [r3, #0]
 800b0d4:	4b95      	ldr	r3, [pc, #596]	@ (800b32c <tcp_process+0x598>)
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4b95      	ldr	r3, [pc, #596]	@ (800b330 <tcp_process+0x59c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0e0:	4b94      	ldr	r3, [pc, #592]	@ (800b334 <tcp_process+0x5a0>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0e4:	885b      	ldrh	r3, [r3, #2]
 800b0e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0e8:	4a92      	ldr	r2, [pc, #584]	@ (800b334 <tcp_process+0x5a0>)
 800b0ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0ec:	8812      	ldrh	r2, [r2, #0]
 800b0ee:	b292      	uxth	r2, r2
 800b0f0:	9202      	str	r2, [sp, #8]
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	4b90      	ldr	r3, [pc, #576]	@ (800b338 <tcp_process+0x5a4>)
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4b90      	ldr	r3, [pc, #576]	@ (800b33c <tcp_process+0x5a8>)
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f002 fc7f 	bl	800da00 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b108:	2b05      	cmp	r3, #5
 800b10a:	f200 8215 	bhi.w	800b538 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f002 fa4b 	bl	800d5b0 <tcp_rexmit_rto>
      break;
 800b11a:	e20d      	b.n	800b538 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b11c:	4b81      	ldr	r3, [pc, #516]	@ (800b324 <tcp_process+0x590>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	f003 0310 	and.w	r3, r3, #16
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 80a1 	beq.w	800b26c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b12a:	4b7f      	ldr	r3, [pc, #508]	@ (800b328 <tcp_process+0x594>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	db7e      	blt.n	800b238 <tcp_process+0x4a4>
 800b13a:	4b7b      	ldr	r3, [pc, #492]	@ (800b328 <tcp_process+0x594>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	dc77      	bgt.n	800b238 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2204      	movs	r2, #4
 800b14c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d102      	bne.n	800b15c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b156:	23fa      	movs	r3, #250	@ 0xfa
 800b158:	76bb      	strb	r3, [r7, #26]
 800b15a:	e01d      	b.n	800b198 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d106      	bne.n	800b174 <tcp_process+0x3e0>
 800b166:	4b76      	ldr	r3, [pc, #472]	@ (800b340 <tcp_process+0x5ac>)
 800b168:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b16c:	4975      	ldr	r1, [pc, #468]	@ (800b344 <tcp_process+0x5b0>)
 800b16e:	4876      	ldr	r0, [pc, #472]	@ (800b348 <tcp_process+0x5b4>)
 800b170:	f003 fa0c 	bl	800e58c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <tcp_process+0x400>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	6910      	ldr	r0, [r2, #16]
 800b188:	2200      	movs	r2, #0
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	4798      	blx	r3
 800b18e:	4603      	mov	r3, r0
 800b190:	76bb      	strb	r3, [r7, #26]
 800b192:	e001      	b.n	800b198 <tcp_process+0x404>
 800b194:	23f0      	movs	r3, #240	@ 0xf0
 800b196:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b198:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00a      	beq.n	800b1b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b1a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b1a4:	f113 0f0d 	cmn.w	r3, #13
 800b1a8:	d002      	beq.n	800b1b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7fd ff8c 	bl	80090c8 <tcp_abort>
            }
            return ERR_ABRT;
 800b1b0:	f06f 030c 	mvn.w	r3, #12
 800b1b4:	e1ce      	b.n	800b554 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fae0 	bl	800b77c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b1bc:	4b63      	ldr	r3, [pc, #396]	@ (800b34c <tcp_process+0x5b8>)
 800b1be:	881b      	ldrh	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d005      	beq.n	800b1d0 <tcp_process+0x43c>
            recv_acked--;
 800b1c4:	4b61      	ldr	r3, [pc, #388]	@ (800b34c <tcp_process+0x5b8>)
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	4b5f      	ldr	r3, [pc, #380]	@ (800b34c <tcp_process+0x5b8>)
 800b1ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1d4:	009a      	lsls	r2, r3, #2
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b1e0:	428b      	cmp	r3, r1
 800b1e2:	bf38      	it	cc
 800b1e4:	460b      	movcc	r3, r1
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d204      	bcs.n	800b1f4 <tcp_process+0x460>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	e00d      	b.n	800b210 <tcp_process+0x47c>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d904      	bls.n	800b20c <tcp_process+0x478>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	b29b      	uxth	r3, r3
 800b20a:	e001      	b.n	800b210 <tcp_process+0x47c>
 800b20c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b216:	4b4e      	ldr	r3, [pc, #312]	@ (800b350 <tcp_process+0x5bc>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	f003 0320 	and.w	r3, r3, #32
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d037      	beq.n	800b292 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	8b5b      	ldrh	r3, [r3, #26]
 800b226:	f043 0302 	orr.w	r3, r3, #2
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2207      	movs	r2, #7
 800b234:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b236:	e02c      	b.n	800b292 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b238:	4b3b      	ldr	r3, [pc, #236]	@ (800b328 <tcp_process+0x594>)
 800b23a:	6819      	ldr	r1, [r3, #0]
 800b23c:	4b3b      	ldr	r3, [pc, #236]	@ (800b32c <tcp_process+0x598>)
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	461a      	mov	r2, r3
 800b242:	4b3b      	ldr	r3, [pc, #236]	@ (800b330 <tcp_process+0x59c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b248:	4b3a      	ldr	r3, [pc, #232]	@ (800b334 <tcp_process+0x5a0>)
 800b24a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b24c:	885b      	ldrh	r3, [r3, #2]
 800b24e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b250:	4a38      	ldr	r2, [pc, #224]	@ (800b334 <tcp_process+0x5a0>)
 800b252:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b254:	8812      	ldrh	r2, [r2, #0]
 800b256:	b292      	uxth	r2, r2
 800b258:	9202      	str	r2, [sp, #8]
 800b25a:	9301      	str	r3, [sp, #4]
 800b25c:	4b36      	ldr	r3, [pc, #216]	@ (800b338 <tcp_process+0x5a4>)
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	4b36      	ldr	r3, [pc, #216]	@ (800b33c <tcp_process+0x5a8>)
 800b262:	4602      	mov	r2, r0
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f002 fbcb 	bl	800da00 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b26a:	e167      	b.n	800b53c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b26c:	4b2d      	ldr	r3, [pc, #180]	@ (800b324 <tcp_process+0x590>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	f003 0302 	and.w	r3, r3, #2
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 8161 	beq.w	800b53c <tcp_process+0x7a8>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27e:	1e5a      	subs	r2, r3, #1
 800b280:	4b2b      	ldr	r3, [pc, #172]	@ (800b330 <tcp_process+0x59c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	f040 8159 	bne.w	800b53c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f002 f9b2 	bl	800d5f4 <tcp_rexmit>
      break;
 800b290:	e154      	b.n	800b53c <tcp_process+0x7a8>
 800b292:	e153      	b.n	800b53c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fa71 	bl	800b77c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b29a:	4b2d      	ldr	r3, [pc, #180]	@ (800b350 <tcp_process+0x5bc>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	f003 0320 	and.w	r3, r3, #32
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 814c 	beq.w	800b540 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	8b5b      	ldrh	r3, [r3, #26]
 800b2ac:	f043 0302 	orr.w	r3, r3, #2
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2207      	movs	r2, #7
 800b2ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b2bc:	e140      	b.n	800b540 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fa5c 	bl	800b77c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b2c4:	4b22      	ldr	r3, [pc, #136]	@ (800b350 <tcp_process+0x5bc>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 0320 	and.w	r3, r3, #32
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d071      	beq.n	800b3b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b2d0:	4b14      	ldr	r3, [pc, #80]	@ (800b324 <tcp_process+0x590>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	f003 0310 	and.w	r3, r3, #16
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d060      	beq.n	800b39e <tcp_process+0x60a>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2e0:	4b11      	ldr	r3, [pc, #68]	@ (800b328 <tcp_process+0x594>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d15a      	bne.n	800b39e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d156      	bne.n	800b39e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	8b5b      	ldrh	r3, [r3, #26]
 800b2f4:	f043 0302 	orr.w	r3, r3, #2
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7fe fdbc 	bl	8009e7c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b304:	4b13      	ldr	r3, [pc, #76]	@ (800b354 <tcp_process+0x5c0>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d105      	bne.n	800b31a <tcp_process+0x586>
 800b30e:	4b11      	ldr	r3, [pc, #68]	@ (800b354 <tcp_process+0x5c0>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	4a0f      	ldr	r2, [pc, #60]	@ (800b354 <tcp_process+0x5c0>)
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	e02e      	b.n	800b378 <tcp_process+0x5e4>
 800b31a:	4b0e      	ldr	r3, [pc, #56]	@ (800b354 <tcp_process+0x5c0>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	e027      	b.n	800b372 <tcp_process+0x5de>
 800b322:	bf00      	nop
 800b324:	24007cb0 	.word	0x24007cb0
 800b328:	24007ca8 	.word	0x24007ca8
 800b32c:	24007cae 	.word	0x24007cae
 800b330:	24007ca4 	.word	0x24007ca4
 800b334:	24007c94 	.word	0x24007c94
 800b338:	24004d54 	.word	0x24004d54
 800b33c:	24004d58 	.word	0x24004d58
 800b340:	08011128 	.word	0x08011128
 800b344:	0801143c 	.word	0x0801143c
 800b348:	080111e8 	.word	0x080111e8
 800b34c:	24007cac 	.word	0x24007cac
 800b350:	24007cb1 	.word	0x24007cb1
 800b354:	24007c78 	.word	0x24007c78
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d104      	bne.n	800b36c <tcp_process+0x5d8>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68da      	ldr	r2, [r3, #12]
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	60da      	str	r2, [r3, #12]
 800b36a:	e005      	b.n	800b378 <tcp_process+0x5e4>
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	617b      	str	r3, [r7, #20]
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1ef      	bne.n	800b358 <tcp_process+0x5c4>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	60da      	str	r2, [r3, #12]
 800b37e:	4b77      	ldr	r3, [pc, #476]	@ (800b55c <tcp_process+0x7c8>)
 800b380:	2201      	movs	r2, #1
 800b382:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	220a      	movs	r2, #10
 800b388:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b38a:	4b75      	ldr	r3, [pc, #468]	@ (800b560 <tcp_process+0x7cc>)
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	60da      	str	r2, [r3, #12]
 800b392:	4a73      	ldr	r2, [pc, #460]	@ (800b560 <tcp_process+0x7cc>)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	f002 fcf4 	bl	800dd84 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b39c:	e0d2      	b.n	800b544 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8b5b      	ldrh	r3, [r3, #26]
 800b3a2:	f043 0302 	orr.w	r3, r3, #2
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2208      	movs	r2, #8
 800b3b0:	751a      	strb	r2, [r3, #20]
      break;
 800b3b2:	e0c7      	b.n	800b544 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b3b4:	4b6b      	ldr	r3, [pc, #428]	@ (800b564 <tcp_process+0x7d0>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	f003 0310 	and.w	r3, r3, #16
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 80c1 	beq.w	800b544 <tcp_process+0x7b0>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3c6:	4b68      	ldr	r3, [pc, #416]	@ (800b568 <tcp_process+0x7d4>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	f040 80ba 	bne.w	800b544 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f040 80b5 	bne.w	800b544 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2206      	movs	r2, #6
 800b3de:	751a      	strb	r2, [r3, #20]
      break;
 800b3e0:	e0b0      	b.n	800b544 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f9ca 	bl	800b77c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b3e8:	4b60      	ldr	r3, [pc, #384]	@ (800b56c <tcp_process+0x7d8>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	f003 0320 	and.w	r3, r3, #32
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 80a9 	beq.w	800b548 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	8b5b      	ldrh	r3, [r3, #26]
 800b3fa:	f043 0302 	orr.w	r3, r3, #2
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7fe fd39 	bl	8009e7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b40a:	4b59      	ldr	r3, [pc, #356]	@ (800b570 <tcp_process+0x7dc>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	429a      	cmp	r2, r3
 800b412:	d105      	bne.n	800b420 <tcp_process+0x68c>
 800b414:	4b56      	ldr	r3, [pc, #344]	@ (800b570 <tcp_process+0x7dc>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	4a55      	ldr	r2, [pc, #340]	@ (800b570 <tcp_process+0x7dc>)
 800b41c:	6013      	str	r3, [r2, #0]
 800b41e:	e013      	b.n	800b448 <tcp_process+0x6b4>
 800b420:	4b53      	ldr	r3, [pc, #332]	@ (800b570 <tcp_process+0x7dc>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	613b      	str	r3, [r7, #16]
 800b426:	e00c      	b.n	800b442 <tcp_process+0x6ae>
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d104      	bne.n	800b43c <tcp_process+0x6a8>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68da      	ldr	r2, [r3, #12]
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	60da      	str	r2, [r3, #12]
 800b43a:	e005      	b.n	800b448 <tcp_process+0x6b4>
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	613b      	str	r3, [r7, #16]
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1ef      	bne.n	800b428 <tcp_process+0x694>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	60da      	str	r2, [r3, #12]
 800b44e:	4b43      	ldr	r3, [pc, #268]	@ (800b55c <tcp_process+0x7c8>)
 800b450:	2201      	movs	r2, #1
 800b452:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	220a      	movs	r2, #10
 800b458:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b45a:	4b41      	ldr	r3, [pc, #260]	@ (800b560 <tcp_process+0x7cc>)
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	60da      	str	r2, [r3, #12]
 800b462:	4a3f      	ldr	r2, [pc, #252]	@ (800b560 <tcp_process+0x7cc>)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6013      	str	r3, [r2, #0]
 800b468:	f002 fc8c 	bl	800dd84 <tcp_timer_needed>
      }
      break;
 800b46c:	e06c      	b.n	800b548 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f984 	bl	800b77c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b474:	4b3b      	ldr	r3, [pc, #236]	@ (800b564 <tcp_process+0x7d0>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	f003 0310 	and.w	r3, r3, #16
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d065      	beq.n	800b54c <tcp_process+0x7b8>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b484:	4b38      	ldr	r3, [pc, #224]	@ (800b568 <tcp_process+0x7d4>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d15f      	bne.n	800b54c <tcp_process+0x7b8>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b490:	2b00      	cmp	r3, #0
 800b492:	d15b      	bne.n	800b54c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7fe fcf1 	bl	8009e7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b49a:	4b35      	ldr	r3, [pc, #212]	@ (800b570 <tcp_process+0x7dc>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d105      	bne.n	800b4b0 <tcp_process+0x71c>
 800b4a4:	4b32      	ldr	r3, [pc, #200]	@ (800b570 <tcp_process+0x7dc>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	4a31      	ldr	r2, [pc, #196]	@ (800b570 <tcp_process+0x7dc>)
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	e013      	b.n	800b4d8 <tcp_process+0x744>
 800b4b0:	4b2f      	ldr	r3, [pc, #188]	@ (800b570 <tcp_process+0x7dc>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	e00c      	b.n	800b4d2 <tcp_process+0x73e>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d104      	bne.n	800b4cc <tcp_process+0x738>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	60da      	str	r2, [r3, #12]
 800b4ca:	e005      	b.n	800b4d8 <tcp_process+0x744>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1ef      	bne.n	800b4b8 <tcp_process+0x724>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	60da      	str	r2, [r3, #12]
 800b4de:	4b1f      	ldr	r3, [pc, #124]	@ (800b55c <tcp_process+0x7c8>)
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	220a      	movs	r2, #10
 800b4e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b4ea:	4b1d      	ldr	r3, [pc, #116]	@ (800b560 <tcp_process+0x7cc>)
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	60da      	str	r2, [r3, #12]
 800b4f2:	4a1b      	ldr	r2, [pc, #108]	@ (800b560 <tcp_process+0x7cc>)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	f002 fc44 	bl	800dd84 <tcp_timer_needed>
      }
      break;
 800b4fc:	e026      	b.n	800b54c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f93c 	bl	800b77c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b504:	4b17      	ldr	r3, [pc, #92]	@ (800b564 <tcp_process+0x7d0>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	f003 0310 	and.w	r3, r3, #16
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d01f      	beq.n	800b550 <tcp_process+0x7bc>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b514:	4b14      	ldr	r3, [pc, #80]	@ (800b568 <tcp_process+0x7d4>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d119      	bne.n	800b550 <tcp_process+0x7bc>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b520:	2b00      	cmp	r3, #0
 800b522:	d115      	bne.n	800b550 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b524:	4b11      	ldr	r3, [pc, #68]	@ (800b56c <tcp_process+0x7d8>)
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	f043 0310 	orr.w	r3, r3, #16
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	4b0f      	ldr	r3, [pc, #60]	@ (800b56c <tcp_process+0x7d8>)
 800b530:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b532:	e00d      	b.n	800b550 <tcp_process+0x7bc>
    default:
      break;
 800b534:	bf00      	nop
 800b536:	e00c      	b.n	800b552 <tcp_process+0x7be>
      break;
 800b538:	bf00      	nop
 800b53a:	e00a      	b.n	800b552 <tcp_process+0x7be>
      break;
 800b53c:	bf00      	nop
 800b53e:	e008      	b.n	800b552 <tcp_process+0x7be>
      break;
 800b540:	bf00      	nop
 800b542:	e006      	b.n	800b552 <tcp_process+0x7be>
      break;
 800b544:	bf00      	nop
 800b546:	e004      	b.n	800b552 <tcp_process+0x7be>
      break;
 800b548:	bf00      	nop
 800b54a:	e002      	b.n	800b552 <tcp_process+0x7be>
      break;
 800b54c:	bf00      	nop
 800b54e:	e000      	b.n	800b552 <tcp_process+0x7be>
      break;
 800b550:	bf00      	nop
  }
  return ERR_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3724      	adds	r7, #36	@ 0x24
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd90      	pop	{r4, r7, pc}
 800b55c:	24007c80 	.word	0x24007c80
 800b560:	24007c7c 	.word	0x24007c7c
 800b564:	24007cb0 	.word	0x24007cb0
 800b568:	24007ca8 	.word	0x24007ca8
 800b56c:	24007cb1 	.word	0x24007cb1
 800b570:	24007c78 	.word	0x24007c78

0800b574 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b574:	b590      	push	{r4, r7, lr}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d106      	bne.n	800b592 <tcp_oos_insert_segment+0x1e>
 800b584:	4b3b      	ldr	r3, [pc, #236]	@ (800b674 <tcp_oos_insert_segment+0x100>)
 800b586:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b58a:	493b      	ldr	r1, [pc, #236]	@ (800b678 <tcp_oos_insert_segment+0x104>)
 800b58c:	483b      	ldr	r0, [pc, #236]	@ (800b67c <tcp_oos_insert_segment+0x108>)
 800b58e:	f002 fffd 	bl	800e58c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	899b      	ldrh	r3, [r3, #12]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7f9 f90a 	bl	80047b4 <lwip_htons>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d028      	beq.n	800b5fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b5ac:	6838      	ldr	r0, [r7, #0]
 800b5ae:	f7fe fa63 	bl	8009a78 <tcp_segs_free>
    next = NULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	603b      	str	r3, [r7, #0]
 800b5b6:	e056      	b.n	800b666 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	899b      	ldrh	r3, [r3, #12]
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7f9 f8f7 	bl	80047b4 <lwip_htons>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00d      	beq.n	800b5ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	899b      	ldrh	r3, [r3, #12]
 800b5d8:	b29c      	uxth	r4, r3
 800b5da:	2001      	movs	r0, #1
 800b5dc:	f7f9 f8ea 	bl	80047b4 <lwip_htons>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	4322      	orrs	r2, r4
 800b5ea:	b292      	uxth	r2, r2
 800b5ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7fe fa52 	bl	8009aa2 <tcp_seg_free>
    while (next &&
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00e      	beq.n	800b622 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	891b      	ldrh	r3, [r3, #8]
 800b608:	461a      	mov	r2, r3
 800b60a:	4b1d      	ldr	r3, [pc, #116]	@ (800b680 <tcp_oos_insert_segment+0x10c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	441a      	add	r2, r3
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	8909      	ldrh	r1, [r1, #8]
 800b61a:	440b      	add	r3, r1
 800b61c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b61e:	2b00      	cmp	r3, #0
 800b620:	daca      	bge.n	800b5b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d01e      	beq.n	800b666 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	891b      	ldrh	r3, [r3, #8]
 800b62c:	461a      	mov	r2, r3
 800b62e:	4b14      	ldr	r3, [pc, #80]	@ (800b680 <tcp_oos_insert_segment+0x10c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	441a      	add	r2, r3
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	dd12      	ble.n	800b666 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	b29a      	uxth	r2, r3
 800b648:	4b0d      	ldr	r3, [pc, #52]	@ (800b680 <tcp_oos_insert_segment+0x10c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	b29a      	uxth	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	891b      	ldrh	r3, [r3, #8]
 800b65e:	4619      	mov	r1, r3
 800b660:	4610      	mov	r0, r2
 800b662:	f7fc fe23 	bl	80082ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	683a      	ldr	r2, [r7, #0]
 800b66a:	601a      	str	r2, [r3, #0]
}
 800b66c:	bf00      	nop
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	bd90      	pop	{r4, r7, pc}
 800b674:	08011128 	.word	0x08011128
 800b678:	0801145c 	.word	0x0801145c
 800b67c:	080111e8 	.word	0x080111e8
 800b680:	24007ca4 	.word	0x24007ca4

0800b684 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b684:	b5b0      	push	{r4, r5, r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b692:	e03e      	b.n	800b712 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fd f810 	bl	80086c8 <pbuf_clen>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b6b2:	8a7a      	ldrh	r2, [r7, #18]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d906      	bls.n	800b6c6 <tcp_free_acked_segments+0x42>
 800b6b8:	4b2a      	ldr	r3, [pc, #168]	@ (800b764 <tcp_free_acked_segments+0xe0>)
 800b6ba:	f240 4257 	movw	r2, #1111	@ 0x457
 800b6be:	492a      	ldr	r1, [pc, #168]	@ (800b768 <tcp_free_acked_segments+0xe4>)
 800b6c0:	482a      	ldr	r0, [pc, #168]	@ (800b76c <tcp_free_acked_segments+0xe8>)
 800b6c2:	f002 ff63 	bl	800e58c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800b6cc:	8a7b      	ldrh	r3, [r7, #18]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	891a      	ldrh	r2, [r3, #8]
 800b6dc:	4b24      	ldr	r3, [pc, #144]	@ (800b770 <tcp_free_acked_segments+0xec>)
 800b6de:	881b      	ldrh	r3, [r3, #0]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	4b22      	ldr	r3, [pc, #136]	@ (800b770 <tcp_free_acked_segments+0xec>)
 800b6e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b6e8:	6978      	ldr	r0, [r7, #20]
 800b6ea:	f7fe f9da 	bl	8009aa2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00c      	beq.n	800b712 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d109      	bne.n	800b712 <tcp_free_acked_segments+0x8e>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d106      	bne.n	800b712 <tcp_free_acked_segments+0x8e>
 800b704:	4b17      	ldr	r3, [pc, #92]	@ (800b764 <tcp_free_acked_segments+0xe0>)
 800b706:	f240 4261 	movw	r2, #1121	@ 0x461
 800b70a:	491a      	ldr	r1, [pc, #104]	@ (800b774 <tcp_free_acked_segments+0xf0>)
 800b70c:	4817      	ldr	r0, [pc, #92]	@ (800b76c <tcp_free_acked_segments+0xe8>)
 800b70e:	f002 ff3d 	bl	800e58c <iprintf>
  while (seg_list != NULL &&
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d020      	beq.n	800b75a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f9 f85d 	bl	80047de <lwip_htonl>
 800b724:	4604      	mov	r4, r0
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	891b      	ldrh	r3, [r3, #8]
 800b72a:	461d      	mov	r5, r3
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	899b      	ldrh	r3, [r3, #12]
 800b732:	b29b      	uxth	r3, r3
 800b734:	4618      	mov	r0, r3
 800b736:	f7f9 f83d 	bl	80047b4 <lwip_htons>
 800b73a:	4603      	mov	r3, r0
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	f003 0303 	and.w	r3, r3, #3
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <tcp_free_acked_segments+0xc6>
 800b746:	2301      	movs	r3, #1
 800b748:	e000      	b.n	800b74c <tcp_free_acked_segments+0xc8>
 800b74a:	2300      	movs	r3, #0
 800b74c:	442b      	add	r3, r5
 800b74e:	18e2      	adds	r2, r4, r3
 800b750:	4b09      	ldr	r3, [pc, #36]	@ (800b778 <tcp_free_acked_segments+0xf4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b756:	2b00      	cmp	r3, #0
 800b758:	dd9c      	ble.n	800b694 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b75a:	68bb      	ldr	r3, [r7, #8]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3718      	adds	r7, #24
 800b760:	46bd      	mov	sp, r7
 800b762:	bdb0      	pop	{r4, r5, r7, pc}
 800b764:	08011128 	.word	0x08011128
 800b768:	08011484 	.word	0x08011484
 800b76c:	080111e8 	.word	0x080111e8
 800b770:	24007cac 	.word	0x24007cac
 800b774:	080114ac 	.word	0x080114ac
 800b778:	24007ca8 	.word	0x24007ca8

0800b77c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b77c:	b5b0      	push	{r4, r5, r7, lr}
 800b77e:	b094      	sub	sp, #80	@ 0x50
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b784:	2300      	movs	r3, #0
 800b786:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d106      	bne.n	800b79c <tcp_receive+0x20>
 800b78e:	4b91      	ldr	r3, [pc, #580]	@ (800b9d4 <tcp_receive+0x258>)
 800b790:	f240 427b 	movw	r2, #1147	@ 0x47b
 800b794:	4990      	ldr	r1, [pc, #576]	@ (800b9d8 <tcp_receive+0x25c>)
 800b796:	4891      	ldr	r0, [pc, #580]	@ (800b9dc <tcp_receive+0x260>)
 800b798:	f002 fef8 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	7d1b      	ldrb	r3, [r3, #20]
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d806      	bhi.n	800b7b2 <tcp_receive+0x36>
 800b7a4:	4b8b      	ldr	r3, [pc, #556]	@ (800b9d4 <tcp_receive+0x258>)
 800b7a6:	f240 427c 	movw	r2, #1148	@ 0x47c
 800b7aa:	498d      	ldr	r1, [pc, #564]	@ (800b9e0 <tcp_receive+0x264>)
 800b7ac:	488b      	ldr	r0, [pc, #556]	@ (800b9dc <tcp_receive+0x260>)
 800b7ae:	f002 feed 	bl	800e58c <iprintf>

  if (flags & TCP_ACK) {
 800b7b2:	4b8c      	ldr	r3, [pc, #560]	@ (800b9e4 <tcp_receive+0x268>)
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	f003 0310 	and.w	r3, r3, #16
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 8264 	beq.w	800bc88 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7cc:	4413      	add	r3, r2
 800b7ce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b7d4:	4b84      	ldr	r3, [pc, #528]	@ (800b9e8 <tcp_receive+0x26c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	db1b      	blt.n	800b816 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b7e2:	4b81      	ldr	r3, [pc, #516]	@ (800b9e8 <tcp_receive+0x26c>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d106      	bne.n	800b7f8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b7ee:	4b7f      	ldr	r3, [pc, #508]	@ (800b9ec <tcp_receive+0x270>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	db0e      	blt.n	800b816 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b7fc:	4b7b      	ldr	r3, [pc, #492]	@ (800b9ec <tcp_receive+0x270>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b800:	429a      	cmp	r2, r3
 800b802:	d125      	bne.n	800b850 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b804:	4b7a      	ldr	r3, [pc, #488]	@ (800b9f0 <tcp_receive+0x274>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	89db      	ldrh	r3, [r3, #14]
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b812:	429a      	cmp	r2, r3
 800b814:	d91c      	bls.n	800b850 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b816:	4b76      	ldr	r3, [pc, #472]	@ (800b9f0 <tcp_receive+0x274>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	89db      	ldrh	r3, [r3, #14]
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b830:	429a      	cmp	r2, r3
 800b832:	d205      	bcs.n	800b840 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800b840:	4b69      	ldr	r3, [pc, #420]	@ (800b9e8 <tcp_receive+0x26c>)
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800b848:	4b68      	ldr	r3, [pc, #416]	@ (800b9ec <tcp_receive+0x270>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b850:	4b66      	ldr	r3, [pc, #408]	@ (800b9ec <tcp_receive+0x270>)
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	dc58      	bgt.n	800b910 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b85e:	4b65      	ldr	r3, [pc, #404]	@ (800b9f4 <tcp_receive+0x278>)
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d14b      	bne.n	800b8fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800b870:	4413      	add	r3, r2
 800b872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b874:	429a      	cmp	r2, r3
 800b876:	d142      	bne.n	800b8fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b87e:	2b00      	cmp	r3, #0
 800b880:	db3d      	blt.n	800b8fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b886:	4b59      	ldr	r3, [pc, #356]	@ (800b9ec <tcp_receive+0x270>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d137      	bne.n	800b8fe <tcp_receive+0x182>
              found_dupack = 1;
 800b88e:	2301      	movs	r3, #1
 800b890:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b898:	2bff      	cmp	r3, #255	@ 0xff
 800b89a:	d007      	beq.n	800b8ac <tcp_receive+0x130>
                ++pcb->dupacks;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	d91b      	bls.n	800b8ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8c0:	4413      	add	r3, r2
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d30a      	bcc.n	800b8e4 <tcp_receive+0x168>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8d8:	4413      	add	r3, r2
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b8e2:	e004      	b.n	800b8ee <tcp_receive+0x172>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b8ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d902      	bls.n	800b8fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f001 fee7 	bl	800d6cc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b8fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b900:	2b00      	cmp	r3, #0
 800b902:	f040 8161 	bne.w	800bbc8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b90e:	e15b      	b.n	800bbc8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b910:	4b36      	ldr	r3, [pc, #216]	@ (800b9ec <tcp_receive+0x270>)
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	3b01      	subs	r3, #1
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f2c0 814e 	blt.w	800bbbe <tcp_receive+0x442>
 800b922:	4b32      	ldr	r3, [pc, #200]	@ (800b9ec <tcp_receive+0x270>)
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f300 8146 	bgt.w	800bbbe <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	8b5b      	ldrh	r3, [r3, #26]
 800b936:	f003 0304 	and.w	r3, r3, #4
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d010      	beq.n	800b960 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	8b5b      	ldrh	r3, [r3, #26]
 800b942:	f023 0304 	bic.w	r3, r3, #4
 800b946:	b29a      	uxth	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b96e:	10db      	asrs	r3, r3, #3
 800b970:	b21b      	sxth	r3, r3
 800b972:	b29a      	uxth	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	4413      	add	r3, r2
 800b97e:	b29b      	uxth	r3, r3
 800b980:	b21a      	sxth	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b988:	4b18      	ldr	r3, [pc, #96]	@ (800b9ec <tcp_receive+0x270>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b992:	b29b      	uxth	r3, r3
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b9a0:	4b12      	ldr	r3, [pc, #72]	@ (800b9ec <tcp_receive+0x270>)
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	7d1b      	ldrb	r3, [r3, #20]
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	f240 8097 	bls.w	800bae0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d245      	bcs.n	800ba4e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	8b5b      	ldrh	r3, [r3, #26]
 800b9c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d014      	beq.n	800b9f8 <tcp_receive+0x27c>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e013      	b.n	800b9fa <tcp_receive+0x27e>
 800b9d2:	bf00      	nop
 800b9d4:	08011128 	.word	0x08011128
 800b9d8:	080114cc 	.word	0x080114cc
 800b9dc:	080111e8 	.word	0x080111e8
 800b9e0:	080114e8 	.word	0x080114e8
 800b9e4:	24007cb0 	.word	0x24007cb0
 800b9e8:	24007ca4 	.word	0x24007ca4
 800b9ec:	24007ca8 	.word	0x24007ca8
 800b9f0:	24007c94 	.word	0x24007c94
 800b9f4:	24007cae 	.word	0x24007cae
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b9fe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba08:	fb12 f303 	smulbb	r3, r2, r3
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ba10:	4293      	cmp	r3, r2
 800ba12:	bf28      	it	cs
 800ba14:	4613      	movcs	r3, r2
 800ba16:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ba1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ba20:	4413      	add	r3, r2
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d309      	bcc.n	800ba42 <tcp_receive+0x2c6>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ba34:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ba36:	4413      	add	r3, r2
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ba40:	e04e      	b.n	800bae0 <tcp_receive+0x364>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba48:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ba4c:	e048      	b.n	800bae0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ba54:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba56:	4413      	add	r3, r2
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d309      	bcc.n	800ba78 <tcp_receive+0x2fc>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ba6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba6c:	4413      	add	r3, r2
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba76:	e004      	b.n	800ba82 <tcp_receive+0x306>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d326      	bcc.n	800bae0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bab2:	4413      	add	r3, r2
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800babc:	429a      	cmp	r2, r3
 800babe:	d30a      	bcc.n	800bad6 <tcp_receive+0x35a>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800baca:	4413      	add	r3, r2
 800bacc:	b29a      	uxth	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bad4:	e004      	b.n	800bae0 <tcp_receive+0x364>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800badc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bae8:	4a98      	ldr	r2, [pc, #608]	@ (800bd4c <tcp_receive+0x5d0>)
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7ff fdca 	bl	800b684 <tcp_free_acked_segments>
 800baf0:	4602      	mov	r2, r0
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bafe:	4a94      	ldr	r2, [pc, #592]	@ (800bd50 <tcp_receive+0x5d4>)
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff fdbf 	bl	800b684 <tcp_free_acked_segments>
 800bb06:	4602      	mov	r2, r0
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d104      	bne.n	800bb1e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb1a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bb1c:	e002      	b.n	800bb24 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d103      	bne.n	800bb3a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800bb40:	4b84      	ldr	r3, [pc, #528]	@ (800bd54 <tcp_receive+0x5d8>)
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	4413      	add	r3, r2
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	8b5b      	ldrh	r3, [r3, #26]
 800bb52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d035      	beq.n	800bbc6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d118      	bne.n	800bb94 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00c      	beq.n	800bb84 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7f8 fe31 	bl	80047de <lwip_htonl>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	dc20      	bgt.n	800bbc6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	8b5b      	ldrh	r3, [r3, #26]
 800bb88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bb92:	e018      	b.n	800bbc6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7f8 fe1c 	bl	80047de <lwip_htonl>
 800bba6:	4603      	mov	r3, r0
 800bba8:	1ae3      	subs	r3, r4, r3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dc0b      	bgt.n	800bbc6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	8b5b      	ldrh	r3, [r3, #26]
 800bbb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bbb6:	b29a      	uxth	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bbbc:	e003      	b.n	800bbc6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f001 ff70 	bl	800daa4 <tcp_send_empty_ack>
 800bbc4:	e000      	b.n	800bbc8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bbc6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d05b      	beq.n	800bc88 <tcp_receive+0x50c>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbd4:	4b60      	ldr	r3, [pc, #384]	@ (800bd58 <tcp_receive+0x5dc>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	da54      	bge.n	800bc88 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bbde:	4b5f      	ldr	r3, [pc, #380]	@ (800bd5c <tcp_receive+0x5e0>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bbf2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bbfc:	10db      	asrs	r3, r3, #3
 800bbfe:	b21b      	sxth	r3, r3
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bc16:	4413      	add	r3, r2
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	b21a      	sxth	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800bc20:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	da05      	bge.n	800bc34 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bc28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bc2c:	425b      	negs	r3, r3
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bc34:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bc3e:	109b      	asrs	r3, r3, #2
 800bc40:	b21b      	sxth	r3, r3
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bc58:	4413      	add	r3, r2
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	b21a      	sxth	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bc68:	10db      	asrs	r3, r3, #3
 800bc6a:	b21b      	sxth	r3, r3
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	4413      	add	r3, r2
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	b21a      	sxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bc88:	4b35      	ldr	r3, [pc, #212]	@ (800bd60 <tcp_receive+0x5e4>)
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f000 84df 	beq.w	800c650 <tcp_receive+0xed4>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	7d1b      	ldrb	r3, [r3, #20]
 800bc96:	2b06      	cmp	r3, #6
 800bc98:	f200 84da 	bhi.w	800c650 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bca0:	4b30      	ldr	r3, [pc, #192]	@ (800bd64 <tcp_receive+0x5e8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	3b01      	subs	r3, #1
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f2c0 808f 	blt.w	800bdcc <tcp_receive+0x650>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcb2:	4b2b      	ldr	r3, [pc, #172]	@ (800bd60 <tcp_receive+0x5e4>)
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	4b2a      	ldr	r3, [pc, #168]	@ (800bd64 <tcp_receive+0x5e8>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	440b      	add	r3, r1
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f300 8082 	bgt.w	800bdcc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bcc8:	4b27      	ldr	r3, [pc, #156]	@ (800bd68 <tcp_receive+0x5ec>)
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcd2:	4b24      	ldr	r3, [pc, #144]	@ (800bd64 <tcp_receive+0x5e8>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bcda:	4b23      	ldr	r3, [pc, #140]	@ (800bd68 <tcp_receive+0x5ec>)
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <tcp_receive+0x574>
 800bce2:	4b22      	ldr	r3, [pc, #136]	@ (800bd6c <tcp_receive+0x5f0>)
 800bce4:	f240 5294 	movw	r2, #1428	@ 0x594
 800bce8:	4921      	ldr	r1, [pc, #132]	@ (800bd70 <tcp_receive+0x5f4>)
 800bcea:	4822      	ldr	r0, [pc, #136]	@ (800bd74 <tcp_receive+0x5f8>)
 800bcec:	f002 fc4e 	bl	800e58c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d906      	bls.n	800bd08 <tcp_receive+0x58c>
 800bcfa:	4b1c      	ldr	r3, [pc, #112]	@ (800bd6c <tcp_receive+0x5f0>)
 800bcfc:	f240 5295 	movw	r2, #1429	@ 0x595
 800bd00:	491d      	ldr	r1, [pc, #116]	@ (800bd78 <tcp_receive+0x5fc>)
 800bd02:	481c      	ldr	r0, [pc, #112]	@ (800bd74 <tcp_receive+0x5f8>)
 800bd04:	f002 fc42 	bl	800e58c <iprintf>
      off = (u16_t)off32;
 800bd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bd0e:	4b16      	ldr	r3, [pc, #88]	@ (800bd68 <tcp_receive+0x5ec>)
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	891b      	ldrh	r3, [r3, #8]
 800bd14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d906      	bls.n	800bd2a <tcp_receive+0x5ae>
 800bd1c:	4b13      	ldr	r3, [pc, #76]	@ (800bd6c <tcp_receive+0x5f0>)
 800bd1e:	f240 5297 	movw	r2, #1431	@ 0x597
 800bd22:	4916      	ldr	r1, [pc, #88]	@ (800bd7c <tcp_receive+0x600>)
 800bd24:	4813      	ldr	r0, [pc, #76]	@ (800bd74 <tcp_receive+0x5f8>)
 800bd26:	f002 fc31 	bl	800e58c <iprintf>
      inseg.len -= off;
 800bd2a:	4b0f      	ldr	r3, [pc, #60]	@ (800bd68 <tcp_receive+0x5ec>)
 800bd2c:	891a      	ldrh	r2, [r3, #8]
 800bd2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	4b0c      	ldr	r3, [pc, #48]	@ (800bd68 <tcp_receive+0x5ec>)
 800bd38:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bd3a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd68 <tcp_receive+0x5ec>)
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	891a      	ldrh	r2, [r3, #8]
 800bd40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800bd48:	e02a      	b.n	800bda0 <tcp_receive+0x624>
 800bd4a:	bf00      	nop
 800bd4c:	08011504 	.word	0x08011504
 800bd50:	0801150c 	.word	0x0801150c
 800bd54:	24007cac 	.word	0x24007cac
 800bd58:	24007ca8 	.word	0x24007ca8
 800bd5c:	24007c6c 	.word	0x24007c6c
 800bd60:	24007cae 	.word	0x24007cae
 800bd64:	24007ca4 	.word	0x24007ca4
 800bd68:	24007c84 	.word	0x24007c84
 800bd6c:	08011128 	.word	0x08011128
 800bd70:	08011514 	.word	0x08011514
 800bd74:	080111e8 	.word	0x080111e8
 800bd78:	08011524 	.word	0x08011524
 800bd7c:	08011534 	.word	0x08011534
        off -= p->len;
 800bd80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd82:	895b      	ldrh	r3, [r3, #10]
 800bd84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bd8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd90:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bd92:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bd94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd96:	2200      	movs	r2, #0
 800bd98:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bd9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800bda0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bda2:	895b      	ldrh	r3, [r3, #10]
 800bda4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d8e9      	bhi.n	800bd80 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bdac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bdb4:	f7fc fb7a 	bl	80084ac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdbc:	4a90      	ldr	r2, [pc, #576]	@ (800c000 <tcp_receive+0x884>)
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	4b90      	ldr	r3, [pc, #576]	@ (800c004 <tcp_receive+0x888>)
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	4a8e      	ldr	r2, [pc, #568]	@ (800c000 <tcp_receive+0x884>)
 800bdc6:	6812      	ldr	r2, [r2, #0]
 800bdc8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bdca:	e00d      	b.n	800bde8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bdcc:	4b8c      	ldr	r3, [pc, #560]	@ (800c000 <tcp_receive+0x884>)
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	da06      	bge.n	800bde8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	8b5b      	ldrh	r3, [r3, #26]
 800bdde:	f043 0302 	orr.w	r3, r3, #2
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bde8:	4b85      	ldr	r3, [pc, #532]	@ (800c000 <tcp_receive+0x884>)
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f2c0 8427 	blt.w	800c646 <tcp_receive+0xeca>
 800bdf8:	4b81      	ldr	r3, [pc, #516]	@ (800c000 <tcp_receive+0x884>)
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be00:	6879      	ldr	r1, [r7, #4]
 800be02:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800be04:	440b      	add	r3, r1
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	3301      	adds	r3, #1
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f300 841b 	bgt.w	800c646 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be14:	4b7a      	ldr	r3, [pc, #488]	@ (800c000 <tcp_receive+0x884>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	429a      	cmp	r2, r3
 800be1a:	f040 8298 	bne.w	800c34e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800be1e:	4b79      	ldr	r3, [pc, #484]	@ (800c004 <tcp_receive+0x888>)
 800be20:	891c      	ldrh	r4, [r3, #8]
 800be22:	4b78      	ldr	r3, [pc, #480]	@ (800c004 <tcp_receive+0x888>)
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	899b      	ldrh	r3, [r3, #12]
 800be28:	b29b      	uxth	r3, r3
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f8 fcc2 	bl	80047b4 <lwip_htons>
 800be30:	4603      	mov	r3, r0
 800be32:	b2db      	uxtb	r3, r3
 800be34:	f003 0303 	and.w	r3, r3, #3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <tcp_receive+0x6c4>
 800be3c:	2301      	movs	r3, #1
 800be3e:	e000      	b.n	800be42 <tcp_receive+0x6c6>
 800be40:	2300      	movs	r3, #0
 800be42:	4423      	add	r3, r4
 800be44:	b29a      	uxth	r2, r3
 800be46:	4b70      	ldr	r3, [pc, #448]	@ (800c008 <tcp_receive+0x88c>)
 800be48:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800be4e:	4b6e      	ldr	r3, [pc, #440]	@ (800c008 <tcp_receive+0x88c>)
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	429a      	cmp	r2, r3
 800be54:	d274      	bcs.n	800bf40 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800be56:	4b6b      	ldr	r3, [pc, #428]	@ (800c004 <tcp_receive+0x888>)
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	899b      	ldrh	r3, [r3, #12]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	4618      	mov	r0, r3
 800be60:	f7f8 fca8 	bl	80047b4 <lwip_htons>
 800be64:	4603      	mov	r3, r0
 800be66:	b2db      	uxtb	r3, r3
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d01e      	beq.n	800beae <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800be70:	4b64      	ldr	r3, [pc, #400]	@ (800c004 <tcp_receive+0x888>)
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	899b      	ldrh	r3, [r3, #12]
 800be76:	b29b      	uxth	r3, r3
 800be78:	b21b      	sxth	r3, r3
 800be7a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be7e:	b21c      	sxth	r4, r3
 800be80:	4b60      	ldr	r3, [pc, #384]	@ (800c004 <tcp_receive+0x888>)
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	899b      	ldrh	r3, [r3, #12]
 800be86:	b29b      	uxth	r3, r3
 800be88:	4618      	mov	r0, r3
 800be8a:	f7f8 fc93 	bl	80047b4 <lwip_htons>
 800be8e:	4603      	mov	r3, r0
 800be90:	b2db      	uxtb	r3, r3
 800be92:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800be96:	b29b      	uxth	r3, r3
 800be98:	4618      	mov	r0, r3
 800be9a:	f7f8 fc8b 	bl	80047b4 <lwip_htons>
 800be9e:	4603      	mov	r3, r0
 800bea0:	b21b      	sxth	r3, r3
 800bea2:	4323      	orrs	r3, r4
 800bea4:	b21a      	sxth	r2, r3
 800bea6:	4b57      	ldr	r3, [pc, #348]	@ (800c004 <tcp_receive+0x888>)
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	b292      	uxth	r2, r2
 800beac:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800beb2:	4b54      	ldr	r3, [pc, #336]	@ (800c004 <tcp_receive+0x888>)
 800beb4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800beb6:	4b53      	ldr	r3, [pc, #332]	@ (800c004 <tcp_receive+0x888>)
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	899b      	ldrh	r3, [r3, #12]
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7f8 fc78 	bl	80047b4 <lwip_htons>
 800bec4:	4603      	mov	r3, r0
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	f003 0302 	and.w	r3, r3, #2
 800becc:	2b00      	cmp	r3, #0
 800bece:	d005      	beq.n	800bedc <tcp_receive+0x760>
            inseg.len -= 1;
 800bed0:	4b4c      	ldr	r3, [pc, #304]	@ (800c004 <tcp_receive+0x888>)
 800bed2:	891b      	ldrh	r3, [r3, #8]
 800bed4:	3b01      	subs	r3, #1
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	4b4a      	ldr	r3, [pc, #296]	@ (800c004 <tcp_receive+0x888>)
 800beda:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bedc:	4b49      	ldr	r3, [pc, #292]	@ (800c004 <tcp_receive+0x888>)
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	4a48      	ldr	r2, [pc, #288]	@ (800c004 <tcp_receive+0x888>)
 800bee2:	8912      	ldrh	r2, [r2, #8]
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fc f9e0 	bl	80082ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800beec:	4b45      	ldr	r3, [pc, #276]	@ (800c004 <tcp_receive+0x888>)
 800beee:	891c      	ldrh	r4, [r3, #8]
 800bef0:	4b44      	ldr	r3, [pc, #272]	@ (800c004 <tcp_receive+0x888>)
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	899b      	ldrh	r3, [r3, #12]
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	4618      	mov	r0, r3
 800befa:	f7f8 fc5b 	bl	80047b4 <lwip_htons>
 800befe:	4603      	mov	r3, r0
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	f003 0303 	and.w	r3, r3, #3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <tcp_receive+0x792>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e000      	b.n	800bf10 <tcp_receive+0x794>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4423      	add	r3, r4
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	4b3c      	ldr	r3, [pc, #240]	@ (800c008 <tcp_receive+0x88c>)
 800bf16:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf18:	4b3b      	ldr	r3, [pc, #236]	@ (800c008 <tcp_receive+0x88c>)
 800bf1a:	881b      	ldrh	r3, [r3, #0]
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	4b38      	ldr	r3, [pc, #224]	@ (800c000 <tcp_receive+0x884>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	441a      	add	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf28:	6879      	ldr	r1, [r7, #4]
 800bf2a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bf2c:	440b      	add	r3, r1
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d006      	beq.n	800bf40 <tcp_receive+0x7c4>
 800bf32:	4b36      	ldr	r3, [pc, #216]	@ (800c00c <tcp_receive+0x890>)
 800bf34:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800bf38:	4935      	ldr	r1, [pc, #212]	@ (800c010 <tcp_receive+0x894>)
 800bf3a:	4836      	ldr	r0, [pc, #216]	@ (800c014 <tcp_receive+0x898>)
 800bf3c:	f002 fb26 	bl	800e58c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 80e6 	beq.w	800c116 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bf4a:	4b2e      	ldr	r3, [pc, #184]	@ (800c004 <tcp_receive+0x888>)
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	899b      	ldrh	r3, [r3, #12]
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7f8 fc2e 	bl	80047b4 <lwip_htons>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d010      	beq.n	800bf86 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bf64:	e00a      	b.n	800bf7c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf6a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7fd fd93 	bl	8009aa2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1f0      	bne.n	800bf66 <tcp_receive+0x7ea>
 800bf84:	e0c7      	b.n	800c116 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bf8c:	e051      	b.n	800c032 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bf8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	899b      	ldrh	r3, [r3, #12]
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7f8 fc0c 	bl	80047b4 <lwip_htons>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d03c      	beq.n	800c022 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bfa8:	4b16      	ldr	r3, [pc, #88]	@ (800c004 <tcp_receive+0x888>)
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	899b      	ldrh	r3, [r3, #12]
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7f8 fbff 	bl	80047b4 <lwip_htons>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d12f      	bne.n	800c022 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bfc2:	4b10      	ldr	r3, [pc, #64]	@ (800c004 <tcp_receive+0x888>)
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	899b      	ldrh	r3, [r3, #12]
 800bfc8:	b29c      	uxth	r4, r3
 800bfca:	2001      	movs	r0, #1
 800bfcc:	f7f8 fbf2 	bl	80047b4 <lwip_htons>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	4b0b      	ldr	r3, [pc, #44]	@ (800c004 <tcp_receive+0x888>)
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	4322      	orrs	r2, r4
 800bfda:	b292      	uxth	r2, r2
 800bfdc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bfde:	4b09      	ldr	r3, [pc, #36]	@ (800c004 <tcp_receive+0x888>)
 800bfe0:	891c      	ldrh	r4, [r3, #8]
 800bfe2:	4b08      	ldr	r3, [pc, #32]	@ (800c004 <tcp_receive+0x888>)
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	899b      	ldrh	r3, [r3, #12]
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f8 fbe2 	bl	80047b4 <lwip_htons>
 800bff0:	4603      	mov	r3, r0
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	f003 0303 	and.w	r3, r3, #3
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00d      	beq.n	800c018 <tcp_receive+0x89c>
 800bffc:	2301      	movs	r3, #1
 800bffe:	e00c      	b.n	800c01a <tcp_receive+0x89e>
 800c000:	24007ca4 	.word	0x24007ca4
 800c004:	24007c84 	.word	0x24007c84
 800c008:	24007cae 	.word	0x24007cae
 800c00c:	08011128 	.word	0x08011128
 800c010:	08011544 	.word	0x08011544
 800c014:	080111e8 	.word	0x080111e8
 800c018:	2300      	movs	r3, #0
 800c01a:	4423      	add	r3, r4
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	4b98      	ldr	r3, [pc, #608]	@ (800c280 <tcp_receive+0xb04>)
 800c020:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c024:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c02c:	6938      	ldr	r0, [r7, #16]
 800c02e:	f7fd fd38 	bl	8009aa2 <tcp_seg_free>
            while (next &&
 800c032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00e      	beq.n	800c056 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c038:	4b91      	ldr	r3, [pc, #580]	@ (800c280 <tcp_receive+0xb04>)
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	461a      	mov	r2, r3
 800c03e:	4b91      	ldr	r3, [pc, #580]	@ (800c284 <tcp_receive+0xb08>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	441a      	add	r2, r3
 800c044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c04c:	8909      	ldrh	r1, [r1, #8]
 800c04e:	440b      	add	r3, r1
 800c050:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c052:	2b00      	cmp	r3, #0
 800c054:	da9b      	bge.n	800bf8e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d059      	beq.n	800c110 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c05c:	4b88      	ldr	r3, [pc, #544]	@ (800c280 <tcp_receive+0xb04>)
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	461a      	mov	r2, r3
 800c062:	4b88      	ldr	r3, [pc, #544]	@ (800c284 <tcp_receive+0xb08>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	441a      	add	r2, r3
 800c068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c070:	2b00      	cmp	r3, #0
 800c072:	dd4d      	ble.n	800c110 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	4b81      	ldr	r3, [pc, #516]	@ (800c284 <tcp_receive+0xb08>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	b29b      	uxth	r3, r3
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	b29a      	uxth	r2, r3
 800c086:	4b80      	ldr	r3, [pc, #512]	@ (800c288 <tcp_receive+0xb0c>)
 800c088:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c08a:	4b7f      	ldr	r3, [pc, #508]	@ (800c288 <tcp_receive+0xb0c>)
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	899b      	ldrh	r3, [r3, #12]
 800c090:	b29b      	uxth	r3, r3
 800c092:	4618      	mov	r0, r3
 800c094:	f7f8 fb8e 	bl	80047b4 <lwip_htons>
 800c098:	4603      	mov	r3, r0
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	f003 0302 	and.w	r3, r3, #2
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d005      	beq.n	800c0b0 <tcp_receive+0x934>
                inseg.len -= 1;
 800c0a4:	4b78      	ldr	r3, [pc, #480]	@ (800c288 <tcp_receive+0xb0c>)
 800c0a6:	891b      	ldrh	r3, [r3, #8]
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	4b76      	ldr	r3, [pc, #472]	@ (800c288 <tcp_receive+0xb0c>)
 800c0ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c0b0:	4b75      	ldr	r3, [pc, #468]	@ (800c288 <tcp_receive+0xb0c>)
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	4a74      	ldr	r2, [pc, #464]	@ (800c288 <tcp_receive+0xb0c>)
 800c0b6:	8912      	ldrh	r2, [r2, #8]
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fc f8f6 	bl	80082ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c0c0:	4b71      	ldr	r3, [pc, #452]	@ (800c288 <tcp_receive+0xb0c>)
 800c0c2:	891c      	ldrh	r4, [r3, #8]
 800c0c4:	4b70      	ldr	r3, [pc, #448]	@ (800c288 <tcp_receive+0xb0c>)
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	899b      	ldrh	r3, [r3, #12]
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f8 fb71 	bl	80047b4 <lwip_htons>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	f003 0303 	and.w	r3, r3, #3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d001      	beq.n	800c0e2 <tcp_receive+0x966>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	e000      	b.n	800c0e4 <tcp_receive+0x968>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	4423      	add	r3, r4
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	4b65      	ldr	r3, [pc, #404]	@ (800c280 <tcp_receive+0xb04>)
 800c0ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c0ec:	4b64      	ldr	r3, [pc, #400]	@ (800c280 <tcp_receive+0xb04>)
 800c0ee:	881b      	ldrh	r3, [r3, #0]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	4b64      	ldr	r3, [pc, #400]	@ (800c284 <tcp_receive+0xb08>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	441a      	add	r2, r3
 800c0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d006      	beq.n	800c110 <tcp_receive+0x994>
 800c102:	4b62      	ldr	r3, [pc, #392]	@ (800c28c <tcp_receive+0xb10>)
 800c104:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c108:	4961      	ldr	r1, [pc, #388]	@ (800c290 <tcp_receive+0xb14>)
 800c10a:	4862      	ldr	r0, [pc, #392]	@ (800c294 <tcp_receive+0xb18>)
 800c10c:	f002 fa3e 	bl	800e58c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c114:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c116:	4b5a      	ldr	r3, [pc, #360]	@ (800c280 <tcp_receive+0xb04>)
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	4b59      	ldr	r3, [pc, #356]	@ (800c284 <tcp_receive+0xb08>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	441a      	add	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c12a:	4b55      	ldr	r3, [pc, #340]	@ (800c280 <tcp_receive+0xb04>)
 800c12c:	881b      	ldrh	r3, [r3, #0]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d206      	bcs.n	800c140 <tcp_receive+0x9c4>
 800c132:	4b56      	ldr	r3, [pc, #344]	@ (800c28c <tcp_receive+0xb10>)
 800c134:	f240 6207 	movw	r2, #1543	@ 0x607
 800c138:	4957      	ldr	r1, [pc, #348]	@ (800c298 <tcp_receive+0xb1c>)
 800c13a:	4856      	ldr	r0, [pc, #344]	@ (800c294 <tcp_receive+0xb18>)
 800c13c:	f002 fa26 	bl	800e58c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c144:	4b4e      	ldr	r3, [pc, #312]	@ (800c280 <tcp_receive+0xb04>)
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7fc ffc5 	bl	80090e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c156:	4b4c      	ldr	r3, [pc, #304]	@ (800c288 <tcp_receive+0xb0c>)
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	891b      	ldrh	r3, [r3, #8]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d006      	beq.n	800c16e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c160:	4b49      	ldr	r3, [pc, #292]	@ (800c288 <tcp_receive+0xb0c>)
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	4a4d      	ldr	r2, [pc, #308]	@ (800c29c <tcp_receive+0xb20>)
 800c166:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c168:	4b47      	ldr	r3, [pc, #284]	@ (800c288 <tcp_receive+0xb0c>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c16e:	4b46      	ldr	r3, [pc, #280]	@ (800c288 <tcp_receive+0xb0c>)
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	899b      	ldrh	r3, [r3, #12]
 800c174:	b29b      	uxth	r3, r3
 800c176:	4618      	mov	r0, r3
 800c178:	f7f8 fb1c 	bl	80047b4 <lwip_htons>
 800c17c:	4603      	mov	r3, r0
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	f003 0301 	and.w	r3, r3, #1
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 80b8 	beq.w	800c2fa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c18a:	4b45      	ldr	r3, [pc, #276]	@ (800c2a0 <tcp_receive+0xb24>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	f043 0320 	orr.w	r3, r3, #32
 800c192:	b2da      	uxtb	r2, r3
 800c194:	4b42      	ldr	r3, [pc, #264]	@ (800c2a0 <tcp_receive+0xb24>)
 800c196:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c198:	e0af      	b.n	800c2fa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c19e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	4a36      	ldr	r2, [pc, #216]	@ (800c284 <tcp_receive+0xb08>)
 800c1aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	891b      	ldrh	r3, [r3, #8]
 800c1b0:	461c      	mov	r4, r3
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	899b      	ldrh	r3, [r3, #12]
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f8 fafa 	bl	80047b4 <lwip_htons>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	f003 0303 	and.w	r3, r3, #3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <tcp_receive+0xa54>
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e000      	b.n	800c1d2 <tcp_receive+0xa56>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	191a      	adds	r2, r3, r4
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d8:	441a      	add	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1e2:	461c      	mov	r4, r3
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	891b      	ldrh	r3, [r3, #8]
 800c1e8:	461d      	mov	r5, r3
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	899b      	ldrh	r3, [r3, #12]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7f8 fade 	bl	80047b4 <lwip_htons>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	f003 0303 	and.w	r3, r3, #3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d001      	beq.n	800c208 <tcp_receive+0xa8c>
 800c204:	2301      	movs	r3, #1
 800c206:	e000      	b.n	800c20a <tcp_receive+0xa8e>
 800c208:	2300      	movs	r3, #0
 800c20a:	442b      	add	r3, r5
 800c20c:	429c      	cmp	r4, r3
 800c20e:	d206      	bcs.n	800c21e <tcp_receive+0xaa2>
 800c210:	4b1e      	ldr	r3, [pc, #120]	@ (800c28c <tcp_receive+0xb10>)
 800c212:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c216:	4923      	ldr	r1, [pc, #140]	@ (800c2a4 <tcp_receive+0xb28>)
 800c218:	481e      	ldr	r0, [pc, #120]	@ (800c294 <tcp_receive+0xb18>)
 800c21a:	f002 f9b7 	bl	800e58c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	891b      	ldrh	r3, [r3, #8]
 800c222:	461c      	mov	r4, r3
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	899b      	ldrh	r3, [r3, #12]
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7f8 fac1 	bl	80047b4 <lwip_htons>
 800c232:	4603      	mov	r3, r0
 800c234:	b2db      	uxtb	r3, r3
 800c236:	f003 0303 	and.w	r3, r3, #3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <tcp_receive+0xac6>
 800c23e:	2301      	movs	r3, #1
 800c240:	e000      	b.n	800c244 <tcp_receive+0xac8>
 800c242:	2300      	movs	r3, #0
 800c244:	1919      	adds	r1, r3, r4
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c24a:	b28b      	uxth	r3, r1
 800c24c:	1ad3      	subs	r3, r2, r3
 800c24e:	b29a      	uxth	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7fc ff43 	bl	80090e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	891b      	ldrh	r3, [r3, #8]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d028      	beq.n	800c2b6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c264:	4b0d      	ldr	r3, [pc, #52]	@ (800c29c <tcp_receive+0xb20>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d01d      	beq.n	800c2a8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c26c:	4b0b      	ldr	r3, [pc, #44]	@ (800c29c <tcp_receive+0xb20>)
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	4619      	mov	r1, r3
 800c276:	4610      	mov	r0, r2
 800c278:	f7fc fa60 	bl	800873c <pbuf_cat>
 800c27c:	e018      	b.n	800c2b0 <tcp_receive+0xb34>
 800c27e:	bf00      	nop
 800c280:	24007cae 	.word	0x24007cae
 800c284:	24007ca4 	.word	0x24007ca4
 800c288:	24007c84 	.word	0x24007c84
 800c28c:	08011128 	.word	0x08011128
 800c290:	0801157c 	.word	0x0801157c
 800c294:	080111e8 	.word	0x080111e8
 800c298:	080115b8 	.word	0x080115b8
 800c29c:	24007cb4 	.word	0x24007cb4
 800c2a0:	24007cb1 	.word	0x24007cb1
 800c2a4:	080115d8 	.word	0x080115d8
            } else {
              recv_data = cseg->p;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	4a70      	ldr	r2, [pc, #448]	@ (800c470 <tcp_receive+0xcf4>)
 800c2ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	899b      	ldrh	r3, [r3, #12]
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7f8 fa78 	bl	80047b4 <lwip_htons>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00d      	beq.n	800c2ec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c2d0:	4b68      	ldr	r3, [pc, #416]	@ (800c474 <tcp_receive+0xcf8>)
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	f043 0320 	orr.w	r3, r3, #32
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	4b66      	ldr	r3, [pc, #408]	@ (800c474 <tcp_receive+0xcf8>)
 800c2dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	7d1b      	ldrb	r3, [r3, #20]
 800c2e2:	2b04      	cmp	r3, #4
 800c2e4:	d102      	bne.n	800c2ec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2207      	movs	r2, #7
 800c2ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c2f4:	68b8      	ldr	r0, [r7, #8]
 800c2f6:	f7fd fbd4 	bl	8009aa2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d008      	beq.n	800c314 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	685a      	ldr	r2, [r3, #4]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c30e:	429a      	cmp	r2, r3
 800c310:	f43f af43 	beq.w	800c19a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	8b5b      	ldrh	r3, [r3, #26]
 800c318:	f003 0301 	and.w	r3, r3, #1
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00e      	beq.n	800c33e <tcp_receive+0xbc2>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	8b5b      	ldrh	r3, [r3, #26]
 800c324:	f023 0301 	bic.w	r3, r3, #1
 800c328:	b29a      	uxth	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	835a      	strh	r2, [r3, #26]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	8b5b      	ldrh	r3, [r3, #26]
 800c332:	f043 0302 	orr.w	r3, r3, #2
 800c336:	b29a      	uxth	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c33c:	e187      	b.n	800c64e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	8b5b      	ldrh	r3, [r3, #26]
 800c342:	f043 0301 	orr.w	r3, r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c34c:	e17f      	b.n	800c64e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c352:	2b00      	cmp	r3, #0
 800c354:	d106      	bne.n	800c364 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c356:	4848      	ldr	r0, [pc, #288]	@ (800c478 <tcp_receive+0xcfc>)
 800c358:	f7fd fbbc 	bl	8009ad4 <tcp_seg_copy>
 800c35c:	4602      	mov	r2, r0
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	675a      	str	r2, [r3, #116]	@ 0x74
 800c362:	e16c      	b.n	800c63e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c364:	2300      	movs	r3, #0
 800c366:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c36c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c36e:	e156      	b.n	800c61e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	4b41      	ldr	r3, [pc, #260]	@ (800c47c <tcp_receive+0xd00>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d11d      	bne.n	800c3ba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c37e:	4b3e      	ldr	r3, [pc, #248]	@ (800c478 <tcp_receive+0xcfc>)
 800c380:	891a      	ldrh	r2, [r3, #8]
 800c382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c384:	891b      	ldrh	r3, [r3, #8]
 800c386:	429a      	cmp	r2, r3
 800c388:	f240 814e 	bls.w	800c628 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c38c:	483a      	ldr	r0, [pc, #232]	@ (800c478 <tcp_receive+0xcfc>)
 800c38e:	f7fd fba1 	bl	8009ad4 <tcp_seg_copy>
 800c392:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	2b00      	cmp	r3, #0
 800c398:	f000 8148 	beq.w	800c62c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	601a      	str	r2, [r3, #0]
 800c3a8:	e002      	b.n	800c3b0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c3b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c3b2:	6978      	ldr	r0, [r7, #20]
 800c3b4:	f7ff f8de 	bl	800b574 <tcp_oos_insert_segment>
                }
                break;
 800c3b8:	e138      	b.n	800c62c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d117      	bne.n	800c3f0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c3c0:	4b2e      	ldr	r3, [pc, #184]	@ (800c47c <tcp_receive+0xd00>)
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	da57      	bge.n	800c480 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c3d0:	4829      	ldr	r0, [pc, #164]	@ (800c478 <tcp_receive+0xcfc>)
 800c3d2:	f7fd fb7f 	bl	8009ad4 <tcp_seg_copy>
 800c3d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 8128 	beq.w	800c630 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	69ba      	ldr	r2, [r7, #24]
 800c3e4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c3e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c3e8:	69b8      	ldr	r0, [r7, #24]
 800c3ea:	f7ff f8c3 	bl	800b574 <tcp_oos_insert_segment>
                  }
                  break;
 800c3ee:	e11f      	b.n	800c630 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c3f0:	4b22      	ldr	r3, [pc, #136]	@ (800c47c <tcp_receive+0xd00>)
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	db3e      	blt.n	800c480 <tcp_receive+0xd04>
 800c402:	4b1e      	ldr	r3, [pc, #120]	@ (800c47c <tcp_receive+0xd00>)
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	3301      	adds	r3, #1
 800c410:	2b00      	cmp	r3, #0
 800c412:	dc35      	bgt.n	800c480 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c414:	4818      	ldr	r0, [pc, #96]	@ (800c478 <tcp_receive+0xcfc>)
 800c416:	f7fd fb5d 	bl	8009ad4 <tcp_seg_copy>
 800c41a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 8108 	beq.w	800c634 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c42c:	8912      	ldrh	r2, [r2, #8]
 800c42e:	441a      	add	r2, r3
 800c430:	4b12      	ldr	r3, [pc, #72]	@ (800c47c <tcp_receive+0xd00>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	dd12      	ble.n	800c460 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c43a:	4b10      	ldr	r3, [pc, #64]	@ (800c47c <tcp_receive+0xd00>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	b29a      	uxth	r2, r3
 800c440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	b29b      	uxth	r3, r3
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c44e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c456:	891b      	ldrh	r3, [r3, #8]
 800c458:	4619      	mov	r1, r3
 800c45a:	4610      	mov	r0, r2
 800c45c:	f7fb ff26 	bl	80082ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c462:	69fa      	ldr	r2, [r7, #28]
 800c464:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c466:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c468:	69f8      	ldr	r0, [r7, #28]
 800c46a:	f7ff f883 	bl	800b574 <tcp_oos_insert_segment>
                  }
                  break;
 800c46e:	e0e1      	b.n	800c634 <tcp_receive+0xeb8>
 800c470:	24007cb4 	.word	0x24007cb4
 800c474:	24007cb1 	.word	0x24007cb1
 800c478:	24007c84 	.word	0x24007c84
 800c47c:	24007ca4 	.word	0x24007ca4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c482:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f040 80c5 	bne.w	800c618 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c48e:	4b7f      	ldr	r3, [pc, #508]	@ (800c68c <tcp_receive+0xf10>)
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f340 80bc 	ble.w	800c618 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	899b      	ldrh	r3, [r3, #12]
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7f8 f983 	bl	80047b4 <lwip_htons>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f040 80be 	bne.w	800c638 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c4bc:	4874      	ldr	r0, [pc, #464]	@ (800c690 <tcp_receive+0xf14>)
 800c4be:	f7fd fb09 	bl	8009ad4 <tcp_seg_copy>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 80b5 	beq.w	800c63c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4da:	8912      	ldrh	r2, [r2, #8]
 800c4dc:	441a      	add	r2, r3
 800c4de:	4b6b      	ldr	r3, [pc, #428]	@ (800c68c <tcp_receive+0xf10>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	dd12      	ble.n	800c50e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c4e8:	4b68      	ldr	r3, [pc, #416]	@ (800c68c <tcp_receive+0xf10>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c504:	891b      	ldrh	r3, [r3, #8]
 800c506:	4619      	mov	r1, r3
 800c508:	4610      	mov	r0, r2
 800c50a:	f7fb fecf 	bl	80082ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c50e:	4b61      	ldr	r3, [pc, #388]	@ (800c694 <tcp_receive+0xf18>)
 800c510:	881b      	ldrh	r3, [r3, #0]
 800c512:	461a      	mov	r2, r3
 800c514:	4b5d      	ldr	r3, [pc, #372]	@ (800c68c <tcp_receive+0xf10>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	441a      	add	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c51e:	6879      	ldr	r1, [r7, #4]
 800c520:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c522:	440b      	add	r3, r1
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	2b00      	cmp	r3, #0
 800c528:	f340 8088 	ble.w	800c63c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	899b      	ldrh	r3, [r3, #12]
 800c534:	b29b      	uxth	r3, r3
 800c536:	4618      	mov	r0, r3
 800c538:	f7f8 f93c 	bl	80047b4 <lwip_htons>
 800c53c:	4603      	mov	r3, r0
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	2b00      	cmp	r3, #0
 800c546:	d021      	beq.n	800c58c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	899b      	ldrh	r3, [r3, #12]
 800c550:	b29b      	uxth	r3, r3
 800c552:	b21b      	sxth	r3, r3
 800c554:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c558:	b21c      	sxth	r4, r3
 800c55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	899b      	ldrh	r3, [r3, #12]
 800c562:	b29b      	uxth	r3, r3
 800c564:	4618      	mov	r0, r3
 800c566:	f7f8 f925 	bl	80047b4 <lwip_htons>
 800c56a:	4603      	mov	r3, r0
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c572:	b29b      	uxth	r3, r3
 800c574:	4618      	mov	r0, r3
 800c576:	f7f8 f91d 	bl	80047b4 <lwip_htons>
 800c57a:	4603      	mov	r3, r0
 800c57c:	b21b      	sxth	r3, r3
 800c57e:	4323      	orrs	r3, r4
 800c580:	b21a      	sxth	r2, r3
 800c582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	b292      	uxth	r2, r2
 800c58a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c590:	b29a      	uxth	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c596:	4413      	add	r3, r2
 800c598:	b299      	uxth	r1, r3
 800c59a:	4b3c      	ldr	r3, [pc, #240]	@ (800c68c <tcp_receive+0xf10>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	1a8a      	subs	r2, r1, r2
 800c5a6:	b292      	uxth	r2, r2
 800c5a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	891b      	ldrh	r3, [r3, #8]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	f7fb fe77 	bl	80082ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	891c      	ldrh	r4, [r3, #8]
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	899b      	ldrh	r3, [r3, #12]
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7f8 f8f0 	bl	80047b4 <lwip_htons>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	f003 0303 	and.w	r3, r3, #3
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d001      	beq.n	800c5e4 <tcp_receive+0xe68>
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e000      	b.n	800c5e6 <tcp_receive+0xe6a>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	4423      	add	r3, r4
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	4b2a      	ldr	r3, [pc, #168]	@ (800c694 <tcp_receive+0xf18>)
 800c5ec:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c5ee:	4b29      	ldr	r3, [pc, #164]	@ (800c694 <tcp_receive+0xf18>)
 800c5f0:	881b      	ldrh	r3, [r3, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	4b25      	ldr	r3, [pc, #148]	@ (800c68c <tcp_receive+0xf10>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	441a      	add	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5fe:	6879      	ldr	r1, [r7, #4]
 800c600:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c602:	440b      	add	r3, r1
 800c604:	429a      	cmp	r2, r3
 800c606:	d019      	beq.n	800c63c <tcp_receive+0xec0>
 800c608:	4b23      	ldr	r3, [pc, #140]	@ (800c698 <tcp_receive+0xf1c>)
 800c60a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c60e:	4923      	ldr	r1, [pc, #140]	@ (800c69c <tcp_receive+0xf20>)
 800c610:	4823      	ldr	r0, [pc, #140]	@ (800c6a0 <tcp_receive+0xf24>)
 800c612:	f001 ffbb 	bl	800e58c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c616:	e011      	b.n	800c63c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c620:	2b00      	cmp	r3, #0
 800c622:	f47f aea5 	bne.w	800c370 <tcp_receive+0xbf4>
 800c626:	e00a      	b.n	800c63e <tcp_receive+0xec2>
                break;
 800c628:	bf00      	nop
 800c62a:	e008      	b.n	800c63e <tcp_receive+0xec2>
                break;
 800c62c:	bf00      	nop
 800c62e:	e006      	b.n	800c63e <tcp_receive+0xec2>
                  break;
 800c630:	bf00      	nop
 800c632:	e004      	b.n	800c63e <tcp_receive+0xec2>
                  break;
 800c634:	bf00      	nop
 800c636:	e002      	b.n	800c63e <tcp_receive+0xec2>
                  break;
 800c638:	bf00      	nop
 800c63a:	e000      	b.n	800c63e <tcp_receive+0xec2>
                break;
 800c63c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 fa30 	bl	800daa4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c644:	e003      	b.n	800c64e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f001 fa2c 	bl	800daa4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c64c:	e01a      	b.n	800c684 <tcp_receive+0xf08>
 800c64e:	e019      	b.n	800c684 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c650:	4b0e      	ldr	r3, [pc, #56]	@ (800c68c <tcp_receive+0xf10>)
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	db0a      	blt.n	800c674 <tcp_receive+0xef8>
 800c65e:	4b0b      	ldr	r3, [pc, #44]	@ (800c68c <tcp_receive+0xf10>)
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c666:	6879      	ldr	r1, [r7, #4]
 800c668:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c66a:	440b      	add	r3, r1
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	3301      	adds	r3, #1
 800c670:	2b00      	cmp	r3, #0
 800c672:	dd07      	ble.n	800c684 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	8b5b      	ldrh	r3, [r3, #26]
 800c678:	f043 0302 	orr.w	r3, r3, #2
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c682:	e7ff      	b.n	800c684 <tcp_receive+0xf08>
 800c684:	bf00      	nop
 800c686:	3750      	adds	r7, #80	@ 0x50
 800c688:	46bd      	mov	sp, r7
 800c68a:	bdb0      	pop	{r4, r5, r7, pc}
 800c68c:	24007ca4 	.word	0x24007ca4
 800c690:	24007c84 	.word	0x24007c84
 800c694:	24007cae 	.word	0x24007cae
 800c698:	08011128 	.word	0x08011128
 800c69c:	08011544 	.word	0x08011544
 800c6a0:	080111e8 	.word	0x080111e8

0800c6a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c6aa:	4b15      	ldr	r3, [pc, #84]	@ (800c700 <tcp_get_next_optbyte+0x5c>)
 800c6ac:	881b      	ldrh	r3, [r3, #0]
 800c6ae:	1c5a      	adds	r2, r3, #1
 800c6b0:	b291      	uxth	r1, r2
 800c6b2:	4a13      	ldr	r2, [pc, #76]	@ (800c700 <tcp_get_next_optbyte+0x5c>)
 800c6b4:	8011      	strh	r1, [r2, #0]
 800c6b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c6b8:	4b12      	ldr	r3, [pc, #72]	@ (800c704 <tcp_get_next_optbyte+0x60>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d004      	beq.n	800c6ca <tcp_get_next_optbyte+0x26>
 800c6c0:	4b11      	ldr	r3, [pc, #68]	@ (800c708 <tcp_get_next_optbyte+0x64>)
 800c6c2:	881b      	ldrh	r3, [r3, #0]
 800c6c4:	88fa      	ldrh	r2, [r7, #6]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d208      	bcs.n	800c6dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c6ca:	4b10      	ldr	r3, [pc, #64]	@ (800c70c <tcp_get_next_optbyte+0x68>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3314      	adds	r3, #20
 800c6d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c6d2:	88fb      	ldrh	r3, [r7, #6]
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	e00b      	b.n	800c6f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c6dc:	88fb      	ldrh	r3, [r7, #6]
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	4b09      	ldr	r3, [pc, #36]	@ (800c708 <tcp_get_next_optbyte+0x64>)
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c6ea:	4b06      	ldr	r3, [pc, #24]	@ (800c704 <tcp_get_next_optbyte+0x60>)
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	797b      	ldrb	r3, [r7, #5]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr
 800c700:	24007ca0 	.word	0x24007ca0
 800c704:	24007c9c 	.word	0x24007c9c
 800c708:	24007c9a 	.word	0x24007c9a
 800c70c:	24007c94 	.word	0x24007c94

0800c710 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d106      	bne.n	800c72c <tcp_parseopt+0x1c>
 800c71e:	4b32      	ldr	r3, [pc, #200]	@ (800c7e8 <tcp_parseopt+0xd8>)
 800c720:	f240 727d 	movw	r2, #1917	@ 0x77d
 800c724:	4931      	ldr	r1, [pc, #196]	@ (800c7ec <tcp_parseopt+0xdc>)
 800c726:	4832      	ldr	r0, [pc, #200]	@ (800c7f0 <tcp_parseopt+0xe0>)
 800c728:	f001 ff30 	bl	800e58c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c72c:	4b31      	ldr	r3, [pc, #196]	@ (800c7f4 <tcp_parseopt+0xe4>)
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d056      	beq.n	800c7e2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c734:	4b30      	ldr	r3, [pc, #192]	@ (800c7f8 <tcp_parseopt+0xe8>)
 800c736:	2200      	movs	r2, #0
 800c738:	801a      	strh	r2, [r3, #0]
 800c73a:	e046      	b.n	800c7ca <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800c73c:	f7ff ffb2 	bl	800c6a4 <tcp_get_next_optbyte>
 800c740:	4603      	mov	r3, r0
 800c742:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	2b02      	cmp	r3, #2
 800c748:	d006      	beq.n	800c758 <tcp_parseopt+0x48>
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	dc2a      	bgt.n	800c7a4 <tcp_parseopt+0x94>
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d042      	beq.n	800c7d8 <tcp_parseopt+0xc8>
 800c752:	2b01      	cmp	r3, #1
 800c754:	d038      	beq.n	800c7c8 <tcp_parseopt+0xb8>
 800c756:	e025      	b.n	800c7a4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c758:	f7ff ffa4 	bl	800c6a4 <tcp_get_next_optbyte>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d13c      	bne.n	800c7dc <tcp_parseopt+0xcc>
 800c762:	4b25      	ldr	r3, [pc, #148]	@ (800c7f8 <tcp_parseopt+0xe8>)
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	3301      	adds	r3, #1
 800c768:	4a22      	ldr	r2, [pc, #136]	@ (800c7f4 <tcp_parseopt+0xe4>)
 800c76a:	8812      	ldrh	r2, [r2, #0]
 800c76c:	4293      	cmp	r3, r2
 800c76e:	da35      	bge.n	800c7dc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c770:	f7ff ff98 	bl	800c6a4 <tcp_get_next_optbyte>
 800c774:	4603      	mov	r3, r0
 800c776:	021b      	lsls	r3, r3, #8
 800c778:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c77a:	f7ff ff93 	bl	800c6a4 <tcp_get_next_optbyte>
 800c77e:	4603      	mov	r3, r0
 800c780:	461a      	mov	r2, r3
 800c782:	89bb      	ldrh	r3, [r7, #12]
 800c784:	4313      	orrs	r3, r2
 800c786:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c788:	89bb      	ldrh	r3, [r7, #12]
 800c78a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c78e:	d804      	bhi.n	800c79a <tcp_parseopt+0x8a>
 800c790:	89bb      	ldrh	r3, [r7, #12]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <tcp_parseopt+0x8a>
 800c796:	89ba      	ldrh	r2, [r7, #12]
 800c798:	e001      	b.n	800c79e <tcp_parseopt+0x8e>
 800c79a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800c7a2:	e012      	b.n	800c7ca <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c7a4:	f7ff ff7e 	bl	800c6a4 <tcp_get_next_optbyte>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c7ac:	7afb      	ldrb	r3, [r7, #11]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d916      	bls.n	800c7e0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c7b2:	7afb      	ldrb	r3, [r7, #11]
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	4b10      	ldr	r3, [pc, #64]	@ (800c7f8 <tcp_parseopt+0xe8>)
 800c7b8:	881b      	ldrh	r3, [r3, #0]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	3b02      	subs	r3, #2
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c7f8 <tcp_parseopt+0xe8>)
 800c7c4:	801a      	strh	r2, [r3, #0]
 800c7c6:	e000      	b.n	800c7ca <tcp_parseopt+0xba>
          break;
 800c7c8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c7f8 <tcp_parseopt+0xe8>)
 800c7cc:	881a      	ldrh	r2, [r3, #0]
 800c7ce:	4b09      	ldr	r3, [pc, #36]	@ (800c7f4 <tcp_parseopt+0xe4>)
 800c7d0:	881b      	ldrh	r3, [r3, #0]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d3b2      	bcc.n	800c73c <tcp_parseopt+0x2c>
 800c7d6:	e004      	b.n	800c7e2 <tcp_parseopt+0xd2>
          return;
 800c7d8:	bf00      	nop
 800c7da:	e002      	b.n	800c7e2 <tcp_parseopt+0xd2>
            return;
 800c7dc:	bf00      	nop
 800c7de:	e000      	b.n	800c7e2 <tcp_parseopt+0xd2>
            return;
 800c7e0:	bf00      	nop
      }
    }
  }
}
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	08011128 	.word	0x08011128
 800c7ec:	08011600 	.word	0x08011600
 800c7f0:	080111e8 	.word	0x080111e8
 800c7f4:	24007c98 	.word	0x24007c98
 800c7f8:	24007ca0 	.word	0x24007ca0

0800c7fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c800:	4b05      	ldr	r3, [pc, #20]	@ (800c818 <tcp_trigger_input_pcb_close+0x1c>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	f043 0310 	orr.w	r3, r3, #16
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	4b03      	ldr	r3, [pc, #12]	@ (800c818 <tcp_trigger_input_pcb_close+0x1c>)
 800c80c:	701a      	strb	r2, [r3, #0]
}
 800c80e:	bf00      	nop
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	24007cb1 	.word	0x24007cb1

0800c81c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00a      	beq.n	800c844 <tcp_route+0x28>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	7a1b      	ldrb	r3, [r3, #8]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d006      	beq.n	800c844 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	7a1b      	ldrb	r3, [r3, #8]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fb fb5c 	bl	8007ef8 <netif_get_by_index>
 800c840:	4603      	mov	r3, r0
 800c842:	e003      	b.n	800c84c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7f9 fa8b 	bl	8005d60 <ip4_route>
 800c84a:	4603      	mov	r3, r0
  }
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c854:	b590      	push	{r4, r7, lr}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	603b      	str	r3, [r7, #0]
 800c860:	4613      	mov	r3, r2
 800c862:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d105      	bne.n	800c876 <tcp_create_segment+0x22>
 800c86a:	4b43      	ldr	r3, [pc, #268]	@ (800c978 <tcp_create_segment+0x124>)
 800c86c:	22a3      	movs	r2, #163	@ 0xa3
 800c86e:	4943      	ldr	r1, [pc, #268]	@ (800c97c <tcp_create_segment+0x128>)
 800c870:	4843      	ldr	r0, [pc, #268]	@ (800c980 <tcp_create_segment+0x12c>)
 800c872:	f001 fe8b 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d105      	bne.n	800c888 <tcp_create_segment+0x34>
 800c87c:	4b3e      	ldr	r3, [pc, #248]	@ (800c978 <tcp_create_segment+0x124>)
 800c87e:	22a4      	movs	r2, #164	@ 0xa4
 800c880:	4940      	ldr	r1, [pc, #256]	@ (800c984 <tcp_create_segment+0x130>)
 800c882:	483f      	ldr	r0, [pc, #252]	@ (800c980 <tcp_create_segment+0x12c>)
 800c884:	f001 fe82 	bl	800e58c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c888:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	f003 0304 	and.w	r3, r3, #4
 800c894:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c896:	2003      	movs	r0, #3
 800c898:	f7fa ffa8 	bl	80077ec <memp_malloc>
 800c89c:	6138      	str	r0, [r7, #16]
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d104      	bne.n	800c8ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c8a4:	68b8      	ldr	r0, [r7, #8]
 800c8a6:	f7fb fe87 	bl	80085b8 <pbuf_free>
    return NULL;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e060      	b.n	800c970 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c8b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	891a      	ldrh	r2, [r3, #8]
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d205      	bcs.n	800c8da <tcp_create_segment+0x86>
 800c8ce:	4b2a      	ldr	r3, [pc, #168]	@ (800c978 <tcp_create_segment+0x124>)
 800c8d0:	22b0      	movs	r2, #176	@ 0xb0
 800c8d2:	492d      	ldr	r1, [pc, #180]	@ (800c988 <tcp_create_segment+0x134>)
 800c8d4:	482a      	ldr	r0, [pc, #168]	@ (800c980 <tcp_create_segment+0x12c>)
 800c8d6:	f001 fe59 	bl	800e58c <iprintf>
  seg->len = p->tot_len - optlen;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	891a      	ldrh	r2, [r3, #8]
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c8ea:	2114      	movs	r1, #20
 800c8ec:	68b8      	ldr	r0, [r7, #8]
 800c8ee:	f7fb fdcd 	bl	800848c <pbuf_add_header>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d004      	beq.n	800c902 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c8f8:	6938      	ldr	r0, [r7, #16]
 800c8fa:	f7fd f8d2 	bl	8009aa2 <tcp_seg_free>
    return NULL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	e036      	b.n	800c970 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	685a      	ldr	r2, [r3, #4]
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	8ada      	ldrh	r2, [r3, #22]
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	68dc      	ldr	r4, [r3, #12]
 800c914:	4610      	mov	r0, r2
 800c916:	f7f7 ff4d 	bl	80047b4 <lwip_htons>
 800c91a:	4603      	mov	r3, r0
 800c91c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	8b1a      	ldrh	r2, [r3, #24]
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	68dc      	ldr	r4, [r3, #12]
 800c926:	4610      	mov	r0, r2
 800c928:	f7f7 ff44 	bl	80047b4 <lwip_htons>
 800c92c:	4603      	mov	r3, r0
 800c92e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	68dc      	ldr	r4, [r3, #12]
 800c934:	6838      	ldr	r0, [r7, #0]
 800c936:	f7f7 ff52 	bl	80047de <lwip_htonl>
 800c93a:	4603      	mov	r3, r0
 800c93c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c93e:	7dfb      	ldrb	r3, [r7, #23]
 800c940:	089b      	lsrs	r3, r3, #2
 800c942:	b2db      	uxtb	r3, r3
 800c944:	3305      	adds	r3, #5
 800c946:	b29b      	uxth	r3, r3
 800c948:	031b      	lsls	r3, r3, #12
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	79fb      	ldrb	r3, [r7, #7]
 800c94e:	b29b      	uxth	r3, r3
 800c950:	4313      	orrs	r3, r2
 800c952:	b29a      	uxth	r2, r3
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	68dc      	ldr	r4, [r3, #12]
 800c958:	4610      	mov	r0, r2
 800c95a:	f7f7 ff2b 	bl	80047b4 <lwip_htons>
 800c95e:	4603      	mov	r3, r0
 800c960:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	749a      	strb	r2, [r3, #18]
 800c96a:	2200      	movs	r2, #0
 800c96c:	74da      	strb	r2, [r3, #19]
  return seg;
 800c96e:	693b      	ldr	r3, [r7, #16]
}
 800c970:	4618      	mov	r0, r3
 800c972:	371c      	adds	r7, #28
 800c974:	46bd      	mov	sp, r7
 800c976:	bd90      	pop	{r4, r7, pc}
 800c978:	0801161c 	.word	0x0801161c
 800c97c:	080116c4 	.word	0x080116c4
 800c980:	080116e4 	.word	0x080116e4
 800c984:	0801170c 	.word	0x0801170c
 800c988:	08011730 	.word	0x08011730

0800c98c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c98c:	b590      	push	{r4, r7, lr}
 800c98e:	b08b      	sub	sp, #44	@ 0x2c
 800c990:	af02      	add	r7, sp, #8
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	460b      	mov	r3, r1
 800c996:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c998:	2300      	movs	r3, #0
 800c99a:	61fb      	str	r3, [r7, #28]
 800c99c:	2300      	movs	r3, #0
 800c99e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d106      	bne.n	800c9b8 <tcp_split_unsent_seg+0x2c>
 800c9aa:	4b95      	ldr	r3, [pc, #596]	@ (800cc00 <tcp_split_unsent_seg+0x274>)
 800c9ac:	f240 324b 	movw	r2, #843	@ 0x34b
 800c9b0:	4994      	ldr	r1, [pc, #592]	@ (800cc04 <tcp_split_unsent_seg+0x278>)
 800c9b2:	4895      	ldr	r0, [pc, #596]	@ (800cc08 <tcp_split_unsent_seg+0x27c>)
 800c9b4:	f001 fdea 	bl	800e58c <iprintf>

  useg = pcb->unsent;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d102      	bne.n	800c9ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c8:	e116      	b.n	800cbf8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c9ca:	887b      	ldrh	r3, [r7, #2]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d109      	bne.n	800c9e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c9d0:	4b8b      	ldr	r3, [pc, #556]	@ (800cc00 <tcp_split_unsent_seg+0x274>)
 800c9d2:	f240 3253 	movw	r2, #851	@ 0x353
 800c9d6:	498d      	ldr	r1, [pc, #564]	@ (800cc0c <tcp_split_unsent_seg+0x280>)
 800c9d8:	488b      	ldr	r0, [pc, #556]	@ (800cc08 <tcp_split_unsent_seg+0x27c>)
 800c9da:	f001 fdd7 	bl	800e58c <iprintf>
    return ERR_VAL;
 800c9de:	f06f 0305 	mvn.w	r3, #5
 800c9e2:	e109      	b.n	800cbf8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	891b      	ldrh	r3, [r3, #8]
 800c9e8:	887a      	ldrh	r2, [r7, #2]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d301      	bcc.n	800c9f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	e102      	b.n	800cbf8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c9f6:	887a      	ldrh	r2, [r7, #2]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d906      	bls.n	800ca0a <tcp_split_unsent_seg+0x7e>
 800c9fc:	4b80      	ldr	r3, [pc, #512]	@ (800cc00 <tcp_split_unsent_seg+0x274>)
 800c9fe:	f240 325b 	movw	r2, #859	@ 0x35b
 800ca02:	4983      	ldr	r1, [pc, #524]	@ (800cc10 <tcp_split_unsent_seg+0x284>)
 800ca04:	4880      	ldr	r0, [pc, #512]	@ (800cc08 <tcp_split_unsent_seg+0x27c>)
 800ca06:	f001 fdc1 	bl	800e58c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	891b      	ldrh	r3, [r3, #8]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d106      	bne.n	800ca20 <tcp_split_unsent_seg+0x94>
 800ca12:	4b7b      	ldr	r3, [pc, #492]	@ (800cc00 <tcp_split_unsent_seg+0x274>)
 800ca14:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800ca18:	497e      	ldr	r1, [pc, #504]	@ (800cc14 <tcp_split_unsent_seg+0x288>)
 800ca1a:	487b      	ldr	r0, [pc, #492]	@ (800cc08 <tcp_split_unsent_seg+0x27c>)
 800ca1c:	f001 fdb6 	bl	800e58c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	7a9b      	ldrb	r3, [r3, #10]
 800ca24:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ca26:	7bfb      	ldrb	r3, [r7, #15]
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	f003 0304 	and.w	r3, r3, #4
 800ca30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	891a      	ldrh	r2, [r3, #8]
 800ca36:	887b      	ldrh	r3, [r7, #2]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ca3c:	7bbb      	ldrb	r3, [r7, #14]
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	89bb      	ldrh	r3, [r7, #12]
 800ca42:	4413      	add	r3, r2
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	2036      	movs	r0, #54	@ 0x36
 800ca4e:	f7fb facf 	bl	8007ff0 <pbuf_alloc>
 800ca52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f000 80b7 	beq.w	800cbca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	891a      	ldrh	r2, [r3, #8]
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	891b      	ldrh	r3, [r3, #8]
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	887b      	ldrh	r3, [r7, #2]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	6858      	ldr	r0, [r3, #4]
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	7bbb      	ldrb	r3, [r7, #14]
 800ca7a:	18d1      	adds	r1, r2, r3
 800ca7c:	897b      	ldrh	r3, [r7, #10]
 800ca7e:	89ba      	ldrh	r2, [r7, #12]
 800ca80:	f7fb ff84 	bl	800898c <pbuf_copy_partial>
 800ca84:	4603      	mov	r3, r0
 800ca86:	461a      	mov	r2, r3
 800ca88:	89bb      	ldrh	r3, [r7, #12]
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	f040 809f 	bne.w	800cbce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	899b      	ldrh	r3, [r3, #12]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7f7 fe8b 	bl	80047b4 <lwip_htons>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800caa6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800caa8:	2300      	movs	r3, #0
 800caaa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800caac:	7efb      	ldrb	r3, [r7, #27]
 800caae:	f003 0308 	and.w	r3, r3, #8
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d007      	beq.n	800cac6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cab6:	7efb      	ldrb	r3, [r7, #27]
 800cab8:	f023 0308 	bic.w	r3, r3, #8
 800cabc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cabe:	7ebb      	ldrb	r3, [r7, #26]
 800cac0:	f043 0308 	orr.w	r3, r3, #8
 800cac4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cac6:	7efb      	ldrb	r3, [r7, #27]
 800cac8:	f003 0301 	and.w	r3, r3, #1
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d007      	beq.n	800cae0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cad0:	7efb      	ldrb	r3, [r7, #27]
 800cad2:	f023 0301 	bic.w	r3, r3, #1
 800cad6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cad8:	7ebb      	ldrb	r3, [r7, #26]
 800cada:	f043 0301 	orr.w	r3, r3, #1
 800cade:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7f7 fe79 	bl	80047de <lwip_htonl>
 800caec:	4602      	mov	r2, r0
 800caee:	887b      	ldrh	r3, [r7, #2]
 800caf0:	18d1      	adds	r1, r2, r3
 800caf2:	7eba      	ldrb	r2, [r7, #26]
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	460b      	mov	r3, r1
 800cafa:	6939      	ldr	r1, [r7, #16]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff fea9 	bl	800c854 <tcp_create_segment>
 800cb02:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d063      	beq.n	800cbd2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fb fdda 	bl	80086c8 <pbuf_clen>
 800cb14:	4603      	mov	r3, r0
 800cb16:	461a      	mov	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb1e:	1a9b      	subs	r3, r3, r2
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	6858      	ldr	r0, [r3, #4]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	891a      	ldrh	r2, [r3, #8]
 800cb32:	89bb      	ldrh	r3, [r7, #12]
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	4619      	mov	r1, r3
 800cb3a:	f7fb fbb7 	bl	80082ac <pbuf_realloc>
  useg->len -= remainder;
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	891a      	ldrh	r2, [r3, #8]
 800cb42:	89bb      	ldrh	r3, [r7, #12]
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	899b      	ldrh	r3, [r3, #12]
 800cb52:	b29c      	uxth	r4, r3
 800cb54:	7efb      	ldrb	r3, [r7, #27]
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7f7 fe2b 	bl	80047b4 <lwip_htons>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	461a      	mov	r2, r3
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	4322      	orrs	r2, r4
 800cb68:	b292      	uxth	r2, r2
 800cb6a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fb fda9 	bl	80086c8 <pbuf_clen>
 800cb76:	4603      	mov	r3, r0
 800cb78:	461a      	mov	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb80:	4413      	add	r3, r2
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fb fd9a 	bl	80086c8 <pbuf_clen>
 800cb94:	4603      	mov	r3, r0
 800cb96:	461a      	mov	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb9e:	4413      	add	r3, r2
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	69fa      	ldr	r2, [r7, #28]
 800cbb4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d103      	bne.n	800cbc6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	e016      	b.n	800cbf8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cbca:	bf00      	nop
 800cbcc:	e002      	b.n	800cbd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cbce:	bf00      	nop
 800cbd0:	e000      	b.n	800cbd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cbd2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d006      	beq.n	800cbe8 <tcp_split_unsent_seg+0x25c>
 800cbda:	4b09      	ldr	r3, [pc, #36]	@ (800cc00 <tcp_split_unsent_seg+0x274>)
 800cbdc:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800cbe0:	490d      	ldr	r1, [pc, #52]	@ (800cc18 <tcp_split_unsent_seg+0x28c>)
 800cbe2:	4809      	ldr	r0, [pc, #36]	@ (800cc08 <tcp_split_unsent_seg+0x27c>)
 800cbe4:	f001 fcd2 	bl	800e58c <iprintf>
  if (p != NULL) {
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d002      	beq.n	800cbf4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cbee:	6938      	ldr	r0, [r7, #16]
 800cbf0:	f7fb fce2 	bl	80085b8 <pbuf_free>
  }

  return ERR_MEM;
 800cbf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3724      	adds	r7, #36	@ 0x24
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd90      	pop	{r4, r7, pc}
 800cc00:	0801161c 	.word	0x0801161c
 800cc04:	08011a24 	.word	0x08011a24
 800cc08:	080116e4 	.word	0x080116e4
 800cc0c:	08011a48 	.word	0x08011a48
 800cc10:	08011a6c 	.word	0x08011a6c
 800cc14:	08011a7c 	.word	0x08011a7c
 800cc18:	08011a8c 	.word	0x08011a8c

0800cc1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cc1c:	b590      	push	{r4, r7, lr}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d106      	bne.n	800cc38 <tcp_send_fin+0x1c>
 800cc2a:	4b21      	ldr	r3, [pc, #132]	@ (800ccb0 <tcp_send_fin+0x94>)
 800cc2c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800cc30:	4920      	ldr	r1, [pc, #128]	@ (800ccb4 <tcp_send_fin+0x98>)
 800cc32:	4821      	ldr	r0, [pc, #132]	@ (800ccb8 <tcp_send_fin+0x9c>)
 800cc34:	f001 fcaa 	bl	800e58c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d02e      	beq.n	800cc9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc44:	60fb      	str	r3, [r7, #12]
 800cc46:	e002      	b.n	800cc4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1f8      	bne.n	800cc48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	899b      	ldrh	r3, [r3, #12]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7f7 fda8 	bl	80047b4 <lwip_htons>
 800cc64:	4603      	mov	r3, r0
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	f003 0307 	and.w	r3, r3, #7
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d116      	bne.n	800cc9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	899b      	ldrh	r3, [r3, #12]
 800cc76:	b29c      	uxth	r4, r3
 800cc78:	2001      	movs	r0, #1
 800cc7a:	f7f7 fd9b 	bl	80047b4 <lwip_htons>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	461a      	mov	r2, r3
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	4322      	orrs	r2, r4
 800cc88:	b292      	uxth	r2, r2
 800cc8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	8b5b      	ldrh	r3, [r3, #26]
 800cc90:	f043 0320 	orr.w	r3, r3, #32
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e004      	b.n	800cca8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cc9e:	2101      	movs	r1, #1
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f80b 	bl	800ccbc <tcp_enqueue_flags>
 800cca6:	4603      	mov	r3, r0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd90      	pop	{r4, r7, pc}
 800ccb0:	0801161c 	.word	0x0801161c
 800ccb4:	08011a98 	.word	0x08011a98
 800ccb8:	080116e4 	.word	0x080116e4

0800ccbc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08a      	sub	sp, #40	@ 0x28
 800ccc0:	af02      	add	r7, sp, #8
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cccc:	2300      	movs	r3, #0
 800ccce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ccd0:	78fb      	ldrb	r3, [r7, #3]
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d106      	bne.n	800cce8 <tcp_enqueue_flags+0x2c>
 800ccda:	4b67      	ldr	r3, [pc, #412]	@ (800ce78 <tcp_enqueue_flags+0x1bc>)
 800ccdc:	f240 4211 	movw	r2, #1041	@ 0x411
 800cce0:	4966      	ldr	r1, [pc, #408]	@ (800ce7c <tcp_enqueue_flags+0x1c0>)
 800cce2:	4867      	ldr	r0, [pc, #412]	@ (800ce80 <tcp_enqueue_flags+0x1c4>)
 800cce4:	f001 fc52 	bl	800e58c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d106      	bne.n	800ccfc <tcp_enqueue_flags+0x40>
 800ccee:	4b62      	ldr	r3, [pc, #392]	@ (800ce78 <tcp_enqueue_flags+0x1bc>)
 800ccf0:	f240 4213 	movw	r2, #1043	@ 0x413
 800ccf4:	4963      	ldr	r1, [pc, #396]	@ (800ce84 <tcp_enqueue_flags+0x1c8>)
 800ccf6:	4862      	ldr	r0, [pc, #392]	@ (800ce80 <tcp_enqueue_flags+0x1c4>)
 800ccf8:	f001 fc48 	bl	800e58c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ccfc:	78fb      	ldrb	r3, [r7, #3]
 800ccfe:	f003 0302 	and.w	r3, r3, #2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d001      	beq.n	800cd0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cd06:	2301      	movs	r3, #1
 800cd08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cd0a:	7ffb      	ldrb	r3, [r7, #31]
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	f003 0304 	and.w	r3, r3, #4
 800cd14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cd1e:	4619      	mov	r1, r3
 800cd20:	2036      	movs	r0, #54	@ 0x36
 800cd22:	f7fb f965 	bl	8007ff0 <pbuf_alloc>
 800cd26:	6138      	str	r0, [r7, #16]
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d109      	bne.n	800cd42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	8b5b      	ldrh	r3, [r3, #26]
 800cd32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd36:	b29a      	uxth	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd40:	e095      	b.n	800ce6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	895a      	ldrh	r2, [r3, #10]
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d206      	bcs.n	800cd5c <tcp_enqueue_flags+0xa0>
 800cd4e:	4b4a      	ldr	r3, [pc, #296]	@ (800ce78 <tcp_enqueue_flags+0x1bc>)
 800cd50:	f240 4239 	movw	r2, #1081	@ 0x439
 800cd54:	494c      	ldr	r1, [pc, #304]	@ (800ce88 <tcp_enqueue_flags+0x1cc>)
 800cd56:	484a      	ldr	r0, [pc, #296]	@ (800ce80 <tcp_enqueue_flags+0x1c4>)
 800cd58:	f001 fc18 	bl	800e58c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800cd60:	78fa      	ldrb	r2, [r7, #3]
 800cd62:	7ffb      	ldrb	r3, [r7, #31]
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	460b      	mov	r3, r1
 800cd68:	6939      	ldr	r1, [r7, #16]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7ff fd72 	bl	800c854 <tcp_create_segment>
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d109      	bne.n	800cd8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	8b5b      	ldrh	r3, [r3, #26]
 800cd7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cd86:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8a:	e070      	b.n	800ce6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	f003 0303 	and.w	r3, r3, #3
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d006      	beq.n	800cda6 <tcp_enqueue_flags+0xea>
 800cd98:	4b37      	ldr	r3, [pc, #220]	@ (800ce78 <tcp_enqueue_flags+0x1bc>)
 800cd9a:	f240 4242 	movw	r2, #1090	@ 0x442
 800cd9e:	493b      	ldr	r1, [pc, #236]	@ (800ce8c <tcp_enqueue_flags+0x1d0>)
 800cda0:	4837      	ldr	r0, [pc, #220]	@ (800ce80 <tcp_enqueue_flags+0x1c4>)
 800cda2:	f001 fbf3 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	891b      	ldrh	r3, [r3, #8]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d006      	beq.n	800cdbc <tcp_enqueue_flags+0x100>
 800cdae:	4b32      	ldr	r3, [pc, #200]	@ (800ce78 <tcp_enqueue_flags+0x1bc>)
 800cdb0:	f240 4243 	movw	r2, #1091	@ 0x443
 800cdb4:	4936      	ldr	r1, [pc, #216]	@ (800ce90 <tcp_enqueue_flags+0x1d4>)
 800cdb6:	4832      	ldr	r0, [pc, #200]	@ (800ce80 <tcp_enqueue_flags+0x1c4>)
 800cdb8:	f001 fbe8 	bl	800e58c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d103      	bne.n	800cdcc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cdca:	e00d      	b.n	800cde8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdd0:	61bb      	str	r3, [r7, #24]
 800cdd2:	e002      	b.n	800cdda <tcp_enqueue_flags+0x11e>
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	61bb      	str	r3, [r7, #24]
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1f8      	bne.n	800cdd4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d104      	bne.n	800ce04 <tcp_enqueue_flags+0x148>
 800cdfa:	78fb      	ldrb	r3, [r7, #3]
 800cdfc:	f003 0301 	and.w	r3, r3, #1
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ce0e:	78fb      	ldrb	r3, [r7, #3]
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d006      	beq.n	800ce26 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	8b5b      	ldrh	r3, [r3, #26]
 800ce1c:	f043 0320 	orr.w	r3, r3, #32
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fb fc4c 	bl	80086c8 <pbuf_clen>
 800ce30:	4603      	mov	r3, r0
 800ce32:	461a      	mov	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ce3a:	4413      	add	r3, r2
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00e      	beq.n	800ce6c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10a      	bne.n	800ce6c <tcp_enqueue_flags+0x1b0>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <tcp_enqueue_flags+0x1b0>
 800ce5e:	4b06      	ldr	r3, [pc, #24]	@ (800ce78 <tcp_enqueue_flags+0x1bc>)
 800ce60:	f240 4265 	movw	r2, #1125	@ 0x465
 800ce64:	490b      	ldr	r1, [pc, #44]	@ (800ce94 <tcp_enqueue_flags+0x1d8>)
 800ce66:	4806      	ldr	r0, [pc, #24]	@ (800ce80 <tcp_enqueue_flags+0x1c4>)
 800ce68:	f001 fb90 	bl	800e58c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3720      	adds	r7, #32
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	0801161c 	.word	0x0801161c
 800ce7c:	08011ab4 	.word	0x08011ab4
 800ce80:	080116e4 	.word	0x080116e4
 800ce84:	08011b0c 	.word	0x08011b0c
 800ce88:	08011b2c 	.word	0x08011b2c
 800ce8c:	08011b68 	.word	0x08011b68
 800ce90:	08011b80 	.word	0x08011b80
 800ce94:	08011bac 	.word	0x08011bac

0800ce98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ce98:	b5b0      	push	{r4, r5, r7, lr}
 800ce9a:	b08a      	sub	sp, #40	@ 0x28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d106      	bne.n	800ceb4 <tcp_output+0x1c>
 800cea6:	4b8a      	ldr	r3, [pc, #552]	@ (800d0d0 <tcp_output+0x238>)
 800cea8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ceac:	4989      	ldr	r1, [pc, #548]	@ (800d0d4 <tcp_output+0x23c>)
 800ceae:	488a      	ldr	r0, [pc, #552]	@ (800d0d8 <tcp_output+0x240>)
 800ceb0:	f001 fb6c 	bl	800e58c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	7d1b      	ldrb	r3, [r3, #20]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d106      	bne.n	800ceca <tcp_output+0x32>
 800cebc:	4b84      	ldr	r3, [pc, #528]	@ (800d0d0 <tcp_output+0x238>)
 800cebe:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800cec2:	4986      	ldr	r1, [pc, #536]	@ (800d0dc <tcp_output+0x244>)
 800cec4:	4884      	ldr	r0, [pc, #528]	@ (800d0d8 <tcp_output+0x240>)
 800cec6:	f001 fb61 	bl	800e58c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ceca:	4b85      	ldr	r3, [pc, #532]	@ (800d0e0 <tcp_output+0x248>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d101      	bne.n	800ced8 <tcp_output+0x40>
    return ERR_OK;
 800ced4:	2300      	movs	r3, #0
 800ced6:	e1ce      	b.n	800d276 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cee4:	4293      	cmp	r3, r2
 800cee6:	bf28      	it	cs
 800cee8:	4613      	movcs	r3, r2
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cef2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800cef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d10b      	bne.n	800cf12 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	8b5b      	ldrh	r3, [r3, #26]
 800cefe:	f003 0302 	and.w	r3, r3, #2
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 81aa 	beq.w	800d25c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fdcb 	bl	800daa4 <tcp_send_empty_ack>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	e1b1      	b.n	800d276 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cf12:	6879      	ldr	r1, [r7, #4]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3304      	adds	r3, #4
 800cf18:	461a      	mov	r2, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff fc7e 	bl	800c81c <tcp_route>
 800cf20:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d102      	bne.n	800cf2e <tcp_output+0x96>
    return ERR_RTE;
 800cf28:	f06f 0303 	mvn.w	r3, #3
 800cf2c:	e1a3      	b.n	800d276 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d003      	beq.n	800cf3c <tcp_output+0xa4>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d111      	bne.n	800cf60 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d002      	beq.n	800cf48 <tcp_output+0xb0>
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	3304      	adds	r3, #4
 800cf46:	e000      	b.n	800cf4a <tcp_output+0xb2>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d102      	bne.n	800cf58 <tcp_output+0xc0>
      return ERR_RTE;
 800cf52:	f06f 0303 	mvn.w	r3, #3
 800cf56:	e18e      	b.n	800d276 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cf60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7f7 fc39 	bl	80047de <lwip_htonl>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf76:	8912      	ldrh	r2, [r2, #8]
 800cf78:	4413      	add	r3, r2
 800cf7a:	69ba      	ldr	r2, [r7, #24]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d227      	bcs.n	800cfd0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf86:	461a      	mov	r2, r3
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d114      	bne.n	800cfb8 <tcp_output+0x120>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d110      	bne.n	800cfb8 <tcp_output+0x120>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10b      	bne.n	800cfb8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	8b5b      	ldrh	r3, [r3, #26]
 800cfbc:	f003 0302 	and.w	r3, r3, #2
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 814d 	beq.w	800d260 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fd6c 	bl	800daa4 <tcp_send_empty_ack>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	e152      	b.n	800d276 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfdc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cfde:	6a3b      	ldr	r3, [r7, #32]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f000 811c 	beq.w	800d21e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800cfe6:	e002      	b.n	800cfee <tcp_output+0x156>
 800cfe8:	6a3b      	ldr	r3, [r7, #32]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	623b      	str	r3, [r7, #32]
 800cfee:	6a3b      	ldr	r3, [r7, #32]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1f8      	bne.n	800cfe8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cff6:	e112      	b.n	800d21e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	899b      	ldrh	r3, [r3, #12]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	4618      	mov	r0, r3
 800d002:	f7f7 fbd7 	bl	80047b4 <lwip_htons>
 800d006:	4603      	mov	r3, r0
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	f003 0304 	and.w	r3, r3, #4
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d006      	beq.n	800d020 <tcp_output+0x188>
 800d012:	4b2f      	ldr	r3, [pc, #188]	@ (800d0d0 <tcp_output+0x238>)
 800d014:	f240 5236 	movw	r2, #1334	@ 0x536
 800d018:	4932      	ldr	r1, [pc, #200]	@ (800d0e4 <tcp_output+0x24c>)
 800d01a:	482f      	ldr	r0, [pc, #188]	@ (800d0d8 <tcp_output+0x240>)
 800d01c:	f001 fab6 	bl	800e58c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d024:	2b00      	cmp	r3, #0
 800d026:	d01f      	beq.n	800d068 <tcp_output+0x1d0>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	8b5b      	ldrh	r3, [r3, #26]
 800d02c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800d030:	2b00      	cmp	r3, #0
 800d032:	d119      	bne.n	800d068 <tcp_output+0x1d0>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00b      	beq.n	800d054 <tcp_output+0x1bc>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d110      	bne.n	800d068 <tcp_output+0x1d0>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d04a:	891a      	ldrh	r2, [r3, #8]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d050:	429a      	cmp	r2, r3
 800d052:	d209      	bcs.n	800d068 <tcp_output+0x1d0>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d004      	beq.n	800d068 <tcp_output+0x1d0>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d064:	2b08      	cmp	r3, #8
 800d066:	d901      	bls.n	800d06c <tcp_output+0x1d4>
 800d068:	2301      	movs	r3, #1
 800d06a:	e000      	b.n	800d06e <tcp_output+0x1d6>
 800d06c:	2300      	movs	r3, #0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d106      	bne.n	800d080 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	8b5b      	ldrh	r3, [r3, #26]
 800d076:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f000 80e4 	beq.w	800d248 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	7d1b      	ldrb	r3, [r3, #20]
 800d084:	2b02      	cmp	r3, #2
 800d086:	d00d      	beq.n	800d0a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	899b      	ldrh	r3, [r3, #12]
 800d08e:	b29c      	uxth	r4, r3
 800d090:	2010      	movs	r0, #16
 800d092:	f7f7 fb8f 	bl	80047b4 <lwip_htons>
 800d096:	4603      	mov	r3, r0
 800d098:	461a      	mov	r2, r3
 800d09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	4322      	orrs	r2, r4
 800d0a0:	b292      	uxth	r2, r2
 800d0a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d0a4:	697a      	ldr	r2, [r7, #20]
 800d0a6:	6879      	ldr	r1, [r7, #4]
 800d0a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0aa:	f000 f909 	bl	800d2c0 <tcp_output_segment>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d016      	beq.n	800d0e8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	8b5b      	ldrh	r3, [r3, #26]
 800d0be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	835a      	strh	r2, [r3, #26]
      return err;
 800d0c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0cc:	e0d3      	b.n	800d276 <tcp_output+0x3de>
 800d0ce:	bf00      	nop
 800d0d0:	0801161c 	.word	0x0801161c
 800d0d4:	08011bd4 	.word	0x08011bd4
 800d0d8:	080116e4 	.word	0x080116e4
 800d0dc:	08011bec 	.word	0x08011bec
 800d0e0:	24007cb8 	.word	0x24007cb8
 800d0e4:	08011c14 	.word	0x08011c14
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	7d1b      	ldrb	r3, [r3, #20]
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	d006      	beq.n	800d106 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	8b5b      	ldrh	r3, [r3, #26]
 800d0fc:	f023 0303 	bic.w	r3, r3, #3
 800d100:	b29a      	uxth	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7f7 fb66 	bl	80047de <lwip_htonl>
 800d112:	4604      	mov	r4, r0
 800d114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d116:	891b      	ldrh	r3, [r3, #8]
 800d118:	461d      	mov	r5, r3
 800d11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	899b      	ldrh	r3, [r3, #12]
 800d120:	b29b      	uxth	r3, r3
 800d122:	4618      	mov	r0, r3
 800d124:	f7f7 fb46 	bl	80047b4 <lwip_htons>
 800d128:	4603      	mov	r3, r0
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	f003 0303 	and.w	r3, r3, #3
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <tcp_output+0x2a0>
 800d134:	2301      	movs	r3, #1
 800d136:	e000      	b.n	800d13a <tcp_output+0x2a2>
 800d138:	2300      	movs	r3, #0
 800d13a:	442b      	add	r3, r5
 800d13c:	4423      	add	r3, r4
 800d13e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	2b00      	cmp	r3, #0
 800d14a:	da02      	bge.n	800d152 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d154:	891b      	ldrh	r3, [r3, #8]
 800d156:	461c      	mov	r4, r3
 800d158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	899b      	ldrh	r3, [r3, #12]
 800d15e:	b29b      	uxth	r3, r3
 800d160:	4618      	mov	r0, r3
 800d162:	f7f7 fb27 	bl	80047b4 <lwip_htons>
 800d166:	4603      	mov	r3, r0
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <tcp_output+0x2de>
 800d172:	2301      	movs	r3, #1
 800d174:	e000      	b.n	800d178 <tcp_output+0x2e0>
 800d176:	2300      	movs	r3, #0
 800d178:	4423      	add	r3, r4
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d049      	beq.n	800d212 <tcp_output+0x37a>
      seg->next = NULL;
 800d17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d180:	2200      	movs	r2, #0
 800d182:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d105      	bne.n	800d198 <tcp_output+0x300>
        pcb->unacked = seg;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d190:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d194:	623b      	str	r3, [r7, #32]
 800d196:	e03f      	b.n	800d218 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7f7 fb1d 	bl	80047de <lwip_htonl>
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f7 fb16 	bl	80047de <lwip_htonl>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	1ae3      	subs	r3, r4, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	da24      	bge.n	800d204 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	3370      	adds	r3, #112	@ 0x70
 800d1be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d1c0:	e002      	b.n	800d1c8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d011      	beq.n	800d1f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7f7 fb00 	bl	80047de <lwip_htonl>
 800d1de:	4604      	mov	r4, r0
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7f7 faf9 	bl	80047de <lwip_htonl>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	dbe6      	blt.n	800d1c2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1fa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	e009      	b.n	800d218 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d208:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d20a:	6a3b      	ldr	r3, [r7, #32]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	623b      	str	r3, [r7, #32]
 800d210:	e002      	b.n	800d218 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d212:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d214:	f7fc fc45 	bl	8009aa2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d21c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d220:	2b00      	cmp	r3, #0
 800d222:	d012      	beq.n	800d24a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7f7 fad7 	bl	80047de <lwip_htonl>
 800d230:	4602      	mov	r2, r0
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d23a:	8912      	ldrh	r2, [r2, #8]
 800d23c:	4413      	add	r3, r2
  while (seg != NULL &&
 800d23e:	69ba      	ldr	r2, [r7, #24]
 800d240:	429a      	cmp	r2, r3
 800d242:	f4bf aed9 	bcs.w	800cff8 <tcp_output+0x160>
 800d246:	e000      	b.n	800d24a <tcp_output+0x3b2>
      break;
 800d248:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d108      	bne.n	800d264 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d25a:	e004      	b.n	800d266 <tcp_output+0x3ce>
    goto output_done;
 800d25c:	bf00      	nop
 800d25e:	e002      	b.n	800d266 <tcp_output+0x3ce>
    goto output_done;
 800d260:	bf00      	nop
 800d262:	e000      	b.n	800d266 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d264:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	8b5b      	ldrh	r3, [r3, #26]
 800d26a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d26e:	b29a      	uxth	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	3728      	adds	r7, #40	@ 0x28
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bdb0      	pop	{r4, r5, r7, pc}
 800d27e:	bf00      	nop

0800d280 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d106      	bne.n	800d29c <tcp_output_segment_busy+0x1c>
 800d28e:	4b09      	ldr	r3, [pc, #36]	@ (800d2b4 <tcp_output_segment_busy+0x34>)
 800d290:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d294:	4908      	ldr	r1, [pc, #32]	@ (800d2b8 <tcp_output_segment_busy+0x38>)
 800d296:	4809      	ldr	r0, [pc, #36]	@ (800d2bc <tcp_output_segment_busy+0x3c>)
 800d298:	f001 f978 	bl	800e58c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	7b9b      	ldrb	r3, [r3, #14]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d001      	beq.n	800d2aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e000      	b.n	800d2ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	0801161c 	.word	0x0801161c
 800d2b8:	08011c2c 	.word	0x08011c2c
 800d2bc:	080116e4 	.word	0x080116e4

0800d2c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d2c0:	b5b0      	push	{r4, r5, r7, lr}
 800d2c2:	b08c      	sub	sp, #48	@ 0x30
 800d2c4:	af04      	add	r7, sp, #16
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d106      	bne.n	800d2e0 <tcp_output_segment+0x20>
 800d2d2:	4b64      	ldr	r3, [pc, #400]	@ (800d464 <tcp_output_segment+0x1a4>)
 800d2d4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d2d8:	4963      	ldr	r1, [pc, #396]	@ (800d468 <tcp_output_segment+0x1a8>)
 800d2da:	4864      	ldr	r0, [pc, #400]	@ (800d46c <tcp_output_segment+0x1ac>)
 800d2dc:	f001 f956 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <tcp_output_segment+0x34>
 800d2e6:	4b5f      	ldr	r3, [pc, #380]	@ (800d464 <tcp_output_segment+0x1a4>)
 800d2e8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d2ec:	4960      	ldr	r1, [pc, #384]	@ (800d470 <tcp_output_segment+0x1b0>)
 800d2ee:	485f      	ldr	r0, [pc, #380]	@ (800d46c <tcp_output_segment+0x1ac>)
 800d2f0:	f001 f94c 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d106      	bne.n	800d308 <tcp_output_segment+0x48>
 800d2fa:	4b5a      	ldr	r3, [pc, #360]	@ (800d464 <tcp_output_segment+0x1a4>)
 800d2fc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d300:	495c      	ldr	r1, [pc, #368]	@ (800d474 <tcp_output_segment+0x1b4>)
 800d302:	485a      	ldr	r0, [pc, #360]	@ (800d46c <tcp_output_segment+0x1ac>)
 800d304:	f001 f942 	bl	800e58c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f7ff ffb9 	bl	800d280 <tcp_output_segment_busy>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	e0a1      	b.n	800d45c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	68dc      	ldr	r4, [r3, #12]
 800d320:	4610      	mov	r0, r2
 800d322:	f7f7 fa5c 	bl	80047de <lwip_htonl>
 800d326:	4603      	mov	r3, r0
 800d328:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	68dc      	ldr	r4, [r3, #12]
 800d332:	4610      	mov	r0, r2
 800d334:	f7f7 fa3e 	bl	80047b4 <lwip_htons>
 800d338:	4603      	mov	r3, r0
 800d33a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d344:	441a      	add	r2, r3
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	3314      	adds	r3, #20
 800d350:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	7a9b      	ldrb	r3, [r3, #10]
 800d356:	f003 0301 	and.w	r3, r3, #1
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d015      	beq.n	800d38a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	3304      	adds	r3, #4
 800d362:	461a      	mov	r2, r3
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d36a:	f7fc fe91 	bl	800a090 <tcp_eff_send_mss_netif>
 800d36e:	4603      	mov	r3, r0
 800d370:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d372:	8b7b      	ldrh	r3, [r7, #26]
 800d374:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d378:	4618      	mov	r0, r3
 800d37a:	f7f7 fa30 	bl	80047de <lwip_htonl>
 800d37e:	4602      	mov	r2, r0
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	3304      	adds	r3, #4
 800d388:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d390:	2b00      	cmp	r3, #0
 800d392:	da02      	bge.n	800d39a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	2200      	movs	r2, #0
 800d398:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10c      	bne.n	800d3bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d3a2:	4b35      	ldr	r3, [pc, #212]	@ (800d478 <tcp_output_segment+0x1b8>)
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7f7 fa14 	bl	80047de <lwip_htonl>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	68da      	ldr	r2, [r3, #12]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	8959      	ldrh	r1, [r3, #10]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	8b3a      	ldrh	r2, [r7, #24]
 800d3d6:	1a8a      	subs	r2, r1, r2
 800d3d8:	b292      	uxth	r2, r2
 800d3da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	8919      	ldrh	r1, [r3, #8]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	8b3a      	ldrh	r2, [r7, #24]
 800d3e8:	1a8a      	subs	r2, r1, r2
 800d3ea:	b292      	uxth	r2, r2
 800d3ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	68d2      	ldr	r2, [r2, #12]
 800d3f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	741a      	strb	r2, [r3, #16]
 800d400:	2200      	movs	r2, #0
 800d402:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	68da      	ldr	r2, [r3, #12]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	7a9b      	ldrb	r3, [r3, #10]
 800d40c:	f003 0301 	and.w	r3, r3, #1
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <tcp_output_segment+0x158>
 800d414:	2318      	movs	r3, #24
 800d416:	e000      	b.n	800d41a <tcp_output_segment+0x15a>
 800d418:	2314      	movs	r3, #20
 800d41a:	4413      	add	r3, r2
 800d41c:	69fa      	ldr	r2, [r7, #28]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d006      	beq.n	800d430 <tcp_output_segment+0x170>
 800d422:	4b10      	ldr	r3, [pc, #64]	@ (800d464 <tcp_output_segment+0x1a4>)
 800d424:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d428:	4914      	ldr	r1, [pc, #80]	@ (800d47c <tcp_output_segment+0x1bc>)
 800d42a:	4810      	ldr	r0, [pc, #64]	@ (800d46c <tcp_output_segment+0x1ac>)
 800d42c:	f001 f8ae 	bl	800e58c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6858      	ldr	r0, [r3, #4]
 800d434:	68b9      	ldr	r1, [r7, #8]
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	1d1c      	adds	r4, r3, #4
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	7add      	ldrb	r5, [r3, #11]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	7a9b      	ldrb	r3, [r3, #10]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	9202      	str	r2, [sp, #8]
 800d446:	2206      	movs	r2, #6
 800d448:	9201      	str	r2, [sp, #4]
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	462b      	mov	r3, r5
 800d44e:	4622      	mov	r2, r4
 800d450:	f7f8 fe44 	bl	80060dc <ip4_output_if>
 800d454:	4603      	mov	r3, r0
 800d456:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d458:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3720      	adds	r7, #32
 800d460:	46bd      	mov	sp, r7
 800d462:	bdb0      	pop	{r4, r5, r7, pc}
 800d464:	0801161c 	.word	0x0801161c
 800d468:	08011c54 	.word	0x08011c54
 800d46c:	080116e4 	.word	0x080116e4
 800d470:	08011c74 	.word	0x08011c74
 800d474:	08011c94 	.word	0x08011c94
 800d478:	24007c6c 	.word	0x24007c6c
 800d47c:	08011cb8 	.word	0x08011cb8

0800d480 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d480:	b5b0      	push	{r4, r5, r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d106      	bne.n	800d49c <tcp_rexmit_rto_prepare+0x1c>
 800d48e:	4b31      	ldr	r3, [pc, #196]	@ (800d554 <tcp_rexmit_rto_prepare+0xd4>)
 800d490:	f240 6263 	movw	r2, #1635	@ 0x663
 800d494:	4930      	ldr	r1, [pc, #192]	@ (800d558 <tcp_rexmit_rto_prepare+0xd8>)
 800d496:	4831      	ldr	r0, [pc, #196]	@ (800d55c <tcp_rexmit_rto_prepare+0xdc>)
 800d498:	f001 f878 	bl	800e58c <iprintf>

  if (pcb->unacked == NULL) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d102      	bne.n	800d4aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d4a4:	f06f 0305 	mvn.w	r3, #5
 800d4a8:	e050      	b.n	800d54c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	e00b      	b.n	800d4ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f7ff fee4 	bl	800d280 <tcp_output_segment_busy>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d002      	beq.n	800d4c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d4be:	f06f 0305 	mvn.w	r3, #5
 800d4c2:	e043      	b.n	800d54c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	60fb      	str	r3, [r7, #12]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1ef      	bne.n	800d4b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f7ff fed4 	bl	800d280 <tcp_output_segment_busy>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d002      	beq.n	800d4e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d4de:	f06f 0305 	mvn.w	r3, #5
 800d4e2:	e033      	b.n	800d54c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	8b5b      	ldrh	r3, [r3, #26]
 800d4fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d502:	b29a      	uxth	r2, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f7 f965 	bl	80047de <lwip_htonl>
 800d514:	4604      	mov	r4, r0
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	891b      	ldrh	r3, [r3, #8]
 800d51a:	461d      	mov	r5, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	899b      	ldrh	r3, [r3, #12]
 800d522:	b29b      	uxth	r3, r3
 800d524:	4618      	mov	r0, r3
 800d526:	f7f7 f945 	bl	80047b4 <lwip_htons>
 800d52a:	4603      	mov	r3, r0
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	f003 0303 	and.w	r3, r3, #3
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <tcp_rexmit_rto_prepare+0xba>
 800d536:	2301      	movs	r3, #1
 800d538:	e000      	b.n	800d53c <tcp_rexmit_rto_prepare+0xbc>
 800d53a:	2300      	movs	r3, #0
 800d53c:	442b      	add	r3, r5
 800d53e:	18e2      	adds	r2, r4, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bdb0      	pop	{r4, r5, r7, pc}
 800d554:	0801161c 	.word	0x0801161c
 800d558:	08011ccc 	.word	0x08011ccc
 800d55c:	080116e4 	.word	0x080116e4

0800d560 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d106      	bne.n	800d57c <tcp_rexmit_rto_commit+0x1c>
 800d56e:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a4 <tcp_rexmit_rto_commit+0x44>)
 800d570:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d574:	490c      	ldr	r1, [pc, #48]	@ (800d5a8 <tcp_rexmit_rto_commit+0x48>)
 800d576:	480d      	ldr	r0, [pc, #52]	@ (800d5ac <tcp_rexmit_rto_commit+0x4c>)
 800d578:	f001 f808 	bl	800e58c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d582:	2bff      	cmp	r3, #255	@ 0xff
 800d584:	d007      	beq.n	800d596 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d58c:	3301      	adds	r3, #1
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7ff fc7e 	bl	800ce98 <tcp_output>
}
 800d59c:	bf00      	nop
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	0801161c 	.word	0x0801161c
 800d5a8:	08011cf0 	.word	0x08011cf0
 800d5ac:	080116e4 	.word	0x080116e4

0800d5b0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <tcp_rexmit_rto+0x1c>
 800d5be:	4b0a      	ldr	r3, [pc, #40]	@ (800d5e8 <tcp_rexmit_rto+0x38>)
 800d5c0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d5c4:	4909      	ldr	r1, [pc, #36]	@ (800d5ec <tcp_rexmit_rto+0x3c>)
 800d5c6:	480a      	ldr	r0, [pc, #40]	@ (800d5f0 <tcp_rexmit_rto+0x40>)
 800d5c8:	f000 ffe0 	bl	800e58c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7ff ff57 	bl	800d480 <tcp_rexmit_rto_prepare>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff ffc1 	bl	800d560 <tcp_rexmit_rto_commit>
  }
}
 800d5de:	bf00      	nop
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	0801161c 	.word	0x0801161c
 800d5ec:	08011d14 	.word	0x08011d14
 800d5f0:	080116e4 	.word	0x080116e4

0800d5f4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d5f4:	b590      	push	{r4, r7, lr}
 800d5f6:	b085      	sub	sp, #20
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d106      	bne.n	800d610 <tcp_rexmit+0x1c>
 800d602:	4b2f      	ldr	r3, [pc, #188]	@ (800d6c0 <tcp_rexmit+0xcc>)
 800d604:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d608:	492e      	ldr	r1, [pc, #184]	@ (800d6c4 <tcp_rexmit+0xd0>)
 800d60a:	482f      	ldr	r0, [pc, #188]	@ (800d6c8 <tcp_rexmit+0xd4>)
 800d60c:	f000 ffbe 	bl	800e58c <iprintf>

  if (pcb->unacked == NULL) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d614:	2b00      	cmp	r3, #0
 800d616:	d102      	bne.n	800d61e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d618:	f06f 0305 	mvn.w	r3, #5
 800d61c:	e04c      	b.n	800d6b8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d622:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d624:	68b8      	ldr	r0, [r7, #8]
 800d626:	f7ff fe2b 	bl	800d280 <tcp_output_segment_busy>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d002      	beq.n	800d636 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d630:	f06f 0305 	mvn.w	r3, #5
 800d634:	e040      	b.n	800d6b8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	336c      	adds	r3, #108	@ 0x6c
 800d642:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d644:	e002      	b.n	800d64c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d011      	beq.n	800d678 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7f7 f8be 	bl	80047de <lwip_htonl>
 800d662:	4604      	mov	r4, r0
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7f7 f8b7 	bl	80047de <lwip_htonl>
 800d670:	4603      	mov	r3, r0
 800d672:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d674:	2b00      	cmp	r3, #0
 800d676:	dbe6      	blt.n	800d646 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d103      	bne.n	800d696 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d69c:	2bff      	cmp	r3, #255	@ 0xff
 800d69e:	d007      	beq.n	800d6b0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	b2da      	uxtb	r2, r3
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3714      	adds	r7, #20
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd90      	pop	{r4, r7, pc}
 800d6c0:	0801161c 	.word	0x0801161c
 800d6c4:	08011d30 	.word	0x08011d30
 800d6c8:	080116e4 	.word	0x080116e4

0800d6cc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <tcp_rexmit_fast+0x1c>
 800d6da:	4b2a      	ldr	r3, [pc, #168]	@ (800d784 <tcp_rexmit_fast+0xb8>)
 800d6dc:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d6e0:	4929      	ldr	r1, [pc, #164]	@ (800d788 <tcp_rexmit_fast+0xbc>)
 800d6e2:	482a      	ldr	r0, [pc, #168]	@ (800d78c <tcp_rexmit_fast+0xc0>)
 800d6e4:	f000 ff52 	bl	800e58c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d045      	beq.n	800d77c <tcp_rexmit_fast+0xb0>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	8b5b      	ldrh	r3, [r3, #26]
 800d6f4:	f003 0304 	and.w	r3, r3, #4
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d13f      	bne.n	800d77c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7ff ff79 	bl	800d5f4 <tcp_rexmit>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d139      	bne.n	800d77c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d714:	4293      	cmp	r3, r2
 800d716:	bf28      	it	cs
 800d718:	4613      	movcs	r3, r2
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	da00      	bge.n	800d722 <tcp_rexmit_fast+0x56>
 800d720:	3301      	adds	r3, #1
 800d722:	105b      	asrs	r3, r3, #1
 800d724:	b29a      	uxth	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d732:	461a      	mov	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d206      	bcs.n	800d74c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	b29a      	uxth	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d756:	4619      	mov	r1, r3
 800d758:	0049      	lsls	r1, r1, #1
 800d75a:	440b      	add	r3, r1
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	4413      	add	r3, r2
 800d760:	b29a      	uxth	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	8b5b      	ldrh	r3, [r3, #26]
 800d76c:	f043 0304 	orr.w	r3, r3, #4
 800d770:	b29a      	uxth	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d77c:	bf00      	nop
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	0801161c 	.word	0x0801161c
 800d788:	08011d48 	.word	0x08011d48
 800d78c:	080116e4 	.word	0x080116e4

0800d790 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	607b      	str	r3, [r7, #4]
 800d79a:	460b      	mov	r3, r1
 800d79c:	817b      	strh	r3, [r7, #10]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d7a2:	897a      	ldrh	r2, [r7, #10]
 800d7a4:	893b      	ldrh	r3, [r7, #8]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	3314      	adds	r3, #20
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	2022      	movs	r0, #34	@ 0x22
 800d7b6:	f7fa fc1b 	bl	8007ff0 <pbuf_alloc>
 800d7ba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d04d      	beq.n	800d85e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d7c2:	897b      	ldrh	r3, [r7, #10]
 800d7c4:	3313      	adds	r3, #19
 800d7c6:	697a      	ldr	r2, [r7, #20]
 800d7c8:	8952      	ldrh	r2, [r2, #10]
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	db06      	blt.n	800d7dc <tcp_output_alloc_header_common+0x4c>
 800d7ce:	4b26      	ldr	r3, [pc, #152]	@ (800d868 <tcp_output_alloc_header_common+0xd8>)
 800d7d0:	f240 7223 	movw	r2, #1827	@ 0x723
 800d7d4:	4925      	ldr	r1, [pc, #148]	@ (800d86c <tcp_output_alloc_header_common+0xdc>)
 800d7d6:	4826      	ldr	r0, [pc, #152]	@ (800d870 <tcp_output_alloc_header_common+0xe0>)
 800d7d8:	f000 fed8 	bl	800e58c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d7e2:	8c3b      	ldrh	r3, [r7, #32]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7f6 ffe5 	bl	80047b4 <lwip_htons>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d7f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7f6 ffdd 	bl	80047b4 <lwip_htons>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f7f6 ffe8 	bl	80047de <lwip_htonl>
 800d80e:	4602      	mov	r2, r0
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d814:	897b      	ldrh	r3, [r7, #10]
 800d816:	089b      	lsrs	r3, r3, #2
 800d818:	b29b      	uxth	r3, r3
 800d81a:	3305      	adds	r3, #5
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	031b      	lsls	r3, r3, #12
 800d820:	b29a      	uxth	r2, r3
 800d822:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d826:	b29b      	uxth	r3, r3
 800d828:	4313      	orrs	r3, r2
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7f6 ffc1 	bl	80047b4 <lwip_htons>
 800d832:	4603      	mov	r3, r0
 800d834:	461a      	mov	r2, r3
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d83a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7f6 ffb9 	bl	80047b4 <lwip_htons>
 800d842:	4603      	mov	r3, r0
 800d844:	461a      	mov	r2, r3
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	2200      	movs	r2, #0
 800d84e:	741a      	strb	r2, [r3, #16]
 800d850:	2200      	movs	r2, #0
 800d852:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	2200      	movs	r2, #0
 800d858:	749a      	strb	r2, [r3, #18]
 800d85a:	2200      	movs	r2, #0
 800d85c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d85e:	697b      	ldr	r3, [r7, #20]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	0801161c 	.word	0x0801161c
 800d86c:	08011d68 	.word	0x08011d68
 800d870:	080116e4 	.word	0x080116e4

0800d874 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d874:	b5b0      	push	{r4, r5, r7, lr}
 800d876:	b08a      	sub	sp, #40	@ 0x28
 800d878:	af04      	add	r7, sp, #16
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	607b      	str	r3, [r7, #4]
 800d87e:	460b      	mov	r3, r1
 800d880:	817b      	strh	r3, [r7, #10]
 800d882:	4613      	mov	r3, r2
 800d884:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d106      	bne.n	800d89a <tcp_output_alloc_header+0x26>
 800d88c:	4b15      	ldr	r3, [pc, #84]	@ (800d8e4 <tcp_output_alloc_header+0x70>)
 800d88e:	f240 7242 	movw	r2, #1858	@ 0x742
 800d892:	4915      	ldr	r1, [pc, #84]	@ (800d8e8 <tcp_output_alloc_header+0x74>)
 800d894:	4815      	ldr	r0, [pc, #84]	@ (800d8ec <tcp_output_alloc_header+0x78>)
 800d896:	f000 fe79 	bl	800e58c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	8adb      	ldrh	r3, [r3, #22]
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	8b12      	ldrh	r2, [r2, #24]
 800d8a6:	68f9      	ldr	r1, [r7, #12]
 800d8a8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d8aa:	893d      	ldrh	r5, [r7, #8]
 800d8ac:	897c      	ldrh	r4, [r7, #10]
 800d8ae:	9103      	str	r1, [sp, #12]
 800d8b0:	2110      	movs	r1, #16
 800d8b2:	9102      	str	r1, [sp, #8]
 800d8b4:	9201      	str	r2, [sp, #4]
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	462a      	mov	r2, r5
 800d8bc:	4621      	mov	r1, r4
 800d8be:	f7ff ff67 	bl	800d790 <tcp_output_alloc_header_common>
 800d8c2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d006      	beq.n	800d8d8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d8d2:	441a      	add	r2, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d8d8:	697b      	ldr	r3, [r7, #20]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3718      	adds	r7, #24
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bdb0      	pop	{r4, r5, r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	0801161c 	.word	0x0801161c
 800d8e8:	08011d98 	.word	0x08011d98
 800d8ec:	080116e4 	.word	0x080116e4

0800d8f0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b088      	sub	sp, #32
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	460b      	mov	r3, r1
 800d900:	71fb      	strb	r3, [r7, #7]
 800d902:	4613      	mov	r3, r2
 800d904:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d106      	bne.n	800d91e <tcp_output_fill_options+0x2e>
 800d910:	4b12      	ldr	r3, [pc, #72]	@ (800d95c <tcp_output_fill_options+0x6c>)
 800d912:	f240 7256 	movw	r2, #1878	@ 0x756
 800d916:	4912      	ldr	r1, [pc, #72]	@ (800d960 <tcp_output_fill_options+0x70>)
 800d918:	4812      	ldr	r0, [pc, #72]	@ (800d964 <tcp_output_fill_options+0x74>)
 800d91a:	f000 fe37 	bl	800e58c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	3314      	adds	r3, #20
 800d928:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d92a:	8bfb      	ldrh	r3, [r7, #30]
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	461a      	mov	r2, r3
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	f003 0304 	and.w	r3, r3, #4
 800d938:	4413      	add	r3, r2
 800d93a:	3314      	adds	r3, #20
 800d93c:	69ba      	ldr	r2, [r7, #24]
 800d93e:	4413      	add	r3, r2
 800d940:	697a      	ldr	r2, [r7, #20]
 800d942:	429a      	cmp	r2, r3
 800d944:	d006      	beq.n	800d954 <tcp_output_fill_options+0x64>
 800d946:	4b05      	ldr	r3, [pc, #20]	@ (800d95c <tcp_output_fill_options+0x6c>)
 800d948:	f240 7275 	movw	r2, #1909	@ 0x775
 800d94c:	4906      	ldr	r1, [pc, #24]	@ (800d968 <tcp_output_fill_options+0x78>)
 800d94e:	4805      	ldr	r0, [pc, #20]	@ (800d964 <tcp_output_fill_options+0x74>)
 800d950:	f000 fe1c 	bl	800e58c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d954:	bf00      	nop
 800d956:	3720      	adds	r7, #32
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	0801161c 	.word	0x0801161c
 800d960:	08011dc0 	.word	0x08011dc0
 800d964:	080116e4 	.word	0x080116e4
 800d968:	08011cb8 	.word	0x08011cb8

0800d96c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b08a      	sub	sp, #40	@ 0x28
 800d970:	af04      	add	r7, sp, #16
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
 800d978:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d106      	bne.n	800d98e <tcp_output_control_segment+0x22>
 800d980:	4b1c      	ldr	r3, [pc, #112]	@ (800d9f4 <tcp_output_control_segment+0x88>)
 800d982:	f240 7287 	movw	r2, #1927	@ 0x787
 800d986:	491c      	ldr	r1, [pc, #112]	@ (800d9f8 <tcp_output_control_segment+0x8c>)
 800d988:	481c      	ldr	r0, [pc, #112]	@ (800d9fc <tcp_output_control_segment+0x90>)
 800d98a:	f000 fdff 	bl	800e58c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f7fe ff42 	bl	800c81c <tcp_route>
 800d998:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d9a0:	23fc      	movs	r3, #252	@ 0xfc
 800d9a2:	75fb      	strb	r3, [r7, #23]
 800d9a4:	e01c      	b.n	800d9e0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d006      	beq.n	800d9ba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	7adb      	ldrb	r3, [r3, #11]
 800d9b0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	7a9b      	ldrb	r3, [r3, #10]
 800d9b6:	757b      	strb	r3, [r7, #21]
 800d9b8:	e003      	b.n	800d9c2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d9ba:	23ff      	movs	r3, #255	@ 0xff
 800d9bc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d9c2:	7dba      	ldrb	r2, [r7, #22]
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	9302      	str	r3, [sp, #8]
 800d9c8:	2306      	movs	r3, #6
 800d9ca:	9301      	str	r3, [sp, #4]
 800d9cc:	7d7b      	ldrb	r3, [r7, #21]
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	683a      	ldr	r2, [r7, #0]
 800d9d4:	6879      	ldr	r1, [r7, #4]
 800d9d6:	68b8      	ldr	r0, [r7, #8]
 800d9d8:	f7f8 fb80 	bl	80060dc <ip4_output_if>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d9e0:	68b8      	ldr	r0, [r7, #8]
 800d9e2:	f7fa fde9 	bl	80085b8 <pbuf_free>
  return err;
 800d9e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3718      	adds	r7, #24
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	0801161c 	.word	0x0801161c
 800d9f8:	08011de8 	.word	0x08011de8
 800d9fc:	080116e4 	.word	0x080116e4

0800da00 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800da00:	b590      	push	{r4, r7, lr}
 800da02:	b08b      	sub	sp, #44	@ 0x2c
 800da04:	af04      	add	r7, sp, #16
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
 800da0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d106      	bne.n	800da22 <tcp_rst+0x22>
 800da14:	4b1f      	ldr	r3, [pc, #124]	@ (800da94 <tcp_rst+0x94>)
 800da16:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800da1a:	491f      	ldr	r1, [pc, #124]	@ (800da98 <tcp_rst+0x98>)
 800da1c:	481f      	ldr	r0, [pc, #124]	@ (800da9c <tcp_rst+0x9c>)
 800da1e:	f000 fdb5 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800da22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da24:	2b00      	cmp	r3, #0
 800da26:	d106      	bne.n	800da36 <tcp_rst+0x36>
 800da28:	4b1a      	ldr	r3, [pc, #104]	@ (800da94 <tcp_rst+0x94>)
 800da2a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800da2e:	491c      	ldr	r1, [pc, #112]	@ (800daa0 <tcp_rst+0xa0>)
 800da30:	481a      	ldr	r0, [pc, #104]	@ (800da9c <tcp_rst+0x9c>)
 800da32:	f000 fdab 	bl	800e58c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800da36:	2300      	movs	r3, #0
 800da38:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800da3a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800da3e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800da40:	7dfb      	ldrb	r3, [r7, #23]
 800da42:	b29c      	uxth	r4, r3
 800da44:	68b8      	ldr	r0, [r7, #8]
 800da46:	f7f6 feca 	bl	80047de <lwip_htonl>
 800da4a:	4602      	mov	r2, r0
 800da4c:	8abb      	ldrh	r3, [r7, #20]
 800da4e:	9303      	str	r3, [sp, #12]
 800da50:	2314      	movs	r3, #20
 800da52:	9302      	str	r3, [sp, #8]
 800da54:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800da56:	9301      	str	r3, [sp, #4]
 800da58:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	4613      	mov	r3, r2
 800da5e:	2200      	movs	r2, #0
 800da60:	4621      	mov	r1, r4
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7ff fe94 	bl	800d790 <tcp_output_alloc_header_common>
 800da68:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00c      	beq.n	800da8a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800da70:	7dfb      	ldrb	r3, [r7, #23]
 800da72:	2200      	movs	r2, #0
 800da74:	6939      	ldr	r1, [r7, #16]
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	f7ff ff3a 	bl	800d8f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800da7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	6939      	ldr	r1, [r7, #16]
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f7ff ff72 	bl	800d96c <tcp_output_control_segment>
 800da88:	e000      	b.n	800da8c <tcp_rst+0x8c>
    return;
 800da8a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800da8c:	371c      	adds	r7, #28
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd90      	pop	{r4, r7, pc}
 800da92:	bf00      	nop
 800da94:	0801161c 	.word	0x0801161c
 800da98:	08011e14 	.word	0x08011e14
 800da9c:	080116e4 	.word	0x080116e4
 800daa0:	08011e30 	.word	0x08011e30

0800daa4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800daa4:	b590      	push	{r4, r7, lr}
 800daa6:	b087      	sub	sp, #28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800daac:	2300      	movs	r3, #0
 800daae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d106      	bne.n	800dac8 <tcp_send_empty_ack+0x24>
 800daba:	4b28      	ldr	r3, [pc, #160]	@ (800db5c <tcp_send_empty_ack+0xb8>)
 800dabc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800dac0:	4927      	ldr	r1, [pc, #156]	@ (800db60 <tcp_send_empty_ack+0xbc>)
 800dac2:	4828      	ldr	r0, [pc, #160]	@ (800db64 <tcp_send_empty_ack+0xc0>)
 800dac4:	f000 fd62 	bl	800e58c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dac8:	7dfb      	ldrb	r3, [r7, #23]
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0304 	and.w	r3, r3, #4
 800dad2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dad4:	7d7b      	ldrb	r3, [r7, #21]
 800dad6:	b29c      	uxth	r4, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dadc:	4618      	mov	r0, r3
 800dade:	f7f6 fe7e 	bl	80047de <lwip_htonl>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2200      	movs	r2, #0
 800dae6:	4621      	mov	r1, r4
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7ff fec3 	bl	800d874 <tcp_output_alloc_header>
 800daee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d109      	bne.n	800db0a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	8b5b      	ldrh	r3, [r3, #26]
 800dafa:	f043 0303 	orr.w	r3, r3, #3
 800dafe:	b29a      	uxth	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800db04:	f06f 0301 	mvn.w	r3, #1
 800db08:	e023      	b.n	800db52 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800db0a:	7dbb      	ldrb	r3, [r7, #22]
 800db0c:	7dfa      	ldrb	r2, [r7, #23]
 800db0e:	6939      	ldr	r1, [r7, #16]
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7ff feed 	bl	800d8f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	3304      	adds	r3, #4
 800db1c:	6939      	ldr	r1, [r7, #16]
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7ff ff24 	bl	800d96c <tcp_output_control_segment>
 800db24:	4603      	mov	r3, r0
 800db26:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800db28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d007      	beq.n	800db40 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	8b5b      	ldrh	r3, [r3, #26]
 800db34:	f043 0303 	orr.w	r3, r3, #3
 800db38:	b29a      	uxth	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	835a      	strh	r2, [r3, #26]
 800db3e:	e006      	b.n	800db4e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	8b5b      	ldrh	r3, [r3, #26]
 800db44:	f023 0303 	bic.w	r3, r3, #3
 800db48:	b29a      	uxth	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800db4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db52:	4618      	mov	r0, r3
 800db54:	371c      	adds	r7, #28
 800db56:	46bd      	mov	sp, r7
 800db58:	bd90      	pop	{r4, r7, pc}
 800db5a:	bf00      	nop
 800db5c:	0801161c 	.word	0x0801161c
 800db60:	08011e4c 	.word	0x08011e4c
 800db64:	080116e4 	.word	0x080116e4

0800db68 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800db68:	b590      	push	{r4, r7, lr}
 800db6a:	b087      	sub	sp, #28
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800db70:	2300      	movs	r3, #0
 800db72:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d106      	bne.n	800db88 <tcp_keepalive+0x20>
 800db7a:	4b18      	ldr	r3, [pc, #96]	@ (800dbdc <tcp_keepalive+0x74>)
 800db7c:	f640 0224 	movw	r2, #2084	@ 0x824
 800db80:	4917      	ldr	r1, [pc, #92]	@ (800dbe0 <tcp_keepalive+0x78>)
 800db82:	4818      	ldr	r0, [pc, #96]	@ (800dbe4 <tcp_keepalive+0x7c>)
 800db84:	f000 fd02 	bl	800e58c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800db88:	7dfb      	ldrb	r3, [r7, #23]
 800db8a:	b29c      	uxth	r4, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db90:	3b01      	subs	r3, #1
 800db92:	4618      	mov	r0, r3
 800db94:	f7f6 fe23 	bl	80047de <lwip_htonl>
 800db98:	4603      	mov	r3, r0
 800db9a:	2200      	movs	r2, #0
 800db9c:	4621      	mov	r1, r4
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7ff fe68 	bl	800d874 <tcp_output_alloc_header>
 800dba4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d102      	bne.n	800dbb2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dbac:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb0:	e010      	b.n	800dbd4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	6939      	ldr	r1, [r7, #16]
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7ff fe99 	bl	800d8f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	6939      	ldr	r1, [r7, #16]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff fed0 	bl	800d96c <tcp_output_control_segment>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dbd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	371c      	adds	r7, #28
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd90      	pop	{r4, r7, pc}
 800dbdc:	0801161c 	.word	0x0801161c
 800dbe0:	08011e6c 	.word	0x08011e6c
 800dbe4:	080116e4 	.word	0x080116e4

0800dbe8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dbe8:	b590      	push	{r4, r7, lr}
 800dbea:	b08b      	sub	sp, #44	@ 0x2c
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d106      	bne.n	800dc0a <tcp_zero_window_probe+0x22>
 800dbfc:	4b4c      	ldr	r3, [pc, #304]	@ (800dd30 <tcp_zero_window_probe+0x148>)
 800dbfe:	f640 024f 	movw	r2, #2127	@ 0x84f
 800dc02:	494c      	ldr	r1, [pc, #304]	@ (800dd34 <tcp_zero_window_probe+0x14c>)
 800dc04:	484c      	ldr	r0, [pc, #304]	@ (800dd38 <tcp_zero_window_probe+0x150>)
 800dc06:	f000 fcc1 	bl	800e58c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc0e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d101      	bne.n	800dc1a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	e086      	b.n	800dd28 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dc20:	2bff      	cmp	r3, #255	@ 0xff
 800dc22:	d007      	beq.n	800dc34 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	b2da      	uxtb	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dc34:	6a3b      	ldr	r3, [r7, #32]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	899b      	ldrh	r3, [r3, #12]
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7f6 fdb9 	bl	80047b4 <lwip_htons>
 800dc42:	4603      	mov	r3, r0
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d005      	beq.n	800dc5a <tcp_zero_window_probe+0x72>
 800dc4e:	6a3b      	ldr	r3, [r7, #32]
 800dc50:	891b      	ldrh	r3, [r3, #8]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <tcp_zero_window_probe+0x72>
 800dc56:	2301      	movs	r3, #1
 800dc58:	e000      	b.n	800dc5c <tcp_zero_window_probe+0x74>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dc5e:	7ffb      	ldrb	r3, [r7, #31]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	bf0c      	ite	eq
 800dc64:	2301      	moveq	r3, #1
 800dc66:	2300      	movne	r3, #0
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc70:	b299      	uxth	r1, r3
 800dc72:	6a3b      	ldr	r3, [r7, #32]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	8bba      	ldrh	r2, [r7, #28]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7ff fdfa 	bl	800d874 <tcp_output_alloc_header>
 800dc80:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d102      	bne.n	800dc8e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dc88:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8c:	e04c      	b.n	800dd28 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dc94:	7ffb      	ldrb	r3, [r7, #31]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d011      	beq.n	800dcbe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	899b      	ldrh	r3, [r3, #12]
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	b21b      	sxth	r3, r3
 800dca2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dca6:	b21c      	sxth	r4, r3
 800dca8:	2011      	movs	r0, #17
 800dcaa:	f7f6 fd83 	bl	80047b4 <lwip_htons>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	b21b      	sxth	r3, r3
 800dcb2:	4323      	orrs	r3, r4
 800dcb4:	b21b      	sxth	r3, r3
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	819a      	strh	r2, [r3, #12]
 800dcbc:	e010      	b.n	800dce0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	3314      	adds	r3, #20
 800dcc4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	6858      	ldr	r0, [r3, #4]
 800dcca:	6a3b      	ldr	r3, [r7, #32]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	891a      	ldrh	r2, [r3, #8]
 800dcd0:	6a3b      	ldr	r3, [r7, #32]
 800dcd2:	891b      	ldrh	r3, [r3, #8]
 800dcd4:	1ad3      	subs	r3, r2, r3
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	2201      	movs	r2, #1
 800dcda:	6939      	ldr	r1, [r7, #16]
 800dcdc:	f7fa fe56 	bl	800898c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dce0:	6a3b      	ldr	r3, [r7, #32]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7f6 fd79 	bl	80047de <lwip_htonl>
 800dcec:	4603      	mov	r3, r0
 800dcee:	3301      	adds	r3, #1
 800dcf0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	da02      	bge.n	800dd04 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd08:	2200      	movs	r2, #0
 800dd0a:	69b9      	ldr	r1, [r7, #24]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f7ff fdef 	bl	800d8f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3304      	adds	r3, #4
 800dd18:	69b9      	ldr	r1, [r7, #24]
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f7ff fe26 	bl	800d96c <tcp_output_control_segment>
 800dd20:	4603      	mov	r3, r0
 800dd22:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dd24:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	372c      	adds	r7, #44	@ 0x2c
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd90      	pop	{r4, r7, pc}
 800dd30:	0801161c 	.word	0x0801161c
 800dd34:	08011e88 	.word	0x08011e88
 800dd38:	080116e4 	.word	0x080116e4

0800dd3c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dd44:	f7fa ff10 	bl	8008b68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dd48:	4b0a      	ldr	r3, [pc, #40]	@ (800dd74 <tcpip_tcp_timer+0x38>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d103      	bne.n	800dd58 <tcpip_tcp_timer+0x1c>
 800dd50:	4b09      	ldr	r3, [pc, #36]	@ (800dd78 <tcpip_tcp_timer+0x3c>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d005      	beq.n	800dd64 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dd58:	2200      	movs	r2, #0
 800dd5a:	4908      	ldr	r1, [pc, #32]	@ (800dd7c <tcpip_tcp_timer+0x40>)
 800dd5c:	20fa      	movs	r0, #250	@ 0xfa
 800dd5e:	f000 f8f3 	bl	800df48 <sys_timeout>
 800dd62:	e003      	b.n	800dd6c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dd64:	4b06      	ldr	r3, [pc, #24]	@ (800dd80 <tcpip_tcp_timer+0x44>)
 800dd66:	2200      	movs	r2, #0
 800dd68:	601a      	str	r2, [r3, #0]
  }
}
 800dd6a:	bf00      	nop
 800dd6c:	bf00      	nop
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	24007c78 	.word	0x24007c78
 800dd78:	24007c7c 	.word	0x24007c7c
 800dd7c:	0800dd3d 	.word	0x0800dd3d
 800dd80:	24007cc4 	.word	0x24007cc4

0800dd84 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dd88:	4b0a      	ldr	r3, [pc, #40]	@ (800ddb4 <tcp_timer_needed+0x30>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d10f      	bne.n	800ddb0 <tcp_timer_needed+0x2c>
 800dd90:	4b09      	ldr	r3, [pc, #36]	@ (800ddb8 <tcp_timer_needed+0x34>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d103      	bne.n	800dda0 <tcp_timer_needed+0x1c>
 800dd98:	4b08      	ldr	r3, [pc, #32]	@ (800ddbc <tcp_timer_needed+0x38>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d007      	beq.n	800ddb0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dda0:	4b04      	ldr	r3, [pc, #16]	@ (800ddb4 <tcp_timer_needed+0x30>)
 800dda2:	2201      	movs	r2, #1
 800dda4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dda6:	2200      	movs	r2, #0
 800dda8:	4905      	ldr	r1, [pc, #20]	@ (800ddc0 <tcp_timer_needed+0x3c>)
 800ddaa:	20fa      	movs	r0, #250	@ 0xfa
 800ddac:	f000 f8cc 	bl	800df48 <sys_timeout>
  }
}
 800ddb0:	bf00      	nop
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	24007cc4 	.word	0x24007cc4
 800ddb8:	24007c78 	.word	0x24007c78
 800ddbc:	24007c7c 	.word	0x24007c7c
 800ddc0:	0800dd3d 	.word	0x0800dd3d

0800ddc4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ddd0:	2006      	movs	r0, #6
 800ddd2:	f7f9 fd0b 	bl	80077ec <memp_malloc>
 800ddd6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d109      	bne.n	800ddf2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d151      	bne.n	800de88 <sys_timeout_abs+0xc4>
 800dde4:	4b2a      	ldr	r3, [pc, #168]	@ (800de90 <sys_timeout_abs+0xcc>)
 800dde6:	22be      	movs	r2, #190	@ 0xbe
 800dde8:	492a      	ldr	r1, [pc, #168]	@ (800de94 <sys_timeout_abs+0xd0>)
 800ddea:	482b      	ldr	r0, [pc, #172]	@ (800de98 <sys_timeout_abs+0xd4>)
 800ddec:	f000 fbce 	bl	800e58c <iprintf>
    return;
 800ddf0:	e04a      	b.n	800de88 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800de0a:	4b24      	ldr	r3, [pc, #144]	@ (800de9c <sys_timeout_abs+0xd8>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d103      	bne.n	800de1a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800de12:	4a22      	ldr	r2, [pc, #136]	@ (800de9c <sys_timeout_abs+0xd8>)
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	6013      	str	r3, [r2, #0]
    return;
 800de18:	e037      	b.n	800de8a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	685a      	ldr	r2, [r3, #4]
 800de1e:	4b1f      	ldr	r3, [pc, #124]	@ (800de9c <sys_timeout_abs+0xd8>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	0fdb      	lsrs	r3, r3, #31
 800de28:	f003 0301 	and.w	r3, r3, #1
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d007      	beq.n	800de42 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800de32:	4b1a      	ldr	r3, [pc, #104]	@ (800de9c <sys_timeout_abs+0xd8>)
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800de3a:	4a18      	ldr	r2, [pc, #96]	@ (800de9c <sys_timeout_abs+0xd8>)
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	6013      	str	r3, [r2, #0]
 800de40:	e023      	b.n	800de8a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800de42:	4b16      	ldr	r3, [pc, #88]	@ (800de9c <sys_timeout_abs+0xd8>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	617b      	str	r3, [r7, #20]
 800de48:	e01a      	b.n	800de80 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00b      	beq.n	800de6a <sys_timeout_abs+0xa6>
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	685a      	ldr	r2, [r3, #4]
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	0fdb      	lsrs	r3, r3, #31
 800de60:	f003 0301 	and.w	r3, r3, #1
 800de64:	b2db      	uxtb	r3, r3
 800de66:	2b00      	cmp	r3, #0
 800de68:	d007      	beq.n	800de7a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	601a      	str	r2, [r3, #0]
        break;
 800de78:	e007      	b.n	800de8a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	617b      	str	r3, [r7, #20]
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e1      	bne.n	800de4a <sys_timeout_abs+0x86>
 800de86:	e000      	b.n	800de8a <sys_timeout_abs+0xc6>
    return;
 800de88:	bf00      	nop
      }
    }
  }
}
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	08011eac 	.word	0x08011eac
 800de94:	08011f54 	.word	0x08011f54
 800de98:	08011f94 	.word	0x08011f94
 800de9c:	24007cbc 	.word	0x24007cbc

0800dea0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	4798      	blx	r3

  now = sys_now();
 800deb2:	f7f6 fa37 	bl	8004324 <sys_now>
 800deb6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	4b0f      	ldr	r3, [pc, #60]	@ (800defc <lwip_cyclic_timer+0x5c>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4413      	add	r3, r2
 800dec2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	1ad3      	subs	r3, r2, r3
 800deca:	0fdb      	lsrs	r3, r3, #31
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d009      	beq.n	800deea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	4413      	add	r3, r2
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	4907      	ldr	r1, [pc, #28]	@ (800df00 <lwip_cyclic_timer+0x60>)
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff ff6e 	bl	800ddc4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800dee8:	e004      	b.n	800def4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	4904      	ldr	r1, [pc, #16]	@ (800df00 <lwip_cyclic_timer+0x60>)
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f7ff ff68 	bl	800ddc4 <sys_timeout_abs>
}
 800def4:	bf00      	nop
 800def6:	3718      	adds	r7, #24
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	24007cc0 	.word	0x24007cc0
 800df00:	0800dea1 	.word	0x0800dea1

0800df04 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800df0a:	2301      	movs	r3, #1
 800df0c:	607b      	str	r3, [r7, #4]
 800df0e:	e00e      	b.n	800df2e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800df10:	4a0b      	ldr	r2, [pc, #44]	@ (800df40 <sys_timeouts_init+0x3c>)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	4a08      	ldr	r2, [pc, #32]	@ (800df40 <sys_timeouts_init+0x3c>)
 800df1e:	4413      	add	r3, r2
 800df20:	461a      	mov	r2, r3
 800df22:	4908      	ldr	r1, [pc, #32]	@ (800df44 <sys_timeouts_init+0x40>)
 800df24:	f000 f810 	bl	800df48 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3301      	adds	r3, #1
 800df2c:	607b      	str	r3, [r7, #4]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b02      	cmp	r3, #2
 800df32:	d9ed      	bls.n	800df10 <sys_timeouts_init+0xc>
  }
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	080124c8 	.word	0x080124c8
 800df44:	0800dea1 	.word	0x0800dea1

0800df48 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df5a:	d306      	bcc.n	800df6a <sys_timeout+0x22>
 800df5c:	4b0a      	ldr	r3, [pc, #40]	@ (800df88 <sys_timeout+0x40>)
 800df5e:	f240 1229 	movw	r2, #297	@ 0x129
 800df62:	490a      	ldr	r1, [pc, #40]	@ (800df8c <sys_timeout+0x44>)
 800df64:	480a      	ldr	r0, [pc, #40]	@ (800df90 <sys_timeout+0x48>)
 800df66:	f000 fb11 	bl	800e58c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800df6a:	f7f6 f9db 	bl	8004324 <sys_now>
 800df6e:	4602      	mov	r2, r0
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	4413      	add	r3, r2
 800df74:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	68b9      	ldr	r1, [r7, #8]
 800df7a:	6978      	ldr	r0, [r7, #20]
 800df7c:	f7ff ff22 	bl	800ddc4 <sys_timeout_abs>
#endif
}
 800df80:	bf00      	nop
 800df82:	3718      	adds	r7, #24
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	08011eac 	.word	0x08011eac
 800df8c:	08011fbc 	.word	0x08011fbc
 800df90:	08011f94 	.word	0x08011f94

0800df94 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800df9a:	f7f6 f9c3 	bl	8004324 <sys_now>
 800df9e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800dfa0:	4b1a      	ldr	r3, [pc, #104]	@ (800e00c <sys_check_timeouts+0x78>)
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <sys_check_timeouts+0x1a>
 800dfaa:	f7f9 ffcb 	bl	8007f44 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800dfae:	4b18      	ldr	r3, [pc, #96]	@ (800e010 <sys_check_timeouts+0x7c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d022      	beq.n	800e000 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	0fdb      	lsrs	r3, r3, #31
 800dfc4:	f003 0301 	and.w	r3, r3, #1
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d11a      	bne.n	800e004 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a0f      	ldr	r2, [pc, #60]	@ (800e010 <sys_check_timeouts+0x7c>)
 800dfd4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	689b      	ldr	r3, [r3, #8]
 800dfda:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	4a0b      	ldr	r2, [pc, #44]	@ (800e014 <sys_check_timeouts+0x80>)
 800dfe8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dfea:	68b9      	ldr	r1, [r7, #8]
 800dfec:	2006      	movs	r0, #6
 800dfee:	f7f9 fc6d 	bl	80078cc <memp_free>
    if (handler != NULL) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d0d3      	beq.n	800dfa0 <sys_check_timeouts+0xc>
      handler(arg);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6838      	ldr	r0, [r7, #0]
 800dffc:	4798      	blx	r3
  do {
 800dffe:	e7cf      	b.n	800dfa0 <sys_check_timeouts+0xc>
      return;
 800e000:	bf00      	nop
 800e002:	e000      	b.n	800e006 <sys_check_timeouts+0x72>
      return;
 800e004:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e006:	3710      	adds	r7, #16
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	24007c69 	.word	0x24007c69
 800e010:	24007cbc 	.word	0x24007cbc
 800e014:	24007cc0 	.word	0x24007cc0

0800e018 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e01c:	f000 f9b6 	bl	800e38c <rand>
 800e020:	4603      	mov	r3, r0
 800e022:	b29b      	uxth	r3, r3
 800e024:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e028:	b29b      	uxth	r3, r3
 800e02a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e02e:	b29a      	uxth	r2, r3
 800e030:	4b01      	ldr	r3, [pc, #4]	@ (800e038 <udp_init+0x20>)
 800e032:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e034:	bf00      	nop
 800e036:	bd80      	pop	{r7, pc}
 800e038:	2400002c 	.word	0x2400002c

0800e03c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	4613      	mov	r3, r2
 800e048:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d105      	bne.n	800e05c <udp_input_local_match+0x20>
 800e050:	4b27      	ldr	r3, [pc, #156]	@ (800e0f0 <udp_input_local_match+0xb4>)
 800e052:	2287      	movs	r2, #135	@ 0x87
 800e054:	4927      	ldr	r1, [pc, #156]	@ (800e0f4 <udp_input_local_match+0xb8>)
 800e056:	4828      	ldr	r0, [pc, #160]	@ (800e0f8 <udp_input_local_match+0xbc>)
 800e058:	f000 fa98 	bl	800e58c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d105      	bne.n	800e06e <udp_input_local_match+0x32>
 800e062:	4b23      	ldr	r3, [pc, #140]	@ (800e0f0 <udp_input_local_match+0xb4>)
 800e064:	2288      	movs	r2, #136	@ 0x88
 800e066:	4925      	ldr	r1, [pc, #148]	@ (800e0fc <udp_input_local_match+0xc0>)
 800e068:	4823      	ldr	r0, [pc, #140]	@ (800e0f8 <udp_input_local_match+0xbc>)
 800e06a:	f000 fa8f 	bl	800e58c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	7a1b      	ldrb	r3, [r3, #8]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00b      	beq.n	800e08e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	7a1a      	ldrb	r2, [r3, #8]
 800e07a:	4b21      	ldr	r3, [pc, #132]	@ (800e100 <udp_input_local_match+0xc4>)
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e082:	3301      	adds	r3, #1
 800e084:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e086:	429a      	cmp	r2, r3
 800e088:	d001      	beq.n	800e08e <udp_input_local_match+0x52>
    return 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	e02b      	b.n	800e0e6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e08e:	79fb      	ldrb	r3, [r7, #7]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d018      	beq.n	800e0c6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d013      	beq.n	800e0c2 <udp_input_local_match+0x86>
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00f      	beq.n	800e0c2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e0a2:	4b17      	ldr	r3, [pc, #92]	@ (800e100 <udp_input_local_match+0xc4>)
 800e0a4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0aa:	d00a      	beq.n	800e0c2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	4b13      	ldr	r3, [pc, #76]	@ (800e100 <udp_input_local_match+0xc4>)
 800e0b2:	695b      	ldr	r3, [r3, #20]
 800e0b4:	405a      	eors	r2, r3
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	3308      	adds	r3, #8
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d110      	bne.n	800e0e4 <udp_input_local_match+0xa8>
          return 1;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e00f      	b.n	800e0e6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d009      	beq.n	800e0e0 <udp_input_local_match+0xa4>
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d005      	beq.n	800e0e0 <udp_input_local_match+0xa4>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	4b09      	ldr	r3, [pc, #36]	@ (800e100 <udp_input_local_match+0xc4>)
 800e0da:	695b      	ldr	r3, [r3, #20]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d101      	bne.n	800e0e4 <udp_input_local_match+0xa8>
        return 1;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e000      	b.n	800e0e6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	08012008 	.word	0x08012008
 800e0f4:	080120ac 	.word	0x080120ac
 800e0f8:	080120d0 	.word	0x080120d0
 800e0fc:	080120f8 	.word	0x080120f8
 800e100:	24004d44 	.word	0x24004d44

0800e104 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e104:	b590      	push	{r4, r7, lr}
 800e106:	b08d      	sub	sp, #52	@ 0x34
 800e108:	af02      	add	r7, sp, #8
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e10e:	2300      	movs	r3, #0
 800e110:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d105      	bne.n	800e124 <udp_input+0x20>
 800e118:	4b7c      	ldr	r3, [pc, #496]	@ (800e30c <udp_input+0x208>)
 800e11a:	22cf      	movs	r2, #207	@ 0xcf
 800e11c:	497c      	ldr	r1, [pc, #496]	@ (800e310 <udp_input+0x20c>)
 800e11e:	487d      	ldr	r0, [pc, #500]	@ (800e314 <udp_input+0x210>)
 800e120:	f000 fa34 	bl	800e58c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d105      	bne.n	800e136 <udp_input+0x32>
 800e12a:	4b78      	ldr	r3, [pc, #480]	@ (800e30c <udp_input+0x208>)
 800e12c:	22d0      	movs	r2, #208	@ 0xd0
 800e12e:	497a      	ldr	r1, [pc, #488]	@ (800e318 <udp_input+0x214>)
 800e130:	4878      	ldr	r0, [pc, #480]	@ (800e314 <udp_input+0x210>)
 800e132:	f000 fa2b 	bl	800e58c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	895b      	ldrh	r3, [r3, #10]
 800e13a:	2b07      	cmp	r3, #7
 800e13c:	d803      	bhi.n	800e146 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f7fa fa3a 	bl	80085b8 <pbuf_free>
    goto end;
 800e144:	e0de      	b.n	800e304 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e14c:	4b73      	ldr	r3, [pc, #460]	@ (800e31c <udp_input+0x218>)
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	4a72      	ldr	r2, [pc, #456]	@ (800e31c <udp_input+0x218>)
 800e152:	6812      	ldr	r2, [r2, #0]
 800e154:	4611      	mov	r1, r2
 800e156:	4618      	mov	r0, r3
 800e158:	f7f8 f898 	bl	800628c <ip4_addr_isbroadcast_u32>
 800e15c:	4603      	mov	r3, r0
 800e15e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	881b      	ldrh	r3, [r3, #0]
 800e164:	b29b      	uxth	r3, r3
 800e166:	4618      	mov	r0, r3
 800e168:	f7f6 fb24 	bl	80047b4 <lwip_htons>
 800e16c:	4603      	mov	r3, r0
 800e16e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	885b      	ldrh	r3, [r3, #2]
 800e174:	b29b      	uxth	r3, r3
 800e176:	4618      	mov	r0, r3
 800e178:	f7f6 fb1c 	bl	80047b4 <lwip_htons>
 800e17c:	4603      	mov	r3, r0
 800e17e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e180:	2300      	movs	r3, #0
 800e182:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e188:	2300      	movs	r3, #0
 800e18a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e18c:	4b64      	ldr	r3, [pc, #400]	@ (800e320 <udp_input+0x21c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	627b      	str	r3, [r7, #36]	@ 0x24
 800e192:	e054      	b.n	800e23e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e196:	8a5b      	ldrh	r3, [r3, #18]
 800e198:	89fa      	ldrh	r2, [r7, #14]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d14a      	bne.n	800e234 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e19e:	7cfb      	ldrb	r3, [r7, #19]
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	6839      	ldr	r1, [r7, #0]
 800e1a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e1a6:	f7ff ff49 	bl	800e03c <udp_input_local_match>
 800e1aa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d041      	beq.n	800e234 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1b2:	7c1b      	ldrb	r3, [r3, #16]
 800e1b4:	f003 0304 	and.w	r3, r3, #4
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d11d      	bne.n	800e1f8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d102      	bne.n	800e1c8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c4:	61fb      	str	r3, [r7, #28]
 800e1c6:	e017      	b.n	800e1f8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e1c8:	7cfb      	ldrb	r3, [r7, #19]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d014      	beq.n	800e1f8 <udp_input+0xf4>
 800e1ce:	4b53      	ldr	r3, [pc, #332]	@ (800e31c <udp_input+0x218>)
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d6:	d10f      	bne.n	800e1f8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	3304      	adds	r3, #4
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d008      	beq.n	800e1f8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d101      	bne.n	800e1f8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fa:	8a9b      	ldrh	r3, [r3, #20]
 800e1fc:	8a3a      	ldrh	r2, [r7, #16]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d118      	bne.n	800e234 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e204:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e206:	2b00      	cmp	r3, #0
 800e208:	d005      	beq.n	800e216 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	4b43      	ldr	r3, [pc, #268]	@ (800e31c <udp_input+0x218>)
 800e210:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e212:	429a      	cmp	r2, r3
 800e214:	d10e      	bne.n	800e234 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e216:	6a3b      	ldr	r3, [r7, #32]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d014      	beq.n	800e246 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21e:	68da      	ldr	r2, [r3, #12]
 800e220:	6a3b      	ldr	r3, [r7, #32]
 800e222:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e224:	4b3e      	ldr	r3, [pc, #248]	@ (800e320 <udp_input+0x21c>)
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e22c:	4a3c      	ldr	r2, [pc, #240]	@ (800e320 <udp_input+0x21c>)
 800e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e230:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e232:	e008      	b.n	800e246 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e236:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1a7      	bne.n	800e194 <udp_input+0x90>
 800e244:	e000      	b.n	800e248 <udp_input+0x144>
        break;
 800e246:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d101      	bne.n	800e252 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <udp_input+0x15a>
    for_us = 1;
 800e258:	2301      	movs	r3, #1
 800e25a:	76fb      	strb	r3, [r7, #27]
 800e25c:	e00a      	b.n	800e274 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	3304      	adds	r3, #4
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	4b2d      	ldr	r3, [pc, #180]	@ (800e31c <udp_input+0x218>)
 800e266:	695b      	ldr	r3, [r3, #20]
 800e268:	429a      	cmp	r2, r3
 800e26a:	bf0c      	ite	eq
 800e26c:	2301      	moveq	r3, #1
 800e26e:	2300      	movne	r3, #0
 800e270:	b2db      	uxtb	r3, r3
 800e272:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e274:	7efb      	ldrb	r3, [r7, #27]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d041      	beq.n	800e2fe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e27a:	2108      	movs	r1, #8
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f7fa f915 	bl	80084ac <pbuf_remove_header>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00a      	beq.n	800e29e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e288:	4b20      	ldr	r3, [pc, #128]	@ (800e30c <udp_input+0x208>)
 800e28a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e28e:	4925      	ldr	r1, [pc, #148]	@ (800e324 <udp_input+0x220>)
 800e290:	4820      	ldr	r0, [pc, #128]	@ (800e314 <udp_input+0x210>)
 800e292:	f000 f97b 	bl	800e58c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f7fa f98e 	bl	80085b8 <pbuf_free>
      goto end;
 800e29c:	e032      	b.n	800e304 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d012      	beq.n	800e2ca <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a6:	699b      	ldr	r3, [r3, #24]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00a      	beq.n	800e2c2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ae:	699c      	ldr	r4, [r3, #24]
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b2:	69d8      	ldr	r0, [r3, #28]
 800e2b4:	8a3b      	ldrh	r3, [r7, #16]
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	4b1b      	ldr	r3, [pc, #108]	@ (800e328 <udp_input+0x224>)
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e2be:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e2c0:	e021      	b.n	800e306 <udp_input+0x202>
        pbuf_free(p);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7fa f978 	bl	80085b8 <pbuf_free>
        goto end;
 800e2c8:	e01c      	b.n	800e304 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e2ca:	7cfb      	ldrb	r3, [r7, #19]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d112      	bne.n	800e2f6 <udp_input+0x1f2>
 800e2d0:	4b12      	ldr	r3, [pc, #72]	@ (800e31c <udp_input+0x218>)
 800e2d2:	695b      	ldr	r3, [r3, #20]
 800e2d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e2d8:	2be0      	cmp	r3, #224	@ 0xe0
 800e2da:	d00c      	beq.n	800e2f6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e2dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e31c <udp_input+0x218>)
 800e2de:	899b      	ldrh	r3, [r3, #12]
 800e2e0:	3308      	adds	r3, #8
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	b21b      	sxth	r3, r3
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7fa f952 	bl	8008592 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e2ee:	2103      	movs	r1, #3
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7f7 fbcf 	bl	8005a94 <icmp_dest_unreach>
      pbuf_free(p);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7fa f95e 	bl	80085b8 <pbuf_free>
  return;
 800e2fc:	e003      	b.n	800e306 <udp_input+0x202>
    pbuf_free(p);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7fa f95a 	bl	80085b8 <pbuf_free>
  return;
 800e304:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e306:	372c      	adds	r7, #44	@ 0x2c
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd90      	pop	{r4, r7, pc}
 800e30c:	08012008 	.word	0x08012008
 800e310:	08012120 	.word	0x08012120
 800e314:	080120d0 	.word	0x080120d0
 800e318:	08012138 	.word	0x08012138
 800e31c:	24004d44 	.word	0x24004d44
 800e320:	24007cc8 	.word	0x24007cc8
 800e324:	08012154 	.word	0x08012154
 800e328:	24004d54 	.word	0x24004d54

0800e32c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d01e      	beq.n	800e37a <udp_netif_ip_addr_changed+0x4e>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d01a      	beq.n	800e37a <udp_netif_ip_addr_changed+0x4e>
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d017      	beq.n	800e37a <udp_netif_ip_addr_changed+0x4e>
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d013      	beq.n	800e37a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e352:	4b0d      	ldr	r3, [pc, #52]	@ (800e388 <udp_netif_ip_addr_changed+0x5c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	60fb      	str	r3, [r7, #12]
 800e358:	e00c      	b.n	800e374 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	429a      	cmp	r2, r3
 800e364:	d103      	bne.n	800e36e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	60fb      	str	r3, [r7, #12]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1ef      	bne.n	800e35a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e37a:	bf00      	nop
 800e37c:	3714      	adds	r7, #20
 800e37e:	46bd      	mov	sp, r7
 800e380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e384:	4770      	bx	lr
 800e386:	bf00      	nop
 800e388:	24007cc8 	.word	0x24007cc8

0800e38c <rand>:
 800e38c:	4b16      	ldr	r3, [pc, #88]	@ (800e3e8 <rand+0x5c>)
 800e38e:	b510      	push	{r4, lr}
 800e390:	681c      	ldr	r4, [r3, #0]
 800e392:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e394:	b9b3      	cbnz	r3, 800e3c4 <rand+0x38>
 800e396:	2018      	movs	r0, #24
 800e398:	f000 fa4a 	bl	800e830 <malloc>
 800e39c:	4602      	mov	r2, r0
 800e39e:	6320      	str	r0, [r4, #48]	@ 0x30
 800e3a0:	b920      	cbnz	r0, 800e3ac <rand+0x20>
 800e3a2:	4b12      	ldr	r3, [pc, #72]	@ (800e3ec <rand+0x60>)
 800e3a4:	4812      	ldr	r0, [pc, #72]	@ (800e3f0 <rand+0x64>)
 800e3a6:	2152      	movs	r1, #82	@ 0x52
 800e3a8:	f000 f9da 	bl	800e760 <__assert_func>
 800e3ac:	4911      	ldr	r1, [pc, #68]	@ (800e3f4 <rand+0x68>)
 800e3ae:	4b12      	ldr	r3, [pc, #72]	@ (800e3f8 <rand+0x6c>)
 800e3b0:	e9c0 1300 	strd	r1, r3, [r0]
 800e3b4:	4b11      	ldr	r3, [pc, #68]	@ (800e3fc <rand+0x70>)
 800e3b6:	6083      	str	r3, [r0, #8]
 800e3b8:	230b      	movs	r3, #11
 800e3ba:	8183      	strh	r3, [r0, #12]
 800e3bc:	2100      	movs	r1, #0
 800e3be:	2001      	movs	r0, #1
 800e3c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e3c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e3c6:	480e      	ldr	r0, [pc, #56]	@ (800e400 <rand+0x74>)
 800e3c8:	690b      	ldr	r3, [r1, #16]
 800e3ca:	694c      	ldr	r4, [r1, #20]
 800e3cc:	4a0d      	ldr	r2, [pc, #52]	@ (800e404 <rand+0x78>)
 800e3ce:	4358      	muls	r0, r3
 800e3d0:	fb02 0004 	mla	r0, r2, r4, r0
 800e3d4:	fba3 3202 	umull	r3, r2, r3, r2
 800e3d8:	3301      	adds	r3, #1
 800e3da:	eb40 0002 	adc.w	r0, r0, r2
 800e3de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e3e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e3e6:	bd10      	pop	{r4, pc}
 800e3e8:	2400003c 	.word	0x2400003c
 800e3ec:	080124e0 	.word	0x080124e0
 800e3f0:	080124f7 	.word	0x080124f7
 800e3f4:	abcd330e 	.word	0xabcd330e
 800e3f8:	e66d1234 	.word	0xe66d1234
 800e3fc:	0005deec 	.word	0x0005deec
 800e400:	5851f42d 	.word	0x5851f42d
 800e404:	4c957f2d 	.word	0x4c957f2d

0800e408 <std>:
 800e408:	2300      	movs	r3, #0
 800e40a:	b510      	push	{r4, lr}
 800e40c:	4604      	mov	r4, r0
 800e40e:	e9c0 3300 	strd	r3, r3, [r0]
 800e412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e416:	6083      	str	r3, [r0, #8]
 800e418:	8181      	strh	r1, [r0, #12]
 800e41a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e41c:	81c2      	strh	r2, [r0, #14]
 800e41e:	6183      	str	r3, [r0, #24]
 800e420:	4619      	mov	r1, r3
 800e422:	2208      	movs	r2, #8
 800e424:	305c      	adds	r0, #92	@ 0x5c
 800e426:	f000 f916 	bl	800e656 <memset>
 800e42a:	4b0d      	ldr	r3, [pc, #52]	@ (800e460 <std+0x58>)
 800e42c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e42e:	4b0d      	ldr	r3, [pc, #52]	@ (800e464 <std+0x5c>)
 800e430:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e432:	4b0d      	ldr	r3, [pc, #52]	@ (800e468 <std+0x60>)
 800e434:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e436:	4b0d      	ldr	r3, [pc, #52]	@ (800e46c <std+0x64>)
 800e438:	6323      	str	r3, [r4, #48]	@ 0x30
 800e43a:	4b0d      	ldr	r3, [pc, #52]	@ (800e470 <std+0x68>)
 800e43c:	6224      	str	r4, [r4, #32]
 800e43e:	429c      	cmp	r4, r3
 800e440:	d006      	beq.n	800e450 <std+0x48>
 800e442:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e446:	4294      	cmp	r4, r2
 800e448:	d002      	beq.n	800e450 <std+0x48>
 800e44a:	33d0      	adds	r3, #208	@ 0xd0
 800e44c:	429c      	cmp	r4, r3
 800e44e:	d105      	bne.n	800e45c <std+0x54>
 800e450:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e458:	f000 b970 	b.w	800e73c <__retarget_lock_init_recursive>
 800e45c:	bd10      	pop	{r4, pc}
 800e45e:	bf00      	nop
 800e460:	0800e5b1 	.word	0x0800e5b1
 800e464:	0800e5d3 	.word	0x0800e5d3
 800e468:	0800e60b 	.word	0x0800e60b
 800e46c:	0800e62f 	.word	0x0800e62f
 800e470:	24007ccc 	.word	0x24007ccc

0800e474 <stdio_exit_handler>:
 800e474:	4a02      	ldr	r2, [pc, #8]	@ (800e480 <stdio_exit_handler+0xc>)
 800e476:	4903      	ldr	r1, [pc, #12]	@ (800e484 <stdio_exit_handler+0x10>)
 800e478:	4803      	ldr	r0, [pc, #12]	@ (800e488 <stdio_exit_handler+0x14>)
 800e47a:	f000 b869 	b.w	800e550 <_fwalk_sglue>
 800e47e:	bf00      	nop
 800e480:	24000030 	.word	0x24000030
 800e484:	0800f045 	.word	0x0800f045
 800e488:	24000040 	.word	0x24000040

0800e48c <cleanup_stdio>:
 800e48c:	6841      	ldr	r1, [r0, #4]
 800e48e:	4b0c      	ldr	r3, [pc, #48]	@ (800e4c0 <cleanup_stdio+0x34>)
 800e490:	4299      	cmp	r1, r3
 800e492:	b510      	push	{r4, lr}
 800e494:	4604      	mov	r4, r0
 800e496:	d001      	beq.n	800e49c <cleanup_stdio+0x10>
 800e498:	f000 fdd4 	bl	800f044 <_fflush_r>
 800e49c:	68a1      	ldr	r1, [r4, #8]
 800e49e:	4b09      	ldr	r3, [pc, #36]	@ (800e4c4 <cleanup_stdio+0x38>)
 800e4a0:	4299      	cmp	r1, r3
 800e4a2:	d002      	beq.n	800e4aa <cleanup_stdio+0x1e>
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f000 fdcd 	bl	800f044 <_fflush_r>
 800e4aa:	68e1      	ldr	r1, [r4, #12]
 800e4ac:	4b06      	ldr	r3, [pc, #24]	@ (800e4c8 <cleanup_stdio+0x3c>)
 800e4ae:	4299      	cmp	r1, r3
 800e4b0:	d004      	beq.n	800e4bc <cleanup_stdio+0x30>
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4b8:	f000 bdc4 	b.w	800f044 <_fflush_r>
 800e4bc:	bd10      	pop	{r4, pc}
 800e4be:	bf00      	nop
 800e4c0:	24007ccc 	.word	0x24007ccc
 800e4c4:	24007d34 	.word	0x24007d34
 800e4c8:	24007d9c 	.word	0x24007d9c

0800e4cc <global_stdio_init.part.0>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e4fc <global_stdio_init.part.0+0x30>)
 800e4d0:	4c0b      	ldr	r4, [pc, #44]	@ (800e500 <global_stdio_init.part.0+0x34>)
 800e4d2:	4a0c      	ldr	r2, [pc, #48]	@ (800e504 <global_stdio_init.part.0+0x38>)
 800e4d4:	601a      	str	r2, [r3, #0]
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	2200      	movs	r2, #0
 800e4da:	2104      	movs	r1, #4
 800e4dc:	f7ff ff94 	bl	800e408 <std>
 800e4e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	2109      	movs	r1, #9
 800e4e8:	f7ff ff8e 	bl	800e408 <std>
 800e4ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4f6:	2112      	movs	r1, #18
 800e4f8:	f7ff bf86 	b.w	800e408 <std>
 800e4fc:	24007e04 	.word	0x24007e04
 800e500:	24007ccc 	.word	0x24007ccc
 800e504:	0800e475 	.word	0x0800e475

0800e508 <__sfp_lock_acquire>:
 800e508:	4801      	ldr	r0, [pc, #4]	@ (800e510 <__sfp_lock_acquire+0x8>)
 800e50a:	f000 b918 	b.w	800e73e <__retarget_lock_acquire_recursive>
 800e50e:	bf00      	nop
 800e510:	24007e0d 	.word	0x24007e0d

0800e514 <__sfp_lock_release>:
 800e514:	4801      	ldr	r0, [pc, #4]	@ (800e51c <__sfp_lock_release+0x8>)
 800e516:	f000 b913 	b.w	800e740 <__retarget_lock_release_recursive>
 800e51a:	bf00      	nop
 800e51c:	24007e0d 	.word	0x24007e0d

0800e520 <__sinit>:
 800e520:	b510      	push	{r4, lr}
 800e522:	4604      	mov	r4, r0
 800e524:	f7ff fff0 	bl	800e508 <__sfp_lock_acquire>
 800e528:	6a23      	ldr	r3, [r4, #32]
 800e52a:	b11b      	cbz	r3, 800e534 <__sinit+0x14>
 800e52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e530:	f7ff bff0 	b.w	800e514 <__sfp_lock_release>
 800e534:	4b04      	ldr	r3, [pc, #16]	@ (800e548 <__sinit+0x28>)
 800e536:	6223      	str	r3, [r4, #32]
 800e538:	4b04      	ldr	r3, [pc, #16]	@ (800e54c <__sinit+0x2c>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1f5      	bne.n	800e52c <__sinit+0xc>
 800e540:	f7ff ffc4 	bl	800e4cc <global_stdio_init.part.0>
 800e544:	e7f2      	b.n	800e52c <__sinit+0xc>
 800e546:	bf00      	nop
 800e548:	0800e48d 	.word	0x0800e48d
 800e54c:	24007e04 	.word	0x24007e04

0800e550 <_fwalk_sglue>:
 800e550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e554:	4607      	mov	r7, r0
 800e556:	4688      	mov	r8, r1
 800e558:	4614      	mov	r4, r2
 800e55a:	2600      	movs	r6, #0
 800e55c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e560:	f1b9 0901 	subs.w	r9, r9, #1
 800e564:	d505      	bpl.n	800e572 <_fwalk_sglue+0x22>
 800e566:	6824      	ldr	r4, [r4, #0]
 800e568:	2c00      	cmp	r4, #0
 800e56a:	d1f7      	bne.n	800e55c <_fwalk_sglue+0xc>
 800e56c:	4630      	mov	r0, r6
 800e56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e572:	89ab      	ldrh	r3, [r5, #12]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d907      	bls.n	800e588 <_fwalk_sglue+0x38>
 800e578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e57c:	3301      	adds	r3, #1
 800e57e:	d003      	beq.n	800e588 <_fwalk_sglue+0x38>
 800e580:	4629      	mov	r1, r5
 800e582:	4638      	mov	r0, r7
 800e584:	47c0      	blx	r8
 800e586:	4306      	orrs	r6, r0
 800e588:	3568      	adds	r5, #104	@ 0x68
 800e58a:	e7e9      	b.n	800e560 <_fwalk_sglue+0x10>

0800e58c <iprintf>:
 800e58c:	b40f      	push	{r0, r1, r2, r3}
 800e58e:	b507      	push	{r0, r1, r2, lr}
 800e590:	4906      	ldr	r1, [pc, #24]	@ (800e5ac <iprintf+0x20>)
 800e592:	ab04      	add	r3, sp, #16
 800e594:	6808      	ldr	r0, [r1, #0]
 800e596:	f853 2b04 	ldr.w	r2, [r3], #4
 800e59a:	6881      	ldr	r1, [r0, #8]
 800e59c:	9301      	str	r3, [sp, #4]
 800e59e:	f000 fa27 	bl	800e9f0 <_vfiprintf_r>
 800e5a2:	b003      	add	sp, #12
 800e5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5a8:	b004      	add	sp, #16
 800e5aa:	4770      	bx	lr
 800e5ac:	2400003c 	.word	0x2400003c

0800e5b0 <__sread>:
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b8:	f000 f878 	bl	800e6ac <_read_r>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	bfab      	itete	ge
 800e5c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e5c2:	89a3      	ldrhlt	r3, [r4, #12]
 800e5c4:	181b      	addge	r3, r3, r0
 800e5c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e5ca:	bfac      	ite	ge
 800e5cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e5ce:	81a3      	strhlt	r3, [r4, #12]
 800e5d0:	bd10      	pop	{r4, pc}

0800e5d2 <__swrite>:
 800e5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d6:	461f      	mov	r7, r3
 800e5d8:	898b      	ldrh	r3, [r1, #12]
 800e5da:	05db      	lsls	r3, r3, #23
 800e5dc:	4605      	mov	r5, r0
 800e5de:	460c      	mov	r4, r1
 800e5e0:	4616      	mov	r6, r2
 800e5e2:	d505      	bpl.n	800e5f0 <__swrite+0x1e>
 800e5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f000 f84c 	bl	800e688 <_lseek_r>
 800e5f0:	89a3      	ldrh	r3, [r4, #12]
 800e5f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e5fa:	81a3      	strh	r3, [r4, #12]
 800e5fc:	4632      	mov	r2, r6
 800e5fe:	463b      	mov	r3, r7
 800e600:	4628      	mov	r0, r5
 800e602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e606:	f000 b863 	b.w	800e6d0 <_write_r>

0800e60a <__sseek>:
 800e60a:	b510      	push	{r4, lr}
 800e60c:	460c      	mov	r4, r1
 800e60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e612:	f000 f839 	bl	800e688 <_lseek_r>
 800e616:	1c43      	adds	r3, r0, #1
 800e618:	89a3      	ldrh	r3, [r4, #12]
 800e61a:	bf15      	itete	ne
 800e61c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e61e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e626:	81a3      	strheq	r3, [r4, #12]
 800e628:	bf18      	it	ne
 800e62a:	81a3      	strhne	r3, [r4, #12]
 800e62c:	bd10      	pop	{r4, pc}

0800e62e <__sclose>:
 800e62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e632:	f000 b819 	b.w	800e668 <_close_r>

0800e636 <memcmp>:
 800e636:	b510      	push	{r4, lr}
 800e638:	3901      	subs	r1, #1
 800e63a:	4402      	add	r2, r0
 800e63c:	4290      	cmp	r0, r2
 800e63e:	d101      	bne.n	800e644 <memcmp+0xe>
 800e640:	2000      	movs	r0, #0
 800e642:	e005      	b.n	800e650 <memcmp+0x1a>
 800e644:	7803      	ldrb	r3, [r0, #0]
 800e646:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e64a:	42a3      	cmp	r3, r4
 800e64c:	d001      	beq.n	800e652 <memcmp+0x1c>
 800e64e:	1b18      	subs	r0, r3, r4
 800e650:	bd10      	pop	{r4, pc}
 800e652:	3001      	adds	r0, #1
 800e654:	e7f2      	b.n	800e63c <memcmp+0x6>

0800e656 <memset>:
 800e656:	4402      	add	r2, r0
 800e658:	4603      	mov	r3, r0
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d100      	bne.n	800e660 <memset+0xa>
 800e65e:	4770      	bx	lr
 800e660:	f803 1b01 	strb.w	r1, [r3], #1
 800e664:	e7f9      	b.n	800e65a <memset+0x4>
	...

0800e668 <_close_r>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	4d06      	ldr	r5, [pc, #24]	@ (800e684 <_close_r+0x1c>)
 800e66c:	2300      	movs	r3, #0
 800e66e:	4604      	mov	r4, r0
 800e670:	4608      	mov	r0, r1
 800e672:	602b      	str	r3, [r5, #0]
 800e674:	f7f2 f9ca 	bl	8000a0c <_close>
 800e678:	1c43      	adds	r3, r0, #1
 800e67a:	d102      	bne.n	800e682 <_close_r+0x1a>
 800e67c:	682b      	ldr	r3, [r5, #0]
 800e67e:	b103      	cbz	r3, 800e682 <_close_r+0x1a>
 800e680:	6023      	str	r3, [r4, #0]
 800e682:	bd38      	pop	{r3, r4, r5, pc}
 800e684:	24007e08 	.word	0x24007e08

0800e688 <_lseek_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4d07      	ldr	r5, [pc, #28]	@ (800e6a8 <_lseek_r+0x20>)
 800e68c:	4604      	mov	r4, r0
 800e68e:	4608      	mov	r0, r1
 800e690:	4611      	mov	r1, r2
 800e692:	2200      	movs	r2, #0
 800e694:	602a      	str	r2, [r5, #0]
 800e696:	461a      	mov	r2, r3
 800e698:	f7f2 f9df 	bl	8000a5a <_lseek>
 800e69c:	1c43      	adds	r3, r0, #1
 800e69e:	d102      	bne.n	800e6a6 <_lseek_r+0x1e>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	b103      	cbz	r3, 800e6a6 <_lseek_r+0x1e>
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	24007e08 	.word	0x24007e08

0800e6ac <_read_r>:
 800e6ac:	b538      	push	{r3, r4, r5, lr}
 800e6ae:	4d07      	ldr	r5, [pc, #28]	@ (800e6cc <_read_r+0x20>)
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	4608      	mov	r0, r1
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	602a      	str	r2, [r5, #0]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f7f2 f96d 	bl	800099a <_read>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	d102      	bne.n	800e6ca <_read_r+0x1e>
 800e6c4:	682b      	ldr	r3, [r5, #0]
 800e6c6:	b103      	cbz	r3, 800e6ca <_read_r+0x1e>
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	24007e08 	.word	0x24007e08

0800e6d0 <_write_r>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	4d07      	ldr	r5, [pc, #28]	@ (800e6f0 <_write_r+0x20>)
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	4608      	mov	r0, r1
 800e6d8:	4611      	mov	r1, r2
 800e6da:	2200      	movs	r2, #0
 800e6dc:	602a      	str	r2, [r5, #0]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	f7f2 f978 	bl	80009d4 <_write>
 800e6e4:	1c43      	adds	r3, r0, #1
 800e6e6:	d102      	bne.n	800e6ee <_write_r+0x1e>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	b103      	cbz	r3, 800e6ee <_write_r+0x1e>
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	bd38      	pop	{r3, r4, r5, pc}
 800e6f0:	24007e08 	.word	0x24007e08

0800e6f4 <__libc_init_array>:
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	4d0d      	ldr	r5, [pc, #52]	@ (800e72c <__libc_init_array+0x38>)
 800e6f8:	4c0d      	ldr	r4, [pc, #52]	@ (800e730 <__libc_init_array+0x3c>)
 800e6fa:	1b64      	subs	r4, r4, r5
 800e6fc:	10a4      	asrs	r4, r4, #2
 800e6fe:	2600      	movs	r6, #0
 800e700:	42a6      	cmp	r6, r4
 800e702:	d109      	bne.n	800e718 <__libc_init_array+0x24>
 800e704:	4d0b      	ldr	r5, [pc, #44]	@ (800e734 <__libc_init_array+0x40>)
 800e706:	4c0c      	ldr	r4, [pc, #48]	@ (800e738 <__libc_init_array+0x44>)
 800e708:	f000 fe4a 	bl	800f3a0 <_init>
 800e70c:	1b64      	subs	r4, r4, r5
 800e70e:	10a4      	asrs	r4, r4, #2
 800e710:	2600      	movs	r6, #0
 800e712:	42a6      	cmp	r6, r4
 800e714:	d105      	bne.n	800e722 <__libc_init_array+0x2e>
 800e716:	bd70      	pop	{r4, r5, r6, pc}
 800e718:	f855 3b04 	ldr.w	r3, [r5], #4
 800e71c:	4798      	blx	r3
 800e71e:	3601      	adds	r6, #1
 800e720:	e7ee      	b.n	800e700 <__libc_init_array+0xc>
 800e722:	f855 3b04 	ldr.w	r3, [r5], #4
 800e726:	4798      	blx	r3
 800e728:	3601      	adds	r6, #1
 800e72a:	e7f2      	b.n	800e712 <__libc_init_array+0x1e>
 800e72c:	080125c8 	.word	0x080125c8
 800e730:	080125c8 	.word	0x080125c8
 800e734:	080125c8 	.word	0x080125c8
 800e738:	080125cc 	.word	0x080125cc

0800e73c <__retarget_lock_init_recursive>:
 800e73c:	4770      	bx	lr

0800e73e <__retarget_lock_acquire_recursive>:
 800e73e:	4770      	bx	lr

0800e740 <__retarget_lock_release_recursive>:
 800e740:	4770      	bx	lr

0800e742 <memcpy>:
 800e742:	440a      	add	r2, r1
 800e744:	4291      	cmp	r1, r2
 800e746:	f100 33ff 	add.w	r3, r0, #4294967295
 800e74a:	d100      	bne.n	800e74e <memcpy+0xc>
 800e74c:	4770      	bx	lr
 800e74e:	b510      	push	{r4, lr}
 800e750:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e754:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e758:	4291      	cmp	r1, r2
 800e75a:	d1f9      	bne.n	800e750 <memcpy+0xe>
 800e75c:	bd10      	pop	{r4, pc}
	...

0800e760 <__assert_func>:
 800e760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e762:	4614      	mov	r4, r2
 800e764:	461a      	mov	r2, r3
 800e766:	4b09      	ldr	r3, [pc, #36]	@ (800e78c <__assert_func+0x2c>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4605      	mov	r5, r0
 800e76c:	68d8      	ldr	r0, [r3, #12]
 800e76e:	b954      	cbnz	r4, 800e786 <__assert_func+0x26>
 800e770:	4b07      	ldr	r3, [pc, #28]	@ (800e790 <__assert_func+0x30>)
 800e772:	461c      	mov	r4, r3
 800e774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e778:	9100      	str	r1, [sp, #0]
 800e77a:	462b      	mov	r3, r5
 800e77c:	4905      	ldr	r1, [pc, #20]	@ (800e794 <__assert_func+0x34>)
 800e77e:	f000 fc89 	bl	800f094 <fiprintf>
 800e782:	f000 fd3d 	bl	800f200 <abort>
 800e786:	4b04      	ldr	r3, [pc, #16]	@ (800e798 <__assert_func+0x38>)
 800e788:	e7f4      	b.n	800e774 <__assert_func+0x14>
 800e78a:	bf00      	nop
 800e78c:	2400003c 	.word	0x2400003c
 800e790:	0801258a 	.word	0x0801258a
 800e794:	0801255c 	.word	0x0801255c
 800e798:	0801254f 	.word	0x0801254f

0800e79c <_free_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4605      	mov	r5, r0
 800e7a0:	2900      	cmp	r1, #0
 800e7a2:	d041      	beq.n	800e828 <_free_r+0x8c>
 800e7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7a8:	1f0c      	subs	r4, r1, #4
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bfb8      	it	lt
 800e7ae:	18e4      	addlt	r4, r4, r3
 800e7b0:	f000 f8e8 	bl	800e984 <__malloc_lock>
 800e7b4:	4a1d      	ldr	r2, [pc, #116]	@ (800e82c <_free_r+0x90>)
 800e7b6:	6813      	ldr	r3, [r2, #0]
 800e7b8:	b933      	cbnz	r3, 800e7c8 <_free_r+0x2c>
 800e7ba:	6063      	str	r3, [r4, #4]
 800e7bc:	6014      	str	r4, [r2, #0]
 800e7be:	4628      	mov	r0, r5
 800e7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7c4:	f000 b8e4 	b.w	800e990 <__malloc_unlock>
 800e7c8:	42a3      	cmp	r3, r4
 800e7ca:	d908      	bls.n	800e7de <_free_r+0x42>
 800e7cc:	6820      	ldr	r0, [r4, #0]
 800e7ce:	1821      	adds	r1, r4, r0
 800e7d0:	428b      	cmp	r3, r1
 800e7d2:	bf01      	itttt	eq
 800e7d4:	6819      	ldreq	r1, [r3, #0]
 800e7d6:	685b      	ldreq	r3, [r3, #4]
 800e7d8:	1809      	addeq	r1, r1, r0
 800e7da:	6021      	streq	r1, [r4, #0]
 800e7dc:	e7ed      	b.n	800e7ba <_free_r+0x1e>
 800e7de:	461a      	mov	r2, r3
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	b10b      	cbz	r3, 800e7e8 <_free_r+0x4c>
 800e7e4:	42a3      	cmp	r3, r4
 800e7e6:	d9fa      	bls.n	800e7de <_free_r+0x42>
 800e7e8:	6811      	ldr	r1, [r2, #0]
 800e7ea:	1850      	adds	r0, r2, r1
 800e7ec:	42a0      	cmp	r0, r4
 800e7ee:	d10b      	bne.n	800e808 <_free_r+0x6c>
 800e7f0:	6820      	ldr	r0, [r4, #0]
 800e7f2:	4401      	add	r1, r0
 800e7f4:	1850      	adds	r0, r2, r1
 800e7f6:	4283      	cmp	r3, r0
 800e7f8:	6011      	str	r1, [r2, #0]
 800e7fa:	d1e0      	bne.n	800e7be <_free_r+0x22>
 800e7fc:	6818      	ldr	r0, [r3, #0]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	6053      	str	r3, [r2, #4]
 800e802:	4408      	add	r0, r1
 800e804:	6010      	str	r0, [r2, #0]
 800e806:	e7da      	b.n	800e7be <_free_r+0x22>
 800e808:	d902      	bls.n	800e810 <_free_r+0x74>
 800e80a:	230c      	movs	r3, #12
 800e80c:	602b      	str	r3, [r5, #0]
 800e80e:	e7d6      	b.n	800e7be <_free_r+0x22>
 800e810:	6820      	ldr	r0, [r4, #0]
 800e812:	1821      	adds	r1, r4, r0
 800e814:	428b      	cmp	r3, r1
 800e816:	bf04      	itt	eq
 800e818:	6819      	ldreq	r1, [r3, #0]
 800e81a:	685b      	ldreq	r3, [r3, #4]
 800e81c:	6063      	str	r3, [r4, #4]
 800e81e:	bf04      	itt	eq
 800e820:	1809      	addeq	r1, r1, r0
 800e822:	6021      	streq	r1, [r4, #0]
 800e824:	6054      	str	r4, [r2, #4]
 800e826:	e7ca      	b.n	800e7be <_free_r+0x22>
 800e828:	bd38      	pop	{r3, r4, r5, pc}
 800e82a:	bf00      	nop
 800e82c:	24007e14 	.word	0x24007e14

0800e830 <malloc>:
 800e830:	4b02      	ldr	r3, [pc, #8]	@ (800e83c <malloc+0xc>)
 800e832:	4601      	mov	r1, r0
 800e834:	6818      	ldr	r0, [r3, #0]
 800e836:	f000 b825 	b.w	800e884 <_malloc_r>
 800e83a:	bf00      	nop
 800e83c:	2400003c 	.word	0x2400003c

0800e840 <sbrk_aligned>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	4e0f      	ldr	r6, [pc, #60]	@ (800e880 <sbrk_aligned+0x40>)
 800e844:	460c      	mov	r4, r1
 800e846:	6831      	ldr	r1, [r6, #0]
 800e848:	4605      	mov	r5, r0
 800e84a:	b911      	cbnz	r1, 800e852 <sbrk_aligned+0x12>
 800e84c:	f000 fcc8 	bl	800f1e0 <_sbrk_r>
 800e850:	6030      	str	r0, [r6, #0]
 800e852:	4621      	mov	r1, r4
 800e854:	4628      	mov	r0, r5
 800e856:	f000 fcc3 	bl	800f1e0 <_sbrk_r>
 800e85a:	1c43      	adds	r3, r0, #1
 800e85c:	d103      	bne.n	800e866 <sbrk_aligned+0x26>
 800e85e:	f04f 34ff 	mov.w	r4, #4294967295
 800e862:	4620      	mov	r0, r4
 800e864:	bd70      	pop	{r4, r5, r6, pc}
 800e866:	1cc4      	adds	r4, r0, #3
 800e868:	f024 0403 	bic.w	r4, r4, #3
 800e86c:	42a0      	cmp	r0, r4
 800e86e:	d0f8      	beq.n	800e862 <sbrk_aligned+0x22>
 800e870:	1a21      	subs	r1, r4, r0
 800e872:	4628      	mov	r0, r5
 800e874:	f000 fcb4 	bl	800f1e0 <_sbrk_r>
 800e878:	3001      	adds	r0, #1
 800e87a:	d1f2      	bne.n	800e862 <sbrk_aligned+0x22>
 800e87c:	e7ef      	b.n	800e85e <sbrk_aligned+0x1e>
 800e87e:	bf00      	nop
 800e880:	24007e10 	.word	0x24007e10

0800e884 <_malloc_r>:
 800e884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e888:	1ccd      	adds	r5, r1, #3
 800e88a:	f025 0503 	bic.w	r5, r5, #3
 800e88e:	3508      	adds	r5, #8
 800e890:	2d0c      	cmp	r5, #12
 800e892:	bf38      	it	cc
 800e894:	250c      	movcc	r5, #12
 800e896:	2d00      	cmp	r5, #0
 800e898:	4606      	mov	r6, r0
 800e89a:	db01      	blt.n	800e8a0 <_malloc_r+0x1c>
 800e89c:	42a9      	cmp	r1, r5
 800e89e:	d904      	bls.n	800e8aa <_malloc_r+0x26>
 800e8a0:	230c      	movs	r3, #12
 800e8a2:	6033      	str	r3, [r6, #0]
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e980 <_malloc_r+0xfc>
 800e8ae:	f000 f869 	bl	800e984 <__malloc_lock>
 800e8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e8b6:	461c      	mov	r4, r3
 800e8b8:	bb44      	cbnz	r4, 800e90c <_malloc_r+0x88>
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	4630      	mov	r0, r6
 800e8be:	f7ff ffbf 	bl	800e840 <sbrk_aligned>
 800e8c2:	1c43      	adds	r3, r0, #1
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	d158      	bne.n	800e97a <_malloc_r+0xf6>
 800e8c8:	f8d8 4000 	ldr.w	r4, [r8]
 800e8cc:	4627      	mov	r7, r4
 800e8ce:	2f00      	cmp	r7, #0
 800e8d0:	d143      	bne.n	800e95a <_malloc_r+0xd6>
 800e8d2:	2c00      	cmp	r4, #0
 800e8d4:	d04b      	beq.n	800e96e <_malloc_r+0xea>
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	4639      	mov	r1, r7
 800e8da:	4630      	mov	r0, r6
 800e8dc:	eb04 0903 	add.w	r9, r4, r3
 800e8e0:	f000 fc7e 	bl	800f1e0 <_sbrk_r>
 800e8e4:	4581      	cmp	r9, r0
 800e8e6:	d142      	bne.n	800e96e <_malloc_r+0xea>
 800e8e8:	6821      	ldr	r1, [r4, #0]
 800e8ea:	1a6d      	subs	r5, r5, r1
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f7ff ffa6 	bl	800e840 <sbrk_aligned>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	d03a      	beq.n	800e96e <_malloc_r+0xea>
 800e8f8:	6823      	ldr	r3, [r4, #0]
 800e8fa:	442b      	add	r3, r5
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	f8d8 3000 	ldr.w	r3, [r8]
 800e902:	685a      	ldr	r2, [r3, #4]
 800e904:	bb62      	cbnz	r2, 800e960 <_malloc_r+0xdc>
 800e906:	f8c8 7000 	str.w	r7, [r8]
 800e90a:	e00f      	b.n	800e92c <_malloc_r+0xa8>
 800e90c:	6822      	ldr	r2, [r4, #0]
 800e90e:	1b52      	subs	r2, r2, r5
 800e910:	d420      	bmi.n	800e954 <_malloc_r+0xd0>
 800e912:	2a0b      	cmp	r2, #11
 800e914:	d917      	bls.n	800e946 <_malloc_r+0xc2>
 800e916:	1961      	adds	r1, r4, r5
 800e918:	42a3      	cmp	r3, r4
 800e91a:	6025      	str	r5, [r4, #0]
 800e91c:	bf18      	it	ne
 800e91e:	6059      	strne	r1, [r3, #4]
 800e920:	6863      	ldr	r3, [r4, #4]
 800e922:	bf08      	it	eq
 800e924:	f8c8 1000 	streq.w	r1, [r8]
 800e928:	5162      	str	r2, [r4, r5]
 800e92a:	604b      	str	r3, [r1, #4]
 800e92c:	4630      	mov	r0, r6
 800e92e:	f000 f82f 	bl	800e990 <__malloc_unlock>
 800e932:	f104 000b 	add.w	r0, r4, #11
 800e936:	1d23      	adds	r3, r4, #4
 800e938:	f020 0007 	bic.w	r0, r0, #7
 800e93c:	1ac2      	subs	r2, r0, r3
 800e93e:	bf1c      	itt	ne
 800e940:	1a1b      	subne	r3, r3, r0
 800e942:	50a3      	strne	r3, [r4, r2]
 800e944:	e7af      	b.n	800e8a6 <_malloc_r+0x22>
 800e946:	6862      	ldr	r2, [r4, #4]
 800e948:	42a3      	cmp	r3, r4
 800e94a:	bf0c      	ite	eq
 800e94c:	f8c8 2000 	streq.w	r2, [r8]
 800e950:	605a      	strne	r2, [r3, #4]
 800e952:	e7eb      	b.n	800e92c <_malloc_r+0xa8>
 800e954:	4623      	mov	r3, r4
 800e956:	6864      	ldr	r4, [r4, #4]
 800e958:	e7ae      	b.n	800e8b8 <_malloc_r+0x34>
 800e95a:	463c      	mov	r4, r7
 800e95c:	687f      	ldr	r7, [r7, #4]
 800e95e:	e7b6      	b.n	800e8ce <_malloc_r+0x4a>
 800e960:	461a      	mov	r2, r3
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	42a3      	cmp	r3, r4
 800e966:	d1fb      	bne.n	800e960 <_malloc_r+0xdc>
 800e968:	2300      	movs	r3, #0
 800e96a:	6053      	str	r3, [r2, #4]
 800e96c:	e7de      	b.n	800e92c <_malloc_r+0xa8>
 800e96e:	230c      	movs	r3, #12
 800e970:	6033      	str	r3, [r6, #0]
 800e972:	4630      	mov	r0, r6
 800e974:	f000 f80c 	bl	800e990 <__malloc_unlock>
 800e978:	e794      	b.n	800e8a4 <_malloc_r+0x20>
 800e97a:	6005      	str	r5, [r0, #0]
 800e97c:	e7d6      	b.n	800e92c <_malloc_r+0xa8>
 800e97e:	bf00      	nop
 800e980:	24007e14 	.word	0x24007e14

0800e984 <__malloc_lock>:
 800e984:	4801      	ldr	r0, [pc, #4]	@ (800e98c <__malloc_lock+0x8>)
 800e986:	f7ff beda 	b.w	800e73e <__retarget_lock_acquire_recursive>
 800e98a:	bf00      	nop
 800e98c:	24007e0c 	.word	0x24007e0c

0800e990 <__malloc_unlock>:
 800e990:	4801      	ldr	r0, [pc, #4]	@ (800e998 <__malloc_unlock+0x8>)
 800e992:	f7ff bed5 	b.w	800e740 <__retarget_lock_release_recursive>
 800e996:	bf00      	nop
 800e998:	24007e0c 	.word	0x24007e0c

0800e99c <__sfputc_r>:
 800e99c:	6893      	ldr	r3, [r2, #8]
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	b410      	push	{r4}
 800e9a4:	6093      	str	r3, [r2, #8]
 800e9a6:	da08      	bge.n	800e9ba <__sfputc_r+0x1e>
 800e9a8:	6994      	ldr	r4, [r2, #24]
 800e9aa:	42a3      	cmp	r3, r4
 800e9ac:	db01      	blt.n	800e9b2 <__sfputc_r+0x16>
 800e9ae:	290a      	cmp	r1, #10
 800e9b0:	d103      	bne.n	800e9ba <__sfputc_r+0x1e>
 800e9b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9b6:	f000 bb7f 	b.w	800f0b8 <__swbuf_r>
 800e9ba:	6813      	ldr	r3, [r2, #0]
 800e9bc:	1c58      	adds	r0, r3, #1
 800e9be:	6010      	str	r0, [r2, #0]
 800e9c0:	7019      	strb	r1, [r3, #0]
 800e9c2:	4608      	mov	r0, r1
 800e9c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <__sfputs_r>:
 800e9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	460f      	mov	r7, r1
 800e9d0:	4614      	mov	r4, r2
 800e9d2:	18d5      	adds	r5, r2, r3
 800e9d4:	42ac      	cmp	r4, r5
 800e9d6:	d101      	bne.n	800e9dc <__sfputs_r+0x12>
 800e9d8:	2000      	movs	r0, #0
 800e9da:	e007      	b.n	800e9ec <__sfputs_r+0x22>
 800e9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e0:	463a      	mov	r2, r7
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f7ff ffda 	bl	800e99c <__sfputc_r>
 800e9e8:	1c43      	adds	r3, r0, #1
 800e9ea:	d1f3      	bne.n	800e9d4 <__sfputs_r+0xa>
 800e9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9f0 <_vfiprintf_r>:
 800e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f4:	460d      	mov	r5, r1
 800e9f6:	b09d      	sub	sp, #116	@ 0x74
 800e9f8:	4614      	mov	r4, r2
 800e9fa:	4698      	mov	r8, r3
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	b118      	cbz	r0, 800ea08 <_vfiprintf_r+0x18>
 800ea00:	6a03      	ldr	r3, [r0, #32]
 800ea02:	b90b      	cbnz	r3, 800ea08 <_vfiprintf_r+0x18>
 800ea04:	f7ff fd8c 	bl	800e520 <__sinit>
 800ea08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea0a:	07d9      	lsls	r1, r3, #31
 800ea0c:	d405      	bmi.n	800ea1a <_vfiprintf_r+0x2a>
 800ea0e:	89ab      	ldrh	r3, [r5, #12]
 800ea10:	059a      	lsls	r2, r3, #22
 800ea12:	d402      	bmi.n	800ea1a <_vfiprintf_r+0x2a>
 800ea14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea16:	f7ff fe92 	bl	800e73e <__retarget_lock_acquire_recursive>
 800ea1a:	89ab      	ldrh	r3, [r5, #12]
 800ea1c:	071b      	lsls	r3, r3, #28
 800ea1e:	d501      	bpl.n	800ea24 <_vfiprintf_r+0x34>
 800ea20:	692b      	ldr	r3, [r5, #16]
 800ea22:	b99b      	cbnz	r3, 800ea4c <_vfiprintf_r+0x5c>
 800ea24:	4629      	mov	r1, r5
 800ea26:	4630      	mov	r0, r6
 800ea28:	f000 fb84 	bl	800f134 <__swsetup_r>
 800ea2c:	b170      	cbz	r0, 800ea4c <_vfiprintf_r+0x5c>
 800ea2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea30:	07dc      	lsls	r4, r3, #31
 800ea32:	d504      	bpl.n	800ea3e <_vfiprintf_r+0x4e>
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	b01d      	add	sp, #116	@ 0x74
 800ea3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3e:	89ab      	ldrh	r3, [r5, #12]
 800ea40:	0598      	lsls	r0, r3, #22
 800ea42:	d4f7      	bmi.n	800ea34 <_vfiprintf_r+0x44>
 800ea44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea46:	f7ff fe7b 	bl	800e740 <__retarget_lock_release_recursive>
 800ea4a:	e7f3      	b.n	800ea34 <_vfiprintf_r+0x44>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea50:	2320      	movs	r3, #32
 800ea52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea5a:	2330      	movs	r3, #48	@ 0x30
 800ea5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec0c <_vfiprintf_r+0x21c>
 800ea60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea64:	f04f 0901 	mov.w	r9, #1
 800ea68:	4623      	mov	r3, r4
 800ea6a:	469a      	mov	sl, r3
 800ea6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea70:	b10a      	cbz	r2, 800ea76 <_vfiprintf_r+0x86>
 800ea72:	2a25      	cmp	r2, #37	@ 0x25
 800ea74:	d1f9      	bne.n	800ea6a <_vfiprintf_r+0x7a>
 800ea76:	ebba 0b04 	subs.w	fp, sl, r4
 800ea7a:	d00b      	beq.n	800ea94 <_vfiprintf_r+0xa4>
 800ea7c:	465b      	mov	r3, fp
 800ea7e:	4622      	mov	r2, r4
 800ea80:	4629      	mov	r1, r5
 800ea82:	4630      	mov	r0, r6
 800ea84:	f7ff ffa1 	bl	800e9ca <__sfputs_r>
 800ea88:	3001      	adds	r0, #1
 800ea8a:	f000 80a7 	beq.w	800ebdc <_vfiprintf_r+0x1ec>
 800ea8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea90:	445a      	add	r2, fp
 800ea92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea94:	f89a 3000 	ldrb.w	r3, [sl]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f000 809f 	beq.w	800ebdc <_vfiprintf_r+0x1ec>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaa8:	f10a 0a01 	add.w	sl, sl, #1
 800eaac:	9304      	str	r3, [sp, #16]
 800eaae:	9307      	str	r3, [sp, #28]
 800eab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eab4:	931a      	str	r3, [sp, #104]	@ 0x68
 800eab6:	4654      	mov	r4, sl
 800eab8:	2205      	movs	r2, #5
 800eaba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eabe:	4853      	ldr	r0, [pc, #332]	@ (800ec0c <_vfiprintf_r+0x21c>)
 800eac0:	f7f1 fc0e 	bl	80002e0 <memchr>
 800eac4:	9a04      	ldr	r2, [sp, #16]
 800eac6:	b9d8      	cbnz	r0, 800eb00 <_vfiprintf_r+0x110>
 800eac8:	06d1      	lsls	r1, r2, #27
 800eaca:	bf44      	itt	mi
 800eacc:	2320      	movmi	r3, #32
 800eace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ead2:	0713      	lsls	r3, r2, #28
 800ead4:	bf44      	itt	mi
 800ead6:	232b      	movmi	r3, #43	@ 0x2b
 800ead8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eadc:	f89a 3000 	ldrb.w	r3, [sl]
 800eae0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eae2:	d015      	beq.n	800eb10 <_vfiprintf_r+0x120>
 800eae4:	9a07      	ldr	r2, [sp, #28]
 800eae6:	4654      	mov	r4, sl
 800eae8:	2000      	movs	r0, #0
 800eaea:	f04f 0c0a 	mov.w	ip, #10
 800eaee:	4621      	mov	r1, r4
 800eaf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaf4:	3b30      	subs	r3, #48	@ 0x30
 800eaf6:	2b09      	cmp	r3, #9
 800eaf8:	d94b      	bls.n	800eb92 <_vfiprintf_r+0x1a2>
 800eafa:	b1b0      	cbz	r0, 800eb2a <_vfiprintf_r+0x13a>
 800eafc:	9207      	str	r2, [sp, #28]
 800eafe:	e014      	b.n	800eb2a <_vfiprintf_r+0x13a>
 800eb00:	eba0 0308 	sub.w	r3, r0, r8
 800eb04:	fa09 f303 	lsl.w	r3, r9, r3
 800eb08:	4313      	orrs	r3, r2
 800eb0a:	9304      	str	r3, [sp, #16]
 800eb0c:	46a2      	mov	sl, r4
 800eb0e:	e7d2      	b.n	800eab6 <_vfiprintf_r+0xc6>
 800eb10:	9b03      	ldr	r3, [sp, #12]
 800eb12:	1d19      	adds	r1, r3, #4
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	9103      	str	r1, [sp, #12]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	bfbb      	ittet	lt
 800eb1c:	425b      	neglt	r3, r3
 800eb1e:	f042 0202 	orrlt.w	r2, r2, #2
 800eb22:	9307      	strge	r3, [sp, #28]
 800eb24:	9307      	strlt	r3, [sp, #28]
 800eb26:	bfb8      	it	lt
 800eb28:	9204      	strlt	r2, [sp, #16]
 800eb2a:	7823      	ldrb	r3, [r4, #0]
 800eb2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb2e:	d10a      	bne.n	800eb46 <_vfiprintf_r+0x156>
 800eb30:	7863      	ldrb	r3, [r4, #1]
 800eb32:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb34:	d132      	bne.n	800eb9c <_vfiprintf_r+0x1ac>
 800eb36:	9b03      	ldr	r3, [sp, #12]
 800eb38:	1d1a      	adds	r2, r3, #4
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	9203      	str	r2, [sp, #12]
 800eb3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb42:	3402      	adds	r4, #2
 800eb44:	9305      	str	r3, [sp, #20]
 800eb46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ec1c <_vfiprintf_r+0x22c>
 800eb4a:	7821      	ldrb	r1, [r4, #0]
 800eb4c:	2203      	movs	r2, #3
 800eb4e:	4650      	mov	r0, sl
 800eb50:	f7f1 fbc6 	bl	80002e0 <memchr>
 800eb54:	b138      	cbz	r0, 800eb66 <_vfiprintf_r+0x176>
 800eb56:	9b04      	ldr	r3, [sp, #16]
 800eb58:	eba0 000a 	sub.w	r0, r0, sl
 800eb5c:	2240      	movs	r2, #64	@ 0x40
 800eb5e:	4082      	lsls	r2, r0
 800eb60:	4313      	orrs	r3, r2
 800eb62:	3401      	adds	r4, #1
 800eb64:	9304      	str	r3, [sp, #16]
 800eb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb6a:	4829      	ldr	r0, [pc, #164]	@ (800ec10 <_vfiprintf_r+0x220>)
 800eb6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb70:	2206      	movs	r2, #6
 800eb72:	f7f1 fbb5 	bl	80002e0 <memchr>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	d03f      	beq.n	800ebfa <_vfiprintf_r+0x20a>
 800eb7a:	4b26      	ldr	r3, [pc, #152]	@ (800ec14 <_vfiprintf_r+0x224>)
 800eb7c:	bb1b      	cbnz	r3, 800ebc6 <_vfiprintf_r+0x1d6>
 800eb7e:	9b03      	ldr	r3, [sp, #12]
 800eb80:	3307      	adds	r3, #7
 800eb82:	f023 0307 	bic.w	r3, r3, #7
 800eb86:	3308      	adds	r3, #8
 800eb88:	9303      	str	r3, [sp, #12]
 800eb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb8c:	443b      	add	r3, r7
 800eb8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb90:	e76a      	b.n	800ea68 <_vfiprintf_r+0x78>
 800eb92:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb96:	460c      	mov	r4, r1
 800eb98:	2001      	movs	r0, #1
 800eb9a:	e7a8      	b.n	800eaee <_vfiprintf_r+0xfe>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	3401      	adds	r4, #1
 800eba0:	9305      	str	r3, [sp, #20]
 800eba2:	4619      	mov	r1, r3
 800eba4:	f04f 0c0a 	mov.w	ip, #10
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebae:	3a30      	subs	r2, #48	@ 0x30
 800ebb0:	2a09      	cmp	r2, #9
 800ebb2:	d903      	bls.n	800ebbc <_vfiprintf_r+0x1cc>
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d0c6      	beq.n	800eb46 <_vfiprintf_r+0x156>
 800ebb8:	9105      	str	r1, [sp, #20]
 800ebba:	e7c4      	b.n	800eb46 <_vfiprintf_r+0x156>
 800ebbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e7f0      	b.n	800eba8 <_vfiprintf_r+0x1b8>
 800ebc6:	ab03      	add	r3, sp, #12
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	462a      	mov	r2, r5
 800ebcc:	4b12      	ldr	r3, [pc, #72]	@ (800ec18 <_vfiprintf_r+0x228>)
 800ebce:	a904      	add	r1, sp, #16
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	f3af 8000 	nop.w
 800ebd6:	4607      	mov	r7, r0
 800ebd8:	1c78      	adds	r0, r7, #1
 800ebda:	d1d6      	bne.n	800eb8a <_vfiprintf_r+0x19a>
 800ebdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebde:	07d9      	lsls	r1, r3, #31
 800ebe0:	d405      	bmi.n	800ebee <_vfiprintf_r+0x1fe>
 800ebe2:	89ab      	ldrh	r3, [r5, #12]
 800ebe4:	059a      	lsls	r2, r3, #22
 800ebe6:	d402      	bmi.n	800ebee <_vfiprintf_r+0x1fe>
 800ebe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebea:	f7ff fda9 	bl	800e740 <__retarget_lock_release_recursive>
 800ebee:	89ab      	ldrh	r3, [r5, #12]
 800ebf0:	065b      	lsls	r3, r3, #25
 800ebf2:	f53f af1f 	bmi.w	800ea34 <_vfiprintf_r+0x44>
 800ebf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebf8:	e71e      	b.n	800ea38 <_vfiprintf_r+0x48>
 800ebfa:	ab03      	add	r3, sp, #12
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	462a      	mov	r2, r5
 800ec00:	4b05      	ldr	r3, [pc, #20]	@ (800ec18 <_vfiprintf_r+0x228>)
 800ec02:	a904      	add	r1, sp, #16
 800ec04:	4630      	mov	r0, r6
 800ec06:	f000 f879 	bl	800ecfc <_printf_i>
 800ec0a:	e7e4      	b.n	800ebd6 <_vfiprintf_r+0x1e6>
 800ec0c:	0801258b 	.word	0x0801258b
 800ec10:	08012595 	.word	0x08012595
 800ec14:	00000000 	.word	0x00000000
 800ec18:	0800e9cb 	.word	0x0800e9cb
 800ec1c:	08012591 	.word	0x08012591

0800ec20 <_printf_common>:
 800ec20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec24:	4616      	mov	r6, r2
 800ec26:	4698      	mov	r8, r3
 800ec28:	688a      	ldr	r2, [r1, #8]
 800ec2a:	690b      	ldr	r3, [r1, #16]
 800ec2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec30:	4293      	cmp	r3, r2
 800ec32:	bfb8      	it	lt
 800ec34:	4613      	movlt	r3, r2
 800ec36:	6033      	str	r3, [r6, #0]
 800ec38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec3c:	4607      	mov	r7, r0
 800ec3e:	460c      	mov	r4, r1
 800ec40:	b10a      	cbz	r2, 800ec46 <_printf_common+0x26>
 800ec42:	3301      	adds	r3, #1
 800ec44:	6033      	str	r3, [r6, #0]
 800ec46:	6823      	ldr	r3, [r4, #0]
 800ec48:	0699      	lsls	r1, r3, #26
 800ec4a:	bf42      	ittt	mi
 800ec4c:	6833      	ldrmi	r3, [r6, #0]
 800ec4e:	3302      	addmi	r3, #2
 800ec50:	6033      	strmi	r3, [r6, #0]
 800ec52:	6825      	ldr	r5, [r4, #0]
 800ec54:	f015 0506 	ands.w	r5, r5, #6
 800ec58:	d106      	bne.n	800ec68 <_printf_common+0x48>
 800ec5a:	f104 0a19 	add.w	sl, r4, #25
 800ec5e:	68e3      	ldr	r3, [r4, #12]
 800ec60:	6832      	ldr	r2, [r6, #0]
 800ec62:	1a9b      	subs	r3, r3, r2
 800ec64:	42ab      	cmp	r3, r5
 800ec66:	dc26      	bgt.n	800ecb6 <_printf_common+0x96>
 800ec68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec6c:	6822      	ldr	r2, [r4, #0]
 800ec6e:	3b00      	subs	r3, #0
 800ec70:	bf18      	it	ne
 800ec72:	2301      	movne	r3, #1
 800ec74:	0692      	lsls	r2, r2, #26
 800ec76:	d42b      	bmi.n	800ecd0 <_printf_common+0xb0>
 800ec78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec7c:	4641      	mov	r1, r8
 800ec7e:	4638      	mov	r0, r7
 800ec80:	47c8      	blx	r9
 800ec82:	3001      	adds	r0, #1
 800ec84:	d01e      	beq.n	800ecc4 <_printf_common+0xa4>
 800ec86:	6823      	ldr	r3, [r4, #0]
 800ec88:	6922      	ldr	r2, [r4, #16]
 800ec8a:	f003 0306 	and.w	r3, r3, #6
 800ec8e:	2b04      	cmp	r3, #4
 800ec90:	bf02      	ittt	eq
 800ec92:	68e5      	ldreq	r5, [r4, #12]
 800ec94:	6833      	ldreq	r3, [r6, #0]
 800ec96:	1aed      	subeq	r5, r5, r3
 800ec98:	68a3      	ldr	r3, [r4, #8]
 800ec9a:	bf0c      	ite	eq
 800ec9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eca0:	2500      	movne	r5, #0
 800eca2:	4293      	cmp	r3, r2
 800eca4:	bfc4      	itt	gt
 800eca6:	1a9b      	subgt	r3, r3, r2
 800eca8:	18ed      	addgt	r5, r5, r3
 800ecaa:	2600      	movs	r6, #0
 800ecac:	341a      	adds	r4, #26
 800ecae:	42b5      	cmp	r5, r6
 800ecb0:	d11a      	bne.n	800ece8 <_printf_common+0xc8>
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	e008      	b.n	800ecc8 <_printf_common+0xa8>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	4652      	mov	r2, sl
 800ecba:	4641      	mov	r1, r8
 800ecbc:	4638      	mov	r0, r7
 800ecbe:	47c8      	blx	r9
 800ecc0:	3001      	adds	r0, #1
 800ecc2:	d103      	bne.n	800eccc <_printf_common+0xac>
 800ecc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eccc:	3501      	adds	r5, #1
 800ecce:	e7c6      	b.n	800ec5e <_printf_common+0x3e>
 800ecd0:	18e1      	adds	r1, r4, r3
 800ecd2:	1c5a      	adds	r2, r3, #1
 800ecd4:	2030      	movs	r0, #48	@ 0x30
 800ecd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ecda:	4422      	add	r2, r4
 800ecdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ece0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ece4:	3302      	adds	r3, #2
 800ece6:	e7c7      	b.n	800ec78 <_printf_common+0x58>
 800ece8:	2301      	movs	r3, #1
 800ecea:	4622      	mov	r2, r4
 800ecec:	4641      	mov	r1, r8
 800ecee:	4638      	mov	r0, r7
 800ecf0:	47c8      	blx	r9
 800ecf2:	3001      	adds	r0, #1
 800ecf4:	d0e6      	beq.n	800ecc4 <_printf_common+0xa4>
 800ecf6:	3601      	adds	r6, #1
 800ecf8:	e7d9      	b.n	800ecae <_printf_common+0x8e>
	...

0800ecfc <_printf_i>:
 800ecfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed00:	7e0f      	ldrb	r7, [r1, #24]
 800ed02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed04:	2f78      	cmp	r7, #120	@ 0x78
 800ed06:	4691      	mov	r9, r2
 800ed08:	4680      	mov	r8, r0
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	469a      	mov	sl, r3
 800ed0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed12:	d807      	bhi.n	800ed24 <_printf_i+0x28>
 800ed14:	2f62      	cmp	r7, #98	@ 0x62
 800ed16:	d80a      	bhi.n	800ed2e <_printf_i+0x32>
 800ed18:	2f00      	cmp	r7, #0
 800ed1a:	f000 80d2 	beq.w	800eec2 <_printf_i+0x1c6>
 800ed1e:	2f58      	cmp	r7, #88	@ 0x58
 800ed20:	f000 80b9 	beq.w	800ee96 <_printf_i+0x19a>
 800ed24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed2c:	e03a      	b.n	800eda4 <_printf_i+0xa8>
 800ed2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed32:	2b15      	cmp	r3, #21
 800ed34:	d8f6      	bhi.n	800ed24 <_printf_i+0x28>
 800ed36:	a101      	add	r1, pc, #4	@ (adr r1, 800ed3c <_printf_i+0x40>)
 800ed38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed3c:	0800ed95 	.word	0x0800ed95
 800ed40:	0800eda9 	.word	0x0800eda9
 800ed44:	0800ed25 	.word	0x0800ed25
 800ed48:	0800ed25 	.word	0x0800ed25
 800ed4c:	0800ed25 	.word	0x0800ed25
 800ed50:	0800ed25 	.word	0x0800ed25
 800ed54:	0800eda9 	.word	0x0800eda9
 800ed58:	0800ed25 	.word	0x0800ed25
 800ed5c:	0800ed25 	.word	0x0800ed25
 800ed60:	0800ed25 	.word	0x0800ed25
 800ed64:	0800ed25 	.word	0x0800ed25
 800ed68:	0800eea9 	.word	0x0800eea9
 800ed6c:	0800edd3 	.word	0x0800edd3
 800ed70:	0800ee63 	.word	0x0800ee63
 800ed74:	0800ed25 	.word	0x0800ed25
 800ed78:	0800ed25 	.word	0x0800ed25
 800ed7c:	0800eecb 	.word	0x0800eecb
 800ed80:	0800ed25 	.word	0x0800ed25
 800ed84:	0800edd3 	.word	0x0800edd3
 800ed88:	0800ed25 	.word	0x0800ed25
 800ed8c:	0800ed25 	.word	0x0800ed25
 800ed90:	0800ee6b 	.word	0x0800ee6b
 800ed94:	6833      	ldr	r3, [r6, #0]
 800ed96:	1d1a      	adds	r2, r3, #4
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	6032      	str	r2, [r6, #0]
 800ed9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eda0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eda4:	2301      	movs	r3, #1
 800eda6:	e09d      	b.n	800eee4 <_printf_i+0x1e8>
 800eda8:	6833      	ldr	r3, [r6, #0]
 800edaa:	6820      	ldr	r0, [r4, #0]
 800edac:	1d19      	adds	r1, r3, #4
 800edae:	6031      	str	r1, [r6, #0]
 800edb0:	0606      	lsls	r6, r0, #24
 800edb2:	d501      	bpl.n	800edb8 <_printf_i+0xbc>
 800edb4:	681d      	ldr	r5, [r3, #0]
 800edb6:	e003      	b.n	800edc0 <_printf_i+0xc4>
 800edb8:	0645      	lsls	r5, r0, #25
 800edba:	d5fb      	bpl.n	800edb4 <_printf_i+0xb8>
 800edbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800edc0:	2d00      	cmp	r5, #0
 800edc2:	da03      	bge.n	800edcc <_printf_i+0xd0>
 800edc4:	232d      	movs	r3, #45	@ 0x2d
 800edc6:	426d      	negs	r5, r5
 800edc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edcc:	4859      	ldr	r0, [pc, #356]	@ (800ef34 <_printf_i+0x238>)
 800edce:	230a      	movs	r3, #10
 800edd0:	e011      	b.n	800edf6 <_printf_i+0xfa>
 800edd2:	6821      	ldr	r1, [r4, #0]
 800edd4:	6833      	ldr	r3, [r6, #0]
 800edd6:	0608      	lsls	r0, r1, #24
 800edd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800eddc:	d402      	bmi.n	800ede4 <_printf_i+0xe8>
 800edde:	0649      	lsls	r1, r1, #25
 800ede0:	bf48      	it	mi
 800ede2:	b2ad      	uxthmi	r5, r5
 800ede4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ede6:	4853      	ldr	r0, [pc, #332]	@ (800ef34 <_printf_i+0x238>)
 800ede8:	6033      	str	r3, [r6, #0]
 800edea:	bf14      	ite	ne
 800edec:	230a      	movne	r3, #10
 800edee:	2308      	moveq	r3, #8
 800edf0:	2100      	movs	r1, #0
 800edf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800edf6:	6866      	ldr	r6, [r4, #4]
 800edf8:	60a6      	str	r6, [r4, #8]
 800edfa:	2e00      	cmp	r6, #0
 800edfc:	bfa2      	ittt	ge
 800edfe:	6821      	ldrge	r1, [r4, #0]
 800ee00:	f021 0104 	bicge.w	r1, r1, #4
 800ee04:	6021      	strge	r1, [r4, #0]
 800ee06:	b90d      	cbnz	r5, 800ee0c <_printf_i+0x110>
 800ee08:	2e00      	cmp	r6, #0
 800ee0a:	d04b      	beq.n	800eea4 <_printf_i+0x1a8>
 800ee0c:	4616      	mov	r6, r2
 800ee0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee12:	fb03 5711 	mls	r7, r3, r1, r5
 800ee16:	5dc7      	ldrb	r7, [r0, r7]
 800ee18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee1c:	462f      	mov	r7, r5
 800ee1e:	42bb      	cmp	r3, r7
 800ee20:	460d      	mov	r5, r1
 800ee22:	d9f4      	bls.n	800ee0e <_printf_i+0x112>
 800ee24:	2b08      	cmp	r3, #8
 800ee26:	d10b      	bne.n	800ee40 <_printf_i+0x144>
 800ee28:	6823      	ldr	r3, [r4, #0]
 800ee2a:	07df      	lsls	r7, r3, #31
 800ee2c:	d508      	bpl.n	800ee40 <_printf_i+0x144>
 800ee2e:	6923      	ldr	r3, [r4, #16]
 800ee30:	6861      	ldr	r1, [r4, #4]
 800ee32:	4299      	cmp	r1, r3
 800ee34:	bfde      	ittt	le
 800ee36:	2330      	movle	r3, #48	@ 0x30
 800ee38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee40:	1b92      	subs	r2, r2, r6
 800ee42:	6122      	str	r2, [r4, #16]
 800ee44:	f8cd a000 	str.w	sl, [sp]
 800ee48:	464b      	mov	r3, r9
 800ee4a:	aa03      	add	r2, sp, #12
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	4640      	mov	r0, r8
 800ee50:	f7ff fee6 	bl	800ec20 <_printf_common>
 800ee54:	3001      	adds	r0, #1
 800ee56:	d14a      	bne.n	800eeee <_printf_i+0x1f2>
 800ee58:	f04f 30ff 	mov.w	r0, #4294967295
 800ee5c:	b004      	add	sp, #16
 800ee5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	f043 0320 	orr.w	r3, r3, #32
 800ee68:	6023      	str	r3, [r4, #0]
 800ee6a:	4833      	ldr	r0, [pc, #204]	@ (800ef38 <_printf_i+0x23c>)
 800ee6c:	2778      	movs	r7, #120	@ 0x78
 800ee6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	6831      	ldr	r1, [r6, #0]
 800ee76:	061f      	lsls	r7, r3, #24
 800ee78:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee7c:	d402      	bmi.n	800ee84 <_printf_i+0x188>
 800ee7e:	065f      	lsls	r7, r3, #25
 800ee80:	bf48      	it	mi
 800ee82:	b2ad      	uxthmi	r5, r5
 800ee84:	6031      	str	r1, [r6, #0]
 800ee86:	07d9      	lsls	r1, r3, #31
 800ee88:	bf44      	itt	mi
 800ee8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ee8e:	6023      	strmi	r3, [r4, #0]
 800ee90:	b11d      	cbz	r5, 800ee9a <_printf_i+0x19e>
 800ee92:	2310      	movs	r3, #16
 800ee94:	e7ac      	b.n	800edf0 <_printf_i+0xf4>
 800ee96:	4827      	ldr	r0, [pc, #156]	@ (800ef34 <_printf_i+0x238>)
 800ee98:	e7e9      	b.n	800ee6e <_printf_i+0x172>
 800ee9a:	6823      	ldr	r3, [r4, #0]
 800ee9c:	f023 0320 	bic.w	r3, r3, #32
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	e7f6      	b.n	800ee92 <_printf_i+0x196>
 800eea4:	4616      	mov	r6, r2
 800eea6:	e7bd      	b.n	800ee24 <_printf_i+0x128>
 800eea8:	6833      	ldr	r3, [r6, #0]
 800eeaa:	6825      	ldr	r5, [r4, #0]
 800eeac:	6961      	ldr	r1, [r4, #20]
 800eeae:	1d18      	adds	r0, r3, #4
 800eeb0:	6030      	str	r0, [r6, #0]
 800eeb2:	062e      	lsls	r6, r5, #24
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	d501      	bpl.n	800eebc <_printf_i+0x1c0>
 800eeb8:	6019      	str	r1, [r3, #0]
 800eeba:	e002      	b.n	800eec2 <_printf_i+0x1c6>
 800eebc:	0668      	lsls	r0, r5, #25
 800eebe:	d5fb      	bpl.n	800eeb8 <_printf_i+0x1bc>
 800eec0:	8019      	strh	r1, [r3, #0]
 800eec2:	2300      	movs	r3, #0
 800eec4:	6123      	str	r3, [r4, #16]
 800eec6:	4616      	mov	r6, r2
 800eec8:	e7bc      	b.n	800ee44 <_printf_i+0x148>
 800eeca:	6833      	ldr	r3, [r6, #0]
 800eecc:	1d1a      	adds	r2, r3, #4
 800eece:	6032      	str	r2, [r6, #0]
 800eed0:	681e      	ldr	r6, [r3, #0]
 800eed2:	6862      	ldr	r2, [r4, #4]
 800eed4:	2100      	movs	r1, #0
 800eed6:	4630      	mov	r0, r6
 800eed8:	f7f1 fa02 	bl	80002e0 <memchr>
 800eedc:	b108      	cbz	r0, 800eee2 <_printf_i+0x1e6>
 800eede:	1b80      	subs	r0, r0, r6
 800eee0:	6060      	str	r0, [r4, #4]
 800eee2:	6863      	ldr	r3, [r4, #4]
 800eee4:	6123      	str	r3, [r4, #16]
 800eee6:	2300      	movs	r3, #0
 800eee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eeec:	e7aa      	b.n	800ee44 <_printf_i+0x148>
 800eeee:	6923      	ldr	r3, [r4, #16]
 800eef0:	4632      	mov	r2, r6
 800eef2:	4649      	mov	r1, r9
 800eef4:	4640      	mov	r0, r8
 800eef6:	47d0      	blx	sl
 800eef8:	3001      	adds	r0, #1
 800eefa:	d0ad      	beq.n	800ee58 <_printf_i+0x15c>
 800eefc:	6823      	ldr	r3, [r4, #0]
 800eefe:	079b      	lsls	r3, r3, #30
 800ef00:	d413      	bmi.n	800ef2a <_printf_i+0x22e>
 800ef02:	68e0      	ldr	r0, [r4, #12]
 800ef04:	9b03      	ldr	r3, [sp, #12]
 800ef06:	4298      	cmp	r0, r3
 800ef08:	bfb8      	it	lt
 800ef0a:	4618      	movlt	r0, r3
 800ef0c:	e7a6      	b.n	800ee5c <_printf_i+0x160>
 800ef0e:	2301      	movs	r3, #1
 800ef10:	4632      	mov	r2, r6
 800ef12:	4649      	mov	r1, r9
 800ef14:	4640      	mov	r0, r8
 800ef16:	47d0      	blx	sl
 800ef18:	3001      	adds	r0, #1
 800ef1a:	d09d      	beq.n	800ee58 <_printf_i+0x15c>
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	68e3      	ldr	r3, [r4, #12]
 800ef20:	9903      	ldr	r1, [sp, #12]
 800ef22:	1a5b      	subs	r3, r3, r1
 800ef24:	42ab      	cmp	r3, r5
 800ef26:	dcf2      	bgt.n	800ef0e <_printf_i+0x212>
 800ef28:	e7eb      	b.n	800ef02 <_printf_i+0x206>
 800ef2a:	2500      	movs	r5, #0
 800ef2c:	f104 0619 	add.w	r6, r4, #25
 800ef30:	e7f5      	b.n	800ef1e <_printf_i+0x222>
 800ef32:	bf00      	nop
 800ef34:	0801259c 	.word	0x0801259c
 800ef38:	080125ad 	.word	0x080125ad

0800ef3c <__sflush_r>:
 800ef3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef44:	0716      	lsls	r6, r2, #28
 800ef46:	4605      	mov	r5, r0
 800ef48:	460c      	mov	r4, r1
 800ef4a:	d454      	bmi.n	800eff6 <__sflush_r+0xba>
 800ef4c:	684b      	ldr	r3, [r1, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	dc02      	bgt.n	800ef58 <__sflush_r+0x1c>
 800ef52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	dd48      	ble.n	800efea <__sflush_r+0xae>
 800ef58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef5a:	2e00      	cmp	r6, #0
 800ef5c:	d045      	beq.n	800efea <__sflush_r+0xae>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef64:	682f      	ldr	r7, [r5, #0]
 800ef66:	6a21      	ldr	r1, [r4, #32]
 800ef68:	602b      	str	r3, [r5, #0]
 800ef6a:	d030      	beq.n	800efce <__sflush_r+0x92>
 800ef6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef6e:	89a3      	ldrh	r3, [r4, #12]
 800ef70:	0759      	lsls	r1, r3, #29
 800ef72:	d505      	bpl.n	800ef80 <__sflush_r+0x44>
 800ef74:	6863      	ldr	r3, [r4, #4]
 800ef76:	1ad2      	subs	r2, r2, r3
 800ef78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef7a:	b10b      	cbz	r3, 800ef80 <__sflush_r+0x44>
 800ef7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef7e:	1ad2      	subs	r2, r2, r3
 800ef80:	2300      	movs	r3, #0
 800ef82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef84:	6a21      	ldr	r1, [r4, #32]
 800ef86:	4628      	mov	r0, r5
 800ef88:	47b0      	blx	r6
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	d106      	bne.n	800ef9e <__sflush_r+0x62>
 800ef90:	6829      	ldr	r1, [r5, #0]
 800ef92:	291d      	cmp	r1, #29
 800ef94:	d82b      	bhi.n	800efee <__sflush_r+0xb2>
 800ef96:	4a2a      	ldr	r2, [pc, #168]	@ (800f040 <__sflush_r+0x104>)
 800ef98:	410a      	asrs	r2, r1
 800ef9a:	07d6      	lsls	r6, r2, #31
 800ef9c:	d427      	bmi.n	800efee <__sflush_r+0xb2>
 800ef9e:	2200      	movs	r2, #0
 800efa0:	6062      	str	r2, [r4, #4]
 800efa2:	04d9      	lsls	r1, r3, #19
 800efa4:	6922      	ldr	r2, [r4, #16]
 800efa6:	6022      	str	r2, [r4, #0]
 800efa8:	d504      	bpl.n	800efb4 <__sflush_r+0x78>
 800efaa:	1c42      	adds	r2, r0, #1
 800efac:	d101      	bne.n	800efb2 <__sflush_r+0x76>
 800efae:	682b      	ldr	r3, [r5, #0]
 800efb0:	b903      	cbnz	r3, 800efb4 <__sflush_r+0x78>
 800efb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800efb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efb6:	602f      	str	r7, [r5, #0]
 800efb8:	b1b9      	cbz	r1, 800efea <__sflush_r+0xae>
 800efba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efbe:	4299      	cmp	r1, r3
 800efc0:	d002      	beq.n	800efc8 <__sflush_r+0x8c>
 800efc2:	4628      	mov	r0, r5
 800efc4:	f7ff fbea 	bl	800e79c <_free_r>
 800efc8:	2300      	movs	r3, #0
 800efca:	6363      	str	r3, [r4, #52]	@ 0x34
 800efcc:	e00d      	b.n	800efea <__sflush_r+0xae>
 800efce:	2301      	movs	r3, #1
 800efd0:	4628      	mov	r0, r5
 800efd2:	47b0      	blx	r6
 800efd4:	4602      	mov	r2, r0
 800efd6:	1c50      	adds	r0, r2, #1
 800efd8:	d1c9      	bne.n	800ef6e <__sflush_r+0x32>
 800efda:	682b      	ldr	r3, [r5, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d0c6      	beq.n	800ef6e <__sflush_r+0x32>
 800efe0:	2b1d      	cmp	r3, #29
 800efe2:	d001      	beq.n	800efe8 <__sflush_r+0xac>
 800efe4:	2b16      	cmp	r3, #22
 800efe6:	d11e      	bne.n	800f026 <__sflush_r+0xea>
 800efe8:	602f      	str	r7, [r5, #0]
 800efea:	2000      	movs	r0, #0
 800efec:	e022      	b.n	800f034 <__sflush_r+0xf8>
 800efee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eff2:	b21b      	sxth	r3, r3
 800eff4:	e01b      	b.n	800f02e <__sflush_r+0xf2>
 800eff6:	690f      	ldr	r7, [r1, #16]
 800eff8:	2f00      	cmp	r7, #0
 800effa:	d0f6      	beq.n	800efea <__sflush_r+0xae>
 800effc:	0793      	lsls	r3, r2, #30
 800effe:	680e      	ldr	r6, [r1, #0]
 800f000:	bf08      	it	eq
 800f002:	694b      	ldreq	r3, [r1, #20]
 800f004:	600f      	str	r7, [r1, #0]
 800f006:	bf18      	it	ne
 800f008:	2300      	movne	r3, #0
 800f00a:	eba6 0807 	sub.w	r8, r6, r7
 800f00e:	608b      	str	r3, [r1, #8]
 800f010:	f1b8 0f00 	cmp.w	r8, #0
 800f014:	dde9      	ble.n	800efea <__sflush_r+0xae>
 800f016:	6a21      	ldr	r1, [r4, #32]
 800f018:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f01a:	4643      	mov	r3, r8
 800f01c:	463a      	mov	r2, r7
 800f01e:	4628      	mov	r0, r5
 800f020:	47b0      	blx	r6
 800f022:	2800      	cmp	r0, #0
 800f024:	dc08      	bgt.n	800f038 <__sflush_r+0xfc>
 800f026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f02a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f02e:	81a3      	strh	r3, [r4, #12]
 800f030:	f04f 30ff 	mov.w	r0, #4294967295
 800f034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f038:	4407      	add	r7, r0
 800f03a:	eba8 0800 	sub.w	r8, r8, r0
 800f03e:	e7e7      	b.n	800f010 <__sflush_r+0xd4>
 800f040:	dfbffffe 	.word	0xdfbffffe

0800f044 <_fflush_r>:
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	690b      	ldr	r3, [r1, #16]
 800f048:	4605      	mov	r5, r0
 800f04a:	460c      	mov	r4, r1
 800f04c:	b913      	cbnz	r3, 800f054 <_fflush_r+0x10>
 800f04e:	2500      	movs	r5, #0
 800f050:	4628      	mov	r0, r5
 800f052:	bd38      	pop	{r3, r4, r5, pc}
 800f054:	b118      	cbz	r0, 800f05e <_fflush_r+0x1a>
 800f056:	6a03      	ldr	r3, [r0, #32]
 800f058:	b90b      	cbnz	r3, 800f05e <_fflush_r+0x1a>
 800f05a:	f7ff fa61 	bl	800e520 <__sinit>
 800f05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d0f3      	beq.n	800f04e <_fflush_r+0xa>
 800f066:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f068:	07d0      	lsls	r0, r2, #31
 800f06a:	d404      	bmi.n	800f076 <_fflush_r+0x32>
 800f06c:	0599      	lsls	r1, r3, #22
 800f06e:	d402      	bmi.n	800f076 <_fflush_r+0x32>
 800f070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f072:	f7ff fb64 	bl	800e73e <__retarget_lock_acquire_recursive>
 800f076:	4628      	mov	r0, r5
 800f078:	4621      	mov	r1, r4
 800f07a:	f7ff ff5f 	bl	800ef3c <__sflush_r>
 800f07e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f080:	07da      	lsls	r2, r3, #31
 800f082:	4605      	mov	r5, r0
 800f084:	d4e4      	bmi.n	800f050 <_fflush_r+0xc>
 800f086:	89a3      	ldrh	r3, [r4, #12]
 800f088:	059b      	lsls	r3, r3, #22
 800f08a:	d4e1      	bmi.n	800f050 <_fflush_r+0xc>
 800f08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f08e:	f7ff fb57 	bl	800e740 <__retarget_lock_release_recursive>
 800f092:	e7dd      	b.n	800f050 <_fflush_r+0xc>

0800f094 <fiprintf>:
 800f094:	b40e      	push	{r1, r2, r3}
 800f096:	b503      	push	{r0, r1, lr}
 800f098:	4601      	mov	r1, r0
 800f09a:	ab03      	add	r3, sp, #12
 800f09c:	4805      	ldr	r0, [pc, #20]	@ (800f0b4 <fiprintf+0x20>)
 800f09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0a2:	6800      	ldr	r0, [r0, #0]
 800f0a4:	9301      	str	r3, [sp, #4]
 800f0a6:	f7ff fca3 	bl	800e9f0 <_vfiprintf_r>
 800f0aa:	b002      	add	sp, #8
 800f0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0b0:	b003      	add	sp, #12
 800f0b2:	4770      	bx	lr
 800f0b4:	2400003c 	.word	0x2400003c

0800f0b8 <__swbuf_r>:
 800f0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ba:	460e      	mov	r6, r1
 800f0bc:	4614      	mov	r4, r2
 800f0be:	4605      	mov	r5, r0
 800f0c0:	b118      	cbz	r0, 800f0ca <__swbuf_r+0x12>
 800f0c2:	6a03      	ldr	r3, [r0, #32]
 800f0c4:	b90b      	cbnz	r3, 800f0ca <__swbuf_r+0x12>
 800f0c6:	f7ff fa2b 	bl	800e520 <__sinit>
 800f0ca:	69a3      	ldr	r3, [r4, #24]
 800f0cc:	60a3      	str	r3, [r4, #8]
 800f0ce:	89a3      	ldrh	r3, [r4, #12]
 800f0d0:	071a      	lsls	r2, r3, #28
 800f0d2:	d501      	bpl.n	800f0d8 <__swbuf_r+0x20>
 800f0d4:	6923      	ldr	r3, [r4, #16]
 800f0d6:	b943      	cbnz	r3, 800f0ea <__swbuf_r+0x32>
 800f0d8:	4621      	mov	r1, r4
 800f0da:	4628      	mov	r0, r5
 800f0dc:	f000 f82a 	bl	800f134 <__swsetup_r>
 800f0e0:	b118      	cbz	r0, 800f0ea <__swbuf_r+0x32>
 800f0e2:	f04f 37ff 	mov.w	r7, #4294967295
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ea:	6823      	ldr	r3, [r4, #0]
 800f0ec:	6922      	ldr	r2, [r4, #16]
 800f0ee:	1a98      	subs	r0, r3, r2
 800f0f0:	6963      	ldr	r3, [r4, #20]
 800f0f2:	b2f6      	uxtb	r6, r6
 800f0f4:	4283      	cmp	r3, r0
 800f0f6:	4637      	mov	r7, r6
 800f0f8:	dc05      	bgt.n	800f106 <__swbuf_r+0x4e>
 800f0fa:	4621      	mov	r1, r4
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	f7ff ffa1 	bl	800f044 <_fflush_r>
 800f102:	2800      	cmp	r0, #0
 800f104:	d1ed      	bne.n	800f0e2 <__swbuf_r+0x2a>
 800f106:	68a3      	ldr	r3, [r4, #8]
 800f108:	3b01      	subs	r3, #1
 800f10a:	60a3      	str	r3, [r4, #8]
 800f10c:	6823      	ldr	r3, [r4, #0]
 800f10e:	1c5a      	adds	r2, r3, #1
 800f110:	6022      	str	r2, [r4, #0]
 800f112:	701e      	strb	r6, [r3, #0]
 800f114:	6962      	ldr	r2, [r4, #20]
 800f116:	1c43      	adds	r3, r0, #1
 800f118:	429a      	cmp	r2, r3
 800f11a:	d004      	beq.n	800f126 <__swbuf_r+0x6e>
 800f11c:	89a3      	ldrh	r3, [r4, #12]
 800f11e:	07db      	lsls	r3, r3, #31
 800f120:	d5e1      	bpl.n	800f0e6 <__swbuf_r+0x2e>
 800f122:	2e0a      	cmp	r6, #10
 800f124:	d1df      	bne.n	800f0e6 <__swbuf_r+0x2e>
 800f126:	4621      	mov	r1, r4
 800f128:	4628      	mov	r0, r5
 800f12a:	f7ff ff8b 	bl	800f044 <_fflush_r>
 800f12e:	2800      	cmp	r0, #0
 800f130:	d0d9      	beq.n	800f0e6 <__swbuf_r+0x2e>
 800f132:	e7d6      	b.n	800f0e2 <__swbuf_r+0x2a>

0800f134 <__swsetup_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4b29      	ldr	r3, [pc, #164]	@ (800f1dc <__swsetup_r+0xa8>)
 800f138:	4605      	mov	r5, r0
 800f13a:	6818      	ldr	r0, [r3, #0]
 800f13c:	460c      	mov	r4, r1
 800f13e:	b118      	cbz	r0, 800f148 <__swsetup_r+0x14>
 800f140:	6a03      	ldr	r3, [r0, #32]
 800f142:	b90b      	cbnz	r3, 800f148 <__swsetup_r+0x14>
 800f144:	f7ff f9ec 	bl	800e520 <__sinit>
 800f148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f14c:	0719      	lsls	r1, r3, #28
 800f14e:	d422      	bmi.n	800f196 <__swsetup_r+0x62>
 800f150:	06da      	lsls	r2, r3, #27
 800f152:	d407      	bmi.n	800f164 <__swsetup_r+0x30>
 800f154:	2209      	movs	r2, #9
 800f156:	602a      	str	r2, [r5, #0]
 800f158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f15c:	81a3      	strh	r3, [r4, #12]
 800f15e:	f04f 30ff 	mov.w	r0, #4294967295
 800f162:	e033      	b.n	800f1cc <__swsetup_r+0x98>
 800f164:	0758      	lsls	r0, r3, #29
 800f166:	d512      	bpl.n	800f18e <__swsetup_r+0x5a>
 800f168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f16a:	b141      	cbz	r1, 800f17e <__swsetup_r+0x4a>
 800f16c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f170:	4299      	cmp	r1, r3
 800f172:	d002      	beq.n	800f17a <__swsetup_r+0x46>
 800f174:	4628      	mov	r0, r5
 800f176:	f7ff fb11 	bl	800e79c <_free_r>
 800f17a:	2300      	movs	r3, #0
 800f17c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f17e:	89a3      	ldrh	r3, [r4, #12]
 800f180:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f184:	81a3      	strh	r3, [r4, #12]
 800f186:	2300      	movs	r3, #0
 800f188:	6063      	str	r3, [r4, #4]
 800f18a:	6923      	ldr	r3, [r4, #16]
 800f18c:	6023      	str	r3, [r4, #0]
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	f043 0308 	orr.w	r3, r3, #8
 800f194:	81a3      	strh	r3, [r4, #12]
 800f196:	6923      	ldr	r3, [r4, #16]
 800f198:	b94b      	cbnz	r3, 800f1ae <__swsetup_r+0x7a>
 800f19a:	89a3      	ldrh	r3, [r4, #12]
 800f19c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1a4:	d003      	beq.n	800f1ae <__swsetup_r+0x7a>
 800f1a6:	4621      	mov	r1, r4
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	f000 f856 	bl	800f25a <__smakebuf_r>
 800f1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1b2:	f013 0201 	ands.w	r2, r3, #1
 800f1b6:	d00a      	beq.n	800f1ce <__swsetup_r+0x9a>
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	60a2      	str	r2, [r4, #8]
 800f1bc:	6962      	ldr	r2, [r4, #20]
 800f1be:	4252      	negs	r2, r2
 800f1c0:	61a2      	str	r2, [r4, #24]
 800f1c2:	6922      	ldr	r2, [r4, #16]
 800f1c4:	b942      	cbnz	r2, 800f1d8 <__swsetup_r+0xa4>
 800f1c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1ca:	d1c5      	bne.n	800f158 <__swsetup_r+0x24>
 800f1cc:	bd38      	pop	{r3, r4, r5, pc}
 800f1ce:	0799      	lsls	r1, r3, #30
 800f1d0:	bf58      	it	pl
 800f1d2:	6962      	ldrpl	r2, [r4, #20]
 800f1d4:	60a2      	str	r2, [r4, #8]
 800f1d6:	e7f4      	b.n	800f1c2 <__swsetup_r+0x8e>
 800f1d8:	2000      	movs	r0, #0
 800f1da:	e7f7      	b.n	800f1cc <__swsetup_r+0x98>
 800f1dc:	2400003c 	.word	0x2400003c

0800f1e0 <_sbrk_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4d06      	ldr	r5, [pc, #24]	@ (800f1fc <_sbrk_r+0x1c>)
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	602b      	str	r3, [r5, #0]
 800f1ec:	f7f1 fc42 	bl	8000a74 <_sbrk>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_sbrk_r+0x1a>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_sbrk_r+0x1a>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	24007e08 	.word	0x24007e08

0800f200 <abort>:
 800f200:	b508      	push	{r3, lr}
 800f202:	2006      	movs	r0, #6
 800f204:	f000 f88e 	bl	800f324 <raise>
 800f208:	2001      	movs	r0, #1
 800f20a:	f7f1 fbbb 	bl	8000984 <_exit>

0800f20e <__swhatbuf_r>:
 800f20e:	b570      	push	{r4, r5, r6, lr}
 800f210:	460c      	mov	r4, r1
 800f212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f216:	2900      	cmp	r1, #0
 800f218:	b096      	sub	sp, #88	@ 0x58
 800f21a:	4615      	mov	r5, r2
 800f21c:	461e      	mov	r6, r3
 800f21e:	da0d      	bge.n	800f23c <__swhatbuf_r+0x2e>
 800f220:	89a3      	ldrh	r3, [r4, #12]
 800f222:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f226:	f04f 0100 	mov.w	r1, #0
 800f22a:	bf14      	ite	ne
 800f22c:	2340      	movne	r3, #64	@ 0x40
 800f22e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f232:	2000      	movs	r0, #0
 800f234:	6031      	str	r1, [r6, #0]
 800f236:	602b      	str	r3, [r5, #0]
 800f238:	b016      	add	sp, #88	@ 0x58
 800f23a:	bd70      	pop	{r4, r5, r6, pc}
 800f23c:	466a      	mov	r2, sp
 800f23e:	f000 f879 	bl	800f334 <_fstat_r>
 800f242:	2800      	cmp	r0, #0
 800f244:	dbec      	blt.n	800f220 <__swhatbuf_r+0x12>
 800f246:	9901      	ldr	r1, [sp, #4]
 800f248:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f24c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f250:	4259      	negs	r1, r3
 800f252:	4159      	adcs	r1, r3
 800f254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f258:	e7eb      	b.n	800f232 <__swhatbuf_r+0x24>

0800f25a <__smakebuf_r>:
 800f25a:	898b      	ldrh	r3, [r1, #12]
 800f25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f25e:	079d      	lsls	r5, r3, #30
 800f260:	4606      	mov	r6, r0
 800f262:	460c      	mov	r4, r1
 800f264:	d507      	bpl.n	800f276 <__smakebuf_r+0x1c>
 800f266:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f26a:	6023      	str	r3, [r4, #0]
 800f26c:	6123      	str	r3, [r4, #16]
 800f26e:	2301      	movs	r3, #1
 800f270:	6163      	str	r3, [r4, #20]
 800f272:	b003      	add	sp, #12
 800f274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f276:	ab01      	add	r3, sp, #4
 800f278:	466a      	mov	r2, sp
 800f27a:	f7ff ffc8 	bl	800f20e <__swhatbuf_r>
 800f27e:	9f00      	ldr	r7, [sp, #0]
 800f280:	4605      	mov	r5, r0
 800f282:	4639      	mov	r1, r7
 800f284:	4630      	mov	r0, r6
 800f286:	f7ff fafd 	bl	800e884 <_malloc_r>
 800f28a:	b948      	cbnz	r0, 800f2a0 <__smakebuf_r+0x46>
 800f28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f290:	059a      	lsls	r2, r3, #22
 800f292:	d4ee      	bmi.n	800f272 <__smakebuf_r+0x18>
 800f294:	f023 0303 	bic.w	r3, r3, #3
 800f298:	f043 0302 	orr.w	r3, r3, #2
 800f29c:	81a3      	strh	r3, [r4, #12]
 800f29e:	e7e2      	b.n	800f266 <__smakebuf_r+0xc>
 800f2a0:	89a3      	ldrh	r3, [r4, #12]
 800f2a2:	6020      	str	r0, [r4, #0]
 800f2a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2a8:	81a3      	strh	r3, [r4, #12]
 800f2aa:	9b01      	ldr	r3, [sp, #4]
 800f2ac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f2b0:	b15b      	cbz	r3, 800f2ca <__smakebuf_r+0x70>
 800f2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f000 f84e 	bl	800f358 <_isatty_r>
 800f2bc:	b128      	cbz	r0, 800f2ca <__smakebuf_r+0x70>
 800f2be:	89a3      	ldrh	r3, [r4, #12]
 800f2c0:	f023 0303 	bic.w	r3, r3, #3
 800f2c4:	f043 0301 	orr.w	r3, r3, #1
 800f2c8:	81a3      	strh	r3, [r4, #12]
 800f2ca:	89a3      	ldrh	r3, [r4, #12]
 800f2cc:	431d      	orrs	r5, r3
 800f2ce:	81a5      	strh	r5, [r4, #12]
 800f2d0:	e7cf      	b.n	800f272 <__smakebuf_r+0x18>

0800f2d2 <_raise_r>:
 800f2d2:	291f      	cmp	r1, #31
 800f2d4:	b538      	push	{r3, r4, r5, lr}
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	460c      	mov	r4, r1
 800f2da:	d904      	bls.n	800f2e6 <_raise_r+0x14>
 800f2dc:	2316      	movs	r3, #22
 800f2de:	6003      	str	r3, [r0, #0]
 800f2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e4:	bd38      	pop	{r3, r4, r5, pc}
 800f2e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f2e8:	b112      	cbz	r2, 800f2f0 <_raise_r+0x1e>
 800f2ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2ee:	b94b      	cbnz	r3, 800f304 <_raise_r+0x32>
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	f000 f853 	bl	800f39c <_getpid_r>
 800f2f6:	4622      	mov	r2, r4
 800f2f8:	4601      	mov	r1, r0
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f300:	f000 b83a 	b.w	800f378 <_kill_r>
 800f304:	2b01      	cmp	r3, #1
 800f306:	d00a      	beq.n	800f31e <_raise_r+0x4c>
 800f308:	1c59      	adds	r1, r3, #1
 800f30a:	d103      	bne.n	800f314 <_raise_r+0x42>
 800f30c:	2316      	movs	r3, #22
 800f30e:	6003      	str	r3, [r0, #0]
 800f310:	2001      	movs	r0, #1
 800f312:	e7e7      	b.n	800f2e4 <_raise_r+0x12>
 800f314:	2100      	movs	r1, #0
 800f316:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f31a:	4620      	mov	r0, r4
 800f31c:	4798      	blx	r3
 800f31e:	2000      	movs	r0, #0
 800f320:	e7e0      	b.n	800f2e4 <_raise_r+0x12>
	...

0800f324 <raise>:
 800f324:	4b02      	ldr	r3, [pc, #8]	@ (800f330 <raise+0xc>)
 800f326:	4601      	mov	r1, r0
 800f328:	6818      	ldr	r0, [r3, #0]
 800f32a:	f7ff bfd2 	b.w	800f2d2 <_raise_r>
 800f32e:	bf00      	nop
 800f330:	2400003c 	.word	0x2400003c

0800f334 <_fstat_r>:
 800f334:	b538      	push	{r3, r4, r5, lr}
 800f336:	4d07      	ldr	r5, [pc, #28]	@ (800f354 <_fstat_r+0x20>)
 800f338:	2300      	movs	r3, #0
 800f33a:	4604      	mov	r4, r0
 800f33c:	4608      	mov	r0, r1
 800f33e:	4611      	mov	r1, r2
 800f340:	602b      	str	r3, [r5, #0]
 800f342:	f7f1 fb6f 	bl	8000a24 <_fstat>
 800f346:	1c43      	adds	r3, r0, #1
 800f348:	d102      	bne.n	800f350 <_fstat_r+0x1c>
 800f34a:	682b      	ldr	r3, [r5, #0]
 800f34c:	b103      	cbz	r3, 800f350 <_fstat_r+0x1c>
 800f34e:	6023      	str	r3, [r4, #0]
 800f350:	bd38      	pop	{r3, r4, r5, pc}
 800f352:	bf00      	nop
 800f354:	24007e08 	.word	0x24007e08

0800f358 <_isatty_r>:
 800f358:	b538      	push	{r3, r4, r5, lr}
 800f35a:	4d06      	ldr	r5, [pc, #24]	@ (800f374 <_isatty_r+0x1c>)
 800f35c:	2300      	movs	r3, #0
 800f35e:	4604      	mov	r4, r0
 800f360:	4608      	mov	r0, r1
 800f362:	602b      	str	r3, [r5, #0]
 800f364:	f7f1 fb6e 	bl	8000a44 <_isatty>
 800f368:	1c43      	adds	r3, r0, #1
 800f36a:	d102      	bne.n	800f372 <_isatty_r+0x1a>
 800f36c:	682b      	ldr	r3, [r5, #0]
 800f36e:	b103      	cbz	r3, 800f372 <_isatty_r+0x1a>
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	bd38      	pop	{r3, r4, r5, pc}
 800f374:	24007e08 	.word	0x24007e08

0800f378 <_kill_r>:
 800f378:	b538      	push	{r3, r4, r5, lr}
 800f37a:	4d07      	ldr	r5, [pc, #28]	@ (800f398 <_kill_r+0x20>)
 800f37c:	2300      	movs	r3, #0
 800f37e:	4604      	mov	r4, r0
 800f380:	4608      	mov	r0, r1
 800f382:	4611      	mov	r1, r2
 800f384:	602b      	str	r3, [r5, #0]
 800f386:	f7f1 faeb 	bl	8000960 <_kill>
 800f38a:	1c43      	adds	r3, r0, #1
 800f38c:	d102      	bne.n	800f394 <_kill_r+0x1c>
 800f38e:	682b      	ldr	r3, [r5, #0]
 800f390:	b103      	cbz	r3, 800f394 <_kill_r+0x1c>
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	bd38      	pop	{r3, r4, r5, pc}
 800f396:	bf00      	nop
 800f398:	24007e08 	.word	0x24007e08

0800f39c <_getpid_r>:
 800f39c:	f7f1 bad7 	b.w	800094e <_getpid>

0800f3a0 <_init>:
 800f3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a2:	bf00      	nop
 800f3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3a6:	bc08      	pop	{r3}
 800f3a8:	469e      	mov	lr, r3
 800f3aa:	4770      	bx	lr

0800f3ac <_fini>:
 800f3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ae:	bf00      	nop
 800f3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3b2:	bc08      	pop	{r3}
 800f3b4:	469e      	mov	lr, r3
 800f3b6:	4770      	bx	lr
